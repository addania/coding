{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/pages/about.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["props","style","color","fontSize","headerText","data","site","siteMetadata","title","query","m","module","exports","require","default","loader","enqueue","React","createContext","ListLink","display","marginRight","to","children","margin","maxWidth","padding","marginBottom","textShadow","backgroundImage","author","listStyle","float","align","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"8HAEe,WAACA,GAAD,OAEf,yBAAKC,MAAO,CAACC,MAAO,SAAUC,SAAS,SACrC,4BAAKH,EAAMI,cCLb,sCAKe,0BAAGC,EAAH,EAAGA,KAAH,OAEb,kBAAC,IAAD,KAEE,qCAAWA,EAAKC,KAAKC,aAAaC,OAClC,oDACA,kBAAC,EAAD,CAAQJ,WAAW,wBACnB,kBAAC,EAAD,CAAQA,WAAW,uBAPR,IAWFK,EAAK,a,oBChBlB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,iCCA/C,qFAcyBK,QAAOC,QAELC,IAAMC,cAAc,K,uECbzCC,EAAW,SAAAnB,GAAK,OACpB,wBAAIC,MAAO,CAAEmB,QAAQ,eAAiBC,YAAY,SAChD,kBAAC,IAAD,CAAMC,GAAItB,EAAMsB,IAAKtB,EAAMuB,YAIhB,gBAAmB,IAAhBA,EAAe,EAAfA,SACZlB,EAAI,OAYV,OACE,yBAAKJ,MAAO,CAAEuB,OAAO,YAAcC,SAAU,IAAKC,QAAQ,WACxD,4BAAQzB,MAAO,CAAE0B,aAAa,WAC5B,kBAAC,IAAD,CAAML,GAAG,IAAIrB,MAAO,CAAE2B,WAAW,OAASC,gBAAgB,SACxD,wBAAI5B,MAAO,CAAEmB,QAAQ,WAAcf,EAAKC,KAAKC,aAAauB,SAE5D,wBAAI7B,MAAO,CAAE8B,UAAU,OAASC,MAAM,UACpC,kBAACb,EAAD,CAAUG,GAAG,KAAb,QACA,kBAACH,EAAD,CAAUG,GAAG,WAAb,SACA,kBAACH,EAAD,CAAUG,GAAG,aAAb,YAEF,8BAEDC,EACD,4BAAKlB,EAAKC,KAAKC,aAAaC,OAC5B,6BACA,4BAAQP,MAAO,CAAE0B,aAAa,WAC1B,uBAAG1B,MAAO,CAAEmB,QAAQ,SAAWa,MAAO,UAAtC,oCAAmF5B,EAAKC,KAAKC,aAAauB,Y,qNCjBnGI,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGEnB,IAAMoB,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-about-js-318785a29d19039caaf1.js","sourcesContent":["import React from \"react\";\n\nexport default (props) => \n\n<div style={{color: \"purple\", fontSize:\"20px\"}}>\n  <h1>{props.headerText}</h1>\n</div>","import React from \"react\";\nimport Layout from \"../components/layout.js\";\nimport Header from \"../components/header.js\";\nimport { graphql } from \"gatsby\";\n\nexport default ( {data}) => (\n  \n  <Layout>\n    \n    <h1>About {data.site.siteMetadata.title}</h1>\n    <p>Such wow. Very React.</p>\n    <Header headerText=\"Text added by PROPS\" />\n    <Header headerText=\"It's pretty cool\" />\n  </Layout>\n)\n\nexport const query = graphql`\nquery {\n  site {\n    siteMetadata{\n      title\n    }\n  }\n}\n`","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\";\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\n\r\nconst ListLink = props => (\r\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\r\n    <Link to={props.to}>{props.children}</Link>\r\n  </li>\r\n)\r\n\r\nexport default ({ children }) => {\r\nconst data = useStaticQuery (\r\n  graphql`\r\n  query {\r\n    site {\r\n      siteMetadata{\r\n        title\r\n        author\r\n      }\r\n    }\r\n  }\r\n  `\r\n)\r\nreturn (\r\n  <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\r\n    <header style={{ marginBottom: `1.5rem` }}>\r\n      <Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\r\n        <h3 style={{ display: `inline` }}>{data.site.siteMetadata.author}</h3>\r\n      </Link>\r\n      <ul style={{ listStyle: `none`, float: `right` }}>\r\n        <ListLink to=\"/\">Home</ListLink>\r\n        <ListLink to=\"/about/\">About</ListLink>\r\n        <ListLink to=\"/contact/\">Contact</ListLink>\r\n      </ul>\r\n      <hr />\r\n    </header>\r\n    {children}\r\n    <h3>{data.site.siteMetadata.title}</h3>\r\n    <hr />\r\n    <footer style={{ marginBottom: `1.5rem` }}>\r\n        <p style={{ display: `inline`, align: \"right\" }}>Â© 2019 Design and Development by {data.site.siteMetadata.author}</p>\r\n    </footer>\r\n  </div>\r\n)\r\n}","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}