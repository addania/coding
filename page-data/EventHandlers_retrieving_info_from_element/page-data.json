{"componentChunkName":"component---src-templates-blog-post-js","path":"/EventHandlers_retrieving_info_from_element/","webpackCompilationHash":"058d2027618bb5cd7fc0","result":{"data":{"markdownRemark":{"html":"<p>We might need to get some info from the element which called our event handler. For example onClick. With the onClick, we can use the information provided in event object and retrieve data about our componenet which triggered the event from event object. But this approach is not good, becasue it retrieves data from the DOM.</p>\n<pre><code>function handleClick(event) {\n    setMyArray(\n      myArray.concat({\n        firstName: event.target.attributes.name,\n        lastName: event.target.attributes.last,\n        display: event.target.innerHTML,\n      })\n    );\n  }\n\n&#x3C;button onClick={handleClick} name={\"pete\"} id={\"schw\"} last=\"IM HIDDEN\">\n        Add Pete to array\n      &#x3C;/button>\n</code></pre>\n<p>It is better to use it in this way:</p>\n<pre><code>&#x3C;Button\n        onClickZ={(name, id) => {\n          console.log(name, id);\n        }}\n        name=\"I AM NAME\"\n        id=\"IM ID\"\n        children=\"We are the children\"\n        last=\"IM LAST NAME\"\n      />\n\n\nfunction Button({ onClickZ, name, last, children }) {\n  return &#x3C;button onClick={() => onClickZ(name, last)}>{children}&#x3C;/button>;\n}\n</code></pre>","frontmatter":{"title":"Event Handlers"},"excerpt":"We might need to get some info from the element which called our event handler. For example onClick. With the onClick, we can use theâ€¦"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/EventHandlers_retrieving_info_from_element/"}}}