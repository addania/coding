{"componentChunkName":"component---src-templates-blog-post-js","path":"/NaN/","webpackCompilationHash":"b7d083333cd970732537","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://i.imgur.com/ETtwNWY.jpg\" title=\"Photo from wallpapersafari.com\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from wallpapersafari.com</em></p></p>\n<p>\"NaN\" means \"not a number\". Instances that return NaN:</p>\n<ul>\n<li>O/0</li>\n<li>any arithmetic on <code>undefined</code></li>\n<li>operation on a NaN</li>\n</ul>\n<p>Why NaN is difficult? because detecting it is very difficult: NaN does not equal to itself</p>\n<p>NaN is never equal to NaN</p>\n<pre><code>NaN == NaN\nfalse\n</code></pre>\n<p>Luckily we have a function to check if it is NaN. FUnction is called: isNaN</p>\n<pre><code>isNaN(0)\nfalse\n\nisNaN(NaN)\ntrue \n\nisNaN(0 + undefined)\ntrue\n</code></pre>\n<p>Last one is true because any arithmetic operation on undefined is Not a number</p>\n<p>But ow about undefined itself? is it NaN it is not but isNaN says it is which is a mistake:</p>\n<pre><code>isNaN(undefined)\ntrue\n</code></pre>\n<p>To fix this, new JS has a  <code>Number.isNaN</code></p>\n<pre><code> \nNumber.isNaN(NaN)\ntrue \n \nNumber.isNaN(0)\nfalse \n\nNumber.isNaN(undefined)\nfalse\n</code></pre>","frontmatter":{"title":"NaN - Not a Number"},"excerpt":"Photo from wallpapersafari.com \"NaN\" means \"not a number\". Instances that return NaN: O/0 any arithmetic on undefined operation on a NaN Whyâ€¦"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/NaN/"}}}