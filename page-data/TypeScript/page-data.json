{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/","webpackCompilationHash":"63ef7aee3a579c3818e8","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://i.imgur.com/n6YTT3v.jpg\" title=\"Photo by Matej from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Matej from Pexels</em></p></p>\n<h2>Intro</h2>\n<p>This article is basically my notes following and amazing <a href=\"https://www.udemy.com/course/understanding-typescript/\">Typescript course</a> by Maximilian Schwarzm√ºller which I would recommend to everyone who wants to learn Typescript.</p>\n<blockquote>\n<p>Typescript is a <code>superset</code> to Javascript which means it is a programming languages which builds on top of Javascript. It adds new features and advantages to Javascript. It allows to write cleaner, less error-prone and more powerful code.</p>\n</blockquote>\n<blockquote>\n<p>Big disadavantage of Typescript is that it cannot be executed by Javascript environments like a browser. But good news is that Typescript is also a tool - it is also a <code>compiler</code> which we can run on our Typescript files and convert them to vanilla Javascript. Typescript brings new features which are then compiled to vanilla Javascript <code>workarounds</code>. Such features might be easier to write in Typescrip (or using nicer syntax) while it would be an aweful lot of complex code in Javascript.</p>\n</blockquote>\n<blockquote>\n<p>Most importantly Typescript enables defining and using <code>types</code>, which forces us to be more explicit how our code works, it catches unexpected and unnecerssary errors early. It also allows to use next-generation Javascript features which can be then compiled to be used on older browsers. It also adds non-Javascript features like <code>Interfaces</code> and <code>Generics</code> which cannot be comiled to JS (but they only help during development, they actually don't need to be compiled to vanilla JS). It adds meta-programming features like <code>Decorators</code>.</p>\n</blockquote>\n<blockquote>\n<p>To install Typscript you need to have <code>node.js</code> installed:</p>\n</blockquote>\n<pre><code>nodejs.org/en/\n</code></pre>\n<blockquote>\n<p>Node.js will also install NPM tool (node package Manager) which will allow us to intall Typsscript globally with <code>npm install</code> command</p>\n</blockquote>\n<blockquote>\n<p>To install Typescript:</p>\n</blockquote>\n<pre><code>npm install -g typescript\n</code></pre>\n<blockquote>\n<p>Maybe you need to add <code>sudo</code> in front of it:</p>\n</blockquote>\n<pre><code>sudo npm install -g typescript\n</code></pre>\n<blockquote>\n<p>Typescript file has <code>.ts</code> extension, for example:</p>\n</blockquote>\n<pre><code>app.ts\n</code></pre>\n<blockquote>\n<p>To envoke TS compiler we will use command <code>tsc</code></p>\n</blockquote>\n<pre><code>tsc app.ts\n</code></pre>\n<h2>Setting up Typescript project</h2>\n<p><img src=\"https://i.imgur.com/2QEDSKd.jpg?1\" title=\"Photo by Markus Spiske from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Markus Spiske from Pexels</em></p></p>\n<blockquote>\n<p>We will start creating an html file with following content:</p>\n</blockquote>\n<pre><code>&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;title>Typescript Course&#x3C;/title>\n    &#x3C;script src=\"app.js\"  defer>&#x3C;/script>\n&#x3C;/head>\n&#x3C;body>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<blockquote>\n<p>Especially important is the script tag which will envoke our <code>app.js</code> file and will execute is:</p>\n</blockquote>\n<pre><code>&#x3C;script src=\"app.js\"  defer>&#x3C;/script>\n</code></pre>\n<blockquote>\n<p>Then in the same folder add app.ts file</p>\n</blockquote>\n<pre><code>touch app.ts\n</code></pre>\n<blockquote>\n<p>Add some console.log in there:</p>\n</blockquote>\n<pre><code>console.log(\"Monsters for the win!\")\n</code></pre>\n<blockquote>\n<p>Now let's try to compile our <code>.ts</code> file and see if we can console it in browser:</p>\n</blockquote>\n<pre><code>tsc app.ts\n</code></pre>\n<blockquote>\n<p>New file will be produces: <code>app.js</code></p>\n</blockquote>\n<blockquote>\n<p>Now open the index.html in your broswer and <code>CTRL + i</code> to see the console. You should see the message you consoled.</p>\n</blockquote>\n<blockquote>\n<p>Problem is however, for now we will need to always save code, compile it, and manually refresh the browser. But we can automate the browser refresh by installing a tool.</p>\n</blockquote>\n<blockquote>\n<p>Go to your main project folder and initialize npm. It will create the <code>package.json</code> file. Hit enter for each question it asks you</p>\n</blockquote>\n<pre><code>npm init\n</code></pre>\n<blockquote>\n<p>Then we will install a <code>lite-server</code> package:</p>\n</blockquote>\n<pre><code>npm install --save-dev lite-server\n</code></pre>\n<blockquote>\n<p>Then go to <code>package.json</code> and add a <code>start</code> script after the <code>test</code> script (make sure you seprate them with comma):</p>\n</blockquote>\n<pre><code>\"test\": \"echo \\\"Error: no test specified\\\" &#x26;&#x26; exit 1\",\n\"start\": \"lite-server\"\n</code></pre>\n<blockquote>\n<p>Above means that if I type in console <code>npm start</code> I will start a <code>lite server</code> which will serve <code>index.html</code> next to <code>package.json</code> at url:</p>\n</blockquote>\n<pre><code>http://localhost:3000\n</code></pre>\n<blockquote>\n<p>This will automatically reload the page if a file changes in our folder. So for example if I open <code>app.ts</code>, change the message, CTRL+S to save changes and then <code>tsc app.ts</code> in terminal, then my browser page will automatically reload to reflect the changes.</p>\n</blockquote>\n<h2>Core types</h2>\n<p><img src=\"https://i.imgur.com/BBgWcbe.jpg\" title=\"Photo by Ludvig Hedenborg from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Ludvig Hedenborg from Pexels</em></p></p>\n<p>Core types are data types provided by Typescript/Javascript (but they are not exclusive, we can define our own).</p>\n<p>Core types are:</p>\n<ul>\n<li><strong>number</strong> - only one number type no difference between integers or floats (8, 8.6, -10)</li>\n<li><strong>string</strong> - text (\"monster\") - which can be denoted by double or single quotes or backticks:\",' or `</li>\n<li><strong>boolean</strong> - true or false</li>\n</ul>\n<blockquote>\n<p>We can define type in the code is with colon and word number or string, etc:</p>\n</blockquote>\n<pre><code>const add = (n1: number, n2: number) => (n1 + n2);\n</code></pre>\n<blockquote>\n<p>If I passed string to the above function, I will get a compilation error. </p>\n</blockquote>\n<pre><code>add('1', 2)\n</code></pre>\n<blockquote>\n<p>Error will be seen when I compile the code with</p>\n</blockquote>\n<pre><code>tsc app.ts\n</code></pre>\n<blockquote>\n<p>Error will look like this:</p>\n</blockquote>\n<pre><code>error TS2345: Argument of type '\"1\"' is not assignable to parameter of type 'number'.\n</code></pre>\n<blockquote>\n<p>I will only get error during <code>compilation</code> (during development), not during runtime (because browsers do not have built-in Typescript support). It does not change Javascript to work differently. But it adds extra sanity check!</p>\n</blockquote>\n<blockquote>\n<p>Important is also to notice that even though compilation threw and error, by default the file was <code>still</code> compiled and served (but we can setup a blocker for that later).</p>\n</blockquote>\n<blockquote>\n<p>Javascript uses <code>dynamic types</code> which are resolved at runtime. Typescript uses <code>static types</code> which are set during development, allowing us to catch errors early (before they go to production).</p>\n</blockquote>\n<blockquote>\n<p><code>Type inference</code> means that Typescript tries to detect type of data. </p>\n</blockquote>\n<blockquote>\n<p>If you initialize a <code>constant</code> with number 5, it will be of interred type 5 when you hover over the number1 in <code>.ts</code> file. It is because as for constants you cannot re-assign their value:</p>\n</blockquote>\n<pre><code>const number1=5;\n// if you hover over number1 you will see: const number1: 5\n</code></pre>\n<blockquote>\n<p>If you initialize a <code>variable</code> with number 5, it will be of inferred type number (as for variables you can re-assign value):</p>\n</blockquote>\n<pre><code>let number2=5;\nlet number2: number\n</code></pre>\n<blockquote>\n<p>We can actually write our own type in both declarations:</p>\n</blockquote>\n<pre><code>const number1: number = 5;\nlet number2: number = 5;\n</code></pre>\n<blockquote>\n<p>But it is redundant and not encouraged (not best practice), as Typescript can infer the data type itself from how I initialize the constant or variable.</p>\n</blockquote>\n<blockquote>\n<p>Best practice would be to define a type if you do not assign value but only initialize a variable:</p>\n</blockquote>\n<pre><code>let number3;\n</code></pre>\n<blockquote>\n<p>Then it would be encouraged to define type:</p>\n</blockquote>\n<pre><code>let number3: number;\n</code></pre>\n<h2>Object types</h2>\n<p><img src=\"https://i.imgur.com/dGwZPCQ.jpg\" title=\"Photo from mocah.org\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from mocah.org</em></p></p>\n<blockquote>\n<p>Typescript automatically infers object keys and complains when we access property which does not exist:</p>\n</blockquote>\n<pre><code>const hero = {\n    name: \"Addania\",\n    title: \"The Horde Slayer\"\n}\nconsole.log(hero.nickname);\n</code></pre>\n<blockquote>\n<p>It also reckognizes which key is of which type. Syntaxs below is an <code>object type</code> in Typescript:</p>\n</blockquote>\n<pre><code>const hero: {\n    name: string;\n    title: string;\n}\n</code></pre>\n<blockquote>\n<p>We can define <code>object type</code> explicitly in a very generic way (but not recommended, we prefer inference):</p>\n</blockquote>\n<pre><code>const hero: object = {\n    name: \"Addania\",\n    title: \"The Horde Slayer\"\n}\n</code></pre>\n<p>or</p>\n<pre><code>const hero: {} = {\n    name: \"Addania\",\n    title: \"The Horde Slayer\"\n}\n</code></pre>\n<blockquote>\n<p>But we only gave info to Typescript that this should be an object but we did not define any keys and their type. So if we want to call <code>hero.name</code>, we will get Typescript complaining</p>\n</blockquote>\n<blockquote>\n<p>Another way to provide Typescript info about the structure of an object looks like this(also not recommended, because we do prefer inference):</p>\n</blockquote>\n<pre><code>const hero: {name: string; title: string } = {\n    name: \"Addania\",\n    title: \"The Horde Slayer\"\n}\n</code></pre>\n<blockquote>\n<p>We can also add types for nested objects. Example object:</p>\n</blockquote>\n<pre><code>const hero = {\n  name: \"Addania\",\n  title: \"The Horde Slayer\",\n  mounts: [\"Spectral Steed\", \"Blue Proto-Drake\"],\n  skills: {\n    enchanting: 360,\n    jewelcrafting: 320\n  }\n}\n</code></pre>\n<blockquote>\n<p>This is how types would be defined:</p>\n</blockquote>\n<pre><code>const hero:\n{\n    name: string;\n    title: string;\n    mounts: string[];\n    skills: {\n        enchanting: number;\n        jewelcrafting: number;\n    };\n}\n = {\n  name: \"Addania\",\n  title: \"The Horde Slayer\",\n  mounts: [\"Spectral Steed\", \"Blue Proto-Drake\"],\n  skills: {\n    enchanting: 360,\n    jewelcrafting: 320\n  }\n}\n</code></pre>\n<h2>Array type</h2>\n<p><img src=\"https://i.imgur.com/PqcRvxa.jpg\" style=\"width: 800px\"><p style=\"font-size: 12px; text-align: right; width: 100%\"><em>Photo from wowhead.com</em></p></p>\n<blockquote>\n<p>Let's imagine we have an array of all our very precious pets:</p>\n</blockquote>\n<pre><code>let pets = [\"Wind Rider Cub\", \"Phoenix Hatchling\"]\n</code></pre>\n<blockquote>\n<p>To define type as array of strings we say:</p>\n</blockquote>\n<pre><code>let pets: string[];\n</code></pre>\n<blockquote>\n<p>To define type as array of numbers we say:</p>\n</blockquote>\n<pre><code>let hordeKillsPerDay: number[];\n</code></pre>\n<blockquote>\n<p>To define type as mixed array (of numbers or strings)we say:</p>\n</blockquote>\n<pre><code>let mixedAchievements: any[];\n</code></pre>\n<h2>Tuples</h2>\n<p><img src=\"https://i.imgur.com/OTOEqWp.jpg\" title=\"Photo by Gela Del Rosario from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Gela Del Rosario from Pexels</em></p></p>\n<blockquote>\n<p>Typescript  allows us to add a new type: <code>Tuple</code>. They are available in other programming languages but not in JS. Tuples are fixed length arrays. Example tuple:</p>\n</blockquote>\n<pre><code>const profession= [1, \"cooking\"]\n</code></pre>\n<blockquote>\n<p>By inference Typescript will think that profession is an array of either a number or string.</p>\n</blockquote>\n<pre><code>profession: (number | string)[]\n</code></pre>\n<blockquote>\n<p>Typescript will allow to add elements to the array or re-assign values:</p>\n</blockquote>\n<pre><code>profession.push(\"first aid\");\nprofession[1]=2;\n</code></pre>\n<blockquote>\n<p>So in this scenario, inference does not work the way we want it to work. How to say to Typescript that we can only have exactly 2 elements? Tuple is perfect for this.</p>\n</blockquote>\n<pre><code>const role: [number, string] = [1, \"cooking\"]\n</code></pre>\n<blockquote>\n<p>This tells Typescript I want a special array which should have exactly two elements out of which first one is number and second one is string. Please note, <code>.push</code> will still work as push is exception and works on Tuples!</p>\n</blockquote>\n<h2>Syntax:</h2>\n<p><img src=\"https://i.imgur.com/equqbFL.jpg\" title=\"Photo by Miguel Constantin Montes from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Miguel Constantin Montes from Pexels</em></p></p>\n<blockquote>\n<p><code>!</code> means I am sure my element with certain ID will always be there becasue I checked that id:</p>\n</blockquote>\n<pre><code>const input1 = document.getElementById(\"num1\")!;\n</code></pre>\n<blockquote>\n<p><code>as HTMLInputElement</code> means TYPECASTING which says what kind of element it will be, in following case it will be an input element:</p>\n</blockquote>\n<pre><code>const input1 = document.getElementById(\"num1\")! as HTMLInputElement;\n</code></pre>\n<h2>Best practises tips:</h2>\n<p><img src=\"https://i.imgur.com/VDxi6vE.jpg\" title=\"Photo by Porapak Apichodilok from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Porapak Apichodilok from Pexels</em></p></p>\n<blockquote>\n<p><strong>Do not ignore</strong></p>\n</blockquote>\n<p>Do not use<code>@ts-ignore</code>. It turns off the compilr completely from the next line and prevents from spotting type errors</p>\n<blockquote>\n<p><strong>Do not use React.FunctionComponent</strong>\nEee:</p>\n</blockquote>\n<pre><code>type Props = { foo: string }\nconst Foo: React.FunctionComponent&#x3C;Props> = ({ foo }) => &#x3C;div>{foo}&#x3C;/div>\n</code></pre>\n<p>Approved:</p>\n<pre><code>const Foo = ({ foo }: Props) => &#x3C;div>{foo}&#x3C;/div>\n</code></pre>\n<blockquote>\n<p><strong>Do not use enums</strong></p>\n</blockquote>\n<p>Nein:</p>\n<pre><code>enum Direction { Up, Down, Left, Right}\n</code></pre>\n<p>Jaaaa:</p>\n<pre><code>type Direction = \"up\" | \"down\" | \"left\" | \"right\"\n</code></pre>\n<blockquote>\n<p><strong>Do not us wide types lik objct or any</strong></p>\n</blockquote>\n<p>Always try to find concrete types</p>\n<p><img src=\"https://i.imgur.com/ob6G3qI.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>","frontmatter":{"title":"TypeScript"},"excerpt":"Photo by Matej from Pexels Intro This article is basically my notes following and amazing Typescript course by Maximilian Schwarzm√ºller‚Ä¶"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/TypeScript/"}}}