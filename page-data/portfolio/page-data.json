{"componentChunkName":"component---src-pages-portfolio-js","path":"/portfolio/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"fde7a3f5-83d9-561e-a544-0e24a672bae5","excerpt":"Did you ever want to create a nice fireworks or confetti animation in your page? We will be using this library: https://www.npmjs.com…","rawMarkdownBody":"\n![](https://i.imgur.com/5x14MUh.gif \"Photo by Unreal Engine\")\n\n> Did you ever want to create a nice fireworks or confetti animation in your page?\n\n> We will be using this library: https://www.npmjs.com/package/tsparticles-engine\n\n> Here are some demos: https://particles.js.org/samples/presets/index.html\n\n> Make sure you first install following dependencies:\n\n```\nnpm install react-particles\nnpm install react-tsparticles\nnpm install tsparticles\nnpm install tsparticles-engine\nnpm install tsparticles-preset-confetti\nnpm install tsparticles-preset-fireworks\n```\n\n> Your package.json file should contain:\n\n```\n    \"react-particles\": \"^2.9.3\",\n    \"react-tsparticles\": \"^2.9.3\",\n    \"tsparticles\": \"^2.9.3\",\n    \"tsparticles-engine\": \"^2.9.3\",\n    \"tsparticles-preset-confetti\": \"^2.9.3\",\n    \"tsparticles-preset-fireworks\": \"^2.9.3\",\n```\n\n**Fireworks**\n\n> We will first create some very easy `Fireworks` component which will primarily use fireworks-presets - some default values form the library\n\n> Create a component Fireworks somewhere in your folder structure. In my case I created it in `components/animationEffects/Fireworks.tsx`\n\n```\nimport React from \"react\"\nimport Particles from \"react-tsparticles\";\nimport { loadFireworksPreset } from \"tsparticles-preset-fireworks\";\n\nexport const Fireworks = () => {\n  const customInit = async (engine) => {\n    // this adds the preset to tsParticles, you can safely use the\n    await loadFireworksPreset(engine);\n  };\n  return (\n    <Particles\n      id=\"tsparticles\"\n      init={customInit}\n      options={{ preset: \"fireworks\" }}\n    />\n  );\n};\n```\n\n> Then import it to your main application.\n\n```\nimport * as React from \"react\";\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nimport { Fireworks } from \"./components/animationEffects/Fireworks\";\n\nconst Home: NextPage = () => {\n  const [showAnimation, setShowAnimation] = React.useState(false);\n\n  return (\n    <>\n      <Head>\n        <title>Fireworks</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          minHeight: \"100vh\",\n          backgroundImage: \"linear-gradient(to bottom, #2e026d, #15162c)\",\n        }}\n      >\n        {showAnimation && <Fireworks />}\n        <button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(true);\n            setTimeout(() => {\n              setShowAnimation(false);\n            }, 5000);\n          }}\n        >\n          ✅ Start fireworks\n        </button>\n        <button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(false);\n          }}\n        >\n          ❌ End fireworks\n        </button>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n\n```\n\n> Notice how we have two buttons: Start and End fireworks.\n\n> Start button will start the animation and there is a timer set to stop it automatically after 5 seconds\n\n> Alternatively you can stop the animation manually with the End button.\n\n> It is worth noting that this fireworks preset will be rendered in the background of your page and all content needs to have `z-index: 1` so that it is shown on top of your anomation.\n\n**Confetti**\n\n> We will now create some very easy `Confetti` component which will primarily use confetti-presets - some default values form the library\n\n> Create a component Confetti somewhere in your folder structure. In my case I created it in `components/animationEffects/Confetti.tsx`\n\n```\nimport React from \"react\"\nimport Particles from \"react-tsparticles\";\nimport { loadConfettiPreset } from \"tsparticles-preset-confetti\";\n\nexport const Confetti = () => {\n  const customInit = async (engine) => {\n    // this adds the preset to tsParticles, you can safely use the\n    await loadConfettiPreset(engine);\n  };\n  return (\n    <Particles\n      id=\"tsparticles\"\n      init={customInit}\n      options={{ preset: \"confetti\" }}\n    />\n  );\n};\n\n```\n\n> Then import it to your main application.\n\n```\nimport * as React from \"react\";\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nimport { Confetti } from \"./components/animationEffects/Confetti\";\n\nconst Home: NextPage = () => {\n  const [showAnimation, setShowAnimation] = React.useState(false);\n\n  return (\n    <>\n      <Head>\n        <title>Fireworks</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          minHeight: \"100vh\",\n          backgroundImage: \"linear-gradient(to bottom, #2e026d, #15162c)\",\n        }}\n      >\n        {showAnimation && <Confetti />}\n        <button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(true);\n            setTimeout(() => {\n              setShowAnimation(false);\n            }, 5000);\n          }}\n        >\n          ✅ Start confetti\n        </button>\n        <button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(false);\n          }}\n        >\n          ❌ End confetti\n        </button>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n\n```\n\n> Notice how we have two buttons: Start and End confetti.\n\n> Start button will start the animation and there is a timer set to stop it automatically after 5 seconds\n\n> Alternatively you can stop the animation manually with the End button.\n\n> It is worth noting that this fireworks preset will be rendered in the background of your page and all content needs to have `z-index: 1` so that it is shown on top of your anomation.\n\n**Polygons**\n\n> We will now create some very easy `Polygons` component which will use its own options\n\n> Create a component Polygons somewhere in your folder structure. In my case I created it in `components/animationEffects/Polygons.tsx`\n\n```\nimport React from \"react\"\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\n\nexport const Polygons = () => {\n  const particlesInit = async (main) => {\n    console.log(main);\n    // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n    // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n    // starting from v2 you can add only the features you need reducing the bundle size\n    await loadFull(main);\n  };\n\n  const particlesLoaded = (container) => {\n    console.log(container);\n  };\n\n  return (\n    <Particles\n      id=\"tsparticles\"\n      init={particlesInit}\n      loaded={particlesLoaded}\n      options={{\n        background: {\n          color: {\n            value: \"#0d47a1\",\n          },\n        },\n        fpsLimit: 120,\n        interactivity: {\n          events: {\n            onClick: {\n              enable: true,\n              mode: \"push\",\n            },\n            onHover: {\n              enable: true,\n              mode: \"repulse\",\n            },\n            resize: true,\n          },\n          modes: {\n            push: {\n              quantity: 4,\n            },\n            repulse: {\n              distance: 200,\n              duration: 0.4,\n            },\n          },\n        },\n        particles: {\n          color: {\n            value: \"#ffffff\",\n          },\n          links: {\n            color: \"#ffffff\",\n            distance: 150,\n            enable: true,\n            opacity: 0.5,\n            width: 1,\n          },\n          collisions: {\n            enable: true,\n          },\n          move: {\n            directions: \"none\",\n            enable: true,\n            outModes: {\n              default: \"bounce\",\n            },\n            random: false,\n            speed: 6,\n            straight: false,\n          },\n          number: {\n            density: {\n              enable: true,\n              area: 800,\n            },\n            value: 80,\n          },\n          opacity: {\n            value: 0.5,\n          },\n          shape: {\n            type: \"circle\",\n          },\n          size: {\n            value: { min: 1, max: 5 },\n          },\n        },\n        detectRetina: true,\n      }}\n    />\n  );\n};\n\n```\n\n> Then import it to your main application.\n\n```\nimport * as React from \"react\";\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nimport { Polygons } from \"./components/animationEffects/Polygons\";\n\nconst Home: NextPage = () => {\n  const [showAnimation, setShowAnimation] = React.useState(false);\n\n  return (\n    <>\n      <Head>\n        <title>Fireworks</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          minHeight: \"100vh\",\n          backgroundImage: \"linear-gradient(to bottom, #2e026d, #15162c)\",\n        }}\n      >\n        {showAnimation && <Polygons />}\n        <button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(true);\n            setTimeout(() => {\n              setShowAnimation(false);\n            }, 5000);\n          }}\n        >\n          ✅ Start polygons\n        </button>\n        <button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(false);\n          }}\n        >\n          ❌ End polygons\n        </button>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n```\n\n> Notice that all the options are customizable and you can play around with them. For example you can change the particles shape, size, density, ... just to mension a few:\n\n```\nshape: {\n    type: \"circle\",\n},\nsize: {\n    value: { min: 1, max: 5 },\n},\n```\n\n> Notice how we have two buttons: Start and End confetti.\n\n> Start button will start the animation and there is a timer set to stop it automatically after 5 seconds\n\n> Alternatively you can stop the animation manually with the End button.\n\n> It is worth noting that this fireworks preset will be rendered in the background of your page and all content needs to have `z-index: 1` so that it is shown on top of your anomation.\n","frontmatter":{"date":"2023-05-20","title":"Particle animations in React","category":"knowledge-base"},"fields":{"slug":"/Animations_In_React/"},"timeToRead":6,"html":"<p><img src=\"https://i.imgur.com/5x14MUh.gif\" title=\"Photo by Unreal Engine\"></p>\n<blockquote>\n<p>Did you ever want to create a nice fireworks or confetti animation in your page?</p>\n</blockquote>\n<blockquote>\n<p>We will be using this library: <a href=\"https://www.npmjs.com/package/tsparticles-engine\">https://www.npmjs.com/package/tsparticles-engine</a></p>\n</blockquote>\n<blockquote>\n<p>Here are some demos: <a href=\"https://particles.js.org/samples/presets/index.html\">https://particles.js.org/samples/presets/index.html</a></p>\n</blockquote>\n<blockquote>\n<p>Make sure you first install following dependencies:</p>\n</blockquote>\n<pre><code>npm install react-particles\nnpm install react-tsparticles\nnpm install tsparticles\nnpm install tsparticles-engine\nnpm install tsparticles-preset-confetti\nnpm install tsparticles-preset-fireworks\n</code></pre>\n<blockquote>\n<p>Your package.json file should contain:</p>\n</blockquote>\n<pre><code>    \"react-particles\": \"^2.9.3\",\n    \"react-tsparticles\": \"^2.9.3\",\n    \"tsparticles\": \"^2.9.3\",\n    \"tsparticles-engine\": \"^2.9.3\",\n    \"tsparticles-preset-confetti\": \"^2.9.3\",\n    \"tsparticles-preset-fireworks\": \"^2.9.3\",\n</code></pre>\n<p><strong>Fireworks</strong></p>\n<blockquote>\n<p>We will first create some very easy <code>Fireworks</code> component which will primarily use fireworks-presets - some default values form the library</p>\n</blockquote>\n<blockquote>\n<p>Create a component Fireworks somewhere in your folder structure. In my case I created it in <code>components/animationEffects/Fireworks.tsx</code></p>\n</blockquote>\n<pre><code>import React from \"react\"\nimport Particles from \"react-tsparticles\";\nimport { loadFireworksPreset } from \"tsparticles-preset-fireworks\";\n\nexport const Fireworks = () => {\n  const customInit = async (engine) => {\n    // this adds the preset to tsParticles, you can safely use the\n    await loadFireworksPreset(engine);\n  };\n  return (\n    &#x3C;Particles\n      id=\"tsparticles\"\n      init={customInit}\n      options={{ preset: \"fireworks\" }}\n    />\n  );\n};\n</code></pre>\n<blockquote>\n<p>Then import it to your main application.</p>\n</blockquote>\n<pre><code>import * as React from \"react\";\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nimport { Fireworks } from \"./components/animationEffects/Fireworks\";\n\nconst Home: NextPage = () => {\n  const [showAnimation, setShowAnimation] = React.useState(false);\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Fireworks&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          minHeight: \"100vh\",\n          backgroundImage: \"linear-gradient(to bottom, #2e026d, #15162c)\",\n        }}\n      >\n        {showAnimation &#x26;&#x26; &#x3C;Fireworks />}\n        &#x3C;button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(true);\n            setTimeout(() => {\n              setShowAnimation(false);\n            }, 5000);\n          }}\n        >\n          ✅ Start fireworks\n        &#x3C;/button>\n        &#x3C;button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(false);\n          }}\n        >\n          ❌ End fireworks\n        &#x3C;/button>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default Home;\n</code></pre>\n<blockquote>\n<p>Notice how we have two buttons: Start and End fireworks.</p>\n</blockquote>\n<blockquote>\n<p>Start button will start the animation and there is a timer set to stop it automatically after 5 seconds</p>\n</blockquote>\n<blockquote>\n<p>Alternatively you can stop the animation manually with the End button.</p>\n</blockquote>\n<blockquote>\n<p>It is worth noting that this fireworks preset will be rendered in the background of your page and all content needs to have <code>z-index: 1</code> so that it is shown on top of your anomation.</p>\n</blockquote>\n<p><strong>Confetti</strong></p>\n<blockquote>\n<p>We will now create some very easy <code>Confetti</code> component which will primarily use confetti-presets - some default values form the library</p>\n</blockquote>\n<blockquote>\n<p>Create a component Confetti somewhere in your folder structure. In my case I created it in <code>components/animationEffects/Confetti.tsx</code></p>\n</blockquote>\n<pre><code>import React from \"react\"\nimport Particles from \"react-tsparticles\";\nimport { loadConfettiPreset } from \"tsparticles-preset-confetti\";\n\nexport const Confetti = () => {\n  const customInit = async (engine) => {\n    // this adds the preset to tsParticles, you can safely use the\n    await loadConfettiPreset(engine);\n  };\n  return (\n    &#x3C;Particles\n      id=\"tsparticles\"\n      init={customInit}\n      options={{ preset: \"confetti\" }}\n    />\n  );\n};\n</code></pre>\n<blockquote>\n<p>Then import it to your main application.</p>\n</blockquote>\n<pre><code>import * as React from \"react\";\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nimport { Confetti } from \"./components/animationEffects/Confetti\";\n\nconst Home: NextPage = () => {\n  const [showAnimation, setShowAnimation] = React.useState(false);\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Fireworks&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          minHeight: \"100vh\",\n          backgroundImage: \"linear-gradient(to bottom, #2e026d, #15162c)\",\n        }}\n      >\n        {showAnimation &#x26;&#x26; &#x3C;Confetti />}\n        &#x3C;button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(true);\n            setTimeout(() => {\n              setShowAnimation(false);\n            }, 5000);\n          }}\n        >\n          ✅ Start confetti\n        &#x3C;/button>\n        &#x3C;button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(false);\n          }}\n        >\n          ❌ End confetti\n        &#x3C;/button>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default Home;\n</code></pre>\n<blockquote>\n<p>Notice how we have two buttons: Start and End confetti.</p>\n</blockquote>\n<blockquote>\n<p>Start button will start the animation and there is a timer set to stop it automatically after 5 seconds</p>\n</blockquote>\n<blockquote>\n<p>Alternatively you can stop the animation manually with the End button.</p>\n</blockquote>\n<blockquote>\n<p>It is worth noting that this fireworks preset will be rendered in the background of your page and all content needs to have <code>z-index: 1</code> so that it is shown on top of your anomation.</p>\n</blockquote>\n<p><strong>Polygons</strong></p>\n<blockquote>\n<p>We will now create some very easy <code>Polygons</code> component which will use its own options</p>\n</blockquote>\n<blockquote>\n<p>Create a component Polygons somewhere in your folder structure. In my case I created it in <code>components/animationEffects/Polygons.tsx</code></p>\n</blockquote>\n<pre><code>import React from \"react\"\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\n\nexport const Polygons = () => {\n  const particlesInit = async (main) => {\n    console.log(main);\n    // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n    // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n    // starting from v2 you can add only the features you need reducing the bundle size\n    await loadFull(main);\n  };\n\n  const particlesLoaded = (container) => {\n    console.log(container);\n  };\n\n  return (\n    &#x3C;Particles\n      id=\"tsparticles\"\n      init={particlesInit}\n      loaded={particlesLoaded}\n      options={{\n        background: {\n          color: {\n            value: \"#0d47a1\",\n          },\n        },\n        fpsLimit: 120,\n        interactivity: {\n          events: {\n            onClick: {\n              enable: true,\n              mode: \"push\",\n            },\n            onHover: {\n              enable: true,\n              mode: \"repulse\",\n            },\n            resize: true,\n          },\n          modes: {\n            push: {\n              quantity: 4,\n            },\n            repulse: {\n              distance: 200,\n              duration: 0.4,\n            },\n          },\n        },\n        particles: {\n          color: {\n            value: \"#ffffff\",\n          },\n          links: {\n            color: \"#ffffff\",\n            distance: 150,\n            enable: true,\n            opacity: 0.5,\n            width: 1,\n          },\n          collisions: {\n            enable: true,\n          },\n          move: {\n            directions: \"none\",\n            enable: true,\n            outModes: {\n              default: \"bounce\",\n            },\n            random: false,\n            speed: 6,\n            straight: false,\n          },\n          number: {\n            density: {\n              enable: true,\n              area: 800,\n            },\n            value: 80,\n          },\n          opacity: {\n            value: 0.5,\n          },\n          shape: {\n            type: \"circle\",\n          },\n          size: {\n            value: { min: 1, max: 5 },\n          },\n        },\n        detectRetina: true,\n      }}\n    />\n  );\n};\n</code></pre>\n<blockquote>\n<p>Then import it to your main application.</p>\n</blockquote>\n<pre><code>import * as React from \"react\";\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nimport { Polygons } from \"./components/animationEffects/Polygons\";\n\nconst Home: NextPage = () => {\n  const [showAnimation, setShowAnimation] = React.useState(false);\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Fireworks&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          minHeight: \"100vh\",\n          backgroundImage: \"linear-gradient(to bottom, #2e026d, #15162c)\",\n        }}\n      >\n        {showAnimation &#x26;&#x26; &#x3C;Polygons />}\n        &#x3C;button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(true);\n            setTimeout(() => {\n              setShowAnimation(false);\n            }, 5000);\n          }}\n        >\n          ✅ Start polygons\n        &#x3C;/button>\n        &#x3C;button\n          style={{ zIndex: 1 }}\n          onClick={() => {\n            setShowAnimation(false);\n          }}\n        >\n          ❌ End polygons\n        &#x3C;/button>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default Home;\n</code></pre>\n<blockquote>\n<p>Notice that all the options are customizable and you can play around with them. For example you can change the particles shape, size, density, ... just to mension a few:</p>\n</blockquote>\n<pre><code>shape: {\n    type: \"circle\",\n},\nsize: {\n    value: { min: 1, max: 5 },\n},\n</code></pre>\n<blockquote>\n<p>Notice how we have two buttons: Start and End confetti.</p>\n</blockquote>\n<blockquote>\n<p>Start button will start the animation and there is a timer set to stop it automatically after 5 seconds</p>\n</blockquote>\n<blockquote>\n<p>Alternatively you can stop the animation manually with the End button.</p>\n</blockquote>\n<blockquote>\n<p>It is worth noting that this fireworks preset will be rendered in the background of your page and all content needs to have <code>z-index: 1</code> so that it is shown on top of your anomation.</p>\n</blockquote>"}},{"node":{"id":"22879567-f4c5-540c-8863-c21974980538","excerpt":"How to add music to your level Make sure you have a .wav mmusic file. It will not work with .mp3 files Drag and drop those files to your…","rawMarkdownBody":"\n![](https://i.imgur.com/WyvNrgk.png \"Photo by Unreal Engine\")\n\n**How to add music to your level**\n\n> Make sure you have a `.wav` mmusic file. It will not work with `.mp3` files\n\n> Drag and drop those files to your main level.\n\n> Also add a Sounds > `SoundCue`\n\n> Then open it and you will see there an `Output` widget.\n\n> Right-click and Add `Wave Player`\n\n> In top left select your wav file.\n\n> You can add another .wav file in the same manner.\n\n> If you want both, you need to add a `Concatenator` widget\n\n![](https://imgur.com/gdUzYqr.png \"Photo by Addania\")\n","frontmatter":{"date":"2023-05-19","title":"Unreal Engine","category":"knowledge-base"},"fields":{"slug":"/Unreal_Engine/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/WyvNrgk.png\" title=\"Photo by Unreal Engine\"></p>\n<p><strong>How to add music to your level</strong></p>\n<blockquote>\n<p>Make sure you have a <code>.wav</code> mmusic file. It will not work with <code>.mp3</code> files</p>\n</blockquote>\n<blockquote>\n<p>Drag and drop those files to your main level.</p>\n</blockquote>\n<blockquote>\n<p>Also add a Sounds > <code>SoundCue</code></p>\n</blockquote>\n<blockquote>\n<p>Then open it and you will see there an <code>Output</code> widget.</p>\n</blockquote>\n<blockquote>\n<p>Right-click and Add <code>Wave Player</code></p>\n</blockquote>\n<blockquote>\n<p>In top left select your wav file.</p>\n</blockquote>\n<blockquote>\n<p>You can add another .wav file in the same manner.</p>\n</blockquote>\n<blockquote>\n<p>If you want both, you need to add a <code>Concatenator</code> widget</p>\n</blockquote>\n<p><img src=\"https://imgur.com/gdUzYqr.png\" title=\"Photo by Addania\"></p>"}},{"node":{"id":"0526ca85-e27d-5d77-9a86-99904ba78b6d","excerpt":"Photo from docker.com Running Postgres database in Docker If you build a t3app from: https://create.t3.gg/ with this command: it will…","rawMarkdownBody":"\n![](https://i.imgur.com/NIS6FUU.png \"Photo from docker.com\")<p style=\"font-size: 12px; text-align: right\">_Photo from docker.com_</p>\n\n**Running Postgres database in Docker**\n\n> If you build a t3app from: https://create.t3.gg/ with this command:\n\n```\nnpm create t3-app@latest\n\n```\n\n> it will automatically come with the sqlite database\n\n> What if we want to run postgreSQL locally using docker? This would be only a development database and will not polute our production database\n\n> Now how to do it?\n\n**Step 1: Install Docker**\n\n> To install Docker, follow the instructions for your operating system on the Docker website:\n> https://docs.docker.com/get-docker/\n\n**Step 2: Create a Docker Compose file**\n\n> Create a new file in the root directory of your project called docker-compose.yml with the following contents:\n\n```\nversion: '3'\n\nservices:\n  db:\n    image: postgres\n    restart: always\n    environment:\n      POSTGRES_USER: <your_postgres_user>\n      POSTGRES_PASSWORD: <your_postgres_password>\n      POSTGRES_DB: <your_postgres_database_name>\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - db_data:/var/lib/postgresql/data\n\nvolumes:\n  db_data:\n```\n\n> Replace <your_postgres_user>, <your_postgres_password>, and <your_postgres_database_name> with your own values.\n\n> This file defines a Docker service called db which uses the official PostgreSQL image, exposes the PostgreSQL port (5432) on your host machine, and mounts a named volume to persist the data.\n\n**Step 3: Modify schema.prisma**\n\n> Modify your `schema.prisma` file to use the PostgreSQL datasource. Replace the datasource block with the following:\n\n```\ndatasource db {\n  provider = \"postgresql\"\n  url = \"postgresql://<your_postgres_user>:<your_postgres_password>@localhost:5432/<your_postgres_database_name>?schema=public\"\n}\n```\n\n> Replace <your_postgres_user>, <your_postgres_password>, and <your_postgres_database_name> with your own values.\n\n**Step 4: Stop the current t3app**\n\n> Stop the current t3app instance by pressing Ctrl+C in the terminal where it's running.\n\n**Step 5: Start the Docker container**\n\n> Start the PostgreSQL Docker container by running the following command in your project root directory:\n\n```\ndocker-compose up -d\n```\n\n> This will start the PostgreSQL container in the background.\n\n**Step 6: Generate Prisma client**\n\n> Generate a new Prisma client to reflect the changes in your schema and datasource. Run the following command in your project root directory:\n\n```\nnpx prisma generate\n```\n\n> This will regenerate your Prisma client with the updated schema.\n\n**Step 7: Verify the new database connection**\n\n> Verify that the new database connection is working correctly by running the following command in your project root directory:\n\n```\nnpx prisma studio\n```\n\n> This will open Prisma Studio, a web-based tool to view and edit your data. Verify that you can see your data and that you can make changes.\n\n> That's it! You've successfully switched your SQLite database to PostgreSQL and set it up in a Docker container. You can now start your t3app as usual and it will use the new database.\n\n**Troubleshooting**\n\n> If you already had some migration in the sqlite and then switched to new database, in our case Postgres, make sure to delete the whole migrations folder.\n> Then run new migrations:\n\n```\nnpx prisma migrate dev\n```\n\n> And then restart the prisma studio\n\n```\nnpx prisma studio\n```\n","frontmatter":{"date":"2023-05-05","title":"Running Postgres database in Docker","category":"knowledge-base"},"fields":{"slug":"/Postgres_In_Docker/"},"timeToRead":3,"html":"<p><img src=\"https://i.imgur.com/NIS6FUU.png\" title=\"Photo from docker.com\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from docker.com</em></p></p>\n<p><strong>Running Postgres database in Docker</strong></p>\n<blockquote>\n<p>If you build a t3app from: <a href=\"https://create.t3.gg/\">https://create.t3.gg/</a> with this command:</p>\n</blockquote>\n<pre><code>npm create t3-app@latest\n</code></pre>\n<blockquote>\n<p>it will automatically come with the sqlite database</p>\n</blockquote>\n<blockquote>\n<p>What if we want to run postgreSQL locally using docker? This would be only a development database and will not polute our production database</p>\n</blockquote>\n<blockquote>\n<p>Now how to do it?</p>\n</blockquote>\n<p><strong>Step 1: Install Docker</strong></p>\n<blockquote>\n<p>To install Docker, follow the instructions for your operating system on the Docker website:\n<a href=\"https://docs.docker.com/get-docker/\">https://docs.docker.com/get-docker/</a></p>\n</blockquote>\n<p><strong>Step 2: Create a Docker Compose file</strong></p>\n<blockquote>\n<p>Create a new file in the root directory of your project called docker-compose.yml with the following contents:</p>\n</blockquote>\n<pre><code>version: '3'\n\nservices:\n  db:\n    image: postgres\n    restart: always\n    environment:\n      POSTGRES_USER: &#x3C;your_postgres_user>\n      POSTGRES_PASSWORD: &#x3C;your_postgres_password>\n      POSTGRES_DB: &#x3C;your_postgres_database_name>\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - db_data:/var/lib/postgresql/data\n\nvolumes:\n  db_data:\n</code></pre>\n<blockquote>\n<p>Replace &#x3C;your<em>postgres</em>user>, &#x3C;your<em>postgres</em>password>, and &#x3C;your<em>postgres</em>database_name> with your own values.</p>\n</blockquote>\n<blockquote>\n<p>This file defines a Docker service called db which uses the official PostgreSQL image, exposes the PostgreSQL port (5432) on your host machine, and mounts a named volume to persist the data.</p>\n</blockquote>\n<p><strong>Step 3: Modify schema.prisma</strong></p>\n<blockquote>\n<p>Modify your <code>schema.prisma</code> file to use the PostgreSQL datasource. Replace the datasource block with the following:</p>\n</blockquote>\n<pre><code>datasource db {\n  provider = \"postgresql\"\n  url = \"postgresql://&#x3C;your_postgres_user>:&#x3C;your_postgres_password>@localhost:5432/&#x3C;your_postgres_database_name>?schema=public\"\n}\n</code></pre>\n<blockquote>\n<p>Replace &#x3C;your<em>postgres</em>user>, &#x3C;your<em>postgres</em>password>, and &#x3C;your<em>postgres</em>database_name> with your own values.</p>\n</blockquote>\n<p><strong>Step 4: Stop the current t3app</strong></p>\n<blockquote>\n<p>Stop the current t3app instance by pressing Ctrl+C in the terminal where it's running.</p>\n</blockquote>\n<p><strong>Step 5: Start the Docker container</strong></p>\n<blockquote>\n<p>Start the PostgreSQL Docker container by running the following command in your project root directory:</p>\n</blockquote>\n<pre><code>docker-compose up -d\n</code></pre>\n<blockquote>\n<p>This will start the PostgreSQL container in the background.</p>\n</blockquote>\n<p><strong>Step 6: Generate Prisma client</strong></p>\n<blockquote>\n<p>Generate a new Prisma client to reflect the changes in your schema and datasource. Run the following command in your project root directory:</p>\n</blockquote>\n<pre><code>npx prisma generate\n</code></pre>\n<blockquote>\n<p>This will regenerate your Prisma client with the updated schema.</p>\n</blockquote>\n<p><strong>Step 7: Verify the new database connection</strong></p>\n<blockquote>\n<p>Verify that the new database connection is working correctly by running the following command in your project root directory:</p>\n</blockquote>\n<pre><code>npx prisma studio\n</code></pre>\n<blockquote>\n<p>This will open Prisma Studio, a web-based tool to view and edit your data. Verify that you can see your data and that you can make changes.</p>\n</blockquote>\n<blockquote>\n<p>That's it! You've successfully switched your SQLite database to PostgreSQL and set it up in a Docker container. You can now start your t3app as usual and it will use the new database.</p>\n</blockquote>\n<p><strong>Troubleshooting</strong></p>\n<blockquote>\n<p>If you already had some migration in the sqlite and then switched to new database, in our case Postgres, make sure to delete the whole migrations folder.\nThen run new migrations:</p>\n</blockquote>\n<pre><code>npx prisma migrate dev\n</code></pre>\n<blockquote>\n<p>And then restart the prisma studio</p>\n</blockquote>\n<pre><code>npx prisma studio\n</code></pre>"}},{"node":{"id":"d5513914-48a6-596b-ab52-8454c8cd7186","excerpt":"Indexing by search engines is the process of collecting and storing information about web pages, documents, and other types of content on…","rawMarkdownBody":"\n![](https://i.imgur.com/5v7lCPo.png \"Photo by Jayashree Rajagopalan from editage.com\")\n\n> Indexing by search engines is the process of collecting and storing information about web pages, documents, and other types of content on the internet, in order to make them available in search results.\n\n> When a search engine indexes a web page, it crawls the page and extracts information about its content, such as keywords, title, description, and the URL. This information is then stored in a searchable database, known as an index.\n\n> Search engines use complex algorithms to determine the relevance and quality of the indexed pages, and the order in which they appear in search results. When a user enters a search query, the search engine retrieves relevant pages from the index and displays them in order of relevance, based on factors such as keyword density, page authority, and user engagement metrics.\n\n> Indexing is an essential part of the search engine process, as it enables users to find the most relevant and useful content on the web.\n\n> To prevent a web page from being indexed by search engines, you can use one or more of the following methods:\n\n> 1. Use a meta tag: You can add a meta tag to the HTML code of your page to instruct search engines not to index it. The following code should be included in the head section of your HTML code:\n>    php\n\n```\n<meta name=\"robots\" content=\"noindex\">\n```\n\n> This tells search engine crawlers not to index the page.\n\n> 2. Use a robots.txt file: You can create a robots.txt file and place it in the root directory of your website. This file specifies which pages and directories search engines are allowed to crawl and index. To prevent a page from being indexed, you can add the following line to your robots.txt file:\n\n```\nUser-agent: *\nDisallow: /page-to-be-excluded/\n```\n\n> This tells search engines not to crawl or index the page located at \"http://www.example.com/page-to-be-excluded/\". Note that this method only works for pages that are not already indexed by search engines.\n\n> 3. Use password protection: If you require users to log in before accessing a page, search engines will not be able to access it either. This method ensures that the page is only accessible to authenticated users, and not to search engine crawlers.\n\n> It's important to note that while these methods can prevent search engines from indexing a page, they do not prevent other websites from linking to the page. It's also possible for a search engine to index a page that has been excluded by mistake, so it's important to regularly check your website's index status to ensure that the pages you want to be excluded are not being indexed.\n","frontmatter":{"date":"2023-04-20","title":"Website Indexing","category":"knowledge-base"},"fields":{"slug":"/Website_Indexing/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/5v7lCPo.png\" title=\"Photo by Jayashree Rajagopalan from editage.com\"></p>\n<blockquote>\n<p>Indexing by search engines is the process of collecting and storing information about web pages, documents, and other types of content on the internet, in order to make them available in search results.</p>\n</blockquote>\n<blockquote>\n<p>When a search engine indexes a web page, it crawls the page and extracts information about its content, such as keywords, title, description, and the URL. This information is then stored in a searchable database, known as an index.</p>\n</blockquote>\n<blockquote>\n<p>Search engines use complex algorithms to determine the relevance and quality of the indexed pages, and the order in which they appear in search results. When a user enters a search query, the search engine retrieves relevant pages from the index and displays them in order of relevance, based on factors such as keyword density, page authority, and user engagement metrics.</p>\n</blockquote>\n<blockquote>\n<p>Indexing is an essential part of the search engine process, as it enables users to find the most relevant and useful content on the web.</p>\n</blockquote>\n<blockquote>\n<p>To prevent a web page from being indexed by search engines, you can use one or more of the following methods:</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>Use a meta tag: You can add a meta tag to the HTML code of your page to instruct search engines not to index it. The following code should be included in the head section of your HTML code:\nphp</li>\n</ol>\n</blockquote>\n<pre><code>&#x3C;meta name=\"robots\" content=\"noindex\">\n</code></pre>\n<blockquote>\n<p>This tells search engine crawlers not to index the page.</p>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>Use a robots.txt file: You can create a robots.txt file and place it in the root directory of your website. This file specifies which pages and directories search engines are allowed to crawl and index. To prevent a page from being indexed, you can add the following line to your robots.txt file:</li>\n</ol>\n</blockquote>\n<pre><code>User-agent: *\nDisallow: /page-to-be-excluded/\n</code></pre>\n<blockquote>\n<p>This tells search engines not to crawl or index the page located at \"<a href=\"http://www.example.com/page-to-be-excluded/%22\">http://www.example.com/page-to-be-excluded/\"</a>. Note that this method only works for pages that are not already indexed by search engines.</p>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>Use password protection: If you require users to log in before accessing a page, search engines will not be able to access it either. This method ensures that the page is only accessible to authenticated users, and not to search engine crawlers.</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>It's important to note that while these methods can prevent search engines from indexing a page, they do not prevent other websites from linking to the page. It's also possible for a search engine to index a page that has been excluded by mistake, so it's important to regularly check your website's index status to ensure that the pages you want to be excluded are not being indexed.</p>\n</blockquote>"}},{"node":{"id":"b0087e44-3d72-5f01-9730-40903a1c9e26","excerpt":"Photo from trpc.io tRPC is an open-source framework for building TypeScript APIs. It's a modern alternative to REST APIs and can be used to…","rawMarkdownBody":"\n![](https://i.imgur.com/1QwtiZr.png \"Photo from trpc.io\")<p style=\"font-size: 12px; text-align: right\">_Photo from trpc.io_</p>\n\n> tRPC is an open-source framework for building TypeScript APIs. It's a modern alternative to REST APIs and can be used to build APIs for web applications, mobile applications, and other types of software.\n\n> tRPC is for full-stack TypeScript developers. It makes it easy to write endpoints that you can safely use in both the front and backend of your app.\n\n> Its main benefit is that it provides perfect type safety and auto-complete between client (frontend) and the API (backend)\n\n> Condition is: your backend and frontend need to live in the same repository. Obviously you want to use Typescript as the whole purpose is to have backend (server) and frontend (client) type-safe.\n\n> Then if you change something on the backend, it will be automatically picked up on the frontend and warn you via Typescript errors\n\n>\n","frontmatter":{"date":"2023-04-09","title":"Trpc","category":"knowledge-base"},"fields":{"slug":"/tRPC/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/1QwtiZr.png\" title=\"Photo from trpc.io\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from trpc.io</em></p></p>\n<blockquote>\n<p>tRPC is an open-source framework for building TypeScript APIs. It's a modern alternative to REST APIs and can be used to build APIs for web applications, mobile applications, and other types of software.</p>\n</blockquote>\n<blockquote>\n<p>tRPC is for full-stack TypeScript developers. It makes it easy to write endpoints that you can safely use in both the front and backend of your app.</p>\n</blockquote>\n<blockquote>\n<p>Its main benefit is that it provides perfect type safety and auto-complete between client (frontend) and the API (backend)</p>\n</blockquote>\n<blockquote>\n<p>Condition is: your backend and frontend need to live in the same repository. Obviously you want to use Typescript as the whole purpose is to have backend (server) and frontend (client) type-safe.</p>\n</blockquote>\n<blockquote>\n<p>Then if you change something on the backend, it will be automatically picked up on the frontend and warn you via Typescript errors</p>\n</blockquote>\n<blockquote>\n</blockquote>"}},{"node":{"id":"618026f0-7977-5f0b-86c6-03b10bf30883","excerpt":"Photo from Addania Reference: https://create.t3.gg/ T3 was recommended to me by couple of people. Prisma Prisma is a tool which helps to…","rawMarkdownBody":"\n![](https://i.imgur.com/9HA97rK.png \"Photo from Addania\")<p style=\"font-size: 12px; text-align: right\">_Photo from Addania_</p>\n\n> Reference: https://create.t3.gg/\n\n> T3 was recommended to me by couple of people.\n\n```\nnpm create t3-app@latest\n\n```\n\n**Prisma**\n\n> Prisma is a tool which helps to interact with relational databases without needing to write SQL queries. It is a helper tool to communicate with databases\n\n> If you go to folder called `prisma`, there will be a file called `schema.prisma`\n\n> `schema.prisma` file declares with which database we will work with.\n\n```\ndatasource db {\n    provider = \"sqlite\"\n    url      = env(\"DATABASE_URL\")\n}\n```\n\n> In t3 app, prisma works with `sqlite` database.\n\n> The url for the database is written in .env file:\n\n```\nDATABASE_URL=\"file:./db.sqlite\"\n```\n\n> `sqlite` is a file based database. Its structure resembles a \"json\" file but it is actually a table.\n\n> `sqlite` is not recommended to be used for production, or to be deployed. But it is very good for experimentation.\n\n> `schema.prisma` declares also all schemas (tables and their columns). Basically the structure of tables and data in it. `Example` is one such table:\n\n```\nmodel Example {\n    id        String   @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    label     String\n    name      String\n}\n```\n\n> The database itself is in this file: `db.sqlite` file. This file does not open well in the VSCode. It can be partially opened in DBeaver. But it contains information about all the tables (schemas) in the database.\n\n> Useful extension for VSCode to work with Prisma is called: `Prisma` - it will color-code and format the files which use Prisma. It adds syntax highlighting, formatting and auto-completion.\n\n**Prisma studio**\n\n> In order to run our database we need to do:\n\n```\nnpx prisma studio\n```\n\n> This gives us a local environment to interact with the database at location: http://localhost:5555/\n\n![](https://i.imgur.com/A2yct9B.png \"Photo by  S. Hermann & F. Richter from Pixabay\")<p style=\"font-size: 12px; text-align: right\">\\_Photo by Addania</p>\n\n> Here we can click on the table we want to see:\n\n![](https://i.imgur.com/Ny6gxgP.png \"Photo by  S. Hermann & F. Richter from Pixabay\")<p style=\"font-size: 12px; text-align: right\">\\_Photo by Addania</p>\n\n> We can add entries to our database by clicking on `Add record` button\n\n> There are these two useful commands:\n\n```\nnpx prisma db push\nnpx prisma migrate dev\n```\n\n> Use `npx prisma db push` to synchronize your Prisma schema with your database schema. Introspects the database to infer and executes the changes required to make your database schema reflect the state of your Prisma schema. Use this command if you want to quickly prototype and iterate on schema design locally without the need to deploy these changes to other environments such as other developers, or staging and production environments. It is good for prototyping\n\n> So if I do some changes in my `schema.prisma` locally and I want to see the results, I use `npx prisma db push`.\n\n> `npx prisma migrate dev` is when we want to create a migration and we want this to be reflected in other environments without losing data. We use migrations to commit the schema changes and apply these in your other environments.\n\n> In oder words migrate is for storing.\n\n> `npx prisma migrate dev` creates and uses a migration\n\n> All migrations can be see in the migration folder, they are all put on top of each other. Each needs to have a name.\n\n**TRPC**\n\n> Then how to use query what we have in our sqlite database? We use `TRPC` for it.\n\n> Go to this file:\n\n```\nsrc/server/api/routers/example.ts\n```\n\n> Add this piece of code to `exampleRouter`:\n\n```\n getAll: publicProcedure.query(async ({ ctx }) => {\n    const test = await ctx.prisma.example.findUnique({ where: { id: 123 } });\n    console.log(\"test\", test?.createdAt);\n    return ctx.prisma.example.findMany();\n  }),\n```\n\n> Please note, that you need to add asyncto the query function and then await in front of the `ctx.prisma.example`\n\n**UI components**\n\n> It is good to use some external libraryfor components. Good examples:\n\n- https://mantine.dev/\n- https://chakra-ui.com/\n\n**Authentication**\n\n> T3 uses Discord login vendor for authentication.\n\n> Other vendors like google can be added.\n\n> Next auth with trpc?\n\n> Follow the steps for authentication here: https://create.t3.gg/en/usage/first-steps\n\n> Summary from the article above:\n\n> You will need a Discord account, so register one if you haven’t already.\n\n> Navigate to https://discord.com/developers/applications↗ and click “New Application” in the top right corner. Give your application a name and agree to the Terms of Service.\n\n> Once your application has been created, navigate to “Settings → OAuth2 → General”.\n\n> Copy the “Client ID” and add it to your .env as DISCORD_CLIENT_ID.\n\n> Click “Reset Secret”, copy the new secret, and add it to your .env as DISCORD_CLIENT_SECRET.\n\n> Click “Add Redirect” and type in http://localhost:3000/api/auth/callback/discord.\n> For production deployment, follow the previous steps to create another Discord Application, but this time replace http://localhost:3000 with the URL that you are deploying to.\n\n> Save Changes.\n\n> Set the NEXTAUTH_SECRET in .env. In development any string will work, for production see the note in .env on generating a secure secret.\n\n> Go to this page: http://localhost:3000/api/auth/callback/discord and allow the application access.\n\n> Then you can start your application\n\n**Start the application**\n\n> Use this command:\n\n```\nnpm run dev\n```\n\n> It will run at: http://localhost:3000/\n\n**Step by Steps Guide to chirp project**\n\n**1. Setup**\n\n**1.1 First steps**\n\n> Go to projects folder\n\n```\nnpm create t3-app@latest\n```\n\n> Select typescript, prisma, tailwind, trpc\n\n> Initialize new git repo? yes\n\n> Npm install? yes\n\n> If you get an error for git init, you have to do it manual in the chirp project\n\n```\ngit init\n```\n\n> Then commit:\n\n```\ngit add .\ngit commit -m \"Getting started\"\n```\n\n> Go to github and create new repo. Click + and name your project. Make it private/public. Do not check any other options\n\n> It will give you then these commands, which you paste to your terminal:\n\n```\ngit remote add origin git@github.com:addania/chirp.git\ngit branch -M main\ngit push -u origin main\n```\n\n> Please note you have to have something git added and git commited before you can execute those.\n\n> Check your github repo if code it there\n\n> Run the local:\n\n```\nnpm run dev\n```\n\n> If it stops make sure you firstly do this:\n\n```\nnvm install 16.0.0\n```\n\n> Then you should be able to run:\n\n```\nnpm run dev\n```\n\n**1.2 Database**\n\n> Setting up database. At the moment we use sqlite database, wihch is good for experimenting but not for production. We will use planetscale for that.\n\n> Go to https://app.planetscale.com/ and create account. Create there a new database. Give it a name like achievsdb. Choose location same as your Vercel account (where you will be deploying), typically the one closest to your location.\n\n> It will create your database. Click Connect button. Choose `Connect with Prisma`\n\n> This will give you database url which you need to paste to your `.env` file\n\n```\nDATABASE_URL='mysql://....'\n```\n\n> So go to your chirp project and open `.env` file. Instead of sqlite paste there those credentials:\n\n```\nDATABASE_URL='mysql://....'\n```\n\n> `.env.example` file is git ignored, should never be commited to the github and should not be shared publically!! If it happens by mistake, you will need to change credentials to your database for security reasons.\n\n> This variable though is now on our local development environment but if we want to deploy it, we also need to provide this variable to the production environment.\n\n> We still need to do a small setup step. Seach on google for planetscale prisma and visit this page:\n> https://planetscale.com/docs/tutorials/prisma-quickstart\n\n> Go to `Initialize prisma` section and copy this code from there:\n\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n> Then in our project go to: schema.prisma file and remove this code:\n\n```\ngenerator client {\n    provider = \"prisma-client-js\"\n}\n\ndatasource db {\n    provider = \"sqlite\"\n    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below\n    // Further reading:\n    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema\n    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string\n    url      = env(\"DATABASE_URL\")\n}\n```\n\n> Instead paste the above there:\n\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n> Let's now synchronize our database with schemas that we have in our `schema.prisma` file. We need to tell prisma to take the current state of our prisma schema with one model called Example which expects id, createdAt and updatedAt in our `schema.prisma` file and set it to our local database:\n\n```\nnpx prisma db push\n```\n\n> Let's run our prisma studio:\n\n```\nnpx prisma studio\n```\n\n> Let's open our Example table and see if it works fine.\n\n> Let's also add one entry by clicking on Add entry and Save.\n\n> Now we git add . and git commit and git push our changes to github repo.\n\n> Let's deploy our project. We go to https://vercel.com/ where you need to create an account and click on new project and then click on `import` button from our chirp project.\n\n> There you uncollapse environmental variables and paste there our:\n\n```\nDATABASE_URL='mysql://....'\n```\n\n> Then you click on Deploy!\n\n> You will get a congrats screen. Then click on Continue to dashbord. Go to Settings -> Environment variables and check if the DATABASE_URL is there and if all boxes are checked: production, development & preview. Save changes if anything needed to be updated. If you needed to be updated maybe you need to redeploy.\n\n> Go back Projects tab and there you should have a deployment url to your app. click on it to check our brand new site: https://chirp-4xlt.vercel.app/\n\n> Also go to Setting options -> Functions and change the Function region to the same as you set it in planetscale: AWS eu-central-1\n\n> New deployment is needed for this to take place. So next time we deploy, it will be reflected.\n\n**1.3 Authentication**\n\n> Last bit we need is authorization. We will use clerk.dev. Visit their website and create an account.\n\n> Click on `create` new application and name is chirp.\n\n> Choose the authentication methods paswordless (without passwords) and using specific providers (google, github, discord) and click on Create application\n\n> Then on the welcome page, click on the next.js guide to set things up correctly.\n\n> Click on \"Checkout our new docs\" to be redirected to the next docu page.\n\n> Follow the Next.js Stable guide:\n\n> Install clerk:\n\n```\nnpm install @clerk/nextjs\n```\n\n> Then go back to the clerk dashboard -> API Keys and copy the environmental variables:\n\n```\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_....\nCLERK_SECRET_KEY=sk_test_....\n```\n\n> Paste those to .env file:\n\n```\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_....\nCLERK_SECRET_KEY=sk_test_....\n```\n\n> We also need to go to Vercel (our deployment platform) -> Settings -> Environmental variables and paste those there as well to environmental variables. Click Save\n\n> Then go back to the clerk manual and checkout the part about the clerk provider:\n\n```\nimport { ClerkProvider } from \"@clerk/nextjs\";\nimport type { AppProps } from \"next/app\";\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <ClerkProvider {...pageProps}>\n      <Component {...pageProps} />\n    </ClerkProvider>\n  );\n}\nexport default MyApp;\n```\n\n> We need to do this in our App as well.\n\n> Go to `_app.tsx` file and paste the provider there:\n\n```\nimport { ClerkProvider } from \"@clerk/nextjs\";\nimport { type AppType } from \"next/app\";\nimport { api } from \"~/utils/api\";\nimport \"~/styles/globals.css\";\nconst MyApp: AppType = ({ Component, pageProps }) => {\n  return (\n    <ClerkProvider {...pageProps}>\n      <Component {...pageProps} />\n    </ClerkProvider>\n  );\n};\nexport default api.withTRPC(MyApp);\n```\n\n> Next as per their docu we need to add a middlewear. Copy this code:\n\n```\nimport { withClerkMiddleware } from \"@clerk/nextjs/server\";\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nexport default withClerkMiddleware((req: NextRequest) => {\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: [\n    \"/((?!static|.*\\\\..*|_next|favicon.ico).*)\",\n    \"/\",\n  ],\n}\n```\n\n> In our pass go to `src` folder and add a new file there called `middleware.ts`\n\n> Remove anything that is not needed from the file (req):\n\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nexport default withClerkMiddleware((req: NextRequest) => {\n  return NextResponse.next();\n});\n\n// Stop Middleware running on static files\nexport const config = {\n  matcher: \"/((?!_next/image|_next/static|favicon.ico).*)\",\n};\n```\n\n> If in double, check their documentation: https://clerk.com/docs/nextjs/middleware\n\n> And especially if we get some weird errors in console:\n\n```\ntRPC failed on <no-path>: You need to use \"withClerkMiddleware\" in your Next.js middleware file. You also need to make sure that your middleware matcher is configured correctly and matches this route or page. See https://clerk.com/docs/quickstarts/get-started-with-nextjs\n```\n\n> Now middleware.ts will run on every request. We can test it by console.logging:\n\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nexport default withClerkMiddleware((req: NextRequest) => {\n  console.log(\"I am running\")\n  return NextResponse.next();\n});\n\n// Stop Middleware running on static files\nexport const config = {\n  matcher: \"/((?!_next/image|_next/static|favicon.ico).*)\",\n};\n```\n\n> And in terminal we will see the console output.\n\n> Next we need to use SignIn component & SingInButton from the Clerk.\n\n```\nimport { SignIn, SignInButton } from \"@clerk/nextjs\";\n<SignIn path=\"/sign-in\" routing=\"path\" signUpUrl=\"/sign-up\" />\n```\n\n> We go to /src/pages/index.tsx\n\n> Remove most of the content and üaste the component there:\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { SignIn, SignInButton } from \"@clerk/nextjs\";\nimport { api } from \"~/utils/api\";\nconst Home: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>Create T3 App</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n        <div style={{ color: \"white\" }}>\n          <SignInButton />\n        </div>\n        <SignIn path=\"/sign-in\" routing=\"path\" signUpUrl=\"/sign-up\" />\n      </main>\n    </>\n  );\n};\nexport default Home;\n```\n\n> Now you can see a sign in button and you can click it to sign to your application! You will see there options with which you can sign in, yay!\n\n> If you want to change the settings of the sign-in to your app, you need to go to clerk dashboard -> User & Authentication and you can for example disable username or password in Email user.\n\n> Now lets conditionally display sign in button, if there is no user logged in and if there is, we will show the SignOutButton. For that we will use: useUser hook, which has properties on it like: isSignedIn\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { SignIn, SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\n\nconst Home: NextPage = () => {\n  const user = useUser();\n  return (\n    <>\n      <Head>\n        <title>Create T3 App</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n        <div style={{ color: \"white\" }}>\n          {!user.isSignedIn && <SignInButton />}\n          {!!user.isSignedIn && <SignOutButton />}\n        </div>\n        <SignIn path=\"/sign-in\" routing=\"path\" signUpUrl=\"/sign-up\" />\n      </main>\n    </>\n  );\n};\nexport default Home;\n```\n\n> Let's get it on our server:\n\n```\ngit add .\ngit commit -m \"Add sign in/out\"\ngit push\n```\n\n**1.4 Tracking bugs in production**\n\n> We want to know when things go wrong in our produciton. We will use axiom for that. Vercel also has a logging system, but axiom is more thorough.\n\n> Go to: https://axiom.co/ and create an account.\n\n> Go to Vercel to your project -> Settings -> Integrations\n\n> In the section Logging find Axiom -> Click add integration\n\n> Select a Vercel Account to add the Integration to: personal(addania)\n\n> Click on Add integration button -> Sign in (with github) -> Authenticate\n\n> Add new organization name: addania\n\n> Click Connect to Vercel button\n\n> Now in Vercel we have a new tab called Integrations, where we can track things more easily then with Vercel\n\n**2. Building the application**\n\n**2.1 Adding some data to database**\n\n> Let's go to `schema.prisma` file and add a new model/schema called Post:\n\n```\nmodel Post {\nid String @id @default(cuid())\ncreatedAt DateTime @default(now())\ncontent String @db.VarChar(255)\nauthorId String\n@@index([authorId])\n}\n```\n\n> Let's break down what this syntax means (thank you ChatGPT <3)\n\n> `model Post`: This line defines the name of the data model. In this case, it's called \"Post\". You can think of this as creating a new table in your database called \"Post\" that will hold data for posts.\n\n> `id String @id @default(cuid())`: This line defines a field in the Post table called \"id\". The field type is a string, and it is also marked with the Prisma directive \"@id\", which tells Prisma that this field should be the primary key of the table. The \"@default(cuid())\" directive sets a default value for this field using the cuid() function, which generates a unique identifier.\n\n> `createdAt DateTime @default(now())`: This line defines another field called \"createdAt\". This field is of type \"DateTime\", and it is marked with the \"@default(now())\" directive, which sets the default value of this field to the current date and time.\n\n> `content String @db.VarChar(255)`: This line defines a field called \"content\". This field is of type \"String\", and it is also marked with the \"@db.VarChar(255)\" directive, which specifies the maximum length of the field in the database as 255 characters.\n\n> `authorId String`: This line defines another field called \"authorId\", which is a string type. This field will be used to store the ID of the author who wrote the post.\n\n> `@@index([authorId])`: This line defines an index on the \"authorId\" field. This allows you to quickly search for all posts written by a particular author.\n\n> More about Prisma indexing - a way to speed up the search in database by creating an index on a specific columns: In Prisma, an index is a data structure that helps speed up database queries by allowing the database to quickly search for data based on the values in specific columns. When you define an index on a column in a Prisma schema, it tells the database to create an index on that column.\n\n> In the example schema above, the @@index([authorId]) directive creates an index on the authorId column in the Post table. This means that when you query the database for all posts written by a specific author, the database can use the index to quickly find all posts with the matching authorId value, rather than having to scan through the entire Post table to find them.\n\n> Here's an example of how you might use this index in a Prisma query:\n\n```\nconst postsByAuthor = await prisma.post.findMany({\n  where: {\n    authorId: \"1234567890\" // Replace with the actual author ID you want to search for\n  }\n});\n```\n\n> In this example, the findMany() method is used to search the Post table for all posts written by the author with the ID \"1234567890\". Because the authorId column has an index, the database can use it to quickly find all matching posts, making the query faster and more efficient.\n\n> Now we can sync our database with and we will see the applied changes:\n\n```\nnpx prisma db push\n```\n\n> Don't forget to run the prisma studio:\n\n```\nnpx prisma studio\n```\n\n> Also we changed the schema, so we also need to tell typescript about it. Because schema.prisma is not in typescript, so we need to generate new typescript files from it. Easy way to do it:\n\n```\nnpm install\n```\n\n> `npm install` will trigger the generation of typescript automatically.\n\n> Or alternatively:\n\n```\nnpx prisma db generate\n```\n\n> Now when we want to go to `src/server/api/routers/example.ts` we will see TS errors, since we no longer have example schema\n\n> We can change example to be post:\n\n```\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nexport const exampleRouter = createTRPCRouter({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n  getAll: publicProcedure.query(({ ctx }) => {\n    return ctx.prisma.post.findMany();\n  }),\n});\n```\n\n> If TS and ESLint still indicate an error, you can `ctrl+shift+p` and Restart Typescript Server & Restart ESLint Server (both run servers in the background)\n\n**2.2 Accessing data via trpc**\n\n> What is trpc? trpc let's you create server functions (backend functions) which run on a server (in our case on Vercel) which do things like: fetch data from the database, so we can get the data in right shape and authenticated and you provide this data to your user, without your user needing to run the database code themselves. We never want a user to connect directly to a database. For that reason we use Vercel. With trpc it is super easy to access database even if it lives on entirely different server than the computer the user is using.\n\n> All the backend code is in the src/server folder\n\n> In `server/api/routers` we have an example router called `example.ts` but we can add our own as a new file called `post.ts` and adjust it to our needs. Let's add getAll method.\n\n```\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(({ ctx }) => {\n    return ctx.prisma.post.findMany();\n  }),\n});\n```\n\n> Let's brak down the syntax. #\n\n> `createTRPCRouter`: This is a function provided by TRPC that creates a router for your TRPC server. A router is responsible for defining the API endpoints and the procedures that should be executed when those endpoints are called.\n\n> `{ getAll: publicProcedure.query(...) }`: This is an object that defines a single procedure called getAll, which can be accessed by calling the API endpoint `/posts/getAll`. `publicProcedure` is a method to generate the function that the client calls. The `publicProcedure.query` function is a helper provided by TRPC that creates a procedure that can be called publicly by anyone without being authenticated.\n\n> `({ ctx }) => { return ctx.prisma.post.findMany(); }`: This is the function that defines the behavior of the getAll procedure. When the getAll endpoint is called, this function will be executed. The function takes a single argument, which is an object containing the `ctx` - `context` of the current request. In this case, the context includes a prisma property, which is an instance of the Prisma client that can be used to query the database. The function simply calls the `findMany()` method on the post table in the database using the Prisma client and returns the result.\n\n> So in summary, this example router defines a single API endpoint called `/posts/getAll` that returns all posts from the post table in the database using the Prisma client. When a client makes a request to this endpoint, the TRPC server will execute the getAll procedure, which will query the database using Prisma and return the result.\n\n> Let's take a close look at: `({ ctx }) => { return ctx.prisma.post.findMany(); }`\n\n> In TRPC, the `ctx` object, short for \"context\", is an object that contains information about the current request being handled by the server. The context object is passed as an argument to the procedure function, which is the function that defines the behavior of a TRPC endpoint.\n\n> In the example router above, the getAll procedure function is defined as follows:\n\n```\npublicProcedure.query(({ ctx }) => {\nreturn ctx.prisma.post.findMany();\n}),\n```\n\n> This procedure function is defined as an arrow function that takes a single argument, which is an object that contains the `ctx` property. In this case, the `publicProcedure.query` function is used to create a public query procedure that can be called by anyone. The `publicProcedure.query` function takes a function that defines the behavior of the procedure when it's called.\n\n> The procedure function defined here simply returns the result of calling `ctx.prisma.post.findMany()`. Here's a breakdown of what that means:\n\n> `ctx`: This is the context object passed to the procedure function by TRPC. The context object contains information about the current request being handled, such as the HTTP request `headers` and any `authentication` information.\n\n> `ctx.prisma`: This is a property of the context object that contains an instance of the Prisma client. The Prisma client is used to query the database.\n\n> `ctx.prisma.post`: This is a property of the Prisma client that represents the post table in the database. It provides methods for querying, updating, and deleting rows in the post table.\n\n> `ctx.prisma.post.findMany()`: This is a method provided by the Prisma client that queries the post table and returns an array of all posts in the table.\n\n> So in summary, the ({ ctx }) => { return ctx.prisma.post.findMany(); } function simply returns all posts from the post table in the database using the Prisma client. The ctx object is passed to the function by TRPC as a parameter, and the Prisma client is accessed through the ctx.prisma property.\n\n> Now in the file: `src/server/api/root.ts` we need to add that postRouter there:\n\n```\nimport { createTRPCRouter } from \"~/server/api/trpc\";\nimport { postRouter } from \"~/server/api/routers/post\";\n\nexport const appRouter = createTRPCRouter({\n  posts: postsRouter,\n});\n\nexport type AppRouter = typeof appRouter;\n```\n\n> Now we go to our pages/index.tsx file and we retrieve data from our posts router:\n\n```\nimport { api } from \"~/utils/api\";\nconst { data } = api.posts.getAll.useQuery();\n```\n\n> We can then display the data:\n\n```\n{data?.map((post) => (\n            <div key={post.id} style={{ color: \"white\" }}>\n              {post.content}\n            </div>\n          ))}\n```\n\n> Whole page looks like this `index.ts`:\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\n\nimport { api } from \"~/utils/api\";\n\nconst Home: NextPage = () => {\n  const user = useUser();\n  const { data } = api.posts.getAll.useQuery();\n  return (\n    <>\n      <Head>\n        <title>Create T3 App</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n        <div style={{ color: \"white\" }}>\n          {!user.isSignedIn && <SignInButton />}\n          {!!user.isSignedIn && (\n            <>\n              <p>Hello {user.user.fullName}</p>\n              <SignOutButton />\n            </>\n          )}\n        </div>\n        <div>\n          {data?.map((post) => (\n            <div key={post.id} style={{ color: \"white\" }}>\n              {post.content}\n            </div>\n          ))}\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n\n```\n\n> Let's add, commit & push. On each push Vercel makes a new deployment.\n\n**2.3 Adding tailwind styles**\n\n> Let's add some styles. We will use tailwind for it. Here is some official documentation: https://v2.tailwindcss.com/docs\n\n> Especially useful are the colors: https://v2.tailwindcss.com/docs/customizing-colors\n\n> Tailwind is a utility-first CSS framework that provides a set of pre-defined class names that can be used to style your HTML elements. Here are some basic Tailwind class names and what they do:\n\n> `text-*` - Sets the text color and font size. For example, `text-red-500` sets the text color to red and `text-lg` sets the font size to large.\n\n> `bg-*` - Sets the background color. For example, `bg-blue-300` sets the background color to light blue.\n\n> `p-*` and `m-*` - Sets the padding and margin, respectively. For example, `p-4` sets the padding to 4 units (default unit is rem) and `m-2` sets the margin to 2 units.\n\n> `w-*` and `h-*` - Sets the width and height, respectively. For example, `w-1/2` sets the width to 50% and `h-64` sets the height to 64 units.\n\n> `flex` and `flex-*` - Sets the display property to flex and provides additional flexbox properties, respectively. For example, `flex` sets the display to flex and `flex-wrap` sets the flex-wrap property.\n\n> `grid` and `grid-*` - Sets the display property to grid and provides additional grid properties, respectively. For example, `grid` sets the display to grid and `grid-cols-3` sets the number of columns in the grid to 3.\n\n> `rounded-*` - Sets the border radius. For example, `rounded-full` sets a circular border radius and `rounded-md` sets a medium rounded border.\n\nThese are just a few examples of the many Tailwind class names available. By using these class names, you can easily style your HTML elements without having to write custom CSS.\n\n> Here is the whole code with styles for our. We will unwrap it later:\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { SignIn, SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\n\nimport { api } from \"~/utils/api\";\n\nconst Home: NextPage = () => {\n  const user = useUser();\n  const { data, isLoading } = api.posts.getAll.useQuery();\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!data) {**2.4 Adding tailwind styles**\n    return <div>Something went wrong...</div>;\n  }\n  return (\n    <>\n      <Head>\n        <title>Create T3 App</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"flex h-screen justify-center\">\n        <div className=\"h-full w-full border-x border-slate-400 md:max-w-2xl\">\n          <div className=\"flex border-b border-slate-400 p-4\">\n            {!user.isSignedIn && (\n              <div className=\"flex justify-center\">\n                <SignInButton />\n              </div>\n            )}\n            {!!user.isSignedIn && (\n              <>\n                <p>Hi {user.user.fullName}</p>\n                <SignOutButton />\n              </>\n            )}\n          </div>\n          <div className=\"flex flex-col\">\n            {data.map((post) => (\n              <div key={post.id} className=\"border-b border-slate-400 p-8\">\n                {post.content}\n              </div>\n            ))}\n          </div>\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n```\n\n> Let's crack this:\n\n> `flex`: This class is used to set the display property of the main element to flex.\n\n> `h-screen`: This class is used to set the height of the main element to be equal to the height of the screen.\n\n> `justify-center`: This class is used to center the content horizontally within the main element.\n\n> `h-full`: This class is used to set the height of the div element to 100% of its parent element.\n\n> `w-full`: This class is used to set the width of the div element to 100% of its parent element.\n\n> `border-x`: This class is used to set a horizontal border on the div element.\n\n> `border-slate-400`: This class is used to set the border color of the div element to a shade of gray.\n\n> `md:max-w-2xl`: This class is used to set the maximum width of the div element to 2xl (a predefined width in Tailwind).\n\n> `p-4`: This class is used to set the padding of the div element containing the Sign In button to 4 units.\n\n> `border-b`: This class is used to set a bottom border on the div element containing the Sign In button.\n\n**2.5 Add loading checks**\n\n> In case data is still loading we want to display Loading and if there is no data, we want to display Something went wrong\n\n> One convenient thing that queries return is `isLoading`\n\n```\n  const { data, isLoading } = api.posts.getAll.useQuery();\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  if (!data) {**2.4 Adding tailwind styles**\n    return <div>Something went wrong...</div>;\n  }\n```\n\n> Whole code will look like this:\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { SignIn, SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\n\nimport { api } from \"~/utils/api\";\n\nconst Home: NextPage = () => {\n  const user = useUser();\n  const { data, isLoading } = api.posts.getAll.useQuery();\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!data) {**2.4 Adding tailwind styles**\n    return <div>Something went wrong...</div>;\n  }\n  return (\n    <>\n      <Head>\n        <title>Create T3 App</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"flex h-screen justify-center\">\n        <div className=\"h-full w-full border-x border-slate-400 md:max-w-2xl\">\n          <div className=\"flex border-b border-slate-400 p-4\">\n            {!user.isSignedIn && (\n              <div className=\"flex justify-center\">\n                <SignInButton />\n              </div>\n            )}\n            {!!user.isSignedIn && (\n              <>\n                <p>Hi {user.user.fullName}</p>\n                <SignOutButton />\n              </>\n            )}\n          </div>\n          <div className=\"flex flex-col\">\n            {data.map((post) => (\n              <div key={post.id} className=\"border-b border-slate-400 p-8\">\n                {post.content}\n              </div>\n            ))}\n          </div>\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n```\n\n**2.6 Add User bar**\n\n> Let's create this component:\n\n```\nconst UserBar = () => {\n  const { user } = useUser();\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex\">\n      <img\n        src={user.profileImageUrl}\n        className=\"h-16 w-16 rounded-full\"\n        alt=\"Profile image\"\n      />\n    </div>\n  );\n};\n```\n\n> Let's use it in our main page at the very top:\n\n```\n{!!user.isSignedIn && (\n   <div className=\"flex w-full justify-between\">\n      <div className=\"flex items-center  space-x-2\">\n          <UserBar />\n          <p>Hi {user.user.fullName}</p>\n      </div>\n      <SignOutButton />\n  </div>\n)}\n```\n\n> There is a bit of new tailwind syntax:\n\n> `justify-between` - positions items at the opposite edges of container horizontally\n\n> `items-center` - vertically centers items in the container\n\n> `space-x-2` - creates small space between children of the container\n\n**2.7 Create posts**\n\n> Let's create a component where user can type in a post. We will need the profile pic of the user and an input:\n\n```\nconst CreatePostWizard = () => {\n  const { user } = useUser();\n  console.log(\"user\", user);\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex w-full gap-4 space-x-2 p-4\">\n      <img\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n      />\n      <input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n      ></input>\n    </div>\n  );\n};\n```\n\n> We can then use `<CreatePostWizard />` in our page.\n\n**2.8 Connecting posts with users**\n\n> User has one of its props and that is called id. We can console.log user and check the current id: `user_2OBaeJj8EI29omUN4LZTUFl7TBh`\n\n> If we have that unique id, we can then adjust our trp calls in file: `posts.ts`:\n\n```\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n    return posts;\n  }),\n});\n\n```\n\n> Script above will only return those posts which belong to user with id: user_2OBaeJj8EI29omUN4LZTUFl7TBh\n\n> `take: 100` limits number of posts to 100\n\n> But we dont want to hard-code the user. We want to get the user from the Clerk.\n\n> For now, lets just see how we can get all the users for the posts that we have:\n\n```\nimport clerkClient from \"@clerk/clerk-sdk-node\";\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = await clerkClient.users.getUserList({\n      userId: posts.map((post) => post.authorId),\n      limit: 100,\n    });\n    console.log(\"usersss\", users);\n    return posts;\n  }),\n});\n\n```\n\n> This will console log it in the terminal! Not in the browser console. But the info it provides is really a lot, we only want the id, username an dprofilePicture, so let's create a filter function.\n\n```\nconst filterUserForClient = (user: User) => {\n  return {\n    id: user.id,\n    username: user.username,\n    profilePicture: user.profileImageUrl,\n  };\n};\n```\n\n> We can then use it in our posts router like this:\n\n```\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = (await clerkClient.users.getUserList({\n      userId: posts.map((post) => post.authorId),\n      limit: 100,\n    })).map(filterUserForClient);\n    return posts;\n  }),\n});\n```\n\n> Then instead of just returning the array of posts in our getAll trpc, we will return object with post and author in it:\n\n```\nimport clerkClient, { User } from \"@clerk/clerk-sdk-node\";\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nconst filterUserForClient = (user: User) => {\n  return {\n    id: user.id,\n    username: user.username,\n    profilePicture: user.profileImageUrl,\n  };\n};\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = (\n      await clerkClient.users.getUserList({\n        userId: posts.map((post) => post.authorId),\n        limit: 100,\n      })\n    ).map(filterUserForClient);\n    return posts.map((post) => {\n      return { post, author: users.find((user) => user.id === post.authorId) };\n    });\n  }),\n});\n```\n\n> We should also make sure that if there are no authors, we throw an error:\n\n```\nimport clerkClient, { User } from \"@clerk/clerk-sdk-node\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nconst filterUserForClient = (user: User) => {\n  return {\n    id: user.id,\n    username: user.username,\n    profilePicture: user.profileImageUrl,\n  };\n};\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = (\n      await clerkClient.users.getUserList({\n        userId: posts.map((post) => post.authorId),\n        limit: 100,\n      })\n    ).map(filterUserForClient);\n    return posts.map((post) => {\n      const author = users.find((user) => user.id === post.authorId);\n\n      if (!author || !author.username) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Author of the posts not found\",\n        });\n      }\n      return { post, author: { ...author, username: author.username } };\n    });\n  }),\n});\n```\n\n> We also need to adjust our `index.tsx` cause the response is a bit different.\n\n> Instead of:\n\n```\n{data.map(( post ) => (\n              <div key={post.id} className=\"border-b border-slate-400 p-8\">\n                {post.content}\n              </div>\n))}\n```\n\n> we need:\n\n```\n{data.map(({ post, author }) => (\n              <div key={post.id} className=\"border-b border-slate-400 p-8\">\n                {post.content}\n              </div>\n))}\n```\n\n> We will now create a PostView component which will show user profile with the post\n\n> For that we will certainly need a type. But it is super easy to get the types from the router we create. We will need a RouterOUtputs util and in it we will specify which router and where of its procedures\n\n```\nimport { RouterOutputs } from \"~/utils/api\";\n\ntype PostWithUser = RouterOutputs[\"posts\"][\"getAll\"]\n```\n\n> Please note that we will have here array or objects with post and author in it.\n\n> But for our PostView component we only need one of them, so the actual type will be:\n\n```\ntype PostWithUser = RouterOutputs[\"posts\"][\"getAll\"][number]\n```\n\n> The whole component will look like this:\n\n```\ntype PostWithUser = RouterOutputs[\"posts\"][\"getAll\"][number];\n\nconst PostView = (props: PostWithUser) => {\n  const { post, author } = props;\n  return (\n    <div\n      key={post.id}\n      className=\"flex items-center gap-4 border-b border-slate-400 p-8\"\n    >\n      <Image\n        src={author.profilePicture}\n        alt=\"Author image\"\n        className=\"h-12 w-12  rounded-full\"\n        width={56}\n        height={56}\n      />\n      <div className=\"flex flex-col\">\n        <div className=\"flex gap-2 text-slate-400\">\n          <span>{`@${author.username}`}</span>\n          <span>{`•  ${dayjs(post.createdAt).fromNow()}`}</span>\n        </div>\n        <div className=\"flex\">{post.content}</div>\n      </div>\n    </div>\n  );\n};\n```\n\n> The whole page now:\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\n\nimport { SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport { api } from \"~/utils/api\";\nimport type { RouterOutputs } from \"~/utils/api\";\n\ndayjs.extend(relativeTime);\n\nconst CreatePostWizard = () => {\n  const { user } = useUser();\n  console.log(\"user\", user);\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex w-full gap-4 space-x-2 p-4\">\n      <Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n      <input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n      ></input>\n    </div>\n  );\n};\n\nconst UserBar = () => {\n  const { user } = useUser();\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex\">\n      <Image\n        src={user.profileImageUrl}\n        className=\"h-16 w-16  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n    </div>\n  );\n};\n\ntype PostWithUser = RouterOutputs[\"posts\"][\"getAll\"][number];\n\nconst PostView = (props: PostWithUser) => {\n  const { post, author } = props;\n  return (\n    <div\n      key={post.id}\n      className=\"flex items-center gap-4 border-b border-slate-400 p-8\"\n    >\n      <Image\n        src={author.profilePicture}\n        alt=\"Author image\"\n        className=\"h-12 w-12  rounded-full\"\n        width={56}\n        height={56}\n      />\n      <div className=\"flex flex-col\">\n        <div className=\"flex gap-2 text-slate-400\">\n          <span>{`@${author.username}`}</span>\n          <span>{`•  ${dayjs(post.createdAt).fromNow()}`}</span>\n        </div>\n        <div className=\"flex\">{post.content}</div>\n      </div>\n    </div>\n  );\n};\n\nconst Home: NextPage = () => {\n  const user = useUser();\n  const { data, isLoading } = api.posts.getAll.useQuery();\n\n  if (isLoading) {\n    return <div className=\"flex w-full justify-center p-8\">Loading...</div>;\n  }\n\n  if (!data) {\n    return (\n      <div className=\"flex w-full justify-center p-8\">\n        Something went wrong...\n      </div>\n    );\n  }\n  return (\n    <>\n      <Head>\n        <title>Create T3 App</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"flex h-screen justify-center\">\n        <div className=\"h-full w-full border-x border-slate-400 md:max-w-2xl\">\n          <div className=\"flex border-b border-slate-400 p-4\">\n            {!user.isSignedIn && (\n              <div className=\"flex justify-center\">\n                <SignInButton />\n              </div>\n            )}\n            {!!user.isSignedIn && (\n              <div className=\"w-full\">\n                <div className=\"flex w-full justify-between\">\n                  <div className=\"flex items-center  space-x-2\">\n                    <UserBar />\n                    <p>Hi {user.user.fullName}</p>\n                  </div>\n                  <SignOutButton />\n                </div>\n                <CreatePostWizard />\n              </div>\n            )}\n          </div>\n          <div className=\"flex flex-col\">\n            {data.map((fullProps) => (\n              <PostView {...fullProps} key={fullProps.post.id} />\n            ))}\n          </div>\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n```\n\n> You will notice couple of changes. We use dayjs to format our createdAt and calculate how long until now it was posted\n\n> dayjs needs to be installed with:\n\n```\nnpm install dayjs\n```\n\n> It needs to be imported and configured like this:\n\n```\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\ndayjs.extend(relativeTime);\n```\n\n> It can then be used like this:\n\n```\ndayjs(post.createdAt).fromNow()\n```\n\n> Another change is the images optimization\n\n> You will notice that if we use img tag, it will be underlined. Using those tags is not optimal. Instead next.js provides an Image component which is optimized and will load faster. This component will need width, height and alt props.\n\n```\nimport Image from \"next/image\";\n\n<Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n/>\n```\n\n> But doing just this will break the application with error. We need to go to this file: `next.config.mjs` and extend the trusted image domains:\n\n```\nconst config = {\n  reactStrictMode: true,\n  images: {\n    domains: [\"images.clerk.dev\"],\n  },\n```\n\n**2.9 Adding nicer loading spinners**\n\n> Search for tailwind spinner. Example:\n> https://flowbite.com/docs/components/spinner/\n\n> Create a file in src/components called loading.tsx and make a re-usable ocmponent out of it:\n\n```\nexport const LoadingSpinner = ({ size = 16 }) => (\n  <div role=\"status\">\n    <svg\n      aria-hidden=\"true\"\n      className=\"animate-spin fill-teal-500 text-gray-200 dark:text-gray-600\"\n      viewBox=\"0 0 100 101\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height={size}\n      width={size}\n    >\n      <path\n        d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n        fill=\"currentFill\"\n      />\n    </svg>\n    <span className=\"sr-only\">Loading...</span>\n  </div>\n);\n\nexport const LoadingPage = () => (\n  <div className=\"absolute right-0 top-0 flex h-screen w-screen items-center justify-center\">\n    <LoadingSpinner size={60} />\n  </div>\n);\n```\n\n**2.10 Extracting posts to Feed component**\n\n> We can also separate osts to their own component called Feed\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\n\nimport { SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport { api } from \"~/utils/api\";\nimport type { RouterOutputs } from \"~/utils/api\";\nimport { LoadingPage } from \"~/components/loading\";\n\ndayjs.extend(relativeTime);\n\nconst CreatePostWizard = () => {\n  const { user } = useUser();\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex w-full gap-4 space-x-2 p-4\">\n      <Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n      <input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n      ></input>\n    </div>\n  );\n};\n\nconst UserBar = () => {\n  const { user } = useUser();\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex\">\n      <Image\n        src={user.profileImageUrl}\n        className=\"h-16 w-16  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n    </div>\n  );\n};\n\ntype PostWithUser = RouterOutputs[\"posts\"][\"getAll\"][number];\n\nconst PostView = (props: PostWithUser) => {\n  const { post, author } = props;\n  return (\n    <div\n      key={post.id}\n      className=\"flex items-center gap-4 border-b border-slate-400 p-8\"\n    >\n      <Image\n        src={author.profilePicture}\n        alt=\"Author image\"\n        className=\"h-12 w-12  rounded-full\"\n        width={56}\n        height={56}\n      />\n      <div className=\"flex flex-col\">\n        <div className=\"flex gap-2 text-slate-400\">\n          <span>{`@${author.username}`}</span>\n          <span>{`•  ${dayjs(post.createdAt).fromNow()}`}</span>\n        </div>\n        <div className=\"flex\">{post.content}</div>\n      </div>\n    </div>\n  );\n};\n\nconst Feed = () => {\n  const { data, isLoading: pageLoading } = api.posts.getAll.useQuery();\n\n  if (pageLoading) {\n    return (\n      <div className=\"flex w-full justify-center p-8\">\n        <LoadingPage />\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"flex w-full justify-center p-8\">\n        Something went wrong...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col\">\n      {data.map((fullProps) => (\n        <PostView {...fullProps} key={fullProps.post.id} />\n      ))}\n    </div>\n  );\n};\nconst Home: NextPage = () => {\n  const { user, isLoaded: userLoaded, isSignedIn } = useUser();\n\n  // Start fetching data early - reactQuery will cache it\n  api.posts.getAll.useQuery();\n\n  if (!userLoaded) {\n    return <div />;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Create T3 App</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"flex h-screen justify-center\">\n        <div className=\"h-full w-full border-x border-slate-400 md:max-w-2xl\">\n          <div className=\"flex border-b border-slate-400 p-4\">\n            {!isSignedIn && (\n              <div className=\"flex justify-center\">\n                <SignInButton />\n              </div>\n            )}\n            {!!isSignedIn && (\n              <div className=\"w-full\">\n                <div className=\"flex w-full justify-between\">\n                  <div className=\"flex items-center  space-x-2\">\n                    <UserBar />\n                    <p>Hi {user.fullName}</p>\n                  </div>\n                  <SignOutButton />\n                </div>\n                <CreatePostWizard />\n              </div>\n            )}\n          </div>\n          <Feed />\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n```\n\n**2.11 Handling the problem with Auth adding posts**\n\n> Problem here is to know who the user is and if they have permission to create posts. At the moment with trpc we dont have any permission settings because we didnt use create next Auth.\n\n> We will solve this problem by attaching the auth state to the context of trpc inside of each query. By context we mean ctx in file: `src/server/api/routers/posts`.\n\n> A the moment if we look at the ctx itself, we only have access to prisma and nothing else. This is how our context looks like:\n\n```\nctx: {\n    prisma: PrismaClient<Prisma.PrismaClientOptions, never, Prisma.RejectOnNotFound | Prisma.RejectPerOperation | undefined>;\n}\n```\n\n> So in order to attach auth to the trpc context, go to `src/server/api/trpc.ts`\n\n> This file is usually never changed unless we want to modify the context or create new middleware\n\n> We wont be using `createInnerTRPCContext` at all. It is only good for testing. Instead we will return prisma directly in `createTRPCContext`\n\n```\nexport const createTRPCContext = (_opts: CreateNextContextOptions) => {\n  return {\n    prisma,\n  };\n};\n```\n\n> And in the createTRPCContext we will need to obtain information about the user.\n\n> Notice that the `_opts` is escaped (has an underscore) because for now we didnt use it in `createTRPCContext`.\n\n> But we will use those opts (options), so let's unescape it:\n\n```\nexport const createTRPCContext = (opts: CreateNextContextOptions) => {\n  return {\n    prisma,\n  };\n};\n```\n\n> Those options are an object and has a `req` key. Which is the entire nextJS `request` from an api\n\n```\nexport const createTRPCContext = (opts: CreateNextContextOptions) => {\n\n  const { req } = opts\n\n  return {\n    prisma,\n  };\n};\n```\n\n> This request can be then passed to clerk\n\n> Clerk uses JWT - JSON Web Tokens. Clerk is able to verify on my server whether the user is authenticated or not using the signature of JWT. With this, we will know this is THIS user & provide us a bit info about them - especially signedInAuthObject or signedOutAuthObject which contain behaviour if the user is igned in or not\n\n```\nimport { getAuth } from \"@clerk/nextjs/server\";\n\nexport const createTRPCContext = (opts: CreateNextContextOptions) => {\n  const { req } = opts;\n  const session = getAuth(req);\n  return {\n    prisma,\n  };\n};\n```\n\n> Please note that we wont be using `const user = getUser(req)` cause we dont have that with every request we will be fetching the user from Clerk\n\n> We will now extend the createTRPCContext with auth info about the user\n\n```\nexport const createTRPCContext = (opts: CreateNextContextOptions) => {\n  const { req } = opts;\n  const session = getAuth(req);\n\n  const userId = session.userId;\n  return {\n    prisma,\n    userId,\n  };\n};\n```\n\n> We wont necessarily have the auth but we can make a procedure which enforces that we have an authentication\n\n> The easiest way to do it is to extend the public procedure with the middleware. In this context middleware will be a small process that runs before our main request processing. Super helpful for authentications.\n\n> Since we already attached the auth earlier, we can easily then verify at the end of the file:\n\n```\nconst enforceUserIsAuthed = t.middleware(async ({ ctx, next }) => {\n  if (!ctx.userId) {\n    throw new TRPCError({ code: \"UNAUTHORIZED\" });\n  }\n  return next({\n    ctx: {\n      userId: ctx.userId,\n    },\n  });\n});\n```\n\n> In above code we use the `t` helper from the TRPC\n\n> Remember to update import:\n\n```\nimport { TRPCError } from \"@trpc/server\";\n```\n\n> Now we need to use that procedure:\n\n```\nexport const privateProcedure = t.procedure.use(enforceUserIsAuthed)\n```\n\n> Whole file looks like this:\n\n```\n/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n */\nimport { type CreateNextContextOptions } from \"@trpc/server/adapters/next\";\n\nimport { prisma } from \"~/server/db\";\n\ntype CreateContextOptions = Record<string, never>;\n\n/**\n * This helper generates the \"internals\" for a tRPC context. If you need to use it, you can export\n * it from here.\n *\n * Examples of things you may need it for:\n * - testing, so we don't have to mock Next.js' req/res\n * - tRPC's `createSSGHelpers`, where we don't have req/res\n *\n * @see https://create.t3.gg/en/usage/trpc#-serverapitrpcts\n */\nconst createInnerTRPCContext = (_opts: CreateContextOptions) => {\n  return {\n    prisma,\n  };\n};\n\n/**\n * This is the actual context you will use in your router. It will be used to process every request\n * that goes through your tRPC endpoint.\n *\n * @see https://trpc.io/docs/context\n */\nexport const createTRPCContext = (opts: CreateNextContextOptions) => {\n  const { req } = opts;\n  const session = getAuth(req);\n\n  const userId = session.userId;\n  return {\n    prisma,\n    userId,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\nimport { getAuth } from \"@clerk/nextjs/server\";\n\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure;\n\nconst enforceUserIsAuthed = t.middleware(async ({ ctx, next }) => {\n  if (!ctx.userId) {\n    throw new TRPCError({ code: \"UNAUTHORIZED\" });\n  }\n  return next({\n    ctx: {\n      userId: ctx.userId,\n    },\n  });\n});\n\nexport const privateProcedure = t.procedure.use(enforceUserIsAuthed);\n\n```\n\n> And now we have a private procedure that when used will always have an authentication object\n\n**2.12 Handle adding posts**\n\n> Now we can go to `src/server/api/router/posts.ts`\n\n> We can create here a new protected procedure called `create`:\n\n```\ncreate: privateProcedure.mutation(async ({ ctx }) => {\n    const authorId = ctx.userId;\n\n    const post = await ctx.prisma.post.create({\n      data: {\n        authorId,\n      },\n    });\n  }),\n```\n\n> In this privateProcedure, we guarantee that the user is authenticated. If we switched it to publicProcedure, user could be null or undefined\n\n> But TS will scream that we need content as well, not only authorId. Where do we get that from? We get it from the input. We need to tell it what kind of input we want it to be. We will use zod for that as a validator of our form (input). For example it can validate if the string is an emoji: `z.string().emoji()`\n\n> Let's add that input to out trpc procedure:\n\n```\ncreate: privateProcedure\n    .input(\n      z.object({\n        content: z.string().emoji().min(1).max(280),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const authorId = ctx.userId;\n\n      const post = await ctx.prisma.post.create({\n        data: {\n          authorId,\n          content: input.content,\n        },\n      });\n      return post;\n    }),\n```\n\n> Notice how you squeeze in the input() between privateProcedure and mutation\n\n> Also notice how you can then have access to that input in the mutation, next to ctx\n\n> Your `data` will then have `authorId` and `content`\n\n> And when we do such a mutation, we return the `post`\n\n> The whole file then looks like this:\n\n```\nimport clerkClient, { User } from \"@clerk/clerk-sdk-node\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport {\n  createTRPCRouter,\n  privateProcedure,\n  publicProcedure,\n} from \"~/server/api/trpc\";\n\nconst filterUserForClient = (user: User) => {\n  return {\n    id: user.id,\n    username: user.username,\n    profilePicture: user.profileImageUrl,\n  };\n};\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = (\n      await clerkClient.users.getUserList({\n        userId: posts.map((post) => post.authorId),\n        limit: 100,\n      })\n    ).map(filterUserForClient);\n    return posts.map((post) => {\n      const author = users.find((user) => user.id === post.authorId);\n\n      if (!author || !author.username) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Author of the posts not found\",\n        });\n      }\n      return { post, author: { ...author, username: author.username } };\n    });\n  }),\n  create: privateProcedure\n    .input(\n      z.object({\n        content: z.string().emoji().min(1).max(280),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const authorId = ctx.userId;\n\n      const post = await ctx.prisma.post.create({\n        data: {\n          authorId,\n          content: input.content,\n        },\n      });\n      return post;\n    }),\n});\n\n```\n\n> Then we need to go to client (frontend) file: index.tsx and use that new procedure and add posts.\n\n> We will do it in the `CreatePostWizard` component. We will add a react state to handle input and also button to sumbit the posts, which will use the `mutate` from our create procedure: `const { mutate } = api.posts.create.useMutation()`\n\n```\nconst CreatePostWizard = () => {\n  const { user } = useUser();\n  console.log(\"user\", user);\n\n  const [input, setInput] = useState(\"\");\n\n  const { mutate } = api.posts.create.useMutation();\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex w-full gap-4 space-x-2 p-4\">\n      <Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n      <input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n      />\n      <button onClick={() => mutate({ content: input })}>Post</button>\n    </div>\n  );\n};\n```\n\n> Now we can run our app and test if it works. Try adding post and refreshing the page.\n\n**2.13 Ordering**\n\n> We can also order our posts by createdAt in a descending manner. Go to `src/server/api/routers/posts.ts` and add the `orderBy` in our `getAll` procedure:\n\n```\norderBy: [\n        {\n          createdAt: \"desc\",\n        },\n      ],\n```\n\n> Whole procedure:\n\n```\ngetAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      orderBy: [\n        {\n          createdAt: \"desc\",\n        },\n      ],\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = (\n      await clerkClient.users.getUserList({\n        userId: posts.map((post) => post.authorId),\n        limit: 100,\n      })\n    ).map(filterUserForClient);\n    return posts.map((post) => {\n      const author = users.find((user) => user.id === post.authorId);\n\n      if (!author || !author.username) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Author of the posts not found\",\n        });\n      }\n      return { post, author: { ...author, username: author.username } };\n    });\n  }),\n```\n\n**2.14 Auto-refresh (hot reload) page when adding new post & clearing input**\n\n> We now want to disbaled the input while post is being posted and also we want to auto refresh the page. We will do in in CreatePostWizard:\n\n```\nconst CreatePostWizard = () => {\n  const { user } = useUser();\n\n  const [input, setInput] = useState(\"\");\n  const ctx = api.useContext();\n\n  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({\n    onSuccess: () => {\n      setInput(\"\");\n      void ctx.posts.getAll.invalidate();\n    },\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex w-full gap-4 space-x-2 p-4\">\n      <Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n      <input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        disabled={isPosting}\n      />\n      <button disabled={isPosting} onClick={() => mutate({ content: input })}>Post</button>\n    </div>\n  );\n};\n```\n\n> Notice how we add isLoading: isPosting to the useMutation which we then can use to disable the input & button or add a loading spinner.\n\n> We then also want to invalidate the query. For that we could need the request context, which we can get from `api.useContext()`. This will then help us in the `onSuccess` call of useMutation, which will set the input to be empty and also invalidate the query with `ctx.posts.getAll.invalidate()`. Please note that we use word `void` as theinvalidate expects and asynch function. We just quickly want to fix the TS error, we are not waiting for anyhting, we just want to invalidate the query.\n\n**2.15 Set limit to number of posts**\n\n> We dont want our users to spam the posts, we want to put a limit to how many they can post.\n\n> We will use technology called upstash for that. https://upstash.com/\n\n> They have an awesome package for rate limiting.\n\n> Go to their website and click Console.\n\n> Sign in with your Github.\n\n> CLick create database.\n\n> Give it a name, like: chirp-ratelimiter\n\n> Select `regional` and select your region: eu-central.\n\n> Click create\n\n> Now search for upstash rate limiter on google and visit their github: https://github.com/upstash/ratelimit\n\n> Install it:\n\n```\nnpm install @upstash/ratelimit\nnpm install @upstash/redis\n```\n\n> There are couple of places where we can do the ratelimit, but we will be doing it in the posts.tsx file. Copy from documentation:\n\n```\nimport { Ratelimit } from \"@upstash/ratelimit\"; // for deno: see above\nimport { Redis } from \"@upstash/redis\";\n\n// Create a new ratelimiter, that allows 10 requests per 10 seconds\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.slidingWindow(10, \"10 s\"),\n  analytics: true,\n  prefix: \"@upstash/ratelimit\",\n});\n```\n\n> But this function above requires Redis.fromEnv. This assumes we have UPSTASH_REDIS_REST_URL & UPSTASH_REDIS_REST_TOKEN in our `process.env` file -> which in our case is the `.env` file\n\n> Where do we get those URL & TOKEN? From our console.upstash which we created:`https://console.upstash.com/redis/....`\n\n> In the REST API section, select the .env tab and copy the URLs to the `.env` file. It is the same file where we have our CLERK_SECRET_KEY, NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY & DATABASE_URL\n\n> More over we need ot add those envs to our Vercel.\n\n> By default 10 requests per 10 seconds are allowed in this piece of code: `limiter: Ratelimit.slidingWindow(10, \"10 s\")`. We want to be more strict and allow 3 per minute: `limiter: Ratelimit.slidingWindow(3, \"1 m\")`\n\n> How to use it now? We go to our create posts mutation and add this code:\n\n```\nconst { success } = await ratelimit.limit(authorId);\n\nif (!success){\n        throw new TRPCError({code: \"TOO_MANY_REQUESTS\"})\n}\n```\n\n> Whole create procedure looks then like this:\n\n```\n create: privateProcedure\n    .input(\n      z.object({\n        content: z.string().emoji().min(1).max(280),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const authorId = ctx.userId;\n\n      const { success } = await ratelimit.limit(authorId);\n\n      if (!success){\n        throw new TRPCError({code: \"TOO_MANY_REQUESTS\"})\n      }\n\n      const post = await ctx.prisma.post.create({\n        data: {\n          authorId,\n          content: input.content,\n        },\n      });\n      return post;\n    }),\n```\n\n> To the `rateLimit.limit` we pass the author id. It returns the promise, so we need to await for it. It returns an object which success property. If we are not successful, then we throw a TRPC error for too many requests\n\n> This adds a special scalability to our little app. This shows that it is production ready, because it cannot be taken down by sheer spamming. It now uses authorId for the limit, but it can be an api address, or other properties.\n\n**2.16 Add client errors when there is no emoji typed in**\n\n> Let's search for `react hot toasts`: https://react-hot-toast.com/\n\n> Install the package:\n\n```\nnpm install react-hot-toast\n```\n\n> Let's now go to `_app.tsx` and add their `<Toaster />` there from the website and import it via:\n\n```\nimport { Toaster } from \"react-hot-toast\";\n```\n\n> Whole file looks like this:\n\n```\nimport { ClerkProvider } from \"@clerk/nextjs\";\n\nimport { type AppType } from \"next/app\";\n\nimport { api } from \"~/utils/api\";\n\nimport \"~/styles/globals.css\";\nimport { Toaster } from \"react-hot-toast\";\n\nconst MyApp: AppType = ({ Component, pageProps }) => {\n  return (\n    <ClerkProvider {...pageProps}>\n      <Toaster />\n      <Component {...pageProps} />\n    </ClerkProvider>\n  );\n};\n\nexport default api.withTRPC(MyApp);\n\n```\n\n> We will want to throw an error when we create an toast. so instead of onSuccess mutation, we will use onError and throw a toast there. So go to index.tsx file and in thew `CreatePostWizard` component add `toast.error` for `onError`:\n\n```\n const { mutate, isLoading: isPosting } = api.posts.create.useMutation({\n    onSuccess: () => {\n      setInput(\"\");\n      void ctx.posts.getAll.invalidate();\n    },\n    onError: () => {\n      toast.error(\"Failed to post! Please try again later.\");\n    },\n  });\n```\n\n> If we want to have our toasts in the center-bottom, we need to add the position prop to the `Toaster` in the `_app.tsx`\n\n```\n <Toaster position=\"bottom-center\" />\n```\n\n> We can even get the concrete error message from zod using `e` object:\n\n```\nonError: (e) => {\n      const errorMessage = e.data?.zodError?.fieldErrors.content;\n      if (errorMessage && errorMessage[0]) {\n        toast.error(errorMessage[0]);\n      } else {\n        toast.error(\"Failed to post! Please try again later.\");\n      }\n    },\n```\n\n> If we type text instead of emoji, we will get message in the toast: \"Invalid emoji\"\n\n> We can even customize our error message, when we go back to file posts.tsx in the create procedure, we can add the custom message to the `.emoji()`\n\n```\ncreate: privateProcedure\n    .input(\n      z.object({\n        content: z.string().emoji(\"Only emojis are allowed\").min(1).max(280),\n      })\n    )\n```\n\n**2.17 Fine-tuning**\n\n> We want to make sure if we typed in something, we press `ENTER` key and it posts. Let's add following to the input to `CreatePostWizard`:\n\n```\nonKeyDown={(e) => {\n          if (e.key === \"ENTER\") {\n            e.preventDefault();\n            if (input !== \"\") {\n              mutate({ content: input });\n            }\n          }\n}}\n```\n\n> Plus we want to make some final touches to loading spinners and rendering buttons. So the whole code looks like this:\n\n```\nconst CreatePostWizard = () => {\n  const { user } = useUser();\n\n  const [input, setInput] = useState(\"\");\n  const ctx = api.useContext();\n\n  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({\n    onSuccess: () => {\n      setInput(\"\");\n      void ctx.posts.getAll.invalidate();\n    },\n    onError: (e) => {\n      const errorMessage = e.data?.zodError?.fieldErrors.content;\n      if (errorMessage && errorMessage[0]) {\n        toast.error(errorMessage[0]);\n      } else {\n        toast.error(\"Failed to post! Please try again later.\");\n      }\n    },\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex w-full gap-4 space-x-2 p-4\">\n      <Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n      <input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        disabled={isPosting}\n        onKeyDown={(e) => {\n          if (e.key === \"ENTER\") {\n            e.preventDefault();\n            if (input !== \"\") {\n              mutate({ content: input });\n            }\n          }\n        }}\n      />\n      {input !== \"\" && !isPosting && (\n        <button onClick={() => mutate({ content: input })}>Post</button>\n      )}\n      {isPosting && (\n        <div className=\"flex justify-center\">\n          <LoadingSpinner size={20} />\n        </div>\n      )}\n    </div>\n  );\n};\n```\n\n**2.18 Routing**\n\n> We would like to have separate page for the user profile, when we click user image or the name of author. We wuld also like to have a post page when we click anywhere inside the post area.\n\n> To get started we we will create a new folder in the pages called \"post\" and in it we will copy paste our index.tsx. We will rename the file to \"[id].tsx\". When we use next.js router, the `id` is something we will have access to in our routing\n\n> Also next to our index.tsx in pages folder, we will create a new file called: `[slug].tsx`\n\n> Here is the file structure:\n\n![](https://i.imgur.com/ygvXx6d.png \"Photo by Addania\")<p style=\"font-size: 12px; text-align: right\">_Photo by Addania_</p>\n\n> Now you can replace the content of the `[slug].tsx` and only render <>Profile page</>\n\n> This is the whole page:\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nconst ProfilePage: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>Create T3 App</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"flex h-screen justify-center\">\n        <>Profile View</>\n      </main>\n    </>\n  );\n};\n\nexport default ProfilePage;\n```\n\n> Now how you can access it? By navigating to the url: `http://localhost:3000/@addania`\n\n> So the slug is the `@` symbol and then the `author`.\n\n> Let's do the same for the [id].tsx file & let's call it `SinglePostPage`:\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nconst SinglePostPage: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>Create T3 App</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"flex h-screen justify-center\">\n        <>One post page View</>\n      </main>\n    </>\n  );\n};\n\nexport default SinglePostPage;\n```\n\n> Now let's open our `index.tsx` file and let's make the links. We will use next.js `Link` component. When we use `Link` instead of `a` tag, the routing will actually occur and it wont make a full page refresh! So cool and optimized\n\n```\nimport Link from \"next/link\";\n\n<Link href={`/@${author.username}`}>\n  <span>{`@${author.username}`}</span>\n</Link>\n```\n\n> Let's link the postpage:\n\n```\nimport Link from \"next/link\";\n\n<Link href={`/post/${post.id}`}>\n    <span>{`•  ${dayjs(post.createdAt).fromNow()}`}</span>\n</Link>\n```\n\n**2.18 Meta data**\n\n> Look at our index.tsx and the `Head` tag. Let's give it a name of Chirp and content of thinking emoji.\n\n```\n<Head>\n  <title>Chirp</title>\n  <meta name=\"description\" content=\"💭\" />\n  <link rel=\"icon\" href=\"/favicon.ico\" />\n</Head>\n```\n\n> We also want this to be default to all pages, so we will cut it from this file and add it to `_app.tsx`. If we put it to the `_app` file, it will be the default, and if I add one to another file, it will overwrite what is in the `_app`.\n\n```\nimport { ClerkProvider } from \"@clerk/nextjs\";\n\nimport { type AppType } from \"next/app\";\n\nimport { api } from \"~/utils/api\";\n\nimport \"~/styles/globals.css\";\nimport { Toaster } from \"react-hot-toast\";\nimport Head from \"next/head\";\n\nconst MyApp: AppType = ({ Component, pageProps }) => {\n  return (\n    <ClerkProvider {...pageProps}>\n      <Head>\n        <title>Chirp</title>\n        <meta name=\"description\" content=\"💭\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <Toaster position=\"bottom-center\" />\n      <Component {...pageProps} />\n    </ClerkProvider>\n  );\n};\n\nexport default api.withTRPC(MyApp);\n\n```\n\n> We can then simplify the `[slug].tsx` file:\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nconst ProfilePage: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>Profile</title>\n      </Head>\n      <main className=\"flex h-screen justify-center\">\n        <>Profile View</>\n      </main>\n    </>\n  );\n};\n\nexport default ProfilePage;\n```\n\n> We can then simplify the `[id].tsx` file:\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nconst SinglePostPage: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>Post</title>\n      </Head>\n      <main className=\"flex h-screen justify-center\">\n        <>One post page View</>\n      </main>\n    </>\n  );\n};\n\nexport default SinglePostPage;\n```\n\n> But for the `profile` page, we want the title to be actually the name of the author. We will need to define a trpc query for it. We will need a `subrouter` for it.\n\n> In `server/api/routers` we will create a new file called `profile.ts`\n\n> The content of this file is:\n\n```\nimport clerkClient from \"@clerk/clerk-sdk-node\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nexport const profileRouter = createTRPCRouter({\n  getUserByUsername: publicProcedure\n    .input(z.object({ username: z.string() }))\n    .query(async ({ input }) => {\n      const [user] = await clerkClient.users.getUserList({\n        username: [input.username],\n      });\n      if (!user) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"User not found\",\n        });\n      }\n      return user;\n    }),\n});\n```\n\n> We need to add this router to our `root.ts`. Content of this file:\n\n```\nimport { createTRPCRouter } from \"~/server/api/trpc\";\nimport { postsRouter } from \"~/server/api/routers/posts\";\nimport { profileRouter } from \"./routers/profile\";\n\nexport const appRouter = createTRPCRouter({\n  posts: postsRouter,\n  profile: profileRouter,\n});\n\nexport type AppRouter = typeof appRouter;\n```\n\n> If we want to use it, go to `[slug].tsx` and make use of this router:\n\n```\nimport { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\n\nconst ProfilePage: NextPage = () => {\n  const { data, isLoading } = api.profile.getUserByUsername.useQuery({\n    username: \"addania\",\n  });\n\n  if (isLoading) {\n    return <div className=\"flex h-screen justify-center\">Loading...</div>;\n  }\n\n  if (!data) {\n    return <div className=\"flex h-screen justify-center\">404</div>;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Profile</title>\n      </Head>\n      <main className=\"flex h-screen justify-center\">\n        <div>{data.username}</div>\n      </main>\n    </>\n  );\n};\n\nexport default ProfilePage;\n```\n\n> Notice how we use our new router here:\n\n```\n const { data, isLoading } = api.profile.getUserByUsername.useQuery({\n    username: \"addania\",\n});\n```\n\n> But again when we console.log `data`, we will notice, that we have too much data. We want to filter it.\n\n> Since this is alreday the second time we want to use the filter, we can break out that filter to a separate file.\n\n> Let's make folder in server called `helpers`. And create there a file called: `filterUserForClient.ts`\n\n> Then go to posts and cut out this code:\n\n```\nimport type { User } from \"@clerk/clerk-sdk-node\";\n\nexport const filterUserForClient = (user: User) => {\n  return {\n    id: user.id,\n    username: user.username,\n    profilePicture: user.profileImageUrl,\n  };\n};\n\n```\n\n> Paste this code to that file: `filterUserForClient.ts`\n\n> We need to update the import of this file in `posts.ts`:\n\n```\nimport { filterUserForClient } from \"~/server/helpers/filterUserForClient\";\n```\n\n> We will then use `filterUserForClient` in our `profile.ts`\n\n```\nimport clerkClient from \"@clerk/clerk-sdk-node\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nimport { filterUserForClient } from \"~/server/helpers/filterUserForClient\";\n\nexport const profileRouter = createTRPCRouter({\n  getUserByUsername: publicProcedure\n    .input(z.object({ username: z.string() }))\n    .query(async ({ input }) => {\n      const [user] = await clerkClient.users.getUserList({\n        username: [input.username],\n      });\n      if (!user) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"User not found\",\n        });\n      }\n      return filterUserForClient(user);\n    }),\n});\n```\n\n**2.19 SSG Helper**\n\n> Now we want our meta data to load instantaneously.\n\n> Search for SSG Helper for trpc: https://trpc.io/docs/v9/ssg-helpers\n\n> It will pre-hydrate some data ahead of time.\n\n> In our file: `[slug].tsx` we will create a function called: getStaticProps:\n\n> Firstly we need to create the ssg helper:\n\n```\nimport { createServerSideHelpers } from \"@trpc/react-query/server\";\nimport { appRouter } from \"~/server/api/root\";\nimport { prisma } from \"~/server/db\";\nimport superjson from \"superjson\";\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = createServerSideHelpers({\n    router: appRouter,\n    ctx: { prisma, userId: null },\n    transformer: superjson,\n  });\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [\"/@addania\"], fallback: \"blocking\" };\n};\n```\n\n> This will make sure that the data is there where the page loads.\n\n> This means that when we go to `[slug].tsx` -> the loading is never there. If we console log isLoading, it wont be there.\n\n> `const ssg` is a helper which makes the magic of pre-fetching data.\n\n> `GetStaticProps` type is provided by next\n\n> `await ssg.profile.getUserByUsername.prefetch({ username });` this is ftching on the server\n\n> `prefetch` is a cool helper which pre-fetches the data ahead of time & hydrates it through server side props.\n\n> `trpcState: ssg.dehydrate(),` - this dehrydrates -> takes everything we fetched, puts it in the shape that can be parsed through next.js server side props (in this case static props) and ensures data is there when we need it and loading state of `[slug].tsx` will never be hit.\n\n> In order for this all to work, we need to tell next.js which paths are valid:\n\n```\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n```\n\n> `const username = slug.replace(\"@\", \"\")`; our slug contains still `@` and it needs to be removed when we want to pass username\n\n> Now we can tidy up a bit the profile page `[slug].stx`. We no longer hardcode \"addania\", but we fetch it. We dont need loading state.\n\n> Whole code lloks like this:\n\n```import type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\n\nconst ProfilePage: NextPage<{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return <div className=\"flex h-screen justify-center\">404</div>;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>{data.username}</title>\n      </Head>\n      <main className=\"flex h-screen justify-center\">\n        <div>{data.username}</div>\n      </main>\n    </>\n  );\n};\n\nimport { createServerSideHelpers } from \"@trpc/react-query/server\";\nimport { appRouter } from \"~/server/api/root\";\nimport { prisma } from \"~/server/db\";\nimport superjson from \"superjson\";\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = createServerSideHelpers({\n    router: appRouter,\n    ctx: { prisma, userId: null },\n    transformer: superjson,\n  });\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nexport default ProfilePage;\n\n```\n\n**2.20 Layouting**\n\n> All pages should have same layout, so in the components folder let's create a file called: `layout.tsx` and paste there code from `index.tsx`\n\n```\nimport type { PropsWithChildren } from \"react\";\n\nexport const PageLayout = (props: PropsWithChildren) => {\n  return (\n    <main className=\"flex h-screen justify-center\">\n      <div className=\"overflow-y-scroll h-full w-full border-x border-slate-400 md:max-w-2xl\">\n          {props.children}\n      </div>\n    </main>\n  );\n};\n\n```\n\n> Then index.tsx will look like this:\n\n```\nconst Home: NextPage = () => {\n  const { user, isLoaded: userLoaded, isSignedIn } = useUser();\n\n  // Start fetching data early - reactQuery will cache it\n  api.posts.getAll.useQuery();\n\n  if (!userLoaded) {\n    return <div />;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Chirp</title>\n        <meta name=\"description\" content=\"💭\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <PageLayout>\n        <div className=\"flex border-b border-slate-400 p-4\">\n          {!isSignedIn && (\n            <div className=\"flex justify-center\">\n              <SignInButton />\n            </div>\n          )}\n          {!!isSignedIn && (\n            <div className=\"w-full\">\n              <div className=\"flex w-full justify-between\">\n                <div className=\"flex items-center  space-x-2\">\n                  <UserBar />\n                  <p>Hi {user.fullName}</p>\n                </div>\n                <SignOutButton />\n              </div>\n              <CreatePostWizard />\n            </div>\n          )}\n        </div>\n        <Feed />\n      </PageLayout>\n    </>\n  );\n};\n```\n\n> We can then make the profile page also use the same Pagelayout:\n\n```\nimport type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\n\nconst ProfilePage: NextPage<{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return <div className=\"flex h-screen justify-center\">404</div>;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>{data.username}</title>\n      </Head>\n      <PageLayout>\n        <div>{data.username}</div>\n      </PageLayout>\n    </>\n  );\n};\n```\n\n**2.21 Finish profile page**\n\n> Let's add profile picture and style it as on Twitter\n\n> Let's make this pretty:\n\n```\nconst ProfilePage: NextPage<{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return <div className=\"flex h-screen justify-center\">404</div>;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>{data.username}</title>\n      </Head>\n      <PageLayout>\n        <div className=\"relative h-36 bg-slate-600\">\n          <Image\n            src={data.profilePicture}\n            alt={`@${data.username ?? \"\"}'s profile pic`}\n            width={128}\n            height={128}\n            className=\"absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black bg-black\"\n          />\n        </div>\n        <div className=\"h-[64px]\" />\n        <div className=\"p-4 text-2xl font-bold\">{`@${\n          data.username ?? \"\"\n        }`}</div>\n        <div className=\"w-full border-b border-slate-400\" />\n      </PageLayout>\n    </>\n  );\n};\n```\n\n> The whole file looks like this:\n\n```\nimport type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\nimport Image from \"next/image\";\n\nconst ProfilePage: NextPage<{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return <div className=\"flex h-screen justify-center\">404</div>;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>{data.username}</title>\n      </Head>\n      <PageLayout>\n        <div className=\"relative h-36 bg-slate-600\">\n          <Image\n            src={data.profilePicture}\n            alt={`@${data.username ?? \"\"}'s profile pic`}\n            width={128}\n            height={128}\n            className=\"absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black bg-black\"\n          />\n        </div>\n        <div className=\"h-[64px]\" />\n        <div className=\"p-4 text-2xl font-bold\">{`@${\n          data.username ?? \"\"\n        }`}</div>\n        <div className=\"w-full border-b border-slate-400\" />\n      </PageLayout>\n    </>\n  );\n};\n\nimport { createServerSideHelpers } from \"@trpc/react-query/server\";\nimport { appRouter } from \"~/server/api/root\";\nimport { prisma } from \"~/server/db\";\nimport superjson from \"superjson\";\nimport { PageLayout } from \"~/components/layout\";\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = createServerSideHelpers({\n    router: appRouter,\n    ctx: { prisma, userId: null },\n    transformer: superjson,\n  });\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nexport default ProfilePage;\n```\n\n**2.22 Fetch posts for a given user**\n\n> Now we will want to fetch feeds for a given user/profile\n\n> We will need to create a new router for that. Let's go to: `src/server/api/routers/posts.ts`\n\n```\n getPostsByUserId: publicProcedure\n    .input(z.object({ userId: z.string() }))\n    .query(({ ctx, input }) =>\n      ctx.prisma.post.findMany({\n        where: {\n          authorId: input.userId,\n        },\n        take: 100,\n        orderBy: [{ createdAt: \"desc\" }],\n      })\n    ),\n```\n\n> Let's use it then. We will create a new component in components folder. File name will be `postview.tsx` and we will copy there the content of the `PostView` from `index.tsx`\n\n```\nimport Image from \"next/image\";\n\nimport dayjs from \"dayjs\";\n\nimport type { RouterOutputs } from \"~/utils/api\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport Link from \"next/link\";\n\ndayjs.extend(relativeTime);\n\ntype PostWithUser = RouterOutputs[\"posts\"][\"getAll\"][number];\n\nexport const PostView = (props: PostWithUser) => {\n  const { post, author } = props;\n  return (\n    <div\n      key={post.id}\n      className=\"flex items-center gap-4 border-b border-slate-400 p-8\"\n    >\n      <Image\n        src={author.profilePicture}\n        alt=\"Author image\"\n        className=\"h-12 w-12  rounded-full\"\n        width={56}\n        height={56}\n      />\n      <div className=\"flex flex-col\">\n        <div className=\"flex gap-2 text-slate-400\">\n          <Link href={`/@${author.username}`}>\n            <span>{`@${author.username}`}</span>\n          </Link>\n          <Link href={`/post/${post.id}`}>\n            <span>{`•  ${dayjs(post.createdAt).fromNow()}`}</span>\n          </Link>\n        </div>\n        <div className=\"flex\">{post.content}</div>\n      </div>\n    </div>\n  );\n};\n```\n\n> We will need to also retrieve information about users in our `posts.tsx`, so we will abstract a function called: `addUserDataToPosts`\n\n```\nconst addUserDataToPosts = async (posts: Post[]) => {\n  const users = (\n    await clerkClient.users.getUserList({\n      userId: posts.map((post) => post.authorId),\n      limit: 100,\n    })\n  ).map(filterUserForClient);\n\n  return posts.map((post) => {\n    const author = users.find((user) => user.id === post.authorId);\n\n    if (!author || !author.username) {\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Author of the posts not found\",\n      });\n    }\n\n    return { post, author: { ...author, username: author.username } };\n  });\n};\n```\n\n> We will then use it in `getAll` and `getPostsByUserId`\n\n> Whole file looks like this:\n\n```\nimport clerkClient from \"@clerk/clerk-sdk-node\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { Ratelimit } from \"@upstash/ratelimit\";\nimport { Redis } from \"@upstash/redis\";\n\nimport {\n  createTRPCRouter,\n  privateProcedure,\n  publicProcedure,\n} from \"~/server/api/trpc\";\nimport { filterUserForClient } from \"~/server/helpers/filterUserForClient\";\nimport { Post } from \"@prisma/client\";\n\nconst addUserDataToPosts = async (posts: Post[]) => {\n  const users = (\n    await clerkClient.users.getUserList({\n      userId: posts.map((post) => post.authorId),\n      limit: 100,\n    })\n  ).map(filterUserForClient);\n\n  return posts.map((post) => {\n    const author = users.find((user) => user.id === post.authorId);\n\n    if (!author || !author.username) {\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Author of the posts not found\",\n      });\n    }\n\n    return { post, author: { ...author, username: author.username } };\n  });\n};\n\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.slidingWindow(3, \"1 m\"),\n  analytics: true,\n  prefix: \"@upstash/ratelimit\",\n});\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      orderBy: [\n        {\n          createdAt: \"desc\",\n        },\n      ],\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    return addUserDataToPosts(posts);\n  }),\n  getPostsByUserId: publicProcedure\n    .input(z.object({ userId: z.string() }))\n    .query(({ ctx, input }) =>\n      ctx.prisma.post\n        .findMany({\n          where: {\n            authorId: input.userId,\n          },\n          take: 100,\n          orderBy: [{ createdAt: \"desc\" }],\n        })\n        .then(addUserDataToPosts)\n    ),\n\n  create: privateProcedure\n    .input(\n      z.object({\n        content: z\n          .string()\n          .emoji({ message: \"Contains non-emoji characters\" })\n          .min(1)\n          .max(280),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const authorId = ctx.userId;\n\n      const { success } = await ratelimit.limit(authorId);\n\n      if (!success) {\n        throw new TRPCError({ code: \"TOO_MANY_REQUESTS\" });\n      }\n\n      const post = await ctx.prisma.post.create({\n        data: {\n          authorId,\n          content: input.content,\n        },\n      });\n      return post;\n    }),\n});\n```\n\n> Our `[slug].tsx` file will then generate the PostView:\n\n```\nimport type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\nimport Image from \"next/image\";\n\nimport { PostView } from \"~/components/postview\";\n\nconst ProfileFeed = (props: { userId: string }) => {\n  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({\n    userId: props.userId,\n  });\n  if (isLoading) {\n    return <LoadingPage />;\n  }\n  if (!data || data.length === 0) {\n    return <div>User has not posted</div>;\n  }\n  return (\n    <div className=\"flex flex-col\">\n      {data.map((fullPost) => (\n        <PostView {...fullPost} key={fullPost.post.id} />\n      ))}\n    </div>\n  );\n};\n\nconst ProfilePage: NextPage<{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return <div className=\"flex h-screen justify-center\">404</div>;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>{data.username}</title>\n      </Head>\n      <PageLayout>\n        <div className=\"relative h-36 bg-slate-600\">\n          <Image\n            src={data.profilePicture}\n            alt={`@${data.username ?? \"\"}'s profile pic`}\n            width={128}\n            height={128}\n            className=\"absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black bg-black\"\n          />\n        </div>\n        <div className=\"h-[64px]\" />\n        <div className=\"p-4 text-2xl font-bold\">{`@${\n          data.username ?? \"\"\n        }`}</div>\n        <div className=\"w-full border-b border-slate-400\" />\n        <ProfileFeed userId={data.id} />\n      </PageLayout>\n    </>\n  );\n};\n\nimport { createServerSideHelpers } from \"@trpc/react-query/server\";\nimport { appRouter } from \"~/server/api/root\";\nimport { prisma } from \"~/server/db\";\nimport superjson from \"superjson\";\nimport { PageLayout } from \"~/components/layout\";\nimport { LoadingPage } from \"~/components/loading\";\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = createServerSideHelpers({\n    router: appRouter,\n    ctx: { prisma, userId: null },\n    transformer: superjson,\n  });\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nexport default ProfilePage;\n```\n\n> The same will also be used in the `index.tsx` in `Feed` component.\n\n```\nconst Feed = () => {\n  const { data, isLoading: pageLoading } = api.posts.getAll.useQuery();\n\n  if (pageLoading) {\n    return (\n      <div className=\"flex w-full justify-center p-8\">\n        <LoadingPage />\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"flex w-full justify-center p-8\">\n        Something went wrong...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col\">\n      {data.map((fullProps) => (\n        <PostView {...fullProps} key={fullProps.post.id} />\n      ))}\n    </div>\n  );\n};\n```\n\n**2.23 Adding Post View page**\n\n> First let's abstract the ssg to a separate file. In server/helpers, let's create a file called `ssgHelper.tsx`:\n\n```\nimport { createServerSideHelpers } from \"@trpc/react-query/server\";\nimport { appRouter } from \"~/server/api/root\";\nimport { prisma } from \"~/server/db\";\nimport superjson from \"superjson\";\n\nexport const generateSSGHelper = () =>\n  createServerSideHelpers({\n    router: appRouter,\n    ctx: { prisma, userId: null },\n    transformer: superjson,\n  });\n```\n\n> And we will use it in `[slug].tsx` just like this: `const ssg = generateSSGHelper();`:\n\n```\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = generateSSGHelper();\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n```\n\n> The whole `[slug].tsx` file looks like this:\n\n```\nimport type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\nimport Image from \"next/image\";\n\nimport { PostView } from \"~/components/postview\";\nimport { PageLayout } from \"~/components/layout\";\nimport { LoadingPage } from \"~/components/loading\";\nimport { generateSSGHelper } from \"~/server/helpers/ssgHelper\";\n\nconst ProfileFeed = (props: { userId: string }) => {\n  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({\n    userId: props.userId,\n  });\n  if (isLoading) {\n    return <LoadingPage />;\n  }\n  if (!data || data.length === 0) {\n    return <div>User has not posted</div>;\n  }\n  return (\n    <div className=\"flex flex-col\">\n      {data.map((fullPost) => (\n        <PostView {...fullPost} key={fullPost.post.id} />\n      ))}\n    </div>\n  );\n};\n\nconst ProfilePage: NextPage<{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return <div className=\"flex h-screen justify-center\">404</div>;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>{data.username}</title>\n      </Head>\n      <PageLayout>\n        <div className=\"relative h-36 bg-slate-600\">\n          <Image\n            src={data.profilePicture}\n            alt={`@${data.username ?? \"\"}'s profile pic`}\n            width={128}\n            height={128}\n            className=\"absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black bg-black\"\n          />\n        </div>\n        <div className=\"h-[64px]\" />\n        <div className=\"p-4 text-2xl font-bold\">{`@${\n          data.username ?? \"\"\n        }`}</div>\n        <div className=\"w-full border-b border-slate-400\" />\n        <ProfileFeed userId={data.id} />\n      </PageLayout>\n    </>\n  );\n};\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = generateSSGHelper();\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nexport default ProfilePage;\n```\n\n> Now let's just copy the content of `[slug].tsx` to `[id].tsx` to make our like easier. Rename `ProfilePage` to `SinglePostPage`:\n\n> Let's add a router for single post by id called: `getById`:\n\n```\ngetById: publicProcedure\n    .input(z.object({ id: z.string() }))\n    .query(async ({ ctx, input }) => {\n      const post = await ctx.prisma.post.findUnique({\n        where: { id: input.id },\n      });\n      if (!post) {\n        throw new TRPCError({ code: \"NOT_FOUND\" });\n      }\n      return (await addUserDataToPosts([post]))[0];\n    }),\n```\n\n> And then we can use it in the `[id].tsx`:\n\n```\nimport type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\n\nimport { PostView } from \"~/components/postview\";\nimport { PageLayout } from \"~/components/layout\";\nimport { generateSSGHelper } from \"~/server/helpers/ssgHelper\";\n\nconst SinglePostPage: NextPage<{ id: string }> = ({ id }) => {\n  const { data } = api.posts.getById.useQuery({\n    id,\n  });\n\n  if (!data) {\n    return <div className=\"flex h-screen justify-center\">404</div>;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>{`${data.post.content} - ${data.author.username}`}</title>\n      </Head>\n      <PageLayout>\n        <PostView {...data} />\n      </PageLayout>\n    </>\n  );\n};\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = generateSSGHelper();\n\n  const id = context.params?.id;\n\n  if (typeof id !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  await ssg.posts.getById.prefetch({ id });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      id,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nexport default SinglePostPage;\n```\n\n> This creates the page for individual post, yay!\n\n**2.24 How to cut the build time on Vercel to halftime - Github CI**\n\n> You should not be checking your types in lint on Vercel builds. There is not reason to because Github CI is free and it is right there. how to use it?\n\n> On Github our code lives and our code validation should happen there.\n\n> The thing that builds and deploys it should be separate. (Vercel)\n\n> Deploying should not be blocked by typecript passes.\n\n> Github's role is to make sure code is correct\n\n> Vercel's role is to deploy the code we give it\n\n> We will use ChatGPT to write yml files for us :P\n\n> Give it this question: `Write me a minimal github ci .yml workflow file that installs node modules, runs typescript typechecking, and also runs lint. This repo uses npm`\n\n> Out put will be:\n\n```\nname: CI\n\non: [push, pull_request]\n\nenv:\n  DATABASE_URL: \"https://fake.com\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run type checking\n        run: npm run type-check\n\n      - name: Run linting\n        run: npm run lint\n\n```\n\n> We will create a `ci.yml` file in this path: `.github/workflows/`\n\n> Paste that content there.\n\n> Please note we added `env: DATABASE_URL: \"https://fake.com\"`\n\n> We also need to add `type-check` command to `package.json`\n\n```\n\"scripts\": {\n    \"build\": \"next build\",\n...\n    \"typecheck\": \"tsc --noEmit\"\n  },\n```\n\n> Let's now try to commit it and push\n\n> Now go to github and check it out\n\n![](https://i.imgur.com/nyMpL9z.png \"Photo by Addania\")<p style=\"font-size: 12px; text-align: right\">_Photo by Addania_</p>\n\n> This then means we dont need to run type checking on Vercel, so let's disable it:\n\n> Go to file: n`ext.config-mjs` and paste there following:\n\n```\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true\n  },\n  swcMinify: true\n```\n\n> Whole file will look like this:\n\n```\n!process.env.SKIP_ENV_VALIDATION && (await import(\"./src/env.mjs\"));\n\nconst config = {\n  reactStrictMode: true,\n  images: {\n    domains: [\"images.clerk.dev\"],\n  },\n\n  i18n: {\n    locales: [\"en\"],\n    defaultLocale: \"en\",\n  },\n\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  swcMinify: true,\n};\nexport default config;\n\n```\n\n> swcMinifiy will run instead of babel and will speed things up.\n\n**2.25 Real domain**\n\n> Vercel has the option to buy domains when you go to Domains tab\n\n> And it is super easy to add a e-mail server to the domain only with one click on Vercel\n\n> If we have a domain, how do we add it to our project?\n\n> Go to Verce -> Settings -> Domains\n\n> Type in there the domain and click Add.\n\n> If we want to have a subdomain of a domain like `addania.com`, we just pre-fix our domain with something: `chirp.addania.com`\n\n> There you can also add a re-direct.\n","frontmatter":{"date":"2023-03-28","title":"T3 APP","category":"knowledge-base"},"fields":{"slug":"/T3_App/"},"timeToRead":77,"html":"<p><img src=\"https://i.imgur.com/9HA97rK.png\" title=\"Photo from Addania\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from Addania</em></p></p>\n<blockquote>\n<p>Reference: <a href=\"https://create.t3.gg/\">https://create.t3.gg/</a></p>\n</blockquote>\n<blockquote>\n<p>T3 was recommended to me by couple of people.</p>\n</blockquote>\n<pre><code>npm create t3-app@latest\n</code></pre>\n<p><strong>Prisma</strong></p>\n<blockquote>\n<p>Prisma is a tool which helps to interact with relational databases without needing to write SQL queries. It is a helper tool to communicate with databases</p>\n</blockquote>\n<blockquote>\n<p>If you go to folder called <code>prisma</code>, there will be a file called <code>schema.prisma</code></p>\n</blockquote>\n<blockquote>\n<p><code>schema.prisma</code> file declares with which database we will work with.</p>\n</blockquote>\n<pre><code>datasource db {\n    provider = \"sqlite\"\n    url      = env(\"DATABASE_URL\")\n}\n</code></pre>\n<blockquote>\n<p>In t3 app, prisma works with <code>sqlite</code> database.</p>\n</blockquote>\n<blockquote>\n<p>The url for the database is written in .env file:</p>\n</blockquote>\n<pre><code>DATABASE_URL=\"file:./db.sqlite\"\n</code></pre>\n<blockquote>\n<p><code>sqlite</code> is a file based database. Its structure resembles a \"json\" file but it is actually a table.</p>\n</blockquote>\n<blockquote>\n<p><code>sqlite</code> is not recommended to be used for production, or to be deployed. But it is very good for experimentation.</p>\n</blockquote>\n<blockquote>\n<p><code>schema.prisma</code> declares also all schemas (tables and their columns). Basically the structure of tables and data in it. <code>Example</code> is one such table:</p>\n</blockquote>\n<pre><code>model Example {\n    id        String   @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    label     String\n    name      String\n}\n</code></pre>\n<blockquote>\n<p>The database itself is in this file: <code>db.sqlite</code> file. This file does not open well in the VSCode. It can be partially opened in DBeaver. But it contains information about all the tables (schemas) in the database.</p>\n</blockquote>\n<blockquote>\n<p>Useful extension for VSCode to work with Prisma is called: <code>Prisma</code> - it will color-code and format the files which use Prisma. It adds syntax highlighting, formatting and auto-completion.</p>\n</blockquote>\n<p><strong>Prisma studio</strong></p>\n<blockquote>\n<p>In order to run our database we need to do:</p>\n</blockquote>\n<pre><code>npx prisma studio\n</code></pre>\n<blockquote>\n<p>This gives us a local environment to interact with the database at location: <a href=\"http://localhost:5555/\">http://localhost:5555/</a></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/A2yct9B.png\" title=\"Photo by  S. Hermann &#x26; F. Richter from Pixabay\"><p style=\"font-size: 12px; text-align: right\">_Photo by Addania</p></p>\n<blockquote>\n<p>Here we can click on the table we want to see:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/Ny6gxgP.png\" title=\"Photo by  S. Hermann &#x26; F. Richter from Pixabay\"><p style=\"font-size: 12px; text-align: right\">_Photo by Addania</p></p>\n<blockquote>\n<p>We can add entries to our database by clicking on <code>Add record</code> button</p>\n</blockquote>\n<blockquote>\n<p>There are these two useful commands:</p>\n</blockquote>\n<pre><code>npx prisma db push\nnpx prisma migrate dev\n</code></pre>\n<blockquote>\n<p>Use <code>npx prisma db push</code> to synchronize your Prisma schema with your database schema. Introspects the database to infer and executes the changes required to make your database schema reflect the state of your Prisma schema. Use this command if you want to quickly prototype and iterate on schema design locally without the need to deploy these changes to other environments such as other developers, or staging and production environments. It is good for prototyping</p>\n</blockquote>\n<blockquote>\n<p>So if I do some changes in my <code>schema.prisma</code> locally and I want to see the results, I use <code>npx prisma db push</code>.</p>\n</blockquote>\n<blockquote>\n<p><code>npx prisma migrate dev</code> is when we want to create a migration and we want this to be reflected in other environments without losing data. We use migrations to commit the schema changes and apply these in your other environments.</p>\n</blockquote>\n<blockquote>\n<p>In oder words migrate is for storing.</p>\n</blockquote>\n<blockquote>\n<p><code>npx prisma migrate dev</code> creates and uses a migration</p>\n</blockquote>\n<blockquote>\n<p>All migrations can be see in the migration folder, they are all put on top of each other. Each needs to have a name.</p>\n</blockquote>\n<p><strong>TRPC</strong></p>\n<blockquote>\n<p>Then how to use query what we have in our sqlite database? We use <code>TRPC</code> for it.</p>\n</blockquote>\n<blockquote>\n<p>Go to this file:</p>\n</blockquote>\n<pre><code>src/server/api/routers/example.ts\n</code></pre>\n<blockquote>\n<p>Add this piece of code to <code>exampleRouter</code>:</p>\n</blockquote>\n<pre><code> getAll: publicProcedure.query(async ({ ctx }) => {\n    const test = await ctx.prisma.example.findUnique({ where: { id: 123 } });\n    console.log(\"test\", test?.createdAt);\n    return ctx.prisma.example.findMany();\n  }),\n</code></pre>\n<blockquote>\n<p>Please note, that you need to add asyncto the query function and then await in front of the <code>ctx.prisma.example</code></p>\n</blockquote>\n<p><strong>UI components</strong></p>\n<blockquote>\n<p>It is good to use some external libraryfor components. Good examples:</p>\n</blockquote>\n<ul>\n<li><a href=\"https://mantine.dev/\">https://mantine.dev/</a></li>\n<li><a href=\"https://chakra-ui.com/\">https://chakra-ui.com/</a></li>\n</ul>\n<p><strong>Authentication</strong></p>\n<blockquote>\n<p>T3 uses Discord login vendor for authentication.</p>\n</blockquote>\n<blockquote>\n<p>Other vendors like google can be added.</p>\n</blockquote>\n<blockquote>\n<p>Next auth with trpc?</p>\n</blockquote>\n<blockquote>\n<p>Follow the steps for authentication here: <a href=\"https://create.t3.gg/en/usage/first-steps\">https://create.t3.gg/en/usage/first-steps</a></p>\n</blockquote>\n<blockquote>\n<p>Summary from the article above:</p>\n</blockquote>\n<blockquote>\n<p>You will need a Discord account, so register one if you haven’t already.</p>\n</blockquote>\n<blockquote>\n<p>Navigate to <a href=\"https://discord.com/developers/applications%E2%86%97\">https://discord.com/developers/applications↗</a> and click “New Application” in the top right corner. Give your application a name and agree to the Terms of Service.</p>\n</blockquote>\n<blockquote>\n<p>Once your application has been created, navigate to “Settings → OAuth2 → General”.</p>\n</blockquote>\n<blockquote>\n<p>Copy the “Client ID” and add it to your .env as DISCORD<em>CLIENT</em>ID.</p>\n</blockquote>\n<blockquote>\n<p>Click “Reset Secret”, copy the new secret, and add it to your .env as DISCORD<em>CLIENT</em>SECRET.</p>\n</blockquote>\n<blockquote>\n<p>Click “Add Redirect” and type in <a href=\"http://localhost:3000/api/auth/callback/discord\">http://localhost:3000/api/auth/callback/discord</a>.\nFor production deployment, follow the previous steps to create another Discord Application, but this time replace <a href=\"http://localhost:3000\">http://localhost:3000</a> with the URL that you are deploying to.</p>\n</blockquote>\n<blockquote>\n<p>Save Changes.</p>\n</blockquote>\n<blockquote>\n<p>Set the NEXTAUTH_SECRET in .env. In development any string will work, for production see the note in .env on generating a secure secret.</p>\n</blockquote>\n<blockquote>\n<p>Go to this page: <a href=\"http://localhost:3000/api/auth/callback/discord\">http://localhost:3000/api/auth/callback/discord</a> and allow the application access.</p>\n</blockquote>\n<blockquote>\n<p>Then you can start your application</p>\n</blockquote>\n<p><strong>Start the application</strong></p>\n<blockquote>\n<p>Use this command:</p>\n</blockquote>\n<pre><code>npm run dev\n</code></pre>\n<blockquote>\n<p>It will run at: <a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n</blockquote>\n<p><strong>Step by Steps Guide to chirp project</strong></p>\n<p><strong>1. Setup</strong></p>\n<p><strong>1.1 First steps</strong></p>\n<blockquote>\n<p>Go to projects folder</p>\n</blockquote>\n<pre><code>npm create t3-app@latest\n</code></pre>\n<blockquote>\n<p>Select typescript, prisma, tailwind, trpc</p>\n</blockquote>\n<blockquote>\n<p>Initialize new git repo? yes</p>\n</blockquote>\n<blockquote>\n<p>Npm install? yes</p>\n</blockquote>\n<blockquote>\n<p>If you get an error for git init, you have to do it manual in the chirp project</p>\n</blockquote>\n<pre><code>git init\n</code></pre>\n<blockquote>\n<p>Then commit:</p>\n</blockquote>\n<pre><code>git add .\ngit commit -m \"Getting started\"\n</code></pre>\n<blockquote>\n<p>Go to github and create new repo. Click + and name your project. Make it private/public. Do not check any other options</p>\n</blockquote>\n<blockquote>\n<p>It will give you then these commands, which you paste to your terminal:</p>\n</blockquote>\n<pre><code>git remote add origin git@github.com:addania/chirp.git\ngit branch -M main\ngit push -u origin main\n</code></pre>\n<blockquote>\n<p>Please note you have to have something git added and git commited before you can execute those.</p>\n</blockquote>\n<blockquote>\n<p>Check your github repo if code it there</p>\n</blockquote>\n<blockquote>\n<p>Run the local:</p>\n</blockquote>\n<pre><code>npm run dev\n</code></pre>\n<blockquote>\n<p>If it stops make sure you firstly do this:</p>\n</blockquote>\n<pre><code>nvm install 16.0.0\n</code></pre>\n<blockquote>\n<p>Then you should be able to run:</p>\n</blockquote>\n<pre><code>npm run dev\n</code></pre>\n<p><strong>1.2 Database</strong></p>\n<blockquote>\n<p>Setting up database. At the moment we use sqlite database, wihch is good for experimenting but not for production. We will use planetscale for that.</p>\n</blockquote>\n<blockquote>\n<p>Go to <a href=\"https://app.planetscale.com/\">https://app.planetscale.com/</a> and create account. Create there a new database. Give it a name like achievsdb. Choose location same as your Vercel account (where you will be deploying), typically the one closest to your location.</p>\n</blockquote>\n<blockquote>\n<p>It will create your database. Click Connect button. Choose <code>Connect with Prisma</code></p>\n</blockquote>\n<blockquote>\n<p>This will give you database url which you need to paste to your <code>.env</code> file</p>\n</blockquote>\n<pre><code>DATABASE_URL='mysql://....'\n</code></pre>\n<blockquote>\n<p>So go to your chirp project and open <code>.env</code> file. Instead of sqlite paste there those credentials:</p>\n</blockquote>\n<pre><code>DATABASE_URL='mysql://....'\n</code></pre>\n<blockquote>\n<p><code>.env.example</code> file is git ignored, should never be commited to the github and should not be shared publically!! If it happens by mistake, you will need to change credentials to your database for security reasons.</p>\n</blockquote>\n<blockquote>\n<p>This variable though is now on our local development environment but if we want to deploy it, we also need to provide this variable to the production environment.</p>\n</blockquote>\n<blockquote>\n<p>We still need to do a small setup step. Seach on google for planetscale prisma and visit this page:\n<a href=\"https://planetscale.com/docs/tutorials/prisma-quickstart\">https://planetscale.com/docs/tutorials/prisma-quickstart</a></p>\n</blockquote>\n<blockquote>\n<p>Go to <code>Initialize prisma</code> section and copy this code from there:</p>\n</blockquote>\n<pre><code>datasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n</code></pre>\n<blockquote>\n<p>Then in our project go to: schema.prisma file and remove this code:</p>\n</blockquote>\n<pre><code>generator client {\n    provider = \"prisma-client-js\"\n}\n\ndatasource db {\n    provider = \"sqlite\"\n    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below\n    // Further reading:\n    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema\n    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string\n    url      = env(\"DATABASE_URL\")\n}\n</code></pre>\n<blockquote>\n<p>Instead paste the above there:</p>\n</blockquote>\n<pre><code>datasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n</code></pre>\n<blockquote>\n<p>Let's now synchronize our database with schemas that we have in our <code>schema.prisma</code> file. We need to tell prisma to take the current state of our prisma schema with one model called Example which expects id, createdAt and updatedAt in our <code>schema.prisma</code> file and set it to our local database:</p>\n</blockquote>\n<pre><code>npx prisma db push\n</code></pre>\n<blockquote>\n<p>Let's run our prisma studio:</p>\n</blockquote>\n<pre><code>npx prisma studio\n</code></pre>\n<blockquote>\n<p>Let's open our Example table and see if it works fine.</p>\n</blockquote>\n<blockquote>\n<p>Let's also add one entry by clicking on Add entry and Save.</p>\n</blockquote>\n<blockquote>\n<p>Now we git add . and git commit and git push our changes to github repo.</p>\n</blockquote>\n<blockquote>\n<p>Let's deploy our project. We go to <a href=\"https://vercel.com/\">https://vercel.com/</a> where you need to create an account and click on new project and then click on <code>import</code> button from our chirp project.</p>\n</blockquote>\n<blockquote>\n<p>There you uncollapse environmental variables and paste there our:</p>\n</blockquote>\n<pre><code>DATABASE_URL='mysql://....'\n</code></pre>\n<blockquote>\n<p>Then you click on Deploy!</p>\n</blockquote>\n<blockquote>\n<p>You will get a congrats screen. Then click on Continue to dashbord. Go to Settings -> Environment variables and check if the DATABASE_URL is there and if all boxes are checked: production, development &#x26; preview. Save changes if anything needed to be updated. If you needed to be updated maybe you need to redeploy.</p>\n</blockquote>\n<blockquote>\n<p>Go back Projects tab and there you should have a deployment url to your app. click on it to check our brand new site: <a href=\"https://chirp-4xlt.vercel.app/\">https://chirp-4xlt.vercel.app/</a></p>\n</blockquote>\n<blockquote>\n<p>Also go to Setting options -> Functions and change the Function region to the same as you set it in planetscale: AWS eu-central-1</p>\n</blockquote>\n<blockquote>\n<p>New deployment is needed for this to take place. So next time we deploy, it will be reflected.</p>\n</blockquote>\n<p><strong>1.3 Authentication</strong></p>\n<blockquote>\n<p>Last bit we need is authorization. We will use clerk.dev. Visit their website and create an account.</p>\n</blockquote>\n<blockquote>\n<p>Click on <code>create</code> new application and name is chirp.</p>\n</blockquote>\n<blockquote>\n<p>Choose the authentication methods paswordless (without passwords) and using specific providers (google, github, discord) and click on Create application</p>\n</blockquote>\n<blockquote>\n<p>Then on the welcome page, click on the next.js guide to set things up correctly.</p>\n</blockquote>\n<blockquote>\n<p>Click on \"Checkout our new docs\" to be redirected to the next docu page.</p>\n</blockquote>\n<blockquote>\n<p>Follow the Next.js Stable guide:</p>\n</blockquote>\n<blockquote>\n<p>Install clerk:</p>\n</blockquote>\n<pre><code>npm install @clerk/nextjs\n</code></pre>\n<blockquote>\n<p>Then go back to the clerk dashboard -> API Keys and copy the environmental variables:</p>\n</blockquote>\n<pre><code>NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_....\nCLERK_SECRET_KEY=sk_test_....\n</code></pre>\n<blockquote>\n<p>Paste those to .env file:</p>\n</blockquote>\n<pre><code>NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_....\nCLERK_SECRET_KEY=sk_test_....\n</code></pre>\n<blockquote>\n<p>We also need to go to Vercel (our deployment platform) -> Settings -> Environmental variables and paste those there as well to environmental variables. Click Save</p>\n</blockquote>\n<blockquote>\n<p>Then go back to the clerk manual and checkout the part about the clerk provider:</p>\n</blockquote>\n<pre><code>import { ClerkProvider } from \"@clerk/nextjs\";\nimport type { AppProps } from \"next/app\";\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    &#x3C;ClerkProvider {...pageProps}>\n      &#x3C;Component {...pageProps} />\n    &#x3C;/ClerkProvider>\n  );\n}\nexport default MyApp;\n</code></pre>\n<blockquote>\n<p>We need to do this in our App as well.</p>\n</blockquote>\n<blockquote>\n<p>Go to <code>_app.tsx</code> file and paste the provider there:</p>\n</blockquote>\n<pre><code>import { ClerkProvider } from \"@clerk/nextjs\";\nimport { type AppType } from \"next/app\";\nimport { api } from \"~/utils/api\";\nimport \"~/styles/globals.css\";\nconst MyApp: AppType = ({ Component, pageProps }) => {\n  return (\n    &#x3C;ClerkProvider {...pageProps}>\n      &#x3C;Component {...pageProps} />\n    &#x3C;/ClerkProvider>\n  );\n};\nexport default api.withTRPC(MyApp);\n</code></pre>\n<blockquote>\n<p>Next as per their docu we need to add a middlewear. Copy this code:</p>\n</blockquote>\n<pre><code>import { withClerkMiddleware } from \"@clerk/nextjs/server\";\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nexport default withClerkMiddleware((req: NextRequest) => {\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: [\n    \"/((?!static|.*\\\\..*|_next|favicon.ico).*)\",\n    \"/\",\n  ],\n}\n</code></pre>\n<blockquote>\n<p>In our pass go to <code>src</code> folder and add a new file there called <code>middleware.ts</code></p>\n</blockquote>\n<blockquote>\n<p>Remove anything that is not needed from the file (req):</p>\n</blockquote>\n<pre><code>import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nexport default withClerkMiddleware((req: NextRequest) => {\n  return NextResponse.next();\n});\n\n// Stop Middleware running on static files\nexport const config = {\n  matcher: \"/((?!_next/image|_next/static|favicon.ico).*)\",\n};\n</code></pre>\n<blockquote>\n<p>If in double, check their documentation: <a href=\"https://clerk.com/docs/nextjs/middleware\">https://clerk.com/docs/nextjs/middleware</a></p>\n</blockquote>\n<blockquote>\n<p>And especially if we get some weird errors in console:</p>\n</blockquote>\n<pre><code>tRPC failed on &#x3C;no-path>: You need to use \"withClerkMiddleware\" in your Next.js middleware file. You also need to make sure that your middleware matcher is configured correctly and matches this route or page. See https://clerk.com/docs/quickstarts/get-started-with-nextjs\n</code></pre>\n<blockquote>\n<p>Now middleware.ts will run on every request. We can test it by console.logging:</p>\n</blockquote>\n<pre><code>import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nexport default withClerkMiddleware((req: NextRequest) => {\n  console.log(\"I am running\")\n  return NextResponse.next();\n});\n\n// Stop Middleware running on static files\nexport const config = {\n  matcher: \"/((?!_next/image|_next/static|favicon.ico).*)\",\n};\n</code></pre>\n<blockquote>\n<p>And in terminal we will see the console output.</p>\n</blockquote>\n<blockquote>\n<p>Next we need to use SignIn component &#x26; SingInButton from the Clerk.</p>\n</blockquote>\n<pre><code>import { SignIn, SignInButton } from \"@clerk/nextjs\";\n&#x3C;SignIn path=\"/sign-in\" routing=\"path\" signUpUrl=\"/sign-up\" />\n</code></pre>\n<blockquote>\n<p>We go to /src/pages/index.tsx</p>\n</blockquote>\n<blockquote>\n<p>Remove most of the content and üaste the component there:</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { SignIn, SignInButton } from \"@clerk/nextjs\";\nimport { api } from \"~/utils/api\";\nconst Home: NextPage = () => {\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Create T3 App&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n        &#x3C;div style={{ color: \"white\" }}>\n          &#x3C;SignInButton />\n        &#x3C;/div>\n        &#x3C;SignIn path=\"/sign-in\" routing=\"path\" signUpUrl=\"/sign-up\" />\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\nexport default Home;\n</code></pre>\n<blockquote>\n<p>Now you can see a sign in button and you can click it to sign to your application! You will see there options with which you can sign in, yay!</p>\n</blockquote>\n<blockquote>\n<p>If you want to change the settings of the sign-in to your app, you need to go to clerk dashboard -> User &#x26; Authentication and you can for example disable username or password in Email user.</p>\n</blockquote>\n<blockquote>\n<p>Now lets conditionally display sign in button, if there is no user logged in and if there is, we will show the SignOutButton. For that we will use: useUser hook, which has properties on it like: isSignedIn</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { SignIn, SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\n\nconst Home: NextPage = () => {\n  const user = useUser();\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Create T3 App&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n        &#x3C;div style={{ color: \"white\" }}>\n          {!user.isSignedIn &#x26;&#x26; &#x3C;SignInButton />}\n          {!!user.isSignedIn &#x26;&#x26; &#x3C;SignOutButton />}\n        &#x3C;/div>\n        &#x3C;SignIn path=\"/sign-in\" routing=\"path\" signUpUrl=\"/sign-up\" />\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\nexport default Home;\n</code></pre>\n<blockquote>\n<p>Let's get it on our server:</p>\n</blockquote>\n<pre><code>git add .\ngit commit -m \"Add sign in/out\"\ngit push\n</code></pre>\n<p><strong>1.4 Tracking bugs in production</strong></p>\n<blockquote>\n<p>We want to know when things go wrong in our produciton. We will use axiom for that. Vercel also has a logging system, but axiom is more thorough.</p>\n</blockquote>\n<blockquote>\n<p>Go to: <a href=\"https://axiom.co/\">https://axiom.co/</a> and create an account.</p>\n</blockquote>\n<blockquote>\n<p>Go to Vercel to your project -> Settings -> Integrations</p>\n</blockquote>\n<blockquote>\n<p>In the section Logging find Axiom -> Click add integration</p>\n</blockquote>\n<blockquote>\n<p>Select a Vercel Account to add the Integration to: personal(addania)</p>\n</blockquote>\n<blockquote>\n<p>Click on Add integration button -> Sign in (with github) -> Authenticate</p>\n</blockquote>\n<blockquote>\n<p>Add new organization name: addania</p>\n</blockquote>\n<blockquote>\n<p>Click Connect to Vercel button</p>\n</blockquote>\n<blockquote>\n<p>Now in Vercel we have a new tab called Integrations, where we can track things more easily then with Vercel</p>\n</blockquote>\n<p><strong>2. Building the application</strong></p>\n<p><strong>2.1 Adding some data to database</strong></p>\n<blockquote>\n<p>Let's go to <code>schema.prisma</code> file and add a new model/schema called Post:</p>\n</blockquote>\n<pre><code>model Post {\nid String @id @default(cuid())\ncreatedAt DateTime @default(now())\ncontent String @db.VarChar(255)\nauthorId String\n@@index([authorId])\n}\n</code></pre>\n<blockquote>\n<p>Let's break down what this syntax means (thank you ChatGPT &#x3C;3)</p>\n</blockquote>\n<blockquote>\n<p><code>model Post</code>: This line defines the name of the data model. In this case, it's called \"Post\". You can think of this as creating a new table in your database called \"Post\" that will hold data for posts.</p>\n</blockquote>\n<blockquote>\n<p><code>id String @id @default(cuid())</code>: This line defines a field in the Post table called \"id\". The field type is a string, and it is also marked with the Prisma directive \"@id\", which tells Prisma that this field should be the primary key of the table. The \"@default(cuid())\" directive sets a default value for this field using the cuid() function, which generates a unique identifier.</p>\n</blockquote>\n<blockquote>\n<p><code>createdAt DateTime @default(now())</code>: This line defines another field called \"createdAt\". This field is of type \"DateTime\", and it is marked with the \"@default(now())\" directive, which sets the default value of this field to the current date and time.</p>\n</blockquote>\n<blockquote>\n<p><code>content String @db.VarChar(255)</code>: This line defines a field called \"content\". This field is of type \"String\", and it is also marked with the \"@db.VarChar(255)\" directive, which specifies the maximum length of the field in the database as 255 characters.</p>\n</blockquote>\n<blockquote>\n<p><code>authorId String</code>: This line defines another field called \"authorId\", which is a string type. This field will be used to store the ID of the author who wrote the post.</p>\n</blockquote>\n<blockquote>\n<p><code>@@index([authorId])</code>: This line defines an index on the \"authorId\" field. This allows you to quickly search for all posts written by a particular author.</p>\n</blockquote>\n<blockquote>\n<p>More about Prisma indexing - a way to speed up the search in database by creating an index on a specific columns: In Prisma, an index is a data structure that helps speed up database queries by allowing the database to quickly search for data based on the values in specific columns. When you define an index on a column in a Prisma schema, it tells the database to create an index on that column.</p>\n</blockquote>\n<blockquote>\n<p>In the example schema above, the @@index([authorId]) directive creates an index on the authorId column in the Post table. This means that when you query the database for all posts written by a specific author, the database can use the index to quickly find all posts with the matching authorId value, rather than having to scan through the entire Post table to find them.</p>\n</blockquote>\n<blockquote>\n<p>Here's an example of how you might use this index in a Prisma query:</p>\n</blockquote>\n<pre><code>const postsByAuthor = await prisma.post.findMany({\n  where: {\n    authorId: \"1234567890\" // Replace with the actual author ID you want to search for\n  }\n});\n</code></pre>\n<blockquote>\n<p>In this example, the findMany() method is used to search the Post table for all posts written by the author with the ID \"1234567890\". Because the authorId column has an index, the database can use it to quickly find all matching posts, making the query faster and more efficient.</p>\n</blockquote>\n<blockquote>\n<p>Now we can sync our database with and we will see the applied changes:</p>\n</blockquote>\n<pre><code>npx prisma db push\n</code></pre>\n<blockquote>\n<p>Don't forget to run the prisma studio:</p>\n</blockquote>\n<pre><code>npx prisma studio\n</code></pre>\n<blockquote>\n<p>Also we changed the schema, so we also need to tell typescript about it. Because schema.prisma is not in typescript, so we need to generate new typescript files from it. Easy way to do it:</p>\n</blockquote>\n<pre><code>npm install\n</code></pre>\n<blockquote>\n<p><code>npm install</code> will trigger the generation of typescript automatically.</p>\n</blockquote>\n<blockquote>\n<p>Or alternatively:</p>\n</blockquote>\n<pre><code>npx prisma db generate\n</code></pre>\n<blockquote>\n<p>Now when we want to go to <code>src/server/api/routers/example.ts</code> we will see TS errors, since we no longer have example schema</p>\n</blockquote>\n<blockquote>\n<p>We can change example to be post:</p>\n</blockquote>\n<pre><code>import { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nexport const exampleRouter = createTRPCRouter({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n  getAll: publicProcedure.query(({ ctx }) => {\n    return ctx.prisma.post.findMany();\n  }),\n});\n</code></pre>\n<blockquote>\n<p>If TS and ESLint still indicate an error, you can <code>ctrl+shift+p</code> and Restart Typescript Server &#x26; Restart ESLint Server (both run servers in the background)</p>\n</blockquote>\n<p><strong>2.2 Accessing data via trpc</strong></p>\n<blockquote>\n<p>What is trpc? trpc let's you create server functions (backend functions) which run on a server (in our case on Vercel) which do things like: fetch data from the database, so we can get the data in right shape and authenticated and you provide this data to your user, without your user needing to run the database code themselves. We never want a user to connect directly to a database. For that reason we use Vercel. With trpc it is super easy to access database even if it lives on entirely different server than the computer the user is using.</p>\n</blockquote>\n<blockquote>\n<p>All the backend code is in the src/server folder</p>\n</blockquote>\n<blockquote>\n<p>In <code>server/api/routers</code> we have an example router called <code>example.ts</code> but we can add our own as a new file called <code>post.ts</code> and adjust it to our needs. Let's add getAll method.</p>\n</blockquote>\n<pre><code>import { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(({ ctx }) => {\n    return ctx.prisma.post.findMany();\n  }),\n});\n</code></pre>\n<blockquote>\n<p>Let's brak down the syntax. #</p>\n</blockquote>\n<blockquote>\n<p><code>createTRPCRouter</code>: This is a function provided by TRPC that creates a router for your TRPC server. A router is responsible for defining the API endpoints and the procedures that should be executed when those endpoints are called.</p>\n</blockquote>\n<blockquote>\n<p><code>{ getAll: publicProcedure.query(...) }</code>: This is an object that defines a single procedure called getAll, which can be accessed by calling the API endpoint <code>/posts/getAll</code>. <code>publicProcedure</code> is a method to generate the function that the client calls. The <code>publicProcedure.query</code> function is a helper provided by TRPC that creates a procedure that can be called publicly by anyone without being authenticated.</p>\n</blockquote>\n<blockquote>\n<p><code>({ ctx }) => { return ctx.prisma.post.findMany(); }</code>: This is the function that defines the behavior of the getAll procedure. When the getAll endpoint is called, this function will be executed. The function takes a single argument, which is an object containing the <code>ctx</code> - <code>context</code> of the current request. In this case, the context includes a prisma property, which is an instance of the Prisma client that can be used to query the database. The function simply calls the <code>findMany()</code> method on the post table in the database using the Prisma client and returns the result.</p>\n</blockquote>\n<blockquote>\n<p>So in summary, this example router defines a single API endpoint called <code>/posts/getAll</code> that returns all posts from the post table in the database using the Prisma client. When a client makes a request to this endpoint, the TRPC server will execute the getAll procedure, which will query the database using Prisma and return the result.</p>\n</blockquote>\n<blockquote>\n<p>Let's take a close look at: <code>({ ctx }) => { return ctx.prisma.post.findMany(); }</code></p>\n</blockquote>\n<blockquote>\n<p>In TRPC, the <code>ctx</code> object, short for \"context\", is an object that contains information about the current request being handled by the server. The context object is passed as an argument to the procedure function, which is the function that defines the behavior of a TRPC endpoint.</p>\n</blockquote>\n<blockquote>\n<p>In the example router above, the getAll procedure function is defined as follows:</p>\n</blockquote>\n<pre><code>publicProcedure.query(({ ctx }) => {\nreturn ctx.prisma.post.findMany();\n}),\n</code></pre>\n<blockquote>\n<p>This procedure function is defined as an arrow function that takes a single argument, which is an object that contains the <code>ctx</code> property. In this case, the <code>publicProcedure.query</code> function is used to create a public query procedure that can be called by anyone. The <code>publicProcedure.query</code> function takes a function that defines the behavior of the procedure when it's called.</p>\n</blockquote>\n<blockquote>\n<p>The procedure function defined here simply returns the result of calling <code>ctx.prisma.post.findMany()</code>. Here's a breakdown of what that means:</p>\n</blockquote>\n<blockquote>\n<p><code>ctx</code>: This is the context object passed to the procedure function by TRPC. The context object contains information about the current request being handled, such as the HTTP request <code>headers</code> and any <code>authentication</code> information.</p>\n</blockquote>\n<blockquote>\n<p><code>ctx.prisma</code>: This is a property of the context object that contains an instance of the Prisma client. The Prisma client is used to query the database.</p>\n</blockquote>\n<blockquote>\n<p><code>ctx.prisma.post</code>: This is a property of the Prisma client that represents the post table in the database. It provides methods for querying, updating, and deleting rows in the post table.</p>\n</blockquote>\n<blockquote>\n<p><code>ctx.prisma.post.findMany()</code>: This is a method provided by the Prisma client that queries the post table and returns an array of all posts in the table.</p>\n</blockquote>\n<blockquote>\n<p>So in summary, the ({ ctx }) => { return ctx.prisma.post.findMany(); } function simply returns all posts from the post table in the database using the Prisma client. The ctx object is passed to the function by TRPC as a parameter, and the Prisma client is accessed through the ctx.prisma property.</p>\n</blockquote>\n<blockquote>\n<p>Now in the file: <code>src/server/api/root.ts</code> we need to add that postRouter there:</p>\n</blockquote>\n<pre><code>import { createTRPCRouter } from \"~/server/api/trpc\";\nimport { postRouter } from \"~/server/api/routers/post\";\n\nexport const appRouter = createTRPCRouter({\n  posts: postsRouter,\n});\n\nexport type AppRouter = typeof appRouter;\n</code></pre>\n<blockquote>\n<p>Now we go to our pages/index.tsx file and we retrieve data from our posts router:</p>\n</blockquote>\n<pre><code>import { api } from \"~/utils/api\";\nconst { data } = api.posts.getAll.useQuery();\n</code></pre>\n<blockquote>\n<p>We can then display the data:</p>\n</blockquote>\n<pre><code>{data?.map((post) => (\n            &#x3C;div key={post.id} style={{ color: \"white\" }}>\n              {post.content}\n            &#x3C;/div>\n          ))}\n</code></pre>\n<blockquote>\n<p>Whole page looks like this <code>index.ts</code>:</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\n\nimport { api } from \"~/utils/api\";\n\nconst Home: NextPage = () => {\n  const user = useUser();\n  const { data } = api.posts.getAll.useQuery();\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Create T3 App&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n        &#x3C;div style={{ color: \"white\" }}>\n          {!user.isSignedIn &#x26;&#x26; &#x3C;SignInButton />}\n          {!!user.isSignedIn &#x26;&#x26; (\n            &#x3C;>\n              &#x3C;p>Hello {user.user.fullName}&#x3C;/p>\n              &#x3C;SignOutButton />\n            &#x3C;/>\n          )}\n        &#x3C;/div>\n        &#x3C;div>\n          {data?.map((post) => (\n            &#x3C;div key={post.id} style={{ color: \"white\" }}>\n              {post.content}\n            &#x3C;/div>\n          ))}\n        &#x3C;/div>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default Home;\n</code></pre>\n<blockquote>\n<p>Let's add, commit &#x26; push. On each push Vercel makes a new deployment.</p>\n</blockquote>\n<p><strong>2.3 Adding tailwind styles</strong></p>\n<blockquote>\n<p>Let's add some styles. We will use tailwind for it. Here is some official documentation: <a href=\"https://v2.tailwindcss.com/docs\">https://v2.tailwindcss.com/docs</a></p>\n</blockquote>\n<blockquote>\n<p>Especially useful are the colors: <a href=\"https://v2.tailwindcss.com/docs/customizing-colors\">https://v2.tailwindcss.com/docs/customizing-colors</a></p>\n</blockquote>\n<blockquote>\n<p>Tailwind is a utility-first CSS framework that provides a set of pre-defined class names that can be used to style your HTML elements. Here are some basic Tailwind class names and what they do:</p>\n</blockquote>\n<blockquote>\n<p><code>text-*</code> - Sets the text color and font size. For example, <code>text-red-500</code> sets the text color to red and <code>text-lg</code> sets the font size to large.</p>\n</blockquote>\n<blockquote>\n<p><code>bg-*</code> - Sets the background color. For example, <code>bg-blue-300</code> sets the background color to light blue.</p>\n</blockquote>\n<blockquote>\n<p><code>p-*</code> and <code>m-*</code> - Sets the padding and margin, respectively. For example, <code>p-4</code> sets the padding to 4 units (default unit is rem) and <code>m-2</code> sets the margin to 2 units.</p>\n</blockquote>\n<blockquote>\n<p><code>w-*</code> and <code>h-*</code> - Sets the width and height, respectively. For example, <code>w-1/2</code> sets the width to 50% and <code>h-64</code> sets the height to 64 units.</p>\n</blockquote>\n<blockquote>\n<p><code>flex</code> and <code>flex-*</code> - Sets the display property to flex and provides additional flexbox properties, respectively. For example, <code>flex</code> sets the display to flex and <code>flex-wrap</code> sets the flex-wrap property.</p>\n</blockquote>\n<blockquote>\n<p><code>grid</code> and <code>grid-*</code> - Sets the display property to grid and provides additional grid properties, respectively. For example, <code>grid</code> sets the display to grid and <code>grid-cols-3</code> sets the number of columns in the grid to 3.</p>\n</blockquote>\n<blockquote>\n<p><code>rounded-*</code> - Sets the border radius. For example, <code>rounded-full</code> sets a circular border radius and <code>rounded-md</code> sets a medium rounded border.</p>\n</blockquote>\n<p>These are just a few examples of the many Tailwind class names available. By using these class names, you can easily style your HTML elements without having to write custom CSS.</p>\n<blockquote>\n<p>Here is the whole code with styles for our. We will unwrap it later:</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { SignIn, SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\n\nimport { api } from \"~/utils/api\";\n\nconst Home: NextPage = () => {\n  const user = useUser();\n  const { data, isLoading } = api.posts.getAll.useQuery();\n\n  if (isLoading) {\n    return &#x3C;div>Loading...&#x3C;/div>;\n  }\n\n  if (!data) {**2.4 Adding tailwind styles**\n    return &#x3C;div>Something went wrong...&#x3C;/div>;\n  }\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Create T3 App&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main className=\"flex h-screen justify-center\">\n        &#x3C;div className=\"h-full w-full border-x border-slate-400 md:max-w-2xl\">\n          &#x3C;div className=\"flex border-b border-slate-400 p-4\">\n            {!user.isSignedIn &#x26;&#x26; (\n              &#x3C;div className=\"flex justify-center\">\n                &#x3C;SignInButton />\n              &#x3C;/div>\n            )}\n            {!!user.isSignedIn &#x26;&#x26; (\n              &#x3C;>\n                &#x3C;p>Hi {user.user.fullName}&#x3C;/p>\n                &#x3C;SignOutButton />\n              &#x3C;/>\n            )}\n          &#x3C;/div>\n          &#x3C;div className=\"flex flex-col\">\n            {data.map((post) => (\n              &#x3C;div key={post.id} className=\"border-b border-slate-400 p-8\">\n                {post.content}\n              &#x3C;/div>\n            ))}\n          &#x3C;/div>\n        &#x3C;/div>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default Home;\n</code></pre>\n<blockquote>\n<p>Let's crack this:</p>\n</blockquote>\n<blockquote>\n<p><code>flex</code>: This class is used to set the display property of the main element to flex.</p>\n</blockquote>\n<blockquote>\n<p><code>h-screen</code>: This class is used to set the height of the main element to be equal to the height of the screen.</p>\n</blockquote>\n<blockquote>\n<p><code>justify-center</code>: This class is used to center the content horizontally within the main element.</p>\n</blockquote>\n<blockquote>\n<p><code>h-full</code>: This class is used to set the height of the div element to 100% of its parent element.</p>\n</blockquote>\n<blockquote>\n<p><code>w-full</code>: This class is used to set the width of the div element to 100% of its parent element.</p>\n</blockquote>\n<blockquote>\n<p><code>border-x</code>: This class is used to set a horizontal border on the div element.</p>\n</blockquote>\n<blockquote>\n<p><code>border-slate-400</code>: This class is used to set the border color of the div element to a shade of gray.</p>\n</blockquote>\n<blockquote>\n<p><code>md:max-w-2xl</code>: This class is used to set the maximum width of the div element to 2xl (a predefined width in Tailwind).</p>\n</blockquote>\n<blockquote>\n<p><code>p-4</code>: This class is used to set the padding of the div element containing the Sign In button to 4 units.</p>\n</blockquote>\n<blockquote>\n<p><code>border-b</code>: This class is used to set a bottom border on the div element containing the Sign In button.</p>\n</blockquote>\n<p><strong>2.5 Add loading checks</strong></p>\n<blockquote>\n<p>In case data is still loading we want to display Loading and if there is no data, we want to display Something went wrong</p>\n</blockquote>\n<blockquote>\n<p>One convenient thing that queries return is <code>isLoading</code></p>\n</blockquote>\n<pre><code>  const { data, isLoading } = api.posts.getAll.useQuery();\n  if (isLoading) {\n    return &#x3C;div>Loading...&#x3C;/div>;\n  }\n  if (!data) {**2.4 Adding tailwind styles**\n    return &#x3C;div>Something went wrong...&#x3C;/div>;\n  }\n</code></pre>\n<blockquote>\n<p>Whole code will look like this:</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { SignIn, SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\n\nimport { api } from \"~/utils/api\";\n\nconst Home: NextPage = () => {\n  const user = useUser();\n  const { data, isLoading } = api.posts.getAll.useQuery();\n\n  if (isLoading) {\n    return &#x3C;div>Loading...&#x3C;/div>;\n  }\n\n  if (!data) {**2.4 Adding tailwind styles**\n    return &#x3C;div>Something went wrong...&#x3C;/div>;\n  }\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Create T3 App&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main className=\"flex h-screen justify-center\">\n        &#x3C;div className=\"h-full w-full border-x border-slate-400 md:max-w-2xl\">\n          &#x3C;div className=\"flex border-b border-slate-400 p-4\">\n            {!user.isSignedIn &#x26;&#x26; (\n              &#x3C;div className=\"flex justify-center\">\n                &#x3C;SignInButton />\n              &#x3C;/div>\n            )}\n            {!!user.isSignedIn &#x26;&#x26; (\n              &#x3C;>\n                &#x3C;p>Hi {user.user.fullName}&#x3C;/p>\n                &#x3C;SignOutButton />\n              &#x3C;/>\n            )}\n          &#x3C;/div>\n          &#x3C;div className=\"flex flex-col\">\n            {data.map((post) => (\n              &#x3C;div key={post.id} className=\"border-b border-slate-400 p-8\">\n                {post.content}\n              &#x3C;/div>\n            ))}\n          &#x3C;/div>\n        &#x3C;/div>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default Home;\n</code></pre>\n<p><strong>2.6 Add User bar</strong></p>\n<blockquote>\n<p>Let's create this component:</p>\n</blockquote>\n<pre><code>const UserBar = () => {\n  const { user } = useUser();\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    &#x3C;div className=\"flex\">\n      &#x3C;img\n        src={user.profileImageUrl}\n        className=\"h-16 w-16 rounded-full\"\n        alt=\"Profile image\"\n      />\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<blockquote>\n<p>Let's use it in our main page at the very top:</p>\n</blockquote>\n<pre><code>{!!user.isSignedIn &#x26;&#x26; (\n   &#x3C;div className=\"flex w-full justify-between\">\n      &#x3C;div className=\"flex items-center  space-x-2\">\n          &#x3C;UserBar />\n          &#x3C;p>Hi {user.user.fullName}&#x3C;/p>\n      &#x3C;/div>\n      &#x3C;SignOutButton />\n  &#x3C;/div>\n)}\n</code></pre>\n<blockquote>\n<p>There is a bit of new tailwind syntax:</p>\n</blockquote>\n<blockquote>\n<p><code>justify-between</code> - positions items at the opposite edges of container horizontally</p>\n</blockquote>\n<blockquote>\n<p><code>items-center</code> - vertically centers items in the container</p>\n</blockquote>\n<blockquote>\n<p><code>space-x-2</code> - creates small space between children of the container</p>\n</blockquote>\n<p><strong>2.7 Create posts</strong></p>\n<blockquote>\n<p>Let's create a component where user can type in a post. We will need the profile pic of the user and an input:</p>\n</blockquote>\n<pre><code>const CreatePostWizard = () => {\n  const { user } = useUser();\n  console.log(\"user\", user);\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    &#x3C;div className=\"flex w-full gap-4 space-x-2 p-4\">\n      &#x3C;img\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n      />\n      &#x3C;input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n      >&#x3C;/input>\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<blockquote>\n<p>We can then use <code>&#x3C;CreatePostWizard /></code> in our page.</p>\n</blockquote>\n<p><strong>2.8 Connecting posts with users</strong></p>\n<blockquote>\n<p>User has one of its props and that is called id. We can console.log user and check the current id: <code>user_2OBaeJj8EI29omUN4LZTUFl7TBh</code></p>\n</blockquote>\n<blockquote>\n<p>If we have that unique id, we can then adjust our trp calls in file: <code>posts.ts</code>:</p>\n</blockquote>\n<pre><code>import { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n    return posts;\n  }),\n});\n</code></pre>\n<blockquote>\n<p>Script above will only return those posts which belong to user with id: user_2OBaeJj8EI29omUN4LZTUFl7TBh</p>\n</blockquote>\n<blockquote>\n<p><code>take: 100</code> limits number of posts to 100</p>\n</blockquote>\n<blockquote>\n<p>But we dont want to hard-code the user. We want to get the user from the Clerk.</p>\n</blockquote>\n<blockquote>\n<p>For now, lets just see how we can get all the users for the posts that we have:</p>\n</blockquote>\n<pre><code>import clerkClient from \"@clerk/clerk-sdk-node\";\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = await clerkClient.users.getUserList({\n      userId: posts.map((post) => post.authorId),\n      limit: 100,\n    });\n    console.log(\"usersss\", users);\n    return posts;\n  }),\n});\n</code></pre>\n<blockquote>\n<p>This will console log it in the terminal! Not in the browser console. But the info it provides is really a lot, we only want the id, username an dprofilePicture, so let's create a filter function.</p>\n</blockquote>\n<pre><code>const filterUserForClient = (user: User) => {\n  return {\n    id: user.id,\n    username: user.username,\n    profilePicture: user.profileImageUrl,\n  };\n};\n</code></pre>\n<blockquote>\n<p>We can then use it in our posts router like this:</p>\n</blockquote>\n<pre><code>export const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = (await clerkClient.users.getUserList({\n      userId: posts.map((post) => post.authorId),\n      limit: 100,\n    })).map(filterUserForClient);\n    return posts;\n  }),\n});\n</code></pre>\n<blockquote>\n<p>Then instead of just returning the array of posts in our getAll trpc, we will return object with post and author in it:</p>\n</blockquote>\n<pre><code>import clerkClient, { User } from \"@clerk/clerk-sdk-node\";\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nconst filterUserForClient = (user: User) => {\n  return {\n    id: user.id,\n    username: user.username,\n    profilePicture: user.profileImageUrl,\n  };\n};\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = (\n      await clerkClient.users.getUserList({\n        userId: posts.map((post) => post.authorId),\n        limit: 100,\n      })\n    ).map(filterUserForClient);\n    return posts.map((post) => {\n      return { post, author: users.find((user) => user.id === post.authorId) };\n    });\n  }),\n});\n</code></pre>\n<blockquote>\n<p>We should also make sure that if there are no authors, we throw an error:</p>\n</blockquote>\n<pre><code>import clerkClient, { User } from \"@clerk/clerk-sdk-node\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nconst filterUserForClient = (user: User) => {\n  return {\n    id: user.id,\n    username: user.username,\n    profilePicture: user.profileImageUrl,\n  };\n};\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = (\n      await clerkClient.users.getUserList({\n        userId: posts.map((post) => post.authorId),\n        limit: 100,\n      })\n    ).map(filterUserForClient);\n    return posts.map((post) => {\n      const author = users.find((user) => user.id === post.authorId);\n\n      if (!author || !author.username) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Author of the posts not found\",\n        });\n      }\n      return { post, author: { ...author, username: author.username } };\n    });\n  }),\n});\n</code></pre>\n<blockquote>\n<p>We also need to adjust our <code>index.tsx</code> cause the response is a bit different.</p>\n</blockquote>\n<blockquote>\n<p>Instead of:</p>\n</blockquote>\n<pre><code>{data.map(( post ) => (\n              &#x3C;div key={post.id} className=\"border-b border-slate-400 p-8\">\n                {post.content}\n              &#x3C;/div>\n))}\n</code></pre>\n<blockquote>\n<p>we need:</p>\n</blockquote>\n<pre><code>{data.map(({ post, author }) => (\n              &#x3C;div key={post.id} className=\"border-b border-slate-400 p-8\">\n                {post.content}\n              &#x3C;/div>\n))}\n</code></pre>\n<blockquote>\n<p>We will now create a PostView component which will show user profile with the post</p>\n</blockquote>\n<blockquote>\n<p>For that we will certainly need a type. But it is super easy to get the types from the router we create. We will need a RouterOUtputs util and in it we will specify which router and where of its procedures</p>\n</blockquote>\n<pre><code>import { RouterOutputs } from \"~/utils/api\";\n\ntype PostWithUser = RouterOutputs[\"posts\"][\"getAll\"]\n</code></pre>\n<blockquote>\n<p>Please note that we will have here array or objects with post and author in it.</p>\n</blockquote>\n<blockquote>\n<p>But for our PostView component we only need one of them, so the actual type will be:</p>\n</blockquote>\n<pre><code>type PostWithUser = RouterOutputs[\"posts\"][\"getAll\"][number]\n</code></pre>\n<blockquote>\n<p>The whole component will look like this:</p>\n</blockquote>\n<pre><code>type PostWithUser = RouterOutputs[\"posts\"][\"getAll\"][number];\n\nconst PostView = (props: PostWithUser) => {\n  const { post, author } = props;\n  return (\n    &#x3C;div\n      key={post.id}\n      className=\"flex items-center gap-4 border-b border-slate-400 p-8\"\n    >\n      &#x3C;Image\n        src={author.profilePicture}\n        alt=\"Author image\"\n        className=\"h-12 w-12  rounded-full\"\n        width={56}\n        height={56}\n      />\n      &#x3C;div className=\"flex flex-col\">\n        &#x3C;div className=\"flex gap-2 text-slate-400\">\n          &#x3C;span>{`@${author.username}`}&#x3C;/span>\n          &#x3C;span>{`•  ${dayjs(post.createdAt).fromNow()}`}&#x3C;/span>\n        &#x3C;/div>\n        &#x3C;div className=\"flex\">{post.content}&#x3C;/div>\n      &#x3C;/div>\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<blockquote>\n<p>The whole page now:</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\n\nimport { SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport { api } from \"~/utils/api\";\nimport type { RouterOutputs } from \"~/utils/api\";\n\ndayjs.extend(relativeTime);\n\nconst CreatePostWizard = () => {\n  const { user } = useUser();\n  console.log(\"user\", user);\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    &#x3C;div className=\"flex w-full gap-4 space-x-2 p-4\">\n      &#x3C;Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n      &#x3C;input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n      >&#x3C;/input>\n    &#x3C;/div>\n  );\n};\n\nconst UserBar = () => {\n  const { user } = useUser();\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    &#x3C;div className=\"flex\">\n      &#x3C;Image\n        src={user.profileImageUrl}\n        className=\"h-16 w-16  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n    &#x3C;/div>\n  );\n};\n\ntype PostWithUser = RouterOutputs[\"posts\"][\"getAll\"][number];\n\nconst PostView = (props: PostWithUser) => {\n  const { post, author } = props;\n  return (\n    &#x3C;div\n      key={post.id}\n      className=\"flex items-center gap-4 border-b border-slate-400 p-8\"\n    >\n      &#x3C;Image\n        src={author.profilePicture}\n        alt=\"Author image\"\n        className=\"h-12 w-12  rounded-full\"\n        width={56}\n        height={56}\n      />\n      &#x3C;div className=\"flex flex-col\">\n        &#x3C;div className=\"flex gap-2 text-slate-400\">\n          &#x3C;span>{`@${author.username}`}&#x3C;/span>\n          &#x3C;span>{`•  ${dayjs(post.createdAt).fromNow()}`}&#x3C;/span>\n        &#x3C;/div>\n        &#x3C;div className=\"flex\">{post.content}&#x3C;/div>\n      &#x3C;/div>\n    &#x3C;/div>\n  );\n};\n\nconst Home: NextPage = () => {\n  const user = useUser();\n  const { data, isLoading } = api.posts.getAll.useQuery();\n\n  if (isLoading) {\n    return &#x3C;div className=\"flex w-full justify-center p-8\">Loading...&#x3C;/div>;\n  }\n\n  if (!data) {\n    return (\n      &#x3C;div className=\"flex w-full justify-center p-8\">\n        Something went wrong...\n      &#x3C;/div>\n    );\n  }\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Create T3 App&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main className=\"flex h-screen justify-center\">\n        &#x3C;div className=\"h-full w-full border-x border-slate-400 md:max-w-2xl\">\n          &#x3C;div className=\"flex border-b border-slate-400 p-4\">\n            {!user.isSignedIn &#x26;&#x26; (\n              &#x3C;div className=\"flex justify-center\">\n                &#x3C;SignInButton />\n              &#x3C;/div>\n            )}\n            {!!user.isSignedIn &#x26;&#x26; (\n              &#x3C;div className=\"w-full\">\n                &#x3C;div className=\"flex w-full justify-between\">\n                  &#x3C;div className=\"flex items-center  space-x-2\">\n                    &#x3C;UserBar />\n                    &#x3C;p>Hi {user.user.fullName}&#x3C;/p>\n                  &#x3C;/div>\n                  &#x3C;SignOutButton />\n                &#x3C;/div>\n                &#x3C;CreatePostWizard />\n              &#x3C;/div>\n            )}\n          &#x3C;/div>\n          &#x3C;div className=\"flex flex-col\">\n            {data.map((fullProps) => (\n              &#x3C;PostView {...fullProps} key={fullProps.post.id} />\n            ))}\n          &#x3C;/div>\n        &#x3C;/div>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default Home;\n</code></pre>\n<blockquote>\n<p>You will notice couple of changes. We use dayjs to format our createdAt and calculate how long until now it was posted</p>\n</blockquote>\n<blockquote>\n<p>dayjs needs to be installed with:</p>\n</blockquote>\n<pre><code>npm install dayjs\n</code></pre>\n<blockquote>\n<p>It needs to be imported and configured like this:</p>\n</blockquote>\n<pre><code>import dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\ndayjs.extend(relativeTime);\n</code></pre>\n<blockquote>\n<p>It can then be used like this:</p>\n</blockquote>\n<pre><code>dayjs(post.createdAt).fromNow()\n</code></pre>\n<blockquote>\n<p>Another change is the images optimization</p>\n</blockquote>\n<blockquote>\n<p>You will notice that if we use img tag, it will be underlined. Using those tags is not optimal. Instead next.js provides an Image component which is optimized and will load faster. This component will need width, height and alt props.</p>\n</blockquote>\n<pre><code>import Image from \"next/image\";\n\n&#x3C;Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n/>\n</code></pre>\n<blockquote>\n<p>But doing just this will break the application with error. We need to go to this file: <code>next.config.mjs</code> and extend the trusted image domains:</p>\n</blockquote>\n<pre><code>const config = {\n  reactStrictMode: true,\n  images: {\n    domains: [\"images.clerk.dev\"],\n  },\n</code></pre>\n<p><strong>2.9 Adding nicer loading spinners</strong></p>\n<blockquote>\n<p>Search for tailwind spinner. Example:\n<a href=\"https://flowbite.com/docs/components/spinner/\">https://flowbite.com/docs/components/spinner/</a></p>\n</blockquote>\n<blockquote>\n<p>Create a file in src/components called loading.tsx and make a re-usable ocmponent out of it:</p>\n</blockquote>\n<pre><code>export const LoadingSpinner = ({ size = 16 }) => (\n  &#x3C;div role=\"status\">\n    &#x3C;svg\n      aria-hidden=\"true\"\n      className=\"animate-spin fill-teal-500 text-gray-200 dark:text-gray-600\"\n      viewBox=\"0 0 100 101\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height={size}\n      width={size}\n    >\n      &#x3C;path\n        d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n        fill=\"currentColor\"\n      />\n      &#x3C;path\n        d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n        fill=\"currentFill\"\n      />\n    &#x3C;/svg>\n    &#x3C;span className=\"sr-only\">Loading...&#x3C;/span>\n  &#x3C;/div>\n);\n\nexport const LoadingPage = () => (\n  &#x3C;div className=\"absolute right-0 top-0 flex h-screen w-screen items-center justify-center\">\n    &#x3C;LoadingSpinner size={60} />\n  &#x3C;/div>\n);\n</code></pre>\n<p><strong>2.10 Extracting posts to Feed component</strong></p>\n<blockquote>\n<p>We can also separate osts to their own component called Feed</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\n\nimport { SignInButton, SignOutButton, useUser } from \"@clerk/nextjs\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport { api } from \"~/utils/api\";\nimport type { RouterOutputs } from \"~/utils/api\";\nimport { LoadingPage } from \"~/components/loading\";\n\ndayjs.extend(relativeTime);\n\nconst CreatePostWizard = () => {\n  const { user } = useUser();\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    &#x3C;div className=\"flex w-full gap-4 space-x-2 p-4\">\n      &#x3C;Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n      &#x3C;input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n      >&#x3C;/input>\n    &#x3C;/div>\n  );\n};\n\nconst UserBar = () => {\n  const { user } = useUser();\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    &#x3C;div className=\"flex\">\n      &#x3C;Image\n        src={user.profileImageUrl}\n        className=\"h-16 w-16  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n    &#x3C;/div>\n  );\n};\n\ntype PostWithUser = RouterOutputs[\"posts\"][\"getAll\"][number];\n\nconst PostView = (props: PostWithUser) => {\n  const { post, author } = props;\n  return (\n    &#x3C;div\n      key={post.id}\n      className=\"flex items-center gap-4 border-b border-slate-400 p-8\"\n    >\n      &#x3C;Image\n        src={author.profilePicture}\n        alt=\"Author image\"\n        className=\"h-12 w-12  rounded-full\"\n        width={56}\n        height={56}\n      />\n      &#x3C;div className=\"flex flex-col\">\n        &#x3C;div className=\"flex gap-2 text-slate-400\">\n          &#x3C;span>{`@${author.username}`}&#x3C;/span>\n          &#x3C;span>{`•  ${dayjs(post.createdAt).fromNow()}`}&#x3C;/span>\n        &#x3C;/div>\n        &#x3C;div className=\"flex\">{post.content}&#x3C;/div>\n      &#x3C;/div>\n    &#x3C;/div>\n  );\n};\n\nconst Feed = () => {\n  const { data, isLoading: pageLoading } = api.posts.getAll.useQuery();\n\n  if (pageLoading) {\n    return (\n      &#x3C;div className=\"flex w-full justify-center p-8\">\n        &#x3C;LoadingPage />\n      &#x3C;/div>\n    );\n  }\n\n  if (!data) {\n    return (\n      &#x3C;div className=\"flex w-full justify-center p-8\">\n        Something went wrong...\n      &#x3C;/div>\n    );\n  }\n\n  return (\n    &#x3C;div className=\"flex flex-col\">\n      {data.map((fullProps) => (\n        &#x3C;PostView {...fullProps} key={fullProps.post.id} />\n      ))}\n    &#x3C;/div>\n  );\n};\nconst Home: NextPage = () => {\n  const { user, isLoaded: userLoaded, isSignedIn } = useUser();\n\n  // Start fetching data early - reactQuery will cache it\n  api.posts.getAll.useQuery();\n\n  if (!userLoaded) {\n    return &#x3C;div />;\n  }\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Create T3 App&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main className=\"flex h-screen justify-center\">\n        &#x3C;div className=\"h-full w-full border-x border-slate-400 md:max-w-2xl\">\n          &#x3C;div className=\"flex border-b border-slate-400 p-4\">\n            {!isSignedIn &#x26;&#x26; (\n              &#x3C;div className=\"flex justify-center\">\n                &#x3C;SignInButton />\n              &#x3C;/div>\n            )}\n            {!!isSignedIn &#x26;&#x26; (\n              &#x3C;div className=\"w-full\">\n                &#x3C;div className=\"flex w-full justify-between\">\n                  &#x3C;div className=\"flex items-center  space-x-2\">\n                    &#x3C;UserBar />\n                    &#x3C;p>Hi {user.fullName}&#x3C;/p>\n                  &#x3C;/div>\n                  &#x3C;SignOutButton />\n                &#x3C;/div>\n                &#x3C;CreatePostWizard />\n              &#x3C;/div>\n            )}\n          &#x3C;/div>\n          &#x3C;Feed />\n        &#x3C;/div>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default Home;\n</code></pre>\n<p><strong>2.11 Handling the problem with Auth adding posts</strong></p>\n<blockquote>\n<p>Problem here is to know who the user is and if they have permission to create posts. At the moment with trpc we dont have any permission settings because we didnt use create next Auth.</p>\n</blockquote>\n<blockquote>\n<p>We will solve this problem by attaching the auth state to the context of trpc inside of each query. By context we mean ctx in file: <code>src/server/api/routers/posts</code>.</p>\n</blockquote>\n<blockquote>\n<p>A the moment if we look at the ctx itself, we only have access to prisma and nothing else. This is how our context looks like:</p>\n</blockquote>\n<pre><code>ctx: {\n    prisma: PrismaClient&#x3C;Prisma.PrismaClientOptions, never, Prisma.RejectOnNotFound | Prisma.RejectPerOperation | undefined>;\n}\n</code></pre>\n<blockquote>\n<p>So in order to attach auth to the trpc context, go to <code>src/server/api/trpc.ts</code></p>\n</blockquote>\n<blockquote>\n<p>This file is usually never changed unless we want to modify the context or create new middleware</p>\n</blockquote>\n<blockquote>\n<p>We wont be using <code>createInnerTRPCContext</code> at all. It is only good for testing. Instead we will return prisma directly in <code>createTRPCContext</code></p>\n</blockquote>\n<pre><code>export const createTRPCContext = (_opts: CreateNextContextOptions) => {\n  return {\n    prisma,\n  };\n};\n</code></pre>\n<blockquote>\n<p>And in the createTRPCContext we will need to obtain information about the user.</p>\n</blockquote>\n<blockquote>\n<p>Notice that the <code>_opts</code> is escaped (has an underscore) because for now we didnt use it in <code>createTRPCContext</code>.</p>\n</blockquote>\n<blockquote>\n<p>But we will use those opts (options), so let's unescape it:</p>\n</blockquote>\n<pre><code>export const createTRPCContext = (opts: CreateNextContextOptions) => {\n  return {\n    prisma,\n  };\n};\n</code></pre>\n<blockquote>\n<p>Those options are an object and has a <code>req</code> key. Which is the entire nextJS <code>request</code> from an api</p>\n</blockquote>\n<pre><code>export const createTRPCContext = (opts: CreateNextContextOptions) => {\n\n  const { req } = opts\n\n  return {\n    prisma,\n  };\n};\n</code></pre>\n<blockquote>\n<p>This request can be then passed to clerk</p>\n</blockquote>\n<blockquote>\n<p>Clerk uses JWT - JSON Web Tokens. Clerk is able to verify on my server whether the user is authenticated or not using the signature of JWT. With this, we will know this is THIS user &#x26; provide us a bit info about them - especially signedInAuthObject or signedOutAuthObject which contain behaviour if the user is igned in or not</p>\n</blockquote>\n<pre><code>import { getAuth } from \"@clerk/nextjs/server\";\n\nexport const createTRPCContext = (opts: CreateNextContextOptions) => {\n  const { req } = opts;\n  const session = getAuth(req);\n  return {\n    prisma,\n  };\n};\n</code></pre>\n<blockquote>\n<p>Please note that we wont be using <code>const user = getUser(req)</code> cause we dont have that with every request we will be fetching the user from Clerk</p>\n</blockquote>\n<blockquote>\n<p>We will now extend the createTRPCContext with auth info about the user</p>\n</blockquote>\n<pre><code>export const createTRPCContext = (opts: CreateNextContextOptions) => {\n  const { req } = opts;\n  const session = getAuth(req);\n\n  const userId = session.userId;\n  return {\n    prisma,\n    userId,\n  };\n};\n</code></pre>\n<blockquote>\n<p>We wont necessarily have the auth but we can make a procedure which enforces that we have an authentication</p>\n</blockquote>\n<blockquote>\n<p>The easiest way to do it is to extend the public procedure with the middleware. In this context middleware will be a small process that runs before our main request processing. Super helpful for authentications.</p>\n</blockquote>\n<blockquote>\n<p>Since we already attached the auth earlier, we can easily then verify at the end of the file:</p>\n</blockquote>\n<pre><code>const enforceUserIsAuthed = t.middleware(async ({ ctx, next }) => {\n  if (!ctx.userId) {\n    throw new TRPCError({ code: \"UNAUTHORIZED\" });\n  }\n  return next({\n    ctx: {\n      userId: ctx.userId,\n    },\n  });\n});\n</code></pre>\n<blockquote>\n<p>In above code we use the <code>t</code> helper from the TRPC</p>\n</blockquote>\n<blockquote>\n<p>Remember to update import:</p>\n</blockquote>\n<pre><code>import { TRPCError } from \"@trpc/server\";\n</code></pre>\n<blockquote>\n<p>Now we need to use that procedure:</p>\n</blockquote>\n<pre><code>export const privateProcedure = t.procedure.use(enforceUserIsAuthed)\n</code></pre>\n<blockquote>\n<p>Whole file looks like this:</p>\n</blockquote>\n<pre><code>/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n */\nimport { type CreateNextContextOptions } from \"@trpc/server/adapters/next\";\n\nimport { prisma } from \"~/server/db\";\n\ntype CreateContextOptions = Record&#x3C;string, never>;\n\n/**\n * This helper generates the \"internals\" for a tRPC context. If you need to use it, you can export\n * it from here.\n *\n * Examples of things you may need it for:\n * - testing, so we don't have to mock Next.js' req/res\n * - tRPC's `createSSGHelpers`, where we don't have req/res\n *\n * @see https://create.t3.gg/en/usage/trpc#-serverapitrpcts\n */\nconst createInnerTRPCContext = (_opts: CreateContextOptions) => {\n  return {\n    prisma,\n  };\n};\n\n/**\n * This is the actual context you will use in your router. It will be used to process every request\n * that goes through your tRPC endpoint.\n *\n * @see https://trpc.io/docs/context\n */\nexport const createTRPCContext = (opts: CreateNextContextOptions) => {\n  const { req } = opts;\n  const session = getAuth(req);\n\n  const userId = session.userId;\n  return {\n    prisma,\n    userId,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\nimport { getAuth } from \"@clerk/nextjs/server\";\n\nconst t = initTRPC.context&#x3C;typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * 3. ROUTER &#x26; PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure;\n\nconst enforceUserIsAuthed = t.middleware(async ({ ctx, next }) => {\n  if (!ctx.userId) {\n    throw new TRPCError({ code: \"UNAUTHORIZED\" });\n  }\n  return next({\n    ctx: {\n      userId: ctx.userId,\n    },\n  });\n});\n\nexport const privateProcedure = t.procedure.use(enforceUserIsAuthed);\n</code></pre>\n<blockquote>\n<p>And now we have a private procedure that when used will always have an authentication object</p>\n</blockquote>\n<p><strong>2.12 Handle adding posts</strong></p>\n<blockquote>\n<p>Now we can go to <code>src/server/api/router/posts.ts</code></p>\n</blockquote>\n<blockquote>\n<p>We can create here a new protected procedure called <code>create</code>:</p>\n</blockquote>\n<pre><code>create: privateProcedure.mutation(async ({ ctx }) => {\n    const authorId = ctx.userId;\n\n    const post = await ctx.prisma.post.create({\n      data: {\n        authorId,\n      },\n    });\n  }),\n</code></pre>\n<blockquote>\n<p>In this privateProcedure, we guarantee that the user is authenticated. If we switched it to publicProcedure, user could be null or undefined</p>\n</blockquote>\n<blockquote>\n<p>But TS will scream that we need content as well, not only authorId. Where do we get that from? We get it from the input. We need to tell it what kind of input we want it to be. We will use zod for that as a validator of our form (input). For example it can validate if the string is an emoji: <code>z.string().emoji()</code></p>\n</blockquote>\n<blockquote>\n<p>Let's add that input to out trpc procedure:</p>\n</blockquote>\n<pre><code>create: privateProcedure\n    .input(\n      z.object({\n        content: z.string().emoji().min(1).max(280),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const authorId = ctx.userId;\n\n      const post = await ctx.prisma.post.create({\n        data: {\n          authorId,\n          content: input.content,\n        },\n      });\n      return post;\n    }),\n</code></pre>\n<blockquote>\n<p>Notice how you squeeze in the input() between privateProcedure and mutation</p>\n</blockquote>\n<blockquote>\n<p>Also notice how you can then have access to that input in the mutation, next to ctx</p>\n</blockquote>\n<blockquote>\n<p>Your <code>data</code> will then have <code>authorId</code> and <code>content</code></p>\n</blockquote>\n<blockquote>\n<p>And when we do such a mutation, we return the <code>post</code></p>\n</blockquote>\n<blockquote>\n<p>The whole file then looks like this:</p>\n</blockquote>\n<pre><code>import clerkClient, { User } from \"@clerk/clerk-sdk-node\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport {\n  createTRPCRouter,\n  privateProcedure,\n  publicProcedure,\n} from \"~/server/api/trpc\";\n\nconst filterUserForClient = (user: User) => {\n  return {\n    id: user.id,\n    username: user.username,\n    profilePicture: user.profileImageUrl,\n  };\n};\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = (\n      await clerkClient.users.getUserList({\n        userId: posts.map((post) => post.authorId),\n        limit: 100,\n      })\n    ).map(filterUserForClient);\n    return posts.map((post) => {\n      const author = users.find((user) => user.id === post.authorId);\n\n      if (!author || !author.username) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Author of the posts not found\",\n        });\n      }\n      return { post, author: { ...author, username: author.username } };\n    });\n  }),\n  create: privateProcedure\n    .input(\n      z.object({\n        content: z.string().emoji().min(1).max(280),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const authorId = ctx.userId;\n\n      const post = await ctx.prisma.post.create({\n        data: {\n          authorId,\n          content: input.content,\n        },\n      });\n      return post;\n    }),\n});\n</code></pre>\n<blockquote>\n<p>Then we need to go to client (frontend) file: index.tsx and use that new procedure and add posts.</p>\n</blockquote>\n<blockquote>\n<p>We will do it in the <code>CreatePostWizard</code> component. We will add a react state to handle input and also button to sumbit the posts, which will use the <code>mutate</code> from our create procedure: <code>const { mutate } = api.posts.create.useMutation()</code></p>\n</blockquote>\n<pre><code>const CreatePostWizard = () => {\n  const { user } = useUser();\n  console.log(\"user\", user);\n\n  const [input, setInput] = useState(\"\");\n\n  const { mutate } = api.posts.create.useMutation();\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    &#x3C;div className=\"flex w-full gap-4 space-x-2 p-4\">\n      &#x3C;Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n      &#x3C;input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n      />\n      &#x3C;button onClick={() => mutate({ content: input })}>Post&#x3C;/button>\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<blockquote>\n<p>Now we can run our app and test if it works. Try adding post and refreshing the page.</p>\n</blockquote>\n<p><strong>2.13 Ordering</strong></p>\n<blockquote>\n<p>We can also order our posts by createdAt in a descending manner. Go to <code>src/server/api/routers/posts.ts</code> and add the <code>orderBy</code> in our <code>getAll</code> procedure:</p>\n</blockquote>\n<pre><code>orderBy: [\n        {\n          createdAt: \"desc\",\n        },\n      ],\n</code></pre>\n<blockquote>\n<p>Whole procedure:</p>\n</blockquote>\n<pre><code>getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      orderBy: [\n        {\n          createdAt: \"desc\",\n        },\n      ],\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    const users = (\n      await clerkClient.users.getUserList({\n        userId: posts.map((post) => post.authorId),\n        limit: 100,\n      })\n    ).map(filterUserForClient);\n    return posts.map((post) => {\n      const author = users.find((user) => user.id === post.authorId);\n\n      if (!author || !author.username) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Author of the posts not found\",\n        });\n      }\n      return { post, author: { ...author, username: author.username } };\n    });\n  }),\n</code></pre>\n<p><strong>2.14 Auto-refresh (hot reload) page when adding new post &#x26; clearing input</strong></p>\n<blockquote>\n<p>We now want to disbaled the input while post is being posted and also we want to auto refresh the page. We will do in in CreatePostWizard:</p>\n</blockquote>\n<pre><code>const CreatePostWizard = () => {\n  const { user } = useUser();\n\n  const [input, setInput] = useState(\"\");\n  const ctx = api.useContext();\n\n  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({\n    onSuccess: () => {\n      setInput(\"\");\n      void ctx.posts.getAll.invalidate();\n    },\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    &#x3C;div className=\"flex w-full gap-4 space-x-2 p-4\">\n      &#x3C;Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n      &#x3C;input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        disabled={isPosting}\n      />\n      &#x3C;button disabled={isPosting} onClick={() => mutate({ content: input })}>Post&#x3C;/button>\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<blockquote>\n<p>Notice how we add isLoading: isPosting to the useMutation which we then can use to disable the input &#x26; button or add a loading spinner.</p>\n</blockquote>\n<blockquote>\n<p>We then also want to invalidate the query. For that we could need the request context, which we can get from <code>api.useContext()</code>. This will then help us in the <code>onSuccess</code> call of useMutation, which will set the input to be empty and also invalidate the query with <code>ctx.posts.getAll.invalidate()</code>. Please note that we use word <code>void</code> as theinvalidate expects and asynch function. We just quickly want to fix the TS error, we are not waiting for anyhting, we just want to invalidate the query.</p>\n</blockquote>\n<p><strong>2.15 Set limit to number of posts</strong></p>\n<blockquote>\n<p>We dont want our users to spam the posts, we want to put a limit to how many they can post.</p>\n</blockquote>\n<blockquote>\n<p>We will use technology called upstash for that. <a href=\"https://upstash.com/\">https://upstash.com/</a></p>\n</blockquote>\n<blockquote>\n<p>They have an awesome package for rate limiting.</p>\n</blockquote>\n<blockquote>\n<p>Go to their website and click Console.</p>\n</blockquote>\n<blockquote>\n<p>Sign in with your Github.</p>\n</blockquote>\n<blockquote>\n<p>CLick create database.</p>\n</blockquote>\n<blockquote>\n<p>Give it a name, like: chirp-ratelimiter</p>\n</blockquote>\n<blockquote>\n<p>Select <code>regional</code> and select your region: eu-central.</p>\n</blockquote>\n<blockquote>\n<p>Click create</p>\n</blockquote>\n<blockquote>\n<p>Now search for upstash rate limiter on google and visit their github: <a href=\"https://github.com/upstash/ratelimit\">https://github.com/upstash/ratelimit</a></p>\n</blockquote>\n<blockquote>\n<p>Install it:</p>\n</blockquote>\n<pre><code>npm install @upstash/ratelimit\nnpm install @upstash/redis\n</code></pre>\n<blockquote>\n<p>There are couple of places where we can do the ratelimit, but we will be doing it in the posts.tsx file. Copy from documentation:</p>\n</blockquote>\n<pre><code>import { Ratelimit } from \"@upstash/ratelimit\"; // for deno: see above\nimport { Redis } from \"@upstash/redis\";\n\n// Create a new ratelimiter, that allows 10 requests per 10 seconds\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.slidingWindow(10, \"10 s\"),\n  analytics: true,\n  prefix: \"@upstash/ratelimit\",\n});\n</code></pre>\n<blockquote>\n<p>But this function above requires Redis.fromEnv. This assumes we have UPSTASH<em>REDIS</em>REST<em>URL &#x26; UPSTASH</em>REDIS<em>REST</em>TOKEN in our <code>process.env</code> file -> which in our case is the <code>.env</code> file</p>\n</blockquote>\n<blockquote>\n<p>Where do we get those URL &#x26; TOKEN? From our console.upstash which we created:<code>https://console.upstash.com/redis/....</code></p>\n</blockquote>\n<blockquote>\n<p>In the REST API section, select the .env tab and copy the URLs to the <code>.env</code> file. It is the same file where we have our CLERK<em>SECRET</em>KEY, NEXT<em>PUBLIC</em>CLERK<em>PUBLISHABLE</em>KEY &#x26; DATABASE_URL</p>\n</blockquote>\n<blockquote>\n<p>More over we need ot add those envs to our Vercel.</p>\n</blockquote>\n<blockquote>\n<p>By default 10 requests per 10 seconds are allowed in this piece of code: <code>limiter: Ratelimit.slidingWindow(10, \"10 s\")</code>. We want to be more strict and allow 3 per minute: <code>limiter: Ratelimit.slidingWindow(3, \"1 m\")</code></p>\n</blockquote>\n<blockquote>\n<p>How to use it now? We go to our create posts mutation and add this code:</p>\n</blockquote>\n<pre><code>const { success } = await ratelimit.limit(authorId);\n\nif (!success){\n        throw new TRPCError({code: \"TOO_MANY_REQUESTS\"})\n}\n</code></pre>\n<blockquote>\n<p>Whole create procedure looks then like this:</p>\n</blockquote>\n<pre><code> create: privateProcedure\n    .input(\n      z.object({\n        content: z.string().emoji().min(1).max(280),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const authorId = ctx.userId;\n\n      const { success } = await ratelimit.limit(authorId);\n\n      if (!success){\n        throw new TRPCError({code: \"TOO_MANY_REQUESTS\"})\n      }\n\n      const post = await ctx.prisma.post.create({\n        data: {\n          authorId,\n          content: input.content,\n        },\n      });\n      return post;\n    }),\n</code></pre>\n<blockquote>\n<p>To the <code>rateLimit.limit</code> we pass the author id. It returns the promise, so we need to await for it. It returns an object which success property. If we are not successful, then we throw a TRPC error for too many requests</p>\n</blockquote>\n<blockquote>\n<p>This adds a special scalability to our little app. This shows that it is production ready, because it cannot be taken down by sheer spamming. It now uses authorId for the limit, but it can be an api address, or other properties.</p>\n</blockquote>\n<p><strong>2.16 Add client errors when there is no emoji typed in</strong></p>\n<blockquote>\n<p>Let's search for <code>react hot toasts</code>: <a href=\"https://react-hot-toast.com/\">https://react-hot-toast.com/</a></p>\n</blockquote>\n<blockquote>\n<p>Install the package:</p>\n</blockquote>\n<pre><code>npm install react-hot-toast\n</code></pre>\n<blockquote>\n<p>Let's now go to <code>_app.tsx</code> and add their <code>&#x3C;Toaster /></code> there from the website and import it via:</p>\n</blockquote>\n<pre><code>import { Toaster } from \"react-hot-toast\";\n</code></pre>\n<blockquote>\n<p>Whole file looks like this:</p>\n</blockquote>\n<pre><code>import { ClerkProvider } from \"@clerk/nextjs\";\n\nimport { type AppType } from \"next/app\";\n\nimport { api } from \"~/utils/api\";\n\nimport \"~/styles/globals.css\";\nimport { Toaster } from \"react-hot-toast\";\n\nconst MyApp: AppType = ({ Component, pageProps }) => {\n  return (\n    &#x3C;ClerkProvider {...pageProps}>\n      &#x3C;Toaster />\n      &#x3C;Component {...pageProps} />\n    &#x3C;/ClerkProvider>\n  );\n};\n\nexport default api.withTRPC(MyApp);\n</code></pre>\n<blockquote>\n<p>We will want to throw an error when we create an toast. so instead of onSuccess mutation, we will use onError and throw a toast there. So go to index.tsx file and in thew <code>CreatePostWizard</code> component add <code>toast.error</code> for <code>onError</code>:</p>\n</blockquote>\n<pre><code> const { mutate, isLoading: isPosting } = api.posts.create.useMutation({\n    onSuccess: () => {\n      setInput(\"\");\n      void ctx.posts.getAll.invalidate();\n    },\n    onError: () => {\n      toast.error(\"Failed to post! Please try again later.\");\n    },\n  });\n</code></pre>\n<blockquote>\n<p>If we want to have our toasts in the center-bottom, we need to add the position prop to the <code>Toaster</code> in the <code>_app.tsx</code></p>\n</blockquote>\n<pre><code> &#x3C;Toaster position=\"bottom-center\" />\n</code></pre>\n<blockquote>\n<p>We can even get the concrete error message from zod using <code>e</code> object:</p>\n</blockquote>\n<pre><code>onError: (e) => {\n      const errorMessage = e.data?.zodError?.fieldErrors.content;\n      if (errorMessage &#x26;&#x26; errorMessage[0]) {\n        toast.error(errorMessage[0]);\n      } else {\n        toast.error(\"Failed to post! Please try again later.\");\n      }\n    },\n</code></pre>\n<blockquote>\n<p>If we type text instead of emoji, we will get message in the toast: \"Invalid emoji\"</p>\n</blockquote>\n<blockquote>\n<p>We can even customize our error message, when we go back to file posts.tsx in the create procedure, we can add the custom message to the <code>.emoji()</code></p>\n</blockquote>\n<pre><code>create: privateProcedure\n    .input(\n      z.object({\n        content: z.string().emoji(\"Only emojis are allowed\").min(1).max(280),\n      })\n    )\n</code></pre>\n<p><strong>2.17 Fine-tuning</strong></p>\n<blockquote>\n<p>We want to make sure if we typed in something, we press <code>ENTER</code> key and it posts. Let's add following to the input to <code>CreatePostWizard</code>:</p>\n</blockquote>\n<pre><code>onKeyDown={(e) => {\n          if (e.key === \"ENTER\") {\n            e.preventDefault();\n            if (input !== \"\") {\n              mutate({ content: input });\n            }\n          }\n}}\n</code></pre>\n<blockquote>\n<p>Plus we want to make some final touches to loading spinners and rendering buttons. So the whole code looks like this:</p>\n</blockquote>\n<pre><code>const CreatePostWizard = () => {\n  const { user } = useUser();\n\n  const [input, setInput] = useState(\"\");\n  const ctx = api.useContext();\n\n  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({\n    onSuccess: () => {\n      setInput(\"\");\n      void ctx.posts.getAll.invalidate();\n    },\n    onError: (e) => {\n      const errorMessage = e.data?.zodError?.fieldErrors.content;\n      if (errorMessage &#x26;&#x26; errorMessage[0]) {\n        toast.error(errorMessage[0]);\n      } else {\n        toast.error(\"Failed to post! Please try again later.\");\n      }\n    },\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    &#x3C;div className=\"flex w-full gap-4 space-x-2 p-4\">\n      &#x3C;Image\n        src={user.profileImageUrl}\n        className=\"h-10 w-10  rounded-full\"\n        alt=\"Profile image\"\n        width={56}\n        height={56}\n      />\n      &#x3C;input\n        placeholder=\"Type some emojis :)\"\n        className=\"bg-transparent\"\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        disabled={isPosting}\n        onKeyDown={(e) => {\n          if (e.key === \"ENTER\") {\n            e.preventDefault();\n            if (input !== \"\") {\n              mutate({ content: input });\n            }\n          }\n        }}\n      />\n      {input !== \"\" &#x26;&#x26; !isPosting &#x26;&#x26; (\n        &#x3C;button onClick={() => mutate({ content: input })}>Post&#x3C;/button>\n      )}\n      {isPosting &#x26;&#x26; (\n        &#x3C;div className=\"flex justify-center\">\n          &#x3C;LoadingSpinner size={20} />\n        &#x3C;/div>\n      )}\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<p><strong>2.18 Routing</strong></p>\n<blockquote>\n<p>We would like to have separate page for the user profile, when we click user image or the name of author. We wuld also like to have a post page when we click anywhere inside the post area.</p>\n</blockquote>\n<blockquote>\n<p>To get started we we will create a new folder in the pages called \"post\" and in it we will copy paste our index.tsx. We will rename the file to \"[id].tsx\". When we use next.js router, the <code>id</code> is something we will have access to in our routing</p>\n</blockquote>\n<blockquote>\n<p>Also next to our index.tsx in pages folder, we will create a new file called: <code>[slug].tsx</code></p>\n</blockquote>\n<blockquote>\n<p>Here is the file structure:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/ygvXx6d.png\" title=\"Photo by Addania\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Addania</em></p></p>\n<blockquote>\n<p>Now you can replace the content of the <code>[slug].tsx</code> and only render &#x3C;>Profile page&#x3C;/></p>\n</blockquote>\n<blockquote>\n<p>This is the whole page:</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nconst ProfilePage: NextPage = () => {\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Create T3 App&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main className=\"flex h-screen justify-center\">\n        &#x3C;>Profile View&#x3C;/>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default ProfilePage;\n</code></pre>\n<blockquote>\n<p>Now how you can access it? By navigating to the url: <code>http://localhost:3000/@addania</code></p>\n</blockquote>\n<blockquote>\n<p>So the slug is the <code>@</code> symbol and then the <code>author</code>.</p>\n</blockquote>\n<blockquote>\n<p>Let's do the same for the [id].tsx file &#x26; let's call it <code>SinglePostPage</code>:</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nconst SinglePostPage: NextPage = () => {\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Create T3 App&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"Generated by create-t3-app\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;main className=\"flex h-screen justify-center\">\n        &#x3C;>One post page View&#x3C;/>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default SinglePostPage;\n</code></pre>\n<blockquote>\n<p>Now let's open our <code>index.tsx</code> file and let's make the links. We will use next.js <code>Link</code> component. When we use <code>Link</code> instead of <code>a</code> tag, the routing will actually occur and it wont make a full page refresh! So cool and optimized</p>\n</blockquote>\n<pre><code>import Link from \"next/link\";\n\n&#x3C;Link href={`/@${author.username}`}>\n  &#x3C;span>{`@${author.username}`}&#x3C;/span>\n&#x3C;/Link>\n</code></pre>\n<blockquote>\n<p>Let's link the postpage:</p>\n</blockquote>\n<pre><code>import Link from \"next/link\";\n\n&#x3C;Link href={`/post/${post.id}`}>\n    &#x3C;span>{`•  ${dayjs(post.createdAt).fromNow()}`}&#x3C;/span>\n&#x3C;/Link>\n</code></pre>\n<p><strong>2.18 Meta data</strong></p>\n<blockquote>\n<p>Look at our index.tsx and the <code>Head</code> tag. Let's give it a name of Chirp and content of thinking emoji.</p>\n</blockquote>\n<pre><code>&#x3C;Head>\n  &#x3C;title>Chirp&#x3C;/title>\n  &#x3C;meta name=\"description\" content=\"💭\" />\n  &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n&#x3C;/Head>\n</code></pre>\n<blockquote>\n<p>We also want this to be default to all pages, so we will cut it from this file and add it to <code>_app.tsx</code>. If we put it to the <code>_app</code> file, it will be the default, and if I add one to another file, it will overwrite what is in the <code>_app</code>.</p>\n</blockquote>\n<pre><code>import { ClerkProvider } from \"@clerk/nextjs\";\n\nimport { type AppType } from \"next/app\";\n\nimport { api } from \"~/utils/api\";\n\nimport \"~/styles/globals.css\";\nimport { Toaster } from \"react-hot-toast\";\nimport Head from \"next/head\";\n\nconst MyApp: AppType = ({ Component, pageProps }) => {\n  return (\n    &#x3C;ClerkProvider {...pageProps}>\n      &#x3C;Head>\n        &#x3C;title>Chirp&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"💭\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;Toaster position=\"bottom-center\" />\n      &#x3C;Component {...pageProps} />\n    &#x3C;/ClerkProvider>\n  );\n};\n\nexport default api.withTRPC(MyApp);\n</code></pre>\n<blockquote>\n<p>We can then simplify the <code>[slug].tsx</code> file:</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nconst ProfilePage: NextPage = () => {\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Profile&#x3C;/title>\n      &#x3C;/Head>\n      &#x3C;main className=\"flex h-screen justify-center\">\n        &#x3C;>Profile View&#x3C;/>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default ProfilePage;\n</code></pre>\n<blockquote>\n<p>We can then simplify the <code>[id].tsx</code> file:</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\n\nconst SinglePostPage: NextPage = () => {\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Post&#x3C;/title>\n      &#x3C;/Head>\n      &#x3C;main className=\"flex h-screen justify-center\">\n        &#x3C;>One post page View&#x3C;/>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default SinglePostPage;\n</code></pre>\n<blockquote>\n<p>But for the <code>profile</code> page, we want the title to be actually the name of the author. We will need to define a trpc query for it. We will need a <code>subrouter</code> for it.</p>\n</blockquote>\n<blockquote>\n<p>In <code>server/api/routers</code> we will create a new file called <code>profile.ts</code></p>\n</blockquote>\n<blockquote>\n<p>The content of this file is:</p>\n</blockquote>\n<pre><code>import clerkClient from \"@clerk/clerk-sdk-node\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nexport const profileRouter = createTRPCRouter({\n  getUserByUsername: publicProcedure\n    .input(z.object({ username: z.string() }))\n    .query(async ({ input }) => {\n      const [user] = await clerkClient.users.getUserList({\n        username: [input.username],\n      });\n      if (!user) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"User not found\",\n        });\n      }\n      return user;\n    }),\n});\n</code></pre>\n<blockquote>\n<p>We need to add this router to our <code>root.ts</code>. Content of this file:</p>\n</blockquote>\n<pre><code>import { createTRPCRouter } from \"~/server/api/trpc\";\nimport { postsRouter } from \"~/server/api/routers/posts\";\nimport { profileRouter } from \"./routers/profile\";\n\nexport const appRouter = createTRPCRouter({\n  posts: postsRouter,\n  profile: profileRouter,\n});\n\nexport type AppRouter = typeof appRouter;\n</code></pre>\n<blockquote>\n<p>If we want to use it, go to <code>[slug].tsx</code> and make use of this router:</p>\n</blockquote>\n<pre><code>import { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\n\nconst ProfilePage: NextPage = () => {\n  const { data, isLoading } = api.profile.getUserByUsername.useQuery({\n    username: \"addania\",\n  });\n\n  if (isLoading) {\n    return &#x3C;div className=\"flex h-screen justify-center\">Loading...&#x3C;/div>;\n  }\n\n  if (!data) {\n    return &#x3C;div className=\"flex h-screen justify-center\">404&#x3C;/div>;\n  }\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Profile&#x3C;/title>\n      &#x3C;/Head>\n      &#x3C;main className=\"flex h-screen justify-center\">\n        &#x3C;div>{data.username}&#x3C;/div>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nexport default ProfilePage;\n</code></pre>\n<blockquote>\n<p>Notice how we use our new router here:</p>\n</blockquote>\n<pre><code> const { data, isLoading } = api.profile.getUserByUsername.useQuery({\n    username: \"addania\",\n});\n</code></pre>\n<blockquote>\n<p>But again when we console.log <code>data</code>, we will notice, that we have too much data. We want to filter it.</p>\n</blockquote>\n<blockquote>\n<p>Since this is alreday the second time we want to use the filter, we can break out that filter to a separate file.</p>\n</blockquote>\n<blockquote>\n<p>Let's make folder in server called <code>helpers</code>. And create there a file called: <code>filterUserForClient.ts</code></p>\n</blockquote>\n<blockquote>\n<p>Then go to posts and cut out this code:</p>\n</blockquote>\n<pre><code>import type { User } from \"@clerk/clerk-sdk-node\";\n\nexport const filterUserForClient = (user: User) => {\n  return {\n    id: user.id,\n    username: user.username,\n    profilePicture: user.profileImageUrl,\n  };\n};\n</code></pre>\n<blockquote>\n<p>Paste this code to that file: <code>filterUserForClient.ts</code></p>\n</blockquote>\n<blockquote>\n<p>We need to update the import of this file in <code>posts.ts</code>:</p>\n</blockquote>\n<pre><code>import { filterUserForClient } from \"~/server/helpers/filterUserForClient\";\n</code></pre>\n<blockquote>\n<p>We will then use <code>filterUserForClient</code> in our <code>profile.ts</code></p>\n</blockquote>\n<pre><code>import clerkClient from \"@clerk/clerk-sdk-node\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nimport { filterUserForClient } from \"~/server/helpers/filterUserForClient\";\n\nexport const profileRouter = createTRPCRouter({\n  getUserByUsername: publicProcedure\n    .input(z.object({ username: z.string() }))\n    .query(async ({ input }) => {\n      const [user] = await clerkClient.users.getUserList({\n        username: [input.username],\n      });\n      if (!user) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"User not found\",\n        });\n      }\n      return filterUserForClient(user);\n    }),\n});\n</code></pre>\n<p><strong>2.19 SSG Helper</strong></p>\n<blockquote>\n<p>Now we want our meta data to load instantaneously.</p>\n</blockquote>\n<blockquote>\n<p>Search for SSG Helper for trpc: <a href=\"https://trpc.io/docs/v9/ssg-helpers\">https://trpc.io/docs/v9/ssg-helpers</a></p>\n</blockquote>\n<blockquote>\n<p>It will pre-hydrate some data ahead of time.</p>\n</blockquote>\n<blockquote>\n<p>In our file: <code>[slug].tsx</code> we will create a function called: getStaticProps:</p>\n</blockquote>\n<blockquote>\n<p>Firstly we need to create the ssg helper:</p>\n</blockquote>\n<pre><code>import { createServerSideHelpers } from \"@trpc/react-query/server\";\nimport { appRouter } from \"~/server/api/root\";\nimport { prisma } from \"~/server/db\";\nimport superjson from \"superjson\";\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = createServerSideHelpers({\n    router: appRouter,\n    ctx: { prisma, userId: null },\n    transformer: superjson,\n  });\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [\"/@addania\"], fallback: \"blocking\" };\n};\n</code></pre>\n<blockquote>\n<p>This will make sure that the data is there where the page loads.</p>\n</blockquote>\n<blockquote>\n<p>This means that when we go to <code>[slug].tsx</code> -> the loading is never there. If we console log isLoading, it wont be there.</p>\n</blockquote>\n<blockquote>\n<p><code>const ssg</code> is a helper which makes the magic of pre-fetching data.</p>\n</blockquote>\n<blockquote>\n<p><code>GetStaticProps</code> type is provided by next</p>\n</blockquote>\n<blockquote>\n<p><code>await ssg.profile.getUserByUsername.prefetch({ username });</code> this is ftching on the server</p>\n</blockquote>\n<blockquote>\n<p><code>prefetch</code> is a cool helper which pre-fetches the data ahead of time &#x26; hydrates it through server side props.</p>\n</blockquote>\n<blockquote>\n<p><code>trpcState: ssg.dehydrate(),</code> - this dehrydrates -> takes everything we fetched, puts it in the shape that can be parsed through next.js server side props (in this case static props) and ensures data is there when we need it and loading state of <code>[slug].tsx</code> will never be hit.</p>\n</blockquote>\n<blockquote>\n<p>In order for this all to work, we need to tell next.js which paths are valid:</p>\n</blockquote>\n<pre><code>export const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n</code></pre>\n<blockquote>\n<p><code>const username = slug.replace(\"@\", \"\")</code>; our slug contains still <code>@</code> and it needs to be removed when we want to pass username</p>\n</blockquote>\n<blockquote>\n<p>Now we can tidy up a bit the profile page <code>[slug].stx</code>. We no longer hardcode \"addania\", but we fetch it. We dont need loading state.</p>\n</blockquote>\n<blockquote>\n<p>Whole code lloks like this:</p>\n</blockquote>\n<pre><code class=\"language-import\" data-meta=\"type { GetStaticProps, NextPage } from &#x22;next&#x22;;\">import Head from \"next/head\";\nimport { api } from \"~/utils/api\";\n\nconst ProfilePage: NextPage&#x3C;{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return &#x3C;div className=\"flex h-screen justify-center\">404&#x3C;/div>;\n  }\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>{data.username}&#x3C;/title>\n      &#x3C;/Head>\n      &#x3C;main className=\"flex h-screen justify-center\">\n        &#x3C;div>{data.username}&#x3C;/div>\n      &#x3C;/main>\n    &#x3C;/>\n  );\n};\n\nimport { createServerSideHelpers } from \"@trpc/react-query/server\";\nimport { appRouter } from \"~/server/api/root\";\nimport { prisma } from \"~/server/db\";\nimport superjson from \"superjson\";\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = createServerSideHelpers({\n    router: appRouter,\n    ctx: { prisma, userId: null },\n    transformer: superjson,\n  });\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nexport default ProfilePage;\n</code></pre>\n<p><strong>2.20 Layouting</strong></p>\n<blockquote>\n<p>All pages should have same layout, so in the components folder let's create a file called: <code>layout.tsx</code> and paste there code from <code>index.tsx</code></p>\n</blockquote>\n<pre><code>import type { PropsWithChildren } from \"react\";\n\nexport const PageLayout = (props: PropsWithChildren) => {\n  return (\n    &#x3C;main className=\"flex h-screen justify-center\">\n      &#x3C;div className=\"overflow-y-scroll h-full w-full border-x border-slate-400 md:max-w-2xl\">\n          {props.children}\n      &#x3C;/div>\n    &#x3C;/main>\n  );\n};\n</code></pre>\n<blockquote>\n<p>Then index.tsx will look like this:</p>\n</blockquote>\n<pre><code>const Home: NextPage = () => {\n  const { user, isLoaded: userLoaded, isSignedIn } = useUser();\n\n  // Start fetching data early - reactQuery will cache it\n  api.posts.getAll.useQuery();\n\n  if (!userLoaded) {\n    return &#x3C;div />;\n  }\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>Chirp&#x3C;/title>\n        &#x3C;meta name=\"description\" content=\"💭\" />\n        &#x3C;link rel=\"icon\" href=\"/favicon.ico\" />\n      &#x3C;/Head>\n      &#x3C;PageLayout>\n        &#x3C;div className=\"flex border-b border-slate-400 p-4\">\n          {!isSignedIn &#x26;&#x26; (\n            &#x3C;div className=\"flex justify-center\">\n              &#x3C;SignInButton />\n            &#x3C;/div>\n          )}\n          {!!isSignedIn &#x26;&#x26; (\n            &#x3C;div className=\"w-full\">\n              &#x3C;div className=\"flex w-full justify-between\">\n                &#x3C;div className=\"flex items-center  space-x-2\">\n                  &#x3C;UserBar />\n                  &#x3C;p>Hi {user.fullName}&#x3C;/p>\n                &#x3C;/div>\n                &#x3C;SignOutButton />\n              &#x3C;/div>\n              &#x3C;CreatePostWizard />\n            &#x3C;/div>\n          )}\n        &#x3C;/div>\n        &#x3C;Feed />\n      &#x3C;/PageLayout>\n    &#x3C;/>\n  );\n};\n</code></pre>\n<blockquote>\n<p>We can then make the profile page also use the same Pagelayout:</p>\n</blockquote>\n<pre><code>import type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\n\nconst ProfilePage: NextPage&#x3C;{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return &#x3C;div className=\"flex h-screen justify-center\">404&#x3C;/div>;\n  }\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>{data.username}&#x3C;/title>\n      &#x3C;/Head>\n      &#x3C;PageLayout>\n        &#x3C;div>{data.username}&#x3C;/div>\n      &#x3C;/PageLayout>\n    &#x3C;/>\n  );\n};\n</code></pre>\n<p><strong>2.21 Finish profile page</strong></p>\n<blockquote>\n<p>Let's add profile picture and style it as on Twitter</p>\n</blockquote>\n<blockquote>\n<p>Let's make this pretty:</p>\n</blockquote>\n<pre><code>const ProfilePage: NextPage&#x3C;{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return &#x3C;div className=\"flex h-screen justify-center\">404&#x3C;/div>;\n  }\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>{data.username}&#x3C;/title>\n      &#x3C;/Head>\n      &#x3C;PageLayout>\n        &#x3C;div className=\"relative h-36 bg-slate-600\">\n          &#x3C;Image\n            src={data.profilePicture}\n            alt={`@${data.username ?? \"\"}'s profile pic`}\n            width={128}\n            height={128}\n            className=\"absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black bg-black\"\n          />\n        &#x3C;/div>\n        &#x3C;div className=\"h-[64px]\" />\n        &#x3C;div className=\"p-4 text-2xl font-bold\">{`@${\n          data.username ?? \"\"\n        }`}&#x3C;/div>\n        &#x3C;div className=\"w-full border-b border-slate-400\" />\n      &#x3C;/PageLayout>\n    &#x3C;/>\n  );\n};\n</code></pre>\n<blockquote>\n<p>The whole file looks like this:</p>\n</blockquote>\n<pre><code>import type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\nimport Image from \"next/image\";\n\nconst ProfilePage: NextPage&#x3C;{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return &#x3C;div className=\"flex h-screen justify-center\">404&#x3C;/div>;\n  }\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>{data.username}&#x3C;/title>\n      &#x3C;/Head>\n      &#x3C;PageLayout>\n        &#x3C;div className=\"relative h-36 bg-slate-600\">\n          &#x3C;Image\n            src={data.profilePicture}\n            alt={`@${data.username ?? \"\"}'s profile pic`}\n            width={128}\n            height={128}\n            className=\"absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black bg-black\"\n          />\n        &#x3C;/div>\n        &#x3C;div className=\"h-[64px]\" />\n        &#x3C;div className=\"p-4 text-2xl font-bold\">{`@${\n          data.username ?? \"\"\n        }`}&#x3C;/div>\n        &#x3C;div className=\"w-full border-b border-slate-400\" />\n      &#x3C;/PageLayout>\n    &#x3C;/>\n  );\n};\n\nimport { createServerSideHelpers } from \"@trpc/react-query/server\";\nimport { appRouter } from \"~/server/api/root\";\nimport { prisma } from \"~/server/db\";\nimport superjson from \"superjson\";\nimport { PageLayout } from \"~/components/layout\";\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = createServerSideHelpers({\n    router: appRouter,\n    ctx: { prisma, userId: null },\n    transformer: superjson,\n  });\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nexport default ProfilePage;\n</code></pre>\n<p><strong>2.22 Fetch posts for a given user</strong></p>\n<blockquote>\n<p>Now we will want to fetch feeds for a given user/profile</p>\n</blockquote>\n<blockquote>\n<p>We will need to create a new router for that. Let's go to: <code>src/server/api/routers/posts.ts</code></p>\n</blockquote>\n<pre><code> getPostsByUserId: publicProcedure\n    .input(z.object({ userId: z.string() }))\n    .query(({ ctx, input }) =>\n      ctx.prisma.post.findMany({\n        where: {\n          authorId: input.userId,\n        },\n        take: 100,\n        orderBy: [{ createdAt: \"desc\" }],\n      })\n    ),\n</code></pre>\n<blockquote>\n<p>Let's use it then. We will create a new component in components folder. File name will be <code>postview.tsx</code> and we will copy there the content of the <code>PostView</code> from <code>index.tsx</code></p>\n</blockquote>\n<pre><code>import Image from \"next/image\";\n\nimport dayjs from \"dayjs\";\n\nimport type { RouterOutputs } from \"~/utils/api\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport Link from \"next/link\";\n\ndayjs.extend(relativeTime);\n\ntype PostWithUser = RouterOutputs[\"posts\"][\"getAll\"][number];\n\nexport const PostView = (props: PostWithUser) => {\n  const { post, author } = props;\n  return (\n    &#x3C;div\n      key={post.id}\n      className=\"flex items-center gap-4 border-b border-slate-400 p-8\"\n    >\n      &#x3C;Image\n        src={author.profilePicture}\n        alt=\"Author image\"\n        className=\"h-12 w-12  rounded-full\"\n        width={56}\n        height={56}\n      />\n      &#x3C;div className=\"flex flex-col\">\n        &#x3C;div className=\"flex gap-2 text-slate-400\">\n          &#x3C;Link href={`/@${author.username}`}>\n            &#x3C;span>{`@${author.username}`}&#x3C;/span>\n          &#x3C;/Link>\n          &#x3C;Link href={`/post/${post.id}`}>\n            &#x3C;span>{`•  ${dayjs(post.createdAt).fromNow()}`}&#x3C;/span>\n          &#x3C;/Link>\n        &#x3C;/div>\n        &#x3C;div className=\"flex\">{post.content}&#x3C;/div>\n      &#x3C;/div>\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<blockquote>\n<p>We will need to also retrieve information about users in our <code>posts.tsx</code>, so we will abstract a function called: <code>addUserDataToPosts</code></p>\n</blockquote>\n<pre><code>const addUserDataToPosts = async (posts: Post[]) => {\n  const users = (\n    await clerkClient.users.getUserList({\n      userId: posts.map((post) => post.authorId),\n      limit: 100,\n    })\n  ).map(filterUserForClient);\n\n  return posts.map((post) => {\n    const author = users.find((user) => user.id === post.authorId);\n\n    if (!author || !author.username) {\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Author of the posts not found\",\n      });\n    }\n\n    return { post, author: { ...author, username: author.username } };\n  });\n};\n</code></pre>\n<blockquote>\n<p>We will then use it in <code>getAll</code> and <code>getPostsByUserId</code></p>\n</blockquote>\n<blockquote>\n<p>Whole file looks like this:</p>\n</blockquote>\n<pre><code>import clerkClient from \"@clerk/clerk-sdk-node\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { Ratelimit } from \"@upstash/ratelimit\";\nimport { Redis } from \"@upstash/redis\";\n\nimport {\n  createTRPCRouter,\n  privateProcedure,\n  publicProcedure,\n} from \"~/server/api/trpc\";\nimport { filterUserForClient } from \"~/server/helpers/filterUserForClient\";\nimport { Post } from \"@prisma/client\";\n\nconst addUserDataToPosts = async (posts: Post[]) => {\n  const users = (\n    await clerkClient.users.getUserList({\n      userId: posts.map((post) => post.authorId),\n      limit: 100,\n    })\n  ).map(filterUserForClient);\n\n  return posts.map((post) => {\n    const author = users.find((user) => user.id === post.authorId);\n\n    if (!author || !author.username) {\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Author of the posts not found\",\n      });\n    }\n\n    return { post, author: { ...author, username: author.username } };\n  });\n};\n\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.slidingWindow(3, \"1 m\"),\n  analytics: true,\n  prefix: \"@upstash/ratelimit\",\n});\n\nexport const postsRouter = createTRPCRouter({\n  getAll: publicProcedure.query(async ({ ctx }) => {\n    const posts = await ctx.prisma.post.findMany({\n      take: 100,\n      orderBy: [\n        {\n          createdAt: \"desc\",\n        },\n      ],\n      where: { authorId: \"user_2OBaeJj8EI29omUN4LZTUFl7TBh\" },\n    });\n\n    return addUserDataToPosts(posts);\n  }),\n  getPostsByUserId: publicProcedure\n    .input(z.object({ userId: z.string() }))\n    .query(({ ctx, input }) =>\n      ctx.prisma.post\n        .findMany({\n          where: {\n            authorId: input.userId,\n          },\n          take: 100,\n          orderBy: [{ createdAt: \"desc\" }],\n        })\n        .then(addUserDataToPosts)\n    ),\n\n  create: privateProcedure\n    .input(\n      z.object({\n        content: z\n          .string()\n          .emoji({ message: \"Contains non-emoji characters\" })\n          .min(1)\n          .max(280),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const authorId = ctx.userId;\n\n      const { success } = await ratelimit.limit(authorId);\n\n      if (!success) {\n        throw new TRPCError({ code: \"TOO_MANY_REQUESTS\" });\n      }\n\n      const post = await ctx.prisma.post.create({\n        data: {\n          authorId,\n          content: input.content,\n        },\n      });\n      return post;\n    }),\n});\n</code></pre>\n<blockquote>\n<p>Our <code>[slug].tsx</code> file will then generate the PostView:</p>\n</blockquote>\n<pre><code>import type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\nimport Image from \"next/image\";\n\nimport { PostView } from \"~/components/postview\";\n\nconst ProfileFeed = (props: { userId: string }) => {\n  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({\n    userId: props.userId,\n  });\n  if (isLoading) {\n    return &#x3C;LoadingPage />;\n  }\n  if (!data || data.length === 0) {\n    return &#x3C;div>User has not posted&#x3C;/div>;\n  }\n  return (\n    &#x3C;div className=\"flex flex-col\">\n      {data.map((fullPost) => (\n        &#x3C;PostView {...fullPost} key={fullPost.post.id} />\n      ))}\n    &#x3C;/div>\n  );\n};\n\nconst ProfilePage: NextPage&#x3C;{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return &#x3C;div className=\"flex h-screen justify-center\">404&#x3C;/div>;\n  }\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>{data.username}&#x3C;/title>\n      &#x3C;/Head>\n      &#x3C;PageLayout>\n        &#x3C;div className=\"relative h-36 bg-slate-600\">\n          &#x3C;Image\n            src={data.profilePicture}\n            alt={`@${data.username ?? \"\"}'s profile pic`}\n            width={128}\n            height={128}\n            className=\"absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black bg-black\"\n          />\n        &#x3C;/div>\n        &#x3C;div className=\"h-[64px]\" />\n        &#x3C;div className=\"p-4 text-2xl font-bold\">{`@${\n          data.username ?? \"\"\n        }`}&#x3C;/div>\n        &#x3C;div className=\"w-full border-b border-slate-400\" />\n        &#x3C;ProfileFeed userId={data.id} />\n      &#x3C;/PageLayout>\n    &#x3C;/>\n  );\n};\n\nimport { createServerSideHelpers } from \"@trpc/react-query/server\";\nimport { appRouter } from \"~/server/api/root\";\nimport { prisma } from \"~/server/db\";\nimport superjson from \"superjson\";\nimport { PageLayout } from \"~/components/layout\";\nimport { LoadingPage } from \"~/components/loading\";\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = createServerSideHelpers({\n    router: appRouter,\n    ctx: { prisma, userId: null },\n    transformer: superjson,\n  });\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nexport default ProfilePage;\n</code></pre>\n<blockquote>\n<p>The same will also be used in the <code>index.tsx</code> in <code>Feed</code> component.</p>\n</blockquote>\n<pre><code>const Feed = () => {\n  const { data, isLoading: pageLoading } = api.posts.getAll.useQuery();\n\n  if (pageLoading) {\n    return (\n      &#x3C;div className=\"flex w-full justify-center p-8\">\n        &#x3C;LoadingPage />\n      &#x3C;/div>\n    );\n  }\n\n  if (!data) {\n    return (\n      &#x3C;div className=\"flex w-full justify-center p-8\">\n        Something went wrong...\n      &#x3C;/div>\n    );\n  }\n\n  return (\n    &#x3C;div className=\"flex flex-col\">\n      {data.map((fullProps) => (\n        &#x3C;PostView {...fullProps} key={fullProps.post.id} />\n      ))}\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<p><strong>2.23 Adding Post View page</strong></p>\n<blockquote>\n<p>First let's abstract the ssg to a separate file. In server/helpers, let's create a file called <code>ssgHelper.tsx</code>:</p>\n</blockquote>\n<pre><code>import { createServerSideHelpers } from \"@trpc/react-query/server\";\nimport { appRouter } from \"~/server/api/root\";\nimport { prisma } from \"~/server/db\";\nimport superjson from \"superjson\";\n\nexport const generateSSGHelper = () =>\n  createServerSideHelpers({\n    router: appRouter,\n    ctx: { prisma, userId: null },\n    transformer: superjson,\n  });\n</code></pre>\n<blockquote>\n<p>And we will use it in <code>[slug].tsx</code> just like this: <code>const ssg = generateSSGHelper();</code>:</p>\n</blockquote>\n<pre><code>export const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = generateSSGHelper();\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n</code></pre>\n<blockquote>\n<p>The whole <code>[slug].tsx</code> file looks like this:</p>\n</blockquote>\n<pre><code>import type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\nimport Image from \"next/image\";\n\nimport { PostView } from \"~/components/postview\";\nimport { PageLayout } from \"~/components/layout\";\nimport { LoadingPage } from \"~/components/loading\";\nimport { generateSSGHelper } from \"~/server/helpers/ssgHelper\";\n\nconst ProfileFeed = (props: { userId: string }) => {\n  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({\n    userId: props.userId,\n  });\n  if (isLoading) {\n    return &#x3C;LoadingPage />;\n  }\n  if (!data || data.length === 0) {\n    return &#x3C;div>User has not posted&#x3C;/div>;\n  }\n  return (\n    &#x3C;div className=\"flex flex-col\">\n      {data.map((fullPost) => (\n        &#x3C;PostView {...fullPost} key={fullPost.post.id} />\n      ))}\n    &#x3C;/div>\n  );\n};\n\nconst ProfilePage: NextPage&#x3C;{ username: string }> = ({ username }) => {\n  const { data } = api.profile.getUserByUsername.useQuery({\n    username,\n  });\n\n  if (!data) {\n    return &#x3C;div className=\"flex h-screen justify-center\">404&#x3C;/div>;\n  }\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>{data.username}&#x3C;/title>\n      &#x3C;/Head>\n      &#x3C;PageLayout>\n        &#x3C;div className=\"relative h-36 bg-slate-600\">\n          &#x3C;Image\n            src={data.profilePicture}\n            alt={`@${data.username ?? \"\"}'s profile pic`}\n            width={128}\n            height={128}\n            className=\"absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black bg-black\"\n          />\n        &#x3C;/div>\n        &#x3C;div className=\"h-[64px]\" />\n        &#x3C;div className=\"p-4 text-2xl font-bold\">{`@${\n          data.username ?? \"\"\n        }`}&#x3C;/div>\n        &#x3C;div className=\"w-full border-b border-slate-400\" />\n        &#x3C;ProfileFeed userId={data.id} />\n      &#x3C;/PageLayout>\n    &#x3C;/>\n  );\n};\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = generateSSGHelper();\n\n  const slug = context.params?.slug;\n\n  if (typeof slug !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  const username = slug.replace(\"@\", \"\");\n  await ssg.profile.getUserByUsername.prefetch({ username });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      username,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nexport default ProfilePage;\n</code></pre>\n<blockquote>\n<p>Now let's just copy the content of <code>[slug].tsx</code> to <code>[id].tsx</code> to make our like easier. Rename <code>ProfilePage</code> to <code>SinglePostPage</code>:</p>\n</blockquote>\n<blockquote>\n<p>Let's add a router for single post by id called: <code>getById</code>:</p>\n</blockquote>\n<pre><code>getById: publicProcedure\n    .input(z.object({ id: z.string() }))\n    .query(async ({ ctx, input }) => {\n      const post = await ctx.prisma.post.findUnique({\n        where: { id: input.id },\n      });\n      if (!post) {\n        throw new TRPCError({ code: \"NOT_FOUND\" });\n      }\n      return (await addUserDataToPosts([post]))[0];\n    }),\n</code></pre>\n<blockquote>\n<p>And then we can use it in the <code>[id].tsx</code>:</p>\n</blockquote>\n<pre><code>import type { GetStaticProps, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { api } from \"~/utils/api\";\n\nimport { PostView } from \"~/components/postview\";\nimport { PageLayout } from \"~/components/layout\";\nimport { generateSSGHelper } from \"~/server/helpers/ssgHelper\";\n\nconst SinglePostPage: NextPage&#x3C;{ id: string }> = ({ id }) => {\n  const { data } = api.posts.getById.useQuery({\n    id,\n  });\n\n  if (!data) {\n    return &#x3C;div className=\"flex h-screen justify-center\">404&#x3C;/div>;\n  }\n\n  return (\n    &#x3C;>\n      &#x3C;Head>\n        &#x3C;title>{`${data.post.content} - ${data.author.username}`}&#x3C;/title>\n      &#x3C;/Head>\n      &#x3C;PageLayout>\n        &#x3C;PostView {...data} />\n      &#x3C;/PageLayout>\n    &#x3C;/>\n  );\n};\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const ssg = generateSSGHelper();\n\n  const id = context.params?.id;\n\n  if (typeof id !== \"string\") {\n    throw new Error(\"no slug\");\n  }\n\n  await ssg.posts.getById.prefetch({ id });\n\n  return {\n    props: {\n      trpcState: ssg.dehydrate(),\n      id,\n    },\n  };\n};\n\nexport const getStaticPaths = () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nexport default SinglePostPage;\n</code></pre>\n<blockquote>\n<p>This creates the page for individual post, yay!</p>\n</blockquote>\n<p><strong>2.24 How to cut the build time on Vercel to halftime - Github CI</strong></p>\n<blockquote>\n<p>You should not be checking your types in lint on Vercel builds. There is not reason to because Github CI is free and it is right there. how to use it?</p>\n</blockquote>\n<blockquote>\n<p>On Github our code lives and our code validation should happen there.</p>\n</blockquote>\n<blockquote>\n<p>The thing that builds and deploys it should be separate. (Vercel)</p>\n</blockquote>\n<blockquote>\n<p>Deploying should not be blocked by typecript passes.</p>\n</blockquote>\n<blockquote>\n<p>Github's role is to make sure code is correct</p>\n</blockquote>\n<blockquote>\n<p>Vercel's role is to deploy the code we give it</p>\n</blockquote>\n<blockquote>\n<p>We will use ChatGPT to write yml files for us :P</p>\n</blockquote>\n<blockquote>\n<p>Give it this question: <code>Write me a minimal github ci .yml workflow file that installs node modules, runs typescript typechecking, and also runs lint. This repo uses npm</code></p>\n</blockquote>\n<blockquote>\n<p>Out put will be:</p>\n</blockquote>\n<pre><code>name: CI\n\non: [push, pull_request]\n\nenv:\n  DATABASE_URL: \"https://fake.com\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run type checking\n        run: npm run type-check\n\n      - name: Run linting\n        run: npm run lint\n</code></pre>\n<blockquote>\n<p>We will create a <code>ci.yml</code> file in this path: <code>.github/workflows/</code></p>\n</blockquote>\n<blockquote>\n<p>Paste that content there.</p>\n</blockquote>\n<blockquote>\n<p>Please note we added <code>env: DATABASE_URL: \"https://fake.com\"</code></p>\n</blockquote>\n<blockquote>\n<p>We also need to add <code>type-check</code> command to <code>package.json</code></p>\n</blockquote>\n<pre><code>\"scripts\": {\n    \"build\": \"next build\",\n...\n    \"typecheck\": \"tsc --noEmit\"\n  },\n</code></pre>\n<blockquote>\n<p>Let's now try to commit it and push</p>\n</blockquote>\n<blockquote>\n<p>Now go to github and check it out</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/nyMpL9z.png\" title=\"Photo by Addania\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Addania</em></p></p>\n<blockquote>\n<p>This then means we dont need to run type checking on Vercel, so let's disable it:</p>\n</blockquote>\n<blockquote>\n<p>Go to file: n<code>ext.config-mjs</code> and paste there following:</p>\n</blockquote>\n<pre><code>  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true\n  },\n  swcMinify: true\n</code></pre>\n<blockquote>\n<p>Whole file will look like this:</p>\n</blockquote>\n<pre><code>!process.env.SKIP_ENV_VALIDATION &#x26;&#x26; (await import(\"./src/env.mjs\"));\n\nconst config = {\n  reactStrictMode: true,\n  images: {\n    domains: [\"images.clerk.dev\"],\n  },\n\n  i18n: {\n    locales: [\"en\"],\n    defaultLocale: \"en\",\n  },\n\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  swcMinify: true,\n};\nexport default config;\n</code></pre>\n<blockquote>\n<p>swcMinifiy will run instead of babel and will speed things up.</p>\n</blockquote>\n<p><strong>2.25 Real domain</strong></p>\n<blockquote>\n<p>Vercel has the option to buy domains when you go to Domains tab</p>\n</blockquote>\n<blockquote>\n<p>And it is super easy to add a e-mail server to the domain only with one click on Vercel</p>\n</blockquote>\n<blockquote>\n<p>If we have a domain, how do we add it to our project?</p>\n</blockquote>\n<blockquote>\n<p>Go to Verce -> Settings -> Domains</p>\n</blockquote>\n<blockquote>\n<p>Type in there the domain and click Add.</p>\n</blockquote>\n<blockquote>\n<p>If we want to have a subdomain of a domain like <code>addania.com</code>, we just pre-fix our domain with something: <code>chirp.addania.com</code></p>\n</blockquote>\n<blockquote>\n<p>There you can also add a re-direct.</p>\n</blockquote>"}},{"node":{"id":"247926a5-2175-5d13-85c5-500706eed588","excerpt":"This page is my notes from couple of courses and official zod documentation: https://www.youtube.com/watch?v=L6BE-U3oy80&ab_channel…","rawMarkdownBody":"\r\n![](https://i.imgur.com/alxMzwe.png \"Photo by from Pexels\")\r\n\r\nThis page is my notes from couple of courses and official zod documentation:\r\n\r\n- https://www.youtube.com/watch?v=L6BE-U3oy80&ab_channel=WebDevSimplified\r\n- https://www.totaltypescript.com/tutorials/zod\r\n- https://zod.dev/\r\n\r\n<h4>For the Zod tutorial:</h4>\r\n\r\n> Clone the repo from https://github.com/total-typescript/zod-tutorial\r\n\r\n```\r\ngit clone https://github.com/total-typescript/zod-tutorial.git\r\n```\r\n\r\n> Install yarn:\r\n\r\n```\r\nnpm install --global yarn\r\n```\r\n\r\n> Install dependencies:\r\n\r\n```\r\nyarn install\r\n```\r\n\r\n> If you get an error:\r\n\r\n```\r\nerror vite@3.0.5: The engine \"node\" is incompatible with this module. Expected version \"^14.18.0 || >=16.0.0\". Got \"15.13.0\"\r\nerror Found incompatible module.\r\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\r\n```\r\n\r\n> It means you dont use correct version of node.\r\n\r\n> Install this version of node:\r\n\r\n```\r\nnvm install 14.18.0\r\n```\r\n\r\n> or alternatively:\r\n\r\n```\r\nnvm install 16.0.0\r\n```\r\n\r\n> then try to run dependencies again:\r\n\r\n```\r\nyarn install\r\n```\r\n\r\n> Start exercises:\r\n\r\n```\r\nyarn exercise 01\r\n\r\n```\r\n\r\n> Interesting facts:\r\n\r\n> 1. how to infer type from z schema? Please not that we declare it as a type (not const) and we use angle brackets:\r\n\r\n```\r\nconst Form = z.object({\r\n  repoName: z.string(),\r\n})\r\n\r\ntype Output = z.infer<typeof Form>\r\n```\r\n\r\n> 2. If we set keywords some defaults, it means if we dont pass anything, we will default to empty array. This means user INPUTS just name (no keyword), but the OUTPUT will be name and keywords. Which means that we will have different input and output type:\r\n\r\n```\r\nconst Form = z.object({\r\n  repoName: z.string(),\r\n  keywords: z.array(z.string()).default([]),\r\n});\r\n\r\ntype Input = z.input<typeof Form>;\r\ntype Output = z.infer<typeof Form>;\r\n```\r\n\r\n> The trick is to use `input` instead of `infer`\r\n","frontmatter":{"date":"2023-01-23","title":"Zod","category":"knowledge-base"},"fields":{"slug":"/Zod/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/alxMzwe.png\" title=\"Photo by from Pexels\"></p>\n<p>This page is my notes from couple of courses and official zod documentation:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=L6BE-U3oy80&#x26;ab_channel=WebDevSimplified\">https://www.youtube.com/watch?v=L6BE-U3oy80&#x26;ab_channel=WebDevSimplified</a></li>\n<li><a href=\"https://www.totaltypescript.com/tutorials/zod\">https://www.totaltypescript.com/tutorials/zod</a></li>\n<li><a href=\"https://zod.dev/\">https://zod.dev/</a></li>\n</ul>\n<h4>For the Zod tutorial:</h4>\n<blockquote>\n<p>Clone the repo from <a href=\"https://github.com/total-typescript/zod-tutorial\">https://github.com/total-typescript/zod-tutorial</a></p>\n</blockquote>\n<pre><code>git clone https://github.com/total-typescript/zod-tutorial.git\n</code></pre>\n<blockquote>\n<p>Install yarn:</p>\n</blockquote>\n<pre><code>npm install --global yarn\n</code></pre>\n<blockquote>\n<p>Install dependencies:</p>\n</blockquote>\n<pre><code>yarn install\n</code></pre>\n<blockquote>\n<p>If you get an error:</p>\n</blockquote>\n<pre><code>error vite@3.0.5: The engine \"node\" is incompatible with this module. Expected version \"^14.18.0 || >=16.0.0\". Got \"15.13.0\"\nerror Found incompatible module.\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n</code></pre>\n<blockquote>\n<p>It means you dont use correct version of node.</p>\n</blockquote>\n<blockquote>\n<p>Install this version of node:</p>\n</blockquote>\n<pre><code>nvm install 14.18.0\n</code></pre>\n<blockquote>\n<p>or alternatively:</p>\n</blockquote>\n<pre><code>nvm install 16.0.0\n</code></pre>\n<blockquote>\n<p>then try to run dependencies again:</p>\n</blockquote>\n<pre><code>yarn install\n</code></pre>\n<blockquote>\n<p>Start exercises:</p>\n</blockquote>\n<pre><code>yarn exercise 01\n</code></pre>\n<blockquote>\n<p>Interesting facts:</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>how to infer type from z schema? Please not that we declare it as a type (not const) and we use angle brackets:</li>\n</ol>\n</blockquote>\n<pre><code>const Form = z.object({\n  repoName: z.string(),\n})\n\ntype Output = z.infer&#x3C;typeof Form>\n</code></pre>\n<blockquote>\n<ol start=\"2\">\n<li>If we set keywords some defaults, it means if we dont pass anything, we will default to empty array. This means user INPUTS just name (no keyword), but the OUTPUT will be name and keywords. Which means that we will have different input and output type:</li>\n</ol>\n</blockquote>\n<pre><code>const Form = z.object({\n  repoName: z.string(),\n  keywords: z.array(z.string()).default([]),\n});\n\ntype Input = z.input&#x3C;typeof Form>;\ntype Output = z.infer&#x3C;typeof Form>;\n</code></pre>\n<blockquote>\n<p>The trick is to use <code>input</code> instead of <code>infer</code></p>\n</blockquote>"}},{"node":{"id":"16fa5a5e-002b-59d9-ab45-ce44a8978faf","excerpt":"Photo by Pixabay from Pexels Intro to object oriented programming Object oriented programming uses objects which represent REAL LIFE…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Kz6Bpsu.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\n**Intro to object oriented programming**\r\n\r\n> Object oriented programming uses objects which represent REAL LIFE entities in code\r\n\r\n> Classes make it easier to reason about the code. For example, we can create a `ProductList` object which has `addProduct` & `removeProduct` method and we use it to fetch from server and render in browser a list of products. A product itself can also be an object on its own with a method to display details, add to cart method, etc. `ProductList` and `Product` objects are related.\r\n\r\n> This is one way we can think about our application and split it into pieces that makes sense to us humans. In JS and TS such objects are supported but we also have `classes`.\r\n\r\n> What is difference between an `object` and a `class`?\r\n\r\n> `Objects` are concrete things you work with in code. They are data structures we use to store data.\r\n\r\n> `Class` is blueprint for objects. It is a theoretical definition of an object. Class allows us to define how objects should look like, which data and methods they should hold, so that we can then easily build multiple objects based on such a class. Concrete objects which are based on a given class are called `instances` of a class. Object is an instance of a class if it is based on such a class. We can thus quickly replicate objects with same structure and methods.\r\n\r\n> Classes exist to speed up creation of objects. What we used so far was literal notation of objects.\r\n\r\n**Objects**\r\n\r\n> Objects can be created in two ways:\r\n\r\n- as object literal: const a = {name: 'Pete'}\r\n- as an instance of a class const a = new Person(\"Pete\")\r\n\r\n**Our first class**\r\n\r\n> Classes are defined with a keyword `class` and names are by convention capitalized:\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n}\r\n```\r\n\r\n> Class above has a field called `name`. Please note this is not the same as a `key - value` pair in objects. Field in a class only defines a name of a key which we want to have in an object which we will create based on the class. And here furthermore we defined the value type our key `name` will hold in the end.\r\n\r\n> We can also set an initial value of our field with equal sign (but we dont have to do that, it is optional):\r\n\r\n```\r\nclass Department {\r\n  name: string = \"DEFAULT\";\r\n}\r\n```\r\n\r\n**Methods**\r\n\r\n> What we also can have in the class is a **method**. What are methods? They are simply `functions in objects`. We can define those functions our object will have (methods) in a class too.\r\n\r\n> One of the default methods (function in object) is called `constructor`. It is a special function tied to this class and therefore tied to any object we create based on this class and is executed when the object is being created. It allows to do some initialization work for the object we are building.\r\n\r\n> `Constructor` function accepts arguments, such as below `n` and we can for example put this `n` in our field `name`\r\n\r\n```\r\nclass Department {\r\n    name: string;\r\n    constructor (n: string) {\r\n    this.name = n\r\n    }\r\n}\r\n```\r\n\r\n> We get the value of the `n` when we are creating and instance of the class. This value will be passed there and constructor will initialize this `n` to be assigned to `name` field (`name` property) in our class.\r\n\r\n> Please note that we need to access class fields with `this` keyword .\r\n\r\n> Please also note that code below only says that we will have a field name, but it does not assign any value to it.\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n}\r\n```\r\n\r\n> Our constructor function makes sure that when the instance of the class (object) is created it will pass provided `n` value and store it in our `name` field.\r\n\r\n**How to create an instance of the class**\r\n\r\n> So we defined the blueprint (architectural design) of our object. And now how to bring it to life and create one example of that class (a house based on the design)?\r\n\r\n> We use keyword `new` + name of the class + parenthesis:\r\n\r\n```\r\nnew Deprtment()\r\n```\r\n\r\n> This will create an `instance` of a Department class.\r\n\r\n> But beware - when we initialize an instance of a class with `new Department()` its constructor is called and it expects `n` as an argument!\r\n\r\n> This means we need to provide it else we get a TS error.\r\n\r\n```\r\nnew Department(\"Marketing\")\r\n```\r\n\r\n> We can then store our new instance of a class (object) to a variale and console log it for example:\r\n\r\n```\r\nconst ourFirstClass = new Department(\"Marketing\");\r\n\r\nconsole.log(\"ourFirstClass\", ourFirstClass);\r\n```\r\n\r\n> Result will look like this:\r\n\r\n![](https://i.imgur.com/GjKUh8l.png \"Photo by Addania\")<p style=\"font-size: 12px; text-align: right\">_Photo by Addania_</p>\r\n\r\n> And this is a regular JS object! 🤯\r\n\r\n**Methods**\r\n\r\n> Classes do not only have properties, but also methods - object functions.\r\n\r\n> Special one is constructor which is triggered when we instantiate our class as `const accounting = new Department(\"Accounting\")`;\r\n\r\n> In oder to add a method we just write its name, parenthesis and curly braces such as `describe` method as below:\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  constructor(n: string) {\r\n    this.name = n;\r\n  }\r\n  describe() {\r\n    console.log(\"Department: \" + name);\r\n  }\r\n}\r\nconst accounting = new Department(\"Accounting\");\r\nconst marketing = new Department(\"Marketing\");\r\naccounting.describe();\r\n```\r\n\r\n> Or buidling something cooler:\r\n\r\n```\r\nclass Character {\r\n  name: string;\r\n  level: number;\r\n  hp: number;\r\n\r\n  constructor(name: string, level: number, hp: number) {\r\n    this.name = name;\r\n    this.level = level;\r\n    this.hp = hp;\r\n  }\r\n  printWelcomeMessage() {\r\n    console.log(\"Welcome to the World of Warcraft, \" + this.name);\r\n    console.log(\r\n      \"As a level \" + this.level + \" character, you have \" + this.hp + \" hp\"\r\n    );\r\n  }\r\n}\r\n\r\nconst adda = new Character(\"Addania\", 1, 100);\r\nadda.printWelcomeMessage();\r\n```\r\n\r\n> However there is a problem! `\"Department: \" + name` assumes that we have a const / variable called `name`.\r\n\r\n> But the class method has only access to its own scope - code block of the describe method (so anything within curly braces), so we would need to have a variable called name in the method itself:\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  constructor(n: string) {\r\n    this.name = n;\r\n  }\r\n  describe() {\r\n    const greeting = \"HELLO\"\r\n    console.log(\"Department: \" + greeting);\r\n  }\r\n}\r\nconst accounting = new Department(\"Accounting\");\r\nconst marketing = new Department(\"Marketing\");\r\naccounting.describe();\r\n```\r\n\r\n> Class method also has access to global variable above the class:\r\n\r\n```\r\nconst global = \"I AM TOTALY GLOBAL\"\r\n\r\nclass Department {\r\n  name: string;\r\n  constructor(n: string) {\r\n    this.name = n;\r\n  }\r\n  describe() {\r\n\r\n    console.log(\"Department: \" + global);\r\n  }\r\n}\r\nconst accounting = new Department(\"Accounting\");\r\nconst marketing = new Department(\"Marketing\");\r\naccounting.describe();\r\n```\r\n\r\n> Class method however, does not have access to properties (fields) within the class. So describe method cannot access `name` property. We will get an error: \"Cannot find name\"\r\n\r\n> In order to give access to the class properties and other methods, we need to use a special keyword: `this`.\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  constructor(n: string) {\r\n    this.name = n;\r\n  }\r\n  describe() {\r\n    console.log(\"Department: \" + this.name);\r\n  }\r\n}\r\nconst accounting = new Department(\"Accounting\");\r\nconst marketing = new Department(\"Marketing\");\r\naccounting.describe();  // Department: Accounting\r\n```\r\n\r\n> `This` refers back to the CONCRETE INSTANCE of this class that was created. But there is a trick too. It does not refer to the class, but to its instance. So in above example `this` refers to the `accounting` object (which was based on Department class).\r\n\r\n> Even more interestingly `this` refers to the place which called it. So `this` can be tricky. Let's demonstrate.\r\n\r\n> We add another object which is declared as an object literal:\r\n\r\n```\r\nconst accountingCopy = { describe: accounting.describe}\r\naccountingCopy.describe()\r\n```\r\n\r\n> Console output will be: `Department: undefined`\r\n\r\n> Reason is that I created an object literal called accountingCopy which contains one property describe which is pointing to the describe method of accounting object. In other words our accountingCopy contains describe property which is passing the describe method from accounting object - we are not executing it at that point, it is `executed with accountingCopy.describe()`. When this function executes `this` will not refer to the accounting object where the method was part of originally and hence its name. It will refer to the thing which is responsible for calling this method. Resonsible for calling this method was `accountingCopy` exactly in this place:\r\n\r\n```\r\naccountingCopy.describe()\r\n```\r\n\r\n> So `this` refers to accountingCopy and accountingCopy does not have any name property. Therefore we get undefined.\r\n\r\n> This is something to keep in mind when working with classes. In order for compiler to yell at us when we assume that this refers to original method, we can improve our code:\r\n\r\n```\r\ndescribe(this: Department) {\r\n    console.log(\"Department: \" + this.name);\r\n  }\r\n```\r\n\r\n> We can add `this` as a parameter to describe method which is of a type: Department. This is not a parameter per se. We can still call describe method without any parameter:\r\n\r\n```\r\naccounting.describe()\r\n```\r\n\r\n> But it is understood by Typescript, in order to define what `this` refers to. And since we assign type `Department` we are saying that when describe is executed, `this` refers to the instance of the class `Department`. Which is at the end just an object of a type `Department`.\r\n\r\n> Using this approach will then yield a typescript error if we try to use describe with a different object - our object literal accountingCopy which is not an instance of the class Department:\r\n\r\n```\r\naccountingCopy.describe()\r\n```\r\n\r\n> Using `describe(this: Department){}` adds an extra safety check. We would get notified and we would need to fix this, for example by adding name property to our object literal: `accountingCopy`\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  constructor(n: string) {\r\n    this.name = n;\r\n  }\r\n  describe(this: Department) {\r\n    console.log(\"Department: \" + this.name);\r\n  }\r\n}\r\n\r\nconst accounting = new Department(\"Accounting\");\r\n\r\nconst accountingCopy = { name: \"Addy\", describe: accounting.describe };\r\n\r\naccountingCopy.describe();\r\n```\r\n\r\n**Private and public access**\r\n\r\n> Imagine we have a method to add employees to our Department class:\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  employees: Array<string> = [];\r\n\r\n  constructor(n: string) {\r\n    this.name = n;\r\n  }\r\n  addEmployee(employee: string) {\r\n    this.employees.push(employee);\r\n  }\r\n  printEmployees() {\r\n    console.log(\"Number of slaves: \", this.employees.length);\r\n    console.log(\"List of slaves: \", this.employees);\r\n  }\r\n}\r\nconst accounting = new Department(\"Accounting\");\r\naccounting.addEmployee(\"Pete\");\r\naccounting.addEmployee(\"Steve\");\r\naccounting.printEmployees();\r\n```\r\n\r\n> Code above will console log, that we have 2 slaves and their names are Pete and Steve. Which is cool and we can add new slaves by using `accounting.addEmployee`.\r\n\r\n> But we can also modify employees from outside of the class and by direct assignment:\r\n\r\n```\r\naccounting.employees[2] = \"Anna\"\r\n```\r\n\r\n> Anna is an infiltrator and should not be on the list. But she is now! :( Our poor precious class was compromised! Now there are two ways we can manipulate with the property inside of our class. This may be desired behaviour but in larger applications this is typically not what we want. We tend to want to have one single way how to do things - one source of truth. Therefore `accounting.employees[2] = \"Anna\"` may not be the desired way how to change <s>employees</s> slaves list.\r\n\r\n> More over maybe our `addEmployee` method does not ONLY add an employee but does more - like some validation, adding some default information about the employee atc. And if we had 2 ways of doing it, they might differ.\r\n\r\n> In order to prevent such direct assignments from outside of the class, we can turn employees property (field) to a private property. How? Super ultra easy: add `private` keyword in front of a property or a method\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  private employees: Array<string> = [];\r\n\r\n  constructor(n: string) {\r\n    this.name = n;\r\n  }\r\n  addEmployee(employee: string) {\r\n    this.employees.push(employee);\r\n  }\r\n  printEmployees() {\r\n    console.log(\"Number of slaves: \", this.employees.length);\r\n    console.log(\"List of slaves: \", this.employees);\r\n  }\r\n}\r\n```\r\n\r\n> This means that emplyoees property is only accessible from `inside` of the Department class. Not from outside. Now we cant access employees like this: `accounting.employees[2] = \"Anna\"`\r\n\r\n> `private` keyword is a modifier. We also have a `public` keyword, which is a default, so we do not have to add it. For example class name is public by default (because we did not set it to private):\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  ....\r\n}\r\n```\r\n\r\n> But we could also write it like this (although it is redundant):\r\n\r\n```\r\nclass Department {\r\n  public name: string;\r\n  ....\r\n}\r\n```\r\n\r\n**Shorthand initialization**\r\n\r\n> Often we will have classes with many properties which need to be initialized when creating instance of the class:\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  id: number;\r\n  size: number;\r\n  employees: Array<string> = [];\r\n\r\n  constructor(n: string, id: number, size: number) {\r\n    this.name = n;\r\n    this.id = id\r\n    this.size = size\r\n  }\r\n}\r\nconst accounting = new Department(\"Accounting\", 1, 500);\r\n```\r\n\r\n> Please note that it is fine that we name parameters of constructor differently from the fields of the class. For example, the constructor uses `n` and then this is assigned to the field `name`.\r\n\r\n> Defining the properties beneath the class and also initializing them all in the constructor is kind of tedious and double work. Typescript allows us to use `shorthand initialization` which looks like this:\r\n\r\n```\r\nclass Department {\r\n  employees: Array<string> = [];\r\n  constructor(private name: string, private id: number, private size: number) {}\r\n}\r\nconst accounting = new Department(\"Accounting\", 1, 500);\r\n\r\n```\r\n\r\n> Please note two things.\r\n\r\n- We cannot anymore have any random name of the variable, such as `n`. It needs to be `name`.\r\n- We must use `private` or `public` keyword to define its access type. We cannot ommit `public`, though\r\n\r\n**Readonly modifier**\r\n\r\n> What if some of our class fields should not change once they are initialized? In such a case we can use `readonly` modifier.\r\n\r\n```\r\nclass Character {\r\n  name: string;\r\n  readonly id: number;\r\n\r\n  constructor(name: string, id: number) {\r\n    this.name = name;\r\n    this.id = id;\r\n  }\r\n}\r\nconst adda = new Character(\"Addania\", 1, 10, 100);\r\n```\r\n\r\n> We can also use shorthand initialization and define the readonly in constructor:\r\n\r\n```\r\nclass Character {\r\n  constructor(private name: string, private readonly id: number) {\r\n    ...\r\n  }\r\n}\r\nconst adda = new Character(\"Addania\", 1);\r\n```\r\n\r\n> This means that we cannot later on change the value of the id:\r\n\r\n```\r\nclass Character {\r\n  constructor(private name: string, private readonly id: number) {\r\n    console.log(\"name\", this.name);\r\n    console.log(\"id\", this.id);\r\n  }\r\n  changeId() {\r\n    this.id = 10; // Typescript error\r\n  }\r\n}\r\nconst adda = new Character(\"Addania\", 1);\r\nconsole.log(\"adda\", adda);\r\n```\r\n\r\n> Please note that we cant change this property AFTER the initialization. If I still manipulate with the id in the constructure, this is still allowed. 🤔\r\n\r\n**Inheritance**\r\n\r\n> As in examples above, we might have a Department class which has its name, id and list of employees. But for example IT department would also have list of administrators while Accounting department would have list of reports\r\n\r\n> So in general we might have some fields and methods which are common for each department, but some which are specific to the concrete version of Department.\r\n\r\n> Inheritance can help to build a new class which will be based on department but will be specific to IT Department:\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  id: number;\r\n  size: number;\r\n  employees: Array<string> = [];\r\n\r\n  constructor(n: string, id: number, size: number) {\r\n    this.name = n;\r\n    this.id = id\r\n    this.size = size\r\n  }\r\n  print(){\r\n    console.log(\"We are ...\", this.name)\r\n  }\r\n}\r\n\r\nclass IT extends Department {\r\n\r\n}\r\n\r\nconst myIT = new IT(\"Developer Den\", 1, 3)\r\nmyIT.print()\r\n```\r\n\r\n> You inherit with the `extends` keyword followed by the class from which we are inheriting. Please not that we can only inherit from one class. Now our IT department will have all the properites and methods from the Department, but will have some special ones.\r\n\r\n> Please note that as long as the IT class is empty and does not have its own constructor, then the constructor of the parent class Department will be implemented. This also means that when we want to instantiate this IT class, then we need to pass all 3 arguments which constructor of the Department class needs: name, id and size. But to pass the name to our IT class is a bit weird, because we know it should be \"IT\". So how can we make sure we do not need to pass this information when we are creating our IT instance of the class?\r\n\r\n> We can have our own constructor in the IT class. This IT constructor will only accept 2 arguments: id and size when we instantiate it and we will forward the \"Information Technology\" to the Department class which will consume it as a name.\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  id: number;\r\n  size: number;\r\n\r\n  constructor(n: string, id: number, size: number) {\r\n    this.name = n;\r\n    this.id = id;\r\n    this.size = size;\r\n  }\r\n}\r\n\r\nclass IT extends Department {\r\n  constructor(id: number, size: number) {\r\n    super(\"Information Technology\", id, size);\r\n  }\r\n}\r\n\r\nconst myIT = new IT(12, 20);\r\nconsole.log(\"myIT\", myIT);\r\n```\r\n\r\n> Whenever we add our own constructor in a class which extends another class, then we need to call special `super()` function in the constructor. And we need to execute it also as a function. `super()` calls the constructor function of the parent class. And for that reason the super also takes the arguments of the parent class (from which we are inheriting). In our case: n (name), id and size.\r\n\r\n> It is also super important that we call `super()` before we use `this` keyword in our constructor!\r\n\r\n> Now how can we add our new `admins` property? We certainly do not want to forward it to the Department class, because this class does not know about admins. Admins are our secret agents, only for our IT department.\r\n\r\n```\r\nclass IT extends Department {\r\n  constructor(id: number, size: number, public admins: Array<string>) {\r\n    super(\"Information Technology\", id, size);\r\n  }\r\n}\r\n```\r\n\r\n> Above is a shorthand and below is the longhand definition :>\r\n\r\n```\r\nclass IT extends Department {\r\n  admins: Array<string>;\r\n  constructor(id: number, size: number, admins: Array<string>) {\r\n    super(\"Information Technology\", id, size);\r\n    this.admins = admins;\r\n  }\r\n}\r\n```\r\n\r\n> Then we need to list of admins when instantiating our IT class:\r\n\r\n```\r\nconst myIT = new IT(12, 20, [\"Adda\"]);\r\n```\r\n\r\n> Please also note, that if we have some method on our Department from which we extend, then also we can call those methods on our IT department. Such as `addEmployee()` or `print()`\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  id: number;\r\n  size: number;\r\n  private employees: Array<string> = [];\r\n  constructor(n: string, id: number, size: number) {\r\n    this.name = n;\r\n    this.id = id;\r\n    this.size = size;\r\n  }\r\n  addEmployee(name: string) {\r\n    this.employees.push(name);\r\n  }\r\n  print() {\r\n    console.log(\"Welcome to ... \", this.name);\r\n    console.log(\"Please applaud to our employees: \", this.employees);\r\n  }\r\n}\r\nclass IT extends Department {\r\n  admins: Array<string>;\r\n  constructor(id: number, size: number, admins: Array<string>) {\r\n    super(\"Information Technology\", id, size);\r\n    this.admins = admins;\r\n  }\r\n}\r\nconst myIT = new IT(12, 20, [\"Adda\"]);\r\nconsole.log(\"myIT\", myIT);\r\nmyIT.addEmployee(\"Josh\");\r\nmyIT.print();\r\n```\r\n\r\n> Moreover, you can have own methods on the new IT department\r\n\r\n```\r\nclass IT extends Department {\r\n  admins: Array<string>;\r\n  constructor(id: number, size: number, admins: Array<string>) {\r\n    super(\"Information Technology\", id, size);\r\n    this.admins = admins;\r\n  }\r\n  execute(item: string) {\r\n    console.log(\"I am processing the \", item);\r\n  }\r\n}\r\n\r\nconst myIT = new IT(12, 20, [\"Adda\"]);\r\nmyIT.execute(\"payment\");\r\n```\r\n\r\n> Now what if we want to have our addEmployees from parent class slightly modified? We could try somthing like this:\r\n\r\n```\r\nclass IT extends Department {\r\n  admins: Array<string>;\r\n  constructor(id: number, size: number, admins: Array<string>) {\r\n    super(\"Information Technology\", id, size);\r\n    this.admins = admins;\r\n  }\r\n  addEmployee(name: string) {\r\n    if (name === \"Mia\"){\r\n      return\r\n    } else {\r\n      this.employees.push(name)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n> But here we have a problem, because employees is private in our parent Department class. So we cant access it outside of that class. If employess would not be private, then we could do it and `addEmployee` from our IT class would override the one from the Department!\r\n\r\n> Solution is that we can use `protected` keyword instead of `private`. `protected` allows property to be used in a class which inherits from the parent class. But it is not allowed to use it outside of these two classes.\r\n\r\n```\r\nclass Department {\r\n  name: string;\r\n  id: number;\r\n  size: number;\r\n  protected employees: Array<string> = [];\r\n  constructor(n: string, id: number, size: number) {\r\n    this.name = n;\r\n    this.id = id;\r\n    this.size = size;\r\n  }\r\n  addEmployee(name: string) {\r\n    this.employees.push(name);\r\n  }\r\n}\r\n\r\nclass IT extends Department {\r\n  admins: Array<string>;\r\n  constructor(id: number, size: number, admins: Array<string>) {\r\n    super(\"Information Technology\", id, size);\r\n    this.admins = admins;\r\n  }\r\n  addEmployee(name: string) {\r\n    if (name === \"Mia\") {\r\n      return;\r\n    }\r\n    this.employees.push(name);\r\n  }\r\n}\r\n\r\nconst myIT = new IT(12, 20, [\"Adda\"]);\r\nmyIT.addEmployee(\"Josh\");\r\nmyIT.addEmployee(\"Mia\");\r\n```\r\n\r\n**Getters and setters**\r\n\r\n> Imagine we create ab Accounting department class which has a lastReport which is a private property:\r\n\r\n```\r\nclass Accounting extends Department {\r\n  private lastReport: string;\r\n  reports: Array<string>;\r\n\r\n  constructor(id: number, size: number) {\r\n    super(\"Accounting\", id, size);\r\n    this.reports = [];\r\n    this.lastReport = \"\";\r\n  }\r\n  addReport(name: string) {\r\n    this.reports.push(name);\r\n    this.lastReport = name;\r\n  }\r\n}\r\n\r\nconst myAcc = new Accounting(10, 100);\r\nmyAcc.addReport(\"rep1\");\r\nmyAcc.addReport(\"rep2\");\r\nconsole.log(\"myAcc\", myAcc);\r\n```\r\n\r\n> `lastReport` can only be accessible from within the class. We cannot access it outside with a `dot` notation (`myAcc.lastReport`). But what if we still want to make it accessible from outside, but in a controlled manner with some more complex logic? We can use a getter method in order to do so. To write a getter method we write keyword get and then name of the method. Please note that because it is a method we need parentheses and curly bracers. We also need to return something\r\n\r\n```\r\nget mostRecentReport () {\r\n  if (this.reports.length >0){\r\n    return this.lastReport\r\n  }else {\r\n    throw new Error(\"No report found\")\r\n  }\r\n}\r\n```\r\n\r\n> How can we then access it? We access it as a `property`, not as a `method`! So we do not need parenthesis:\r\n\r\n```\r\nmyAcc.mostRecentReport\r\n```\r\n\r\n> Behind the scenes myAcc.mostRecentReport will execute that method even when accessed as property. But we do not call it as a method. We do not do this: `myAcc.mostRecentReport()` ❗\r\n\r\n> Whole code then looks like this:\r\n\r\n```\r\nclass Accounting extends Department {\r\n  private lastReport: string;\r\n  reports: Array<string>;\r\n\r\n  get mostRecentReport() {\r\n    if (this.reports.length > 0) {\r\n      return this.lastReport;\r\n    } else {\r\n      throw new Error(\"No report found\");\r\n    }\r\n  }\r\n\r\n  constructor(id: number, size: number) {\r\n    super(\"Accounting\", id, size);\r\n    this.reports = [];\r\n    this.lastReport = this.reports[0];\r\n  }\r\n  addReport(name: string) {\r\n    this.reports.push(name);\r\n    this.lastReport = name;\r\n  }\r\n}\r\n\r\nconst myAcc = new Accounting(10, 100);\r\nmyAcc.addReport(\"rep1\");\r\nmyAcc.addReport(\"rep2\");\r\nconsole.log(\"what is my last report? \", myAcc.mostRecentReport);\r\nconsole.log(\"myAcc\", myAcc);\r\n```\r\n\r\n> We can also define a setter method. This method will allow us to set some avlues from outside even for a private property like lastReport.\r\n\r\n> In order to create a setter, we need a `set` keyword, then name of the setter method. This method then must take an argument. Then in the body, we can write any logic which will store this value.\r\n\r\n```\r\nset mostRecentReport(value: string){\r\n this.addReport(value)\r\n}\r\n```\r\n\r\n> Above setter is an alternative to `addReport`. We can even re-use the `addReport` method. But on top of it, maybe we want to add some more logic to it.\r\n\r\n> How to then use the setter? IZI:\r\n\r\n```\r\nmyAcc.mostRecentReport = \"hahaaaa\";\r\n```\r\n\r\n> Please note we cannot access it as a method: `myAcc.mostRecentReport(\"hahaaaa\")`. We access it as a property! Both getters and setters behave like properties, not methods.\r\n\r\n> Whole code then looks like this:\r\n\r\n```\r\nclass Accounting extends Department {\r\n  private lastReport: string;\r\n  reports: Array<string>;\r\n\r\n  get mostRecentReport() {\r\n    if (this.reports.length > 0) {\r\n      return this.lastReport;\r\n    } else {\r\n      throw new Error(\"No report found\");\r\n    }\r\n  }\r\n\r\n  set mostRecentReport(value: string) {\r\n    this.addReport(value);\r\n  }\r\n\r\n  constructor(id: number, size: number) {\r\n    super(\"Accounting\", id, size);\r\n    this.reports = [];\r\n    this.lastReport = this.reports[0];\r\n  }\r\n  addReport(name: string) {\r\n    this.reports.push(name);\r\n    this.lastReport = name;\r\n  }\r\n}\r\n\r\nconst myAcc = new Accounting(10, 100);\r\nmyAcc.addReport(\"rep1\");\r\nmyAcc.addReport(\"rep2\");\r\nconsole.log(\"what is my last report? \", myAcc.mostRecentReport);\r\nmyAcc.mostRecentReport = \"hahaaaa\";\r\nconsole.log(\"what is my last report? \", myAcc.mostRecentReport);\r\nconsole.log(\"myAcc\", myAcc);\r\n```\r\n\r\n> Getters and Setters encapsulate logic and add soem extra logic when we try to read and set some property.\r\n\r\n**Static properties and methods**\r\n\r\n> `Math` is a class in Javascript which allows you to access for example constant pi with `Math.PI` or many other cool features like `Math.round()`.\r\n\r\n> Static methods and properties are called on the class itself. Not on its instance. So on `Department`, `Accounting` or `IT`. Not on `myAcc` or `myIT`. Use case could be that you want to store some globals in the class itself, but you want it to be also used outside.\r\n\r\n> Let's create a method in Department class which will help create emlpoyees:\r\n\r\n```\r\nclass Department {\r\n  ...\r\n  static createEmployee(name: string){\r\n    return { name: name}\r\n  }\r\n  ....\r\n}\r\nconst employee1 = Department.createEmployee(\"Adda\")\r\nconsole.log(\"emplyoee1\", employee1)\r\n```\r\n\r\n> Likewise, we can also create a static property which can be called on a class itself without instantiating it:\r\n\r\n```\r\nclass Department {\r\n  ...\r\n  static fiscalYear = 2022\r\n  ....\r\n}\r\nconsole.log(\"year\", Department.fiscalYear)\r\n```\r\n\r\n> If I add static properties or methods to a class I cant access them from the non-static parts of the class. I wont be able to use them for example in constructor using `this` keyword:\r\n\r\n```\r\nclass Department {\r\n  ...\r\n  static fiscalYear = 2022\r\n  static createEmployee(name: string){\r\n    return { name: name}\r\n  }\r\nconstructor (){\r\n  console.log(this.fiscalYear)\r\n}\r\n  ....\r\n}\r\n```\r\n\r\n> Reason is `this` keyword refers to the instance of the class, not the class itself. Static is not available on the instance of the class. Whole idea of static is to use it on the class itself without instantiating it. They are detached from the instances of that class.\r\n\r\n> In order to acceess statics from inside of the class we need to use them with the name of the class:\r\n\r\n```\r\nclass Department {\r\n  ...\r\n  static fiscalYear = 2022\r\n  static createEmployee(name: string){\r\n    return { name: name}\r\n  }\r\nconstructor (){\r\n  console.log(Department.fiscalYear)\r\n}\r\n  ....\r\n}\r\n```\r\n\r\n**Abstract classes**\r\n\r\n> Imagine we have a method like `describe`, which however cannot be generalized for all children, but depends on and is subject to the implementation of child classes. Then instead of providing a generic describe method on Department, we want to `enforce` that all our child classes implement their own describ method. We want to make sure that none of the children misses to implement it.\r\n\r\n> To ensure it, we can define an abstact method on the Department which will then require each child to implement their own version of the method.\r\n\r\n```\r\nabstract class Department {\r\n  ...\r\n  abstract describe(): void;\r\n  ....\r\n}\r\n```\r\n\r\n> Please note that we use `abstract` keyword in front of the method. Instead of curly braces we only define the return type.\r\n\r\n> Please also note that if we have 1 or more abstract methods in our class, we also need to use abstract keyword in front of the entire class!\r\n\r\n> Now that our Department is abstract, our IT and Accounting department will throw an error, because they dont have their own custom implementations of the describe. Let's implement them:\r\n\r\n```\r\nclass IT extends Department {\r\n  ...\r\n  describe() {\r\n    console.log(\"This is an IT department with emplyoees: \", this.employees);\r\n  }\r\n  ...\r\n}\r\nconst myIT = new IT(12, 20, [\"Adda\"]);\r\nmyIT.describe();\r\n\r\nclass Accounting extends Department {\r\n  ...\r\n  console.log(\r\n      \"This is an Accounting department with reports: \",\r\n      this.reports\r\n    );\r\n  ...\r\n}\r\nconst myAcc = new Accounting(10, 100);\r\nmyAcc.describe();\r\n```\r\n\r\n> Very important note is that abstract classes can't be instantiated themselves. It is just a class which is there to be inhereted from, so that inheriting classes can be instatiated and it forces its child classes to provide full implementation (of describe method in our example)\r\n\r\n> In other words, abstract class is a class which cant be instantiated, it can only be extended.\r\n\r\n**Private constructors**\r\n\r\n> In object oriented programming we have something called `singleton pattern`. Singleton patter ensures that we always only have 1 single instance of a class. They are useful when we cant use static methods and you dont want to create multiple object from a given class (you only want to have exactly one object based on this class). For example if we know we only have exactly one Accounting Department we might want to only allow for creating one such object based on Accounting class.\r\n\r\n> In order to avoid being able to call `new Accounting()` multiple times, we can turn our construtor into private using a `private` keyword in front of it:\r\n\r\n```\r\nclass Accounting extends Department {\r\n  ...\r\n  private constructor() {\r\n    ...\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n> This will mean we cannot calls `new` on it:\r\n\r\n```\r\nconst myAcc = new Accounting()\r\n```\r\n\r\n> Our constructor is only accessible from the `inside` of the class. But how can we create an object out of it if we cannot call it from outside of the class? The answer are `static` methods which can be called on the class itself without instantiating them.\r\n\r\n> We can create a `static` property called for example `instance` (can be other name), which will be undefined initially, but once we instantiate the Accounting class, then we store that instance there. It will be our flag which denotes whether we already have an instance or not.\r\n\r\n> Furthermore, we will also add a static method called `getInstance` (can be other name), which will instanciate our class and have there the logic to check if we already have such a class.\r\n\r\n```\r\nclass Accounting extends Department {\r\n  private static instance: Accounting;\r\n\r\n  static getInstance() {\r\n    if (this.instance) {\r\n      return this.instance;\r\n    } else {\r\n      this.instance = new Accounting(10, 100);\r\n      return this.instance;\r\n    }\r\n  }\r\n\r\n  private constructor(id: number, size: number) {\r\n    super(\"Accounting\", id, size);\r\n    this.reports = [];\r\n    this.lastReport = this.reports[0];\r\n  }\r\n}\r\n```\r\n\r\n> Please note that in `static getInstance()` method `this` keyword refers to the `class` itself not to its instance. For nont-static methods it referes to the instance of the class.\r\n\r\n> Alternative would be that we use `Accounting` instead of this `keyword`:\r\n\r\n```\r\nclass Accounting extends Department {\r\n  ...\r\n  static getInstance() {\r\n    if (Accounting.instance) {\r\n      return Accounting.instance;\r\n    } else {\r\n      Accounting.instance = new Accounting(10, 100);\r\n      return Accounting.instance;\r\n    }\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n> Please note, that inside of the class we `can` use `new Accounting()` which means we can use the private constructor. Even if it is private it can be used from within the class.\r\n\r\n> How can we then create an object out of such class?\r\n\r\n```\r\nconst myAcc = Accounting.getInstance();\r\n```\r\n\r\n> If I call `Accounting.getInstance()` again I will not create two objects, I will get the same object referenced:\r\n\r\n```\r\nconst myAcc = Accounting.getInstance();\r\nconst myAcc2 = Accounting.getInstance();\r\nconst myAcc3 = Accounting.getInstance();\r\n```\r\n\r\n**Interfaces**\r\n\r\n> Interafces are a feature of Typescript, not vanilla Javascript. Interface describes how an object should look like. In order to create on we use keyword `interface` and then its name with capital letter (this is a convention, not a must):\r\n\r\n```\r\ninterface Person {\r\n  name: string;\r\n  age: number\r\n}\r\n```\r\n\r\n> Unlike `class`, `interafce` is not a blueprint. It is a custom `type` which defines which properties and their types it is going to have. It does not store concrete values like \"Addania\" and \"18\". If I try to initialize it with a concrete value, I would get an error:\r\n\r\n```\r\ninterface Person {\r\n  name: string = Mia;\r\n}\r\n```\r\n\r\n> We can also define types for methods in the interface:\r\n\r\n```\r\ninterface Person {\r\n  name: string;\r\n  age: number;\r\n  greet(phrase: string): void;\r\n}\r\n```\r\n\r\n> `greet` is our method, `phrase` is the parameter which needs to be provided to that method and `void` is its return type.\r\n\r\n> Why do we use interfaces? We can use it for type checking. If wecreate a let at the beginning maybe we dont want to give it a value, we just want to make sure later on it is assgined a proper object with a proper type. We can use our new interface as a custom type:\r\n\r\n```\r\nlet person: Person\r\n```\r\n\r\n> Then when we assign a value to person, it needs to follow the structure we defined in the interface:\r\n\r\n```\r\nperson = {\r\n  name: \"Addania\",\r\n  age: 18,\r\n  greet(phrase: string) {\r\n    console.log(phrase + \" \" + this.name);\r\n  },\r\n};\r\nperson.greet(\"Hi, my name is\");\r\n```\r\n\r\n> But WHY?? Why an interface and not just a regular type? All we need is to remove `interface` keyword and use `type keyword and we also need an equal sign.\r\n\r\n```\r\nPerson = {\r\n  name: string;\r\n  age: number;\r\n  greet(phrase: string): void;\r\n}\r\n```\r\n\r\n> This will also work! We can use them interchangeably. But interafce and a type are not the same. And there are differences.\r\n\r\n> `Interfaces` can only be used to describe an object! No other type. `Types` are more generic and we can store any type there: union type, function type, etc. `Type` is more flexible, but `interface` is clearer that conveys the intention on defining an object.\r\n\r\n> With interface we can also implement an interface in the class! (Although we can also do it with the custom type). Interface then declares a contract which a class need to adhere to. For example:\r\n\r\n```\r\ninterface Greetable {\r\n  name: string;\r\n  greet(phrase: string): void;\r\n}\r\n```\r\n\r\n> Now how to define that a class should adhere to this contract (interface)? We use `implements` keyword.\r\n\r\n```\r\nclass Person implements Greetable {...}\r\n```\r\n\r\n> Class can implement multiple interfaces:\r\n\r\n```\r\nclass Person implements Greetable, Admirable {...}\r\n```\r\n\r\n> Whole code:\r\n\r\n```\r\ninterface Greetable {\r\n  name: string;\r\n  greet(phrase: string): void;\r\n}\r\n\r\nclass Person implements Greetable {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n  greet(phrase: string) {\r\n    console.log(phrase + \" \" + this.name);\r\n  }\r\n}\r\nconst queen = new Person(\"Mia\");\r\nqueen.greet(\"Your Majesty\");\r\n```\r\n\r\n> This class can also have more properties and more methods!\r\n\r\n```\r\nclass Person implements Greetable {\r\n  name: string;\r\n  age: number = 18;\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n  greet(phrase: string) {\r\n    console.log(phrase + \" \" + this.name);\r\n  }\r\n  print(){\r\n    console.log(\"Test run\")\r\n  }\r\n}\r\n```\r\n\r\n> Often what we want is to share interfaces between different classes, so that they have a common structure to adhere to, but each class can also have its specifics. Please note we still can inherit from such a class.\r\n\r\n> Interaface is a bit like an abstract class, but interface does not have any implementation details at all. Abstract classes (because they are classes) can also hld other implementation details (apart from the abstract method)\r\n\r\n> Terminology: Person is a class which implements Greetable interface\r\n\r\n> Why interfaces? We use them when we want to ensure and force that a class has a certain structures (like a greet method). We can then easily share functionalities among classes, and each class can then have its own implementation of that interface (methods and properties). It is especially useful when other parts of the code rely on that structure.\r\n\r\n> Private and public modifiers are not available in the interface. So this code will not work:\r\n\r\n```\r\ninterface Greetable {\r\n  private name: string;\r\n  public age: number;\r\n}\r\n```\r\n\r\n> But we can use `readonly` modifier to mark the property which can only be set once and is readonly thereafter:\r\n\r\n```\r\ninterface Greetable {\r\n  readonly name: string;\r\n}\r\n```\r\n\r\n> We can use readonly also on a type:\r\n\r\n```\r\ntype Greetable = {\r\n  readonly name: string;\r\n}\r\n```\r\n\r\n> Please note that if I use `readonly` in the `interface`, then I don't have to set readonly property inside of the `class`. And still, it will throw an error if I try to re-assign the value to the name.\r\n\r\n```\r\ninterface Greetable {\r\n  readonly name: string;\r\n}\r\nclass Person implements Greetable {\r\n  name: string;\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n}\r\nlet queen: Greetable\r\nqueen = new Person(\"Mia\");\r\nqueen.name = \"Adda\";\r\n```\r\n\r\n> In above code `queen.name = \"Adda\";` will throw an error.\r\n\r\n> We can also implement inheritance in interfaces. For example, we can have Named and Greetable as two separate interfaces and our class will extend both of them:\r\n\r\n```\r\ninterface Named {\r\n  name: string;\r\n}\r\ninterface Greetable {\r\n  greet(phrase: string): void;\r\n}\r\n\r\nclass Person implements Greetable, Named {\r\n  name: string;\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n  greet(phrase: string) {\r\n    console.log(phrase + \" \" + this.name);\r\n  }\r\n}\r\nlet queen: Greetable;\r\nqueen = new Person(\"Mia\");\r\nqueen.greet(\"Your Majesty\");\r\n```\r\n\r\n> Alternatively, perhaps we know that each Greetable object always need to have a name, then we could extend Greetable interface with Named interface, so that together they form a new interface which forces every Greetable object to have a greet method but also to have a name. How to do it? We can simply use extends keyword after the interface name.\r\n\r\n```\r\ninterface Named {\r\n  name: string;\r\n}\r\ninterface Greetable extends Named {\r\n  greet(phrase: string): void;\r\n}\r\n```\r\n\r\n> Our class then can only implement Greetable but it automatically also needs to have name property:\r\n\r\n```\r\nclass Person implements Greetable {...}\r\n```\r\n\r\n> We could also extend multiple interfaces:\r\n\r\n```\r\ninterface Named {\r\n  name: string;\r\n}\r\ninterface Greetable extends Named, AnotherInterface, CoolInterface {\r\n  greet(phrase: string): void;\r\n}\r\n```\r\n\r\n> For classes you can only inherit from one class! We cannot inherit from multiple classes! So you cannot do this:\r\n\r\n```\r\nclass Person extends Being, Human {...}\r\n```\r\n\r\n> Interfaces can also be used in order to define the structure of a function as a replacement of function types. Function types look like this:\r\n\r\n```\r\ntype Add = ( n1:number, n2:number ) => number\r\nlet add: Add;\r\nadd = (x: number, y: number) => {\r\n  return x+y\r\n}\r\n```\r\n\r\n> Interfaces define structure of objects and functions are objects. So defining a function with and interface we do the following:\r\n\r\n```\r\ninterface Add {\r\n  (n1:number, n2:number): number\r\n}\r\n```\r\n\r\n> This is similar how we would type a method in the class (except we dont have a name of the function, it is an anonymouse function in the interface function definition)\r\n\r\n> Optional properties in interfaces are denoted with a questionmark:\r\n\r\n```\r\ninterface Add {\r\n  name: string;\r\n  age?: number\r\n}\r\n```\r\n\r\n> We can also make methods optional:\r\n\r\n```\r\ninterface Add {\r\n  name: string;\r\n  age?: number\r\n  greet?(phrase: string): void\r\n}\r\n```\r\n\r\n> Just like we can make a property in the class optional:\r\n\r\n```\r\nclass Person {\r\n  name?: string\r\n  constructor(n?: string){\r\n    if(n){\r\n      this.name = n\r\n    }\r\n  }\r\n}\r\n\r\nconst Dave = new Person()\r\n```\r\n\r\n> Notice how we do not have the then pass any argument when instantiating the class `new Person()`. Alternatively, instead of a questionmark, we could provide the default value for n in the constructor:\r\n\r\n```\r\nconstructor(n: string = \"human\")\r\n```\r\n\r\n> Please note that optional property in interface and class are only loosly related. I can have an optional parameter in interface, but a required parameter in the class!\r\n\r\n> Optional parameters can also be in constructor or methods. If we have one, we can use questionmark to denote it or use a default value if that parameter is not provided\r\n\r\n> Now let's take a look at the js file and see how interfaces are compiled to js... The answer is... NOTHING! They are not compiled, they are completely absent. It is only typescript feature helping during development helping to write clearer code. No trace will be left in the production.\r\n\r\n> One last note: what is the difference between interface and the class: interfaces cant be instantiated and are not compiled to js. Classes can be instantiated and are compiled to js.\r\n","frontmatter":{"date":"2022-01-15","title":"Classes","category":"knowledge-base"},"fields":{"slug":"/Classes/"},"timeToRead":29,"html":"<p><img src=\"https://i.imgur.com/Kz6Bpsu.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<p><strong>Intro to object oriented programming</strong></p>\n<blockquote>\n<p>Object oriented programming uses objects which represent REAL LIFE entities in code</p>\n</blockquote>\n<blockquote>\n<p>Classes make it easier to reason about the code. For example, we can create a <code>ProductList</code> object which has <code>addProduct</code> &#x26; <code>removeProduct</code> method and we use it to fetch from server and render in browser a list of products. A product itself can also be an object on its own with a method to display details, add to cart method, etc. <code>ProductList</code> and <code>Product</code> objects are related.</p>\n</blockquote>\n<blockquote>\n<p>This is one way we can think about our application and split it into pieces that makes sense to us humans. In JS and TS such objects are supported but we also have <code>classes</code>.</p>\n</blockquote>\n<blockquote>\n<p>What is difference between an <code>object</code> and a <code>class</code>?</p>\n</blockquote>\n<blockquote>\n<p><code>Objects</code> are concrete things you work with in code. They are data structures we use to store data.</p>\n</blockquote>\n<blockquote>\n<p><code>Class</code> is blueprint for objects. It is a theoretical definition of an object. Class allows us to define how objects should look like, which data and methods they should hold, so that we can then easily build multiple objects based on such a class. Concrete objects which are based on a given class are called <code>instances</code> of a class. Object is an instance of a class if it is based on such a class. We can thus quickly replicate objects with same structure and methods.</p>\n</blockquote>\n<blockquote>\n<p>Classes exist to speed up creation of objects. What we used so far was literal notation of objects.</p>\n</blockquote>\n<p><strong>Objects</strong></p>\n<blockquote>\n<p>Objects can be created in two ways:</p>\n</blockquote>\n<ul>\n<li>as object literal: const a = {name: 'Pete'}</li>\n<li>as an instance of a class const a = new Person(\"Pete\")</li>\n</ul>\n<p><strong>Our first class</strong></p>\n<blockquote>\n<p>Classes are defined with a keyword <code>class</code> and names are by convention capitalized:</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n}\n</code></pre>\n<blockquote>\n<p>Class above has a field called <code>name</code>. Please note this is not the same as a <code>key - value</code> pair in objects. Field in a class only defines a name of a key which we want to have in an object which we will create based on the class. And here furthermore we defined the value type our key <code>name</code> will hold in the end.</p>\n</blockquote>\n<blockquote>\n<p>We can also set an initial value of our field with equal sign (but we dont have to do that, it is optional):</p>\n</blockquote>\n<pre><code>class Department {\n  name: string = \"DEFAULT\";\n}\n</code></pre>\n<p><strong>Methods</strong></p>\n<blockquote>\n<p>What we also can have in the class is a <strong>method</strong>. What are methods? They are simply <code>functions in objects</code>. We can define those functions our object will have (methods) in a class too.</p>\n</blockquote>\n<blockquote>\n<p>One of the default methods (function in object) is called <code>constructor</code>. It is a special function tied to this class and therefore tied to any object we create based on this class and is executed when the object is being created. It allows to do some initialization work for the object we are building.</p>\n</blockquote>\n<blockquote>\n<p><code>Constructor</code> function accepts arguments, such as below <code>n</code> and we can for example put this <code>n</code> in our field <code>name</code></p>\n</blockquote>\n<pre><code>class Department {\n    name: string;\n    constructor (n: string) {\n    this.name = n\n    }\n}\n</code></pre>\n<blockquote>\n<p>We get the value of the <code>n</code> when we are creating and instance of the class. This value will be passed there and constructor will initialize this <code>n</code> to be assigned to <code>name</code> field (<code>name</code> property) in our class.</p>\n</blockquote>\n<blockquote>\n<p>Please note that we need to access class fields with <code>this</code> keyword .</p>\n</blockquote>\n<blockquote>\n<p>Please also note that code below only says that we will have a field name, but it does not assign any value to it.</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n}\n</code></pre>\n<blockquote>\n<p>Our constructor function makes sure that when the instance of the class (object) is created it will pass provided <code>n</code> value and store it in our <code>name</code> field.</p>\n</blockquote>\n<p><strong>How to create an instance of the class</strong></p>\n<blockquote>\n<p>So we defined the blueprint (architectural design) of our object. And now how to bring it to life and create one example of that class (a house based on the design)?</p>\n</blockquote>\n<blockquote>\n<p>We use keyword <code>new</code> + name of the class + parenthesis:</p>\n</blockquote>\n<pre><code>new Deprtment()\n</code></pre>\n<blockquote>\n<p>This will create an <code>instance</code> of a Department class.</p>\n</blockquote>\n<blockquote>\n<p>But beware - when we initialize an instance of a class with <code>new Department()</code> its constructor is called and it expects <code>n</code> as an argument!</p>\n</blockquote>\n<blockquote>\n<p>This means we need to provide it else we get a TS error.</p>\n</blockquote>\n<pre><code>new Department(\"Marketing\")\n</code></pre>\n<blockquote>\n<p>We can then store our new instance of a class (object) to a variale and console log it for example:</p>\n</blockquote>\n<pre><code>const ourFirstClass = new Department(\"Marketing\");\n\nconsole.log(\"ourFirstClass\", ourFirstClass);\n</code></pre>\n<blockquote>\n<p>Result will look like this:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/GjKUh8l.png\" title=\"Photo by Addania\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Addania</em></p></p>\n<blockquote>\n<p>And this is a regular JS object! 🤯</p>\n</blockquote>\n<p><strong>Methods</strong></p>\n<blockquote>\n<p>Classes do not only have properties, but also methods - object functions.</p>\n</blockquote>\n<blockquote>\n<p>Special one is constructor which is triggered when we instantiate our class as <code>const accounting = new Department(\"Accounting\")</code>;</p>\n</blockquote>\n<blockquote>\n<p>In oder to add a method we just write its name, parenthesis and curly braces such as <code>describe</code> method as below:</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  constructor(n: string) {\n    this.name = n;\n  }\n  describe() {\n    console.log(\"Department: \" + name);\n  }\n}\nconst accounting = new Department(\"Accounting\");\nconst marketing = new Department(\"Marketing\");\naccounting.describe();\n</code></pre>\n<blockquote>\n<p>Or buidling something cooler:</p>\n</blockquote>\n<pre><code>class Character {\n  name: string;\n  level: number;\n  hp: number;\n\n  constructor(name: string, level: number, hp: number) {\n    this.name = name;\n    this.level = level;\n    this.hp = hp;\n  }\n  printWelcomeMessage() {\n    console.log(\"Welcome to the World of Warcraft, \" + this.name);\n    console.log(\n      \"As a level \" + this.level + \" character, you have \" + this.hp + \" hp\"\n    );\n  }\n}\n\nconst adda = new Character(\"Addania\", 1, 100);\nadda.printWelcomeMessage();\n</code></pre>\n<blockquote>\n<p>However there is a problem! <code>\"Department: \" + name</code> assumes that we have a const / variable called <code>name</code>.</p>\n</blockquote>\n<blockquote>\n<p>But the class method has only access to its own scope - code block of the describe method (so anything within curly braces), so we would need to have a variable called name in the method itself:</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  constructor(n: string) {\n    this.name = n;\n  }\n  describe() {\n    const greeting = \"HELLO\"\n    console.log(\"Department: \" + greeting);\n  }\n}\nconst accounting = new Department(\"Accounting\");\nconst marketing = new Department(\"Marketing\");\naccounting.describe();\n</code></pre>\n<blockquote>\n<p>Class method also has access to global variable above the class:</p>\n</blockquote>\n<pre><code>const global = \"I AM TOTALY GLOBAL\"\n\nclass Department {\n  name: string;\n  constructor(n: string) {\n    this.name = n;\n  }\n  describe() {\n\n    console.log(\"Department: \" + global);\n  }\n}\nconst accounting = new Department(\"Accounting\");\nconst marketing = new Department(\"Marketing\");\naccounting.describe();\n</code></pre>\n<blockquote>\n<p>Class method however, does not have access to properties (fields) within the class. So describe method cannot access <code>name</code> property. We will get an error: \"Cannot find name\"</p>\n</blockquote>\n<blockquote>\n<p>In order to give access to the class properties and other methods, we need to use a special keyword: <code>this</code>.</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  constructor(n: string) {\n    this.name = n;\n  }\n  describe() {\n    console.log(\"Department: \" + this.name);\n  }\n}\nconst accounting = new Department(\"Accounting\");\nconst marketing = new Department(\"Marketing\");\naccounting.describe();  // Department: Accounting\n</code></pre>\n<blockquote>\n<p><code>This</code> refers back to the CONCRETE INSTANCE of this class that was created. But there is a trick too. It does not refer to the class, but to its instance. So in above example <code>this</code> refers to the <code>accounting</code> object (which was based on Department class).</p>\n</blockquote>\n<blockquote>\n<p>Even more interestingly <code>this</code> refers to the place which called it. So <code>this</code> can be tricky. Let's demonstrate.</p>\n</blockquote>\n<blockquote>\n<p>We add another object which is declared as an object literal:</p>\n</blockquote>\n<pre><code>const accountingCopy = { describe: accounting.describe}\naccountingCopy.describe()\n</code></pre>\n<blockquote>\n<p>Console output will be: <code>Department: undefined</code></p>\n</blockquote>\n<blockquote>\n<p>Reason is that I created an object literal called accountingCopy which contains one property describe which is pointing to the describe method of accounting object. In other words our accountingCopy contains describe property which is passing the describe method from accounting object - we are not executing it at that point, it is <code>executed with accountingCopy.describe()</code>. When this function executes <code>this</code> will not refer to the accounting object where the method was part of originally and hence its name. It will refer to the thing which is responsible for calling this method. Resonsible for calling this method was <code>accountingCopy</code> exactly in this place:</p>\n</blockquote>\n<pre><code>accountingCopy.describe()\n</code></pre>\n<blockquote>\n<p>So <code>this</code> refers to accountingCopy and accountingCopy does not have any name property. Therefore we get undefined.</p>\n</blockquote>\n<blockquote>\n<p>This is something to keep in mind when working with classes. In order for compiler to yell at us when we assume that this refers to original method, we can improve our code:</p>\n</blockquote>\n<pre><code>describe(this: Department) {\n    console.log(\"Department: \" + this.name);\n  }\n</code></pre>\n<blockquote>\n<p>We can add <code>this</code> as a parameter to describe method which is of a type: Department. This is not a parameter per se. We can still call describe method without any parameter:</p>\n</blockquote>\n<pre><code>accounting.describe()\n</code></pre>\n<blockquote>\n<p>But it is understood by Typescript, in order to define what <code>this</code> refers to. And since we assign type <code>Department</code> we are saying that when describe is executed, <code>this</code> refers to the instance of the class <code>Department</code>. Which is at the end just an object of a type <code>Department</code>.</p>\n</blockquote>\n<blockquote>\n<p>Using this approach will then yield a typescript error if we try to use describe with a different object - our object literal accountingCopy which is not an instance of the class Department:</p>\n</blockquote>\n<pre><code>accountingCopy.describe()\n</code></pre>\n<blockquote>\n<p>Using <code>describe(this: Department){}</code> adds an extra safety check. We would get notified and we would need to fix this, for example by adding name property to our object literal: <code>accountingCopy</code></p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  constructor(n: string) {\n    this.name = n;\n  }\n  describe(this: Department) {\n    console.log(\"Department: \" + this.name);\n  }\n}\n\nconst accounting = new Department(\"Accounting\");\n\nconst accountingCopy = { name: \"Addy\", describe: accounting.describe };\n\naccountingCopy.describe();\n</code></pre>\n<p><strong>Private and public access</strong></p>\n<blockquote>\n<p>Imagine we have a method to add employees to our Department class:</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  employees: Array&#x3C;string> = [];\n\n  constructor(n: string) {\n    this.name = n;\n  }\n  addEmployee(employee: string) {\n    this.employees.push(employee);\n  }\n  printEmployees() {\n    console.log(\"Number of slaves: \", this.employees.length);\n    console.log(\"List of slaves: \", this.employees);\n  }\n}\nconst accounting = new Department(\"Accounting\");\naccounting.addEmployee(\"Pete\");\naccounting.addEmployee(\"Steve\");\naccounting.printEmployees();\n</code></pre>\n<blockquote>\n<p>Code above will console log, that we have 2 slaves and their names are Pete and Steve. Which is cool and we can add new slaves by using <code>accounting.addEmployee</code>.</p>\n</blockquote>\n<blockquote>\n<p>But we can also modify employees from outside of the class and by direct assignment:</p>\n</blockquote>\n<pre><code>accounting.employees[2] = \"Anna\"\n</code></pre>\n<blockquote>\n<p>Anna is an infiltrator and should not be on the list. But she is now! :( Our poor precious class was compromised! Now there are two ways we can manipulate with the property inside of our class. This may be desired behaviour but in larger applications this is typically not what we want. We tend to want to have one single way how to do things - one source of truth. Therefore <code>accounting.employees[2] = \"Anna\"</code> may not be the desired way how to change <s>employees</s> slaves list.</p>\n</blockquote>\n<blockquote>\n<p>More over maybe our <code>addEmployee</code> method does not ONLY add an employee but does more - like some validation, adding some default information about the employee atc. And if we had 2 ways of doing it, they might differ.</p>\n</blockquote>\n<blockquote>\n<p>In order to prevent such direct assignments from outside of the class, we can turn employees property (field) to a private property. How? Super ultra easy: add <code>private</code> keyword in front of a property or a method</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  private employees: Array&#x3C;string> = [];\n\n  constructor(n: string) {\n    this.name = n;\n  }\n  addEmployee(employee: string) {\n    this.employees.push(employee);\n  }\n  printEmployees() {\n    console.log(\"Number of slaves: \", this.employees.length);\n    console.log(\"List of slaves: \", this.employees);\n  }\n}\n</code></pre>\n<blockquote>\n<p>This means that emplyoees property is only accessible from <code>inside</code> of the Department class. Not from outside. Now we cant access employees like this: <code>accounting.employees[2] = \"Anna\"</code></p>\n</blockquote>\n<blockquote>\n<p><code>private</code> keyword is a modifier. We also have a <code>public</code> keyword, which is a default, so we do not have to add it. For example class name is public by default (because we did not set it to private):</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  ....\n}\n</code></pre>\n<blockquote>\n<p>But we could also write it like this (although it is redundant):</p>\n</blockquote>\n<pre><code>class Department {\n  public name: string;\n  ....\n}\n</code></pre>\n<p><strong>Shorthand initialization</strong></p>\n<blockquote>\n<p>Often we will have classes with many properties which need to be initialized when creating instance of the class:</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  id: number;\n  size: number;\n  employees: Array&#x3C;string> = [];\n\n  constructor(n: string, id: number, size: number) {\n    this.name = n;\n    this.id = id\n    this.size = size\n  }\n}\nconst accounting = new Department(\"Accounting\", 1, 500);\n</code></pre>\n<blockquote>\n<p>Please note that it is fine that we name parameters of constructor differently from the fields of the class. For example, the constructor uses <code>n</code> and then this is assigned to the field <code>name</code>.</p>\n</blockquote>\n<blockquote>\n<p>Defining the properties beneath the class and also initializing them all in the constructor is kind of tedious and double work. Typescript allows us to use <code>shorthand initialization</code> which looks like this:</p>\n</blockquote>\n<pre><code>class Department {\n  employees: Array&#x3C;string> = [];\n  constructor(private name: string, private id: number, private size: number) {}\n}\nconst accounting = new Department(\"Accounting\", 1, 500);\n</code></pre>\n<blockquote>\n<p>Please note two things.</p>\n</blockquote>\n<ul>\n<li>We cannot anymore have any random name of the variable, such as <code>n</code>. It needs to be <code>name</code>.</li>\n<li>We must use <code>private</code> or <code>public</code> keyword to define its access type. We cannot ommit <code>public</code>, though</li>\n</ul>\n<p><strong>Readonly modifier</strong></p>\n<blockquote>\n<p>What if some of our class fields should not change once they are initialized? In such a case we can use <code>readonly</code> modifier.</p>\n</blockquote>\n<pre><code>class Character {\n  name: string;\n  readonly id: number;\n\n  constructor(name: string, id: number) {\n    this.name = name;\n    this.id = id;\n  }\n}\nconst adda = new Character(\"Addania\", 1, 10, 100);\n</code></pre>\n<blockquote>\n<p>We can also use shorthand initialization and define the readonly in constructor:</p>\n</blockquote>\n<pre><code>class Character {\n  constructor(private name: string, private readonly id: number) {\n    ...\n  }\n}\nconst adda = new Character(\"Addania\", 1);\n</code></pre>\n<blockquote>\n<p>This means that we cannot later on change the value of the id:</p>\n</blockquote>\n<pre><code>class Character {\n  constructor(private name: string, private readonly id: number) {\n    console.log(\"name\", this.name);\n    console.log(\"id\", this.id);\n  }\n  changeId() {\n    this.id = 10; // Typescript error\n  }\n}\nconst adda = new Character(\"Addania\", 1);\nconsole.log(\"adda\", adda);\n</code></pre>\n<blockquote>\n<p>Please note that we cant change this property AFTER the initialization. If I still manipulate with the id in the constructure, this is still allowed. 🤔</p>\n</blockquote>\n<p><strong>Inheritance</strong></p>\n<blockquote>\n<p>As in examples above, we might have a Department class which has its name, id and list of employees. But for example IT department would also have list of administrators while Accounting department would have list of reports</p>\n</blockquote>\n<blockquote>\n<p>So in general we might have some fields and methods which are common for each department, but some which are specific to the concrete version of Department.</p>\n</blockquote>\n<blockquote>\n<p>Inheritance can help to build a new class which will be based on department but will be specific to IT Department:</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  id: number;\n  size: number;\n  employees: Array&#x3C;string> = [];\n\n  constructor(n: string, id: number, size: number) {\n    this.name = n;\n    this.id = id\n    this.size = size\n  }\n  print(){\n    console.log(\"We are ...\", this.name)\n  }\n}\n\nclass IT extends Department {\n\n}\n\nconst myIT = new IT(\"Developer Den\", 1, 3)\nmyIT.print()\n</code></pre>\n<blockquote>\n<p>You inherit with the <code>extends</code> keyword followed by the class from which we are inheriting. Please not that we can only inherit from one class. Now our IT department will have all the properites and methods from the Department, but will have some special ones.</p>\n</blockquote>\n<blockquote>\n<p>Please note that as long as the IT class is empty and does not have its own constructor, then the constructor of the parent class Department will be implemented. This also means that when we want to instantiate this IT class, then we need to pass all 3 arguments which constructor of the Department class needs: name, id and size. But to pass the name to our IT class is a bit weird, because we know it should be \"IT\". So how can we make sure we do not need to pass this information when we are creating our IT instance of the class?</p>\n</blockquote>\n<blockquote>\n<p>We can have our own constructor in the IT class. This IT constructor will only accept 2 arguments: id and size when we instantiate it and we will forward the \"Information Technology\" to the Department class which will consume it as a name.</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  id: number;\n  size: number;\n\n  constructor(n: string, id: number, size: number) {\n    this.name = n;\n    this.id = id;\n    this.size = size;\n  }\n}\n\nclass IT extends Department {\n  constructor(id: number, size: number) {\n    super(\"Information Technology\", id, size);\n  }\n}\n\nconst myIT = new IT(12, 20);\nconsole.log(\"myIT\", myIT);\n</code></pre>\n<blockquote>\n<p>Whenever we add our own constructor in a class which extends another class, then we need to call special <code>super()</code> function in the constructor. And we need to execute it also as a function. <code>super()</code> calls the constructor function of the parent class. And for that reason the super also takes the arguments of the parent class (from which we are inheriting). In our case: n (name), id and size.</p>\n</blockquote>\n<blockquote>\n<p>It is also super important that we call <code>super()</code> before we use <code>this</code> keyword in our constructor!</p>\n</blockquote>\n<blockquote>\n<p>Now how can we add our new <code>admins</code> property? We certainly do not want to forward it to the Department class, because this class does not know about admins. Admins are our secret agents, only for our IT department.</p>\n</blockquote>\n<pre><code>class IT extends Department {\n  constructor(id: number, size: number, public admins: Array&#x3C;string>) {\n    super(\"Information Technology\", id, size);\n  }\n}\n</code></pre>\n<blockquote>\n<p>Above is a shorthand and below is the longhand definition :></p>\n</blockquote>\n<pre><code>class IT extends Department {\n  admins: Array&#x3C;string>;\n  constructor(id: number, size: number, admins: Array&#x3C;string>) {\n    super(\"Information Technology\", id, size);\n    this.admins = admins;\n  }\n}\n</code></pre>\n<blockquote>\n<p>Then we need to list of admins when instantiating our IT class:</p>\n</blockquote>\n<pre><code>const myIT = new IT(12, 20, [\"Adda\"]);\n</code></pre>\n<blockquote>\n<p>Please also note, that if we have some method on our Department from which we extend, then also we can call those methods on our IT department. Such as <code>addEmployee()</code> or <code>print()</code></p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  id: number;\n  size: number;\n  private employees: Array&#x3C;string> = [];\n  constructor(n: string, id: number, size: number) {\n    this.name = n;\n    this.id = id;\n    this.size = size;\n  }\n  addEmployee(name: string) {\n    this.employees.push(name);\n  }\n  print() {\n    console.log(\"Welcome to ... \", this.name);\n    console.log(\"Please applaud to our employees: \", this.employees);\n  }\n}\nclass IT extends Department {\n  admins: Array&#x3C;string>;\n  constructor(id: number, size: number, admins: Array&#x3C;string>) {\n    super(\"Information Technology\", id, size);\n    this.admins = admins;\n  }\n}\nconst myIT = new IT(12, 20, [\"Adda\"]);\nconsole.log(\"myIT\", myIT);\nmyIT.addEmployee(\"Josh\");\nmyIT.print();\n</code></pre>\n<blockquote>\n<p>Moreover, you can have own methods on the new IT department</p>\n</blockquote>\n<pre><code>class IT extends Department {\n  admins: Array&#x3C;string>;\n  constructor(id: number, size: number, admins: Array&#x3C;string>) {\n    super(\"Information Technology\", id, size);\n    this.admins = admins;\n  }\n  execute(item: string) {\n    console.log(\"I am processing the \", item);\n  }\n}\n\nconst myIT = new IT(12, 20, [\"Adda\"]);\nmyIT.execute(\"payment\");\n</code></pre>\n<blockquote>\n<p>Now what if we want to have our addEmployees from parent class slightly modified? We could try somthing like this:</p>\n</blockquote>\n<pre><code>class IT extends Department {\n  admins: Array&#x3C;string>;\n  constructor(id: number, size: number, admins: Array&#x3C;string>) {\n    super(\"Information Technology\", id, size);\n    this.admins = admins;\n  }\n  addEmployee(name: string) {\n    if (name === \"Mia\"){\n      return\n    } else {\n      this.employees.push(name)\n    }\n  }\n}\n</code></pre>\n<blockquote>\n<p>But here we have a problem, because employees is private in our parent Department class. So we cant access it outside of that class. If employess would not be private, then we could do it and <code>addEmployee</code> from our IT class would override the one from the Department!</p>\n</blockquote>\n<blockquote>\n<p>Solution is that we can use <code>protected</code> keyword instead of <code>private</code>. <code>protected</code> allows property to be used in a class which inherits from the parent class. But it is not allowed to use it outside of these two classes.</p>\n</blockquote>\n<pre><code>class Department {\n  name: string;\n  id: number;\n  size: number;\n  protected employees: Array&#x3C;string> = [];\n  constructor(n: string, id: number, size: number) {\n    this.name = n;\n    this.id = id;\n    this.size = size;\n  }\n  addEmployee(name: string) {\n    this.employees.push(name);\n  }\n}\n\nclass IT extends Department {\n  admins: Array&#x3C;string>;\n  constructor(id: number, size: number, admins: Array&#x3C;string>) {\n    super(\"Information Technology\", id, size);\n    this.admins = admins;\n  }\n  addEmployee(name: string) {\n    if (name === \"Mia\") {\n      return;\n    }\n    this.employees.push(name);\n  }\n}\n\nconst myIT = new IT(12, 20, [\"Adda\"]);\nmyIT.addEmployee(\"Josh\");\nmyIT.addEmployee(\"Mia\");\n</code></pre>\n<p><strong>Getters and setters</strong></p>\n<blockquote>\n<p>Imagine we create ab Accounting department class which has a lastReport which is a private property:</p>\n</blockquote>\n<pre><code>class Accounting extends Department {\n  private lastReport: string;\n  reports: Array&#x3C;string>;\n\n  constructor(id: number, size: number) {\n    super(\"Accounting\", id, size);\n    this.reports = [];\n    this.lastReport = \"\";\n  }\n  addReport(name: string) {\n    this.reports.push(name);\n    this.lastReport = name;\n  }\n}\n\nconst myAcc = new Accounting(10, 100);\nmyAcc.addReport(\"rep1\");\nmyAcc.addReport(\"rep2\");\nconsole.log(\"myAcc\", myAcc);\n</code></pre>\n<blockquote>\n<p><code>lastReport</code> can only be accessible from within the class. We cannot access it outside with a <code>dot</code> notation (<code>myAcc.lastReport</code>). But what if we still want to make it accessible from outside, but in a controlled manner with some more complex logic? We can use a getter method in order to do so. To write a getter method we write keyword get and then name of the method. Please note that because it is a method we need parentheses and curly bracers. We also need to return something</p>\n</blockquote>\n<pre><code>get mostRecentReport () {\n  if (this.reports.length >0){\n    return this.lastReport\n  }else {\n    throw new Error(\"No report found\")\n  }\n}\n</code></pre>\n<blockquote>\n<p>How can we then access it? We access it as a <code>property</code>, not as a <code>method</code>! So we do not need parenthesis:</p>\n</blockquote>\n<pre><code>myAcc.mostRecentReport\n</code></pre>\n<blockquote>\n<p>Behind the scenes myAcc.mostRecentReport will execute that method even when accessed as property. But we do not call it as a method. We do not do this: <code>myAcc.mostRecentReport()</code> ❗</p>\n</blockquote>\n<blockquote>\n<p>Whole code then looks like this:</p>\n</blockquote>\n<pre><code>class Accounting extends Department {\n  private lastReport: string;\n  reports: Array&#x3C;string>;\n\n  get mostRecentReport() {\n    if (this.reports.length > 0) {\n      return this.lastReport;\n    } else {\n      throw new Error(\"No report found\");\n    }\n  }\n\n  constructor(id: number, size: number) {\n    super(\"Accounting\", id, size);\n    this.reports = [];\n    this.lastReport = this.reports[0];\n  }\n  addReport(name: string) {\n    this.reports.push(name);\n    this.lastReport = name;\n  }\n}\n\nconst myAcc = new Accounting(10, 100);\nmyAcc.addReport(\"rep1\");\nmyAcc.addReport(\"rep2\");\nconsole.log(\"what is my last report? \", myAcc.mostRecentReport);\nconsole.log(\"myAcc\", myAcc);\n</code></pre>\n<blockquote>\n<p>We can also define a setter method. This method will allow us to set some avlues from outside even for a private property like lastReport.</p>\n</blockquote>\n<blockquote>\n<p>In order to create a setter, we need a <code>set</code> keyword, then name of the setter method. This method then must take an argument. Then in the body, we can write any logic which will store this value.</p>\n</blockquote>\n<pre><code>set mostRecentReport(value: string){\n this.addReport(value)\n}\n</code></pre>\n<blockquote>\n<p>Above setter is an alternative to <code>addReport</code>. We can even re-use the <code>addReport</code> method. But on top of it, maybe we want to add some more logic to it.</p>\n</blockquote>\n<blockquote>\n<p>How to then use the setter? IZI:</p>\n</blockquote>\n<pre><code>myAcc.mostRecentReport = \"hahaaaa\";\n</code></pre>\n<blockquote>\n<p>Please note we cannot access it as a method: <code>myAcc.mostRecentReport(\"hahaaaa\")</code>. We access it as a property! Both getters and setters behave like properties, not methods.</p>\n</blockquote>\n<blockquote>\n<p>Whole code then looks like this:</p>\n</blockquote>\n<pre><code>class Accounting extends Department {\n  private lastReport: string;\n  reports: Array&#x3C;string>;\n\n  get mostRecentReport() {\n    if (this.reports.length > 0) {\n      return this.lastReport;\n    } else {\n      throw new Error(\"No report found\");\n    }\n  }\n\n  set mostRecentReport(value: string) {\n    this.addReport(value);\n  }\n\n  constructor(id: number, size: number) {\n    super(\"Accounting\", id, size);\n    this.reports = [];\n    this.lastReport = this.reports[0];\n  }\n  addReport(name: string) {\n    this.reports.push(name);\n    this.lastReport = name;\n  }\n}\n\nconst myAcc = new Accounting(10, 100);\nmyAcc.addReport(\"rep1\");\nmyAcc.addReport(\"rep2\");\nconsole.log(\"what is my last report? \", myAcc.mostRecentReport);\nmyAcc.mostRecentReport = \"hahaaaa\";\nconsole.log(\"what is my last report? \", myAcc.mostRecentReport);\nconsole.log(\"myAcc\", myAcc);\n</code></pre>\n<blockquote>\n<p>Getters and Setters encapsulate logic and add soem extra logic when we try to read and set some property.</p>\n</blockquote>\n<p><strong>Static properties and methods</strong></p>\n<blockquote>\n<p><code>Math</code> is a class in Javascript which allows you to access for example constant pi with <code>Math.PI</code> or many other cool features like <code>Math.round()</code>.</p>\n</blockquote>\n<blockquote>\n<p>Static methods and properties are called on the class itself. Not on its instance. So on <code>Department</code>, <code>Accounting</code> or <code>IT</code>. Not on <code>myAcc</code> or <code>myIT</code>. Use case could be that you want to store some globals in the class itself, but you want it to be also used outside.</p>\n</blockquote>\n<blockquote>\n<p>Let's create a method in Department class which will help create emlpoyees:</p>\n</blockquote>\n<pre><code>class Department {\n  ...\n  static createEmployee(name: string){\n    return { name: name}\n  }\n  ....\n}\nconst employee1 = Department.createEmployee(\"Adda\")\nconsole.log(\"emplyoee1\", employee1)\n</code></pre>\n<blockquote>\n<p>Likewise, we can also create a static property which can be called on a class itself without instantiating it:</p>\n</blockquote>\n<pre><code>class Department {\n  ...\n  static fiscalYear = 2022\n  ....\n}\nconsole.log(\"year\", Department.fiscalYear)\n</code></pre>\n<blockquote>\n<p>If I add static properties or methods to a class I cant access them from the non-static parts of the class. I wont be able to use them for example in constructor using <code>this</code> keyword:</p>\n</blockquote>\n<pre><code>class Department {\n  ...\n  static fiscalYear = 2022\n  static createEmployee(name: string){\n    return { name: name}\n  }\nconstructor (){\n  console.log(this.fiscalYear)\n}\n  ....\n}\n</code></pre>\n<blockquote>\n<p>Reason is <code>this</code> keyword refers to the instance of the class, not the class itself. Static is not available on the instance of the class. Whole idea of static is to use it on the class itself without instantiating it. They are detached from the instances of that class.</p>\n</blockquote>\n<blockquote>\n<p>In order to acceess statics from inside of the class we need to use them with the name of the class:</p>\n</blockquote>\n<pre><code>class Department {\n  ...\n  static fiscalYear = 2022\n  static createEmployee(name: string){\n    return { name: name}\n  }\nconstructor (){\n  console.log(Department.fiscalYear)\n}\n  ....\n}\n</code></pre>\n<p><strong>Abstract classes</strong></p>\n<blockquote>\n<p>Imagine we have a method like <code>describe</code>, which however cannot be generalized for all children, but depends on and is subject to the implementation of child classes. Then instead of providing a generic describe method on Department, we want to <code>enforce</code> that all our child classes implement their own describ method. We want to make sure that none of the children misses to implement it.</p>\n</blockquote>\n<blockquote>\n<p>To ensure it, we can define an abstact method on the Department which will then require each child to implement their own version of the method.</p>\n</blockquote>\n<pre><code>abstract class Department {\n  ...\n  abstract describe(): void;\n  ....\n}\n</code></pre>\n<blockquote>\n<p>Please note that we use <code>abstract</code> keyword in front of the method. Instead of curly braces we only define the return type.</p>\n</blockquote>\n<blockquote>\n<p>Please also note that if we have 1 or more abstract methods in our class, we also need to use abstract keyword in front of the entire class!</p>\n</blockquote>\n<blockquote>\n<p>Now that our Department is abstract, our IT and Accounting department will throw an error, because they dont have their own custom implementations of the describe. Let's implement them:</p>\n</blockquote>\n<pre><code>class IT extends Department {\n  ...\n  describe() {\n    console.log(\"This is an IT department with emplyoees: \", this.employees);\n  }\n  ...\n}\nconst myIT = new IT(12, 20, [\"Adda\"]);\nmyIT.describe();\n\nclass Accounting extends Department {\n  ...\n  console.log(\n      \"This is an Accounting department with reports: \",\n      this.reports\n    );\n  ...\n}\nconst myAcc = new Accounting(10, 100);\nmyAcc.describe();\n</code></pre>\n<blockquote>\n<p>Very important note is that abstract classes can't be instantiated themselves. It is just a class which is there to be inhereted from, so that inheriting classes can be instatiated and it forces its child classes to provide full implementation (of describe method in our example)</p>\n</blockquote>\n<blockquote>\n<p>In other words, abstract class is a class which cant be instantiated, it can only be extended.</p>\n</blockquote>\n<p><strong>Private constructors</strong></p>\n<blockquote>\n<p>In object oriented programming we have something called <code>singleton pattern</code>. Singleton patter ensures that we always only have 1 single instance of a class. They are useful when we cant use static methods and you dont want to create multiple object from a given class (you only want to have exactly one object based on this class). For example if we know we only have exactly one Accounting Department we might want to only allow for creating one such object based on Accounting class.</p>\n</blockquote>\n<blockquote>\n<p>In order to avoid being able to call <code>new Accounting()</code> multiple times, we can turn our construtor into private using a <code>private</code> keyword in front of it:</p>\n</blockquote>\n<pre><code>class Accounting extends Department {\n  ...\n  private constructor() {\n    ...\n  }\n  ...\n}\n</code></pre>\n<blockquote>\n<p>This will mean we cannot calls <code>new</code> on it:</p>\n</blockquote>\n<pre><code>const myAcc = new Accounting()\n</code></pre>\n<blockquote>\n<p>Our constructor is only accessible from the <code>inside</code> of the class. But how can we create an object out of it if we cannot call it from outside of the class? The answer are <code>static</code> methods which can be called on the class itself without instantiating them.</p>\n</blockquote>\n<blockquote>\n<p>We can create a <code>static</code> property called for example <code>instance</code> (can be other name), which will be undefined initially, but once we instantiate the Accounting class, then we store that instance there. It will be our flag which denotes whether we already have an instance or not.</p>\n</blockquote>\n<blockquote>\n<p>Furthermore, we will also add a static method called <code>getInstance</code> (can be other name), which will instanciate our class and have there the logic to check if we already have such a class.</p>\n</blockquote>\n<pre><code>class Accounting extends Department {\n  private static instance: Accounting;\n\n  static getInstance() {\n    if (this.instance) {\n      return this.instance;\n    } else {\n      this.instance = new Accounting(10, 100);\n      return this.instance;\n    }\n  }\n\n  private constructor(id: number, size: number) {\n    super(\"Accounting\", id, size);\n    this.reports = [];\n    this.lastReport = this.reports[0];\n  }\n}\n</code></pre>\n<blockquote>\n<p>Please note that in <code>static getInstance()</code> method <code>this</code> keyword refers to the <code>class</code> itself not to its instance. For nont-static methods it referes to the instance of the class.</p>\n</blockquote>\n<blockquote>\n<p>Alternative would be that we use <code>Accounting</code> instead of this <code>keyword</code>:</p>\n</blockquote>\n<pre><code>class Accounting extends Department {\n  ...\n  static getInstance() {\n    if (Accounting.instance) {\n      return Accounting.instance;\n    } else {\n      Accounting.instance = new Accounting(10, 100);\n      return Accounting.instance;\n    }\n  }\n  ...\n}\n</code></pre>\n<blockquote>\n<p>Please note, that inside of the class we <code>can</code> use <code>new Accounting()</code> which means we can use the private constructor. Even if it is private it can be used from within the class.</p>\n</blockquote>\n<blockquote>\n<p>How can we then create an object out of such class?</p>\n</blockquote>\n<pre><code>const myAcc = Accounting.getInstance();\n</code></pre>\n<blockquote>\n<p>If I call <code>Accounting.getInstance()</code> again I will not create two objects, I will get the same object referenced:</p>\n</blockquote>\n<pre><code>const myAcc = Accounting.getInstance();\nconst myAcc2 = Accounting.getInstance();\nconst myAcc3 = Accounting.getInstance();\n</code></pre>\n<p><strong>Interfaces</strong></p>\n<blockquote>\n<p>Interafces are a feature of Typescript, not vanilla Javascript. Interface describes how an object should look like. In order to create on we use keyword <code>interface</code> and then its name with capital letter (this is a convention, not a must):</p>\n</blockquote>\n<pre><code>interface Person {\n  name: string;\n  age: number\n}\n</code></pre>\n<blockquote>\n<p>Unlike <code>class</code>, <code>interafce</code> is not a blueprint. It is a custom <code>type</code> which defines which properties and their types it is going to have. It does not store concrete values like \"Addania\" and \"18\". If I try to initialize it with a concrete value, I would get an error:</p>\n</blockquote>\n<pre><code>interface Person {\n  name: string = Mia;\n}\n</code></pre>\n<blockquote>\n<p>We can also define types for methods in the interface:</p>\n</blockquote>\n<pre><code>interface Person {\n  name: string;\n  age: number;\n  greet(phrase: string): void;\n}\n</code></pre>\n<blockquote>\n<p><code>greet</code> is our method, <code>phrase</code> is the parameter which needs to be provided to that method and <code>void</code> is its return type.</p>\n</blockquote>\n<blockquote>\n<p>Why do we use interfaces? We can use it for type checking. If wecreate a let at the beginning maybe we dont want to give it a value, we just want to make sure later on it is assgined a proper object with a proper type. We can use our new interface as a custom type:</p>\n</blockquote>\n<pre><code>let person: Person\n</code></pre>\n<blockquote>\n<p>Then when we assign a value to person, it needs to follow the structure we defined in the interface:</p>\n</blockquote>\n<pre><code>person = {\n  name: \"Addania\",\n  age: 18,\n  greet(phrase: string) {\n    console.log(phrase + \" \" + this.name);\n  },\n};\nperson.greet(\"Hi, my name is\");\n</code></pre>\n<blockquote>\n<p>But WHY?? Why an interface and not just a regular type? All we need is to remove <code>interface</code> keyword and use `type keyword and we also need an equal sign.</p>\n</blockquote>\n<pre><code>Person = {\n  name: string;\n  age: number;\n  greet(phrase: string): void;\n}\n</code></pre>\n<blockquote>\n<p>This will also work! We can use them interchangeably. But interafce and a type are not the same. And there are differences.</p>\n</blockquote>\n<blockquote>\n<p><code>Interfaces</code> can only be used to describe an object! No other type. <code>Types</code> are more generic and we can store any type there: union type, function type, etc. <code>Type</code> is more flexible, but <code>interface</code> is clearer that conveys the intention on defining an object.</p>\n</blockquote>\n<blockquote>\n<p>With interface we can also implement an interface in the class! (Although we can also do it with the custom type). Interface then declares a contract which a class need to adhere to. For example:</p>\n</blockquote>\n<pre><code>interface Greetable {\n  name: string;\n  greet(phrase: string): void;\n}\n</code></pre>\n<blockquote>\n<p>Now how to define that a class should adhere to this contract (interface)? We use <code>implements</code> keyword.</p>\n</blockquote>\n<pre><code>class Person implements Greetable {...}\n</code></pre>\n<blockquote>\n<p>Class can implement multiple interfaces:</p>\n</blockquote>\n<pre><code>class Person implements Greetable, Admirable {...}\n</code></pre>\n<blockquote>\n<p>Whole code:</p>\n</blockquote>\n<pre><code>interface Greetable {\n  name: string;\n  greet(phrase: string): void;\n}\n\nclass Person implements Greetable {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n  greet(phrase: string) {\n    console.log(phrase + \" \" + this.name);\n  }\n}\nconst queen = new Person(\"Mia\");\nqueen.greet(\"Your Majesty\");\n</code></pre>\n<blockquote>\n<p>This class can also have more properties and more methods!</p>\n</blockquote>\n<pre><code>class Person implements Greetable {\n  name: string;\n  age: number = 18;\n  constructor(name: string) {\n    this.name = name;\n  }\n  greet(phrase: string) {\n    console.log(phrase + \" \" + this.name);\n  }\n  print(){\n    console.log(\"Test run\")\n  }\n}\n</code></pre>\n<blockquote>\n<p>Often what we want is to share interfaces between different classes, so that they have a common structure to adhere to, but each class can also have its specifics. Please note we still can inherit from such a class.</p>\n</blockquote>\n<blockquote>\n<p>Interaface is a bit like an abstract class, but interface does not have any implementation details at all. Abstract classes (because they are classes) can also hld other implementation details (apart from the abstract method)</p>\n</blockquote>\n<blockquote>\n<p>Terminology: Person is a class which implements Greetable interface</p>\n</blockquote>\n<blockquote>\n<p>Why interfaces? We use them when we want to ensure and force that a class has a certain structures (like a greet method). We can then easily share functionalities among classes, and each class can then have its own implementation of that interface (methods and properties). It is especially useful when other parts of the code rely on that structure.</p>\n</blockquote>\n<blockquote>\n<p>Private and public modifiers are not available in the interface. So this code will not work:</p>\n</blockquote>\n<pre><code>interface Greetable {\n  private name: string;\n  public age: number;\n}\n</code></pre>\n<blockquote>\n<p>But we can use <code>readonly</code> modifier to mark the property which can only be set once and is readonly thereafter:</p>\n</blockquote>\n<pre><code>interface Greetable {\n  readonly name: string;\n}\n</code></pre>\n<blockquote>\n<p>We can use readonly also on a type:</p>\n</blockquote>\n<pre><code>type Greetable = {\n  readonly name: string;\n}\n</code></pre>\n<blockquote>\n<p>Please note that if I use <code>readonly</code> in the <code>interface</code>, then I don't have to set readonly property inside of the <code>class</code>. And still, it will throw an error if I try to re-assign the value to the name.</p>\n</blockquote>\n<pre><code>interface Greetable {\n  readonly name: string;\n}\nclass Person implements Greetable {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\nlet queen: Greetable\nqueen = new Person(\"Mia\");\nqueen.name = \"Adda\";\n</code></pre>\n<blockquote>\n<p>In above code <code>queen.name = \"Adda\";</code> will throw an error.</p>\n</blockquote>\n<blockquote>\n<p>We can also implement inheritance in interfaces. For example, we can have Named and Greetable as two separate interfaces and our class will extend both of them:</p>\n</blockquote>\n<pre><code>interface Named {\n  name: string;\n}\ninterface Greetable {\n  greet(phrase: string): void;\n}\n\nclass Person implements Greetable, Named {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  greet(phrase: string) {\n    console.log(phrase + \" \" + this.name);\n  }\n}\nlet queen: Greetable;\nqueen = new Person(\"Mia\");\nqueen.greet(\"Your Majesty\");\n</code></pre>\n<blockquote>\n<p>Alternatively, perhaps we know that each Greetable object always need to have a name, then we could extend Greetable interface with Named interface, so that together they form a new interface which forces every Greetable object to have a greet method but also to have a name. How to do it? We can simply use extends keyword after the interface name.</p>\n</blockquote>\n<pre><code>interface Named {\n  name: string;\n}\ninterface Greetable extends Named {\n  greet(phrase: string): void;\n}\n</code></pre>\n<blockquote>\n<p>Our class then can only implement Greetable but it automatically also needs to have name property:</p>\n</blockquote>\n<pre><code>class Person implements Greetable {...}\n</code></pre>\n<blockquote>\n<p>We could also extend multiple interfaces:</p>\n</blockquote>\n<pre><code>interface Named {\n  name: string;\n}\ninterface Greetable extends Named, AnotherInterface, CoolInterface {\n  greet(phrase: string): void;\n}\n</code></pre>\n<blockquote>\n<p>For classes you can only inherit from one class! We cannot inherit from multiple classes! So you cannot do this:</p>\n</blockquote>\n<pre><code>class Person extends Being, Human {...}\n</code></pre>\n<blockquote>\n<p>Interfaces can also be used in order to define the structure of a function as a replacement of function types. Function types look like this:</p>\n</blockquote>\n<pre><code>type Add = ( n1:number, n2:number ) => number\nlet add: Add;\nadd = (x: number, y: number) => {\n  return x+y\n}\n</code></pre>\n<blockquote>\n<p>Interfaces define structure of objects and functions are objects. So defining a function with and interface we do the following:</p>\n</blockquote>\n<pre><code>interface Add {\n  (n1:number, n2:number): number\n}\n</code></pre>\n<blockquote>\n<p>This is similar how we would type a method in the class (except we dont have a name of the function, it is an anonymouse function in the interface function definition)</p>\n</blockquote>\n<blockquote>\n<p>Optional properties in interfaces are denoted with a questionmark:</p>\n</blockquote>\n<pre><code>interface Add {\n  name: string;\n  age?: number\n}\n</code></pre>\n<blockquote>\n<p>We can also make methods optional:</p>\n</blockquote>\n<pre><code>interface Add {\n  name: string;\n  age?: number\n  greet?(phrase: string): void\n}\n</code></pre>\n<blockquote>\n<p>Just like we can make a property in the class optional:</p>\n</blockquote>\n<pre><code>class Person {\n  name?: string\n  constructor(n?: string){\n    if(n){\n      this.name = n\n    }\n  }\n}\n\nconst Dave = new Person()\n</code></pre>\n<blockquote>\n<p>Notice how we do not have the then pass any argument when instantiating the class <code>new Person()</code>. Alternatively, instead of a questionmark, we could provide the default value for n in the constructor:</p>\n</blockquote>\n<pre><code>constructor(n: string = \"human\")\n</code></pre>\n<blockquote>\n<p>Please note that optional property in interface and class are only loosly related. I can have an optional parameter in interface, but a required parameter in the class!</p>\n</blockquote>\n<blockquote>\n<p>Optional parameters can also be in constructor or methods. If we have one, we can use questionmark to denote it or use a default value if that parameter is not provided</p>\n</blockquote>\n<blockquote>\n<p>Now let's take a look at the js file and see how interfaces are compiled to js... The answer is... NOTHING! They are not compiled, they are completely absent. It is only typescript feature helping during development helping to write clearer code. No trace will be left in the production.</p>\n</blockquote>\n<blockquote>\n<p>One last note: what is the difference between interface and the class: interfaces cant be instantiated and are not compiled to js. Classes can be instantiated and are compiled to js.</p>\n</blockquote>"}},{"node":{"id":"70655cbc-5cf4-5c25-a70e-ee56cb5cae5a","excerpt":"EVERYTHING'S AWESOOOOOOOOOOOOOOOOOOOOOME Yes, now what is FONT awesome? It is library which provides lots of cool icons - many of them for…","rawMarkdownBody":"\r\n`youtube: https://www.youtube.com/watch?v=9cQgQIMlwWw&ab_channel=MarcDonis`\r\n\r\n> EVERYTHING'S AWESOOOOOOOOOOOOOOOOOOOOOME\r\n\r\n> Yes, now what is `FONT` awesome? It is library which provides lots of cool icons - many of them for free <3 We love free..\r\n\r\n> How to work with it?\r\n\r\n> First of all you need to install font awesome from your terminal to the root of your project:\r\n\r\n```\r\nnpm i --save @fortawesome/fontawesome-svg-core\r\nnpm install --save @fortawesome/free-solid-svg-icons\r\nnpm install --save @fortawesome/react-fontawesome\r\n```\r\n\r\n> Then you need the website, ah, right: https://fontawesome.com/\r\n\r\n> Then you need to search for you cool new icon which you want to use in your React app: https://fontawesome.com/icons/optin-monster?style=brands\r\n\r\n> These icons come from different groups:\r\n\r\n- free-brands\r\n- free-solid\r\n\r\n> For each icon you need to import FontAwesomeIcon component:\r\n\r\n```\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n```\r\n\r\n> Then you need to import the icon itself based on its name:\r\n\r\n```\r\nimport { faOptinMonster } from \"@fortawesome/free-brands-svg-icons\";\r\n```\r\n\r\n> Notice how on the font awesome website the optin-monster icon is categorized in free-brands category, which is then reflected in the import url\r\n\r\n> Notice also how to use the names of the icons when importing them as components: `faOptinMonster`\r\n\r\n> Then you use your component in the folowing way:\r\n\r\n```\r\n<FontAwesomeIcon icon={faOptinMonster} color=\"turquoise\" size=\"6x\" />\r\n```\r\n\r\n> You can use `color` prop to set its color or `size` prop which has values: \"sm\" or \"lg\" (for small and large). Or use can use something like 6 times the font size - with \"6x\"\r\n\r\n> If your icon is categorized amobg solids, then the import would look like this:\r\n\r\n```\r\nimport { faKiwiBird } from \"@fortawesome/free-solid-svg-icons\";\r\n```\r\n\r\n> Everything else is the same:\r\n\r\n```\r\n<FontAwesomeIcon icon={faKiwiBird} color=\"green\" size=\"6x\" />\r\n```\r\n\r\n> Dont forget that you need to import this in both cases:\r\n\r\n```\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n```\r\n\r\n> Reference: https://fontawesome.com/how-to-use/on-the-web/using-with/react\r\n","frontmatter":{"date":"2021-03-11","title":"Font Awesome","category":"knowledge-base"},"fields":{"slug":"/Font_Awesome/"},"timeToRead":2,"html":"<p>\n        <div class=\"embedVideo-container\">\n            <iframe\n              title=\"\"\n              width=\"800\"\n              height=\"400\"\n              src=\"https://www.youtube-nocookie.com/embed/9cQgQIMlwWw?rel=0\"\n              class=\"embedVideo-iframe\"\n              style=\"border:0\"\n              \n              \n              loading=\"lazy\"\n              allowfullscreen\n\t      sandbox=\"allow-same-origin allow-scripts allow-popups\"\n            ></iframe>\n        </div></p>\n<blockquote>\n<p>EVERYTHING'S AWESOOOOOOOOOOOOOOOOOOOOOME</p>\n</blockquote>\n<blockquote>\n<p>Yes, now what is <code>FONT</code> awesome? It is library which provides lots of cool icons - many of them for free &#x3C;3 We love free..</p>\n</blockquote>\n<blockquote>\n<p>How to work with it?</p>\n</blockquote>\n<blockquote>\n<p>First of all you need to install font awesome from your terminal to the root of your project:</p>\n</blockquote>\n<pre><code>npm i --save @fortawesome/fontawesome-svg-core\nnpm install --save @fortawesome/free-solid-svg-icons\nnpm install --save @fortawesome/react-fontawesome\n</code></pre>\n<blockquote>\n<p>Then you need the website, ah, right: <a href=\"https://fontawesome.com/\">https://fontawesome.com/</a></p>\n</blockquote>\n<blockquote>\n<p>Then you need to search for you cool new icon which you want to use in your React app: <a href=\"https://fontawesome.com/icons/optin-monster?style=brands\">https://fontawesome.com/icons/optin-monster?style=brands</a></p>\n</blockquote>\n<blockquote>\n<p>These icons come from different groups:</p>\n</blockquote>\n<ul>\n<li>free-brands</li>\n<li>free-solid</li>\n</ul>\n<blockquote>\n<p>For each icon you need to import FontAwesomeIcon component:</p>\n</blockquote>\n<pre><code>import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n</code></pre>\n<blockquote>\n<p>Then you need to import the icon itself based on its name:</p>\n</blockquote>\n<pre><code>import { faOptinMonster } from \"@fortawesome/free-brands-svg-icons\";\n</code></pre>\n<blockquote>\n<p>Notice how on the font awesome website the optin-monster icon is categorized in free-brands category, which is then reflected in the import url</p>\n</blockquote>\n<blockquote>\n<p>Notice also how to use the names of the icons when importing them as components: <code>faOptinMonster</code></p>\n</blockquote>\n<blockquote>\n<p>Then you use your component in the folowing way:</p>\n</blockquote>\n<pre><code>&#x3C;FontAwesomeIcon icon={faOptinMonster} color=\"turquoise\" size=\"6x\" />\n</code></pre>\n<blockquote>\n<p>You can use <code>color</code> prop to set its color or <code>size</code> prop which has values: \"sm\" or \"lg\" (for small and large). Or use can use something like 6 times the font size - with \"6x\"</p>\n</blockquote>\n<blockquote>\n<p>If your icon is categorized amobg solids, then the import would look like this:</p>\n</blockquote>\n<pre><code>import { faKiwiBird } from \"@fortawesome/free-solid-svg-icons\";\n</code></pre>\n<blockquote>\n<p>Everything else is the same:</p>\n</blockquote>\n<pre><code>&#x3C;FontAwesomeIcon icon={faKiwiBird} color=\"green\" size=\"6x\" />\n</code></pre>\n<blockquote>\n<p>Dont forget that you need to import this in both cases:</p>\n</blockquote>\n<pre><code>import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n</code></pre>\n<blockquote>\n<p>Reference: <a href=\"https://fontawesome.com/how-to-use/on-the-web/using-with/react\">https://fontawesome.com/how-to-use/on-the-web/using-with/react</a></p>\n</blockquote>"}},{"node":{"id":"4491fb92-146e-5754-aa7a-fdf21c9a28f3","excerpt":"React is mainly used to build single page application. But wait, single? Who wants to be single? :) We want more pages, right? Then how to…","rawMarkdownBody":"\r\n![](https://i.imgur.com/axjkYSi.jpg \"Photo by Traversy Media from Pexels\")\r\n\r\n> React is mainly used to build single page application. But wait, single? Who wants to be `single`? :) We want more pages, right? Then how to do it in React? How can we redirect to `home`, `about` or `portfolio` page?\r\n\r\n> Great solution for that is `react-router-dom`\r\n\r\n> Install react router dom from terminal:\r\n\r\n```\r\nnpm install --save react-router-dom\r\n```\r\n\r\n> If you use create react app, then you will need to go to `index.js` and import BrowserRouter and then wrap your `App` component with it\r\n\r\n```\r\n...\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n```\r\n\r\n> Alternatively, you can go to `App.js` and wrap everything the `App` component renders in `BrowserRouter`\r\n\r\n```\r\n...\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n     ...\r\n    </BrowserRouter>\r\n  );\r\n}\r\n```\r\n\r\n> Then we will need to create some components like `Home`, `About` or `Portfolio`\r\n\r\n> Then in the `App.js` we will import them together with the `Route` and `Switch` from react-router-dom\r\n\r\n```\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { Home } from \"./components/Home\";\r\nimport { About } from \"./components/About\";\r\nimport { Portfolio } from \"./components/Portfolio\";\r\nimport { NavigationBar } from \"./components/NavigationBar\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavigationBar />\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} exact />\r\n        <Route path=\"/about\" component={About} />\r\n        <Route path=\"/portfolio\" component={Portfolio} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n> Notice how we use Switch around Route components and how Route components will be passed to Home, About and Portfolio components in the component prop.\r\n\r\n> Please note that abother way to write this:\r\n\r\n```\r\n<Switch>\r\n  <Route exact path=\"/\">\r\n    <Home />\r\n  </Route>\r\n  <Route path=\"/about\">\r\n    <About />\r\n  </Route>\r\n</Switch>\r\n```\r\n\r\n> This however, does not render anything per se. We still need to have some component like NavigationBar, which will actually display the navigation items with clickable link, which will then redirect us to the sub-pages.\r\n\r\n> How does the `NavigationBar` component look like?\r\n\r\n> It imports `Link` component from react-router-dom\r\n\r\n```\r\n...\r\nimport { Link } from \"react-router-dom\";\r\nexport const NavigationBar = () => {\r\n  return (\r\n    <div>\r\n      <Link to=\"/\">Home</Link>\r\n      <span> || </span>\r\n      <Link to=\"/about\">About</Link>\r\n      <span> || </span>\r\n      <Link to=\"/portfolio\">About</portfolio>\r\n    </div>\r\n  );\r\n};\r\n```\r\n","frontmatter":{"date":"2021-03-11","title":"React Router Dom","category":"knowledge-base"},"fields":{"slug":"/React_Router/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/axjkYSi.jpg\" title=\"Photo by Traversy Media from Pexels\"></p>\n<blockquote>\n<p>React is mainly used to build single page application. But wait, single? Who wants to be <code>single</code>? :) We want more pages, right? Then how to do it in React? How can we redirect to <code>home</code>, <code>about</code> or <code>portfolio</code> page?</p>\n</blockquote>\n<blockquote>\n<p>Great solution for that is <code>react-router-dom</code></p>\n</blockquote>\n<blockquote>\n<p>Install react router dom from terminal:</p>\n</blockquote>\n<pre><code>npm install --save react-router-dom\n</code></pre>\n<blockquote>\n<p>If you use create react app, then you will need to go to <code>index.js</code> and import BrowserRouter and then wrap your <code>App</code> component with it</p>\n</blockquote>\n<pre><code>...\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  &#x3C;BrowserRouter>\n    &#x3C;App />\n  &#x3C;/BrowserRouter>,\n  document.getElementById(\"root\")\n);\n</code></pre>\n<blockquote>\n<p>Alternatively, you can go to <code>App.js</code> and wrap everything the <code>App</code> component renders in <code>BrowserRouter</code></p>\n</blockquote>\n<pre><code>...\nimport { BrowserRouter } from \"react-router-dom\";\nfunction App() {\n  return (\n    &#x3C;BrowserRouter>\n     ...\n    &#x3C;/BrowserRouter>\n  );\n}\n</code></pre>\n<blockquote>\n<p>Then we will need to create some components like <code>Home</code>, <code>About</code> or <code>Portfolio</code></p>\n</blockquote>\n<blockquote>\n<p>Then in the <code>App.js</code> we will import them together with the <code>Route</code> and <code>Switch</code> from react-router-dom</p>\n</blockquote>\n<pre><code>import { Route, Switch } from \"react-router-dom\";\nimport { Home } from \"./components/Home\";\nimport { About } from \"./components/About\";\nimport { Portfolio } from \"./components/Portfolio\";\nimport { NavigationBar } from \"./components/NavigationBar\";\nfunction App() {\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;NavigationBar />\n      &#x3C;Switch>\n        &#x3C;Route path=\"/\" component={Home} exact />\n        &#x3C;Route path=\"/about\" component={About} />\n        &#x3C;Route path=\"/portfolio\" component={Portfolio} />\n      &#x3C;/Switch>\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<blockquote>\n<p>Notice how we use Switch around Route components and how Route components will be passed to Home, About and Portfolio components in the component prop.</p>\n</blockquote>\n<blockquote>\n<p>Please note that abother way to write this:</p>\n</blockquote>\n<pre><code>&#x3C;Switch>\n  &#x3C;Route exact path=\"/\">\n    &#x3C;Home />\n  &#x3C;/Route>\n  &#x3C;Route path=\"/about\">\n    &#x3C;About />\n  &#x3C;/Route>\n&#x3C;/Switch>\n</code></pre>\n<blockquote>\n<p>This however, does not render anything per se. We still need to have some component like NavigationBar, which will actually display the navigation items with clickable link, which will then redirect us to the sub-pages.</p>\n</blockquote>\n<blockquote>\n<p>How does the <code>NavigationBar</code> component look like?</p>\n</blockquote>\n<blockquote>\n<p>It imports <code>Link</code> component from react-router-dom</p>\n</blockquote>\n<pre><code>...\nimport { Link } from \"react-router-dom\";\nexport const NavigationBar = () => {\n  return (\n    &#x3C;div>\n      &#x3C;Link to=\"/\">Home&#x3C;/Link>\n      &#x3C;span> || &#x3C;/span>\n      &#x3C;Link to=\"/about\">About&#x3C;/Link>\n      &#x3C;span> || &#x3C;/span>\n      &#x3C;Link to=\"/portfolio\">About&#x3C;/portfolio>\n    &#x3C;/div>\n  );\n};\n</code></pre>"}},{"node":{"id":"5b4951a7-d199-50be-b176-0cc3e092b701","excerpt":"What actually are iframes? An iframe is an embedded HTML document within the main HTML document. It's a page within a page.","rawMarkdownBody":"\n\n![](https://i.imgur.com/FVmXe5N.jpg \"Photo by Tirachard Kumtanom from Pexels\")\n\n\n> What actually are iframes?\n\n> An iframe is an embedded HTML document within the main HTML document. It's a page within a page.","frontmatter":{"date":"2021-01-15","title":"HTML","category":"knowledge-base"},"fields":{"slug":"/Iframe/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/FVmXe5N.jpg\" title=\"Photo by Tirachard Kumtanom from Pexels\"></p>\n<blockquote>\n<p>What actually are iframes?</p>\n</blockquote>\n<blockquote>\n<p>An iframe is an embedded HTML document within the main HTML document. It's a page within a page.</p>\n</blockquote>"}},{"node":{"id":"e1e2475a-79fa-5fc4-b2ab-94fd97c2d482","excerpt":"Vue is a Javascript framework, like React or Angluar. It is very lean and fast framework. Getting started, we will need to visit the…","rawMarkdownBody":"\r\n![](https://i.imgur.com/YRAOVo0.jpg \"React Bootstrap Logo\")\r\n\r\n>Vue is a Javascript framework, like React or Angluar. It is very lean and fast framework.\r\n\r\n>Getting started, we will need to visit the official Vue documentation: https://vuejs.org/v2/guide/installation.html\r\n\r\n>Look at the #CDN part which provides scripts with which you can import Vue to the HTML.\r\n\r\n>Lets play around with Vue in browser in jsfiddle: https://jsfiddle.net/\r\n\r\n>Lets import Vue scripts in the HTML section and lets add some div and an empty paragraph\r\n``` es6\r\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\r\n<div id=\"app\">\r\n  <p></p>\r\n</div>\r\n\r\n```\r\n\r\n>Now, how can we control this HTML with the Vue?\r\n\r\n>This scripts import gives me one very important object which Vue framework gives me and that is: `Vue object`\r\n\r\n>Let's create a new instance of that Vue object in js file:\r\n``` es6\r\nnew Vue()\r\n```\r\n>These Vue instances are core of each Vue applications. They have one job, they control their own templates (HTML templates) of code which they render to the screen.\r\n\r\n>What we need to pass in as an argument to the instance is and object which will have 2 keys: el and data\r\n``` es6\r\nnew Vue(\r\n    {\r\n        el: '#app',\r\n        data: { title: \"Hi\"}\r\n    }\r\n)\r\n```\r\n\r\n>`el` refers to the HTML element which we want to choose and where our `data` are going to be available. Let's assume we want to chose the div with id \"app\". We pass a string to the `el` which works like a CSS selector, where `#app` will mean we are chosing an element with id of app. We we type `.app` we will choose element of a class app.\r\n\r\n>`data` needs an object which holds all our data which will be used in the HTML. For example title with the string `Hi`.\r\n\r\n>Now how can we use that title in the HTML? We can use double curly braces which is a special syntax which Vue reckognizes.\r\n``` es6\r\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\r\n<div id=\"app\">\r\n  <p>{{ title }}</p>\r\n</div>\r\n```\r\n>The output will be `Hi` in the browser. This is outputed through the Vue js  which now controls this template.\r\n\r\n\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n>\r\n``` es6\r\n\r\n```\r\n\r\n>\r\n``` es6\r\n\r\n```","frontmatter":{"date":"2020-08-24","title":"Vue","category":"knowledge-base"},"fields":{"slug":"/Vue/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/YRAOVo0.jpg\" title=\"React Bootstrap Logo\"></p>\n<blockquote>\n<p>Vue is a Javascript framework, like React or Angluar. It is very lean and fast framework.</p>\n</blockquote>\n<blockquote>\n<p>Getting started, we will need to visit the official Vue documentation: <a href=\"https://vuejs.org/v2/guide/installation.html\">https://vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n<blockquote>\n<p>Look at the #CDN part which provides scripts with which you can import Vue to the HTML.</p>\n</blockquote>\n<blockquote>\n<p>Lets play around with Vue in browser in jsfiddle: <a href=\"https://jsfiddle.net/\">https://jsfiddle.net/</a></p>\n</blockquote>\n<blockquote>\n<p>Lets import Vue scripts in the HTML section and lets add some div and an empty paragraph</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">&#x3C;/script>\n&#x3C;div id=\"app\">\n  &#x3C;p>&#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<blockquote>\n<p>Now, how can we control this HTML with the Vue?</p>\n</blockquote>\n<blockquote>\n<p>This scripts import gives me one very important object which Vue framework gives me and that is: <code>Vue object</code></p>\n</blockquote>\n<blockquote>\n<p>Let's create a new instance of that Vue object in js file:</p>\n</blockquote>\n<pre><code class=\"language-es6\">new Vue()\n</code></pre>\n<blockquote>\n<p>These Vue instances are core of each Vue applications. They have one job, they control their own templates (HTML templates) of code which they render to the screen.</p>\n</blockquote>\n<blockquote>\n<p>What we need to pass in as an argument to the instance is and object which will have 2 keys: el and data</p>\n</blockquote>\n<pre><code class=\"language-es6\">new Vue(\n    {\n        el: '#app',\n        data: { title: \"Hi\"}\n    }\n)\n</code></pre>\n<blockquote>\n<p><code>el</code> refers to the HTML element which we want to choose and where our <code>data</code> are going to be available. Let's assume we want to chose the div with id \"app\". We pass a string to the <code>el</code> which works like a CSS selector, where <code>#app</code> will mean we are chosing an element with id of app. We we type <code>.app</code> we will choose element of a class app.</p>\n</blockquote>\n<blockquote>\n<p><code>data</code> needs an object which holds all our data which will be used in the HTML. For example title with the string <code>Hi</code>.</p>\n</blockquote>\n<blockquote>\n<p>Now how can we use that title in the HTML? We can use double curly braces which is a special syntax which Vue reckognizes.</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">&#x3C;/script>\n&#x3C;div id=\"app\">\n  &#x3C;p>{{ title }}&#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<blockquote>\n<p>The output will be <code>Hi</code> in the browser. This is outputed through the Vue js  which now controls this template.</p>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>"}},{"node":{"id":"ca887605-49cf-50a7-84dd-1b5bd417853f","excerpt":"This article is basically my notes following an amazing React course by Maximilian Schwarzmüller which I would recommend to everyone who…","rawMarkdownBody":"\r\n![](https://i.imgur.com/jX7rNIv.jpg \"Photo by PhotoMIX Ltd. from Pexels\")\r\n\r\nThis article is basically my notes following an amazing [React]() course by Maximilian Schwarzmüller which I would recommend to everyone who wants to learn React.\r\n\r\n**Basics**\r\n> Javascript is a programming language that can be executed in browsers.\r\n\r\n> Advantage of Javascript is that web applications written in Javascript are fast and behave like mobile apps - user do not need to wait for page reload\r\n\r\n> React is a Javascript library which makes it easy to build interactive and fast Javascrip driven web applications and user interfaces.\r\n\r\n> Because React apps are written in Javascript, they can run in users's browser. They do NOT run on server. Using users's browser makes it way faster! Things happen instantly, we do not have to wait for server response to get the new page rendered.\r\n\r\n> User interface in this context means what user sees and React is all about building components to use those.\r\n\r\n> Component is a contained piece of code which can be re-used multiple times\r\n\r\n>We do not need to rebuild whole page every time. Web page will consist of tiny little components and only those that change will be refreshed.\r\n\r\n>Components keep our code manageable\r\n\r\n>If we want to change the headline component, we can change it in one place, instead of 20 places.\r\n\r\n>React componenets can be thought as custom HTML elements\r\n\r\n>In order to use react we need to import react to our application. We actually need to import react and react-dom\r\n\r\n>React imports a library which hold entire logic of building components\r\n\r\n>React DOM imports possibility to insert our react to an actual DOM.\r\n\r\n>React uses next generation Javascript syntax, such as JSX and for that we need a special compiler called Babel which will make sure our code can run in the browser! Basicaly we write code with all fancy features and Babel then ships to browser, so that it can run\r\n\r\n**Pure HTML and CSS compared to React**\r\n> We can write a code like this:\r\n\r\nHTML:\r\n```\r\n<div class=\"person\">\r\n  <h1>Addania</h1>\r\n  <p>Nick: Adda</p>\r\n  <p>Location: Meadows</p>\r\n</div>\r\n<div class=\"person\">\r\n  <h1>Sam</h1>\r\n  <p>Nick: Nam</p>\r\n  <p>Location: Gym</p>\r\n</div>\r\n<div class=\"person\">\r\n  <h1>Ditulienka</h1>\r\n  <p>Nick: Slniecko</p>\r\n  <p>Location: Cafe</p>\r\n</div>\r\n<div class=\"person\">\r\n  <h1>Lubo</h1>\r\n  <p>Nick: Captain</p>\r\n  <p>Location: Satellite</p>\r\n</div>\r\n```\r\n\r\nCSS:\r\n```\r\n.person {\r\n  display: inline-block;\r\n  margin: 10px;\r\n  border: 1px solid #eee;\r\n  box-shadow: 0 2px 2px #ccc;\r\n  width: 200px;\r\n  padding: 10px;  \r\n}\r\n```\r\n\r\n![](https://i.imgur.com/33tZHVA.png)\r\n\r\n> With react we can write a component which looks like a function and returns what looks like html elements! Normally we cannot user html in javascript, it would throw an error, but because we use Babel as a compiler, we can use html in javascript and this is called JSX. In reality it only looks like html, behind the scenes it will be converted to pure javascript. It is just for us to make our life easier.\r\nJS\r\n```\r\nfunction Person () { \r\n  return (\r\n  <div className=\"person\">\r\n      <h1>Addania</h1>\r\n       <p>Nick: Adda</p>\r\n      <p>Location: Meadows</p>\r\n   </div>\r\n  )\r\n}\r\n```\r\n>Pleas note that in React we need to use classNanme instead of class, because class is a reserved name for class components. This is a proof that our HTML in Javascript actually is not an HTML.\r\n\r\n>But this will do nothing yet. We need to tell react where in website we want to render it. For that we imported react-dom. react-dom exposes an object called React-DOM where we define which component we want to render where in website. ReactDOM has a render method allows us to render javascript function as a component to the real dom.\r\nJS\r\n```\r\nfunction Person () { \r\n  return (\r\n  <div class=\"person\">\r\n      <h1>Addania</h1>\r\n       <p>Nick: Adda</p>\r\n      <p>Location: Meadows</p>\r\n   </div>\r\n  )\r\n}\r\n\r\nReactDOM.render(<Person/>,document.getElementById('root'));\r\n```\r\nHTML:\r\n```\r\n<div id=\"root\"></div>\r\n```\r\n\r\n![](https://i.imgur.com/s0xy9Lf.png)\r\n\r\n>Yay, we generated our beautiful component. But it is static only for Mia. How about we want to make it more dynamic? Instead of hard coded values, we can use props which is an object that holds values for all attributes we give to our component Person (such as name, location and nickname):\r\n\r\nJS\r\n```\r\nfunction Person (props) { \r\n  return (\r\n  <div class=\"person\">\r\n      <h1>{props.name}</h1>\r\n       <p>Nick: {props.nickname}</p>\r\n      <p>Location: {props.location}</p>\r\n   </div>\r\n  )\r\n}\r\n\r\nReactDOM.render(<Person name=\"Addania\" nickname=\"Adda\" location=\"meadows\"/>,document.getElementById('root'));\r\n```\r\n\r\n>And now drumroll, power of React will come, we can reuse our component:\r\nHTML:\r\n```\r\n<div id=\"p1\"></div>\r\n<div id=\"p2\"></div>\r\n```\r\nJS\r\n```\r\nfunction Person (props) { \r\n  return (\r\n  <div class=\"person\">\r\n      <h1>{props.name}</h1>\r\n       <p>Nick: {props.nick}</p>\r\n      <p>Location: {props.location}</p>\r\n   </div>\r\n  )\r\n}\r\n\r\nReactDOM.render(<Person name=\"Addania\" nick=\"Adda\" location=\"meadows\"/>,document.getElementById('p1'));\r\nReactDOM.render(<Person name=\"Sam\" nick=\"Nam\" location=\"Gym\"/>,document.getElementById('p2'));\r\n```\r\n![](https://i.imgur.com/rPfOuIR.png)\r\n\r\n>We used only one component and rendered it twice with different values! OP React!\r\n\r\n>We can optimize it even further. Instead of having multiple render methods, we can only have one and create a variable which will then render all our elements. This way is much more popular in real life applications.\r\n\r\nHTML:\r\n```\r\n<div id=\"root\"></div>\r\n```\r\n\r\nJS:\r\n```\r\nfunction Person (props) { \r\n  return (\r\n  <div class=\"person\">\r\n      <h1>{props.name}</h1>\r\n       <p>Nick: {props.nick}</p>\r\n      <p>Location: {props.location}</p>\r\n   </div>\r\n  )\r\n}\r\n\r\nvar element =  (\r\n  <div>\r\n    <Person name=\"Addania\" nick=\"Adda\" location=\"meadows\"/>\r\n    <Person name=\"Sam\" nick=\"Nam\" location=\"Gym\"/>\r\n      <Person name=\"Ditulienka\" nick=\"Slniecko\" location=\"Cafe\"/>\r\n    <Person name=\"Lubino\" nick=\"Captain\" location=\"Satellite\"/>\r\n  </div>\r\n)\r\n\r\nReactDOM.render(element,document.getElementById('root'));\r\n```\r\n\r\n![](https://i.imgur.com/33tZHVA.png)\r\n\r\n**Why React**\r\n- UI state becomes easier to manage compared to Vanilla Javascript\r\n- Focus is on business logic, not on preventing your app from exploding\r\n- High performance\r\n- Huge community\r\n\r\n**Application types**\r\n- Single page applications\r\n- Multi page applications\r\n\r\n> Single page application - we only get back one single HTML file from the server and we get back this file the first time the user visits. Afterwards everything else is managed by Javascript with react. Entire page consist of components which are handled and rendered by Javascript! You never need to go back to server to reload the page!! Which is amazing user experience. Everything happens instantly. Entire page/ app is handled by React. We typically only have one ReactDOM.render() call.\r\n\r\n> Multi page application - we get back multiple HTML pages where each page has the content for a given route (a given URL we visited). For example.com and example.com/users, we get back two different pages. Here entire page is just HTML and CSS and maybe only some elements are react (but the dont know about existance of each other). Typically have multiple  ReactDOM.render() to call react components\r\n\r\n**Next generation JS - refresher**\r\n\r\n**Variables**\r\n\r\n> Let and const are different way of creating variables. Var used to be only way to create variables, with ES6 we have const and let as well. Let is a new var - used for creating variable values. Const creates a constant value which does not change\r\n\r\n**Functions**\r\n\r\n> Normal function in JS looks like this:\r\n```\r\nfunction myFun () {}\r\n```\r\n> Arrow functions is another syntax for creating functions in Javascript:\r\n```\r\nconst myFun = () => {}\r\n```\r\n>Arrow functions solve a lot of previous issues with `this` keyword. Before `this` could change its context unexpectedly. IN arrow functions it will not.\r\n\r\n>To shorten the arrow function, we can omit brackets around arguments if there is EXATLY ONE argument. Imagine we have following function:\r\n```\r\nconst myFun = (name) => {}\r\n```\r\n> We can shorten it to: \r\n```\r\nconst myFun = name => {}\r\n```\r\n> To shorten arrow function, we can omit curly braces and word `return` in case the whole body of the function is just one return statement.  Imagine we have following function:\r\n```\r\nconst multiply = number => {\r\n    return number*2\r\n}\r\nconsole.log(multiply(4))\r\n```\r\n> We can shorten it to: \r\n```\r\nconst multiply = number => number*2\r\nconsole.log(multiply(4))\r\n```\r\n\r\n**Exports and imports**\r\n> Javascript code is odular, we can split it to multiple files. IN one file we can then import other files or export current content of file.\r\n> There are two way to import and export files - default exports and named exports\r\n> Default export - the only thing that gets exported from this file is personObject:\r\nperson.js\r\n```\r\nconst personObject = {\r\n    name=\"Adda\"\r\n}\r\nexport default personObject\r\n```\r\n>Default import - we can give it any name we want, it will always be just that personObject, which in other files we might want to call differently:\r\napp.js\r\n```\r\nimport anything from './person.js'\r\nimport prsn from './person.js'\r\nimport user from './person.js'\r\n```\r\n>Name export - we have multiple things exported from one file, each by its own unique name:\r\nusers.js\r\n```\r\nexport const person = {\r\n    name=\"Adda\"\r\n}\r\nexport const animal = {\r\n    name=\"Tiger\"\r\n}\r\nexport const plant = {\r\n    name=\"Bamboo\"\r\n}\r\n```\r\n> Named import - we can only import object by their own name. We can also deicde which objects we actually want to import:\r\napp.js\r\n```\r\nimport { person } from './users.js'\r\nimport { animal } from './users.js'\r\n```\r\n> Named imports - if we want to still change the name, we can assign it an alias:\r\napp.js\r\n```\r\nimport { person as Emperor } from './users.js'\r\nimport { animal as Pet } from './users.js'\r\n```\r\n> Named imports - if we want to change name for everything what we import from some place, we can use `* as` followed by an `alias`. This alis is a Javascript object which exposes all the constants which are named exported from that file. These are then accessible by `alias.constant`:\r\napp.js\r\n```\r\nimport * as users ' from ./users.js'\r\n\r\nconsole.log(users.person, users.animal, users.plant)\r\n```\r\n\r\n**Classes:**\r\n> Classes are blueprints for objects.\r\n> \r\n>Defining a class with  keyword `class`\r\n```\r\nclass Person {\r\n    name=\"Adda\"\r\n    call = () => {...}\r\n}\r\n```\r\n> Above class Person has one property `name` and a method `call`.\r\n> `Method` is just a function attached to classes.\r\n> `Properties` are variables attached to classes.\r\n\r\n>One specific example of a class is instantiated with a keyword `new` (usage of classes):\r\n```\r\nconst adda= new Person()\r\nadda.call()\r\nconsole.log(adda.name)\r\n```\r\n>Classes are a more convenient way how to write constructor functions in javascript\r\n\r\n>Idea is - we create javascript objects with classes as blueprints\r\n>Clases support inheritance - meaning child class can take all the properties and methods from the parent class and use them and potentially adding its own new properties and method:\r\n```\r\nclass Person extends Human\r\n```\r\n>Each and everyclass has a default function/method called `constructor`, which is always called when class is created and it adds initial properties to the class:\r\n```\r\nclass Person {\r\n    constructor(){\r\n\r\n    }\r\n}\r\n```\r\n>Within constructure we can setup our properties with `this` keyword:\r\n```\r\nclass Person {\r\n    constructor(){\r\n        this.name=\"Mia\";\r\n    }\r\n}\r\n```\r\n>Let's add a method which prints out person's name:\r\n```\r\nclass Person {\r\n    constructor() {\r\n        this.name = 'Mi';\r\n    }\r\n  \r\n    printMyName() {\r\n        console.log(this.name);\r\n    }\r\n}\r\n```\r\n>Now we can create a new instance of the class and store it in a variable:\r\n```\r\nconst adda = new Person();\r\nadda.printMyName();\r\n```\r\n>Let's create a class human:\r\n```\r\nclass Human {\r\n    constructor() {\r\n        this.gender = 'female';\r\n    }\r\n  \r\n    printGender() {\r\n        console.log(this.gender);\r\n    }\r\n}\r\n```\r\n>If Person inherits from Human, person can also have gender available. We can create inheritance by keyword `extends`\r\n\r\n```\r\nclass Person extends Human{\r\n    constructor() {\r\n        super();\r\n        this.name = 'Mi';\r\n    }\r\n  \r\n    printMyName() {\r\n        console.log(this.name);\r\n    }\r\n}\r\n```\r\n>Please note that if we use constructor and extends, we need to also use special method called `super`. It executes parent constructor. Which we have to do in order to correctly initiate parent class\r\n\r\n>Now we can call printGender method on our adda variable (instance of class Person):\r\n```\r\nconst adda = new Person();\r\nadda.printGender();\r\n```\r\n>Even if class Person inherits gender from class Human, we can set our own gender in the Person class:\r\n\r\n``` es6\r\nclass Person extends Human{\r\n    constructor() {\r\n        super();\r\n        this.name = 'Mi';\r\n        this.gender = 'unknown'\r\n    }\r\n  \r\n    printMyName() {\r\n        console.log(this.name);\r\n    }\r\n}\r\n```\r\n\r\n>Why to bother with classes? React uses classes to create components. There is also another way how to create components - functional components.\r\n\r\n>New generation JS - ES7 lets us ommit `constructor` within classes and `this` when creating properties(variables)\r\n``` es6\r\nmyProperty=\"value\"\r\n``` \r\n\r\n>The same goes for methods, instead of defining method like this:\r\n``` es6\r\nmyFunction() {}\r\n```\r\n>We can use syntax like this (think of it as a property and then arrow function):\r\n``` es6\r\nmyFunction = () => {}\r\n```\r\n>Example:\r\n``` es6\r\nclass Person {\r\n  name=\"Adda\";\r\n  printName = () => {\r\n    console.log (this.name)\r\n  }\r\n}\r\nconst m= new Person();\r\nm.printName()\r\n```\r\n\r\n>Please note, that we still need to use `this`keyword when accessing the property.\r\n\r\n> Similarly, we can also omit `super`\r\n``` es6\r\nclass Human {\r\n  home = \"Earth\";\r\nprintHome = () => {\r\n  console.log(this.home)\r\n }\r\n}\r\nclass Person extends Human {  \r\n  name=\"Adda\";  \r\n  printName = () => {\r\n    console.log (this.name)\r\n  }\r\n}\r\nconst m= new Person();\r\nm.printName()\r\nm.printHome()\r\n```\r\n**Spread and Rest operator**\r\n>Both spread and rest operator is just ... yes, literally, just three dots `...`. If it is spread or rest depends on where we use it.\r\n\r\n>Spread - splits array elements OR object properties\r\n\r\n> Imagine we have oldArray which we want to cpy and add new elements:\r\n``` es6\r\nconst oldArray= [0, 1, 2]\r\nconst newArray= [...oldArray, 3, 4]\r\nconsole.log(newArray)\r\n```\r\n>Reasult will be [0, 1, 2, 3, 4]\r\n\r\n>Same goes for objects:\r\n``` es6\r\nconst oldObject= {name: \"Adda\", title: \"Invincible\"}\r\nconst newObject= {...oldObject, mount: \"Spectral Steed\"}\r\nconsole.log(newObject.name, newObject.mount)\r\n```\r\n>These three dots pull out `all` the properties of the old object and we are able to add new one\r\n\r\n>If old object had the same property as we assign it in the new one, old property will be overwritten\r\n``` es6\r\nconst oldObject= {name: \"Adda\", title: \"Invincible\"}\r\nconst newObject= {...oldObject, title: \"The Queen\"}\r\nconsole.log(newObject.name, newObject.title)\r\n```\r\n\r\n>Result will be `Adda` and `The Queen`\r\n\r\n>Spread operator is a convenietn way also to copy array or object and create a new one without modifying the old one.\r\n\r\n>Rest operator is used to merge a list of function arguments into an array.  We use it in functions for arguments., for example when a function can receive unlimited amount of arguments. We want then create an array from those arguments and use array methods on it.\r\n``` es6\r\nfunction sort(...args){\r\n    return args.sort()\r\n}\r\n```\r\n>Another example:\r\n``` es6\r\nconst filter = (...args) => {\r\n    return args.filter(element => element === 1);\r\n}\r\nconsole.log(filter(1,2,3)) // [1]\r\n```\r\n\r\n**Desctructuring**\r\n> Destructuring allows easily extract array elements or object properties and store them in variables.\r\n\r\n> Sounds like spread operator. But spread operator takes out `all` properties, all elements and distributes them in new `array` or `object`.\r\n\r\n>Destructuring allows to pull out `single` elements or properties and store them in `variables`.\r\n``` es6\r\n[ name, title ] = ['Adda', 'The Emperor']\r\nconsole.log(name) // 'Adda'\r\nconsole.log(title) // 'The Emperor'\r\n```\r\n>It looks like we are creating a new array, but we are not, we are `destructuring` an array and creating 2 variables: name and title\r\n\r\n>The order defines which property name withh be (the first), title (the second).\r\n\r\n>I can skip an element:\r\n``` es6\r\n[ race, ,spec, profession ] = ['Night Elf', 'Druid', 'Restoration', 'Enchanter']\r\n```\r\n\r\n>Similarly for objects. But for objects propert name will define which value will be taken out into variable\r\n``` es6\r\n{ pet } = {mount: 'Dragonkin', pet:'The Phoenix'}\r\nconsole.log(pet) // 'Dragonkin'\r\nconsole.log(mount) // undefined\r\n```\r\n**Primitive types**\r\n>Primitive type is for example number, string or boolean. These are always copied to a new variable!\r\n``` es6\r\nlet number = 8;\r\nlet number2 = number;\r\nconsole.log(number2) //8\r\nnumber2=4\r\nconsole.log(number) //8\r\n```\r\n>So practically these are 2 different variables.\r\n\r\n**Referenced types**\r\n>Arrays and objects are more complex constructs and they are passed by reference and not copied:\r\n``` es6\r\nconst achievement1 = {\r\n  name: 'The Patient',\r\n  skillpoints: 100\r\n}\r\nconst achievement2 =achievement1\r\nachievement1.skillpoints= 1000\r\nconsole.log(achievement2.skillpoints) //1000\r\n```\r\n>How does it work? Object achievement 1 will be pointing to a memory object. Then achievement 2 is referencing achievement 1 which means its pointer is also pointing to the same object in the memory. Achievement 2 was not copied, only referenced, therefore it does not have its own memory address. Therefore both achievement 1 and 2 are pointing to the same memory address.\r\n\r\n> It is same for arrays.\r\n\r\n>In react referencing and object is tricky, because we can change the object in one place and it will also be visible in other places in app which reference it. \r\n\r\n>Therefore in React we will often you spread operator to really copy the object and create a completely new one, with its own memory address:\r\n``` es6\r\nconst achievement1 = {\r\n  name: 'The Patient',\r\n  skillpoints: 100\r\n}\r\nconst achievement2 = {...achievement1}\r\nachievement1.skillpoints= 1000\r\nconsole.log(achievement2.skillpoints) //100\r\n```\r\n\r\n**React build workflow**\r\n> In order to have a nice build for our project we will need\r\n- dependency management tool (npm -node package manager or yarn) which will take care of downloading, installing and updating of all our 3rd party libraries / 3rd party Javascript packages we might want to use in the project (react, react-dom, compiler from next gen JS features to older features which will run on older browsers, lodash, moment, etc). We will use NPM in this project. You can get NPM when you install `node.js` from their official site: nodejs.org Since then you will be able to use `npm install` commands in your terminal and node.js also ships the development server which we can run locally on our pc to test the app\r\n- bundler (Webpack) - we want to write modular code and split it up over multiple files so that each file has a clear task/focus and therefore easier to maintain. But upon shipping , we want to bundle it into only couple of files (or even one) because older browsers do not even support splti up files. It is also not optimal to make 1000 or requests to all this tiny files. We will use Webpack which is a standar bundler. Webpack does not only bundle files, but allows us to do couple of steps before bundling. Which can be convenient.\r\n-  compiler (Babel)-  compiling those next gen JS features which are then transpiler into workarounds which work on older browsers. Babel and presets can be hooked into Webpack configuration so that they are part of the bundling and optimization process\r\n-  development server to test our app locally on our computer (machine). Development server is a web server running on our machine. This webserver will emulate how the app woudl be actually running on a real server\r\n\r\n**Create React App**\r\n> In order to instal create react app (official way to start react project, type in your command line:\r\n``` es6\r\nsudo npm install -g create-react-app\r\n```\r\n\r\n>Then you have create react app installed globally on your pc and can create your own projects:\r\n``` es6\r\ncreate-react-app hamburger_app \r\n```\r\n\r\n``` es6\r\ncreate-react-app hamburger_app --scripts-version 1.1.5\r\n```\r\n\r\n>Then you can navigate to your project with (cd- change directory) and start the project with npm start\r\n``` es6\r\ncd hambuerger_app\r\nnpm start\r\n```\r\n\r\n>In your browser then go to url: http://localhost:3000/\r\n\r\n>Your app is running there\r\n\r\n**File structure of the project provided by create-react-app**\r\n> `package.json` - all dependencies we have in our project plus scripts defined in the project \r\n> `package-lock.json` or yarn.lock these files lock the versions of dependencies we are using. Why? because package.json would say any version above 4.1 and package-lock.json would lock it to one particular one, so that the app is stable and predictable\r\n>`node_modules` folder holds all dependencies and sub denendencies of the project. When we do npm install, program will look what dependencies are in package.json and remove existing dependencies and install them again into node_modules folder automatically. Therefore never edit anything manually in this fodler\r\n>`public` folder - is a root folder which get served by webserver in the end. It holds only files which we can edit. One important file is there: `index.html`. It is the only html page we will have in the project, we will not add more. In the end the script files will get injected to this html file `by our build workflow` (there is no script import in the html file - will be done by build workflow). Within the filte, there is only important element: `<div id=\"root\"></div>`. This is exactly the place where we mount our React application. What you can however do in the html file is to add some 3rd party libraries, CSS libraries, edit meta tags, etc. \r\n>`manifest.json` is there because create react app give us progressive web app out of the box. In this file we can define some meta data about our application. What is progressive web app? Progressive Web Apps (PWAs) are web applications that are regular web pages or websites, but can appear to the user like traditional applications or native mobile applications. The application type attempts to combine features offered by most modern browsers with the benefits of a mobile experience.\r\n>`src`is a folder which holds scripts of our React application. These are the files we will work with. `index.js` get access to the DOM's element with the id of \"root\" (in html file) and mounts our application there. our application is called `<App />` and is imported from `App.js`. `App.js` holds our very first React component. We also have `App.css` with some styles which are however not related to only that one file `App.js`. These styles are global. We also get `index.css` file which also hold global styles which are more general, for example for the body of our app. `registerServiceWorker.js` is important for registering a service worker which is generated automatically because of that progressive web appy which we get out of the box. It will pre-cache our script files automatically. `App.test.js` - a test file which allows us to create `unit tests` for specific units, for example components. Notice also that our file extention is .js but it could also be .jsx - they are eqivalent (jsx only because we write \"what-looks-like html code\" into javascript files - but it is not really a n html code, it is just a sugar code so that it resembles html, but is easier to write for developers).  \r\n\r\n\r\n**Dependencies**\r\n- react-scripts -package which offers build workflow, development server, all the next gen JS features and\r\n\r\n**Scripts**\r\n> Scripts are found in package.json\r\n>  All can be run with `npm run` and then the script\r\n``` es6\r\nnpm run start\r\nnpm run build\r\nnpm run test\r\n```\r\n\r\n> npm run start - starts development server\r\n> npm run build - builds and optimizes the app upon deployment! it would store the optimized code in a folder. At the beginning of the project you would not see the compiled code in the folder structure, compilations happens in the memory\r\n> npm run test - runs the tests\r\n\r\n**Components**\r\n> Componenets are reusable custom html elements\r\n\r\n>React components can be defined in 2 ways: class components and functional components\r\n>Example of class component definition:\r\n``` es6\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello worlds</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n```\r\n>For this claas component will need to import React which will render everything and also Component itself which is our parent Javascript class from which our components will inherit. This class has one important method: `render` method. It needs to have this method because React will call this method to render something to the screen.\r\n\r\n>Every React component has 1 job to do: to render some html code which can be rendered to the DOM to the screen.\r\n\r\n>There are other things components can do: reach out to internet, do some calculations, listen to some events...\r\n\r\n>Then there is a default export for this App component. Which means if you import the whole files somewhere, what will be exported is App component wnd on the import side we can name it anything.\r\n\r\n>JSX in our code:\r\n``` es6\r\n return (\r\n      <div className=\"App\">\r\n        <h1>Hello worlds</h1>\r\n      </div>\r\n    );\r\n```\r\n\r\n>can be re-written using react method `React.createElement`. This is what the compilation will do when it see \"html\" code in javascript file:\r\n``` es6\r\n return React.createElement('div',null, 'h1', 'Hi')\r\n```\r\n\r\n>React.createElement() take at least 3 arguments (but can be infinite).\r\n\r\n>First argument is the element we want to rendere to the DOM. For example classical html div, button, etc or our own component `<Header>`\r\n\r\n>Second argument is configuration for what we want to render. Configuration is a Javascript objectm but if we do not want to configure anything, we cal pass null. \r\n\r\n>Third argument is any amount of children separated by comas. Children means what is nested inside our div\r\n\r\n>But problem is that h1 will be interpreted as a text. So if we really wanted to create h1 tag we would need to write:\r\n\r\n``` es6\r\n return React.createElement('div',null, React.createElement('hi',null,'Hi'))\r\n```\r\n\r\n>If we also wanted to pass a class to our element we would pass an JS object as second parameter:\r\n``` es6\r\n return React.createElement('div',null, React.createElement('hi',{className:'App'},'Hi'))\r\n```\r\n>The code above is actually equivalent to what the original JSX and it is what our JSX will eventually compile to:\r\n>Our JSX (which resembles like html, but is NOT; it is simply suger coated JS) looked originally like this:\r\n``` es6\r\n return (\r\n      <div className=\"App\">\r\n        <h1>Hello worlds</h1>\r\n      </div>\r\n    );\r\n```\r\n\r\n>Compiled equivalent is:\r\n``` es6\r\n return React.createElement('div',null, React.createElement('hi',{className:'App'},'Hi'))\r\n```\r\n\r\n>Writing code with React.createElement soon becomes cumbersome especially when we want to nest elements\r\n\r\n>Notice how we cant use word `class` in out JSX when wanting to apply CSS class. Word `class` is a reserved word in JS for creating classes. Therefore for CSS classes we need to use `className`\r\n\r\n>The fact that we can use html-resembling tags in JS, is because React library provides it for us\r\n\r\n>Another restriction is that when we create a component it can only return 1 root element. \r\n\r\n>Following code will not work\r\n``` es6\r\n return (\r\n      <div className=\"App\">\r\n        <h1>Hello worlds</h1>\r\n      </div>\r\n      <h2>I am here</h2>\r\n    );\r\n```\r\n\r\n>We need to wrap it all in a div, so that it can be rendered\r\n``` es6\r\n return (\r\n     <div>\r\n      <div className=\"App\">\r\n        <h1>Hello worlds</h1>\r\n      </div>\r\n      <h2>I am here</h2>\r\n      </div>\r\n    );\r\n```\r\n\r\n> Components in our project will follow a standard convention of separating each component into a folder and name of the folder will have the component name in capital\r\n\r\n**Functional components**\r\n> In the simples form a component is just a function which returns some JSX.\r\n``` es6\r\nimport  React from 'react';\r\nexport const Person = () => {\r\n    return (\r\n        <h2>I am a person</h2>\r\n    )\r\n}\r\n```\r\n>Notie that we also exported the elements with keyword `export`so that we can use it on other files\r\n\r\n>Then we can use it our App.js\r\n``` es6\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Person } from './Person/Person';\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello worlds</h1>\r\n        <Person />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n```\r\n>Notice that we need to import the element first from our Person.js file which resides in Person folder. We can import it with: `import { Person } from './Person/Person.js'` but because of our build we can omit `.js`\r\n\r\n>Also notice that in order to use the component we use: `<Person></Person>`or as a self-closing tag `<Person />`\r\n\r\n>Components are cool because they are resuable and configurable.\r\n\r\n>Configurable means we can have dynamic content in our JSX\r\n``` es6\r\nimport  React from 'react';\r\nexport const Person = () => {\r\n    return (\r\n        <h2>I am a person and I am {Math.floor(Math.random()*30)} years old</h2>\r\n    )\r\n}\r\n```\r\n\r\n>Notice that we need to use curly braces if we want to use JS in our JSX.\r\n\r\n>We can also pass some content from App.js to our component with props to configure what we want Person component to output. This is what supply from App.js\r\n``` es6\r\n<Person name=\"Adda\" age=\"18\"/>\r\n<Person name=\"Sam\" age=\"20\">My hobbies: Motor Racing</Person>\r\n```\r\n>Then in Person component we can use those properties in an object called props (but we can choose any other name). This object holds all the properties of this component:\r\n``` es6\r\nimport  React from 'react';\r\nexport const Person = (props) => {\r\n    return (\r\n        <h2>I am a {props.name} and I am {props.age} years old</h2>\r\n    )\r\n}\r\n```\r\n\r\n>Or we can destructure the props:\r\n``` es6\r\nimport  React from 'react';\r\nexport const Person = ({name, age}) => {\r\n    return (\r\n        <h2>I am a {name} and I am {age} years old</h2>\r\n    )\r\n}\r\n```\r\n>Notice how we still dont display `My hobbies: Motor Racing` for Sam. We can pass not only attributes to the component but also content between starting and closing tags. This special prop which React gives us access to is prop called `children`. It is a reserved word. In code it will look like this:\r\n``` es6\r\nimport React from 'react';\r\n\r\nexport const Person = ({name, age, children}) => {\r\n    return (\r\n        <div>\r\n        <h2>I am a {name} and I am {age} years old</h2>\r\n        <p>{children}</p>\r\n        </div>\r\n    )\r\n}\r\n``` \r\n>Or alternatively\r\n``` es6\r\nimport React from 'react';\r\n\r\nexport const Person = (props) => {\r\n    return (\r\n        <div>\r\n        <h2>I am a {props.name} and I am {props.age} years old</h2>\r\n        <p>{props.children}</p>\r\n        </div>\r\n    )\r\n}\r\n``` \r\n\r\n**Component State**\r\n>Props are passed from outside to the component. Props allow you to pass data from a parent (wrapping) component to a child (embedded) component.\r\n\r\n>State is managed from inside of the component. For example input value, on click from button , etc.\r\n\r\n>State in class based components is like a variable that will be saved and updated from the component. The state is actually and object. \r\n\r\n>`state` is a reserved word for class based components and is declared like this:\r\n``` es6\r\nclass App extends Component {\r\n  state = {\r\n      persons: []\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello worlds</h1>\r\n        <Person />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n>More sophisticated example:\r\n``` es6\r\nclass App extends Component {\r\n  state = {\r\n      persons: [\r\n        {name: \"Adda\", age: \"18\"},\r\n        {name: \"Pete\", age: \"15\"},\r\n      ]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello worlds</h1>\r\n        <Person name={this.state.persons[0].name} age={this.state.persons[0].age}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n>Word `this`refers to the class (App) which has a property `state`. We can define our own prperties, but state is a special one. State can be changed but if it changes, it will lead React to update the DOM! (Also changes in props lead React to re-render components). Let`s do just that.\r\n\r\n>We will have a button to print something to console.\r\n``` es6\r\nclass App extends Component {\r\n  state = {\r\n      persons: [\r\n        {name: \"Adda\", age: \"18\"},\r\n        {name: \"Pete\", age: \"15\"},\r\n      ]\r\n  }\r\n\r\nhandleClick = () => {\r\n    console.log(\"Im clicked\")\r\n}\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello worlds</h1>\r\n        <button onClick={this.handleClick}>Toggle names</button>\r\n        <Person name={this.state.persons[0].name} age={this.state.persons[0].age}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n>Notice how class methods are not written with const `handleClick`\r\n\r\n>Notice also we need to use this syntax `onClick={this.handleClick}` and NOT this syntax `onClick={this.handleClick()}`\r\n\r\n>`onClick={this.handleClick}` executes when you click the button, function is only passed there (referenced)\r\n\r\n>`onClick={this.handleClick()}` will be immediatelly executed as soon as the component renders! (not on the click)\r\n\r\n>There are many other events to which we can listen. List is [here](https://reactjs.org/docs/events.html#supported-events)\r\n\r\n>Just to mention a few:\r\n- Clipboard events: onCopy onCut onPaste\r\n- Keyboard events: onKeyDown onKeyPress onKeyUp\r\n- Focus events: onFocus\r\n- Form events: onChange onInput onInvalid onSubmit\r\n- Mouse Events: onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp\r\n- Selection events: onSelect\r\n- Touch events: onTouchCancel onTouchEnd onTouchMove onTouchStart\r\n- UI events: onScroll\r\n- Wheel Events: onWheel\r\n\r\n>Let's upgrade our button onClick to handle the state:\r\n\r\n>NEVER mutate state directly! NO GO:\r\n``` es6\r\nhandleClick = () => {\r\n    this.state.persons[0].name= \"Addania\"\r\n}\r\n``` \r\n>Instead use `setState` method which comes from React library. This method allows to update the special property: state. It will also make sure that React knows the state was updated and then it triggerst DOM re-render. setState requires and object and whatever I write there, it will merge with what is already there, so if I set one property in setState, it will not touch other properties:\r\n``` es6\r\nhandleClick = () => {\r\n    this.setState(\r\n        {\r\n      persons: [\r\n        {name: \"Addamia\", age: \"18\"},\r\n        {name: \"Pete\", age: \"16\"},\r\n      ]\r\n  }\r\n    )\r\n}\r\n``` \r\n\r\n>If my state was: \r\n``` es6\r\n  state = {\r\n      persons: [\r\n        {name: \"Adda\", age: \"18\"},\r\n        {name: \"Pete\", age: \"15\"},\r\n      ],\r\n      animals: \"muuu\"\r\n  }\r\n```\r\n>then setState person would not change animals. Animals woudl still be available. SetState merges states.\r\n\r\n>There are only 2 things that force DOM to update: change of state and change of props\r\n\r\n>`this.steState` is only available in the class based components. We will explore functional components next:\r\n\r\n\r\n**Functional components**\r\n> In order to handle state in functional components, we use HOOKS. Hooks are just simply a collection of fucntions which are exposed to you to use in fucntional componets.\r\n\r\n>Let's re-create our class component called App to a functional component.\r\n\r\n>The hook that allows us to manipulate state is called `useState`and we need to import from react\r\n``` es6\r\nimport React, { useState } from 'react';\r\n```\r\n\r\n> We can then use it like this: `useState()` where in between on brackets we pass the initial value of the state. \r\n\r\n>`useState()` returns and array with EXACTLY 2 elements:\r\n- the first element is the value of our current state\r\n- the second element is a function which allows us to change the state, so that React is aware of it and triggers re-render of our component.\r\n\r\n>We can store it in a constant:\r\n``` es6\r\n const stateArray = useState ({\r\n        persons: [\r\n          {name: \"Adda\", age: \"18\"},\r\n          {name: \"Pete\", age: \"15\"},\r\n        ]\r\n    })\r\n```\r\n>Alternativelly we can `destructure` our array into individual variables.\r\n\r\n``` es6\r\n const [personsState, setPersonsState] = useState ({\r\n        persons: [\r\n          {name: \"Adda\", age: \"18\"},\r\n          {name: \"Pete\", age: \"15\"},\r\n        ]\r\n    })\r\n```\r\n\r\n> And this is how the whole component looks:\r\n``` es6\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Person } from './Person/Person'\r\nconst App = () => {\r\n    const [personsState, setPersonsState] = useState ({\r\n        persons: [\r\n          {name: \"Adda\", age: \"18\"},\r\n          {name: \"Pete\", age: \"15\"},\r\n        ]\r\n    })\r\n    const handleClick = () => {\r\n        setPersonsState(\r\n            {\r\n          persons: [\r\n            {name: \"Addania\", age: \"18\"},\r\n            {name: \"Pete\", age: \"16\"},\r\n          ]\r\n      }\r\n        )\r\n    }\r\n      return (\r\n        <div className=\"App\">\r\n          <h1>Hello worlds</h1>\r\n          <button onClick={handleClick}>Click Me!</button>\r\n          <Person name={personsState.persons[0].name} age={personsState.persons[0].age}/>\r\n        </div>\r\n      );\r\n}\r\nexport default App;\r\n```\r\n\r\n>Notice how in functional component we can remove `this` keyword.\r\n\r\n>Very very important note about updating state with hook useState and how we do it in class-based component with setState. \r\n\r\n>SetState merges the states, we if we update persons, we wont lose info about animals\r\n\r\n``` es6\r\nstate = {\r\n      persons: [\r\n        {name: \"Adda\", age: \"18\"},\r\n        {name: \"Pete\", age: \"15\"},\r\n      ],\r\n      animals: \"muuu\"\r\n  }\r\nhandleClick = () => {\r\n    this.setState(\r\n        {\r\n      persons: [\r\n        {name: \"Addamia\", age: \"18\"},\r\n        {name: \"Pete\", age: \"16\"},\r\n      ]\r\n  }\r\n    )\r\n}\r\n```\r\n>But in using useState - we would lose this info:\r\n``` es6\r\nconst [personsState, setPersonsState] = useState ({\r\n        persons: [\r\n          {name: \"Adda\", age: \"18\"},\r\n          {name: \"Pete\", age: \"15\"},\r\n        ], \r\n        animals: \"some value\"\r\n    })\r\n    const handleClick = () => {\r\n        setPersonsState(\r\n            {\r\n          persons: [\r\n            {name: \"Addania\", age: \"18\"},\r\n            {name: \"Pete\", age: \"16\"},\r\n          ]\r\n      }\r\n        )\r\n    }\r\n```\r\n>Therefore what we need to do in functional component is to create a new array, spread it from the old one (copy all values) and only update one of them:\r\n``` es6\r\nconst [personsState, setPersonsState] = useState ({\r\n        persons: [\r\n          {name: \"Adda\", age: \"18\"},\r\n          {name: \"Pete\", age: \"15\"},\r\n        ], \r\n        animals: \"some value\"\r\n    })\r\n    const handleClick = () => {\r\n        setPersonsState(\r\n            {...personsState, \r\n          persons: [\r\n    \r\n            {name: \"Addania\", age: \"18\"},\r\n            {name: \"Pete\", age: \"16\"},\r\n          ]\r\n      }\r\n        )\r\n    }\r\n```\r\n>Another possibility is that we simply have 2 different states for each. In functional component using useState hook, we can have as many states as we want. While in class- based components we only have 1 single state and this is then a big monster.\r\n\r\n>Example of 2 states in functional component:\r\n``` es6\r\nconst [personsState, setPersonsState] = useState ({\r\n        persons: [\r\n          {name: \"Adda\", age: \"18\"},\r\n          {name: \"Pete\", age: \"15\"},\r\n        ]\r\n    })\r\nconst [animalsState, setAnimalsState] = useState ({\r\n        animals: \"some value\"\r\n    })\r\n```\r\n\r\n**Stateful and stateless components**\r\n>Stateful component is a component which manages state (no matter if class or function). They are called smart components or container components.\r\n\r\n>Stateless component has no internal state management. They are also called dumb components or presentational components. And good practice is to create as many of such components as possible. Why? So that we have clear flow of data and it is clear where the main logic sits, where data changes which is then distributed to the rest of the app\r\n\r\n**Passing methods between components as props**\r\n>What if we want also possibility to switch the name when clicking on a h2 within the Person.js?\r\n\r\n>We can pass a reference to the handleClick method from our App.js component to Person.js component as a prop:\r\n``` es6\r\n <Person name={personsState.persons[0].name} age={personsState.persons[0].age} handleHeaderClick={handleClick} />\r\n ```\r\n\r\n >And then we can use it from props object in the Person.js:\r\n ``` es6\r\nexport const Person = (props) => {\r\n    return (\r\n        <div>\r\n        <h2 onClick={props.handleHeaderClick}>I am a {props.name} and I am {props.age} years old</h2>\r\n        <p>{props.children}</p>\r\n        </div>\r\n    )\r\n}\r\n ```\r\n\r\n\r\n>What if our function also needs to receive some kind of input??\r\n```es6\r\nconst handleClick = (newName) => {\r\n        setPersonsState(\r\n            {... personsState,\r\n          persons: [\r\n            {name: newName, age: \"18\"},\r\n            {name: \"Pete\", age: \"16\"},\r\n          ]\r\n      }\r\n        )\r\n    }\r\n```\r\n\r\n>We can then pass an arrow function which allows us to use () without execting the function immediatelly as the component renders:\r\n``` es6\r\n<Person name={personsState.persons[0].name} age={personsState.persons[0].age} handleHeaderClick={() => handleClick(\"The Queen\")} />\r\n```\r\n\r\n> Whole app.js looks like this:\r\n``` es6\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Person } from './Person/Person'\r\nconst App = () => {\r\n    const [personsState, setPersonsState] = useState ({\r\n        persons: [\r\n          {name: \"Adda\", age: \"18\"},\r\n          {name: \"Pete\", age: \"15\"},\r\n        ], \r\n        animals: \"miaucik\"\r\n    })\r\n    console.log(\"personsState\", personsState)\r\n    const handleClick = (newName) => {\r\n        setPersonsState(\r\n            {... personsState,\r\n          persons: [\r\n            {name: newName, age: \"18\"},\r\n            {name: \"Pete\", age: \"16\"},\r\n          ]\r\n      }\r\n        )\r\n    }\r\n      return (\r\n        <div className=\"App\">\r\n          <h1>Hello worlds</h1>\r\n          <button onClick={() => handleClick(\"The Queen\")}>Click Me!</button>\r\n          <Person name={personsState.persons[0].name} age={personsState.persons[0].age} handleHeaderClick={() => handleClick(\"The Queen\")} />\r\n        </div>\r\n      );\r\n}\r\nexport default App;\r\n```\r\n\r\n>The Person.js file looks like this:\r\n``` es6\r\nimport React from 'react';\r\nexport const Person = (props) => {\r\n    return (\r\n        <div>\r\n        <h2 onClick={props.handleHeaderClick}>I am a {props.name} and I am {props.age} years old</h2>\r\n        <p>{props.children}</p>\r\n        </div>\r\n    )\r\n}\r\n```\r\n>This syntax works for functional as well as class components.\r\n\r\n>In class components it would look like this (App.js):\r\n``` es6\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport {Person} from './Person/Person';\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: 'Adda', age: 18 },\r\n      { name: 'Pete', age: 15 },\r\n    ],\r\n    otherState: 'some other value'\r\n  }\r\n  handleClick = (newName) => {\r\n    this.setState( {\r\n      persons: [\r\n        { name: newName, age: 18 },\r\n        { name: 'Pete', age: 15 },\r\n      ]\r\n    } )\r\n  }\r\n  render () {\r\n    return (\r\n        <div className=\"App\">\r\n          <h1>Hello worlds</h1>\r\n          <button onClick={() => this.handleClick(\"Supeeeeeer\")}>Click Me!</button>\r\n          <Person name={this.state.persons[0].name} age={this.state.persons[0].age} handleHeaderClick={() => this.handleClick(\"Woooooow\")} />\r\n        </div>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n```\r\n\r\n>Please also note that arrow functions do not need curly braces and return keyword if they are in one line. But we can equally write:\r\n``` es6\r\n<button onClick={() => { return this.handleClick(\"Supeeeeeer\")}}>Click Me!</button>\r\n```\r\n\r\n>But there is also another way how to do this and this way is specific to class-based components. We will use special binding of the method and say that this is bound to the class App itself:\r\n``` es6\r\nthis.switchNameHandler.bind(this, \"Super\")\r\n```\r\n\r\n>If we write it in that way, we can also pass list of arguments. in our case one: \"Super\" but can be multiple\r\n\r\n>Full code looks like this:\r\n\r\nApp.js\r\n\r\n``` es6\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport {Person} from './Person/Person';\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: 'Adda', age: 18 },\r\n      { name: 'Pete', age: 15 },\r\n    ],\r\n    otherState: 'some other value'\r\n  }\r\n  handleClick = (newName) => {\r\n    this.setState( {\r\n      persons: [\r\n        { name: newName, age: 18 },\r\n        { name: 'Pete', age: 15 },\r\n      ]\r\n    } )\r\n  }\r\n  render () {\r\n    return (\r\n        <div className=\"App\">\r\n          <h1>Hello worlds</h1>\r\n          <button onClick={this.handleClick.bind(this, \"Super\")}>Click Me!</button>\r\n          <Person name={this.state.persons[0].name} age={this.state.persons[0].age} handleHeaderClick={this.handleClick.bind(this, \"Wow\")} />\r\n        </div>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n```\r\n\r\nPerson.js\r\n``` es6\r\nimport React from 'react';\r\nexport const Person = (props) => {\r\n    return (\r\n        <div>\r\n        <h2 onClick={props.handleHeaderClick}>I am a {props.name} and I am {props.age} years old</h2>\r\n        <p>{props.children}</p>\r\n        </div>\r\n    )\r\n}\r\n```\r\n\r\n\r\n>Now imaginewe want to make the name change on user input\r\n\r\n>In Person.js we will add input and onChange handler:\r\n``` es6\r\n<input type=\"text\" onChange={props.nameChanger}/>\r\n```\r\n>In App.js we add method and pass it as prop to Person\r\n``` es6\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: 'Adda', age: 18 },\r\n      { name: 'Pete', age: 15 },\r\n    ],\r\n    otherState: 'some other value'\r\n  }\r\n\r\n  handleClick = (newName) => {\r\n\r\n    this.setState( {\r\n      persons: [\r\n        { name: newName, age: 18 },\r\n        { name: 'Pete', age: 15 },\r\n      ]\r\n    } )\r\n  }\r\n\r\n  handleChange = (event) => {\r\n\r\n    this.setState( {\r\n      persons: [\r\n        { name: event.target.value, age: 18 },\r\n        { name: 'Pete', age: 15 },\r\n      ]\r\n    } )\r\n  }\r\n\r\n  render () {\r\n    return (\r\n\r\n        <div className=\"App\">\r\n          <h1>Hello worlds</h1>\r\n          <button onClick={() => { return this.handleClick(\"Supeeeeeer\")}}>Click Me!</button>\r\n          <Person name={this.state.persons[0].name} age={this.state.persons[0].age} nameChanger={this.handleChange} handleHeaderClick={() => this.handleClick(\"Woooooow\")} />\r\n        </div>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\n>Event object is passed automatically to the function by React when input changes.\r\n\r\n>Two way binding means that we can also provide initial value to the input, so that input would be pre-populated with whatever is in initial state.\r\n\r\n``` es6\r\n<input type=\"text\" onChange={props.nameChanger} value={props.name}/>\r\n```\r\n\r\n**Styling components**\r\n>There are two ways of styling components: with dedicaated css file or inline in js file\r\n\r\nCSS FILE\r\n> Add a file called Person.css\r\n\r\n>Please not that even though I call this fiel Person.css which might misleadingly suggest that this file will only be used in Person.js, it is not so. Any code in this file is a global css. \r\n\r\n>Content of the file will be like this:\r\n``` es6\r\n.Person {\r\n    width: 60%;\r\n    margin: 16px auto;\r\n    border: 1px solid #eeeeee;\r\n    box-shadow: 0 2px 3px #cccccc;\r\n    padding: 16px;\r\n    text-align: center;\r\n}\r\n```\r\n\r\n>Then we can go to Person.js, import it and add the className Person to a div:\r\n``` es6\r\nimport React from 'react';\r\nimport \"./Person.css\"\r\nexport const Person = (props) => {\r\n    return (\r\n        <div className=\"Person\">\r\n        <h2 onClick={props.handleHeaderClick}>I am a {props.name} and I am {props.age} years old</h2>\r\n        <p>{props.children}</p>\r\n        <input type=\"text\" onChange={props.nameChanger}/>\r\n        </div>\r\n    )\r\n}\r\n``` \r\n>Please note you have to define file extension: .css because only .js can be omitted.\r\n\r\n>Also notice that it is Webpack who makes it possible to import css files eventually to our html file. \r\n\r\nINLINE STYLING\r\n>We can create a constant in render method of the App.js and adding property style to the button:\r\n``` es6\r\n render () {\r\n      const inlineStyle={\r\n          backgroundColor: \"orange\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          color: \"white\"\r\n      }\r\n    return (\r\n\r\n        <div className=\"App\">\r\n          <h1>Hello worlds</h1>\r\n          <button style={inlineStyle} onClick={() => { return this.handleClick(\"Supeeeeeer\")}}>Click Me!</button>\r\n          <Person name={this.state.persons[0].name} age={this.state.persons[0].age} nameChanger={this.handleChange} handleHeaderClick={() => this.handleClick(\"Woooooow\")} />\r\n        </div>\r\n    )\r\n  }\r\n  ```\r\n>Or alternatively, we can put all the styles in thestyle property:\r\n``` es6\r\nrender () {    \r\n    return (\r\n        <div className=\"App\">\r\n          <h1>Hello worlds</h1>\r\n          <button style={{backgroundColor: \"orange\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          color: \"white\"}} onClick={() => { return this.handleClick(\"Supeeeeeer\")}}>Click Me!</button>\r\n          <Person name={this.state.persons[0].name} age={this.state.persons[0].age} nameChanger={this.handleChange} handleHeaderClick={() => this.handleClick(\"Woooooow\")} />\r\n        </div>\r\n    )\r\n  }\r\n```\r\n\r\n>Using inline styles scopes styles. Which means those are not global, they only apply to this element we used it for\r\n\r\n>Notice that we then need double curly braces, because styles are an object and the first curly braces tell to the js that these are placeholder\r\n\r\n**Conditionally render content**\r\n\r\n>What if we want to render some content upon click? Or hide it? We can use a state which will say true or false and they css prop display to be block or none depending on the state:\r\n```es6\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18 },\r\n      { name: \"Pete\", age: 15 },\r\n    ],\r\n    showPersons: true,\r\n  };\r\n\r\n  handleClick = (newName) => {\r\n    this.setState({\r\n      persons: [\r\n        { name: newName, age: 18 },\r\n        { name: \"Pete\", age: 15 },\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      persons: [\r\n        { name: event.target.value, age: 18 },\r\n        { name: \"Pete\", age: 15 },\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleVisibility = () => {\r\n    this.setState({ showPersons: !this.state.showPersons })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <button onClick={this.handleVisibility}>hide/show elements</button>\r\n        <div style={{ display: this.state.showPersons ? \"block\" : \"none\" }}>\r\n          <Person\r\n            name={this.state.persons[0].name}\r\n            age={this.state.persons[0].age}\r\n            nameChanger={this.handleChange}\r\n            handleHeaderClick={() => this.handleClick(\"Woooooow\")}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n>Alternatively we can use ternary expression in return statement in order to render content conditionally. Please note we cannot use if statement in return statement `<div>{if(true){<h1>Hi</h1>}</div>`. This will not work, we can only use simple statements (not block statements like if) in return\r\n``` es6\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18 },\r\n      { name: \"Pete\", age: 15 },\r\n    ],\r\n    showPersons: true,\r\n  };\r\n\r\n  handleClick = (newName) => {\r\n    this.setState({\r\n      persons: [\r\n        { name: newName, age: 18 },\r\n        { name: \"Pete\", age: 15 },\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      persons: [\r\n        { name: event.target.value, age: 18 },\r\n        { name: \"Pete\", age: 15 },\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleVisibility = () => {\r\n    this.setState({ showPersons: !this.state.showPersons })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <button onClick={this.handleVisibility}>hide/show elements</button>\r\n        <div>\r\n          {this.state.showPersons ? (\r\n            <div>\r\n              <Person\r\n                name={this.state.persons[0].name}\r\n                age={this.state.persons[0].age}\r\n                nameChanger={this.handleChange}\r\n                handleHeaderClick={() => this.handleClick(\"Woooooow\")}\r\n              />\r\n            </div>\r\n          ): null }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n>Alternatively we can also use && syntax to render elements conditionally:\r\n```es6\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18 },\r\n      { name: \"Pete\", age: 15 },\r\n    ],\r\n    showPersons: true,\r\n  };\r\n\r\n  handleClick = (newName) => {\r\n    this.setState({\r\n      persons: [\r\n        { name: newName, age: 18 },\r\n        { name: \"Pete\", age: 15 },\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      persons: [\r\n        { name: event.target.value, age: 18 },\r\n        { name: \"Pete\", age: 15 },\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleVisibility = () => {\r\n   this.setState({ showPersons: !this.state.showPersons })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <button onClick={this.handleVisibility}>hide/show elements</button>\r\n        <div>\r\n          {this.state.showPersons && (\r\n            <div>\r\n              <Person\r\n                name={this.state.persons[0].name}\r\n                age={this.state.persons[0].age}\r\n                nameChanger={this.handleChange}\r\n                handleHeaderClick={() => this.handleClick(\"Woooooow\")}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n>Important note about render method of class components. When something needs to be re-rendered, we do not only fire the return statement but also render method of the class componenent. Which can be very useful!\r\n>This is something we can also use to conditionally render some elements:\r\n``` es6\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18 },\r\n      { name: \"Pete\", age: 15 },\r\n    ],\r\n    showPersons: true,\r\n  };\r\n\r\n  handleClick = (newName) => {\r\n    this.setState({\r\n      persons: [\r\n        { name: newName, age: 18 },\r\n        { name: \"Pete\", age: 15 },\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      persons: [\r\n        { name: event.target.value, age: 18 },\r\n        { name: \"Pete\", age: 15 },\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleVisibility = () => {\r\n    this.setState({ showPersons: !this.state.showPersons });\r\n  };\r\n\r\n  render() {\r\n    let persons = null;\r\n    if (this.state.showPersons) {\r\n      persons = (\r\n        <div>\r\n          <Person\r\n            name={this.state.persons[0].name}\r\n            age={this.state.persons[0].age}\r\n            nameChanger={this.handleChange}\r\n            handleHeaderClick={() => this.handleClick(\"Woooooow\")}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <button onClick={this.handleVisibility}>hide/show elements</button>\r\n        <div>{persons}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n**Outputing lists dynamically**\r\n>Imagine we have list of persons and we dont want to manually add each person as a component in the App.js return statement, we want a function which will map through all persons and output them automatically, so that we can get new person displayed if list has more persons, etc.\r\n>We can use a map function which will iterate through the array of persons and output JSX components for each othem, which can be then displayed in return statement:\r\n``` es6\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18 },\r\n      { name: \"Pete\", age: 15 },\r\n      { name: \"Jess\", age: 5 },\r\n    ],\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.persons.map((person) => {\r\n          return (\r\n            <Person\r\n              name={person.name}\r\n              age={person.age}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n```\r\n>What if we also want to render a delete button next to each person, which will then delete the entire person row!! \r\nApp.js\r\n``` es6\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18 },\r\n      { name: \"Pete\", age: 15 },\r\n      { name: \"Jess\", age: 5 },\r\n    ],\r\n  };\r\n\r\n  deleteHandler = (toDelete) => {\r\n    this.setState({\r\n        persons: this.state.persons.filter((person)=>person.name !== toDelete)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.persons.map((person) => {\r\n          return (\r\n            <Person\r\n              delete={this.deleteHandler}\r\n              name={person.name}\r\n              age={person.age}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n```\r\nPerson.js\r\n``` es6\r\nexport const Person = (props) => {\r\n    return (\r\n        <div className=\"Person\">\r\n        <h2>I am a {props.name} and I am {props.age} years old</h2>\r\n        <button onClick={()=>props.delete(props.name)}>Delete me</button>\r\n        </div>\r\n    )\r\n}\r\n```\r\n>PLease note any time you deal with a List and maybe iterate through it to generate components, you should always assign it a key property. It helps React to know which element needs to be re-rendered instead of every time rendering the whole list (because for react each element of the list is the same, it does not inspect deeply that maybe one element is Jess another Pete).\r\n\r\n>For that, when we render the Person components, we should add the key and its valueshould be unique. We can use index of the array as key. Map function returns second argument index:\r\n``` es6\r\n{this.state.persons.map((person, index) => {\r\n          return (\r\n            <Person\r\n              delete={this.deleteHandler}\r\n              name={person.name}\r\n              age={person.age}\r\n              key={index}\r\n            />\r\n          );\r\n        })}\r\n```\r\n> Please note that `key` and `ref` are reserved words and they cannot be used in child component as props. `props.key` or `props.ref` will not work. Alternatively you can use some other prop with same value such as `keyId` which you will be able to use in child component as props:\r\n``` es6\r\n{this.state.persons.map((person, index) => {\r\n          return (\r\n            <Person\r\n              delete={this.deleteHandler}\r\n              name={person.name}\r\n              age={person.age}\r\n              key={index}\r\n              keyId={index}\r\n            />\r\n          );\r\n        })}\r\n```\r\n>How to make sure that we also display input for each person and it will update the state of that given person?\r\nApp.js\r\n``` es6\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18, id:\"01\" },\r\n      { name: \"Pete\", age: 15, id:\"02\"},\r\n      { name: \"Jess\", age: 5, id:\"03\"},\r\n    ],\r\n  };\r\n\r\n  deleteHandler = (toDelete) => {\r\n    this.setState({\r\n        persons: this.state.persons.filter((person)=>person.name !== toDelete)\r\n    })\r\n  }\r\nhandleChange = (event, id) => {\r\nconst newPersons= this.state.persons.map(person=>{\r\n    if(person.id===id){\r\n        return {...person, name:event.target.value}\r\n    } else { return person}\r\n})\r\nthis.setState({persons: newPersons})\r\n}\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.persons.map((person) => {\r\n          return (\r\n            <Person\r\n              delete={this.deleteHandler}\r\n              name={person.name}\r\n              age={person.age}\r\n              key={person.id}\r\n              onChange={(event)=>this.handleChange(event, person.id)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n```\r\nPerson.js\r\n``` es6\r\nexport const Person = (props) => {\r\n    return (\r\n        <div className=\"Person\">\r\n        <h2>I am a {props.name} and I am {props.age} years old</h2>\r\n        <button onClick={()=>props.delete(props.name)}>Delete me</button>\r\n        <input type=\"text\" onChange={props.onChange}/>\r\n        </div>\r\n    )\r\n}\r\n```\r\n\r\n**Conditionally style elements**\r\n>We can use ternary statement to render different colors of the background in Person.js\r\n``` es6\r\nexport const Person = (props) => {\r\n    const color= props.age >10 ? \"green\" : \"orange\"\r\n    return (\r\n        <div className=\"Person\" style={{backgroundColor: color}}>\r\n        <h2>I am a {props.name} and I am {props.age} years old</h2>\r\n        <button onClick={()=>props.delete(props.name)}>Delete me</button>\r\n        <input type=\"text\" onChange={props.onChange}/>\r\n        </div>\r\n    )\r\n}\r\n```\r\n**Setting class named dynamically**\r\n> What if we want to make class names dynamic as well?\r\nPerson.css\r\n``` es6\r\n.red {\r\n  color: red;\r\n}\r\n.bold {\r\n  font-weight: bold;\r\n}\r\n```\r\nPerson.js\r\n``` es6\r\nexport const Person = (props) => {\r\n    const color= props.age >10 ? \"green\" : \"orange\"\r\n    let classes= []\r\n    \r\n    if (props.age <=15){\r\n        classes.push(\"bold\")\r\n    }\r\n    if (props.age <=5){\r\n        classes.push(\"red\")\r\n    }\r\n    return (\r\n        <div className=\"Person\" style={{backgroundColor: color}}>\r\n        <p className={classes.join(' ')}>I am a {props.name} and I am {props.age} years old</p>\r\n        <button onClick={()=>props.delete(props.name)}>Delete me</button>\r\n        <input type=\"text\" onChange={props.onChange}/>\r\n        </div>\r\n    )\r\n}\r\n```\r\n**Pseudo selectors and media queries**\r\n>Pseudo selecotrs are for example hover, focus, active, etc\r\n``` es6\r\nbutton:hover {\r\n    backgroundColor: blue;\r\n}\r\n```\r\n>Pseudo selectors cannot be used inline in React! But if we cannot use them inline, then we would need to import a css stylesheet, which will however mean that now the styles will be GLOBAL and not local (like inline styles are) - scoped to our component.\r\n\r\n>Same is true for media queries which cannot be used inline. Media queries are techniques in CSS which use `@media` rule to include a block of CSS properties only if a certain condition is true. For example if the browser window is smaller than 600px, etc.\r\n``` es6\r\n@media only screen and (max-width: 600px) {\r\n  body {\r\n    background-color: lightblue;\r\n  }\r\n}\r\n```\r\n\r\n``` es6\r\n/* For mobile phones: */\r\n[class*=\"col-\"] {\r\n  width: 100%;\r\n}\r\n\r\n@media only screen and (min-width: 768px) {\r\n  /* For desktop: */\r\n  .col-1 {width: 8.33%;}\r\n  .col-2 {width: 16.66%;}\r\n  .col-3 {width: 25%;}\r\n  .col-4 {width: 33.33%;}\r\n  .col-5 {width: 41.66%;}\r\n  .col-6 {width: 50%;}\r\n  .col-7 {width: 58.33%;}\r\n  .col-8 {width: 66.66%;}\r\n  .col-9 {width: 75%;}\r\n  .col-10 {width: 83.33%;}\r\n  .col-11 {width: 91.66%;}\r\n  .col-12 {width: 100%;}\r\n}\r\n```\r\n>To solve this, we can use a 3rd party software (package) which enables us to use pseudo selectors or media queries in javascript files. It is called radium and is a popular React package. In terminal type:\r\n```\r\nnpm install --save radium\r\n```\r\n>In order to use it, we need to import the radium to our file (for example App.js)\r\n``` es6\r\nimport Radium from 'radium'\r\n``` \r\n\r\n> Radium is a HOC - higher order component which we can use to wrap our App component upon export\r\n``` es6\r\nexport default Radium(App)\r\n```\r\n>It injects some functionality to App component. We can use it on any component.\r\n\r\n>Now how to use our hover pseudo selector?\r\n``` es6\r\n const buttonStyle= {\r\n          border: \"none\",\r\n          color: \"black\",\r\n          backgroundColor: \"turquoise\",\r\n          ':hover': {\r\n            color: \"white\",\r\n            backgroundColor: \"blue\"\r\n          }\r\n      }\r\n```\r\n>Whole component looks like this:\r\n``` es6\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Radium from 'radium'\r\nimport { Person } from \"./Person/Person\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18, id:\"01\" },\r\n      { name: \"Pete\", age: 15, id:\"02\"},\r\n      { name: \"Jess\", age: 5, id:\"03\"},\r\n    ],\r\n  };\r\n\r\n  deleteHandler = (toDelete) => {\r\n    this.setState({\r\n        persons: this.state.persons.filter((person)=>person.name !== toDelete)\r\n    })\r\n  }\r\nhandleChange = (event, id) => {\r\nconst newPersons= this.state.persons.map(person=>{\r\n    if(person.id===id){\r\n        return {...person, name:event.target.value}\r\n    } else { return person}\r\n})\r\nthis.setState({persons: newPersons})\r\n}\r\n  render() {\r\n      let buttonStyle= {\r\n          border: \"none\",\r\n          color: \"black\",\r\n          backgroundColor: \"turquoise\",\r\n          ':hover': {\r\n            color: \"white\",\r\n            backgroundColor: \"blue\"\r\n          }\r\n      }    \r\n    return (\r\n      <div className=\"App\">\r\n        <button style={buttonStyle}>Hover State</button>\r\n        {this.state.persons.map((person) => {\r\n          return (\r\n            <Person\r\n              delete={this.deleteHandler}\r\n              name={person.name}\r\n              age={person.age}\r\n              key={person.id}\r\n              onChange={(event)=>this.handleChange(event, person.id)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Radium(App);\r\n```\r\n\r\n>We can also conditionally change styles for pseudo selector in if condition. In order ot do it we will write:\r\n``` es6\r\nif (this.state.persons.length<=2){\r\n        buttonStyle.backgroundColor= \"orange\";\r\n        buttonStyle.color=\"red\";\r\n        buttonStyle[\":hover\"]={\r\n          color: \"white\",\r\n          backgroundColor: \"green\"\r\n        }\r\n    }\r\n```\r\n>Whole App component then looks like this:\r\n``` es6\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Radium from 'radium'\r\nimport { Person } from \"./Person/Person\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18, id:\"01\" },\r\n      { name: \"Pete\", age: 15, id:\"02\"},\r\n      { name: \"Jess\", age: 5, id:\"03\"},\r\n    ],\r\n  };\r\n\r\n  deleteHandler = (toDelete) => {\r\n    this.setState({\r\n        persons: this.state.persons.filter((person)=>person.name !== toDelete)\r\n    })\r\n  }\r\nhandleChange = (event, id) => {\r\nconst newPersons= this.state.persons.map(person=>{\r\n    if(person.id===id){\r\n        return {...person, name:event.target.value}\r\n    } else { return person}\r\n})\r\nthis.setState({persons: newPersons})\r\n}\r\n  render() {\r\n      const buttonStyle= {\r\n          border: \"none\",\r\n          color: \"black\",\r\n          backgroundColor: \"turquoise\",\r\n          ':hover': {\r\n            color: \"white\",\r\n            backgroundColor: \"blue\"\r\n          }\r\n      }\r\n      if (this.state.persons.length<=2){\r\n        buttonStyle.backgroundColor= \"orange\";\r\n        buttonStyle.color=\"red\";\r\n        buttonStyle[\":hover\"]={\r\n          color: \"white\",\r\n          backgroundColor: \"green\"\r\n        }\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <button style={buttonStyle}>Hover State</button>\r\n        {this.state.persons.map((person) => {\r\n          return (\r\n            <Person\r\n              delete={this.deleteHandler}\r\n              name={person.name}\r\n              age={person.age}\r\n              key={person.id}\r\n              onChange={(event)=>this.handleChange(event, person.id)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Radium(App);\r\n```\r\n**Media queries**\r\n>We can override styles in css file with media queries. For example we might want to say that for screen width 500px and more, we want to change the width of and item like this:\r\nPerson.css\r\n``` es6\r\n.Person {\r\n  width: 60%;\r\n  margin: 16px auto;\r\n  border: 1px solid #eeeeee;\r\n  box-shadow: 0 2px 3px #cccccc;\r\n  padding: 16px;\r\n  text-align: center;\r\n}\r\n@media (min-width: 500px){\r\n    .Person {\r\n        width: 100%\r\n    }\r\n}\r\n```\r\n>With Radium we can also do this inline:\r\n``` es6\r\nconst styling={\r\n        \"@media (min-width: 500px)\": {\r\n            width: \"100%\"\r\n        }\r\n    }\r\n```\r\n>But in order to make it work, we will need to also import a special component StyleRoot provided by Radium and wrap entire app in it in App.js\r\n``` es6\r\nimport Radium, { StyleRoot } from 'radium'\r\n```\r\n>Whole code looks like this:\r\nApp.js\r\n``` es6\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Radium, { StyleRoot } from \"radium\";\r\nimport Person from \"./Person/Person\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18, id: \"01\" },\r\n      { name: \"Pete\", age: 15, id: \"02\" },\r\n      { name: \"Jess\", age: 5, id: \"03\" },\r\n    ],\r\n  };\r\n\r\n  deleteHandler = (toDelete) => {\r\n    this.setState({\r\n      persons: this.state.persons.filter((person) => person.name !== toDelete),\r\n    });\r\n  };\r\n  handleChange = (event, id) => {\r\n    const newPersons = this.state.persons.map((person) => {\r\n      if (person.id === id) {\r\n        return { ...person, name: event.target.value };\r\n      } else {\r\n        return person;\r\n      }\r\n    });\r\n    this.setState({ persons: newPersons });\r\n  };\r\n  render() {\r\n    const buttonStyle = {\r\n      border: \"none\",\r\n      color: \"black\",\r\n      backgroundColor: \"turquoise\",\r\n      \":hover\": {\r\n        color: \"white\",\r\n        backgroundColor: \"blue\",\r\n      },\r\n    };\r\n    if (this.state.persons.length <= 2) {\r\n      buttonStyle.backgroundColor = \"orange\";\r\n      buttonStyle.color = \"red\";\r\n      buttonStyle[\":hover\"] = {\r\n        color: \"white\",\r\n        backgroundColor: \"green\",\r\n      };\r\n    }\r\n    return (\r\n      <StyleRoot>\r\n        <div className=\"App\">\r\n          <button style={buttonStyle}>Hover State</button>\r\n          {this.state.persons.map((person) => {\r\n            return (\r\n              <Person\r\n                delete={this.deleteHandler}\r\n                name={person.name}\r\n                age={person.age}\r\n                key={person.id}\r\n                onChange={(event) => this.handleChange(event, person.id)}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </StyleRoot>\r\n    );\r\n  }\r\n}\r\nexport default Radium(App);\r\n```\r\nPerson.js\r\n``` es6\r\nimport React from 'react';\r\nimport \"./Person.css\" \r\nimport Radium from 'radium';\r\nconst Person = (props) => {\r\n    const styling={\r\n        \"@media (min-width: 500px)\": {\r\n            width: \"100%\"\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"Person\" style={styling}>\r\n        <p>I am a {props.name} and I am {props.age} years old</p>\r\n        <button onClick={()=>props.delete(props.name)}>Delete me</button>\r\n        <input type=\"text\" onChange={props.onChange}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Radium(Person)\r\n```\r\n**Styled components**\r\n>Styled components is another popular react 3rd party library which makes it easier to style components. In order to install it write in your terminal\r\n``` es6\r\nnpm install --save styled-components\r\n```\r\n>Styled components enable using css styling in Javascript. We need to import them with:\r\n``` es6\r\nimport styled from \"styled-components\";\r\n```\r\n>This imports `styled` object which has for example a button method!! It can be used in this way:\r\n``` es6\r\nconst Button = styled.button``\r\n```\r\n> Two backticks is a Vanilla javascript for tagged template literals. Two backticks are used instead of two parentheces with function arguments which are used for normal functions. Between two backtics, we can pass some strings which are then passed to the button method in a special way.\r\n\r\n> Please note that backticks without being part of a method is also a regular Javascript to create strings\r\n\r\n>Object styled allows a method for any HTML element you can create, such as styled.div, styled.input, styled.h1, etc\r\n\r\n>Styled object with its methods return React components. Easiest way to use them is to assign them to our own component and the use in code:\r\n``` es6\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledDiv = styled.div`\r\n  width: 60%;\r\n  margin: 16px auto;\r\n  border: 1px solid #eeeeee;\r\n  box-shadow: 0 2px 3px #cccccc;\r\n  padding: 16px;\r\n  text-align: center;\r\n`;\r\nconst Person = (props) => {\r\n  return (\r\n    <StyledDiv>\r\n      <p>\r\n        I am a {props.name} and I am {props.age} years old\r\n      </p>\r\n      <button onClick={() => props.delete(props.name)}>Delete me</button>\r\n      <input type=\"text\" onChange={props.onChange} />\r\n    </StyledDiv>\r\n  );\r\n};\r\nexport default Person;\r\n```\r\n>Please note, we do not longer need a separate css for Person, as all our styles are coming from StyledComponent.\r\n\r\n> Please also note that we pass regular css (not react inline css) between two backticks. So code needs to look like: `text-align: center` and not like `textAlign: \"center\"`\r\n\r\n>Advantage is that we can also pass in pseudo selectors and media queries:\r\n``` es6\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledDiv = styled.div`\r\n  width: 60%;\r\n  margin: 16px auto;\r\n  border: 1px solid #eeeeee;\r\n  box-shadow: 0 2px 3px #cccccc;\r\n  padding: 16px;\r\n  text-align: center;\r\n  &:hover {\r\n      background-color: blue;\r\n  }\r\n  @media (min-width: 500px){\r\n      width: 100%\r\n  }\r\n`;\r\nconst Person = (props) => {\r\n  return (\r\n    <StyledDiv>\r\n      <p>\r\n        I am a {props.name} and I am {props.age} years old\r\n      </p>\r\n      <button onClick={() => props.delete(props.name)}>Delete me</button>\r\n      <input type=\"text\" onChange={props.onChange} />\r\n    </StyledDiv>\r\n  );\r\n};\r\nexport default Person;\r\n```\r\n>Notice however that for pseudo selectors you need to add `&` in front of the pseudo selector\r\n\r\n>If we create for example a StyledButton we can still add onClick handlers just like before.\r\n\r\n>How do styled components work in the backend? Outputs of the methods are React components (such as div) together with a class names which are added to each component. \r\n\r\n>Apart from that in the HTML file, you will see that styled component adds in the head tag of the document another tag called style where it imports all the styles for those classes.\r\n\r\n>How to use conditional styles with styled components? We can add a prop to our StyledButton with any name and pass there for example state, based on which we want to conditionally render the styles.\r\n``` es6\r\n<StyledButton alt={this.state.persons}>Click me</StyledButton>\r\n```\r\n>Then in the definition of StyledButton we have two backtics which is a template literal and will output a string. But with a special synstax we can inject dynamic values. Syntax is dollar sign and two curly braces: `${}`. In between of curly braces we can pass a function which will receive props from the component and then return something. For its return, we can then use ternary expression to conditionally render different states:\r\n``` es6\r\nconst StyledButton= styled.button`\r\nbackground-color: ${props => props.alt.length <=2 ? \"blue\" : \"orange\"};\r\n&:hover {\r\n    background-color: blue;\r\n}\r\n`\r\n```\r\n> Whole App component can look like this:\r\n``` es6\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Person from \"./Person/Person\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledButton= styled.button`\r\nbackground-color: ${props => props.alt.length <=2 ? \"blue\" : \"orange\"};\r\n&:hover {\r\n    background-color: blue;\r\n}\r\n`\r\n\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18, id: \"01\" },\r\n      { name: \"Pete\", age: 15, id: \"02\" },\r\n      { name: \"Jess\", age: 5, id: \"03\" },\r\n    ],\r\n  };\r\n\r\n  deleteHandler = (toDelete) => {\r\n    this.setState({\r\n      persons: this.state.persons.filter((person) => person.name !== toDelete),\r\n    });\r\n  };\r\n  handleChange = (event, id) => {\r\n    const newPersons = this.state.persons.map((person) => {\r\n      if (person.id === id) {\r\n        return { ...person, name: event.target.value };\r\n      } else {\r\n        return person;\r\n      }\r\n    });\r\n    this.setState({ persons: newPersons });\r\n  };\r\n\r\n  \r\n  render() {\r\n    return (\r\n        <div className=\"App\">\r\n          <StyledButton alt={this.state.persons}>Click me</StyledButton>\r\n          {this.state.persons.map((person) => {\r\n            return (\r\n              <Person\r\n                delete={this.deleteHandler}\r\n                name={person.name}\r\n                age={person.age}\r\n                key={person.id}\r\n                onChange={(event) => this.handleChange(event, person.id)}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n```\r\n>Please note that the function we pass between two backtics, can be anything Javascriptish, but the return should be a string\r\n``` es6\r\nconst StyledButton= styled.button`\r\nbackground-color: ${props => {\r\n    console.log(\"I do anything\")\r\n    return (\r\n        props.alt.length <=2 ? \"blue\" : \"orange\")}\r\n    };\r\n&:hover {\r\n    background-color: blue;\r\n}\r\n`\r\n```\r\n**CSS modules**\r\n>By default styles in the .css file are global! They do not only belong to the component, where they are imported. They will be applied to any component in the entire app.\r\n\r\n>It can be demonstrated like this:\r\nPerson.css\r\n``` es6\r\nbutton {\r\n    background-color: green;\r\n}\r\n```\r\nPerson.js\r\n``` es6\r\nimport React from \"react\";\r\nimport './Person.css'\r\n\r\nconst Person = (props) => {\r\n  return (\r\n    <div>\r\n      <p>\r\n        I am a {props.name} and I am {props.age} years old\r\n      </p>\r\n      <button onClick={() => props.delete(props.name)}>Delete me</button>\r\n      <input type=\"text\" onChange={props.onChange} />\r\n    </div>\r\n  );\r\n};\r\nexport default Person;\r\n```\r\nApp.js\r\n``` es6\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Person from \"./Person/Person\";\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18, id: \"01\" },\r\n      { name: \"Pete\", age: 15, id: \"02\" },\r\n      { name: \"Jess\", age: 5, id: \"03\" },\r\n    ],\r\n  };\r\n  deleteHandler = (toDelete) => {\r\n    this.setState({\r\n      persons: this.state.persons.filter((person) => person.name !== toDelete),\r\n    });\r\n  };\r\n  handleChange = (event, id) => {\r\n    const newPersons = this.state.persons.map((person) => {\r\n      if (person.id === id) {\r\n        return { ...person, name: event.target.value };\r\n      } else {\r\n        return person;\r\n      }\r\n    });\r\n    this.setState({ persons: newPersons });\r\n  };\r\n  render() {\r\n    return (\r\n        <div className=\"App\">\r\n          <button>Click me</button>\r\n          {this.state.persons.map((person) => {\r\n            return (\r\n              <Person\r\n                delete={this.deleteHandler}\r\n                name={person.name}\r\n                age={person.age}\r\n                key={person.id}\r\n                onChange={(event) => this.handleChange(event, person.id)}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n```\r\n>All buttons also button in App.js will be green.\r\n\r\n>CSS modules is another way how we can scope regular css stylesheet only to the specific component.\r\n>In order to use CSS modules, we need to check which `react-scripts` version we are using in Package.json. If we are using version 1 of `react-scripts`, then we need to tweak the configuration.\r\n\r\n>We will first quit our local development server and then go to terminal and write: `npm run eject`. It will eject webpack config file which is normally only used under the hood but not ejected. This wil allow us to tweak a bit how our code is bundled together.\r\n>When we confirm this, we will get `scripts` and `config` folder\r\n>In config folder, we can find a `webpack.config.dev.js` and `webpack.config.prod.js`file\r\n\r\n>Package.json also changed and we have way more information there\r\n\r\n>For CSS modules to work, we need to go to `webpack.config.dev.js` to the section of `test: /\\.css$/,`. We will tweak the options.\r\n>That part of the config will look like this:\r\n``` es6\r\n {\r\n            test: /\\.css$/,\r\n            use: [\r\n              require.resolve('style-loader'),\r\n              {\r\n                loader: require.resolve('css-loader'),\r\n                options: {\r\n                  importLoaders: 1,\r\n                },\r\n              },\r\n              {\r\n                loader: require.resolve('postcss-loader'),\r\n                options: {\r\n                  // Necessary for external CSS imports to work\r\n                  // https://github.com/facebookincubator/create-react-app/issues/2677\r\n                  ident: 'postcss',\r\n                  plugins: () => [\r\n                    require('postcss-flexbugs-fixes'),\r\n                    autoprefixer({\r\n                      browsers: [\r\n                        '>1%',\r\n                        'last 4 versions',\r\n                        'Firefox ESR',\r\n                        'not ie < 9', // React doesn't support IE8 anyway\r\n                      ],\r\n                      flexbox: 'no-2009',\r\n                    }),\r\n                  ],\r\n                },\r\n              },\r\n            ],\r\n          },\r\n```\r\n>To the options we add following syntax:\r\n``` es6\r\nmodules: true,\r\nlocalIdentName: '[name]__[local]__[hash:base64:5]'\r\n```\r\n>So that the config part will  look like this:\r\n``` es6\r\n {\r\n            test: /\\.css$/,\r\n            use: [\r\n              require.resolve('style-loader'),\r\n              {\r\n                loader: require.resolve('css-loader'),\r\n                options: {\r\n                importLoaders: 1,\r\n                modules: true,\r\n                localIdentName: '[name]__[local]__[hash:base64:5]'\r\n                },\r\n              },\r\n              {\r\n                loader: require.resolve('postcss-loader'),\r\n                options: {\r\n                  // Necessary for external CSS imports to work\r\n                  // https://github.com/facebookincubator/create-react-app/issues/2677\r\n                  ident: 'postcss',\r\n                  plugins: () => [\r\n                    require('postcss-flexbugs-fixes'),\r\n                    autoprefixer({\r\n                      browsers: [\r\n                        '>1%',\r\n                        'last 4 versions',\r\n                        'Firefox ESR',\r\n                        'not ie < 9', // React doesn't support IE8 anyway\r\n                      ],\r\n                      flexbox: 'no-2009',\r\n                    }),\r\n                  ],\r\n                },\r\n              },\r\n            ],\r\n          },\r\n```\r\n> `modules: true` will enable the CSS modules feature we are about to use.\r\n> `[name]__[local]__[hash:base64:5]` will used by CSS modules to dynamically generate unique css class names\r\n> We need to do the same in the `webpack.config.prod.js`file. Please not it should be under `use:` section in `options:`\r\n> Now we can start the app again with `npm start`\r\n> Now we need to import our css file differently:\r\n> Instead of normal import:\r\n``` es6\r\nimport \"./App.css\";\r\n```\r\n>We need to import `classes` object\r\n``` es6\r\nimport classes from \"./App.css\";\r\n```\r\n>This `classes` object will have properties which will be exactly those css selectors we defined in App.css\r\n>Our App.css has a selector for class names \"App\" \r\n``` es6\r\n.App {\r\n  text-align: center;\r\n}\r\n```\r\n>So now the `classes` object will have a property `App`:\r\n``` es6\r\nclassName={classes.App}\r\n```\r\n>Whole App component will look like this:\r\n``` es6\r\nimport React, { Component } from \"react\";\r\nimport classes from \"./App.css\";\r\nimport Person from \"./Person/Person\";\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18, id: \"01\" },\r\n      { name: \"Pete\", age: 15, id: \"02\" },\r\n      { name: \"Jess\", age: 5, id: \"03\" },\r\n    ],\r\n  };\r\n  deleteHandler = (toDelete) => {\r\n    this.setState({\r\n      persons: this.state.persons.filter((person) => person.name !== toDelete),\r\n    });\r\n  };\r\n  handleChange = (event, id) => {\r\n    const newPersons = this.state.persons.map((person) => {\r\n      if (person.id === id) {\r\n        return { ...person, name: event.target.value };\r\n      } else {\r\n        return person;\r\n      }\r\n    });\r\n    this.setState({ persons: newPersons });\r\n  };\r\n  render() {\r\n    return (\r\n        <div className={classes.App}>\r\n          <button>Click me</button>\r\n          {this.state.persons.map((person) => {\r\n            return (\r\n              <Person\r\n                delete={this.deleteHandler}\r\n                name={person.name}\r\n                age={person.age}\r\n                key={person.id}\r\n                onChange={(event) => this.handleChange(event, person.id)}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n```\r\n>CSS module make sure that upon build (bundling and compilation) we do not import css files, as before (globally) but it detects this new way of importing css: `import classes from \"./App.css\";` and it looks into those css files. It then transforms each css class we define there into an automatically generated (random) unique class name and returns us a map between those randomly genrated class names and class names we assigned in the css file. For example class name: `App__Button__2_NDl`\r\n>Advantage is that then our class names will be completely unique and cannot clash with other components in other files.\r\n>CSS modules allow us to write css styles in css files which will be only scoped to this particular component\r\n>How can we apply dynamic styles on those? We will need to assign a new selector which will have different styling we want to then conditionally apply\r\nPerson.css:\r\n``` es6\r\n.blue {\r\n    background-color: blue;\r\n}\r\n.red {\r\n    background-color: red;\r\n}\r\n```\r\n>Then in the Person.js we can use ternary statement to conditionally render the styles:\r\nPerson.js\r\n``` es6\r\nimport React from \"react\";\r\nimport classes from './Person.css'\r\nconst Person = (props) => {\r\n  return (\r\n    <div>\r\n      <p>\r\n        I am a {props.name} and I am {props.age} years old\r\n      </p>\r\n      <button className={props.age <=5 ? classes.blue : classes.red} onClick={() => props.delete(props.name)}>Delete me</button>\r\n      <input type=\"text\" onChange={props.onChange} />\r\n    </div>\r\n  );\r\n};\r\nexport default Person;\r\n```\r\n>Alternatively we can create a styles string:\r\n``` es6\r\nimport React from \"react\";\r\nimport classes from './Person.css'\r\nconst Person = (props) => {\r\n    let styling=[]\r\n    if(props.age <=5){\r\n        styling.push(classes.red)\r\n    } else {\r\n        styling.push(classes.blue)\r\n    }\r\n    console.log(styling)\r\n  return (\r\n    <div>\r\n      <p>\r\n        I am a {props.name} and I am {props.age} years old\r\n      </p>\r\n      <button className={styling.join(\" \")} onClick={() => props.delete(props.name)}>Delete me</button>\r\n      <input type=\"text\" onChange={props.onChange} />\r\n    </div>\r\n  );\r\n};\r\nexport default Person;\r\n```\r\n>CSS modules allow us to use media queries, just like regular css, there is nothing special about it, as long as we use the special import and special way to write className\r\n``` es6\r\nimport classes from './Person.css'\r\nclassName={classes.Person}\r\n```\r\n>If you are using react-scripts version 2 or higher, css modules are enabled automatically, so you do not need to tweak any config, but you need to name your css files as:\r\n``` es6\r\nPerson.module.css\r\n```\r\n>And therefore you also need to import classes from `\"./Person.module.css\"`\r\n>More on css can be found here: https://github.com/css-modules/css-modules\r\n``` es6\r\n```\r\n>But what if I still want to use some global styles? In css file you can prefix the selector with :global .\r\n\r\nApp.css\r\n``` es6\r\n:global .GlobalStyle { ... } \r\n```\r\n>Now you can use `className=\"GlobalStyle\"`  anywhere in your app and receive that styling.\r\n\r\n**Debugging React Apps**\r\n>We can throw an error like this:\r\n``` es6\r\nconst randomNumber = Math.random()\r\n    if(randomNumber >0.5){\r\n        throw new Error(\"I am error!\")\r\n    }\r\n```\r\n>Often the application will encounter errors, our task is to catch those errors and handle them graciously! For that we will create ErrorBoundary component! Name can be something different but convention is ErrorBoundary. \r\n>Error Boundary is a HOC (Higher order component) which wraps other components with the goala to catch and handle errors caused by its children (components it is wrapped around)\r\n>We will setup a separate folder for it with a ErrorBoundary.js in in\r\n>Component will look like this:\r\n``` es6\r\nimport React, { Component } from \"react\";\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    hasError: false,\r\n    errorMessage: \"\",\r\n  };\r\n  componentDidCatch = (error, info) => {\r\n    this.setState({ hasError: true, errorMessage: error });\r\n  };\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>{this.state.errorMessage}</h1>;\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\nexport default ErrorBoundary;\r\n```\r\n>And then we will add it in App.js to wrap it around Person.js component. We also need to move key property to error boundary, because key always need to be on outer component!\r\n``` es6\r\nimport React, { Component } from \"react\";\r\nimport classes from \"./App.css\";\r\nimport Person from \"./Person/Person\";\r\nimport ErrorBoundary from \"./ErrorBoundary/ErrorBoundary\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { name: \"Adda\", age: 18, id: \"01\" },\r\n      { name: \"Pete\", age: 15, id: \"02\" },\r\n      { name: \"Jess\", age: 5, id: \"03\" },\r\n    ],\r\n  };\r\n\r\n  deleteHandler = (toDelete) => {\r\n    this.setState({\r\n      persons: this.state.persons.filter((person) => person.name !== toDelete),\r\n    });\r\n  };\r\n  handleChange = (event, id) => {\r\n    const newPersons = this.state.persons.map((person) => {\r\n      if (person.id === id) {\r\n        return { ...person, name: event.target.value };\r\n      } else {\r\n        return person;\r\n      }\r\n    });\r\n    this.setState({ persons: newPersons });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.App}>\r\n        <button>Click me</button>\r\n        {this.state.persons.map((person) => {\r\n          return (\r\n            <ErrorBoundary key={person.id}>\r\n              <Person\r\n                delete={this.deleteHandler}\r\n                name={person.name}\r\n                age={person.age}\r\n                onChange={(event) => this.handleChange(event, person.id)}\r\n              />\r\n            </ErrorBoundary>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n```\r\n**Class components and props**\r\n>Also calls components such as our App, can receive props. When accessing those props, we will need to use key word `this`.\r\n>Index.js will pass a prop projectTitle to App.js\r\n``` es6\r\n<App projectTitle=\"Person Manager\" />\r\n```\r\n>App will receive the prop and use it for example to pass to another component\r\n``` es6\r\n<Persons title={this.props.projectTitle} />\r\n```\r\n**Lifecycle methods**\r\n>Lifecycle methods are specific to class based components. Functional components have hooks which enable them such functionalities\r\n>Following lifecycle methods are available for class components:\r\n- constructor()\r\n- getDerivedStateFromProps()\r\n- shouldComponentUpdate()\r\n- getSnapshotBeforeUpdate()\r\n- componentDidUpdate()\r\n- componentDidCatch()\r\n- componentDidMount()\r\n- componentWillUnmount()\r\n- render()\r\n\r\n>React executes those methods for us at different runtimes and we can use them to do stuff with component at certain point of time. Such as: fetch data from web, do some cleanup work before component is removed from DOM, etc.\r\n\r\n**Creation of component**\r\n>Order of execution:\r\n- 1) constructor()\r\n- 2) getDerivedStateFromProps()\r\n- 3) render()\r\n- 4) every child component renders\r\n- 5) componentDidMount()\r\n\r\n> constructor(): When component is created, first constructor is called which will receive all props from the component and it `sets up the state`. If you use constructor then you HAVE TO call super(props)\r\n``` es6\r\nconstructor(props){\r\n   super(props)\r\n}\r\n```\r\n> Please note, it is not necessary to call constructor. It is only if we want to have our own logic of setting up initial state. But we shold NOT cause any side effects in constructor.\r\n\r\n>Side effects are for example sending HTTP request, or storing something in our local storage of the browser or sending some analytics to Google analytics. We do not want to execute these in constructor, because it can impact performance and cause unnecessary re-renders\r\n\r\n>getDerivedStateFromProps(props, state): When your props change you can `synch state` to them. This is a VERY VERY niche scenario. But we shold NOT cause any side effects in getDerivedStateFromProps.\r\n``` es6\r\n```\r\n> render(): Rednder methos is a lifecycle method for class based components which returns JSX. It prepares and structures the JSX.\r\nWe shold NOT cause any side effects in render.\r\n\r\n> After render runs, every CHILD COMPONENT is rendered.\r\n\r\n> When all lifecycle methods also of child components have finished, then we proceed with componentDidMount()\r\n\r\n>componentDidMount(): When component mounted, this method is called and here we CAN cause side effects, such as HTTP requests from the web! DO NOT update state here! DO NOT call setState in here. Exception is if it is in the the `then` block of the promise of HTTP request. This means that setState will execute at some point in future when HTTP request sends response from server. DO NOT call setState synchronously immediately as component mounts. Why? Cause it will triggere re-render and that is bad for performance.\r\n\r\n**Constructor**\r\n>There are 2 ways how to set initial state in the class based components\r\n\r\n>Older approach uses constuctor which receives props, where super(props) is called and state is initialized with this.state\r\n``` es6\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        persons: [\r\n           { id: \"asfa1\", name: \"Mia\", age: 18 },\r\n           { id: \"vasdf1\", name: \"Sam\", age: 19},\r\n           { id: \"asdf11\", name: \"Jess\", age: 5 },\r\n        ],\r\n        otherState: \"some other value\",\r\n        showPersons: false,\r\n        };\r\n    }\r\n  ....\r\n}\r\n```\r\n>Newer approach is to set state outside of the constructor and only use word `state`. Behind the scenes, what happens is that constructor is called, super is called and this.state is called to initialize the state.\r\n``` es6\r\nclass App extends Component {\r\nstate = {\r\n    persons: [\r\n      { id: \"asfa1\", name: \"Mia\", age: 18 },\r\n      { id: \"vasdf1\", name: \"Sam\", age: 19 },\r\n      { id: \"asdf11\", name: \"Jess\", age: 5 },\r\n    ],\r\n    otherState: \"some other value\",\r\n    showPersons: false,\r\n  };\r\n  ....\r\n}\r\n```\r\n**GetDerivedStateFromProps**\r\n>getDerivedStateFromProps(props, state) is a static method, so if we want to use it, we need to add word `static` in front of it. We will receive props and state in there. And we should return UPDATED STATE. Example is if some external changes (ex: user input) cause prop changes, you might want to update the state accordingly. But usually there is more elegant way how to update state based on outside/external properties. This simply synchs state to props. (DO NOT cause side effects in this lifecycle method)\r\n``` es6\r\nstatic getDerivedStateFromProps(props, state){\r\n    ...\r\n    return updatedState\r\n}\r\n```\r\n**Component update**\r\n>2 triggers to re-render a component: when state changes or when props change\r\n\r\n>Order of execution:\r\n- 1) getDerivedStateFromProps(props, state)\r\n- 2) shouldComponentUpdate(nextProps, nextState)\r\n- 3) render()\r\n- 4) update all child components\r\n- 5) getSnapshotBeforeUpdate(prevProps, prevState)\r\n- 6) componentDidUpdate()\r\n> shouldComponentUpdate(nextProps, nextState): Allows you to cancel the updating process!!! Here you can decide whether to continue and re-render the component or not. Why do we want to do that? For performance optimization. Here we need to return true or false (doing nothing is not an option). True means it will continue updating, it will return false if it should not update.\r\n``` es6\r\nshouldComponentUpdate(nextProps, nextState){\r\n    return true\r\n}\r\n```\r\n>getSnapshotBeforeUpdate(prevProps, prevState): this method happens right before component updates. It takes previous state and previous props as input and returns a snapshot object which we can freely configure. Niche lifecycle method used for last-minute DOM operations such as getting the current scrolling position of the user. Because then once we do the DOM update, then we can return to the position of the user scroll and getSnapshotBeforeUpdate can give us that scroll position right before the update. We should either return null or snapshot value.\r\n``` es6\r\ngetSnapshotBeforeUpdate(prevProps, prevState){\r\nreturn {message: \"I am a snapshot\"}\r\n}\r\n```\r\n>componentDidUpdate(previousProps, previousState, snapshot) signals that we are done updating and render has been executed. Here we can cause side effects like HTTP requests. But only setState within then block of a promise of HTTP request to prevent unnecessary re-renders. As props it receives previousProps, previousState, snapshot. The snapshot is from the  getSnapshotBeforeUpdate. Whatever getSnapshotBeforeUpdate method returns will be then passed to componentDidUpdate as the 3rd argument. So snapshot is used in a way, we save some data (scroll position of user) right before the update of component, and then use this data after the update in componentDidUpdate.\r\n``` es6\r\ncomponentDidUpdate(previousProps, previousState, snapshot){\r\nconsole.log(snapshot) // {message: \"I am a snapshot\"}\r\n}\r\n```\r\n**Methods which should not be used anymore**\r\n>There are some lifecycle methods which should not be really used anymore. For example: \r\n- componentWillMount\r\n- componentWillReceiveProps(props) - where props are the props component is getting for this update\r\n- componentWillUpdate()- runs before the componentDidUpdate()\r\n\r\n**Lifecycle methods in functional components**\r\n>Functional components can use hooks in order to get same funcionality as in class components.\r\n\r\n>useEffect is the second most important hook you can use. It is a hook which can handle life cycle methods. First important hook is useState\r\n\r\n>useEffect combines functionality of ALL lifecycle methods of class components in one React hook (function you can add to functional components).\r\n> First we need to import it\r\n``` es6\r\nimport React, { useEffect } from \"react\";\r\n\r\n```\r\n>We can use it in body of functional componet. This hook receives a `function` which (by default) will run at each render cycle of the component, so for every update or when component is created! We can for example send HTTP request. UseEffect is basically componentDidMount and componentDidUpdate in one effect.\r\n``` es6\r\nuseEffect( ()=> {} );\r\n```\r\n>How to use useEffect only the first time. We can pass an array as second argument to useEffect. If the array is empty, it will only be triggered the first time.\r\n``` es6\r\nuseEffect( ()=> {}, [] );\r\n```\r\n``` es6\r\nuseEffect( ()=> {console.log(\"Im triggered\")}, [] );\r\n```\r\n>What if we only want to run it when our props.persons change? then we can add it to the array\r\n``` es6\r\nuseEffect( ()=> {console.log(\"Im triggered\")}, [props.persons] );\r\n```\r\n>If there are more effects which depends on different data, then we can add more then one useEffect to to body of our functional component.\r\n\r\n**Cleaning up lifecycle methods in class based components**\r\n>Often in app we want to do some cleanup work. For example to remove some event listeners, etc.\r\n\r\n>In class based components we can use componentWillUnmount method. Any code that we want to run before the component is removed from DOM can be placed in componentWillUnmount\r\n``` es6\r\ncomponentWillUNmount(){\r\n    ...\r\n}\r\n```\r\n>For functional components we can use useEffect also for clean up. Normally we do not return anything from the useEffect!!! But we can return a function and this function will run BEFORE main useEffect function runs but AFTER the (first) render cycle.\r\n>This return function can be used for clean ups\r\n``` es6\r\nuseEffect(\r\n    ()=> {\r\n        console.log(\"Im triggered\")\r\n        return () => {console.log(\"cleanup\")}\r\n    }\r\n)\r\n```\r\n>With above code, the cleanup will not run upon the mounting of component, but then after it will run always `before` the component updates\r\n>If we pass empty array to the useEffect which means useEffect will only run upon mounting and dismounting, we will see that cleanup runs only when we unmount the component (in app js to have a button which toggls display of Cockpit component)\r\n\r\n``` es6\r\nuseEffect(\r\n    ()=> {\r\n        console.log(\"Im triggered\")\r\n        return () => {console.log(\"cleanup\")}\r\n    },[]\r\n)\r\n```\r\n\r\n> What if we had some function in the useEffect and we wanted to clean it up? We would need to assign it to variable for example `timer`. And we would then pass it to the return of the useEffect with word clear:\r\n``` es6\r\n    useEffect(()=> {\r\n        console.log(\"I am useEffect\")\r\n        const timer= setTimeout(\r\n            () => {\r\n                alert(\"bla\")\r\n            }, 500\r\n        )\r\n        return (\r\n            () => {\r\n                clearTimeout(timer)\r\n                console.log(\"cleanup work\")\r\n            }\r\n        )\r\n    }, [])\r\n```\r\n**Rendering in React**\r\n>Imagine that App is a parent component to Persons and Cockpit component. If anything changes in App component (state or props), both Cockpit and Parsons will re-render. Imagine we only change something in App component that only regards Cockpit component. Persons component will still re-render. Which is totally unnecessary and not optimal. What to do? We can use shouldComponentUpdate for that (in class components, or we can use extends PureComponent) to prevent unnecessary re-renders in Persons component. For functional based components we can use ReactMemo.\r\n>Useing shouldComponentUpdate in Persons component - we can say only re-render this component if my main prop: persons change, else keep it as it is. How to do it, compare nextProps to current props:\r\n``` es6\r\nshouldComponentUpdate(nextProps, nextState){\r\nif (nextProps.persons !== this.props.persons){\r\n    return true\r\n} else {\r\n    return false\r\n}\r\n}\r\n```\r\n> Please notice that this.props.persons is actually an array. When we want to compare two arrays, they are reference types and such comparison is only doing a shallow comparison. What does it mean? It only compares if array one is pointing in the memroy to the same address as the pointer for the array 2. It does not go through each element of the array and compares pointers of each element. No, arrays and objects are reference types and for such comparisons, only their pointers to memory addresses will be compared. Therefore it is SUPER IMPORTANT that any time we change props or state, we create NEW array or NEW OBJECT, such as: \r\n``` es6\r\nconst newArray=[...oldArray]\r\nthis.setState(newArray)\r\nconst newObject={...oldObject}\r\nthis.setState(newObject)\r\n```\r\n\r\n>Only then we can trully guarantee that our checks  and shouldComponentUpdate will work correctly. Lesson: NEVER MUTATE STATE OR PROPS.\r\n\r\n>In Developer tools when you click on settings (3 vertical dots) ->More tools ->Rendering you can check `Paint Flashing` option which will then enable highlightening of the components which rendered.\r\n\r\n>For functional components as they dont have shouldComponentUpdate, we can do the same using React.memo. React.memo uses memoization which is a technique where React will store a snapshot of this component and it will only re-render this only if the inputs to the component change. How to use it? Simply wrap your functional component in React.memo\r\n\r\n> You can do it at the default export\r\n``` es6\r\nexport default React.memo(Cockpit);\r\n```\r\n>Or with named export\r\n``` es6\r\nexport const Cockpit = React.memo( (props) => {\r\n....\r\n})\r\n```\r\n>Now logical conclusion would be to always use React.memo for functional components and shouldComponent update for class based components. Is it such a good idea? No, it is not. Why? Beause some components always change when their children change and to perform an extra check like shouldComponentUpdate is unnecessary. We should only implement it if my parent components updates and there are cases for which one particular child component is not interested in those changes and should not unnecessary update.\r\n\r\n>Pure components: When you have a class based component where you use shouldComponentUpdate and we want to perform a check to compare **all the props** that matter to the component, there is an easier way to do it rather than:\r\n``` es6\r\nshouldComponentUpdate(nextProps, nextState){\r\nif (nextProps.persons !== this.props.persons || nextProps.changed !== this.props.changed || nextProps.clicked !== this.props.clicked){\r\n    return true\r\n} else {\r\n    return false\r\n}\r\n}\r\n```\r\n>The better way is to extend a **PURE** component\r\n``` es6\r\nimport React, { PureComponent } from \"react\";\r\n\r\nclass Persons extends PureComponent {\r\n    ...\r\n}\r\n```\r\n> Pure component is just a normal component which already implemented complete shouldComponentUpdate check for **all** its props. extends PureComponent will have same result as full shouldComponentUpdate check.\r\n\r\n**How React renders REAL DOM**\r\n> When render() method is called it does NOT immediately render the the REAL DOME. This also applies to functional components (even though they do not have render() method, their return renders stuff). Render() is more like a suggestion of what the HTML should look like in the end. But render() can be called and lead to the same result as is already displayed. THat is also a reason why we use shouldComponentUpdate (so that we avoid unnecessary re-renders). And sometimes even a prop can change, but we will still render the same result (for whatever reason). And this still does not necessarily mean that it hits real DOM and that DOM starts to re-render.\r\n> IN fact what React render does it compares `virtual DOMS`. It has `old` VIRTUAL DOM and `new / future / re-rendered` VIRTUAL DOM. Why do we use virtual DOMs instead of real DOM? Virtual DOMs are faster.\r\n\r\n> Virtual DOM is a DOM representation in Javascript. You can represent ALL HTML elements (DOM elements) and objects in pure Javascript (without rendering anything to the browser). \r\n\r\n> React keeps 2 copies of the real dom: one is old virtual dom and second one is new/re-rendered virtual dom (which is created when the rende() method in class based component is called or when functional component returns soemthing).\r\n\r\n> Calling render() does not immediately update real DOM. It compares old aversus new virtual DOM and it checks if there are any differencies. If it can detect differencies, then it reaches out to the real DOM and updates it, but only at the places where differencies were detected. If no differencies were found, it does not touch the DOM.\r\n> Accessing the DOM is REALY SLOW. You want to do it as little as possible.\r\n\r\n**React return statement**\r\n>In React you can only return one root JSX element. \r\n``` es6\r\nreturn (\r\n    <div>\r\n       //other child elements\r\n    </div>\r\n)\r\n```\r\n>You cannot return 2 or more siblings/adjucent elements on the root level. \r\n``` es6\r\nreturn (\r\n    <div></div>\r\n    <div></div>\r\n)\r\n```\r\n>If we do so, we get an error that: `Adjacent JSX elements must be wrapped in an enclosing tag`\r\n\r\n>Therefore you need to always wrap your JSX in one single outer/root div or fragment `<>`.\r\n``` es6\r\nreturn (\r\n    <div>\r\n       //other child elements\r\n    </div>\r\n)\r\n```\r\n>or using fragment:\r\n``` es6\r\nreturn (\r\n    <>\r\n       //other child elements\r\n    </>\r\n)\r\n```\r\n>Exceptions are when we iterate through lists with the help of a map method. Even though we return the list of JSX  elements, in this case it is ok! And the reason why it is ok is that that there is a key on each element of an array!\r\n``` es6\r\nreturn this.props.persons.map(\r\n    (person, index) => {\r\n        return (\r\n            <Person key={person.id}>\r\n        )\r\n    }\r\n)\r\n```\r\n> So in order to render on the root level adjucent elements, we need to provide them as a list with keys!\r\n``` es6\r\nreturn [\r\n    <div key=\"01\"></div>, \r\n    <div key=\"02\"></div>,\r\n    <div key=\"03\"></div>\r\n]\r\n```\r\n> Another way how to render adjucent elements without needing to add another div which we do not need from structural perspective is adding a HOC (higher order component) - these are components which wrap other components.\r\n\r\n>We usually create a dedicated folder for hocs and in it let's create an `aux.js` file which stands for auxiliary. Windows users should call this file `auxiliary.js` as aux is reserved word on Windows.\r\n``` es6\r\nimport React from \"react\"\r\nconst Aux = (props) => props.children\r\nexport default Aux;\r\n```\r\n> children is a special property and it means anything that we wrap our aux component around. So anything between opening and closing tag of aux component. In the example below children would be the paragraph.\r\n``` es6\r\n<Aux>\r\n    <p></p>\r\n</Aux>\r\n```\r\n> In this example it would be an array or persons\r\n``` es6\r\nreturn (\r\n    <Aux>\r\n        this.props.persons.map(\r\n        (person, index) => {\r\n            return (\r\n                <Person key={person.id}>\r\n            )\r\n          }\r\n        )\r\n    </Aux>\r\n)\r\n```\r\n> React also has an built-in Aux component called React.Fragment part of react package.\r\n``` es6\r\nreturn (\r\n    <React.Fragment>\r\n        this.props.persons.map(\r\n        (person, index) => {\r\n            return (\r\n                <Person key={person.id}>\r\n            )\r\n          }\r\n        )\r\n    </React.Fragment>\r\n)\r\n```\r\n\r\n**HOC - Higher order components**\r\n> HOCs wrap other components and maybe add extra logic to it. For example HOC can add a class to the whole children tree. For that we will create a new file called `withClass.js`\r\n> Code can look like this:\r\n``` es6\r\nimport React from \"react\";\r\nconst WithClass = (props) => {\r\n  return <div clasName={props.classes}>{props.children}</div>;\r\n};\r\nexport default WithClass;\r\n```\r\n> In App.js we then replace our div with className with following:\r\n``` es6\r\nreturn (\r\n        <WithClass classes=\"App\">\r\n      <button onClick={this.handleRemoveCockpit} >Toggle Cockpit</button>\r\n        {this.state.showCockpit && <Cockpit title={this.props.projectTitle} persons={this.state.persons} toggl={this.togglePersonsHandler} />}\r\n       {persons}\r\n       </WithClass>\r\n    );\r\n```\r\n> Another way to write HOC is by creating regular javascript function (not a functional component)\r\n``` es6\r\nconst withClass = (WrappedComponent, className) => {\r\n  return \r\n};\r\nexport default withClass;\r\n```\r\n> This function accepts couple of arguments (can be many). One of the arguments is WrappedComponent, which will be component around which we will wrap that HOC. Another argument is for example className, but can be anything.\r\n> This function will return something weird... It will return FUNCTIONAL component. WHAAAAT????\r\n``` es6\r\nimport React from \"react\";\r\n\r\nconst withClass = (WrappedComponent, className) => {\r\n  return props => (\r\n      <div className={className}>\r\n          <WrappedComponent />\r\n      </div>\r\n  )\r\n};\r\nexport default withClass;\r\n```\r\n> Now how to use this weird thing?? We will not use it in our return statement of App component, we will use it at the export as a normal function with 2 arguments\r\n``` es6\r\nexport default withClass(App, \"App\");\r\n```\r\n\r\n**Updating state incorrectly**\r\n> State is not updated synchronously. It is asynchronous which mean React schedules it and sometimes things are chunked before state is updated or it only is updated when React has resources to update it. Therefore it is incorrect to use OLD state directly when we are setting new state!!! Why? Because the OLD state which we access directly is NOT guaranteed to be the latest state (it could be unexpected state)!!!\r\n> How to do it then? We can pass a function instead of the old state and this arrow function takes an argument previousState (and optionally props if we need them)\r\n> Example functional components - INCORRECT\r\n``` es6\r\nconst [rowVisible, setRowVisible] = React.useState(false)\r\n...\r\nonClick={() =>setRowVisible(!rowVisible)\r\n```\r\n> Example functional components - CORRECT way of updating state depending on the old state\r\n``` es6\r\nconst [rowVisible, setRowVisible] = React.useState(false)\r\nonClick={() =>setRowVisible((previousVisible)=> !previousVisible)\r\n```\r\n\r\n> Example class components - INCORRECT\r\n``` es6\r\nstate ={\r\n    counter: 0\r\n}\r\n...\r\nthis.setState({counter: this.state.counter+1})\r\n\r\n```\r\n> > Example class components - CORRECT way of updating state depending on the old state - here React guarantees the state is what we think it is\r\n``` es6\r\nstate ={\r\n    counter: 0\r\n}\r\n...\r\nthis.setState( (previousState, props) => {\r\n    return\r\n         {counter: previousState+1}\r\n    }\r\n)\r\n```\r\n> Read more: https://reactjs.org/docs/hooks-reference.html#functional-updates\r\n\r\n**Prop types**\r\n>React community built a package which helps you define types of props you pass to your components. You need to install it with \r\n``` es6\r\nnpm install --save prop-types\r\n```\r\n>Please note that `--save` means to save this entry in the `package.json` file\r\n\r\n> Then you can import PropTypes\r\n``` es6\r\nimport PropTypes from 'prop-types'\r\n```\r\n> Then after our component definition we can define prop types for examplpe for Person component\r\n``` es6\r\nPerson.propTypes= {\r\n    click: PropTypes.func,\r\n    name: PropTypes.string,\r\n    age: PropTypes.number,\r\n    changed: PropTypes.func\r\n}\r\n```\r\n>If some prop is required and not optional, then we can add `isRequired`:\r\n``` es6\r\nPerson.propTypes= {\r\n    click: PropTypes.func,\r\n    name: PropTypes.string.isRequired,\r\n    age: PropTypes.number,\r\n    changed: PropTypes.func\r\n}\r\n```\r\n\r\n> Of course another way to define props is using flow or typescript\r\n\r\n**Using reference - ref**\r\n> What if we want to focus our inputs when app starts? Javascript has a way to focus with document.querySelector\r\n``` es6\r\ncomponentDidMount(){\r\n    document.querySelector('input').focus();\r\n}\r\n```\r\n> Other super cool possibilities is to style a background of a paragraph:\r\n``` es6\r\ndocument.querySelector('p').style.backgroundColor = \"red\";\r\n```\r\n> We cal also use regular css selectors, like class selector `.mia` or ids with `#my-id`\r\n``` es6\r\ndocument.querySelector('.mia').style.backgroundColor = \"blue\";\r\ndocument.querySelector('#my-id').style.backgroundColor = \"green\";\r\n```\r\n> Of course these elements need to have those class names or ids:\r\n``` es6\r\n<p onClick={this.props.click} className=\"mia\">\r\n          I'm {this.props.name} and I am {this.props.age} years old!\r\n</p>\r\n<p id=\"my-id\">Hi</p>\r\n```\r\n>There are many other selectors, like selecting all occurances with `querySelectorAll()`. This selector returns an array of HTML elements which we want to select, so we will need to loop over them in order to style them\r\n``` es6\r\nconst x=document.querySelectorAll('p');\r\n        for (let i = 0; i < x.length; i++) {\r\n            x[i].style.backgroundColor = \"red\";\r\n}\r\n```\r\n> However, this is way is not the optimal way, because it takes into consideration first item it founds, so we cant focus for example the last element if we have more. React has its own way to handle this using references. Any element (including components) can have a special property called `ref`. \r\n> There are multiple ways how to use ref. One way is to pass anonymous arrow function with some arguments. First argument is the element itself on which I placed it on, for example inputElement\r\n``` es6\r\n<input ref={(inputEle)=>{ inputEle.focus()}} />\r\n```\r\n> We would do this if we wanted to directly use this inputElement in the ref function. \r\n\r\n> But what if we wanted to you it elsewhere? We could use following syntax to set a global reference in the class component to this element.\r\n``` es6\r\n<input ref={(inputEle)=>{ this.inputElement =inputEle}} />\r\n```\r\n> And then we can use it in for example in ComponentDidMount()\r\n``` es6\r\ncomponentDidMount(){\r\nthis.inputElement.focus()\r\n}\r\n```\r\n> Another way how to create ref is in the constructor\r\n``` es6\r\nconstructor(props){\r\n    super(props);\r\n    this.inputElementRef = React.createRef();\r\n}\r\n```\r\n> `this.inputElementRef = React.createRef();` is not my input, it is only a reference to ANY object React gives me as a reference\r\n\r\n> Then instead of an arrow function in a ref property of some element, I can use`this.inputElementRef`\r\n``` es6\r\n<input ref={this.inputElementRef} />\r\n\r\n```\r\n> Then I can use this in order to create the focus in componentDidMount. Please note, if we use React.createRef() we need ot access `current` property of our reference element!!\r\n``` es6\r\ncomponentDidMount(){\r\nthis.inputElementRef.currents.focus();\r\n}\r\n```\r\n> How to do this in functional component? We will use a hook called useRef hook\r\n``` es6\r\nimport React, {  useRef } from \"react\";\r\nconst toggleBtnRef= useRef()\r\n```\r\n> We will ne add our togglBtnRef to our button which we want to click automatically when you load the component:\r\n``` es6\r\n <button ref={toggleBtnRef} />\r\n```\r\n> And then we use our toggleBtnRef in useEffect to trigger that automated click:\r\n``` es6\r\nuseEffect(()=> {\r\n    toggleBtnRef.current.click()\r\n}, [])\r\n```\r\n**Passing props chain problem and solving it with Context**\r\n>IN bigger apps we will face a problem where we need ot pass a prop from the parent all the way down through component tree down to a child component. And maybe only the last child needs the prop and none of the other components are interested in it. This can be cumbersome and inconvenient. Therefore react created something called context!\r\n\r\n>Context enables to have some data (state) in multiple components without needing to pass them down the component tree\r\n>Let's set this up. We will start by creating a new file which will hold the context object:\r\n``` es6\r\nimport React from 'react'\r\n\r\nconst AuthContext = React.createContext()\r\n\r\nexport default AuthContext\r\n```\r\n> We can also add some default value for our context (but it is optional)\r\n``` es6\r\nimport React from 'react'\r\n\r\nconst AuthContext = React.createContext({ authenticated: false})\r\n\r\nexport default AuthContext\r\n```\r\n> But let us assume we do not do it and we start with just empty context\r\n> Then in our main component, for example in App.js, we import this context. \r\n``` es6\r\nimport AuthContext from '../context/AuthContext'\r\n```\r\n>Place where we put the context matter in these ways. Place it in the higher component where you have the state which needs to be passed down the tree. Use it to wrap the components which hold those components which need this data.\r\n>ON this level we wil use the property Provider of that context object to wrap other components by it where the context will be avaulable (on ALL of those components and beaneath them)\r\n``` es6\r\n <AuthContext.Provider value={ {authenticated: this.state.authenticated} }>\r\n```\r\n> Please not that we need double curly braces, because value needs and object. First pair of braces means its a dynamic object (not a static value), second pair of braces means we are actually pasing an object in there.\r\n> By setting the value we made part of our state be available to all components which are wrapped by our AuthContext:\r\n``` es6\r\n <AuthContext.Provider value={ {authenticated: this.state.authenticated, login: this.loginHandler} }>\r\n        <button onClick={this.handleRemoveCockpit} >Toggle Cockpitttt</button>\r\n        {this.state.showCockpit && <Cockpit title={this.props.projectTitle} persons={this.state.persons} toggl={this.togglePersonsHandler} />}\r\n       {persons}\r\n </AuthContext.Provider>\r\n```\r\n> Then how can one component down the tree use this value? Imagine we are in the Person component. Ofc we need to import the context and here we will CONSUME it!\r\n``` es6\r\nimport AuthContext from '../../../context/AuthContext'\r\n...\r\n<AuthContext.Consumer>{(context)=>\r\n<p>{context.authenticated ? 'Authenticated!' : 'LOGIN!!!'}</p>\r\n}</AuthContext.Consumer>\r\n```\r\n>Whole component looks like this:\r\n``` es6\r\nimport React, { Component } from \"react\";\r\nimport classes from \"./Person.css\";\r\nimport AuthContext from '../../../context/AuthContext'\r\n\r\nclass person extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.inputElementRef = React.createRef()\r\n    }\r\n    componentDidMount(){\r\n        this.inputElementRef.current.focus()\r\n    }\r\n  render() {\r\n    return (\r\n      <div className={classes.Person}>\r\n      <AuthContext.Consumer>{(context)=>\r\n      <p>{context.authenticated ? 'Authenticated!' : 'LOGIN!!!'}</p>\r\n    }</AuthContext.Consumer>\r\n        <p onClick={this.props.click} className=\"mia\">\r\n          I'm {this.props.name} and I am {this.props.age} years old!\r\n        </p>\r\n        <p id=\"my-id\">HI</p>\r\n        <p>{this.props.children}</p>\r\n        <input ref={this.inputElementRef} type=\"text\" onChange={this.props.changed} value={this.props.name} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default person;\r\n\r\n```\r\n> Please note very important thing. We wrap our paragraph by the AuthContext.Consumer. This component however, does not accept JSX elements as children!!! It onyl accepts an arrow function. This function receives as argument whole context object which we wanted to deliver here. This function returns the JSX elements where we want to use the context\r\n``` es6\r\n<AuthContext.Consumer>{(context)=>\r\n      <p>{context.authenticated ? 'Authenticated!' : 'LOGIN!!!'}</p>\r\n    }</AuthContext.Consumer>\r\n```\r\n> This approach has one flaw. We would not be able to access our context in for example componentDidMount. Therefore there is more elegant way how to access the context in class based components.\r\n> We can add a static property written exactly this way:\r\n``` es6\r\nstatic contextType = AuthContext;\r\n```\r\n> And then you can access your context for example in the componentDidMount\r\n``` es6\r\ncomponentDidMount(){\r\n        console.log(this.context.authenticated)\r\n    }\r\n```\r\n> Moreover,in the return statement, we dont need `<AuthContext>{(context)=> ....}</AuthContext>`\r\n> We can simply use\r\n``` es6\r\n{this.context.authenticated ? ... : .... }\r\n```\r\n> Whole file:\r\n``` es6\r\nimport React, { Component } from \"react\";\r\nimport classes from \"./Person.css\";\r\nimport AuthContext from '../../../context/AuthContext'\r\n\r\nclass person extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.inputElementRef = React.createRef()\r\n    }\r\n    \r\n    static contextType = AuthContext; \r\n\r\n    componentDidMount(){\r\n        this.inputElementRef.current.focus()\r\n        console.log(this.context.authenticated)\r\n    }\r\n  render() {\r\n    return (\r\n      <div className={classes.Person}>\r\n      \r\n      <p>{this.context.authenticated ? 'Authenticated!' : 'LOGIN!!!'}</p>\r\n\r\n        <p onClick={this.props.click} className=\"mia\">\r\n          I'm {this.props.name} and I am {this.props.age} years old!\r\n        </p>\r\n        <p id=\"my-id\">HI</p>\r\n        <p>{this.props.children}</p>\r\n        <input ref={this.inputElementRef} type=\"text\" onChange={this.props.changed} value={this.props.name} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default person;\r\n```\r\n> Functional components has a useContext hook for exactly this.\r\n``` es6\r\nimport React, { useContext } from \"react\";\r\n...\r\nconst authContext= useContext(AuthContext)\r\n...\r\n <button onClick={authContext.login}>\r\n          Log in!!!!\r\n      </button>\r\n\r\n```\r\n> Whole file:\r\n``` es6\r\nimport React, { useEffect, useRef, useContext } from \"react\";\r\nimport classes from \"./Cockpit.css\";\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nconst Cockpit = React.memo((props) => {\r\n\r\n    const toggleBtnRef= useRef()\r\n    const authContext= useContext(AuthContext)\r\n\r\n    useEffect(()=> {\r\n        console.log(\"I am useEffect\")\r\n        toggleBtnRef.current.click()\r\n        \r\n    }, [])\r\n    \r\n    const assignedClasses = [];\r\n    \r\n    let btnClass=\"\";\r\n    \r\n    if (props.showPersons){\r\n        btnClass = classes.Red;\r\n    }\r\n    \r\n    if (props.persons.length <= 2) {\r\n      assignedClasses.push(classes.red); // classes = ['red']\r\n    }\r\n    if (props.persons.length <= 1) {\r\n      assignedClasses.push(classes.bold); // classes = ['red', 'bold']\r\n    }\r\n  return (\r\n     <div className={classes.Cockpit}>\r\n      <h1>{props.title}</h1>\r\n      <p className={assignedClasses.join(\" \")}>This is really working!</p>\r\n      <button ref={toggleBtnRef} className={btnClass} onClick={props.toggl}>\r\n        Toggle Persons\r\n      </button>\r\n      <button onClick={authContext.login}>\r\n          Log in!!!!\r\n      </button>\r\n\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Cockpit;\r\n\r\n```\r\n>useCOntext hook is the same as static contextType is for class based components\r\n\r\n> Context API manages data without need to pass it around as props! Same is also what redux does.\r\n\r\n**Planning React application**\r\n> Planning process:\r\n- Component tree (structure) - from design to small lego pieces\r\n- Application state (data) - using and manipulating data (for example ingredients user selected for burger and how much it costs)\r\n- Components vs containers - stateless (dumb) components vs statefull components (in class based components using state property or functional components using useState). STatefull components are also called containers\r\n\r\n**Adding google fonts to react app**\r\n> Go to: https://fonts.google.com/ and search for your favourite font (for example open sans). \r\n\r\n> Click on it and then you will see list of different versions, such as bold, etc. Click on + sign to add the specific styles which you want to include.\r\n\r\n>ON the right bar click on embed and you will see the link tag. copy it\r\n``` es6\r\n<link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n```\r\n> We can use this link tag in our public folder in index.html file\r\n> Add it to the head tag (for example above the title tag)\r\n\r\n>Then we can use this font in our global css file: index.css\r\n``` es6\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: \"Open Sans\", sans-serif;\r\n}\r\n```\r\n> Sans serif will still be as a backup font\r\n``` es6\r\n```\r\n> Good practice is to name all global variables in capital letters (and store them outside of components)\r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n> \r\n``` es6\r\n```\r\n>Linters are code quality checking tool","frontmatter":{"date":"2020-06-20","title":"React Course Notes","category":"knowledge-base"},"fields":{"slug":"/React_Course/"},"timeToRead":87,"html":"<p><img src=\"https://i.imgur.com/jX7rNIv.jpg\" title=\"Photo by PhotoMIX Ltd. from Pexels\"></p>\n<p>This article is basically my notes following an amazing <a href=\"\">React</a> course by Maximilian Schwarzmüller which I would recommend to everyone who wants to learn React.</p>\n<p><strong>Basics</strong></p>\n<blockquote>\n<p>Javascript is a programming language that can be executed in browsers.</p>\n</blockquote>\n<blockquote>\n<p>Advantage of Javascript is that web applications written in Javascript are fast and behave like mobile apps - user do not need to wait for page reload</p>\n</blockquote>\n<blockquote>\n<p>React is a Javascript library which makes it easy to build interactive and fast Javascrip driven web applications and user interfaces.</p>\n</blockquote>\n<blockquote>\n<p>Because React apps are written in Javascript, they can run in users's browser. They do NOT run on server. Using users's browser makes it way faster! Things happen instantly, we do not have to wait for server response to get the new page rendered.</p>\n</blockquote>\n<blockquote>\n<p>User interface in this context means what user sees and React is all about building components to use those.</p>\n</blockquote>\n<blockquote>\n<p>Component is a contained piece of code which can be re-used multiple times</p>\n</blockquote>\n<blockquote>\n<p>We do not need to rebuild whole page every time. Web page will consist of tiny little components and only those that change will be refreshed.</p>\n</blockquote>\n<blockquote>\n<p>Components keep our code manageable</p>\n</blockquote>\n<blockquote>\n<p>If we want to change the headline component, we can change it in one place, instead of 20 places.</p>\n</blockquote>\n<blockquote>\n<p>React componenets can be thought as custom HTML elements</p>\n</blockquote>\n<blockquote>\n<p>In order to use react we need to import react to our application. We actually need to import react and react-dom</p>\n</blockquote>\n<blockquote>\n<p>React imports a library which hold entire logic of building components</p>\n</blockquote>\n<blockquote>\n<p>React DOM imports possibility to insert our react to an actual DOM.</p>\n</blockquote>\n<blockquote>\n<p>React uses next generation Javascript syntax, such as JSX and for that we need a special compiler called Babel which will make sure our code can run in the browser! Basicaly we write code with all fancy features and Babel then ships to browser, so that it can run</p>\n</blockquote>\n<p><strong>Pure HTML and CSS compared to React</strong></p>\n<blockquote>\n<p>We can write a code like this:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;div class=\"person\">\n  &#x3C;h1>Addania&#x3C;/h1>\n  &#x3C;p>Nick: Adda&#x3C;/p>\n  &#x3C;p>Location: Meadows&#x3C;/p>\n&#x3C;/div>\n&#x3C;div class=\"person\">\n  &#x3C;h1>Sam&#x3C;/h1>\n  &#x3C;p>Nick: Nam&#x3C;/p>\n  &#x3C;p>Location: Gym&#x3C;/p>\n&#x3C;/div>\n&#x3C;div class=\"person\">\n  &#x3C;h1>Ditulienka&#x3C;/h1>\n  &#x3C;p>Nick: Slniecko&#x3C;/p>\n  &#x3C;p>Location: Cafe&#x3C;/p>\n&#x3C;/div>\n&#x3C;div class=\"person\">\n  &#x3C;h1>Lubo&#x3C;/h1>\n  &#x3C;p>Nick: Captain&#x3C;/p>\n  &#x3C;p>Location: Satellite&#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.person {\n  display: inline-block;\n  margin: 10px;\n  border: 1px solid #eee;\n  box-shadow: 0 2px 2px #ccc;\n  width: 200px;\n  padding: 10px;  \n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/33tZHVA.png\"></p>\n<blockquote>\n<p>With react we can write a component which looks like a function and returns what looks like html elements! Normally we cannot user html in javascript, it would throw an error, but because we use Babel as a compiler, we can use html in javascript and this is called JSX. In reality it only looks like html, behind the scenes it will be converted to pure javascript. It is just for us to make our life easier.\nJS</p>\n</blockquote>\n<pre><code>function Person () { \n  return (\n  &#x3C;div className=\"person\">\n      &#x3C;h1>Addania&#x3C;/h1>\n       &#x3C;p>Nick: Adda&#x3C;/p>\n      &#x3C;p>Location: Meadows&#x3C;/p>\n   &#x3C;/div>\n  )\n}\n</code></pre>\n<blockquote>\n<p>Pleas note that in React we need to use classNanme instead of class, because class is a reserved name for class components. This is a proof that our HTML in Javascript actually is not an HTML.</p>\n</blockquote>\n<blockquote>\n<p>But this will do nothing yet. We need to tell react where in website we want to render it. For that we imported react-dom. react-dom exposes an object called React-DOM where we define which component we want to render where in website. ReactDOM has a render method allows us to render javascript function as a component to the real dom.\nJS</p>\n</blockquote>\n<pre><code>function Person () { \n  return (\n  &#x3C;div class=\"person\">\n      &#x3C;h1>Addania&#x3C;/h1>\n       &#x3C;p>Nick: Adda&#x3C;/p>\n      &#x3C;p>Location: Meadows&#x3C;/p>\n   &#x3C;/div>\n  )\n}\n\nReactDOM.render(&#x3C;Person/>,document.getElementById('root'));\n</code></pre>\n<p>HTML:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n</code></pre>\n<p><img src=\"https://i.imgur.com/s0xy9Lf.png\"></p>\n<blockquote>\n<p>Yay, we generated our beautiful component. But it is static only for Mia. How about we want to make it more dynamic? Instead of hard coded values, we can use props which is an object that holds values for all attributes we give to our component Person (such as name, location and nickname):</p>\n</blockquote>\n<p>JS</p>\n<pre><code>function Person (props) { \n  return (\n  &#x3C;div class=\"person\">\n      &#x3C;h1>{props.name}&#x3C;/h1>\n       &#x3C;p>Nick: {props.nickname}&#x3C;/p>\n      &#x3C;p>Location: {props.location}&#x3C;/p>\n   &#x3C;/div>\n  )\n}\n\nReactDOM.render(&#x3C;Person name=\"Addania\" nickname=\"Adda\" location=\"meadows\"/>,document.getElementById('root'));\n</code></pre>\n<blockquote>\n<p>And now drumroll, power of React will come, we can reuse our component:\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;div id=\"p1\">&#x3C;/div>\n&#x3C;div id=\"p2\">&#x3C;/div>\n</code></pre>\n<p>JS</p>\n<pre><code>function Person (props) { \n  return (\n  &#x3C;div class=\"person\">\n      &#x3C;h1>{props.name}&#x3C;/h1>\n       &#x3C;p>Nick: {props.nick}&#x3C;/p>\n      &#x3C;p>Location: {props.location}&#x3C;/p>\n   &#x3C;/div>\n  )\n}\n\nReactDOM.render(&#x3C;Person name=\"Addania\" nick=\"Adda\" location=\"meadows\"/>,document.getElementById('p1'));\nReactDOM.render(&#x3C;Person name=\"Sam\" nick=\"Nam\" location=\"Gym\"/>,document.getElementById('p2'));\n</code></pre>\n<p><img src=\"https://i.imgur.com/rPfOuIR.png\"></p>\n<blockquote>\n<p>We used only one component and rendered it twice with different values! OP React!</p>\n</blockquote>\n<blockquote>\n<p>We can optimize it even further. Instead of having multiple render methods, we can only have one and create a variable which will then render all our elements. This way is much more popular in real life applications.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n</code></pre>\n<p>JS:</p>\n<pre><code>function Person (props) { \n  return (\n  &#x3C;div class=\"person\">\n      &#x3C;h1>{props.name}&#x3C;/h1>\n       &#x3C;p>Nick: {props.nick}&#x3C;/p>\n      &#x3C;p>Location: {props.location}&#x3C;/p>\n   &#x3C;/div>\n  )\n}\n\nvar element =  (\n  &#x3C;div>\n    &#x3C;Person name=\"Addania\" nick=\"Adda\" location=\"meadows\"/>\n    &#x3C;Person name=\"Sam\" nick=\"Nam\" location=\"Gym\"/>\n      &#x3C;Person name=\"Ditulienka\" nick=\"Slniecko\" location=\"Cafe\"/>\n    &#x3C;Person name=\"Lubino\" nick=\"Captain\" location=\"Satellite\"/>\n  &#x3C;/div>\n)\n\nReactDOM.render(element,document.getElementById('root'));\n</code></pre>\n<p><img src=\"https://i.imgur.com/33tZHVA.png\"></p>\n<p><strong>Why React</strong></p>\n<ul>\n<li>UI state becomes easier to manage compared to Vanilla Javascript</li>\n<li>Focus is on business logic, not on preventing your app from exploding</li>\n<li>High performance</li>\n<li>Huge community</li>\n</ul>\n<p><strong>Application types</strong></p>\n<ul>\n<li>Single page applications</li>\n<li>Multi page applications</li>\n</ul>\n<blockquote>\n<p>Single page application - we only get back one single HTML file from the server and we get back this file the first time the user visits. Afterwards everything else is managed by Javascript with react. Entire page consist of components which are handled and rendered by Javascript! You never need to go back to server to reload the page!! Which is amazing user experience. Everything happens instantly. Entire page/ app is handled by React. We typically only have one ReactDOM.render() call.</p>\n</blockquote>\n<blockquote>\n<p>Multi page application - we get back multiple HTML pages where each page has the content for a given route (a given URL we visited). For example.com and example.com/users, we get back two different pages. Here entire page is just HTML and CSS and maybe only some elements are react (but the dont know about existance of each other). Typically have multiple  ReactDOM.render() to call react components</p>\n</blockquote>\n<p><strong>Next generation JS - refresher</strong></p>\n<p><strong>Variables</strong></p>\n<blockquote>\n<p>Let and const are different way of creating variables. Var used to be only way to create variables, with ES6 we have const and let as well. Let is a new var - used for creating variable values. Const creates a constant value which does not change</p>\n</blockquote>\n<p><strong>Functions</strong></p>\n<blockquote>\n<p>Normal function in JS looks like this:</p>\n</blockquote>\n<pre><code>function myFun () {}\n</code></pre>\n<blockquote>\n<p>Arrow functions is another syntax for creating functions in Javascript:</p>\n</blockquote>\n<pre><code>const myFun = () => {}\n</code></pre>\n<blockquote>\n<p>Arrow functions solve a lot of previous issues with <code>this</code> keyword. Before <code>this</code> could change its context unexpectedly. IN arrow functions it will not.</p>\n</blockquote>\n<blockquote>\n<p>To shorten the arrow function, we can omit brackets around arguments if there is EXATLY ONE argument. Imagine we have following function:</p>\n</blockquote>\n<pre><code>const myFun = (name) => {}\n</code></pre>\n<blockquote>\n<p>We can shorten it to: </p>\n</blockquote>\n<pre><code>const myFun = name => {}\n</code></pre>\n<blockquote>\n<p>To shorten arrow function, we can omit curly braces and word <code>return</code> in case the whole body of the function is just one return statement.  Imagine we have following function:</p>\n</blockquote>\n<pre><code>const multiply = number => {\n    return number*2\n}\nconsole.log(multiply(4))\n</code></pre>\n<blockquote>\n<p>We can shorten it to: </p>\n</blockquote>\n<pre><code>const multiply = number => number*2\nconsole.log(multiply(4))\n</code></pre>\n<p><strong>Exports and imports</strong></p>\n<blockquote>\n<p>Javascript code is odular, we can split it to multiple files. IN one file we can then import other files or export current content of file.\nThere are two way to import and export files - default exports and named exports\nDefault export - the only thing that gets exported from this file is personObject:\nperson.js</p>\n</blockquote>\n<pre><code>const personObject = {\n    name=\"Adda\"\n}\nexport default personObject\n</code></pre>\n<blockquote>\n<p>Default import - we can give it any name we want, it will always be just that personObject, which in other files we might want to call differently:\napp.js</p>\n</blockquote>\n<pre><code>import anything from './person.js'\nimport prsn from './person.js'\nimport user from './person.js'\n</code></pre>\n<blockquote>\n<p>Name export - we have multiple things exported from one file, each by its own unique name:\nusers.js</p>\n</blockquote>\n<pre><code>export const person = {\n    name=\"Adda\"\n}\nexport const animal = {\n    name=\"Tiger\"\n}\nexport const plant = {\n    name=\"Bamboo\"\n}\n</code></pre>\n<blockquote>\n<p>Named import - we can only import object by their own name. We can also deicde which objects we actually want to import:\napp.js</p>\n</blockquote>\n<pre><code>import { person } from './users.js'\nimport { animal } from './users.js'\n</code></pre>\n<blockquote>\n<p>Named imports - if we want to still change the name, we can assign it an alias:\napp.js</p>\n</blockquote>\n<pre><code>import { person as Emperor } from './users.js'\nimport { animal as Pet } from './users.js'\n</code></pre>\n<blockquote>\n<p>Named imports - if we want to change name for everything what we import from some place, we can use <code>* as</code> followed by an <code>alias</code>. This alis is a Javascript object which exposes all the constants which are named exported from that file. These are then accessible by <code>alias.constant</code>:\napp.js</p>\n</blockquote>\n<pre><code>import * as users ' from ./users.js'\n\nconsole.log(users.person, users.animal, users.plant)\n</code></pre>\n<p><strong>Classes:</strong></p>\n<blockquote>\n<p>Classes are blueprints for objects.</p>\n<p>Defining a class with  keyword <code>class</code></p>\n</blockquote>\n<pre><code>class Person {\n    name=\"Adda\"\n    call = () => {...}\n}\n</code></pre>\n<blockquote>\n<p>Above class Person has one property <code>name</code> and a method <code>call</code>.\n<code>Method</code> is just a function attached to classes.\n<code>Properties</code> are variables attached to classes.</p>\n</blockquote>\n<blockquote>\n<p>One specific example of a class is instantiated with a keyword <code>new</code> (usage of classes):</p>\n</blockquote>\n<pre><code>const adda= new Person()\nadda.call()\nconsole.log(adda.name)\n</code></pre>\n<blockquote>\n<p>Classes are a more convenient way how to write constructor functions in javascript</p>\n</blockquote>\n<blockquote>\n<p>Idea is - we create javascript objects with classes as blueprints\nClases support inheritance - meaning child class can take all the properties and methods from the parent class and use them and potentially adding its own new properties and method:</p>\n</blockquote>\n<pre><code>class Person extends Human\n</code></pre>\n<blockquote>\n<p>Each and everyclass has a default function/method called <code>constructor</code>, which is always called when class is created and it adds initial properties to the class:</p>\n</blockquote>\n<pre><code>class Person {\n    constructor(){\n\n    }\n}\n</code></pre>\n<blockquote>\n<p>Within constructure we can setup our properties with <code>this</code> keyword:</p>\n</blockquote>\n<pre><code>class Person {\n    constructor(){\n        this.name=\"Mia\";\n    }\n}\n</code></pre>\n<blockquote>\n<p>Let's add a method which prints out person's name:</p>\n</blockquote>\n<pre><code>class Person {\n    constructor() {\n        this.name = 'Mi';\n    }\n  \n    printMyName() {\n        console.log(this.name);\n    }\n}\n</code></pre>\n<blockquote>\n<p>Now we can create a new instance of the class and store it in a variable:</p>\n</blockquote>\n<pre><code>const adda = new Person();\nadda.printMyName();\n</code></pre>\n<blockquote>\n<p>Let's create a class human:</p>\n</blockquote>\n<pre><code>class Human {\n    constructor() {\n        this.gender = 'female';\n    }\n  \n    printGender() {\n        console.log(this.gender);\n    }\n}\n</code></pre>\n<blockquote>\n<p>If Person inherits from Human, person can also have gender available. We can create inheritance by keyword <code>extends</code></p>\n</blockquote>\n<pre><code>class Person extends Human{\n    constructor() {\n        super();\n        this.name = 'Mi';\n    }\n  \n    printMyName() {\n        console.log(this.name);\n    }\n}\n</code></pre>\n<blockquote>\n<p>Please note that if we use constructor and extends, we need to also use special method called <code>super</code>. It executes parent constructor. Which we have to do in order to correctly initiate parent class</p>\n</blockquote>\n<blockquote>\n<p>Now we can call printGender method on our adda variable (instance of class Person):</p>\n</blockquote>\n<pre><code>const adda = new Person();\nadda.printGender();\n</code></pre>\n<blockquote>\n<p>Even if class Person inherits gender from class Human, we can set our own gender in the Person class:</p>\n</blockquote>\n<pre><code class=\"language-es6\">class Person extends Human{\n    constructor() {\n        super();\n        this.name = 'Mi';\n        this.gender = 'unknown'\n    }\n  \n    printMyName() {\n        console.log(this.name);\n    }\n}\n</code></pre>\n<blockquote>\n<p>Why to bother with classes? React uses classes to create components. There is also another way how to create components - functional components.</p>\n</blockquote>\n<blockquote>\n<p>New generation JS - ES7 lets us ommit <code>constructor</code> within classes and <code>this</code> when creating properties(variables)</p>\n</blockquote>\n<pre><code class=\"language-es6\">myProperty=\"value\"\n</code></pre>\n<blockquote>\n<p>The same goes for methods, instead of defining method like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">myFunction() {}\n</code></pre>\n<blockquote>\n<p>We can use syntax like this (think of it as a property and then arrow function):</p>\n</blockquote>\n<pre><code class=\"language-es6\">myFunction = () => {}\n</code></pre>\n<blockquote>\n<p>Example:</p>\n</blockquote>\n<pre><code class=\"language-es6\">class Person {\n  name=\"Adda\";\n  printName = () => {\n    console.log (this.name)\n  }\n}\nconst m= new Person();\nm.printName()\n</code></pre>\n<blockquote>\n<p>Please note, that we still need to use <code>this</code>keyword when accessing the property.</p>\n</blockquote>\n<blockquote>\n<p>Similarly, we can also omit <code>super</code></p>\n</blockquote>\n<pre><code class=\"language-es6\">class Human {\n  home = \"Earth\";\nprintHome = () => {\n  console.log(this.home)\n }\n}\nclass Person extends Human {  \n  name=\"Adda\";  \n  printName = () => {\n    console.log (this.name)\n  }\n}\nconst m= new Person();\nm.printName()\nm.printHome()\n</code></pre>\n<p><strong>Spread and Rest operator</strong></p>\n<blockquote>\n<p>Both spread and rest operator is just ... yes, literally, just three dots <code>...</code>. If it is spread or rest depends on where we use it.</p>\n</blockquote>\n<blockquote>\n<p>Spread - splits array elements OR object properties</p>\n</blockquote>\n<blockquote>\n<p>Imagine we have oldArray which we want to cpy and add new elements:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const oldArray= [0, 1, 2]\nconst newArray= [...oldArray, 3, 4]\nconsole.log(newArray)\n</code></pre>\n<blockquote>\n<p>Reasult will be [0, 1, 2, 3, 4]</p>\n</blockquote>\n<blockquote>\n<p>Same goes for objects:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const oldObject= {name: \"Adda\", title: \"Invincible\"}\nconst newObject= {...oldObject, mount: \"Spectral Steed\"}\nconsole.log(newObject.name, newObject.mount)\n</code></pre>\n<blockquote>\n<p>These three dots pull out <code>all</code> the properties of the old object and we are able to add new one</p>\n</blockquote>\n<blockquote>\n<p>If old object had the same property as we assign it in the new one, old property will be overwritten</p>\n</blockquote>\n<pre><code class=\"language-es6\">const oldObject= {name: \"Adda\", title: \"Invincible\"}\nconst newObject= {...oldObject, title: \"The Queen\"}\nconsole.log(newObject.name, newObject.title)\n</code></pre>\n<blockquote>\n<p>Result will be <code>Adda</code> and <code>The Queen</code></p>\n</blockquote>\n<blockquote>\n<p>Spread operator is a convenietn way also to copy array or object and create a new one without modifying the old one.</p>\n</blockquote>\n<blockquote>\n<p>Rest operator is used to merge a list of function arguments into an array.  We use it in functions for arguments., for example when a function can receive unlimited amount of arguments. We want then create an array from those arguments and use array methods on it.</p>\n</blockquote>\n<pre><code class=\"language-es6\">function sort(...args){\n    return args.sort()\n}\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const filter = (...args) => {\n    return args.filter(element => element === 1);\n}\nconsole.log(filter(1,2,3)) // [1]\n</code></pre>\n<p><strong>Desctructuring</strong></p>\n<blockquote>\n<p>Destructuring allows easily extract array elements or object properties and store them in variables.</p>\n</blockquote>\n<blockquote>\n<p>Sounds like spread operator. But spread operator takes out <code>all</code> properties, all elements and distributes them in new <code>array</code> or <code>object</code>.</p>\n</blockquote>\n<blockquote>\n<p>Destructuring allows to pull out <code>single</code> elements or properties and store them in <code>variables</code>.</p>\n</blockquote>\n<pre><code class=\"language-es6\">[ name, title ] = ['Adda', 'The Emperor']\nconsole.log(name) // 'Adda'\nconsole.log(title) // 'The Emperor'\n</code></pre>\n<blockquote>\n<p>It looks like we are creating a new array, but we are not, we are <code>destructuring</code> an array and creating 2 variables: name and title</p>\n</blockquote>\n<blockquote>\n<p>The order defines which property name withh be (the first), title (the second).</p>\n</blockquote>\n<blockquote>\n<p>I can skip an element:</p>\n</blockquote>\n<pre><code class=\"language-es6\">[ race, ,spec, profession ] = ['Night Elf', 'Druid', 'Restoration', 'Enchanter']\n</code></pre>\n<blockquote>\n<p>Similarly for objects. But for objects propert name will define which value will be taken out into variable</p>\n</blockquote>\n<pre><code class=\"language-es6\">{ pet } = {mount: 'Dragonkin', pet:'The Phoenix'}\nconsole.log(pet) // 'Dragonkin'\nconsole.log(mount) // undefined\n</code></pre>\n<p><strong>Primitive types</strong></p>\n<blockquote>\n<p>Primitive type is for example number, string or boolean. These are always copied to a new variable!</p>\n</blockquote>\n<pre><code class=\"language-es6\">let number = 8;\nlet number2 = number;\nconsole.log(number2) //8\nnumber2=4\nconsole.log(number) //8\n</code></pre>\n<blockquote>\n<p>So practically these are 2 different variables.</p>\n</blockquote>\n<p><strong>Referenced types</strong></p>\n<blockquote>\n<p>Arrays and objects are more complex constructs and they are passed by reference and not copied:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const achievement1 = {\n  name: 'The Patient',\n  skillpoints: 100\n}\nconst achievement2 =achievement1\nachievement1.skillpoints= 1000\nconsole.log(achievement2.skillpoints) //1000\n</code></pre>\n<blockquote>\n<p>How does it work? Object achievement 1 will be pointing to a memory object. Then achievement 2 is referencing achievement 1 which means its pointer is also pointing to the same object in the memory. Achievement 2 was not copied, only referenced, therefore it does not have its own memory address. Therefore both achievement 1 and 2 are pointing to the same memory address.</p>\n</blockquote>\n<blockquote>\n<p>It is same for arrays.</p>\n</blockquote>\n<blockquote>\n<p>In react referencing and object is tricky, because we can change the object in one place and it will also be visible in other places in app which reference it. </p>\n</blockquote>\n<blockquote>\n<p>Therefore in React we will often you spread operator to really copy the object and create a completely new one, with its own memory address:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const achievement1 = {\n  name: 'The Patient',\n  skillpoints: 100\n}\nconst achievement2 = {...achievement1}\nachievement1.skillpoints= 1000\nconsole.log(achievement2.skillpoints) //100\n</code></pre>\n<p><strong>React build workflow</strong></p>\n<blockquote>\n<p>In order to have a nice build for our project we will need</p>\n</blockquote>\n<ul>\n<li>dependency management tool (npm -node package manager or yarn) which will take care of downloading, installing and updating of all our 3rd party libraries / 3rd party Javascript packages we might want to use in the project (react, react-dom, compiler from next gen JS features to older features which will run on older browsers, lodash, moment, etc). We will use NPM in this project. You can get NPM when you install <code>node.js</code> from their official site: nodejs.org Since then you will be able to use <code>npm install</code> commands in your terminal and node.js also ships the development server which we can run locally on our pc to test the app</li>\n<li>bundler (Webpack) - we want to write modular code and split it up over multiple files so that each file has a clear task/focus and therefore easier to maintain. But upon shipping , we want to bundle it into only couple of files (or even one) because older browsers do not even support splti up files. It is also not optimal to make 1000 or requests to all this tiny files. We will use Webpack which is a standar bundler. Webpack does not only bundle files, but allows us to do couple of steps before bundling. Which can be convenient.</li>\n<li>compiler (Babel)-  compiling those next gen JS features which are then transpiler into workarounds which work on older browsers. Babel and presets can be hooked into Webpack configuration so that they are part of the bundling and optimization process</li>\n<li>development server to test our app locally on our computer (machine). Development server is a web server running on our machine. This webserver will emulate how the app woudl be actually running on a real server</li>\n</ul>\n<p><strong>Create React App</strong></p>\n<blockquote>\n<p>In order to instal create react app (official way to start react project, type in your command line:</p>\n</blockquote>\n<pre><code class=\"language-es6\">sudo npm install -g create-react-app\n</code></pre>\n<blockquote>\n<p>Then you have create react app installed globally on your pc and can create your own projects:</p>\n</blockquote>\n<pre><code class=\"language-es6\">create-react-app hamburger_app \n</code></pre>\n<pre><code class=\"language-es6\">create-react-app hamburger_app --scripts-version 1.1.5\n</code></pre>\n<blockquote>\n<p>Then you can navigate to your project with (cd- change directory) and start the project with npm start</p>\n</blockquote>\n<pre><code class=\"language-es6\">cd hambuerger_app\nnpm start\n</code></pre>\n<blockquote>\n<p>In your browser then go to url: <a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n</blockquote>\n<blockquote>\n<p>Your app is running there</p>\n</blockquote>\n<p><strong>File structure of the project provided by create-react-app</strong></p>\n<blockquote>\n<p><code>package.json</code> - all dependencies we have in our project plus scripts defined in the project\n<code>package-lock.json</code> or yarn.lock these files lock the versions of dependencies we are using. Why? because package.json would say any version above 4.1 and package-lock.json would lock it to one particular one, so that the app is stable and predictable\n<code>node_modules</code> folder holds all dependencies and sub denendencies of the project. When we do npm install, program will look what dependencies are in package.json and remove existing dependencies and install them again into node_modules folder automatically. Therefore never edit anything manually in this fodler\n<code>public</code> folder - is a root folder which get served by webserver in the end. It holds only files which we can edit. One important file is there: <code>index.html</code>. It is the only html page we will have in the project, we will not add more. In the end the script files will get injected to this html file <code>by our build workflow</code> (there is no script import in the html file - will be done by build workflow). Within the filte, there is only important element: <code>&#x3C;div id=\"root\">&#x3C;/div></code>. This is exactly the place where we mount our React application. What you can however do in the html file is to add some 3rd party libraries, CSS libraries, edit meta tags, etc.\n<code>manifest.json</code> is there because create react app give us progressive web app out of the box. In this file we can define some meta data about our application. What is progressive web app? Progressive Web Apps (PWAs) are web applications that are regular web pages or websites, but can appear to the user like traditional applications or native mobile applications. The application type attempts to combine features offered by most modern browsers with the benefits of a mobile experience.\n<code>src</code>is a folder which holds scripts of our React application. These are the files we will work with. <code>index.js</code> get access to the DOM's element with the id of \"root\" (in html file) and mounts our application there. our application is called <code>&#x3C;App /></code> and is imported from <code>App.js</code>. <code>App.js</code> holds our very first React component. We also have <code>App.css</code> with some styles which are however not related to only that one file <code>App.js</code>. These styles are global. We also get <code>index.css</code> file which also hold global styles which are more general, for example for the body of our app. <code>registerServiceWorker.js</code> is important for registering a service worker which is generated automatically because of that progressive web appy which we get out of the box. It will pre-cache our script files automatically. <code>App.test.js</code> - a test file which allows us to create <code>unit tests</code> for specific units, for example components. Notice also that our file extention is .js but it could also be .jsx - they are eqivalent (jsx only because we write \"what-looks-like html code\" into javascript files - but it is not really a n html code, it is just a sugar code so that it resembles html, but is easier to write for developers).  </p>\n</blockquote>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>react-scripts -package which offers build workflow, development server, all the next gen JS features and</li>\n</ul>\n<p><strong>Scripts</strong></p>\n<blockquote>\n<p>Scripts are found in package.json\nAll can be run with <code>npm run</code> and then the script</p>\n</blockquote>\n<pre><code class=\"language-es6\">npm run start\nnpm run build\nnpm run test\n</code></pre>\n<blockquote>\n<p>npm run start - starts development server\nnpm run build - builds and optimizes the app upon deployment! it would store the optimized code in a folder. At the beginning of the project you would not see the compiled code in the folder structure, compilations happens in the memory\nnpm run test - runs the tests</p>\n</blockquote>\n<p><strong>Components</strong></p>\n<blockquote>\n<p>Componenets are reusable custom html elements</p>\n</blockquote>\n<blockquote>\n<p>React components can be defined in 2 ways: class components and functional components\nExample of class component definition:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from 'react';\nimport './App.css';\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Hello worlds&#x3C;/h1>\n      &#x3C;/div>\n    );\n  }\n}\nexport default App;\n</code></pre>\n<blockquote>\n<p>For this claas component will need to import React which will render everything and also Component itself which is our parent Javascript class from which our components will inherit. This class has one important method: <code>render</code> method. It needs to have this method because React will call this method to render something to the screen.</p>\n</blockquote>\n<blockquote>\n<p>Every React component has 1 job to do: to render some html code which can be rendered to the DOM to the screen.</p>\n</blockquote>\n<blockquote>\n<p>There are other things components can do: reach out to internet, do some calculations, listen to some events...</p>\n</blockquote>\n<blockquote>\n<p>Then there is a default export for this App component. Which means if you import the whole files somewhere, what will be exported is App component wnd on the import side we can name it anything.</p>\n</blockquote>\n<blockquote>\n<p>JSX in our code:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Hello worlds&#x3C;/h1>\n      &#x3C;/div>\n    );\n</code></pre>\n<blockquote>\n<p>can be re-written using react method <code>React.createElement</code>. This is what the compilation will do when it see \"html\" code in javascript file:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> return React.createElement('div',null, 'h1', 'Hi')\n</code></pre>\n<blockquote>\n<p>React.createElement() take at least 3 arguments (but can be infinite).</p>\n</blockquote>\n<blockquote>\n<p>First argument is the element we want to rendere to the DOM. For example classical html div, button, etc or our own component <code>&#x3C;Header></code></p>\n</blockquote>\n<blockquote>\n<p>Second argument is configuration for what we want to render. Configuration is a Javascript objectm but if we do not want to configure anything, we cal pass null. </p>\n</blockquote>\n<blockquote>\n<p>Third argument is any amount of children separated by comas. Children means what is nested inside our div</p>\n</blockquote>\n<blockquote>\n<p>But problem is that h1 will be interpreted as a text. So if we really wanted to create h1 tag we would need to write:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> return React.createElement('div',null, React.createElement('hi',null,'Hi'))\n</code></pre>\n<blockquote>\n<p>If we also wanted to pass a class to our element we would pass an JS object as second parameter:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> return React.createElement('div',null, React.createElement('hi',{className:'App'},'Hi'))\n</code></pre>\n<blockquote>\n<p>The code above is actually equivalent to what the original JSX and it is what our JSX will eventually compile to:\nOur JSX (which resembles like html, but is NOT; it is simply suger coated JS) looked originally like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Hello worlds&#x3C;/h1>\n      &#x3C;/div>\n    );\n</code></pre>\n<blockquote>\n<p>Compiled equivalent is:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> return React.createElement('div',null, React.createElement('hi',{className:'App'},'Hi'))\n</code></pre>\n<blockquote>\n<p>Writing code with React.createElement soon becomes cumbersome especially when we want to nest elements</p>\n</blockquote>\n<blockquote>\n<p>Notice how we cant use word <code>class</code> in out JSX when wanting to apply CSS class. Word <code>class</code> is a reserved word in JS for creating classes. Therefore for CSS classes we need to use <code>className</code></p>\n</blockquote>\n<blockquote>\n<p>The fact that we can use html-resembling tags in JS, is because React library provides it for us</p>\n</blockquote>\n<blockquote>\n<p>Another restriction is that when we create a component it can only return 1 root element. </p>\n</blockquote>\n<blockquote>\n<p>Following code will not work</p>\n</blockquote>\n<pre><code class=\"language-es6\"> return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Hello worlds&#x3C;/h1>\n      &#x3C;/div>\n      &#x3C;h2>I am here&#x3C;/h2>\n    );\n</code></pre>\n<blockquote>\n<p>We need to wrap it all in a div, so that it can be rendered</p>\n</blockquote>\n<pre><code class=\"language-es6\"> return (\n     &#x3C;div>\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Hello worlds&#x3C;/h1>\n      &#x3C;/div>\n      &#x3C;h2>I am here&#x3C;/h2>\n      &#x3C;/div>\n    );\n</code></pre>\n<blockquote>\n<p>Components in our project will follow a standard convention of separating each component into a folder and name of the folder will have the component name in capital</p>\n</blockquote>\n<p><strong>Functional components</strong></p>\n<blockquote>\n<p>In the simples form a component is just a function which returns some JSX.</p>\n</blockquote>\n<pre><code class=\"language-es6\">import  React from 'react';\nexport const Person = () => {\n    return (\n        &#x3C;h2>I am a person&#x3C;/h2>\n    )\n}\n</code></pre>\n<blockquote>\n<p>Notie that we also exported the elements with keyword <code>export</code>so that we can use it on other files</p>\n</blockquote>\n<blockquote>\n<p>Then we can use it our App.js</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from 'react';\nimport './App.css';\nimport { Person } from './Person/Person';\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Hello worlds&#x3C;/h1>\n        &#x3C;Person />\n      &#x3C;/div>\n    );\n  }\n}\nexport default App;\n</code></pre>\n<blockquote>\n<p>Notice that we need to import the element first from our Person.js file which resides in Person folder. We can import it with: <code>import { Person } from './Person/Person.js'</code> but because of our build we can omit <code>.js</code></p>\n</blockquote>\n<blockquote>\n<p>Also notice that in order to use the component we use: <code>&#x3C;Person>&#x3C;/Person></code>or as a self-closing tag <code>&#x3C;Person /></code></p>\n</blockquote>\n<blockquote>\n<p>Components are cool because they are resuable and configurable.</p>\n</blockquote>\n<blockquote>\n<p>Configurable means we can have dynamic content in our JSX</p>\n</blockquote>\n<pre><code class=\"language-es6\">import  React from 'react';\nexport const Person = () => {\n    return (\n        &#x3C;h2>I am a person and I am {Math.floor(Math.random()*30)} years old&#x3C;/h2>\n    )\n}\n</code></pre>\n<blockquote>\n<p>Notice that we need to use curly braces if we want to use JS in our JSX.</p>\n</blockquote>\n<blockquote>\n<p>We can also pass some content from App.js to our component with props to configure what we want Person component to output. This is what supply from App.js</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;Person name=\"Adda\" age=\"18\"/>\n&#x3C;Person name=\"Sam\" age=\"20\">My hobbies: Motor Racing&#x3C;/Person>\n</code></pre>\n<blockquote>\n<p>Then in Person component we can use those properties in an object called props (but we can choose any other name). This object holds all the properties of this component:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import  React from 'react';\nexport const Person = (props) => {\n    return (\n        &#x3C;h2>I am a {props.name} and I am {props.age} years old&#x3C;/h2>\n    )\n}\n</code></pre>\n<blockquote>\n<p>Or we can destructure the props:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import  React from 'react';\nexport const Person = ({name, age}) => {\n    return (\n        &#x3C;h2>I am a {name} and I am {age} years old&#x3C;/h2>\n    )\n}\n</code></pre>\n<blockquote>\n<p>Notice how we still dont display <code>My hobbies: Motor Racing</code> for Sam. We can pass not only attributes to the component but also content between starting and closing tags. This special prop which React gives us access to is prop called <code>children</code>. It is a reserved word. In code it will look like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from 'react';\n\nexport const Person = ({name, age, children}) => {\n    return (\n        &#x3C;div>\n        &#x3C;h2>I am a {name} and I am {age} years old&#x3C;/h2>\n        &#x3C;p>{children}&#x3C;/p>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<blockquote>\n<p>Or alternatively</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from 'react';\n\nexport const Person = (props) => {\n    return (\n        &#x3C;div>\n        &#x3C;h2>I am a {props.name} and I am {props.age} years old&#x3C;/h2>\n        &#x3C;p>{props.children}&#x3C;/p>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<p><strong>Component State</strong></p>\n<blockquote>\n<p>Props are passed from outside to the component. Props allow you to pass data from a parent (wrapping) component to a child (embedded) component.</p>\n</blockquote>\n<blockquote>\n<p>State is managed from inside of the component. For example input value, on click from button , etc.</p>\n</blockquote>\n<blockquote>\n<p>State in class based components is like a variable that will be saved and updated from the component. The state is actually and object. </p>\n</blockquote>\n<blockquote>\n<p><code>state</code> is a reserved word for class based components and is declared like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n      persons: []\n  }\n\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Hello worlds&#x3C;/h1>\n        &#x3C;Person />\n      &#x3C;/div>\n    );\n  }\n}\n</code></pre>\n<blockquote>\n<p>More sophisticated example:</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n      persons: [\n        {name: \"Adda\", age: \"18\"},\n        {name: \"Pete\", age: \"15\"},\n      ]\n  }\n\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Hello worlds&#x3C;/h1>\n        &#x3C;Person name={this.state.persons[0].name} age={this.state.persons[0].age}/>\n      &#x3C;/div>\n    );\n  }\n}\n</code></pre>\n<blockquote>\n<p>Word <code>this</code>refers to the class (App) which has a property <code>state</code>. We can define our own prperties, but state is a special one. State can be changed but if it changes, it will lead React to update the DOM! (Also changes in props lead React to re-render components). Let`s do just that.</p>\n</blockquote>\n<blockquote>\n<p>We will have a button to print something to console.</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n      persons: [\n        {name: \"Adda\", age: \"18\"},\n        {name: \"Pete\", age: \"15\"},\n      ]\n  }\n\nhandleClick = () => {\n    console.log(\"Im clicked\")\n}\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Hello worlds&#x3C;/h1>\n        &#x3C;button onClick={this.handleClick}>Toggle names&#x3C;/button>\n        &#x3C;Person name={this.state.persons[0].name} age={this.state.persons[0].age}/>\n      &#x3C;/div>\n    );\n  }\n}\n</code></pre>\n<blockquote>\n<p>Notice how class methods are not written with const <code>handleClick</code></p>\n</blockquote>\n<blockquote>\n<p>Notice also we need to use this syntax <code>onClick={this.handleClick}</code> and NOT this syntax <code>onClick={this.handleClick()}</code></p>\n</blockquote>\n<blockquote>\n<p><code>onClick={this.handleClick}</code> executes when you click the button, function is only passed there (referenced)</p>\n</blockquote>\n<blockquote>\n<p><code>onClick={this.handleClick()}</code> will be immediatelly executed as soon as the component renders! (not on the click)</p>\n</blockquote>\n<blockquote>\n<p>There are many other events to which we can listen. List is <a href=\"https://reactjs.org/docs/events.html#supported-events\">here</a></p>\n</blockquote>\n<blockquote>\n<p>Just to mention a few:</p>\n</blockquote>\n<ul>\n<li>Clipboard events: onCopy onCut onPaste</li>\n<li>Keyboard events: onKeyDown onKeyPress onKeyUp</li>\n<li>Focus events: onFocus</li>\n<li>Form events: onChange onInput onInvalid onSubmit</li>\n<li>Mouse Events: onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp</li>\n<li>Selection events: onSelect</li>\n<li>Touch events: onTouchCancel onTouchEnd onTouchMove onTouchStart</li>\n<li>UI events: onScroll</li>\n<li>Wheel Events: onWheel</li>\n</ul>\n<blockquote>\n<p>Let's upgrade our button onClick to handle the state:</p>\n</blockquote>\n<blockquote>\n<p>NEVER mutate state directly! NO GO:</p>\n</blockquote>\n<pre><code class=\"language-es6\">handleClick = () => {\n    this.state.persons[0].name= \"Addania\"\n}\n</code></pre>\n<blockquote>\n<p>Instead use <code>setState</code> method which comes from React library. This method allows to update the special property: state. It will also make sure that React knows the state was updated and then it triggerst DOM re-render. setState requires and object and whatever I write there, it will merge with what is already there, so if I set one property in setState, it will not touch other properties:</p>\n</blockquote>\n<pre><code class=\"language-es6\">handleClick = () => {\n    this.setState(\n        {\n      persons: [\n        {name: \"Addamia\", age: \"18\"},\n        {name: \"Pete\", age: \"16\"},\n      ]\n  }\n    )\n}\n</code></pre>\n<blockquote>\n<p>If my state was: </p>\n</blockquote>\n<pre><code class=\"language-es6\">  state = {\n      persons: [\n        {name: \"Adda\", age: \"18\"},\n        {name: \"Pete\", age: \"15\"},\n      ],\n      animals: \"muuu\"\n  }\n</code></pre>\n<blockquote>\n<p>then setState person would not change animals. Animals woudl still be available. SetState merges states.</p>\n</blockquote>\n<blockquote>\n<p>There are only 2 things that force DOM to update: change of state and change of props</p>\n</blockquote>\n<blockquote>\n<p><code>this.steState</code> is only available in the class based components. We will explore functional components next:</p>\n</blockquote>\n<p><strong>Functional components</strong></p>\n<blockquote>\n<p>In order to handle state in functional components, we use HOOKS. Hooks are just simply a collection of fucntions which are exposed to you to use in fucntional componets.</p>\n</blockquote>\n<blockquote>\n<p>Let's re-create our class component called App to a functional component.</p>\n</blockquote>\n<blockquote>\n<p>The hook that allows us to manipulate state is called <code>useState</code>and we need to import from react</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { useState } from 'react';\n</code></pre>\n<blockquote>\n<p>We can then use it like this: <code>useState()</code> where in between on brackets we pass the initial value of the state. </p>\n</blockquote>\n<blockquote>\n<p><code>useState()</code> returns and array with EXACTLY 2 elements:</p>\n</blockquote>\n<ul>\n<li>the first element is the value of our current state</li>\n<li>the second element is a function which allows us to change the state, so that React is aware of it and triggers re-render of our component.</li>\n</ul>\n<blockquote>\n<p>We can store it in a constant:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> const stateArray = useState ({\n        persons: [\n          {name: \"Adda\", age: \"18\"},\n          {name: \"Pete\", age: \"15\"},\n        ]\n    })\n</code></pre>\n<blockquote>\n<p>Alternativelly we can <code>destructure</code> our array into individual variables.</p>\n</blockquote>\n<pre><code class=\"language-es6\"> const [personsState, setPersonsState] = useState ({\n        persons: [\n          {name: \"Adda\", age: \"18\"},\n          {name: \"Pete\", age: \"15\"},\n        ]\n    })\n</code></pre>\n<blockquote>\n<p>And this is how the whole component looks:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { useState } from 'react';\nimport './App.css';\nimport { Person } from './Person/Person'\nconst App = () => {\n    const [personsState, setPersonsState] = useState ({\n        persons: [\n          {name: \"Adda\", age: \"18\"},\n          {name: \"Pete\", age: \"15\"},\n        ]\n    })\n    const handleClick = () => {\n        setPersonsState(\n            {\n          persons: [\n            {name: \"Addania\", age: \"18\"},\n            {name: \"Pete\", age: \"16\"},\n          ]\n      }\n        )\n    }\n      return (\n        &#x3C;div className=\"App\">\n          &#x3C;h1>Hello worlds&#x3C;/h1>\n          &#x3C;button onClick={handleClick}>Click Me!&#x3C;/button>\n          &#x3C;Person name={personsState.persons[0].name} age={personsState.persons[0].age}/>\n        &#x3C;/div>\n      );\n}\nexport default App;\n</code></pre>\n<blockquote>\n<p>Notice how in functional component we can remove <code>this</code> keyword.</p>\n</blockquote>\n<blockquote>\n<p>Very very important note about updating state with hook useState and how we do it in class-based component with setState. </p>\n</blockquote>\n<blockquote>\n<p>SetState merges the states, we if we update persons, we wont lose info about animals</p>\n</blockquote>\n<pre><code class=\"language-es6\">state = {\n      persons: [\n        {name: \"Adda\", age: \"18\"},\n        {name: \"Pete\", age: \"15\"},\n      ],\n      animals: \"muuu\"\n  }\nhandleClick = () => {\n    this.setState(\n        {\n      persons: [\n        {name: \"Addamia\", age: \"18\"},\n        {name: \"Pete\", age: \"16\"},\n      ]\n  }\n    )\n}\n</code></pre>\n<blockquote>\n<p>But in using useState - we would lose this info:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const [personsState, setPersonsState] = useState ({\n        persons: [\n          {name: \"Adda\", age: \"18\"},\n          {name: \"Pete\", age: \"15\"},\n        ], \n        animals: \"some value\"\n    })\n    const handleClick = () => {\n        setPersonsState(\n            {\n          persons: [\n            {name: \"Addania\", age: \"18\"},\n            {name: \"Pete\", age: \"16\"},\n          ]\n      }\n        )\n    }\n</code></pre>\n<blockquote>\n<p>Therefore what we need to do in functional component is to create a new array, spread it from the old one (copy all values) and only update one of them:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const [personsState, setPersonsState] = useState ({\n        persons: [\n          {name: \"Adda\", age: \"18\"},\n          {name: \"Pete\", age: \"15\"},\n        ], \n        animals: \"some value\"\n    })\n    const handleClick = () => {\n        setPersonsState(\n            {...personsState, \n          persons: [\n    \n            {name: \"Addania\", age: \"18\"},\n            {name: \"Pete\", age: \"16\"},\n          ]\n      }\n        )\n    }\n</code></pre>\n<blockquote>\n<p>Another possibility is that we simply have 2 different states for each. In functional component using useState hook, we can have as many states as we want. While in class- based components we only have 1 single state and this is then a big monster.</p>\n</blockquote>\n<blockquote>\n<p>Example of 2 states in functional component:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const [personsState, setPersonsState] = useState ({\n        persons: [\n          {name: \"Adda\", age: \"18\"},\n          {name: \"Pete\", age: \"15\"},\n        ]\n    })\nconst [animalsState, setAnimalsState] = useState ({\n        animals: \"some value\"\n    })\n</code></pre>\n<p><strong>Stateful and stateless components</strong></p>\n<blockquote>\n<p>Stateful component is a component which manages state (no matter if class or function). They are called smart components or container components.</p>\n</blockquote>\n<blockquote>\n<p>Stateless component has no internal state management. They are also called dumb components or presentational components. And good practice is to create as many of such components as possible. Why? So that we have clear flow of data and it is clear where the main logic sits, where data changes which is then distributed to the rest of the app</p>\n</blockquote>\n<p><strong>Passing methods between components as props</strong></p>\n<blockquote>\n<p>What if we want also possibility to switch the name when clicking on a h2 within the Person.js?</p>\n</blockquote>\n<blockquote>\n<p>We can pass a reference to the handleClick method from our App.js component to Person.js component as a prop:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> &#x3C;Person name={personsState.persons[0].name} age={personsState.persons[0].age} handleHeaderClick={handleClick} />\n</code></pre>\n<blockquote>\n<p>And then we can use it from props object in the Person.js:</p>\n</blockquote>\n<pre><code class=\"language-es6\">export const Person = (props) => {\n   return (\n       &#x3C;div>\n       &#x3C;h2 onClick={props.handleHeaderClick}>I am a {props.name} and I am {props.age} years old&#x3C;/h2>\n       &#x3C;p>{props.children}&#x3C;/p>\n       &#x3C;/div>\n   )\n}\n</code></pre>\n<blockquote>\n<p>What if our function also needs to receive some kind of input??</p>\n</blockquote>\n<pre><code class=\"language-es6\">const handleClick = (newName) => {\n        setPersonsState(\n            {... personsState,\n          persons: [\n            {name: newName, age: \"18\"},\n            {name: \"Pete\", age: \"16\"},\n          ]\n      }\n        )\n    }\n</code></pre>\n<blockquote>\n<p>We can then pass an arrow function which allows us to use () without execting the function immediatelly as the component renders:</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;Person name={personsState.persons[0].name} age={personsState.persons[0].age} handleHeaderClick={() => handleClick(\"The Queen\")} />\n</code></pre>\n<blockquote>\n<p>Whole app.js looks like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { useState } from 'react';\nimport './App.css';\nimport { Person } from './Person/Person'\nconst App = () => {\n    const [personsState, setPersonsState] = useState ({\n        persons: [\n          {name: \"Adda\", age: \"18\"},\n          {name: \"Pete\", age: \"15\"},\n        ], \n        animals: \"miaucik\"\n    })\n    console.log(\"personsState\", personsState)\n    const handleClick = (newName) => {\n        setPersonsState(\n            {... personsState,\n          persons: [\n            {name: newName, age: \"18\"},\n            {name: \"Pete\", age: \"16\"},\n          ]\n      }\n        )\n    }\n      return (\n        &#x3C;div className=\"App\">\n          &#x3C;h1>Hello worlds&#x3C;/h1>\n          &#x3C;button onClick={() => handleClick(\"The Queen\")}>Click Me!&#x3C;/button>\n          &#x3C;Person name={personsState.persons[0].name} age={personsState.persons[0].age} handleHeaderClick={() => handleClick(\"The Queen\")} />\n        &#x3C;/div>\n      );\n}\nexport default App;\n</code></pre>\n<blockquote>\n<p>The Person.js file looks like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from 'react';\nexport const Person = (props) => {\n    return (\n        &#x3C;div>\n        &#x3C;h2 onClick={props.handleHeaderClick}>I am a {props.name} and I am {props.age} years old&#x3C;/h2>\n        &#x3C;p>{props.children}&#x3C;/p>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<blockquote>\n<p>This syntax works for functional as well as class components.</p>\n</blockquote>\n<blockquote>\n<p>In class components it would look like this (App.js):</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from 'react';\nimport './App.css';\nimport {Person} from './Person/Person';\nclass App extends Component {\n  state = {\n    persons: [\n      { name: 'Adda', age: 18 },\n      { name: 'Pete', age: 15 },\n    ],\n    otherState: 'some other value'\n  }\n  handleClick = (newName) => {\n    this.setState( {\n      persons: [\n        { name: newName, age: 18 },\n        { name: 'Pete', age: 15 },\n      ]\n    } )\n  }\n  render () {\n    return (\n        &#x3C;div className=\"App\">\n          &#x3C;h1>Hello worlds&#x3C;/h1>\n          &#x3C;button onClick={() => this.handleClick(\"Supeeeeeer\")}>Click Me!&#x3C;/button>\n          &#x3C;Person name={this.state.persons[0].name} age={this.state.persons[0].age} handleHeaderClick={() => this.handleClick(\"Woooooow\")} />\n        &#x3C;/div>\n    )\n  }\n}\nexport default App;\n</code></pre>\n<blockquote>\n<p>Please also note that arrow functions do not need curly braces and return keyword if they are in one line. But we can equally write:</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;button onClick={() => { return this.handleClick(\"Supeeeeeer\")}}>Click Me!&#x3C;/button>\n</code></pre>\n<blockquote>\n<p>But there is also another way how to do this and this way is specific to class-based components. We will use special binding of the method and say that this is bound to the class App itself:</p>\n</blockquote>\n<pre><code class=\"language-es6\">this.switchNameHandler.bind(this, \"Super\")\n</code></pre>\n<blockquote>\n<p>If we write it in that way, we can also pass list of arguments. in our case one: \"Super\" but can be multiple</p>\n</blockquote>\n<blockquote>\n<p>Full code looks like this:</p>\n</blockquote>\n<p>App.js</p>\n<pre><code class=\"language-es6\">import React, { Component } from 'react';\nimport './App.css';\nimport {Person} from './Person/Person';\nclass App extends Component {\n  state = {\n    persons: [\n      { name: 'Adda', age: 18 },\n      { name: 'Pete', age: 15 },\n    ],\n    otherState: 'some other value'\n  }\n  handleClick = (newName) => {\n    this.setState( {\n      persons: [\n        { name: newName, age: 18 },\n        { name: 'Pete', age: 15 },\n      ]\n    } )\n  }\n  render () {\n    return (\n        &#x3C;div className=\"App\">\n          &#x3C;h1>Hello worlds&#x3C;/h1>\n          &#x3C;button onClick={this.handleClick.bind(this, \"Super\")}>Click Me!&#x3C;/button>\n          &#x3C;Person name={this.state.persons[0].name} age={this.state.persons[0].age} handleHeaderClick={this.handleClick.bind(this, \"Wow\")} />\n        &#x3C;/div>\n    )\n  }\n}\nexport default App;\n</code></pre>\n<p>Person.js</p>\n<pre><code class=\"language-es6\">import React from 'react';\nexport const Person = (props) => {\n    return (\n        &#x3C;div>\n        &#x3C;h2 onClick={props.handleHeaderClick}>I am a {props.name} and I am {props.age} years old&#x3C;/h2>\n        &#x3C;p>{props.children}&#x3C;/p>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<blockquote>\n<p>Now imaginewe want to make the name change on user input</p>\n</blockquote>\n<blockquote>\n<p>In Person.js we will add input and onChange handler:</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;input type=\"text\" onChange={props.nameChanger}/>\n</code></pre>\n<blockquote>\n<p>In App.js we add method and pass it as prop to Person</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n    persons: [\n      { name: 'Adda', age: 18 },\n      { name: 'Pete', age: 15 },\n    ],\n    otherState: 'some other value'\n  }\n\n  handleClick = (newName) => {\n\n    this.setState( {\n      persons: [\n        { name: newName, age: 18 },\n        { name: 'Pete', age: 15 },\n      ]\n    } )\n  }\n\n  handleChange = (event) => {\n\n    this.setState( {\n      persons: [\n        { name: event.target.value, age: 18 },\n        { name: 'Pete', age: 15 },\n      ]\n    } )\n  }\n\n  render () {\n    return (\n\n        &#x3C;div className=\"App\">\n          &#x3C;h1>Hello worlds&#x3C;/h1>\n          &#x3C;button onClick={() => { return this.handleClick(\"Supeeeeeer\")}}>Click Me!&#x3C;/button>\n          &#x3C;Person name={this.state.persons[0].name} age={this.state.persons[0].age} nameChanger={this.handleChange} handleHeaderClick={() => this.handleClick(\"Woooooow\")} />\n        &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<blockquote>\n<p>Event object is passed automatically to the function by React when input changes.</p>\n</blockquote>\n<blockquote>\n<p>Two way binding means that we can also provide initial value to the input, so that input would be pre-populated with whatever is in initial state.</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;input type=\"text\" onChange={props.nameChanger} value={props.name}/>\n</code></pre>\n<p><strong>Styling components</strong></p>\n<blockquote>\n<p>There are two ways of styling components: with dedicaated css file or inline in js file</p>\n</blockquote>\n<p>CSS FILE</p>\n<blockquote>\n<p>Add a file called Person.css</p>\n</blockquote>\n<blockquote>\n<p>Please not that even though I call this fiel Person.css which might misleadingly suggest that this file will only be used in Person.js, it is not so. Any code in this file is a global css. </p>\n</blockquote>\n<blockquote>\n<p>Content of the file will be like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">.Person {\n    width: 60%;\n    margin: 16px auto;\n    border: 1px solid #eeeeee;\n    box-shadow: 0 2px 3px #cccccc;\n    padding: 16px;\n    text-align: center;\n}\n</code></pre>\n<blockquote>\n<p>Then we can go to Person.js, import it and add the className Person to a div:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from 'react';\nimport \"./Person.css\"\nexport const Person = (props) => {\n    return (\n        &#x3C;div className=\"Person\">\n        &#x3C;h2 onClick={props.handleHeaderClick}>I am a {props.name} and I am {props.age} years old&#x3C;/h2>\n        &#x3C;p>{props.children}&#x3C;/p>\n        &#x3C;input type=\"text\" onChange={props.nameChanger}/>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<blockquote>\n<p>Please note you have to define file extension: .css because only .js can be omitted.</p>\n</blockquote>\n<blockquote>\n<p>Also notice that it is Webpack who makes it possible to import css files eventually to our html file. </p>\n</blockquote>\n<p>INLINE STYLING</p>\n<blockquote>\n<p>We can create a constant in render method of the App.js and adding property style to the button:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> render () {\n      const inlineStyle={\n          backgroundColor: \"orange\",\n          border: \"none\",\n          cursor: \"pointer\",\n          color: \"white\"\n      }\n    return (\n\n        &#x3C;div className=\"App\">\n          &#x3C;h1>Hello worlds&#x3C;/h1>\n          &#x3C;button style={inlineStyle} onClick={() => { return this.handleClick(\"Supeeeeeer\")}}>Click Me!&#x3C;/button>\n          &#x3C;Person name={this.state.persons[0].name} age={this.state.persons[0].age} nameChanger={this.handleChange} handleHeaderClick={() => this.handleClick(\"Woooooow\")} />\n        &#x3C;/div>\n    )\n  }\n</code></pre>\n<blockquote>\n<p>Or alternatively, we can put all the styles in thestyle property:</p>\n</blockquote>\n<pre><code class=\"language-es6\">render () {    \n    return (\n        &#x3C;div className=\"App\">\n          &#x3C;h1>Hello worlds&#x3C;/h1>\n          &#x3C;button style={{backgroundColor: \"orange\",\n          border: \"none\",\n          cursor: \"pointer\",\n          color: \"white\"}} onClick={() => { return this.handleClick(\"Supeeeeeer\")}}>Click Me!&#x3C;/button>\n          &#x3C;Person name={this.state.persons[0].name} age={this.state.persons[0].age} nameChanger={this.handleChange} handleHeaderClick={() => this.handleClick(\"Woooooow\")} />\n        &#x3C;/div>\n    )\n  }\n</code></pre>\n<blockquote>\n<p>Using inline styles scopes styles. Which means those are not global, they only apply to this element we used it for</p>\n</blockquote>\n<blockquote>\n<p>Notice that we then need double curly braces, because styles are an object and the first curly braces tell to the js that these are placeholder</p>\n</blockquote>\n<p><strong>Conditionally render content</strong></p>\n<blockquote>\n<p>What if we want to render some content upon click? Or hide it? We can use a state which will say true or false and they css prop display to be block or none depending on the state:</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18 },\n      { name: \"Pete\", age: 15 },\n    ],\n    showPersons: true,\n  };\n\n  handleClick = (newName) => {\n    this.setState({\n      persons: [\n        { name: newName, age: 18 },\n        { name: \"Pete\", age: 15 },\n      ],\n    });\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      persons: [\n        { name: event.target.value, age: 18 },\n        { name: \"Pete\", age: 15 },\n      ],\n    });\n  };\n\n  handleVisibility = () => {\n    this.setState({ showPersons: !this.state.showPersons })\n  };\n\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;button onClick={this.handleVisibility}>hide/show elements&#x3C;/button>\n        &#x3C;div style={{ display: this.state.showPersons ? \"block\" : \"none\" }}>\n          &#x3C;Person\n            name={this.state.persons[0].name}\n            age={this.state.persons[0].age}\n            nameChanger={this.handleChange}\n            handleHeaderClick={() => this.handleClick(\"Woooooow\")}\n          />\n        &#x3C;/div>\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<blockquote>\n<p>Alternatively we can use ternary expression in return statement in order to render content conditionally. Please note we cannot use if statement in return statement <code>&#x3C;div>{if(true){&#x3C;h1>Hi&#x3C;/h1>}&#x3C;/div></code>. This will not work, we can only use simple statements (not block statements like if) in return</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18 },\n      { name: \"Pete\", age: 15 },\n    ],\n    showPersons: true,\n  };\n\n  handleClick = (newName) => {\n    this.setState({\n      persons: [\n        { name: newName, age: 18 },\n        { name: \"Pete\", age: 15 },\n      ],\n    });\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      persons: [\n        { name: event.target.value, age: 18 },\n        { name: \"Pete\", age: 15 },\n      ],\n    });\n  };\n\n  handleVisibility = () => {\n    this.setState({ showPersons: !this.state.showPersons })\n  };\n\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;button onClick={this.handleVisibility}>hide/show elements&#x3C;/button>\n        &#x3C;div>\n          {this.state.showPersons ? (\n            &#x3C;div>\n              &#x3C;Person\n                name={this.state.persons[0].name}\n                age={this.state.persons[0].age}\n                nameChanger={this.handleChange}\n                handleHeaderClick={() => this.handleClick(\"Woooooow\")}\n              />\n            &#x3C;/div>\n          ): null }\n        &#x3C;/div>\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<blockquote>\n<p>Alternatively we can also use &#x26;&#x26; syntax to render elements conditionally:</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18 },\n      { name: \"Pete\", age: 15 },\n    ],\n    showPersons: true,\n  };\n\n  handleClick = (newName) => {\n    this.setState({\n      persons: [\n        { name: newName, age: 18 },\n        { name: \"Pete\", age: 15 },\n      ],\n    });\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      persons: [\n        { name: event.target.value, age: 18 },\n        { name: \"Pete\", age: 15 },\n      ],\n    });\n  };\n\n  handleVisibility = () => {\n   this.setState({ showPersons: !this.state.showPersons })\n  };\n\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;button onClick={this.handleVisibility}>hide/show elements&#x3C;/button>\n        &#x3C;div>\n          {this.state.showPersons &#x26;&#x26; (\n            &#x3C;div>\n              &#x3C;Person\n                name={this.state.persons[0].name}\n                age={this.state.persons[0].age}\n                nameChanger={this.handleChange}\n                handleHeaderClick={() => this.handleClick(\"Woooooow\")}\n              />\n            &#x3C;/div>\n          )}\n        &#x3C;/div>\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<blockquote>\n<p>Important note about render method of class components. When something needs to be re-rendered, we do not only fire the return statement but also render method of the class componenent. Which can be very useful!\nThis is something we can also use to conditionally render some elements:</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18 },\n      { name: \"Pete\", age: 15 },\n    ],\n    showPersons: true,\n  };\n\n  handleClick = (newName) => {\n    this.setState({\n      persons: [\n        { name: newName, age: 18 },\n        { name: \"Pete\", age: 15 },\n      ],\n    });\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      persons: [\n        { name: event.target.value, age: 18 },\n        { name: \"Pete\", age: 15 },\n      ],\n    });\n  };\n\n  handleVisibility = () => {\n    this.setState({ showPersons: !this.state.showPersons });\n  };\n\n  render() {\n    let persons = null;\n    if (this.state.showPersons) {\n      persons = (\n        &#x3C;div>\n          &#x3C;Person\n            name={this.state.persons[0].name}\n            age={this.state.persons[0].age}\n            nameChanger={this.handleChange}\n            handleHeaderClick={() => this.handleClick(\"Woooooow\")}\n          />\n        &#x3C;/div>\n      );\n    }\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;button onClick={this.handleVisibility}>hide/show elements&#x3C;/button>\n        &#x3C;div>{persons}&#x3C;/div>\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<p><strong>Outputing lists dynamically</strong></p>\n<blockquote>\n<p>Imagine we have list of persons and we dont want to manually add each person as a component in the App.js return statement, we want a function which will map through all persons and output them automatically, so that we can get new person displayed if list has more persons, etc.\nWe can use a map function which will iterate through the array of persons and output JSX components for each othem, which can be then displayed in return statement:</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18 },\n      { name: \"Pete\", age: 15 },\n      { name: \"Jess\", age: 5 },\n    ],\n  };\n\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        {this.state.persons.map((person) => {\n          return (\n            &#x3C;Person\n              name={person.name}\n              age={person.age}\n            />\n          );\n        })}\n      &#x3C;/div>\n    );\n  }\n}\nexport default App;\n</code></pre>\n<blockquote>\n<p>What if we also want to render a delete button next to each person, which will then delete the entire person row!!\nApp.js</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18 },\n      { name: \"Pete\", age: 15 },\n      { name: \"Jess\", age: 5 },\n    ],\n  };\n\n  deleteHandler = (toDelete) => {\n    this.setState({\n        persons: this.state.persons.filter((person)=>person.name !== toDelete)\n    })\n  }\n\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        {this.state.persons.map((person) => {\n          return (\n            &#x3C;Person\n              delete={this.deleteHandler}\n              name={person.name}\n              age={person.age}\n            />\n          );\n        })}\n      &#x3C;/div>\n    );\n  }\n}\nexport default App;\n</code></pre>\n<p>Person.js</p>\n<pre><code class=\"language-es6\">export const Person = (props) => {\n    return (\n        &#x3C;div className=\"Person\">\n        &#x3C;h2>I am a {props.name} and I am {props.age} years old&#x3C;/h2>\n        &#x3C;button onClick={()=>props.delete(props.name)}>Delete me&#x3C;/button>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<blockquote>\n<p>PLease note any time you deal with a List and maybe iterate through it to generate components, you should always assign it a key property. It helps React to know which element needs to be re-rendered instead of every time rendering the whole list (because for react each element of the list is the same, it does not inspect deeply that maybe one element is Jess another Pete).</p>\n</blockquote>\n<blockquote>\n<p>For that, when we render the Person components, we should add the key and its valueshould be unique. We can use index of the array as key. Map function returns second argument index:</p>\n</blockquote>\n<pre><code class=\"language-es6\">{this.state.persons.map((person, index) => {\n          return (\n            &#x3C;Person\n              delete={this.deleteHandler}\n              name={person.name}\n              age={person.age}\n              key={index}\n            />\n          );\n        })}\n</code></pre>\n<blockquote>\n<p>Please note that <code>key</code> and <code>ref</code> are reserved words and they cannot be used in child component as props. <code>props.key</code> or <code>props.ref</code> will not work. Alternatively you can use some other prop with same value such as <code>keyId</code> which you will be able to use in child component as props:</p>\n</blockquote>\n<pre><code class=\"language-es6\">{this.state.persons.map((person, index) => {\n          return (\n            &#x3C;Person\n              delete={this.deleteHandler}\n              name={person.name}\n              age={person.age}\n              key={index}\n              keyId={index}\n            />\n          );\n        })}\n</code></pre>\n<blockquote>\n<p>How to make sure that we also display input for each person and it will update the state of that given person?\nApp.js</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18, id:\"01\" },\n      { name: \"Pete\", age: 15, id:\"02\"},\n      { name: \"Jess\", age: 5, id:\"03\"},\n    ],\n  };\n\n  deleteHandler = (toDelete) => {\n    this.setState({\n        persons: this.state.persons.filter((person)=>person.name !== toDelete)\n    })\n  }\nhandleChange = (event, id) => {\nconst newPersons= this.state.persons.map(person=>{\n    if(person.id===id){\n        return {...person, name:event.target.value}\n    } else { return person}\n})\nthis.setState({persons: newPersons})\n}\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        {this.state.persons.map((person) => {\n          return (\n            &#x3C;Person\n              delete={this.deleteHandler}\n              name={person.name}\n              age={person.age}\n              key={person.id}\n              onChange={(event)=>this.handleChange(event, person.id)}\n            />\n          );\n        })}\n      &#x3C;/div>\n    );\n  }\n}\nexport default App;\n</code></pre>\n<p>Person.js</p>\n<pre><code class=\"language-es6\">export const Person = (props) => {\n    return (\n        &#x3C;div className=\"Person\">\n        &#x3C;h2>I am a {props.name} and I am {props.age} years old&#x3C;/h2>\n        &#x3C;button onClick={()=>props.delete(props.name)}>Delete me&#x3C;/button>\n        &#x3C;input type=\"text\" onChange={props.onChange}/>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<p><strong>Conditionally style elements</strong></p>\n<blockquote>\n<p>We can use ternary statement to render different colors of the background in Person.js</p>\n</blockquote>\n<pre><code class=\"language-es6\">export const Person = (props) => {\n    const color= props.age >10 ? \"green\" : \"orange\"\n    return (\n        &#x3C;div className=\"Person\" style={{backgroundColor: color}}>\n        &#x3C;h2>I am a {props.name} and I am {props.age} years old&#x3C;/h2>\n        &#x3C;button onClick={()=>props.delete(props.name)}>Delete me&#x3C;/button>\n        &#x3C;input type=\"text\" onChange={props.onChange}/>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<p><strong>Setting class named dynamically</strong></p>\n<blockquote>\n<p>What if we want to make class names dynamic as well?\nPerson.css</p>\n</blockquote>\n<pre><code class=\"language-es6\">.red {\n  color: red;\n}\n.bold {\n  font-weight: bold;\n}\n</code></pre>\n<p>Person.js</p>\n<pre><code class=\"language-es6\">export const Person = (props) => {\n    const color= props.age >10 ? \"green\" : \"orange\"\n    let classes= []\n    \n    if (props.age &#x3C;=15){\n        classes.push(\"bold\")\n    }\n    if (props.age &#x3C;=5){\n        classes.push(\"red\")\n    }\n    return (\n        &#x3C;div className=\"Person\" style={{backgroundColor: color}}>\n        &#x3C;p className={classes.join(' ')}>I am a {props.name} and I am {props.age} years old&#x3C;/p>\n        &#x3C;button onClick={()=>props.delete(props.name)}>Delete me&#x3C;/button>\n        &#x3C;input type=\"text\" onChange={props.onChange}/>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<p><strong>Pseudo selectors and media queries</strong></p>\n<blockquote>\n<p>Pseudo selecotrs are for example hover, focus, active, etc</p>\n</blockquote>\n<pre><code class=\"language-es6\">button:hover {\n    backgroundColor: blue;\n}\n</code></pre>\n<blockquote>\n<p>Pseudo selectors cannot be used inline in React! But if we cannot use them inline, then we would need to import a css stylesheet, which will however mean that now the styles will be GLOBAL and not local (like inline styles are) - scoped to our component.</p>\n</blockquote>\n<blockquote>\n<p>Same is true for media queries which cannot be used inline. Media queries are techniques in CSS which use <code>@media</code> rule to include a block of CSS properties only if a certain condition is true. For example if the browser window is smaller than 600px, etc.</p>\n</blockquote>\n<pre><code class=\"language-es6\">@media only screen and (max-width: 600px) {\n  body {\n    background-color: lightblue;\n  }\n}\n</code></pre>\n<pre><code class=\"language-es6\">/* For mobile phones: */\n[class*=\"col-\"] {\n  width: 100%;\n}\n\n@media only screen and (min-width: 768px) {\n  /* For desktop: */\n  .col-1 {width: 8.33%;}\n  .col-2 {width: 16.66%;}\n  .col-3 {width: 25%;}\n  .col-4 {width: 33.33%;}\n  .col-5 {width: 41.66%;}\n  .col-6 {width: 50%;}\n  .col-7 {width: 58.33%;}\n  .col-8 {width: 66.66%;}\n  .col-9 {width: 75%;}\n  .col-10 {width: 83.33%;}\n  .col-11 {width: 91.66%;}\n  .col-12 {width: 100%;}\n}\n</code></pre>\n<blockquote>\n<p>To solve this, we can use a 3rd party software (package) which enables us to use pseudo selectors or media queries in javascript files. It is called radium and is a popular React package. In terminal type:</p>\n</blockquote>\n<pre><code>npm install --save radium\n</code></pre>\n<blockquote>\n<p>In order to use it, we need to import the radium to our file (for example App.js)</p>\n</blockquote>\n<pre><code class=\"language-es6\">import Radium from 'radium'\n</code></pre>\n<blockquote>\n<p>Radium is a HOC - higher order component which we can use to wrap our App component upon export</p>\n</blockquote>\n<pre><code class=\"language-es6\">export default Radium(App)\n</code></pre>\n<blockquote>\n<p>It injects some functionality to App component. We can use it on any component.</p>\n</blockquote>\n<blockquote>\n<p>Now how to use our hover pseudo selector?</p>\n</blockquote>\n<pre><code class=\"language-es6\"> const buttonStyle= {\n          border: \"none\",\n          color: \"black\",\n          backgroundColor: \"turquoise\",\n          ':hover': {\n            color: \"white\",\n            backgroundColor: \"blue\"\n          }\n      }\n</code></pre>\n<blockquote>\n<p>Whole component looks like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Radium from 'radium'\nimport { Person } from \"./Person/Person\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18, id:\"01\" },\n      { name: \"Pete\", age: 15, id:\"02\"},\n      { name: \"Jess\", age: 5, id:\"03\"},\n    ],\n  };\n\n  deleteHandler = (toDelete) => {\n    this.setState({\n        persons: this.state.persons.filter((person)=>person.name !== toDelete)\n    })\n  }\nhandleChange = (event, id) => {\nconst newPersons= this.state.persons.map(person=>{\n    if(person.id===id){\n        return {...person, name:event.target.value}\n    } else { return person}\n})\nthis.setState({persons: newPersons})\n}\n  render() {\n      let buttonStyle= {\n          border: \"none\",\n          color: \"black\",\n          backgroundColor: \"turquoise\",\n          ':hover': {\n            color: \"white\",\n            backgroundColor: \"blue\"\n          }\n      }    \n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;button style={buttonStyle}>Hover State&#x3C;/button>\n        {this.state.persons.map((person) => {\n          return (\n            &#x3C;Person\n              delete={this.deleteHandler}\n              name={person.name}\n              age={person.age}\n              key={person.id}\n              onChange={(event)=>this.handleChange(event, person.id)}\n            />\n          );\n        })}\n      &#x3C;/div>\n    );\n  }\n}\nexport default Radium(App);\n</code></pre>\n<blockquote>\n<p>We can also conditionally change styles for pseudo selector in if condition. In order ot do it we will write:</p>\n</blockquote>\n<pre><code class=\"language-es6\">if (this.state.persons.length&#x3C;=2){\n        buttonStyle.backgroundColor= \"orange\";\n        buttonStyle.color=\"red\";\n        buttonStyle[\":hover\"]={\n          color: \"white\",\n          backgroundColor: \"green\"\n        }\n    }\n</code></pre>\n<blockquote>\n<p>Whole App component then looks like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Radium from 'radium'\nimport { Person } from \"./Person/Person\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18, id:\"01\" },\n      { name: \"Pete\", age: 15, id:\"02\"},\n      { name: \"Jess\", age: 5, id:\"03\"},\n    ],\n  };\n\n  deleteHandler = (toDelete) => {\n    this.setState({\n        persons: this.state.persons.filter((person)=>person.name !== toDelete)\n    })\n  }\nhandleChange = (event, id) => {\nconst newPersons= this.state.persons.map(person=>{\n    if(person.id===id){\n        return {...person, name:event.target.value}\n    } else { return person}\n})\nthis.setState({persons: newPersons})\n}\n  render() {\n      const buttonStyle= {\n          border: \"none\",\n          color: \"black\",\n          backgroundColor: \"turquoise\",\n          ':hover': {\n            color: \"white\",\n            backgroundColor: \"blue\"\n          }\n      }\n      if (this.state.persons.length&#x3C;=2){\n        buttonStyle.backgroundColor= \"orange\";\n        buttonStyle.color=\"red\";\n        buttonStyle[\":hover\"]={\n          color: \"white\",\n          backgroundColor: \"green\"\n        }\n    }\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;button style={buttonStyle}>Hover State&#x3C;/button>\n        {this.state.persons.map((person) => {\n          return (\n            &#x3C;Person\n              delete={this.deleteHandler}\n              name={person.name}\n              age={person.age}\n              key={person.id}\n              onChange={(event)=>this.handleChange(event, person.id)}\n            />\n          );\n        })}\n      &#x3C;/div>\n    );\n  }\n}\nexport default Radium(App);\n</code></pre>\n<p><strong>Media queries</strong></p>\n<blockquote>\n<p>We can override styles in css file with media queries. For example we might want to say that for screen width 500px and more, we want to change the width of and item like this:\nPerson.css</p>\n</blockquote>\n<pre><code class=\"language-es6\">.Person {\n  width: 60%;\n  margin: 16px auto;\n  border: 1px solid #eeeeee;\n  box-shadow: 0 2px 3px #cccccc;\n  padding: 16px;\n  text-align: center;\n}\n@media (min-width: 500px){\n    .Person {\n        width: 100%\n    }\n}\n</code></pre>\n<blockquote>\n<p>With Radium we can also do this inline:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const styling={\n        \"@media (min-width: 500px)\": {\n            width: \"100%\"\n        }\n    }\n</code></pre>\n<blockquote>\n<p>But in order to make it work, we will need to also import a special component StyleRoot provided by Radium and wrap entire app in it in App.js</p>\n</blockquote>\n<pre><code class=\"language-es6\">import Radium, { StyleRoot } from 'radium'\n</code></pre>\n<blockquote>\n<p>Whole code looks like this:\nApp.js</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Radium, { StyleRoot } from \"radium\";\nimport Person from \"./Person/Person\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18, id: \"01\" },\n      { name: \"Pete\", age: 15, id: \"02\" },\n      { name: \"Jess\", age: 5, id: \"03\" },\n    ],\n  };\n\n  deleteHandler = (toDelete) => {\n    this.setState({\n      persons: this.state.persons.filter((person) => person.name !== toDelete),\n    });\n  };\n  handleChange = (event, id) => {\n    const newPersons = this.state.persons.map((person) => {\n      if (person.id === id) {\n        return { ...person, name: event.target.value };\n      } else {\n        return person;\n      }\n    });\n    this.setState({ persons: newPersons });\n  };\n  render() {\n    const buttonStyle = {\n      border: \"none\",\n      color: \"black\",\n      backgroundColor: \"turquoise\",\n      \":hover\": {\n        color: \"white\",\n        backgroundColor: \"blue\",\n      },\n    };\n    if (this.state.persons.length &#x3C;= 2) {\n      buttonStyle.backgroundColor = \"orange\";\n      buttonStyle.color = \"red\";\n      buttonStyle[\":hover\"] = {\n        color: \"white\",\n        backgroundColor: \"green\",\n      };\n    }\n    return (\n      &#x3C;StyleRoot>\n        &#x3C;div className=\"App\">\n          &#x3C;button style={buttonStyle}>Hover State&#x3C;/button>\n          {this.state.persons.map((person) => {\n            return (\n              &#x3C;Person\n                delete={this.deleteHandler}\n                name={person.name}\n                age={person.age}\n                key={person.id}\n                onChange={(event) => this.handleChange(event, person.id)}\n              />\n            );\n          })}\n        &#x3C;/div>\n      &#x3C;/StyleRoot>\n    );\n  }\n}\nexport default Radium(App);\n</code></pre>\n<p>Person.js</p>\n<pre><code class=\"language-es6\">import React from 'react';\nimport \"./Person.css\" \nimport Radium from 'radium';\nconst Person = (props) => {\n    const styling={\n        \"@media (min-width: 500px)\": {\n            width: \"100%\"\n        }\n    }\n    return (\n        &#x3C;div className=\"Person\" style={styling}>\n        &#x3C;p>I am a {props.name} and I am {props.age} years old&#x3C;/p>\n        &#x3C;button onClick={()=>props.delete(props.name)}>Delete me&#x3C;/button>\n        &#x3C;input type=\"text\" onChange={props.onChange}/>\n        &#x3C;/div>\n    )\n}\nexport default Radium(Person)\n</code></pre>\n<p><strong>Styled components</strong></p>\n<blockquote>\n<p>Styled components is another popular react 3rd party library which makes it easier to style components. In order to install it write in your terminal</p>\n</blockquote>\n<pre><code class=\"language-es6\">npm install --save styled-components\n</code></pre>\n<blockquote>\n<p>Styled components enable using css styling in Javascript. We need to import them with:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import styled from \"styled-components\";\n</code></pre>\n<blockquote>\n<p>This imports <code>styled</code> object which has for example a button method!! It can be used in this way:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const Button = styled.button``\n</code></pre>\n<blockquote>\n<p>Two backticks is a Vanilla javascript for tagged template literals. Two backticks are used instead of two parentheces with function arguments which are used for normal functions. Between two backtics, we can pass some strings which are then passed to the button method in a special way.</p>\n</blockquote>\n<blockquote>\n<p>Please note that backticks without being part of a method is also a regular Javascript to create strings</p>\n</blockquote>\n<blockquote>\n<p>Object styled allows a method for any HTML element you can create, such as styled.div, styled.input, styled.h1, etc</p>\n</blockquote>\n<blockquote>\n<p>Styled object with its methods return React components. Easiest way to use them is to assign them to our own component and the use in code:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledDiv = styled.div`\n  width: 60%;\n  margin: 16px auto;\n  border: 1px solid #eeeeee;\n  box-shadow: 0 2px 3px #cccccc;\n  padding: 16px;\n  text-align: center;\n`;\nconst Person = (props) => {\n  return (\n    &#x3C;StyledDiv>\n      &#x3C;p>\n        I am a {props.name} and I am {props.age} years old\n      &#x3C;/p>\n      &#x3C;button onClick={() => props.delete(props.name)}>Delete me&#x3C;/button>\n      &#x3C;input type=\"text\" onChange={props.onChange} />\n    &#x3C;/StyledDiv>\n  );\n};\nexport default Person;\n</code></pre>\n<blockquote>\n<p>Please note, we do not longer need a separate css for Person, as all our styles are coming from StyledComponent.</p>\n</blockquote>\n<blockquote>\n<p>Please also note that we pass regular css (not react inline css) between two backticks. So code needs to look like: <code>text-align: center</code> and not like <code>textAlign: \"center\"</code></p>\n</blockquote>\n<blockquote>\n<p>Advantage is that we can also pass in pseudo selectors and media queries:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledDiv = styled.div`\n  width: 60%;\n  margin: 16px auto;\n  border: 1px solid #eeeeee;\n  box-shadow: 0 2px 3px #cccccc;\n  padding: 16px;\n  text-align: center;\n  &#x26;:hover {\n      background-color: blue;\n  }\n  @media (min-width: 500px){\n      width: 100%\n  }\n`;\nconst Person = (props) => {\n  return (\n    &#x3C;StyledDiv>\n      &#x3C;p>\n        I am a {props.name} and I am {props.age} years old\n      &#x3C;/p>\n      &#x3C;button onClick={() => props.delete(props.name)}>Delete me&#x3C;/button>\n      &#x3C;input type=\"text\" onChange={props.onChange} />\n    &#x3C;/StyledDiv>\n  );\n};\nexport default Person;\n</code></pre>\n<blockquote>\n<p>Notice however that for pseudo selectors you need to add <code>&#x26;</code> in front of the pseudo selector</p>\n</blockquote>\n<blockquote>\n<p>If we create for example a StyledButton we can still add onClick handlers just like before.</p>\n</blockquote>\n<blockquote>\n<p>How do styled components work in the backend? Outputs of the methods are React components (such as div) together with a class names which are added to each component. </p>\n</blockquote>\n<blockquote>\n<p>Apart from that in the HTML file, you will see that styled component adds in the head tag of the document another tag called style where it imports all the styles for those classes.</p>\n</blockquote>\n<blockquote>\n<p>How to use conditional styles with styled components? We can add a prop to our StyledButton with any name and pass there for example state, based on which we want to conditionally render the styles.</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;StyledButton alt={this.state.persons}>Click me&#x3C;/StyledButton>\n</code></pre>\n<blockquote>\n<p>Then in the definition of StyledButton we have two backtics which is a template literal and will output a string. But with a special synstax we can inject dynamic values. Syntax is dollar sign and two curly braces: <code>${}</code>. In between of curly braces we can pass a function which will receive props from the component and then return something. For its return, we can then use ternary expression to conditionally render different states:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const StyledButton= styled.button`\nbackground-color: ${props => props.alt.length &#x3C;=2 ? \"blue\" : \"orange\"};\n&#x26;:hover {\n    background-color: blue;\n}\n`\n</code></pre>\n<blockquote>\n<p>Whole App component can look like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Person from \"./Person/Person\";\nimport styled from \"styled-components\";\n\nconst StyledButton= styled.button`\nbackground-color: ${props => props.alt.length &#x3C;=2 ? \"blue\" : \"orange\"};\n&#x26;:hover {\n    background-color: blue;\n}\n`\n\nclass App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18, id: \"01\" },\n      { name: \"Pete\", age: 15, id: \"02\" },\n      { name: \"Jess\", age: 5, id: \"03\" },\n    ],\n  };\n\n  deleteHandler = (toDelete) => {\n    this.setState({\n      persons: this.state.persons.filter((person) => person.name !== toDelete),\n    });\n  };\n  handleChange = (event, id) => {\n    const newPersons = this.state.persons.map((person) => {\n      if (person.id === id) {\n        return { ...person, name: event.target.value };\n      } else {\n        return person;\n      }\n    });\n    this.setState({ persons: newPersons });\n  };\n\n  \n  render() {\n    return (\n        &#x3C;div className=\"App\">\n          &#x3C;StyledButton alt={this.state.persons}>Click me&#x3C;/StyledButton>\n          {this.state.persons.map((person) => {\n            return (\n              &#x3C;Person\n                delete={this.deleteHandler}\n                name={person.name}\n                age={person.age}\n                key={person.id}\n                onChange={(event) => this.handleChange(event, person.id)}\n              />\n            );\n          })}\n        &#x3C;/div>\n    );\n  }\n}\nexport default App;\n</code></pre>\n<blockquote>\n<p>Please note that the function we pass between two backtics, can be anything Javascriptish, but the return should be a string</p>\n</blockquote>\n<pre><code class=\"language-es6\">const StyledButton= styled.button`\nbackground-color: ${props => {\n    console.log(\"I do anything\")\n    return (\n        props.alt.length &#x3C;=2 ? \"blue\" : \"orange\")}\n    };\n&#x26;:hover {\n    background-color: blue;\n}\n`\n</code></pre>\n<p><strong>CSS modules</strong></p>\n<blockquote>\n<p>By default styles in the .css file are global! They do not only belong to the component, where they are imported. They will be applied to any component in the entire app.</p>\n</blockquote>\n<blockquote>\n<p>It can be demonstrated like this:\nPerson.css</p>\n</blockquote>\n<pre><code class=\"language-es6\">button {\n    background-color: green;\n}\n</code></pre>\n<p>Person.js</p>\n<pre><code class=\"language-es6\">import React from \"react\";\nimport './Person.css'\n\nconst Person = (props) => {\n  return (\n    &#x3C;div>\n      &#x3C;p>\n        I am a {props.name} and I am {props.age} years old\n      &#x3C;/p>\n      &#x3C;button onClick={() => props.delete(props.name)}>Delete me&#x3C;/button>\n      &#x3C;input type=\"text\" onChange={props.onChange} />\n    &#x3C;/div>\n  );\n};\nexport default Person;\n</code></pre>\n<p>App.js</p>\n<pre><code class=\"language-es6\">import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Person from \"./Person/Person\";\nclass App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18, id: \"01\" },\n      { name: \"Pete\", age: 15, id: \"02\" },\n      { name: \"Jess\", age: 5, id: \"03\" },\n    ],\n  };\n  deleteHandler = (toDelete) => {\n    this.setState({\n      persons: this.state.persons.filter((person) => person.name !== toDelete),\n    });\n  };\n  handleChange = (event, id) => {\n    const newPersons = this.state.persons.map((person) => {\n      if (person.id === id) {\n        return { ...person, name: event.target.value };\n      } else {\n        return person;\n      }\n    });\n    this.setState({ persons: newPersons });\n  };\n  render() {\n    return (\n        &#x3C;div className=\"App\">\n          &#x3C;button>Click me&#x3C;/button>\n          {this.state.persons.map((person) => {\n            return (\n              &#x3C;Person\n                delete={this.deleteHandler}\n                name={person.name}\n                age={person.age}\n                key={person.id}\n                onChange={(event) => this.handleChange(event, person.id)}\n              />\n            );\n          })}\n        &#x3C;/div>\n    );\n  }\n}\nexport default App;\n</code></pre>\n<blockquote>\n<p>All buttons also button in App.js will be green.</p>\n</blockquote>\n<blockquote>\n<p>CSS modules is another way how we can scope regular css stylesheet only to the specific component.\nIn order to use CSS modules, we need to check which <code>react-scripts</code> version we are using in Package.json. If we are using version 1 of <code>react-scripts</code>, then we need to tweak the configuration.</p>\n</blockquote>\n<blockquote>\n<p>We will first quit our local development server and then go to terminal and write: <code>npm run eject</code>. It will eject webpack config file which is normally only used under the hood but not ejected. This wil allow us to tweak a bit how our code is bundled together.\nWhen we confirm this, we will get <code>scripts</code> and <code>config</code> folder\nIn config folder, we can find a <code>webpack.config.dev.js</code> and <code>webpack.config.prod.js</code>file</p>\n</blockquote>\n<blockquote>\n<p>Package.json also changed and we have way more information there</p>\n</blockquote>\n<blockquote>\n<p>For CSS modules to work, we need to go to <code>webpack.config.dev.js</code> to the section of <code>test: /\\.css$/,</code>. We will tweak the options.\nThat part of the config will look like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> {\n            test: /\\.css$/,\n            use: [\n              require.resolve('style-loader'),\n              {\n                loader: require.resolve('css-loader'),\n                options: {\n                  importLoaders: 1,\n                },\n              },\n              {\n                loader: require.resolve('postcss-loader'),\n                options: {\n                  // Necessary for external CSS imports to work\n                  // https://github.com/facebookincubator/create-react-app/issues/2677\n                  ident: 'postcss',\n                  plugins: () => [\n                    require('postcss-flexbugs-fixes'),\n                    autoprefixer({\n                      browsers: [\n                        '>1%',\n                        'last 4 versions',\n                        'Firefox ESR',\n                        'not ie &#x3C; 9', // React doesn't support IE8 anyway\n                      ],\n                      flexbox: 'no-2009',\n                    }),\n                  ],\n                },\n              },\n            ],\n          },\n</code></pre>\n<blockquote>\n<p>To the options we add following syntax:</p>\n</blockquote>\n<pre><code class=\"language-es6\">modules: true,\nlocalIdentName: '[name]__[local]__[hash:base64:5]'\n</code></pre>\n<blockquote>\n<p>So that the config part will  look like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> {\n            test: /\\.css$/,\n            use: [\n              require.resolve('style-loader'),\n              {\n                loader: require.resolve('css-loader'),\n                options: {\n                importLoaders: 1,\n                modules: true,\n                localIdentName: '[name]__[local]__[hash:base64:5]'\n                },\n              },\n              {\n                loader: require.resolve('postcss-loader'),\n                options: {\n                  // Necessary for external CSS imports to work\n                  // https://github.com/facebookincubator/create-react-app/issues/2677\n                  ident: 'postcss',\n                  plugins: () => [\n                    require('postcss-flexbugs-fixes'),\n                    autoprefixer({\n                      browsers: [\n                        '>1%',\n                        'last 4 versions',\n                        'Firefox ESR',\n                        'not ie &#x3C; 9', // React doesn't support IE8 anyway\n                      ],\n                      flexbox: 'no-2009',\n                    }),\n                  ],\n                },\n              },\n            ],\n          },\n</code></pre>\n<blockquote>\n<p><code>modules: true</code> will enable the CSS modules feature we are about to use.\n<code>[name]__[local]__[hash:base64:5]</code> will used by CSS modules to dynamically generate unique css class names\nWe need to do the same in the <code>webpack.config.prod.js</code>file. Please not it should be under <code>use:</code> section in <code>options:</code>\nNow we can start the app again with <code>npm start</code>\nNow we need to import our css file differently:\nInstead of normal import:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import \"./App.css\";\n</code></pre>\n<blockquote>\n<p>We need to import <code>classes</code> object</p>\n</blockquote>\n<pre><code class=\"language-es6\">import classes from \"./App.css\";\n</code></pre>\n<blockquote>\n<p>This <code>classes</code> object will have properties which will be exactly those css selectors we defined in App.css\nOur App.css has a selector for class names \"App\" </p>\n</blockquote>\n<pre><code class=\"language-es6\">.App {\n  text-align: center;\n}\n</code></pre>\n<blockquote>\n<p>So now the <code>classes</code> object will have a property <code>App</code>:</p>\n</blockquote>\n<pre><code class=\"language-es6\">className={classes.App}\n</code></pre>\n<blockquote>\n<p>Whole App component will look like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from \"react\";\nimport classes from \"./App.css\";\nimport Person from \"./Person/Person\";\nclass App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18, id: \"01\" },\n      { name: \"Pete\", age: 15, id: \"02\" },\n      { name: \"Jess\", age: 5, id: \"03\" },\n    ],\n  };\n  deleteHandler = (toDelete) => {\n    this.setState({\n      persons: this.state.persons.filter((person) => person.name !== toDelete),\n    });\n  };\n  handleChange = (event, id) => {\n    const newPersons = this.state.persons.map((person) => {\n      if (person.id === id) {\n        return { ...person, name: event.target.value };\n      } else {\n        return person;\n      }\n    });\n    this.setState({ persons: newPersons });\n  };\n  render() {\n    return (\n        &#x3C;div className={classes.App}>\n          &#x3C;button>Click me&#x3C;/button>\n          {this.state.persons.map((person) => {\n            return (\n              &#x3C;Person\n                delete={this.deleteHandler}\n                name={person.name}\n                age={person.age}\n                key={person.id}\n                onChange={(event) => this.handleChange(event, person.id)}\n              />\n            );\n          })}\n        &#x3C;/div>\n    );\n  }\n}\nexport default App;\n</code></pre>\n<blockquote>\n<p>CSS module make sure that upon build (bundling and compilation) we do not import css files, as before (globally) but it detects this new way of importing css: <code>import classes from \"./App.css\";</code> and it looks into those css files. It then transforms each css class we define there into an automatically generated (random) unique class name and returns us a map between those randomly genrated class names and class names we assigned in the css file. For example class name: <code>App__Button__2_NDl</code>\nAdvantage is that then our class names will be completely unique and cannot clash with other components in other files.\nCSS modules allow us to write css styles in css files which will be only scoped to this particular component\nHow can we apply dynamic styles on those? We will need to assign a new selector which will have different styling we want to then conditionally apply\nPerson.css:</p>\n</blockquote>\n<pre><code class=\"language-es6\">.blue {\n    background-color: blue;\n}\n.red {\n    background-color: red;\n}\n</code></pre>\n<blockquote>\n<p>Then in the Person.js we can use ternary statement to conditionally render the styles:\nPerson.js</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from \"react\";\nimport classes from './Person.css'\nconst Person = (props) => {\n  return (\n    &#x3C;div>\n      &#x3C;p>\n        I am a {props.name} and I am {props.age} years old\n      &#x3C;/p>\n      &#x3C;button className={props.age &#x3C;=5 ? classes.blue : classes.red} onClick={() => props.delete(props.name)}>Delete me&#x3C;/button>\n      &#x3C;input type=\"text\" onChange={props.onChange} />\n    &#x3C;/div>\n  );\n};\nexport default Person;\n</code></pre>\n<blockquote>\n<p>Alternatively we can create a styles string:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from \"react\";\nimport classes from './Person.css'\nconst Person = (props) => {\n    let styling=[]\n    if(props.age &#x3C;=5){\n        styling.push(classes.red)\n    } else {\n        styling.push(classes.blue)\n    }\n    console.log(styling)\n  return (\n    &#x3C;div>\n      &#x3C;p>\n        I am a {props.name} and I am {props.age} years old\n      &#x3C;/p>\n      &#x3C;button className={styling.join(\" \")} onClick={() => props.delete(props.name)}>Delete me&#x3C;/button>\n      &#x3C;input type=\"text\" onChange={props.onChange} />\n    &#x3C;/div>\n  );\n};\nexport default Person;\n</code></pre>\n<blockquote>\n<p>CSS modules allow us to use media queries, just like regular css, there is nothing special about it, as long as we use the special import and special way to write className</p>\n</blockquote>\n<pre><code class=\"language-es6\">import classes from './Person.css'\nclassName={classes.Person}\n</code></pre>\n<blockquote>\n<p>If you are using react-scripts version 2 or higher, css modules are enabled automatically, so you do not need to tweak any config, but you need to name your css files as:</p>\n</blockquote>\n<pre><code class=\"language-es6\">Person.module.css\n</code></pre>\n<blockquote>\n<p>And therefore you also need to import classes from <code>\"./Person.module.css\"</code>\nMore on css can be found here: <a href=\"https://github.com/css-modules/css-modules\">https://github.com/css-modules/css-modules</a></p>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n<p>But what if I still want to use some global styles? In css file you can prefix the selector with :global .</p>\n</blockquote>\n<p>App.css</p>\n<pre><code class=\"language-es6\">:global .GlobalStyle { ... } \n</code></pre>\n<blockquote>\n<p>Now you can use <code>className=\"GlobalStyle\"</code>  anywhere in your app and receive that styling.</p>\n</blockquote>\n<p><strong>Debugging React Apps</strong></p>\n<blockquote>\n<p>We can throw an error like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">const randomNumber = Math.random()\n    if(randomNumber >0.5){\n        throw new Error(\"I am error!\")\n    }\n</code></pre>\n<blockquote>\n<p>Often the application will encounter errors, our task is to catch those errors and handle them graciously! For that we will create ErrorBoundary component! Name can be something different but convention is ErrorBoundary.\nError Boundary is a HOC (Higher order component) which wraps other components with the goala to catch and handle errors caused by its children (components it is wrapped around)\nWe will setup a separate folder for it with a ErrorBoundary.js in in\nComponent will look like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from \"react\";\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false,\n    errorMessage: \"\",\n  };\n  componentDidCatch = (error, info) => {\n    this.setState({ hasError: true, errorMessage: error });\n  };\n  render() {\n    if (this.state.hasError) {\n      return &#x3C;h1>{this.state.errorMessage}&#x3C;/h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\nexport default ErrorBoundary;\n</code></pre>\n<blockquote>\n<p>And then we will add it in App.js to wrap it around Person.js component. We also need to move key property to error boundary, because key always need to be on outer component!</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from \"react\";\nimport classes from \"./App.css\";\nimport Person from \"./Person/Person\";\nimport ErrorBoundary from \"./ErrorBoundary/ErrorBoundary\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      { name: \"Adda\", age: 18, id: \"01\" },\n      { name: \"Pete\", age: 15, id: \"02\" },\n      { name: \"Jess\", age: 5, id: \"03\" },\n    ],\n  };\n\n  deleteHandler = (toDelete) => {\n    this.setState({\n      persons: this.state.persons.filter((person) => person.name !== toDelete),\n    });\n  };\n  handleChange = (event, id) => {\n    const newPersons = this.state.persons.map((person) => {\n      if (person.id === id) {\n        return { ...person, name: event.target.value };\n      } else {\n        return person;\n      }\n    });\n    this.setState({ persons: newPersons });\n  };\n\n  render() {\n    return (\n      &#x3C;div className={classes.App}>\n        &#x3C;button>Click me&#x3C;/button>\n        {this.state.persons.map((person) => {\n          return (\n            &#x3C;ErrorBoundary key={person.id}>\n              &#x3C;Person\n                delete={this.deleteHandler}\n                name={person.name}\n                age={person.age}\n                onChange={(event) => this.handleChange(event, person.id)}\n              />\n            &#x3C;/ErrorBoundary>\n          );\n        })}\n      &#x3C;/div>\n    );\n  }\n}\nexport default App;\n</code></pre>\n<p><strong>Class components and props</strong></p>\n<blockquote>\n<p>Also calls components such as our App, can receive props. When accessing those props, we will need to use key word <code>this</code>.\nIndex.js will pass a prop projectTitle to App.js</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;App projectTitle=\"Person Manager\" />\n</code></pre>\n<blockquote>\n<p>App will receive the prop and use it for example to pass to another component</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;Persons title={this.props.projectTitle} />\n</code></pre>\n<p><strong>Lifecycle methods</strong></p>\n<blockquote>\n<p>Lifecycle methods are specific to class based components. Functional components have hooks which enable them such functionalities\nFollowing lifecycle methods are available for class components:</p>\n</blockquote>\n<ul>\n<li>constructor()</li>\n<li>getDerivedStateFromProps()</li>\n<li>shouldComponentUpdate()</li>\n<li>getSnapshotBeforeUpdate()</li>\n<li>componentDidUpdate()</li>\n<li>componentDidCatch()</li>\n<li>componentDidMount()</li>\n<li>componentWillUnmount()</li>\n<li>render()</li>\n</ul>\n<blockquote>\n<p>React executes those methods for us at different runtimes and we can use them to do stuff with component at certain point of time. Such as: fetch data from web, do some cleanup work before component is removed from DOM, etc.</p>\n</blockquote>\n<p><strong>Creation of component</strong></p>\n<blockquote>\n<p>Order of execution:</p>\n</blockquote>\n<ul>\n<li>\n<ol>\n<li>constructor()</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>getDerivedStateFromProps()</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>render()</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>every child component renders</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>componentDidMount()</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>constructor(): When component is created, first constructor is called which will receive all props from the component and it <code>sets up the state</code>. If you use constructor then you HAVE TO call super(props)</p>\n</blockquote>\n<pre><code class=\"language-es6\">constructor(props){\n   super(props)\n}\n</code></pre>\n<blockquote>\n<p>Please note, it is not necessary to call constructor. It is only if we want to have our own logic of setting up initial state. But we shold NOT cause any side effects in constructor.</p>\n</blockquote>\n<blockquote>\n<p>Side effects are for example sending HTTP request, or storing something in our local storage of the browser or sending some analytics to Google analytics. We do not want to execute these in constructor, because it can impact performance and cause unnecessary re-renders</p>\n</blockquote>\n<blockquote>\n<p>getDerivedStateFromProps(props, state): When your props change you can <code>synch state</code> to them. This is a VERY VERY niche scenario. But we shold NOT cause any side effects in getDerivedStateFromProps.</p>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n<p>render(): Rednder methos is a lifecycle method for class based components which returns JSX. It prepares and structures the JSX.\nWe shold NOT cause any side effects in render.</p>\n</blockquote>\n<blockquote>\n<p>After render runs, every CHILD COMPONENT is rendered.</p>\n</blockquote>\n<blockquote>\n<p>When all lifecycle methods also of child components have finished, then we proceed with componentDidMount()</p>\n</blockquote>\n<blockquote>\n<p>componentDidMount(): When component mounted, this method is called and here we CAN cause side effects, such as HTTP requests from the web! DO NOT update state here! DO NOT call setState in here. Exception is if it is in the the <code>then</code> block of the promise of HTTP request. This means that setState will execute at some point in future when HTTP request sends response from server. DO NOT call setState synchronously immediately as component mounts. Why? Cause it will triggere re-render and that is bad for performance.</p>\n</blockquote>\n<p><strong>Constructor</strong></p>\n<blockquote>\n<p>There are 2 ways how to set initial state in the class based components</p>\n</blockquote>\n<blockquote>\n<p>Older approach uses constuctor which receives props, where super(props) is called and state is initialized with this.state</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n        persons: [\n           { id: \"asfa1\", name: \"Mia\", age: 18 },\n           { id: \"vasdf1\", name: \"Sam\", age: 19},\n           { id: \"asdf11\", name: \"Jess\", age: 5 },\n        ],\n        otherState: \"some other value\",\n        showPersons: false,\n        };\n    }\n  ....\n}\n</code></pre>\n<blockquote>\n<p>Newer approach is to set state outside of the constructor and only use word <code>state</code>. Behind the scenes, what happens is that constructor is called, super is called and this.state is called to initialize the state.</p>\n</blockquote>\n<pre><code class=\"language-es6\">class App extends Component {\nstate = {\n    persons: [\n      { id: \"asfa1\", name: \"Mia\", age: 18 },\n      { id: \"vasdf1\", name: \"Sam\", age: 19 },\n      { id: \"asdf11\", name: \"Jess\", age: 5 },\n    ],\n    otherState: \"some other value\",\n    showPersons: false,\n  };\n  ....\n}\n</code></pre>\n<p><strong>GetDerivedStateFromProps</strong></p>\n<blockquote>\n<p>getDerivedStateFromProps(props, state) is a static method, so if we want to use it, we need to add word <code>static</code> in front of it. We will receive props and state in there. And we should return UPDATED STATE. Example is if some external changes (ex: user input) cause prop changes, you might want to update the state accordingly. But usually there is more elegant way how to update state based on outside/external properties. This simply synchs state to props. (DO NOT cause side effects in this lifecycle method)</p>\n</blockquote>\n<pre><code class=\"language-es6\">static getDerivedStateFromProps(props, state){\n    ...\n    return updatedState\n}\n</code></pre>\n<p><strong>Component update</strong></p>\n<blockquote>\n<p>2 triggers to re-render a component: when state changes or when props change</p>\n</blockquote>\n<blockquote>\n<p>Order of execution:</p>\n</blockquote>\n<ul>\n<li>\n<ol>\n<li>getDerivedStateFromProps(props, state)</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>shouldComponentUpdate(nextProps, nextState)</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>render()</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>update all child components</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>getSnapshotBeforeUpdate(prevProps, prevState)</li>\n</ol>\n</li>\n<li>\n<ol start=\"6\">\n<li>\n<p>componentDidUpdate()</p>\n<blockquote>\n<p>shouldComponentUpdate(nextProps, nextState): Allows you to cancel the updating process!!! Here you can decide whether to continue and re-render the component or not. Why do we want to do that? For performance optimization. Here we need to return true or false (doing nothing is not an option). True means it will continue updating, it will return false if it should not update.</p>\n</blockquote>\n<pre><code class=\"language-es6\">shouldComponentUpdate(nextProps, nextState){\nreturn true\n}\n</code></pre>\n<blockquote>\n<p>getSnapshotBeforeUpdate(prevProps, prevState): this method happens right before component updates. It takes previous state and previous props as input and returns a snapshot object which we can freely configure. Niche lifecycle method used for last-minute DOM operations such as getting the current scrolling position of the user. Because then once we do the DOM update, then we can return to the position of the user scroll and getSnapshotBeforeUpdate can give us that scroll position right before the update. We should either return null or snapshot value.</p>\n</blockquote>\n<pre><code class=\"language-es6\">getSnapshotBeforeUpdate(prevProps, prevState){\nreturn {message: \"I am a snapshot\"}\n}\n</code></pre>\n<blockquote>\n<p>componentDidUpdate(previousProps, previousState, snapshot) signals that we are done updating and render has been executed. Here we can cause side effects like HTTP requests. But only setState within then block of a promise of HTTP request to prevent unnecessary re-renders. As props it receives previousProps, previousState, snapshot. The snapshot is from the  getSnapshotBeforeUpdate. Whatever getSnapshotBeforeUpdate method returns will be then passed to componentDidUpdate as the 3rd argument. So snapshot is used in a way, we save some data (scroll position of user) right before the update of component, and then use this data after the update in componentDidUpdate.</p>\n</blockquote>\n<pre><code class=\"language-es6\">componentDidUpdate(previousProps, previousState, snapshot){\nconsole.log(snapshot) // {message: \"I am a snapshot\"}\n}\n</code></pre>\n<p><strong>Methods which should not be used anymore</strong></p>\n<blockquote>\n<p>There are some lifecycle methods which should not be really used anymore. For example: </p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps(props) - where props are the props component is getting for this update</li>\n<li>componentWillUpdate()- runs before the componentDidUpdate()</li>\n</ul>\n<p><strong>Lifecycle methods in functional components</strong></p>\n<blockquote>\n<p>Functional components can use hooks in order to get same funcionality as in class components.</p>\n</blockquote>\n<blockquote>\n<p>useEffect is the second most important hook you can use. It is a hook which can handle life cycle methods. First important hook is useState</p>\n</blockquote>\n<blockquote>\n<p>useEffect combines functionality of ALL lifecycle methods of class components in one React hook (function you can add to functional components).\nFirst we need to import it</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { useEffect } from \"react\";\n</code></pre>\n<blockquote>\n<p>We can use it in body of functional componet. This hook receives a <code>function</code> which (by default) will run at each render cycle of the component, so for every update or when component is created! We can for example send HTTP request. UseEffect is basically componentDidMount and componentDidUpdate in one effect.</p>\n</blockquote>\n<pre><code class=\"language-es6\">useEffect( ()=> {} );\n</code></pre>\n<blockquote>\n<p>How to use useEffect only the first time. We can pass an array as second argument to useEffect. If the array is empty, it will only be triggered the first time.</p>\n</blockquote>\n<pre><code class=\"language-es6\">useEffect( ()=> {}, [] );\n</code></pre>\n<pre><code class=\"language-es6\">useEffect( ()=> {console.log(\"Im triggered\")}, [] );\n</code></pre>\n<blockquote>\n<p>What if we only want to run it when our props.persons change? then we can add it to the array</p>\n</blockquote>\n<pre><code class=\"language-es6\">useEffect( ()=> {console.log(\"Im triggered\")}, [props.persons] );\n</code></pre>\n<blockquote>\n<p>If there are more effects which depends on different data, then we can add more then one useEffect to to body of our functional component.</p>\n</blockquote>\n<p><strong>Cleaning up lifecycle methods in class based components</strong></p>\n<blockquote>\n<p>Often in app we want to do some cleanup work. For example to remove some event listeners, etc.</p>\n</blockquote>\n<blockquote>\n<p>In class based components we can use componentWillUnmount method. Any code that we want to run before the component is removed from DOM can be placed in componentWillUnmount</p>\n</blockquote>\n<pre><code class=\"language-es6\">componentWillUNmount(){\n    ...\n}\n</code></pre>\n<blockquote>\n<p>For functional components we can use useEffect also for clean up. Normally we do not return anything from the useEffect!!! But we can return a function and this function will run BEFORE main useEffect function runs but AFTER the (first) render cycle.\nThis return function can be used for clean ups</p>\n</blockquote>\n<pre><code class=\"language-es6\">useEffect(\n    ()=> {\n        console.log(\"Im triggered\")\n        return () => {console.log(\"cleanup\")}\n    }\n)\n</code></pre>\n<blockquote>\n<p>With above code, the cleanup will not run upon the mounting of component, but then after it will run always <code>before</code> the component updates\nIf we pass empty array to the useEffect which means useEffect will only run upon mounting and dismounting, we will see that cleanup runs only when we unmount the component (in app js to have a button which toggls display of Cockpit component)</p>\n</blockquote>\n<pre><code class=\"language-es6\">useEffect(\n    ()=> {\n        console.log(\"Im triggered\")\n        return () => {console.log(\"cleanup\")}\n    },[]\n)\n</code></pre>\n<blockquote>\n<p>What if we had some function in the useEffect and we wanted to clean it up? We would need to assign it to variable for example <code>timer</code>. And we would then pass it to the return of the useEffect with word clear:</p>\n</blockquote>\n<pre><code class=\"language-es6\">    useEffect(()=> {\n        console.log(\"I am useEffect\")\n        const timer= setTimeout(\n            () => {\n                alert(\"bla\")\n            }, 500\n        )\n        return (\n            () => {\n                clearTimeout(timer)\n                console.log(\"cleanup work\")\n            }\n        )\n    }, [])\n</code></pre>\n<p><strong>Rendering in React</strong></p>\n<blockquote>\n<p>Imagine that App is a parent component to Persons and Cockpit component. If anything changes in App component (state or props), both Cockpit and Parsons will re-render. Imagine we only change something in App component that only regards Cockpit component. Persons component will still re-render. Which is totally unnecessary and not optimal. What to do? We can use shouldComponentUpdate for that (in class components, or we can use extends PureComponent) to prevent unnecessary re-renders in Persons component. For functional based components we can use ReactMemo.\nUseing shouldComponentUpdate in Persons component - we can say only re-render this component if my main prop: persons change, else keep it as it is. How to do it, compare nextProps to current props:</p>\n</blockquote>\n<pre><code class=\"language-es6\">shouldComponentUpdate(nextProps, nextState){\nif (nextProps.persons !== this.props.persons){\n    return true\n} else {\n    return false\n}\n}\n</code></pre>\n<blockquote>\n<p>Please notice that this.props.persons is actually an array. When we want to compare two arrays, they are reference types and such comparison is only doing a shallow comparison. What does it mean? It only compares if array one is pointing in the memroy to the same address as the pointer for the array 2. It does not go through each element of the array and compares pointers of each element. No, arrays and objects are reference types and for such comparisons, only their pointers to memory addresses will be compared. Therefore it is SUPER IMPORTANT that any time we change props or state, we create NEW array or NEW OBJECT, such as: </p>\n</blockquote>\n<pre><code class=\"language-es6\">const newArray=[...oldArray]\nthis.setState(newArray)\nconst newObject={...oldObject}\nthis.setState(newObject)\n</code></pre>\n<blockquote>\n<p>Only then we can trully guarantee that our checks  and shouldComponentUpdate will work correctly. Lesson: NEVER MUTATE STATE OR PROPS.</p>\n</blockquote>\n<blockquote>\n<p>In Developer tools when you click on settings (3 vertical dots) ->More tools ->Rendering you can check <code>Paint Flashing</code> option which will then enable highlightening of the components which rendered.</p>\n</blockquote>\n<blockquote>\n<p>For functional components as they dont have shouldComponentUpdate, we can do the same using React.memo. React.memo uses memoization which is a technique where React will store a snapshot of this component and it will only re-render this only if the inputs to the component change. How to use it? Simply wrap your functional component in React.memo</p>\n</blockquote>\n<blockquote>\n<p>You can do it at the default export</p>\n</blockquote>\n<pre><code class=\"language-es6\">export default React.memo(Cockpit);\n</code></pre>\n<blockquote>\n<p>Or with named export</p>\n</blockquote>\n<pre><code class=\"language-es6\">export const Cockpit = React.memo( (props) => {\n....\n})\n</code></pre>\n<blockquote>\n<p>Now logical conclusion would be to always use React.memo for functional components and shouldComponent update for class based components. Is it such a good idea? No, it is not. Why? Beause some components always change when their children change and to perform an extra check like shouldComponentUpdate is unnecessary. We should only implement it if my parent components updates and there are cases for which one particular child component is not interested in those changes and should not unnecessary update.</p>\n</blockquote>\n<blockquote>\n<p>Pure components: When you have a class based component where you use shouldComponentUpdate and we want to perform a check to compare <strong>all the props</strong> that matter to the component, there is an easier way to do it rather than:</p>\n</blockquote>\n<pre><code class=\"language-es6\">shouldComponentUpdate(nextProps, nextState){\nif (nextProps.persons !== this.props.persons || nextProps.changed !== this.props.changed || nextProps.clicked !== this.props.clicked){\n    return true\n} else {\n    return false\n}\n}\n</code></pre>\n<blockquote>\n<p>The better way is to extend a <strong>PURE</strong> component</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { PureComponent } from \"react\";\n\nclass Persons extends PureComponent {\n    ...\n}\n</code></pre>\n<blockquote>\n<p>Pure component is just a normal component which already implemented complete shouldComponentUpdate check for <strong>all</strong> its props. extends PureComponent will have same result as full shouldComponentUpdate check.</p>\n</blockquote>\n<p><strong>How React renders REAL DOM</strong></p>\n<blockquote>\n<p>When render() method is called it does NOT immediately render the the REAL DOME. This also applies to functional components (even though they do not have render() method, their return renders stuff). Render() is more like a suggestion of what the HTML should look like in the end. But render() can be called and lead to the same result as is already displayed. THat is also a reason why we use shouldComponentUpdate (so that we avoid unnecessary re-renders). And sometimes even a prop can change, but we will still render the same result (for whatever reason). And this still does not necessarily mean that it hits real DOM and that DOM starts to re-render.\nIN fact what React render does it compares <code>virtual DOMS</code>. It has <code>old</code> VIRTUAL DOM and <code>new / future / re-rendered</code> VIRTUAL DOM. Why do we use virtual DOMs instead of real DOM? Virtual DOMs are faster.</p>\n</blockquote>\n<blockquote>\n<p>Virtual DOM is a DOM representation in Javascript. You can represent ALL HTML elements (DOM elements) and objects in pure Javascript (without rendering anything to the browser). </p>\n</blockquote>\n<blockquote>\n<p>React keeps 2 copies of the real dom: one is old virtual dom and second one is new/re-rendered virtual dom (which is created when the rende() method in class based component is called or when functional component returns soemthing).</p>\n</blockquote>\n<blockquote>\n<p>Calling render() does not immediately update real DOM. It compares old aversus new virtual DOM and it checks if there are any differencies. If it can detect differencies, then it reaches out to the real DOM and updates it, but only at the places where differencies were detected. If no differencies were found, it does not touch the DOM.\nAccessing the DOM is REALY SLOW. You want to do it as little as possible.</p>\n</blockquote>\n<p><strong>React return statement</strong></p>\n<blockquote>\n<p>In React you can only return one root JSX element. </p>\n</blockquote>\n<pre><code class=\"language-es6\">return (\n    &#x3C;div>\n       //other child elements\n    &#x3C;/div>\n)\n</code></pre>\n<blockquote>\n<p>You cannot return 2 or more siblings/adjucent elements on the root level. </p>\n</blockquote>\n<pre><code class=\"language-es6\">return (\n    &#x3C;div>&#x3C;/div>\n    &#x3C;div>&#x3C;/div>\n)\n</code></pre>\n<blockquote>\n<p>If we do so, we get an error that: <code>Adjacent JSX elements must be wrapped in an enclosing tag</code></p>\n</blockquote>\n<blockquote>\n<p>Therefore you need to always wrap your JSX in one single outer/root div or fragment <code>&#x3C;></code>.</p>\n</blockquote>\n<pre><code class=\"language-es6\">return (\n    &#x3C;div>\n       //other child elements\n    &#x3C;/div>\n)\n</code></pre>\n<blockquote>\n<p>or using fragment:</p>\n</blockquote>\n<pre><code class=\"language-es6\">return (\n    &#x3C;>\n       //other child elements\n    &#x3C;/>\n)\n</code></pre>\n<blockquote>\n<p>Exceptions are when we iterate through lists with the help of a map method. Even though we return the list of JSX  elements, in this case it is ok! And the reason why it is ok is that that there is a key on each element of an array!</p>\n</blockquote>\n<pre><code class=\"language-es6\">return this.props.persons.map(\n    (person, index) => {\n        return (\n            &#x3C;Person key={person.id}>\n        )\n    }\n)\n</code></pre>\n<blockquote>\n<p>So in order to render on the root level adjucent elements, we need to provide them as a list with keys!</p>\n</blockquote>\n<pre><code class=\"language-es6\">return [\n    &#x3C;div key=\"01\">&#x3C;/div>, \n    &#x3C;div key=\"02\">&#x3C;/div>,\n    &#x3C;div key=\"03\">&#x3C;/div>\n]\n</code></pre>\n<blockquote>\n<p>Another way how to render adjucent elements without needing to add another div which we do not need from structural perspective is adding a HOC (higher order component) - these are components which wrap other components.</p>\n</blockquote>\n<blockquote>\n<p>We usually create a dedicated folder for hocs and in it let's create an <code>aux.js</code> file which stands for auxiliary. Windows users should call this file <code>auxiliary.js</code> as aux is reserved word on Windows.</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from \"react\"\nconst Aux = (props) => props.children\nexport default Aux;\n</code></pre>\n<blockquote>\n<p>children is a special property and it means anything that we wrap our aux component around. So anything between opening and closing tag of aux component. In the example below children would be the paragraph.</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;Aux>\n    &#x3C;p>&#x3C;/p>\n&#x3C;/Aux>\n</code></pre>\n<blockquote>\n<p>In this example it would be an array or persons</p>\n</blockquote>\n<pre><code class=\"language-es6\">return (\n    &#x3C;Aux>\n        this.props.persons.map(\n        (person, index) => {\n            return (\n                &#x3C;Person key={person.id}>\n            )\n          }\n        )\n    &#x3C;/Aux>\n)\n</code></pre>\n<blockquote>\n<p>React also has an built-in Aux component called React.Fragment part of react package.</p>\n</blockquote>\n<pre><code class=\"language-es6\">return (\n    &#x3C;React.Fragment>\n        this.props.persons.map(\n        (person, index) => {\n            return (\n                &#x3C;Person key={person.id}>\n            )\n          }\n        )\n    &#x3C;/React.Fragment>\n)\n</code></pre>\n<p><strong>HOC - Higher order components</strong></p>\n<blockquote>\n<p>HOCs wrap other components and maybe add extra logic to it. For example HOC can add a class to the whole children tree. For that we will create a new file called <code>withClass.js</code>\nCode can look like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from \"react\";\nconst WithClass = (props) => {\n  return &#x3C;div clasName={props.classes}>{props.children}&#x3C;/div>;\n};\nexport default WithClass;\n</code></pre>\n<blockquote>\n<p>In App.js we then replace our div with className with following:</p>\n</blockquote>\n<pre><code class=\"language-es6\">return (\n        &#x3C;WithClass classes=\"App\">\n      &#x3C;button onClick={this.handleRemoveCockpit} >Toggle Cockpit&#x3C;/button>\n        {this.state.showCockpit &#x26;&#x26; &#x3C;Cockpit title={this.props.projectTitle} persons={this.state.persons} toggl={this.togglePersonsHandler} />}\n       {persons}\n       &#x3C;/WithClass>\n    );\n</code></pre>\n<blockquote>\n<p>Another way to write HOC is by creating regular javascript function (not a functional component)</p>\n</blockquote>\n<pre><code class=\"language-es6\">const withClass = (WrappedComponent, className) => {\n  return \n};\nexport default withClass;\n</code></pre>\n<blockquote>\n<p>This function accepts couple of arguments (can be many). One of the arguments is WrappedComponent, which will be component around which we will wrap that HOC. Another argument is for example className, but can be anything.\nThis function will return something weird... It will return FUNCTIONAL component. WHAAAAT????</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from \"react\";\n\nconst withClass = (WrappedComponent, className) => {\n  return props => (\n      &#x3C;div className={className}>\n          &#x3C;WrappedComponent />\n      &#x3C;/div>\n  )\n};\nexport default withClass;\n</code></pre>\n<blockquote>\n<p>Now how to use this weird thing?? We will not use it in our return statement of App component, we will use it at the export as a normal function with 2 arguments</p>\n</blockquote>\n<pre><code class=\"language-es6\">export default withClass(App, \"App\");\n</code></pre>\n<p><strong>Updating state incorrectly</strong></p>\n<blockquote>\n<p>State is not updated synchronously. It is asynchronous which mean React schedules it and sometimes things are chunked before state is updated or it only is updated when React has resources to update it. Therefore it is incorrect to use OLD state directly when we are setting new state!!! Why? Because the OLD state which we access directly is NOT guaranteed to be the latest state (it could be unexpected state)!!!\nHow to do it then? We can pass a function instead of the old state and this arrow function takes an argument previousState (and optionally props if we need them)\nExample functional components - INCORRECT</p>\n</blockquote>\n<pre><code class=\"language-es6\">const [rowVisible, setRowVisible] = React.useState(false)\n...\nonClick={() =>setRowVisible(!rowVisible)\n</code></pre>\n<blockquote>\n<p>Example functional components - CORRECT way of updating state depending on the old state</p>\n</blockquote>\n<pre><code class=\"language-es6\">const [rowVisible, setRowVisible] = React.useState(false)\nonClick={() =>setRowVisible((previousVisible)=> !previousVisible)\n</code></pre>\n<blockquote>\n<p>Example class components - INCORRECT</p>\n</blockquote>\n<pre><code class=\"language-es6\">state ={\n    counter: 0\n}\n...\nthis.setState({counter: this.state.counter+1})\n</code></pre>\n<blockquote>\n<blockquote>\n<p>Example class components - CORRECT way of updating state depending on the old state - here React guarantees the state is what we think it is</p>\n</blockquote>\n</blockquote>\n<pre><code class=\"language-es6\">state ={\n    counter: 0\n}\n...\nthis.setState( (previousState, props) => {\n    return\n         {counter: previousState+1}\n    }\n)\n</code></pre>\n<blockquote>\n<p>Read more: <a href=\"https://reactjs.org/docs/hooks-reference.html#functional-updates\">https://reactjs.org/docs/hooks-reference.html#functional-updates</a></p>\n</blockquote>\n<p><strong>Prop types</strong></p>\n<blockquote>\n<p>React community built a package which helps you define types of props you pass to your components. You need to install it with </p>\n</blockquote>\n<pre><code class=\"language-es6\">npm install --save prop-types\n</code></pre>\n<blockquote>\n<p>Please note that <code>--save</code> means to save this entry in the <code>package.json</code> file</p>\n</blockquote>\n<blockquote>\n<p>Then you can import PropTypes</p>\n</blockquote>\n<pre><code class=\"language-es6\">import PropTypes from 'prop-types'\n</code></pre>\n<blockquote>\n<p>Then after our component definition we can define prop types for examplpe for Person component</p>\n</blockquote>\n<pre><code class=\"language-es6\">Person.propTypes= {\n    click: PropTypes.func,\n    name: PropTypes.string,\n    age: PropTypes.number,\n    changed: PropTypes.func\n}\n</code></pre>\n<blockquote>\n<p>If some prop is required and not optional, then we can add <code>isRequired</code>:</p>\n</blockquote>\n<pre><code class=\"language-es6\">Person.propTypes= {\n    click: PropTypes.func,\n    name: PropTypes.string.isRequired,\n    age: PropTypes.number,\n    changed: PropTypes.func\n}\n</code></pre>\n<blockquote>\n<p>Of course another way to define props is using flow or typescript</p>\n</blockquote>\n<p><strong>Using reference - ref</strong></p>\n<blockquote>\n<p>What if we want to focus our inputs when app starts? Javascript has a way to focus with document.querySelector</p>\n</blockquote>\n<pre><code class=\"language-es6\">componentDidMount(){\n    document.querySelector('input').focus();\n}\n</code></pre>\n<blockquote>\n<p>Other super cool possibilities is to style a background of a paragraph:</p>\n</blockquote>\n<pre><code class=\"language-es6\">document.querySelector('p').style.backgroundColor = \"red\";\n</code></pre>\n<blockquote>\n<p>We cal also use regular css selectors, like class selector <code>.mia</code> or ids with <code>#my-id</code></p>\n</blockquote>\n<pre><code class=\"language-es6\">document.querySelector('.mia').style.backgroundColor = \"blue\";\ndocument.querySelector('#my-id').style.backgroundColor = \"green\";\n</code></pre>\n<blockquote>\n<p>Of course these elements need to have those class names or ids:</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;p onClick={this.props.click} className=\"mia\">\n          I'm {this.props.name} and I am {this.props.age} years old!\n&#x3C;/p>\n&#x3C;p id=\"my-id\">Hi&#x3C;/p>\n</code></pre>\n<blockquote>\n<p>There are many other selectors, like selecting all occurances with <code>querySelectorAll()</code>. This selector returns an array of HTML elements which we want to select, so we will need to loop over them in order to style them</p>\n</blockquote>\n<pre><code class=\"language-es6\">const x=document.querySelectorAll('p');\n        for (let i = 0; i &#x3C; x.length; i++) {\n            x[i].style.backgroundColor = \"red\";\n}\n</code></pre>\n<blockquote>\n<p>However, this is way is not the optimal way, because it takes into consideration first item it founds, so we cant focus for example the last element if we have more. React has its own way to handle this using references. Any element (including components) can have a special property called <code>ref</code>.\nThere are multiple ways how to use ref. One way is to pass anonymous arrow function with some arguments. First argument is the element itself on which I placed it on, for example inputElement</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;input ref={(inputEle)=>{ inputEle.focus()}} />\n</code></pre>\n<blockquote>\n<p>We would do this if we wanted to directly use this inputElement in the ref function. </p>\n</blockquote>\n<blockquote>\n<p>But what if we wanted to you it elsewhere? We could use following syntax to set a global reference in the class component to this element.</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;input ref={(inputEle)=>{ this.inputElement =inputEle}} />\n</code></pre>\n<blockquote>\n<p>And then we can use it in for example in ComponentDidMount()</p>\n</blockquote>\n<pre><code class=\"language-es6\">componentDidMount(){\nthis.inputElement.focus()\n}\n</code></pre>\n<blockquote>\n<p>Another way how to create ref is in the constructor</p>\n</blockquote>\n<pre><code class=\"language-es6\">constructor(props){\n    super(props);\n    this.inputElementRef = React.createRef();\n}\n</code></pre>\n<blockquote>\n<p><code>this.inputElementRef = React.createRef();</code> is not my input, it is only a reference to ANY object React gives me as a reference</p>\n</blockquote>\n<blockquote>\n<p>Then instead of an arrow function in a ref property of some element, I can use<code>this.inputElementRef</code></p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;input ref={this.inputElementRef} />\n</code></pre>\n<blockquote>\n<p>Then I can use this in order to create the focus in componentDidMount. Please note, if we use React.createRef() we need ot access <code>current</code> property of our reference element!!</p>\n</blockquote>\n<pre><code class=\"language-es6\">componentDidMount(){\nthis.inputElementRef.currents.focus();\n}\n</code></pre>\n<blockquote>\n<p>How to do this in functional component? We will use a hook called useRef hook</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, {  useRef } from \"react\";\nconst toggleBtnRef= useRef()\n</code></pre>\n<blockquote>\n<p>We will ne add our togglBtnRef to our button which we want to click automatically when you load the component:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> &#x3C;button ref={toggleBtnRef} />\n</code></pre>\n<blockquote>\n<p>And then we use our toggleBtnRef in useEffect to trigger that automated click:</p>\n</blockquote>\n<pre><code class=\"language-es6\">useEffect(()=> {\n    toggleBtnRef.current.click()\n}, [])\n</code></pre>\n<p><strong>Passing props chain problem and solving it with Context</strong></p>\n<blockquote>\n<p>IN bigger apps we will face a problem where we need ot pass a prop from the parent all the way down through component tree down to a child component. And maybe only the last child needs the prop and none of the other components are interested in it. This can be cumbersome and inconvenient. Therefore react created something called context!</p>\n</blockquote>\n<blockquote>\n<p>Context enables to have some data (state) in multiple components without needing to pass them down the component tree\nLet's set this up. We will start by creating a new file which will hold the context object:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from 'react'\n\nconst AuthContext = React.createContext()\n\nexport default AuthContext\n</code></pre>\n<blockquote>\n<p>We can also add some default value for our context (but it is optional)</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React from 'react'\n\nconst AuthContext = React.createContext({ authenticated: false})\n\nexport default AuthContext\n</code></pre>\n<blockquote>\n<p>But let us assume we do not do it and we start with just empty context\nThen in our main component, for example in App.js, we import this context. </p>\n</blockquote>\n<pre><code class=\"language-es6\">import AuthContext from '../context/AuthContext'\n</code></pre>\n<blockquote>\n<p>Place where we put the context matter in these ways. Place it in the higher component where you have the state which needs to be passed down the tree. Use it to wrap the components which hold those components which need this data.\nON this level we wil use the property Provider of that context object to wrap other components by it where the context will be avaulable (on ALL of those components and beaneath them)</p>\n</blockquote>\n<pre><code class=\"language-es6\"> &#x3C;AuthContext.Provider value={ {authenticated: this.state.authenticated} }>\n</code></pre>\n<blockquote>\n<p>Please not that we need double curly braces, because value needs and object. First pair of braces means its a dynamic object (not a static value), second pair of braces means we are actually pasing an object in there.\nBy setting the value we made part of our state be available to all components which are wrapped by our AuthContext:</p>\n</blockquote>\n<pre><code class=\"language-es6\"> &#x3C;AuthContext.Provider value={ {authenticated: this.state.authenticated, login: this.loginHandler} }>\n        &#x3C;button onClick={this.handleRemoveCockpit} >Toggle Cockpitttt&#x3C;/button>\n        {this.state.showCockpit &#x26;&#x26; &#x3C;Cockpit title={this.props.projectTitle} persons={this.state.persons} toggl={this.togglePersonsHandler} />}\n       {persons}\n &#x3C;/AuthContext.Provider>\n</code></pre>\n<blockquote>\n<p>Then how can one component down the tree use this value? Imagine we are in the Person component. Ofc we need to import the context and here we will CONSUME it!</p>\n</blockquote>\n<pre><code class=\"language-es6\">import AuthContext from '../../../context/AuthContext'\n...\n&#x3C;AuthContext.Consumer>{(context)=>\n&#x3C;p>{context.authenticated ? 'Authenticated!' : 'LOGIN!!!'}&#x3C;/p>\n}&#x3C;/AuthContext.Consumer>\n</code></pre>\n<blockquote>\n<p>Whole component looks like this:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from \"react\";\nimport classes from \"./Person.css\";\nimport AuthContext from '../../../context/AuthContext'\n\nclass person extends Component {\n    constructor(props){\n        super(props)\n        this.inputElementRef = React.createRef()\n    }\n    componentDidMount(){\n        this.inputElementRef.current.focus()\n    }\n  render() {\n    return (\n      &#x3C;div className={classes.Person}>\n      &#x3C;AuthContext.Consumer>{(context)=>\n      &#x3C;p>{context.authenticated ? 'Authenticated!' : 'LOGIN!!!'}&#x3C;/p>\n    }&#x3C;/AuthContext.Consumer>\n        &#x3C;p onClick={this.props.click} className=\"mia\">\n          I'm {this.props.name} and I am {this.props.age} years old!\n        &#x3C;/p>\n        &#x3C;p id=\"my-id\">HI&#x3C;/p>\n        &#x3C;p>{this.props.children}&#x3C;/p>\n        &#x3C;input ref={this.inputElementRef} type=\"text\" onChange={this.props.changed} value={this.props.name} />\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default person;\n</code></pre>\n<blockquote>\n<p>Please note very important thing. We wrap our paragraph by the AuthContext.Consumer. This component however, does not accept JSX elements as children!!! It onyl accepts an arrow function. This function receives as argument whole context object which we wanted to deliver here. This function returns the JSX elements where we want to use the context</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;AuthContext.Consumer>{(context)=>\n      &#x3C;p>{context.authenticated ? 'Authenticated!' : 'LOGIN!!!'}&#x3C;/p>\n    }&#x3C;/AuthContext.Consumer>\n</code></pre>\n<blockquote>\n<p>This approach has one flaw. We would not be able to access our context in for example componentDidMount. Therefore there is more elegant way how to access the context in class based components.\nWe can add a static property written exactly this way:</p>\n</blockquote>\n<pre><code class=\"language-es6\">static contextType = AuthContext;\n</code></pre>\n<blockquote>\n<p>And then you can access your context for example in the componentDidMount</p>\n</blockquote>\n<pre><code class=\"language-es6\">componentDidMount(){\n        console.log(this.context.authenticated)\n    }\n</code></pre>\n<blockquote>\n<p>Moreover,in the return statement, we dont need <code>&#x3C;AuthContext>{(context)=> ....}&#x3C;/AuthContext></code>\nWe can simply use</p>\n</blockquote>\n<pre><code class=\"language-es6\">{this.context.authenticated ? ... : .... }\n</code></pre>\n<blockquote>\n<p>Whole file:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { Component } from \"react\";\nimport classes from \"./Person.css\";\nimport AuthContext from '../../../context/AuthContext'\n\nclass person extends Component {\n    constructor(props){\n        super(props)\n        this.inputElementRef = React.createRef()\n    }\n    \n    static contextType = AuthContext; \n\n    componentDidMount(){\n        this.inputElementRef.current.focus()\n        console.log(this.context.authenticated)\n    }\n  render() {\n    return (\n      &#x3C;div className={classes.Person}>\n      \n      &#x3C;p>{this.context.authenticated ? 'Authenticated!' : 'LOGIN!!!'}&#x3C;/p>\n\n        &#x3C;p onClick={this.props.click} className=\"mia\">\n          I'm {this.props.name} and I am {this.props.age} years old!\n        &#x3C;/p>\n        &#x3C;p id=\"my-id\">HI&#x3C;/p>\n        &#x3C;p>{this.props.children}&#x3C;/p>\n        &#x3C;input ref={this.inputElementRef} type=\"text\" onChange={this.props.changed} value={this.props.name} />\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default person;\n</code></pre>\n<blockquote>\n<p>Functional components has a useContext hook for exactly this.</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { useContext } from \"react\";\n...\nconst authContext= useContext(AuthContext)\n...\n &#x3C;button onClick={authContext.login}>\n          Log in!!!!\n      &#x3C;/button>\n</code></pre>\n<blockquote>\n<p>Whole file:</p>\n</blockquote>\n<pre><code class=\"language-es6\">import React, { useEffect, useRef, useContext } from \"react\";\nimport classes from \"./Cockpit.css\";\nimport AuthContext from '../../context/AuthContext'\n\nconst Cockpit = React.memo((props) => {\n\n    const toggleBtnRef= useRef()\n    const authContext= useContext(AuthContext)\n\n    useEffect(()=> {\n        console.log(\"I am useEffect\")\n        toggleBtnRef.current.click()\n        \n    }, [])\n    \n    const assignedClasses = [];\n    \n    let btnClass=\"\";\n    \n    if (props.showPersons){\n        btnClass = classes.Red;\n    }\n    \n    if (props.persons.length &#x3C;= 2) {\n      assignedClasses.push(classes.red); // classes = ['red']\n    }\n    if (props.persons.length &#x3C;= 1) {\n      assignedClasses.push(classes.bold); // classes = ['red', 'bold']\n    }\n  return (\n     &#x3C;div className={classes.Cockpit}>\n      &#x3C;h1>{props.title}&#x3C;/h1>\n      &#x3C;p className={assignedClasses.join(\" \")}>This is really working!&#x3C;/p>\n      &#x3C;button ref={toggleBtnRef} className={btnClass} onClick={props.toggl}>\n        Toggle Persons\n      &#x3C;/button>\n      &#x3C;button onClick={authContext.login}>\n          Log in!!!!\n      &#x3C;/button>\n\n    &#x3C;/div>\n  );\n});\n\nexport default Cockpit;\n</code></pre>\n<blockquote>\n<p>useCOntext hook is the same as static contextType is for class based components</p>\n</blockquote>\n<blockquote>\n<p>Context API manages data without need to pass it around as props! Same is also what redux does.</p>\n</blockquote>\n<p><strong>Planning React application</strong></p>\n<blockquote>\n<p>Planning process:</p>\n</blockquote>\n<ul>\n<li>Component tree (structure) - from design to small lego pieces</li>\n<li>Application state (data) - using and manipulating data (for example ingredients user selected for burger and how much it costs)</li>\n<li>Components vs containers - stateless (dumb) components vs statefull components (in class based components using state property or functional components using useState). STatefull components are also called containers</li>\n</ul>\n<p><strong>Adding google fonts to react app</strong></p>\n<blockquote>\n<p>Go to: <a href=\"https://fonts.google.com/\">https://fonts.google.com/</a> and search for your favourite font (for example open sans). </p>\n</blockquote>\n<blockquote>\n<p>Click on it and then you will see list of different versions, such as bold, etc. Click on + sign to add the specific styles which you want to include.</p>\n</blockquote>\n<blockquote>\n<p>ON the right bar click on embed and you will see the link tag. copy it</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&#x26;display=swap\" rel=\"stylesheet\">\n</code></pre>\n<blockquote>\n<p>We can use this link tag in our public folder in index.html file\nAdd it to the head tag (for example above the title tag)</p>\n</blockquote>\n<blockquote>\n<p>Then we can use this font in our global css file: index.css</p>\n</blockquote>\n<pre><code class=\"language-es6\">body {\n  margin: 0;\n  padding: 0;\n  font-family: \"Open Sans\", sans-serif;\n}\n</code></pre>\n<blockquote>\n<p>Sans serif will still be as a backup font</p>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n<p>Good practice is to name all global variables in capital letters (and store them outside of components)</p>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n</blockquote>\n<pre><code class=\"language-es6\"></code></pre>\n<blockquote>\n<p>Linters are code quality checking tool</p>\n</blockquote>"}},{"node":{"id":"689e2f25-fb52-5f52-acb4-818fadd70f49","excerpt":"When you need to copy something from the terminal, instead of selecting it manually you can install xclip: sudo apt-get install xclip And…","rawMarkdownBody":"\r\n![](https://i.imgur.com/STxfgmb.jpg \"Photo by João Jesus from Pexels\")\r\n\r\nWhen you need to copy something from the terminal, instead of selecting it manually you can install xclip:\r\n\r\nsudo apt-get install xclip\r\n\r\nAnd then use it like this: \r\n```\r\n<your command> | xclip\r\n```\r\nExample:\r\n```\r\ndocker logs adverity-insights | xclip\r\n```\r\nIt will copy that commands output to clipboard\r\n\r\nCommon place to share text files with your colleagues is https://pastebin.com/","frontmatter":{"date":"2020-06-04","title":"How to copy from terminal using XClip","category":"knowledge-base"},"fields":{"slug":"/CopyingFromTerminal_XClip/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/STxfgmb.jpg\" title=\"Photo by João Jesus from Pexels\"></p>\n<p>When you need to copy something from the terminal, instead of selecting it manually you can install xclip:</p>\n<p>sudo apt-get install xclip</p>\n<p>And then use it like this: </p>\n<pre><code>&#x3C;your command> | xclip\n</code></pre>\n<p>Example:</p>\n<pre><code>docker logs adverity-insights | xclip\n</code></pre>\n<p>It will copy that commands output to clipboard</p>\n<p>Common place to share text files with your colleagues is <a href=\"https://pastebin.com/\">https://pastebin.com/</a></p>"}},{"node":{"id":"ec835950-86e5-527e-99d7-f49bf5778c23","excerpt":"JavaScript Concurrency: Promise then\nThis course covers concurrency, which means \"two or more events happening at the same time.\" We'll…","rawMarkdownBody":"\r\n![](https://i.imgur.com/xdi5UzW.png \"Photo by Pixabay from Pexels\")\r\n\r\nJavaScript Concurrency: Promise then\r\nThis course covers concurrency, which means \"two or more events happening at the same time.\" We'll explore a few concurrency models, focusing on those that are used in JavaScript. No experience with concurrency is necessary, but you should know these parts of JavaScript:\r\n\r\nnull and undefined.\r\nVariable definitions with var, let, and const.\r\nConditionals (if) and ternary conditionals (a ? y : b).\r\nC-style for loops: for (let i=0; i<10; i++) { ... }.\r\nRegular functions: function f() { ... }.\r\nArrow functions: const f = () => { ... }.\r\nPassing functions as arguments to other functions (\"callback functions\").\r\nThis course is about JavaScript, but we'll start with some Python code as a contrast to JavaScript. The Python example below shows that network code in Python doesn't look special: it looks like a normal series of function calls. The example reads executeprogram.com using the Requests HTTP library, then prints the first line of text.\r\n\r\n(Unlike most code in Execute Program, this example isn't actually executed because it's written in Python, not JavaScript. We'll tell you in the rare cases where code examples aren't executed.)\r\n\r\n> \r\nimport requests\r\nr = requests.get('https://www.executeprogram.com')\r\nr.text.split(\"\\n\")[0]\r\n'<!doctype html>' \r\nEach line above waits for the previous line to finish. Python calls requests.get after the \"requests\" library has been imported, and r.text is only accessed after requests.get has finished getting the data from the server. The usual term for this is \"blocking IO\": the requests.get function call stops the code's execution until all of the data is retrieved from the server.\r\n\r\nWith a few exceptions, JavaScript doesn't support blocking IO, so we can't write code that looks simple like the Python code above. Instead, JavaScript provides different, more complex ways to access networks, disks, and other external systems.\r\n\r\n(There are some exceptions where JavaScript code does block. Node is a server-side JavaScript runtime, but it provides optional blocking versions of some of its APIs. And browsers' old XMLHttpRequest API can block, though that behavior is now deprecated. But these are unusual exceptions.)\r\n\r\nIf JavaScript code doesn't block, how do we wait for network requests? Modern JavaScript code often solves this problem with promises, which were designed for exactly this purpose.\r\n\r\nTo approach promises, we'll temporarily forget about networks and examine some very normal-looking JavaScript code:\r\n\r\n> \r\nlet value = 5\r\nvalue = value * 2\r\nvalue = value * 3\r\nvalue = value + 1\r\nvalue\r\n31 \r\nWe can rewrite those assignments as small functions. If we immediately call each function, they'll have the same effect as the assignments above.\r\n\r\n> \r\nlet value = 5\r\nvalue = (n => n * 2)(value)\r\nvalue = (n => n * 3)(value)\r\nvalue = (n => n + 1)(value)\r\nvalue\r\n31 \r\nThis is a weird way to write a normal series of data transformations. However, it's also how promises work!\r\n\r\nWith promises, we write each step as a small (or occasionally large) function. Instead of repeatedly calling the functions ourselves, the promises call them for us. Here's the same example written using promises, followed by an explanation. Make sure to note that each of the small functions here is identical to its equivalent above.\r\n\r\n> \r\nPromise.resolve(5)\r\n  .then(n => n * 2)\r\n  .then(n => n * 3)\r\n  .then(n => n + 1)\r\n31 \r\nThe Promise.resolve(5) call creates a promise holding the value 5. We call its then method, providing a small callback function, n => n * 2. The callback receives the previous promise's value, 5, as an argument. It returns a new value, 10. That value is wrapped up in a new promise, which allows us to chain the next then call.\r\n\r\nThe initial Promise.resolve call returns a promise, and each of the then calls also returns a promise. There are a total of four promises constructed in that example. Each has a then method.\r\n\r\nThe example's final result is a promise containing the value 31, equivalent to what we'd get by calling Promise.resolve(31). When a code example results in a promise, Execute Program will automatically unwrap it for us. That's why the example above showed a result of 31, rather than showing the complex implementation details of the promise itself.\r\n\r\n(Execute Program does that by attaching its own then callback to the promise. That callback receives 31 as its argument. Once Execute Program has that value, it can show it as the result of the code example.)\r\n\r\nThere's nothing special about the number of thens that we've attached; we can chain as few or as many as we like.\r\n\r\n> \r\nPromise.resolve(5)\r\n  .then(n => n * 2)\r\n  .then(n => n * 3)\r\n  .then(n => n + 1)\r\n  .then(n => n + 200)\r\n231 \r\nThere's also nothing special about numbers; a promise can contain any JavaScript value.\r\n\r\n> \r\nPromise.resolve(5)\r\n  .then(n => n * 2)\r\n  .then(n => n.toString())\r\n'10' \r\nOur then callbacks can return nothing at all, in which case they'll implicitly return undefined.\r\n\r\n> \r\nPromise.resolve(5)\r\n  .then(n => {\r\n    /* Do nothing. */\r\n  })\r\nundefined \r\nPromise.resolve works in the same way: if we omit its argument, the promise will contain undefined.\r\n\r\n> \r\nPromise.resolve()\r\nundefined \r\nHere's a code problem for you to complete:\r\n\r\nAdd another then call to wrap the promise's string value in an array.\r\n\r\n> \r\nPromise.resolve(5)\r\n  .then(n => n * 2)\r\n  .then(n => n.toString())\r\n  .then(n=> [n])\r\n\r\nGOAL:\t\r\n['10']\r\nYOURS:\t\r\n['10'] \r\nIf these examples feel contrived, it's because they are! Each would be simpler if we used regular variable assignment instead of promises. However, they've shown us the basic structure of promises: we build a series of callbacks by repeatedly calling then, and each callback sees the previous callback's result.\r\n\r\nIn the next lesson, we'll see how promises interact with time. The simple value = (n => n * 2)(value) calls that we started with happened immediately. But promises don't call their then callbacks immediately. Instead, promises schedule code to run in the future, which we can never do with regular variable assignment!\r\n\r\nJavaScript Concurrency: Promises are asynchronous\r\nHere's a promise that creates an array, pushes a value into it, and returns it. At the end of the example, Execute Program automatically unwraps the promise to find what's inside: the array returned by the callback.\r\n\r\n> \r\nPromise.resolve(5).then(n => {\r\n  const array = []\r\n  array.push(n)\r\n  return array\r\n})\r\n[5] \r\nThe next example looks similar to the one above, but with a small tweak. We create the array outside the promise, then the promise pushes the value into it, then we return the array at the end.\r\n\r\nIt does something different! The example below gives [].\r\n\r\n> \r\nconst array = []\r\n\r\nPromise.resolve(5).then(n => {\r\n  array.push(n)\r\n})\r\n\r\narray\r\n[] \r\nThis is our first suggestion that promises are about time. Here's the hidden effect of promises:\r\n\r\nWhen we attach a then callback, we're asking the browser's JavaScript runtime to run that callback at some time in the future.\r\n\r\nIn the example above, that time never came! We created a promise that said \"please call this callback later\", then we immediately returned a value without waiting for the callback.\r\n\r\n(In most situations, the promise's code would eventually run, pushing the 5 onto the array. But Execute Program only shows the result of the code example at the moment when the code finished. Execute Program will only wait for promises when they're directly returned by the last line in the example.)\r\n\r\nTo get the array out, we need to ensure that the example returns a promise.\r\n\r\nIn this example, remember that the last then in a chain \"wins\": it determines what value the final promise contains. This example's return value is the final promise: the one containing the array. Execute Program automatically unpacks the promise, so the array is the final result of the example.\r\n\r\n> \r\nconst array = []\r\n\r\nPromise.resolve(5).then(n => {\r\n  array.push(n)\r\n}).then(() => {\r\n  return array\r\n})\r\n[5] \r\nWe can instrument our code to see the exact order of operations in our code. (The verb \"instrument\" means \"attach measurement instruments to\". It's a great way to learn how unfamiliar systems work!)\r\n\r\nIn the next example, we store promises in variables, creating new promises by calling the previous ones' then methods. We push strings onto the array at various times. By looking at the order of the strings in the array, we can see which code ran when.\r\n\r\nThe \"before\" and \"after\" values are pushed first. Then the two thens run in order.\r\n\r\n> \r\nconst array = []\r\narray.push('before')\r\n\r\nconst promise1 = Promise.resolve()\r\nconst promise2 = promise1.then(() => {\r\n  array.push('then1')\r\n})\r\nconst promise3 = promise2.then(() => {\r\n  array.push('then2')\r\n  return array\r\n})\r\n\r\narray.push('after')\r\npromise3\r\n['before', 'after', 'then1', 'then2'] \r\nLet's break that down. First, the example code runs from top to bottom.\r\n\r\nThe first promise is created. Promise.resolve doesn't schedule anything, so nothing else happens.\r\nThe second promise is created by calling promise1.then. The browser schedules that callback to run at some time in the future. When it runs, it will add \"then1\" to the array.\r\nThe third promise is created by calling promise2.then. The browser schedules that callback as well. It will eventually add \"then2\" to the array.\r\nNone of our then callbacks are called yet; they've only been scheduled to run in the future. That's why 'before' and 'after' show up first in the array, before 'then2' or 'then2'.\r\n\r\nExecute Program sees that the example returned a promise, promise3. It attaches yet another then handler to the promise, then stops executing. (It can't do anything else until it finds out what's inside that promise!)\r\n\r\npromise1 was never pending because Promise.resolve never schedules code to run in the future. The other two promises, both created with then, are still pending. Execute Program's promise is also pending.\r\n\r\nNow the JavaScript runtime begins resolving the promises, one by one:\r\n\r\nThe first pending callback is promise2's. It pushes 'then1' onto the array and returns undefined.\r\nThe next pending callback is promise3's. This callback pushes 'then2' onto the array, then returns the array.\r\nThe next pending callback is Execute Program's. You can't see the code for this one because it's inside Execute Program itself. It was created by calling then on promise3, so its callback gets array as an argument. The code in that callback renders the example's result to the browser's DOM, which is how you can see it above.\r\nHere's a code problem for you to complete:\r\n\r\nModify this code to ensure that 'after' is only pushed into the array after 'then' is pushed. You can do that by putting the final array.push call in a promise chained with then: promise2.then(...). Make sure that your new then callback returns the array so our test code can compare it against the expected value.\r\n\r\n> \r\nconst array = []\r\narray.push('before')\r\n\r\nconst promise1 = Promise.resolve(5)\r\nconst promise2 = promise1.then(() => {\r\n  array.push('then')\r\n})\r\nconst promise3=promise2.then(()=>{\r\n  array.push('after')\r\n  return array\r\n})\r\n\r\npromise3\r\nGOAL:\t\r\n['before', 'then', 'after']\r\nYOURS:\t\r\n['before', 'then', 'after'] \r\nPromises are a subtle and tricky topic, so there are a lot of details and implications to explore beyond this point. But we've now seen the core idea: promises schedule code to run later, and we can add callback functions that will run after a promise completes.\r\n\r\nReference:\r\n\r\nhttps://docs.npmjs.com/about-semantic-versioning  \r\n\r\n\r\nJavaScript Concurrency: Review\r\nIt's time to review! These examples are all taken from lessons that you've finished. Revisiting them makes sure that you haven't forgotten anything.\r\n\r\nType in what each expression will evaluate to. For example, for the prompt 1 + 1, you would type 2.\r\n\r\nIn this course, some code examples will intentionally cause errors. You can type error if the code will result in an error.\r\n\r\nHere's a code problem for you to complete:\r\n\r\nAdd another then call to wrap the promise's string value in an array.\r\n\r\n> \r\nPromise.resolve(5)\r\n  .then(n => n * 2)\r\n  .then(n => n.toString())\r\n.then(n => [n])\r\n\r\nGOAL:\t\r\n['10']\r\nYOURS:\t\r\n['10'] \r\n> \r\nPromise.resolve(5)\r\n  .then(n => n * 2)\r\n  .then(n => n.toString())\r\n'10' \r\n> \r\nconst array = []\r\n\r\nPromise.resolve(5).then(n => {\r\n  array.push(n)\r\n})\r\n\r\narray\r\n[] \r\n> \r\nconst array = []\r\narray.push('before')\r\n\r\nconst promise1 = Promise.resolve()\r\nconst promise2 = promise1.then(() => {\r\n  array.push('then1')\r\n})\r\nconst promise3 = promise2.then(() => {\r\n  array.push('then2')\r\n  return array\r\n})\r\n\r\narray.push('after')\r\npromise3\r\n['before', 'after', 'then1', 'then2'] \r\nHere's a code problem for you to complete:\r\n\r\nModify this code to ensure that 'after' is only pushed into the array after 'then' is pushed. You can do that by putting the final array.push call in a promise chained with then: promise2.then(...). Make sure that your new then callback returns the array so our test code can compare it against the expected value.\r\n\r\n> \r\nconst array = []\r\narray.push('before')\r\n\r\nconst promise1 = Promise.resolve(5)\r\nconst promise2 = promise1.then(() => {\r\n  array.push('then')\r\n})\r\nconst promise3= promise2.then(()=>{array.push('after') \r\n                                   return array})\r\n\r\npromise3\r\n\r\n\r\nGOAL:\t\r\n['before', 'then', 'after']\r\nYOURS:\t\r\n['before', 'then', 'after'] \r\nJavaScript Concurrency: Promise constructor\r\nSo far, we've only created initial promises with Promise.resolve. Then we've attached thens to the promises.\r\n\r\n> \r\nPromise.resolve(5).then(n => n + 1)\r\n6 \r\nWe can simplify that by using the new Promise constructor instead.\r\n\r\nThe constructor takes a callback as an argument, but it's different from the then callbacks that we've seen. A then callback gets the promise's value as its argument. When doing new Promise, there is no existing value.\r\n\r\nInstead, our callback will get another function as an argument: resolve. Calling resolve with a value will put a value inside the promise, \"fulfilling\" it.\r\n\r\n> \r\nnew Promise(resolve => resolve(5))\r\n5 \r\nOnce we have a promise, we can always call then on it.\r\n\r\n> \r\nnew Promise(resolve => resolve(5)).then(n => n * 2)\r\n10 \r\nYou might wonder: when we do new Promise(...), passing a callback to the constructor, is our callback called immediately? Or is it scheduled for execution later, like then callbacks are? We can find out by instrumenting the promise using our array push trick.\r\n\r\nIf the callback is called immediately, we should see a result of ['before', 'resolving', 'after']. If the callback is scheduled, we should see ['before', 'after', 'resolving']. Take a guess at which one it is.\r\n\r\n> \r\nconst array = []\r\narray.push('before')\r\n\r\nnew Promise(resolve => {\r\n  array.push('resolving')\r\n  resolve()\r\n})\r\n\r\narray.push('after')\r\nPromise.resolve(array)\r\n['before', 'resolving', 'after'] \r\nThe constructor's callback is called synchronously! Just to be very sure, we can double-check that by doing a different kind of test: don't return a promise from our example. Then there's nothing for Execute Program to wait for, so no scheduled code will run.\r\n\r\nOur constructor callback will still run because it's not scheduled. It's called immediately, synchronously, before the constructor completes.\r\n\r\n(The next example is the same as the one above, except that it returns the array directly rather than wrapping it in a promise.)\r\n\r\n> \r\nconst array = []\r\narray.push('before')\r\n\r\nnew Promise(resolve => {\r\n  array.push('resolving')\r\n  resolve()\r\n})\r\n\r\narray.push('after')\r\narray\r\n['before', 'resolving', 'after'] \r\nThe promise constructor can only take a callback function. We can't pass a value to wrap, like new Promise(5); that will cause an error. To directly wrap a value, we can use the familiar Promise.resolve(5) instead.\r\n\r\n(You can type error when a code example will throw an error.)\r\n\r\n> \r\nnew Promise(5)\r\nTypeError: Promise resolver 5 is not a function \r\nHere's a code problem for you to complete:\r\n\r\nBuild a new promise with new Promise, putting the value 'it worked' inside it. We've included some code that adds a then to convert the string into upper case.\r\n\r\n> \r\nnew Promise(resolve => resolve('it worked'))\r\n\r\n.then(string => string.toUpperCase())\r\nGOAL:\t\r\n'IT WORKED'\r\nYOURS:\t\r\n'IT WORKED' \r\nJavaScript Concurrency: Leaked promises still run\r\nThere are many ways to implement promises and other similar features. One implementation decision is: if we create a promise but never use its result, does its code run or not? We can find out by adding instrumentation.\r\n\r\n> \r\nconst array = []\r\narray.push('before')\r\n\r\nPromise.resolve().then(() => {\r\n  array.push('then')\r\n})\r\n\r\narray\r\n['before'] \r\nIt seems like the answer is no: a then isn't called unless we try to use the promise's value. However, that's not true!\r\n\r\nThe example above returned an array, which isn't a promise, so Execute Program didn't wait for anything. The promise's code was scheduled, but it didn't get a chance to run. We can let the promise run by creating a second promise and returning it, which will make Execute Program wait.\r\n\r\nIn the next example, note that the second promise doesn't reference the first promise in any way. The first promise is \"leaked\": we didn't attach a then to it, and we didn't return it or store it anywhere. However, it still runs and modifies the array!\r\n\r\n> \r\nconst array = []\r\narray.push('before')\r\n\r\nPromise.resolve().then(() => {\r\n  array.push('then')\r\n})\r\n\r\narray.push('after')\r\nPromise.resolve().then(() => array)\r\n['before', 'after', 'then'] \r\nHere's what happened when that code executed:\r\n\r\nWe push 'before'.\r\nA promise is created with a callback that will push 'then'. The callback doesn't run yet.\r\nAnother promise is created with a callback that returns the array. This callback also doesn't run yet.\r\nExecute Program sees that the example returned a promise, so it attaches another then callback that will render the example's results.\r\nNo promise callbacks have been called at this point. However, all of them are in a list managed by the JavaScript runtime, waiting to run. The callbacks are stored in the order that they were created: the array.push('then') callback is first, followed by the array callback, followed by Execute Program's \"render the finished example\" callback.\r\n\r\nThe JavaScript runtime begins executing those scheduled callbacks in order. The first callback pushes 'then' onto the array, the second callback returns the array, and the third callback (Execute Program's) renders the array as you see it above.\r\n\r\nHow does the runtime know that it should start calling the scheduled callbacks rather than doing some other kind of work? That's the secret of JavaScript: there is no other kind of work; everything is done by calling scheduled callbacks! At every point, the runtime chooses the next callback in its internal list and calls it.\r\n\r\n(As you can probably guess, there are some other subtleties in a system as complex as a web browser. For example, the browser also maintains lists of other kinds of events, like mouse and keyboard events from the user. However, thinking about browsers as always blindly calling the next callback will get you pretty far!)\r\n\r\nLet's stress test this a bit. If we create several promises, leaking all of them, will they all run in order?\r\n\r\nHere's a code problem for you to complete:\r\n\r\nBefore modifying this code, try running it to see what it does. The array is empty, which means that none of the promises' callbacks was called.\r\n\r\nWrap the final array in a promise by using Promise.resolve(array). The other five promises are still leaked, but they're also put into the JavaScript runtime's list before your new promise. That means that they'll run before your promise, so each of them will do their push call.\r\n\r\n> \r\nconst array = []\r\nfor (const i of [1, 2, 3, 4, 5]) {\r\n  Promise.resolve().then(() => array.push(i))\r\n}\r\nPromise.resolve(array)\r\n\r\nGOAL:\t\r\n[1, 2, 3, 4, 5]\r\nYOURS:\t\r\n[1, 2, 3, 4, 5] \r\nIn production systems, it's usually dangerous to leak promises. When we leak a promise, we lose the ability to wait for it, so we're giving up the ability to sequence other actions after it!","frontmatter":{"date":"2020-04-11","title":"Concurrency","category":"knowledge-base"},"fields":{"slug":"/Concurrency/"},"timeToRead":14,"html":"<p><img src=\"https://i.imgur.com/xdi5UzW.png\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>JavaScript Concurrency: Promise then\nThis course covers concurrency, which means \"two or more events happening at the same time.\" We'll explore a few concurrency models, focusing on those that are used in JavaScript. No experience with concurrency is necessary, but you should know these parts of JavaScript:</p>\n<p>null and undefined.\nVariable definitions with var, let, and const.\nConditionals (if) and ternary conditionals (a ? y : b).\nC-style for loops: for (let i=0; i&#x3C;10; i++) { ... }.\nRegular functions: function f() { ... }.\nArrow functions: const f = () => { ... }.\nPassing functions as arguments to other functions (\"callback functions\").\nThis course is about JavaScript, but we'll start with some Python code as a contrast to JavaScript. The Python example below shows that network code in Python doesn't look special: it looks like a normal series of function calls. The example reads executeprogram.com using the Requests HTTP library, then prints the first line of text.</p>\n<p>(Unlike most code in Execute Program, this example isn't actually executed because it's written in Python, not JavaScript. We'll tell you in the rare cases where code examples aren't executed.)</p>\n<blockquote>\n<p>import requests\nr = requests.get('<a href=\"https://www.executeprogram.com&#x27;\">https://www.executeprogram.com'</a>)\nr.text.split(\"\\n\")[0]\n'<!doctype html>'\nEach line above waits for the previous line to finish. Python calls requests.get after the \"requests\" library has been imported, and r.text is only accessed after requests.get has finished getting the data from the server. The usual term for this is \"blocking IO\": the requests.get function call stops the code's execution until all of the data is retrieved from the server.</p>\n</blockquote>\n<p>With a few exceptions, JavaScript doesn't support blocking IO, so we can't write code that looks simple like the Python code above. Instead, JavaScript provides different, more complex ways to access networks, disks, and other external systems.</p>\n<p>(There are some exceptions where JavaScript code does block. Node is a server-side JavaScript runtime, but it provides optional blocking versions of some of its APIs. And browsers' old XMLHttpRequest API can block, though that behavior is now deprecated. But these are unusual exceptions.)</p>\n<p>If JavaScript code doesn't block, how do we wait for network requests? Modern JavaScript code often solves this problem with promises, which were designed for exactly this purpose.</p>\n<p>To approach promises, we'll temporarily forget about networks and examine some very normal-looking JavaScript code:</p>\n<blockquote>\n<p>let value = 5\nvalue = value * 2\nvalue = value * 3\nvalue = value + 1\nvalue\n31\nWe can rewrite those assignments as small functions. If we immediately call each function, they'll have the same effect as the assignments above.</p>\n</blockquote>\n<blockquote>\n<p>let value = 5\nvalue = (n => n * 2)(value)\nvalue = (n => n * 3)(value)\nvalue = (n => n + 1)(value)\nvalue\n31\nThis is a weird way to write a normal series of data transformations. However, it's also how promises work!</p>\n</blockquote>\n<p>With promises, we write each step as a small (or occasionally large) function. Instead of repeatedly calling the functions ourselves, the promises call them for us. Here's the same example written using promises, followed by an explanation. Make sure to note that each of the small functions here is identical to its equivalent above.</p>\n<blockquote>\n<p>Promise.resolve(5)\n.then(n => n * 2)\n.then(n => n * 3)\n.then(n => n + 1)\n31\nThe Promise.resolve(5) call creates a promise holding the value 5. We call its then method, providing a small callback function, n => n * 2. The callback receives the previous promise's value, 5, as an argument. It returns a new value, 10. That value is wrapped up in a new promise, which allows us to chain the next then call.</p>\n</blockquote>\n<p>The initial Promise.resolve call returns a promise, and each of the then calls also returns a promise. There are a total of four promises constructed in that example. Each has a then method.</p>\n<p>The example's final result is a promise containing the value 31, equivalent to what we'd get by calling Promise.resolve(31). When a code example results in a promise, Execute Program will automatically unwrap it for us. That's why the example above showed a result of 31, rather than showing the complex implementation details of the promise itself.</p>\n<p>(Execute Program does that by attaching its own then callback to the promise. That callback receives 31 as its argument. Once Execute Program has that value, it can show it as the result of the code example.)</p>\n<p>There's nothing special about the number of thens that we've attached; we can chain as few or as many as we like.</p>\n<blockquote>\n<p>Promise.resolve(5)\n.then(n => n * 2)\n.then(n => n * 3)\n.then(n => n + 1)\n.then(n => n + 200)\n231\nThere's also nothing special about numbers; a promise can contain any JavaScript value.</p>\n</blockquote>\n<blockquote>\n<p>Promise.resolve(5)\n.then(n => n * 2)\n.then(n => n.toString())\n'10'\nOur then callbacks can return nothing at all, in which case they'll implicitly return undefined.</p>\n</blockquote>\n<blockquote>\n<p>Promise.resolve(5)\n.then(n => {</p>\n</blockquote>\n<pre><code>/* Do nothing. */\n</code></pre>\n<p>  })\nundefined\nPromise.resolve works in the same way: if we omit its argument, the promise will contain undefined.</p>\n<blockquote>\n<p>Promise.resolve()\nundefined\nHere's a code problem for you to complete:</p>\n</blockquote>\n<p>Add another then call to wrap the promise's string value in an array.</p>\n<blockquote>\n<p>Promise.resolve(5)\n.then(n => n * 2)\n.then(n => n.toString())\n.then(n=> [n])</p>\n</blockquote>\n<p>GOAL:\n['10']\nYOURS:\n['10']\nIf these examples feel contrived, it's because they are! Each would be simpler if we used regular variable assignment instead of promises. However, they've shown us the basic structure of promises: we build a series of callbacks by repeatedly calling then, and each callback sees the previous callback's result.</p>\n<p>In the next lesson, we'll see how promises interact with time. The simple value = (n => n * 2)(value) calls that we started with happened immediately. But promises don't call their then callbacks immediately. Instead, promises schedule code to run in the future, which we can never do with regular variable assignment!</p>\n<p>JavaScript Concurrency: Promises are asynchronous\nHere's a promise that creates an array, pushes a value into it, and returns it. At the end of the example, Execute Program automatically unwraps the promise to find what's inside: the array returned by the callback.</p>\n<blockquote>\n<p>Promise.resolve(5).then(n => {\nconst array = []\narray.push(n)\nreturn array\n})\n[5]\nThe next example looks similar to the one above, but with a small tweak. We create the array outside the promise, then the promise pushes the value into it, then we return the array at the end.</p>\n</blockquote>\n<p>It does something different! The example below gives [].</p>\n<blockquote>\n<p>const array = []</p>\n</blockquote>\n<p>Promise.resolve(5).then(n => {\narray.push(n)\n})</p>\n<p>array\n[]\nThis is our first suggestion that promises are about time. Here's the hidden effect of promises:</p>\n<p>When we attach a then callback, we're asking the browser's JavaScript runtime to run that callback at some time in the future.</p>\n<p>In the example above, that time never came! We created a promise that said \"please call this callback later\", then we immediately returned a value without waiting for the callback.</p>\n<p>(In most situations, the promise's code would eventually run, pushing the 5 onto the array. But Execute Program only shows the result of the code example at the moment when the code finished. Execute Program will only wait for promises when they're directly returned by the last line in the example.)</p>\n<p>To get the array out, we need to ensure that the example returns a promise.</p>\n<p>In this example, remember that the last then in a chain \"wins\": it determines what value the final promise contains. This example's return value is the final promise: the one containing the array. Execute Program automatically unpacks the promise, so the array is the final result of the example.</p>\n<blockquote>\n<p>const array = []</p>\n</blockquote>\n<p>Promise.resolve(5).then(n => {\narray.push(n)\n}).then(() => {\nreturn array\n})\n[5]\nWe can instrument our code to see the exact order of operations in our code. (The verb \"instrument\" means \"attach measurement instruments to\". It's a great way to learn how unfamiliar systems work!)</p>\n<p>In the next example, we store promises in variables, creating new promises by calling the previous ones' then methods. We push strings onto the array at various times. By looking at the order of the strings in the array, we can see which code ran when.</p>\n<p>The \"before\" and \"after\" values are pushed first. Then the two thens run in order.</p>\n<blockquote>\n<p>const array = []\narray.push('before')</p>\n</blockquote>\n<p>const promise1 = Promise.resolve()\nconst promise2 = promise1.then(() => {\narray.push('then1')\n})\nconst promise3 = promise2.then(() => {\narray.push('then2')\nreturn array\n})</p>\n<p>array.push('after')\npromise3\n['before', 'after', 'then1', 'then2']\nLet's break that down. First, the example code runs from top to bottom.</p>\n<p>The first promise is created. Promise.resolve doesn't schedule anything, so nothing else happens.\nThe second promise is created by calling promise1.then. The browser schedules that callback to run at some time in the future. When it runs, it will add \"then1\" to the array.\nThe third promise is created by calling promise2.then. The browser schedules that callback as well. It will eventually add \"then2\" to the array.\nNone of our then callbacks are called yet; they've only been scheduled to run in the future. That's why 'before' and 'after' show up first in the array, before 'then2' or 'then2'.</p>\n<p>Execute Program sees that the example returned a promise, promise3. It attaches yet another then handler to the promise, then stops executing. (It can't do anything else until it finds out what's inside that promise!)</p>\n<p>promise1 was never pending because Promise.resolve never schedules code to run in the future. The other two promises, both created with then, are still pending. Execute Program's promise is also pending.</p>\n<p>Now the JavaScript runtime begins resolving the promises, one by one:</p>\n<p>The first pending callback is promise2's. It pushes 'then1' onto the array and returns undefined.\nThe next pending callback is promise3's. This callback pushes 'then2' onto the array, then returns the array.\nThe next pending callback is Execute Program's. You can't see the code for this one because it's inside Execute Program itself. It was created by calling then on promise3, so its callback gets array as an argument. The code in that callback renders the example's result to the browser's DOM, which is how you can see it above.\nHere's a code problem for you to complete:</p>\n<p>Modify this code to ensure that 'after' is only pushed into the array after 'then' is pushed. You can do that by putting the final array.push call in a promise chained with then: promise2.then(...). Make sure that your new then callback returns the array so our test code can compare it against the expected value.</p>\n<blockquote>\n<p>const array = []\narray.push('before')</p>\n</blockquote>\n<p>const promise1 = Promise.resolve(5)\nconst promise2 = promise1.then(() => {\narray.push('then')\n})\nconst promise3=promise2.then(()=>{\narray.push('after')\nreturn array\n})</p>\n<p>promise3\nGOAL:\n['before', 'then', 'after']\nYOURS:\n['before', 'then', 'after']\nPromises are a subtle and tricky topic, so there are a lot of details and implications to explore beyond this point. But we've now seen the core idea: promises schedule code to run later, and we can add callback functions that will run after a promise completes.</p>\n<p>Reference:</p>\n<p><a href=\"https://docs.npmjs.com/about-semantic-versioning\">https://docs.npmjs.com/about-semantic-versioning</a>  </p>\n<p>JavaScript Concurrency: Review\nIt's time to review! These examples are all taken from lessons that you've finished. Revisiting them makes sure that you haven't forgotten anything.</p>\n<p>Type in what each expression will evaluate to. For example, for the prompt 1 + 1, you would type 2.</p>\n<p>In this course, some code examples will intentionally cause errors. You can type error if the code will result in an error.</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Add another then call to wrap the promise's string value in an array.</p>\n<blockquote>\n<p>Promise.resolve(5)\n.then(n => n * 2)\n.then(n => n.toString())\n.then(n => [n])</p>\n</blockquote>\n<p>GOAL:\n['10']\nYOURS:\n['10'] </p>\n<blockquote>\n<p>Promise.resolve(5)\n.then(n => n * 2)\n.then(n => n.toString())\n'10' </p>\n<p>const array = []</p>\n</blockquote>\n<p>Promise.resolve(5).then(n => {\narray.push(n)\n})</p>\n<p>array\n[] </p>\n<blockquote>\n<p>const array = []\narray.push('before')</p>\n</blockquote>\n<p>const promise1 = Promise.resolve()\nconst promise2 = promise1.then(() => {\narray.push('then1')\n})\nconst promise3 = promise2.then(() => {\narray.push('then2')\nreturn array\n})</p>\n<p>array.push('after')\npromise3\n['before', 'after', 'then1', 'then2']\nHere's a code problem for you to complete:</p>\n<p>Modify this code to ensure that 'after' is only pushed into the array after 'then' is pushed. You can do that by putting the final array.push call in a promise chained with then: promise2.then(...). Make sure that your new then callback returns the array so our test code can compare it against the expected value.</p>\n<blockquote>\n<p>const array = []\narray.push('before')</p>\n</blockquote>\n<p>const promise1 = Promise.resolve(5)\nconst promise2 = promise1.then(() => {\narray.push('then')\n})\nconst promise3= promise2.then(()=>{array.push('after')\nreturn array})</p>\n<p>promise3</p>\n<p>GOAL:\n['before', 'then', 'after']\nYOURS:\n['before', 'then', 'after']\nJavaScript Concurrency: Promise constructor\nSo far, we've only created initial promises with Promise.resolve. Then we've attached thens to the promises.</p>\n<blockquote>\n<p>Promise.resolve(5).then(n => n + 1)\n6\nWe can simplify that by using the new Promise constructor instead.</p>\n</blockquote>\n<p>The constructor takes a callback as an argument, but it's different from the then callbacks that we've seen. A then callback gets the promise's value as its argument. When doing new Promise, there is no existing value.</p>\n<p>Instead, our callback will get another function as an argument: resolve. Calling resolve with a value will put a value inside the promise, \"fulfilling\" it.</p>\n<blockquote>\n<p>new Promise(resolve => resolve(5))\n5\nOnce we have a promise, we can always call then on it.</p>\n</blockquote>\n<blockquote>\n<p>new Promise(resolve => resolve(5)).then(n => n * 2)\n10\nYou might wonder: when we do new Promise(...), passing a callback to the constructor, is our callback called immediately? Or is it scheduled for execution later, like then callbacks are? We can find out by instrumenting the promise using our array push trick.</p>\n</blockquote>\n<p>If the callback is called immediately, we should see a result of ['before', 'resolving', 'after']. If the callback is scheduled, we should see ['before', 'after', 'resolving']. Take a guess at which one it is.</p>\n<blockquote>\n<p>const array = []\narray.push('before')</p>\n</blockquote>\n<p>new Promise(resolve => {\narray.push('resolving')\nresolve()\n})</p>\n<p>array.push('after')\nPromise.resolve(array)\n['before', 'resolving', 'after']\nThe constructor's callback is called synchronously! Just to be very sure, we can double-check that by doing a different kind of test: don't return a promise from our example. Then there's nothing for Execute Program to wait for, so no scheduled code will run.</p>\n<p>Our constructor callback will still run because it's not scheduled. It's called immediately, synchronously, before the constructor completes.</p>\n<p>(The next example is the same as the one above, except that it returns the array directly rather than wrapping it in a promise.)</p>\n<blockquote>\n<p>const array = []\narray.push('before')</p>\n</blockquote>\n<p>new Promise(resolve => {\narray.push('resolving')\nresolve()\n})</p>\n<p>array.push('after')\narray\n['before', 'resolving', 'after']\nThe promise constructor can only take a callback function. We can't pass a value to wrap, like new Promise(5); that will cause an error. To directly wrap a value, we can use the familiar Promise.resolve(5) instead.</p>\n<p>(You can type error when a code example will throw an error.)</p>\n<blockquote>\n<p>new Promise(5)\nTypeError: Promise resolver 5 is not a function\nHere's a code problem for you to complete:</p>\n</blockquote>\n<p>Build a new promise with new Promise, putting the value 'it worked' inside it. We've included some code that adds a then to convert the string into upper case.</p>\n<blockquote>\n<p>new Promise(resolve => resolve('it worked'))</p>\n</blockquote>\n<p>.then(string => string.toUpperCase())\nGOAL:\n'IT WORKED'\nYOURS:\n'IT WORKED'\nJavaScript Concurrency: Leaked promises still run\nThere are many ways to implement promises and other similar features. One implementation decision is: if we create a promise but never use its result, does its code run or not? We can find out by adding instrumentation.</p>\n<blockquote>\n<p>const array = []\narray.push('before')</p>\n</blockquote>\n<p>Promise.resolve().then(() => {\narray.push('then')\n})</p>\n<p>array\n['before']\nIt seems like the answer is no: a then isn't called unless we try to use the promise's value. However, that's not true!</p>\n<p>The example above returned an array, which isn't a promise, so Execute Program didn't wait for anything. The promise's code was scheduled, but it didn't get a chance to run. We can let the promise run by creating a second promise and returning it, which will make Execute Program wait.</p>\n<p>In the next example, note that the second promise doesn't reference the first promise in any way. The first promise is \"leaked\": we didn't attach a then to it, and we didn't return it or store it anywhere. However, it still runs and modifies the array!</p>\n<blockquote>\n<p>const array = []\narray.push('before')</p>\n</blockquote>\n<p>Promise.resolve().then(() => {\narray.push('then')\n})</p>\n<p>array.push('after')\nPromise.resolve().then(() => array)\n['before', 'after', 'then']\nHere's what happened when that code executed:</p>\n<p>We push 'before'.\nA promise is created with a callback that will push 'then'. The callback doesn't run yet.\nAnother promise is created with a callback that returns the array. This callback also doesn't run yet.\nExecute Program sees that the example returned a promise, so it attaches another then callback that will render the example's results.\nNo promise callbacks have been called at this point. However, all of them are in a list managed by the JavaScript runtime, waiting to run. The callbacks are stored in the order that they were created: the array.push('then') callback is first, followed by the array callback, followed by Execute Program's \"render the finished example\" callback.</p>\n<p>The JavaScript runtime begins executing those scheduled callbacks in order. The first callback pushes 'then' onto the array, the second callback returns the array, and the third callback (Execute Program's) renders the array as you see it above.</p>\n<p>How does the runtime know that it should start calling the scheduled callbacks rather than doing some other kind of work? That's the secret of JavaScript: there is no other kind of work; everything is done by calling scheduled callbacks! At every point, the runtime chooses the next callback in its internal list and calls it.</p>\n<p>(As you can probably guess, there are some other subtleties in a system as complex as a web browser. For example, the browser also maintains lists of other kinds of events, like mouse and keyboard events from the user. However, thinking about browsers as always blindly calling the next callback will get you pretty far!)</p>\n<p>Let's stress test this a bit. If we create several promises, leaking all of them, will they all run in order?</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Before modifying this code, try running it to see what it does. The array is empty, which means that none of the promises' callbacks was called.</p>\n<p>Wrap the final array in a promise by using Promise.resolve(array). The other five promises are still leaked, but they're also put into the JavaScript runtime's list before your new promise. That means that they'll run before your promise, so each of them will do their push call.</p>\n<blockquote>\n<p>const array = []\nfor (const i of [1, 2, 3, 4, 5]) {\nPromise.resolve().then(() => array.push(i))\n}\nPromise.resolve(array)</p>\n</blockquote>\n<p>GOAL:\n[1, 2, 3, 4, 5]\nYOURS:\n[1, 2, 3, 4, 5]\nIn production systems, it's usually dangerous to leak promises. When we leak a promise, we lose the ability to wait for it, so we're giving up the ability to sequence other actions after it!</p>"}},{"node":{"id":"82e52a06-9cf9-5eef-a859-7251c37390a7","excerpt":"Photo from wallpapersafari.com Regular expressions (regexes) are patterns that describe strings. We might write a regex for filenames ending…","rawMarkdownBody":"![](https://i.imgur.com/ETtwNWY.jpg \"Photo from wallpapersafari.com\")<p style=\"font-size: 12px; text-align: right\">_Photo from wallpapersafari.com_</p>\r\n\r\n\r\n> Regular expressions (regexes) are patterns that describe strings. We might write a regex for filenames ending in \".jpg\". Or we might write one that recognizes phone numbers.\r\n\r\n> test if a is contained in a string\r\n```\r\n/a/.test('a')\r\ntrue\r\n/a/.test('b')\r\nfalse\r\n/a/.test('cat')\r\ntrue\r\n/A/.test('a')\r\nfalse\r\n/cat/.test('cart')\r\nfalse\r\n/a cat/.test('that is a cat')\r\ntrue\r\n``` \r\n\r\n>We can also define the regular expression and then test if give string maches\r\n```\r\nvar re = /at/\r\nre.test('bat')\r\ntrue\r\n```\r\n> Regexes like /a/ are literal: they specify exact characters to match. The real power in regexes is in the various operators. The most basic is ., the wildcard operator. It matches any character. But the character must be present; . won't match the empty string.\r\n```\r\n/./.test('a')\r\ntrue\r\n/./.test('b')\r\ntrue\r\n/./.test('')\r\nfalse\r\n/a./.test('ah')\r\ntrue\r\n/a./.test('ha')\r\nfalse\r\n/x.z/.test('xyyz')\r\nfalse\r\n/x..z/.test('xaaz')\r\ntrue\r\n```\r\n\r\n> There is only one exception, it does not match new line characters:\r\n```\r\n/./.test('\\n')\r\nfalse\r\n```\r\n\r\n> Sometimes we need to allow multiple alternatives. We can separate them with a pipe character, |, pronounced \"or\".\r\n> \r\n```\r\n/a|b/.test('a')\r\ntrue\r\n/a|b/.test('b')\r\ntrue \r\n/a|b/.test('c')\r\nfalse\r\n/at|og/.test('cat')\r\ntrue\r\n/at|og/.test('dog')\r\ntrue\r\n```\r\n\r\n```\r\nvar re = /cat|dog|horse/\r\nre.test('catzor')\r\ntrue\r\n```\r\n\r\n> Boundaries match beginning or end of a string. ^ matches beginning, $ matches end.\r\n```\r\n/^cat/.test('cat')\r\ntrue\r\n/^cat/.test('cats are cute')\r\ntrue\r\n/^cat/.test('I like cats')\r\nfalse\r\n\r\n/cat$/.test('a cat')\r\ntrue\r\n/cat$/.test('cats')\r\nfalse\r\n\r\n/^a$/.test('a')\r\ntrue\r\n/^a$/.test('ab')\r\nfalse\r\n```\r\n\r\n>To match empty string we use:\r\n```\r\n/^$/.test('')\r\ntrue\r\n/^$/.test(' ')\r\nfalse\r\n```\r\n\r\n> Hex codes - Computers internally store text as numbers. As a shorthand, we usually write those numbers out as hexadecimal codes. For example A is in hexcode \\x41, B is \\x42 and M is \\x4d\r\n```\r\n/\\x41/.test('A') // \"A\" is x41\r\ntrue\r\n/\\x41/.test('CATS ARE GOOD')\r\ntrue\r\n/\\x4d/.test('M')\r\ntrue\r\n```\r\n>  \"?\" is x3f and \"!\" is x21\r\n\r\n> hex codes in regex must be typed with \\x and then 2 digits\r\n\r\n> Multiplication: The + operator requires something to occur one or more times.\r\n```\r\n/a+/.test('aaa')\r\ntrue\r\n/a+/.test('a')\r\ntrue\r\n/ca+t/.test('caaat')\r\ntrue \r\n/ca+t/.test('ct')\r\nfalse\r\n```\r\n\r\n+ works with . .+ means any character at least once:\r\n```\r\n\r\n/.+/.test('a')\r\ntrue \r\n\r\n/.+/.test('cat')\r\ntrue \r\n\r\n/.+/.test('')\r\nfalse\r\n\r\n/a.+z/.test('aveloz')\r\ntrue\r\n\r\n\r\n/a.+z/.test('az')\r\nfalse \r\n```\r\n\r\n>The * operator is similar to +, but means \"zero or more times\".\r\n\r\n```\r\n\r\n/a*/.test('a')\r\ntrue\r\n\r\n/a*/.test('')\r\ntrue\r\n/a*/.test('aa')\r\ntrue \r\n```\r\n\r\n> Some more complex examples:\r\n```\r\n/a+b*c+/.test('aacc')\r\ntrue \r\n/a+b*c+/.test('aa')\r\nfalse\r\n\r\n/a+b*c+/.test('aabccc')\r\ntrue \r\n/a+b*c+/.test('abbbbc')\r\ntrue\r\n\r\n/a+b*c+/.test('bc')\r\nfalse\r\n```\r\n\r\n>Write a regex that reckognized words which start and end with t\r\n```\r\nvar re = /^t.*t$/\r\n```\r\n\r\nParens\r\n\r\n> will this be true or false?\r\n```\r\n\r\n``` \r\n\r\n>Actually true\r\n\r\n>Why? Because it says either it starts with a OR ends with b!!\r\n\r\n>We can use brackets to enforce certain logic:\r\n```\r\n/^a|b$/.test('ax')\r\n```\r\nis same as\r\n\r\n```\r\n/(^a)|(b$)/.test('ax')\r\n```\r\n\r\n>We can change it to:\r\n```\r\n(a|b)$/.test('ax')\r\nfalse\r\n```\r\n\r\n>Brackets can also shorten the code:\r\n``` \r\n/^(jpg|p(ng|df))$/.test('jpg')\r\ntrue \r\n```\r\n> How to make sure our code also takes into consideration jpeg??\r\n```\r\n/^(jpe*g)|p(ng|df))$/.test('jpg')\r\n```\r\n\r\n```\r\n/^(a|b)+$/.test('bababa')\r\ntrue \r\n```\r\n\r\n> We can say a or empty like this:\r\n```\r\n^(a|)$/.test('')\r\ntrue\r\n\r\n/^(a|)$/.test('a')\r\ntrue\r\n\r\n```\r\n\r\n> We can excape characters with \\\r\n\r\n``` \r\n/\\./.test('That is a cat.')\r\ntrue\r\n\r\n\r\n/.\\+./.test('111')\r\nfalse \r\n\r\n/.\\+./.test('1+1')\r\ntrue \r\n\r\n```\r\n\r\nCharacter classes:\r\n\r\n> \\d means a digit\r\n\r\n> \\s means a white space\r\n\r\n> \\t is a tab\r\n\r\n> \\D any character that is NOT a digit\r\n\r\n```\r\n/\\s/.test(' ')\r\ntrue\r\n\r\n/\\s/.test('\\n')\r\ntrue\r\n\r\n/\\s/.test('')\r\nfalse\r\n\r\n/\\d/.test('0')\r\ntrue\r\n\r\n/\\D/.test('0')\r\nfalse \r\n\r\n/\\S/.test(' ')\r\nfalse \r\n\r\n/\\S/.test('0')\r\ntrue\r\n```\r\n\r\n> If we need only lets say 3 characters, we can write (a|o|u) or alternatively [aou] -which is a character set\r\n\r\n```\r\n/^c(a|o|u)t$/.test('cat')\r\ntrue\r\n/^c[aou]t$/.test('cat')\r\ntrue \r\n\r\n/^c[aou]t$/.test('cot')\r\ntrue\r\n```\r\n\r\n>What if we want to allow any string of lower case letters? We'd have to write /(a|b|c|d|e| and so on. Instead, we can write another character set.\r\n``` \r\n> \r\n/[abcdefghijklmnopqrstuvwxyz]/.test('a')\r\ntrue \r\n> \r\n/[abcdefghijklmnopqrstuvwxyz]/.test('g')\r\ntrue \r\n```\r\n>That was shorter, but still wordy. We can specify an entire range of characters by using -.\r\n\r\n```\r\n/[a-z]/.test('g')\r\ntrue \r\n> \r\n/[1-3]/.test('1')\r\ntrue \r\n> \r\n/[1-3]/.test('a')\r\nfalse \r\n> \r\n/[1-3]/.test('2')\r\ntrue\r\n```\r\n>As usual, we escape special characters when we want them to be literal. This range contains only one character, an escaped ] written as \\].\r\n\r\n```\r\n/[\\]]/.test(']')\r\ntrue \r\n```\r\n> Character sets can be negated to mean \"everything not in the set\".We negate with ^, a character that we already saw. Normally it means \"beginning of line\". But inside [square brackets], it means \"negate the character set\". (There are only so many symbols on a keyboard, so some get reused.)\r\n\r\n```\r\n/[^a]/.test('a')\r\nfalse \r\n> \r\n/[^a]/.test('5')\r\ntrue \r\n```\r\n>Negation also applies to ranges.\r\n\r\n```\r\n/[a-z]/.test('h')\r\ntrue \r\n> \r\n/[^a-z]/.test('h')\r\nfalse \r\n```\r\n>Character sets match exactly one character in the string. (This is like character classes, which also match only one character.) To match more than one character, we can use + or *.\r\n``` \r\n^[a-z]$/.test('cat')\r\nfalse \r\n> \r\n/^[a-z]+$/.test('cat')\r\ntrue \r\n```\r\n>Maybe\r\nThe ? operator matches a character zero or one times, but not more than one.\r\n```\r\n/^a?$/.test('a')\r\ntrue \r\n> \r\n/^a?$/.test('')\r\ntrue \r\n> \r\n/^a?$/.test('b')\r\nfalse \r\n> \r\n/^a?$/.test('aa')\r\nfalse\r\n```\r\n\r\n>The ? operator affects whatever is immediately before it. For example, in ab?, the ? operators only affects \"b\", not \"a\". We say that it binds tightly.\r\n```\r\n\r\n/^ab?$/.test('a')\r\ntrue \r\n> \r\n/^ab?$/.test('b')\r\nfalse \r\n> \r\n/^ab?$/.test('ab')\r\ntrue \r\n```\r\n\r\n\r\n>To make ? include more characters, we can group them using parens. Then we apply the ? to the whole group.\r\n\r\n```\r\n/^(555-)?555-5555$/.test('555-555-5555')\r\ntrue \r\n> \r\n/^(555-)?555-5555$/.test('555-5555')\r\ntrue \r\n```\r\n>to match \"letters, numbers, and underscores.\" we can use the character class \\w. The \"w\" in \\w stands for \"word\", which is another name for an identifier. This can be tricky: \"word\" has a special meaning in programming! \\W negates it\r\n```\r\n/\\w/.test('a')\r\ntrue \r\n> \r\n/\\w/.test('+')\r\nfalse \r\n> \r\n/\\w/.test('F')\r\ntrue \r\n> \r\n/\\w/.test('_')\r\ntrue \r\n> \r\n/a\\wc/.test('abc')\r\ntrue \r\n> \r\n/a\\wc/.test('a-c')\r\nfalse \r\n> \r\n/^\\w$/.test('aaa')\r\nfalse \r\n```\r\n\r\n\r\nCharacter sets\r\nIn a character set, characters and ranges can be mixed in any order. This regex is equivalent to /[g]|[c-e]|[a]/.\r\n\r\n> \r\n/[gc-ea]/.test('a')\r\ntrue \r\n> \r\n/[gc-ea]/.test('b')\r\nfalse \r\n> \r\n/[gc-ea]/.test('c')\r\ntrue \r\n> \r\n/[gc-ea]/.test('d')\r\ntrue \r\n> \r\n/[gc-ea]/.test('h')\r\nfalse \r\nWe can also negate the whole character set, even if it's complex.\r\n\r\n> \r\n/[^gc-ea]/.test('a')\r\nfalse \r\n> \r\n/[^gc-ea]/.test('d')\r\nfalse \r\n> \r\n/[^gc-ea]/.test('b')\r\ntrue \r\nIf a character set ever gives you trouble, you can always break it up. For example, /[hbd-fa]/ can be thought of as /(h|b|[d-f]|a)/. This trick works for anything in regexes. Most regex features are syntactic sugar for simple features like |.\r\n\r\nSpecial characters aren't special inside a character set. For example, \".\" means a literal \".\" and \"$\" is a literal \"$\".\r\n\r\n\r\n```\r\n/[a$]/.test('$')\r\ntrue \r\n> \r\n/[a$]/.test('a')\r\ntrue \r\n> \r\n/[a$]/.test('^')\r\nfalse \r\n> \r\n/^[a$]$/.test('ab')\r\nfalse \r\n\r\n```\r\nThe ^ is only special if it's the first character in the set. There, it means \"negate this set\". But a ^ anywhere else in the set is just another literal character.\r\n\r\n\r\n```\r\n/[^b]/.test('b')\r\nfalse \r\n> \r\n/[b^]/.test('b')\r\ntrue \r\n> \r\n/[b^]/.test('^')\r\ntrue \r\n> \r\n/[^^]/.test('b')\r\ntrue \r\n> \r\n/[^^]/.test('^')\r\nfalse \r\n\r\n```\r\n\r\nRegular Expressions: Constrained repetition\r\nSometimes we need text to be of a certain length. We could repeat . to enforce length.\r\n\r\n> \r\n/^.....$/.test('1234')\r\nfalse \r\n> \r\n/^.....$/.test('12345')\r\ntrue \r\n> \r\n/^.....$/.test('123456')\r\nfalse \r\nThis is awkward, especially if we want to match exactly, say, 20 characters. Fortunately, there's a better way: {curly braces}.\r\n\r\n> \r\n/^.{5}$/.test('1234')\r\nfalse \r\n> \r\n/^.{5}$/.test('12345')\r\ntrue \r\n> \r\n/^.{5}$/.test('123456')\r\nfalse \r\nWe can repeat anything in this way, not just .\r\n\r\n> \r\n/^(a|b){3}$/.test('aaa')\r\ntrue \r\n> \r\n/^(a|b){3}$/.test('bba')\r\ntrue \r\n> \r\n/^(a|b){3}$/.test('ab')\r\nfalse \r\nBy adding a comma, we can specify a range of allowed lengths.\r\n\r\n> \r\n/^.{2,3}$/.test('1')\r\nfalse \r\n> \r\n/^.{2,3}$/.test('12')\r\ntrue \r\n> \r\n/^.{2,3}$/.test('123')\r\ntrue \r\n> \r\n/^.{2,3}$/.test('1234')\r\nfalse \r\nWe can also specify \"n or more characters\" by omitting the second number. For example, .{8,} means \"at least eight characters\".\r\n\r\n> \r\n/^[fho]{3,}$/.test('of')\r\nfalse \r\n> \r\n/^[fho]{3,}$/.test('off')\r\ntrue \r\n> \r\n/^[fho]{3,}$/.test('hoof')\r\ntrue \r\nIn some regex systems, .{,5} means \"at most five characters\". Unfortunately, that's not true in JavaScript's regexes. JavaScript won't tell us about our mistake either. Instead, the {,5} gets interpreted as a literal string!\r\n\r\n> \r\n/^.{,5}$/.test('12345')\r\nfalse \r\n> \r\n/^.{,5}$/.test('.{,5}')\r\ntrue \r\nThis is bizarre, but not a big problem. If we need five or fewer characters, we can say .{0,5}.\r\n\r\n> \r\n/^.{0,5}$/.test('1234')\r\ntrue \r\n> \r\n/^.{0,5}$/.test('12345')\r\ntrue \r\n> \r\n/^.{0,5}$/.test('123456')\r\nfalse \r\n\r\nRegular Expressions: Word boundaries\r\nWhen using a regular expression to search for a word, we usually don't want to match those letters inside another word.\r\n\r\n> \r\n/cat/.test(\"I couldn't locate Mr. Meow.\")\r\ntrue \r\nThe word 'locate' contains 'cat', so this sentence matches.\r\n\r\nThat's not what we want! We'd like to match the word 'cat'. Regexes provide a way to do this using the word boundary \\b:\r\n\r\n> \r\n/\\bcat\\b/.test('It was difficult to locate, but')\r\nfalse \r\n> \r\n/\\bcat\\b/.test('the cat returned.')\r\ntrue \r\n\\b only matches where a word character is next to a non-word character. (Remember that word-characters are letters, numbers and underscores.)\r\n\r\n> \r\n/\\bcat\\b/.test('cat-like reflexes')\r\ntrue \r\n> \r\n/\\bcat\\b/.test(\"var cat_name = 'Mr. Meow';\")\r\nfalse \r\n> \r\n/\\bcat\\b/.test(\"Where's the cat's toy?\")\r\ntrue \r\nLike most character classes, \\b can be negated by capitalizing it. \\B only matches between two word characters. It's pronounced \"non-word-boundary\".\r\n\r\n> \r\n/\\Bcat\\B/.test('The cat over there')\r\nfalse \r\n> \r\n/\\Bcat\\B/.test('concatenate')\r\ntrue \r\n\\B can be used to find out if a word has 'cat' in particular places, which could help win scrabble games.\r\n\r\nIf you'd like to find words that contain \"cat\", but don't end with \"cat\":\r\n\r\n> \r\n/cat\\B/.test('publication')\r\ntrue \r\n> \r\n/cat\\B/.test('wildcat')\r\nfalse \r\n> \r\n/cat\\B/.test('catenary')\r\ntrue \r\nOr words that contain \"cat\" only in the middle:\r\n\r\n> \r\n/\\Bcat\\B/.test('cathode')\r\nfalse \r\n> \r\n/\\Bcat\\B/.test('muscat')\r\nfalse \r\n> \r\n/\\Bcat\\B/.test('hecatomb')\r\ntrue \r\n\r\nRegular Expressions: Character classes in sets\r\nSuppose that we're writing a regex to process Lisp code. Unlike most languages, Lisp allows the \"-\" character in identifiers. We can use a character set including everything in \\w as well as -.\r\n\r\n> \r\n/^[\\w-]+$/.test('a_function')\r\ntrue \r\n> \r\n/^[\\w-]+$/.test('a-function')\r\ntrue \r\n> \r\n/^[\\w-]+$/.test('a-function()')\r\nfalse \r\n```\r\n```\r\n```","frontmatter":{"date":"2020-04-04","title":"Javascript Regular expressions","category":"knowledge-base"},"fields":{"slug":"/JS_regular_Expressions/"},"timeToRead":9,"html":"<p><img src=\"https://i.imgur.com/ETtwNWY.jpg\" title=\"Photo from wallpapersafari.com\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from wallpapersafari.com</em></p></p>\n<blockquote>\n<p>Regular expressions (regexes) are patterns that describe strings. We might write a regex for filenames ending in \".jpg\". Or we might write one that recognizes phone numbers.</p>\n</blockquote>\n<blockquote>\n<p>test if a is contained in a string</p>\n</blockquote>\n<pre><code>/a/.test('a')\ntrue\n/a/.test('b')\nfalse\n/a/.test('cat')\ntrue\n/A/.test('a')\nfalse\n/cat/.test('cart')\nfalse\n/a cat/.test('that is a cat')\ntrue\n</code></pre>\n<blockquote>\n<p>We can also define the regular expression and then test if give string maches</p>\n</blockquote>\n<pre><code>var re = /at/\nre.test('bat')\ntrue\n</code></pre>\n<blockquote>\n<p>Regexes like /a/ are literal: they specify exact characters to match. The real power in regexes is in the various operators. The most basic is ., the wildcard operator. It matches any character. But the character must be present; . won't match the empty string.</p>\n</blockquote>\n<pre><code>/./.test('a')\ntrue\n/./.test('b')\ntrue\n/./.test('')\nfalse\n/a./.test('ah')\ntrue\n/a./.test('ha')\nfalse\n/x.z/.test('xyyz')\nfalse\n/x..z/.test('xaaz')\ntrue\n</code></pre>\n<blockquote>\n<p>There is only one exception, it does not match new line characters:</p>\n</blockquote>\n<pre><code>/./.test('\\n')\nfalse\n</code></pre>\n<blockquote>\n<p>Sometimes we need to allow multiple alternatives. We can separate them with a pipe character, |, pronounced \"or\".</p>\n</blockquote>\n<pre><code>/a|b/.test('a')\ntrue\n/a|b/.test('b')\ntrue \n/a|b/.test('c')\nfalse\n/at|og/.test('cat')\ntrue\n/at|og/.test('dog')\ntrue\n</code></pre>\n<pre><code>var re = /cat|dog|horse/\nre.test('catzor')\ntrue\n</code></pre>\n<blockquote>\n<p>Boundaries match beginning or end of a string. ^ matches beginning, $ matches end.</p>\n</blockquote>\n<pre><code>/^cat/.test('cat')\ntrue\n/^cat/.test('cats are cute')\ntrue\n/^cat/.test('I like cats')\nfalse\n\n/cat$/.test('a cat')\ntrue\n/cat$/.test('cats')\nfalse\n\n/^a$/.test('a')\ntrue\n/^a$/.test('ab')\nfalse\n</code></pre>\n<blockquote>\n<p>To match empty string we use:</p>\n</blockquote>\n<pre><code>/^$/.test('')\ntrue\n/^$/.test(' ')\nfalse\n</code></pre>\n<blockquote>\n<p>Hex codes - Computers internally store text as numbers. As a shorthand, we usually write those numbers out as hexadecimal codes. For example A is in hexcode \\x41, B is \\x42 and M is \\x4d</p>\n</blockquote>\n<pre><code>/\\x41/.test('A') // \"A\" is x41\ntrue\n/\\x41/.test('CATS ARE GOOD')\ntrue\n/\\x4d/.test('M')\ntrue\n</code></pre>\n<blockquote>\n<p> \"?\" is x3f and \"!\" is x21</p>\n</blockquote>\n<blockquote>\n<p>hex codes in regex must be typed with \\x and then 2 digits</p>\n</blockquote>\n<blockquote>\n<p>Multiplication: The + operator requires something to occur one or more times.</p>\n</blockquote>\n<pre><code>/a+/.test('aaa')\ntrue\n/a+/.test('a')\ntrue\n/ca+t/.test('caaat')\ntrue \n/ca+t/.test('ct')\nfalse\n</code></pre>\n<ul>\n<li>\n<p>works with . .+ means any character at least once:</p>\n<pre><code></code></pre>\n</li>\n</ul>\n<p>/.+/.test('a')\ntrue </p>\n<p>/.+/.test('cat')\ntrue </p>\n<p>/.+/.test('')\nfalse</p>\n<p>/a.+z/.test('aveloz')\ntrue</p>\n<p>/a.+z/.test('az')\nfalse </p>\n<pre><code>>The * operator is similar to +, but means \"zero or more times\".\n</code></pre>\n<p>/a*/.test('a')\ntrue</p>\n<p>/a<em>/.test('')\ntrue\n/a</em>/.test('aa')\ntrue </p>\n<pre><code>> Some more complex examples:\n</code></pre>\n<p>/a+b<em>c+/.test('aacc')\ntrue\n/a+b</em>c+/.test('aa')\nfalse</p>\n<p>/a+b<em>c+/.test('aabccc')\ntrue\n/a+b</em>c+/.test('abbbbc')\ntrue</p>\n<p>/a+b*c+/.test('bc')\nfalse</p>\n<pre><code>>Write a regex that reckognized words which start and end with t\n</code></pre>\n<p>var re = /^t.*t$/</p>\n<pre><code>Parens\n\n> will this be true or false?\n</code></pre>\n<pre><code>>Actually true\n\n>Why? Because it says either it starts with a OR ends with b!!\n\n>We can use brackets to enforce certain logic:\n</code></pre>\n<p>/^a|b$/.test('ax')</p>\n<pre><code>is same as\n</code></pre>\n<p>/(^a)|(b$)/.test('ax')</p>\n<pre><code>>We can change it to:\n</code></pre>\n<p>(a|b)$/.test('ax')\nfalse</p>\n<pre><code>>Brackets can also shorten the code:\n</code></pre>\n<p>/^(jpg|p(ng|df))$/.test('jpg')\ntrue </p>\n<pre><code>> How to make sure our code also takes into consideration jpeg??\n</code></pre>\n<p>/^(jpe*g)|p(ng|df))$/.test('jpg')</p>\n<pre><code></code></pre>\n<p>/^(a|b)+$/.test('bababa')\ntrue </p>\n<pre><code>> We can say a or empty like this:\n</code></pre>\n<p>^(a|)$/.test('')\ntrue</p>\n<p>/^(a|)$/.test('a')\ntrue</p>\n<pre><code>> We can excape characters with \\\n</code></pre>\n<p>/./.test('That is a cat.')\ntrue</p>\n<p>/.+./.test('111')\nfalse </p>\n<p>/.+./.test('1+1')\ntrue </p>\n<pre><code>Character classes:\n\n> \\d means a digit\n\n> \\s means a white space\n\n> \\t is a tab\n\n> \\D any character that is NOT a digit\n</code></pre>\n<p>/\\s/.test(' ')\ntrue</p>\n<p>/\\s/.test('\\n')\ntrue</p>\n<p>/\\s/.test('')\nfalse</p>\n<p>/\\d/.test('0')\ntrue</p>\n<p>/\\D/.test('0')\nfalse </p>\n<p>/\\S/.test(' ')\nfalse </p>\n<p>/\\S/.test('0')\ntrue</p>\n<pre><code>> If we need only lets say 3 characters, we can write (a|o|u) or alternatively [aou] -which is a character set\n</code></pre>\n<p>/^c(a|o|u)t$/.test('cat')\ntrue\n/^c[aou]t$/.test('cat')\ntrue </p>\n<p>/^c[aou]t$/.test('cot')\ntrue</p>\n<pre><code>>What if we want to allow any string of lower case letters? We'd have to write /(a|b|c|d|e| and so on. Instead, we can write another character set.\n</code></pre>\n<blockquote>\n<p>/[abcdefghijklmnopqrstuvwxyz]/.test('a')\ntrue </p>\n<p>/[abcdefghijklmnopqrstuvwxyz]/.test('g')\ntrue </p>\n</blockquote>\n<pre><code>>That was shorter, but still wordy. We can specify an entire range of characters by using -.\n</code></pre>\n<p>/[a-z]/.test('g')\ntrue </p>\n<blockquote>\n<p>/[1-3]/.test('1')\ntrue </p>\n<p>/[1-3]/.test('a')\nfalse </p>\n<p>/[1-3]/.test('2')\ntrue</p>\n</blockquote>\n<pre><code>>As usual, we escape special characters when we want them to be literal. This range contains only one character, an escaped ] written as \\].\n</code></pre>\n<p>/[]]/.test(']')\ntrue </p>\n<pre><code>> Character sets can be negated to mean \"everything not in the set\".We negate with ^, a character that we already saw. Normally it means \"beginning of line\". But inside [square brackets], it means \"negate the character set\". (There are only so many symbols on a keyboard, so some get reused.)\n</code></pre>\n<p>/<sup id=\"fnref-a\"><a href=\"#fn-a\" class=\"footnote-ref\">a</a></sup>/.test('a')\nfalse </p>\n<blockquote>\n<p>/<sup id=\"fnref-a\"><a href=\"#fn-a\" class=\"footnote-ref\">a</a></sup>/.test('5')\ntrue </p>\n</blockquote>\n<pre><code>>Negation also applies to ranges.\n</code></pre>\n<p>/[a-z]/.test('h')\ntrue </p>\n<blockquote>\n<p>/<sup id=\"fnref-a-z\"><a href=\"#fn-a-z\" class=\"footnote-ref\">a-z</a></sup>/.test('h')\nfalse </p>\n</blockquote>\n<pre><code>>Character sets match exactly one character in the string. (This is like character classes, which also match only one character.) To match more than one character, we can use + or *.\n</code></pre>\n<p>^[a-z]$/.test('cat')\nfalse </p>\n<blockquote>\n<p>/^[a-z]+$/.test('cat')\ntrue </p>\n</blockquote>\n<pre><code>>Maybe\nThe ? operator matches a character zero or one times, but not more than one.\n</code></pre>\n<p>/^a?$/.test('a')\ntrue </p>\n<blockquote>\n<p>/^a?$/.test('')\ntrue </p>\n<p>/^a?$/.test('b')\nfalse </p>\n<p>/^a?$/.test('aa')\nfalse</p>\n</blockquote>\n<pre><code>>The ? operator affects whatever is immediately before it. For example, in ab?, the ? operators only affects \"b\", not \"a\". We say that it binds tightly.\n</code></pre>\n<p>/^ab?$/.test('a')\ntrue </p>\n<blockquote>\n<p>/^ab?$/.test('b')\nfalse </p>\n<p>/^ab?$/.test('ab')\ntrue </p>\n</blockquote>\n<pre><code>>To make ? include more characters, we can group them using parens. Then we apply the ? to the whole group.\n</code></pre>\n<p>/^(555-)?555-5555$/.test('555-555-5555')\ntrue </p>\n<blockquote>\n<p>/^(555-)?555-5555$/.test('555-5555')\ntrue </p>\n</blockquote>\n<pre><code>>to match \"letters, numbers, and underscores.\" we can use the character class \\w. The \"w\" in \\w stands for \"word\", which is another name for an identifier. This can be tricky: \"word\" has a special meaning in programming! \\W negates it\n</code></pre>\n<p>/\\w/.test('a')\ntrue </p>\n<blockquote>\n<p>/\\w/.test('+')\nfalse </p>\n<p>/\\w/.test('F')\ntrue </p>\n<p>/\\w/.test('_')\ntrue </p>\n<p>/a\\wc/.test('abc')\ntrue </p>\n<p>/a\\wc/.test('a-c')\nfalse </p>\n<p>/^\\w$/.test('aaa')\nfalse </p>\n</blockquote>\n<pre><code>Character sets\nIn a character set, characters and ranges can be mixed in any order. This regex is equivalent to /[g]|[c-e]|[a]/.\n\n> \n/[gc-ea]/.test('a')\ntrue \n> \n/[gc-ea]/.test('b')\nfalse \n> \n/[gc-ea]/.test('c')\ntrue \n> \n/[gc-ea]/.test('d')\ntrue \n> \n/[gc-ea]/.test('h')\nfalse \nWe can also negate the whole character set, even if it's complex.\n\n> \n/[^gc-ea]/.test('a')\nfalse \n> \n/[^gc-ea]/.test('d')\nfalse \n> \n/[^gc-ea]/.test('b')\ntrue \nIf a character set ever gives you trouble, you can always break it up. For example, /[hbd-fa]/ can be thought of as /(h|b|[d-f]|a)/. This trick works for anything in regexes. Most regex features are syntactic sugar for simple features like |.\n\nSpecial characters aren't special inside a character set. For example, \".\" means a literal \".\" and \"$\" is a literal \"$\".\n</code></pre>\n<p>/[a$]/.test('$')\ntrue </p>\n<blockquote>\n<p>/[a$]/.test('a')\ntrue </p>\n<p>/[a$]/.test('^')\nfalse </p>\n<p>/^[a$]$/.test('ab')\nfalse </p>\n</blockquote>\n<pre><code>The ^ is only special if it's the first character in the set. There, it means \"negate this set\". But a ^ anywhere else in the set is just another literal character.\n</code></pre>\n<p>/<sup id=\"fnref-b\"><a href=\"#fn-b\" class=\"footnote-ref\">b</a></sup>/.test('b')\nfalse </p>\n<blockquote>\n<p>/[b^]/.test('b')\ntrue </p>\n<p>/[b^]/.test('^')\ntrue </p>\n<p>/<sup id=\"fnref-^\"><a href=\"#fn-^\" class=\"footnote-ref\">^</a></sup>/.test('b')\ntrue </p>\n<p>/<sup id=\"fnref-^\"><a href=\"#fn-^\" class=\"footnote-ref\">^</a></sup>/.test('^')\nfalse </p>\n</blockquote>\n<pre><code>Regular Expressions: Constrained repetition\nSometimes we need text to be of a certain length. We could repeat . to enforce length.\n\n> \n/^.....$/.test('1234')\nfalse \n> \n/^.....$/.test('12345')\ntrue \n> \n/^.....$/.test('123456')\nfalse \nThis is awkward, especially if we want to match exactly, say, 20 characters. Fortunately, there's a better way: {curly braces}.\n\n> \n/^.{5}$/.test('1234')\nfalse \n> \n/^.{5}$/.test('12345')\ntrue \n> \n/^.{5}$/.test('123456')\nfalse \nWe can repeat anything in this way, not just .\n\n> \n/^(a|b){3}$/.test('aaa')\ntrue \n> \n/^(a|b){3}$/.test('bba')\ntrue \n> \n/^(a|b){3}$/.test('ab')\nfalse \nBy adding a comma, we can specify a range of allowed lengths.\n\n> \n/^.{2,3}$/.test('1')\nfalse \n> \n/^.{2,3}$/.test('12')\ntrue \n> \n/^.{2,3}$/.test('123')\ntrue \n> \n/^.{2,3}$/.test('1234')\nfalse \nWe can also specify \"n or more characters\" by omitting the second number. For example, .{8,} means \"at least eight characters\".\n\n> \n/^[fho]{3,}$/.test('of')\nfalse \n> \n/^[fho]{3,}$/.test('off')\ntrue \n> \n/^[fho]{3,}$/.test('hoof')\ntrue \nIn some regex systems, .{,5} means \"at most five characters\". Unfortunately, that's not true in JavaScript's regexes. JavaScript won't tell us about our mistake either. Instead, the {,5} gets interpreted as a literal string!\n\n> \n/^.{,5}$/.test('12345')\nfalse \n> \n/^.{,5}$/.test('.{,5}')\ntrue \nThis is bizarre, but not a big problem. If we need five or fewer characters, we can say .{0,5}.\n\n> \n/^.{0,5}$/.test('1234')\ntrue \n> \n/^.{0,5}$/.test('12345')\ntrue \n> \n/^.{0,5}$/.test('123456')\nfalse \n\nRegular Expressions: Word boundaries\nWhen using a regular expression to search for a word, we usually don't want to match those letters inside another word.\n\n> \n/cat/.test(\"I couldn't locate Mr. Meow.\")\ntrue \nThe word 'locate' contains 'cat', so this sentence matches.\n\nThat's not what we want! We'd like to match the word 'cat'. Regexes provide a way to do this using the word boundary \\b:\n\n> \n/\\bcat\\b/.test('It was difficult to locate, but')\nfalse \n> \n/\\bcat\\b/.test('the cat returned.')\ntrue \n\\b only matches where a word character is next to a non-word character. (Remember that word-characters are letters, numbers and underscores.)\n\n> \n/\\bcat\\b/.test('cat-like reflexes')\ntrue \n> \n/\\bcat\\b/.test(\"var cat_name = 'Mr. Meow';\")\nfalse \n> \n/\\bcat\\b/.test(\"Where's the cat's toy?\")\ntrue \nLike most character classes, \\b can be negated by capitalizing it. \\B only matches between two word characters. It's pronounced \"non-word-boundary\".\n\n> \n/\\Bcat\\B/.test('The cat over there')\nfalse \n> \n/\\Bcat\\B/.test('concatenate')\ntrue \n\\B can be used to find out if a word has 'cat' in particular places, which could help win scrabble games.\n\nIf you'd like to find words that contain \"cat\", but don't end with \"cat\":\n\n> \n/cat\\B/.test('publication')\ntrue \n> \n/cat\\B/.test('wildcat')\nfalse \n> \n/cat\\B/.test('catenary')\ntrue \nOr words that contain \"cat\" only in the middle:\n\n> \n/\\Bcat\\B/.test('cathode')\nfalse \n> \n/\\Bcat\\B/.test('muscat')\nfalse \n> \n/\\Bcat\\B/.test('hecatomb')\ntrue \n\nRegular Expressions: Character classes in sets\nSuppose that we're writing a regex to process Lisp code. Unlike most languages, Lisp allows the \"-\" character in identifiers. We can use a character set including everything in \\w as well as -.\n\n> \n/^[\\w-]+$/.test('a_function')\ntrue \n> \n/^[\\w-]+$/.test('a-function')\ntrue \n> \n/^[\\w-]+$/.test('a-function()')\nfalse \n</code></pre>\n<pre><code></code></pre>"}},{"node":{"id":"637b7b5f-15d6-5f59-9d0c-e965237f978f","excerpt":"Photo from wallpapersafari.com \"NaN\" means \"not a number\". Instances that return NaN: O/0 any arithmetic on undefined operation on a NaN Why…","rawMarkdownBody":"![](https://i.imgur.com/ETtwNWY.jpg \"Photo from wallpapersafari.com\")<p style=\"font-size: 12px; text-align: right\">_Photo from wallpapersafari.com_</p>\r\n\r\n\r\n\"NaN\" means \"not a number\". Instances that return NaN:\r\n- O/0\r\n- any arithmetic on <code>undefined</code>\r\n- operation on a NaN\r\n\r\nWhy NaN is difficult? because detecting it is very difficult: NaN does not equal to itself\r\n\r\nNaN is never equal to NaN\r\n```\r\nNaN == NaN\r\nfalse\r\n```\r\n\r\nLuckily we have a function to check if it is NaN. FUnction is called: isNaN\r\n```\r\nisNaN(0)\r\nfalse\r\n\r\nisNaN(NaN)\r\ntrue \r\n\r\nisNaN(0 + undefined)\r\ntrue\r\n```\r\n\r\nLast one is true because any arithmetic operation on undefined is Not a number\r\n\r\nBut ow about undefined itself? is it NaN it is not but isNaN says it is which is a mistake:\r\n\r\n``` \r\nisNaN(undefined)\r\ntrue\r\n``` \r\n\r\nTo fix this, new JS has a  <code>Number.isNaN</code>\r\n``` \r\n \r\nNumber.isNaN(NaN)\r\ntrue \r\n \r\nNumber.isNaN(0)\r\nfalse \r\n\r\nNumber.isNaN(undefined)\r\nfalse\r\n```","frontmatter":{"date":"2020-04-03","title":"NaN - Not a Number","category":"knowledge-base"},"fields":{"slug":"/NaN/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/ETtwNWY.jpg\" title=\"Photo from wallpapersafari.com\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from wallpapersafari.com</em></p></p>\n<p>\"NaN\" means \"not a number\". Instances that return NaN:</p>\n<ul>\n<li>O/0</li>\n<li>any arithmetic on <code>undefined</code></li>\n<li>operation on a NaN</li>\n</ul>\n<p>Why NaN is difficult? because detecting it is very difficult: NaN does not equal to itself</p>\n<p>NaN is never equal to NaN</p>\n<pre><code>NaN == NaN\nfalse\n</code></pre>\n<p>Luckily we have a function to check if it is NaN. FUnction is called: isNaN</p>\n<pre><code>isNaN(0)\nfalse\n\nisNaN(NaN)\ntrue \n\nisNaN(0 + undefined)\ntrue\n</code></pre>\n<p>Last one is true because any arithmetic operation on undefined is Not a number</p>\n<p>But ow about undefined itself? is it NaN it is not but isNaN says it is which is a mistake:</p>\n<pre><code>isNaN(undefined)\ntrue\n</code></pre>\n<p>To fix this, new JS has a  <code>Number.isNaN</code></p>\n<pre><code> \nNumber.isNaN(NaN)\ntrue \n \nNumber.isNaN(0)\nfalse \n\nNumber.isNaN(undefined)\nfalse\n</code></pre>"}},{"node":{"id":"337cd66f-2119-5061-93b3-a0057744e359","excerpt":"Photo from wallpapersafari.com SQL stands for Structured Query Language. SQL is used to communicate with a database.  SQL manages data well…","rawMarkdownBody":"![](https://i.imgur.com/ETtwNWY.jpg \"Photo from wallpapersafari.com\")<p style=\"font-size: 12px; text-align: right\">_Photo from wallpapersafari.com_</p>\r\n\r\n\r\n> SQL stands for Structured Query Language. SQL is used to communicate with a database. \r\n\r\n> SQL manages data well. In SQL, data is stored in tables made up of columns.\r\n\r\n> You can try running your sql statements online here: https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_in\r\n\r\n>Please note that in general: You can't execute a query using Javascript because Javascript can't connect directly with your database, but you can use AJAX. With this technology you'll be able to send a request to a PHP (or other server side language) page where resides the code that can execute a query to your db and get back the result of this query.\r\n\r\n> Creating a table called <code>users</code> which contains columns email and name. Both email and name will be a text field. exec in this case is just a custom JS function\r\n```SQL\r\nexec(`CREATE TABLE users (email TEXT, name TEXT)`)\r\n```\r\n\r\n> In the online tool of w3schools we write those statements without <code>exec(``)</code>\r\n```\r\nCREATE TABLE users (email TEXT, name TEXT)\r\n```\r\n\r\n>Now creating a row/data entry in our users table:\r\n```SQL\r\nexec(`INSERT INTO users (email, name) VALUES ('adda@example.com', 'Adda')`)\r\n```\r\n\r\n> Then we can access data from this table with following code:\r\n```SQL\r\nexec(`SELECT * FROM users`)\r\n```\r\n\r\n> `*` means all the columns!!\r\n\r\n> Select always returns an array of objects:\r\n```\r\n[{email: 'adda@example.com', name: 'Adda'}] \r\n```\r\n\r\n> Once again: Select returns an array of objects which we are selecting\r\n\r\n> Other SQL methods like create table, insert, delete, alter or begin return empty arrays and alter the table\r\n```SQL\r\nexec(`INSERT INTO users (email, name) VALUES ('adda@example.com', 'Adda')`)\r\n[]\r\n```\r\n\r\n> SQL keywords like INSERT and SELECT ignore case, so INSERT and InSeRt mean the same thing. Table and column names also ignore case, so users and USErs refer to the same table. However convention is: SQL keywords in UPPERCASE, like CREATE and INSERT and names of tables and columns will be lower_snake_case, like user_name\r\n\r\n>If we try to insert into or select form a column that doesn't exist, the database system will error.\r\n\r\n> NUmbers are stored as REAL (with decimal) or as INTEGER (without decimal)\r\n```\r\nexec(`CREATE TABLE rectangles (width REAL, height REAL`)\r\n```\r\n\r\n> There are many more times. Example for Postgress database: https://www.postgresql.org/docs/11/datatype.html\r\n\r\n> Instead of always selecting all columns with SELECT * we can define columns we only want to see\r\n```\r\nexec(`SELECT name FROM users`)\r\n```\r\n\r\n> We can select multiple columns by separating them with comma\r\n```\r\nexec(`SELECT age, name FROM users`)\r\n```\r\n\r\n>Now how to select only given rows? We use SELECT * WHERE\r\n> Here is the table:\r\n```\r\nexec(`CREATE TABLE users (email TEXT NOT NULL, name TEXT NOT NULL)`)\r\nexec(`INSERT INTO users (email, name) VALUES ('betty.j@example.com', 'Betty')`)\r\nexec(`INSERT INTO users (email, name) VALUES ('betty.k@example.com', 'Betty')`)\r\nexec(`INSERT INTO users (email, name) VALUES ('cindy@example.com', 'Cindy')`)\r\n\r\n```\r\n> Here we only select oen row:\r\n```\r\nexec(`SELECT * FROM users where name = 'Cindy'`)\r\n[{email: 'cindy@example.com', name: 'Cindy'}]\r\n```\r\n\r\n>When we use both a WHERE and a SELECT, they can reference different columns.\r\n```\r\nexec(`SELECT email FROM users WHERE name = 'Cindy'`)\r\n[{email: 'cindy@example.com'}] \r\n```\r\n> You can also use lless than < or bigger than > or not equal to != or another way how to write not equal to <>\r\n\r\n```\r\nexec(`SELECT name FROM cats WHERE age > 4 `)\r\n```\r\n\r\n> We can also have multiple conditions connected with logical AND or OR:\r\n``` \r\n\r\nexec(`\r\n  SELECT email FROM users\r\n  WHERE name = 'Betty' AND email = 'betty.j@example.com';\r\n`)\r\n```\r\n\r\n>WHERE clauses can call functions. For example, SQLite defines a length function that works on strings.\r\n```\r\nexec(`SELECT name FROM users WHERE length(name) > 4`)\r\n```\r\n\r\n> Here are examples of postgress database functions: https://www.postgresql.org/docs/12/functions.html\r\n\r\n> We can also define our own\r\n\r\n> Like most programming languages, SQL supports \"null\", which indicates the absence of a value. For example, a user's login_count might be null if they've never logged in.\r\n\r\n> When a column is allowed to be null, we say that it's \"nullable\". \r\n```\r\nexec(`CREATE TABLE users (name TEXT, login_count INTEGER)`)\r\nexec(`INSERT INTO users (name, login_count) VALUES(NULL, NULL)`)\r\nexec(`SELECT * FROM users`)\r\n[{login_count: null, name: null}]\r\n```\r\n\r\n> We'll explicitly mark columns as either NULL or NOT NULL.We can tell the database to disallow null values by adding NOT NULL to a column declaration. Trying to insert a null value into a NOT NULL column is an error.\r\n\r\n> it's best to make columns NOT NULL unless you have a very good reason not to. When you do make a column nullable, it's best to explicitly mark it as NULL by defining it as phone_number TEXT NULL. \r\n```\r\nexec(`CREATE TABLE cats (name TEST NOT NULL, age INTEGER NULL)`)\r\n```\r\n\r\n>Updating value for each row for a given column:\r\n```\r\n\r\nexec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Ms. Fluff', 3)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Keanu', 2)`)\r\nexec(`UPDATE cats SET name = 'Cat'`)\r\nexec(`SELECT name FROM cats`)\r\n[{name: 'Cat'}, {name: 'Cat'}]\r\n```\r\n\r\n> Changing value only for specific row:\r\n```\r\nexec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Ms. Fluff', 3)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Keanu', 2)`)\r\nexec(`UPDATE cats SET name = 'Mr. Reeves' WHERE name = 'Keanu'`)\r\nexec(`SELECT name FROM cats`)\r\n[{name: 'Ms. Fluff'}, {name: 'Mr. Reeves'}] \r\n```\r\n>If our UPDATE's WHERE clause matches multiple rows, then all of those rows will be updated. This makes UPDATE potentially dangerous. Be very careful that your UPDATE only affects the rows that you expected it to update!\r\n\r\n```\r\nexec(`CREATE TABLE rects (kind TEXT, width REAL, height REAL)`)\r\nexec(`INSERT INTO rects (kind, width, height) VALUES ('tall', 1.1, 2.7)`)\r\nexec(`INSERT INTO rects (kind, width, height) VALUES ('tall', 4.4, 4.3)`)\r\nexec(`INSERT INTO rects (kind, width, height) VALUES ('tall', 0.4, 8.9)`)\r\nexec(`INSERT INTO rects (kind, width, height) VALUES ('tall', 100, 0.1)`)\r\nexec(`UPDATE rects SET kind ='wide' WHERE width > height`)\r\n```\r\n\r\n> It is possible to insert multiple rows. When we insert many rows with separate INSERT statements, we're putting heavy load on the database. The database has to parse each insert statement, execute it safely by acquiring and releasing locks, and store its result on disk. All of those processes happen for every insert. There are many ways to mitigate those costs, but there's one way that reduces them all at once: multi-row inserts. \r\n\r\n>The syntax is straightforward: we write an insert statement as normal, but with multiple rows of data after VALUES. Each one becomes a separate row in the database. Now, the database only has to parse, lock, execute, and store data once. The amount of data stored is the same, but the overhead is much smaller.\r\n```\r\nexec(`CREATE TABLE cats (name TEXT NOT NULL)`)\r\nexec(`\r\n  INSERT INTO cats (name) VALUES \r\n    ('Ms. Fluff'), \r\n    ('Keanu')\r\n    \r\n`)\r\nexec(`SELECT * FROM cats`)\r\nGOAL:\t\r\n[{name: 'Ms. Fluff'}, {name: 'Keanu'}]\r\n```\r\n```\r\nexec(`CREATE TABLE users (name TEXT NOT NULL)`)\r\nexec(`\r\n  INSERT INTO users (name) VALUES\r\n    ('Amir'),\r\n    ('Betty'),\r\n    ('Cindy')\r\n`)\r\nexec(`SELECT * FROM users`)\r\n[{name: 'Amir'}, {name: 'Betty'}, {name: 'Cindy'}]\r\n```\r\n\r\n>Selecting expressions\r\nWe can SELECT many kinds of expressions: columns, like we've seen already; but also constants, mathematical expressions, and function calls. For example, if we SELECT 1, we get 1 back. If we SELECT 1 + 1, we get 2 back.\r\n\r\n```\r\nexec(`SELECT 1`)\r\n[{'1': 1}] \r\n```\r\n```\r\nexec(`SELECT 1 + 1`)\r\n[{'1 + 1': 2}] \r\n```\r\n\r\n>The output here is the same as ever: an array of objects. But now, there are no column names. Instead, the properties on the \"row\" object are the expressions that we queried.\r\n\r\n``` \r\nexec(`SELECT 2 * 3`)\r\n[{'2 * 3': 6}] \r\n\r\n``` \r\nWe can also query functions that return values dynamically. For example, the current date is written as DATE('now') in SQLite. This query asks: is the current date after DATE(0), which was January 1, 1970?\r\n\r\n``` \r\nexec(`SELECT DATE('now') > DATE(0)`)\r\n[{\"DATE('now') > DATE(0)\": 1}] \r\n\r\n``` \r\n\r\n>Select the number 17.\r\n``` \r\nexec(`SELECT 17`)\r\n[{'17': 17}]\r\n``` \r\n\r\n> we can enforce a column to have unique valueswith work UNIQUE.  Inserting a duplicate value into a UNIQUE column is an error.\r\n```\r\nexec(`CREATE TABLE users (email TEXT UNIQUE, name TEXT)`)\r\nexec(`INSERT INTO users (email, name) VALUES ('amir@example.com', 'Amir')`)\r\nexec(`SELECT email FROM users`)\r\n[{email: 'amir@example.com'}] \r\n```\r\n```\r\nexec(`CREATE TABLE users (email TEXT UNIQUE, name TEXT)`)\r\nexec(`INSERT INTO users (email, name) VALUES ('amir@example.com', 'Amir')`)\r\nexec(`INSERT INTO users (email, name) VALUES ('amir@example.com', 'Amir')`)\r\nexec(`SELECT * FROM users`)\r\nError: UNIQUE constraint failed: users.email\r\n\r\n```\r\n>What if we store email in 2 comuns? as username and domain? How can we mae sure that both usrname and domain need to be unique??\r\n```\r\nexec(`\r\n  CREATE TABLE emails (\r\n    username TEXT,\r\n    domain TEXT,\r\n    UNIQUE (username, domain)\r\n  )\r\n`)\r\n```\r\n>We can UPDATE our new emails table as much as we like. But if we try to update it in a way that results in two rows with the same username and the same domain, that's an error.\r\n\r\n> We can delete data with the DELETE statement. Like UPDATE, it will delete every row by default. You'll want to be very careful with DELETE!\r\n\r\n```\r\n\r\nexec(`CREATE TABLE users (email TEXT, name TEXT)`)\r\nexec(`INSERT INTO users (email, name) VALUES ('amir@example.com', 'Amir')`)\r\nexec(`INSERT INTO users (email, name) VALUES ('betty.j@example.com', 'Betty')`)\r\nexec(`DELETE FROM users`)\r\nexec(`SELECT name FROM users`)\r\n[]\r\n```\r\n>We can be more specific what we are deleting:\r\n```\r\nexec(`DELETE FROM users WHERE name = 'Betty' OR name = 'Amir'`)\r\n```\r\n\r\n\r\nDefaults\r\nNormally, we have to specify all of the columns when inserting a row. But that quickly becomes tedious because many real-world tables have dozens of columns. We can eliminate some of that tedium by defining default values for columns.\r\n\r\nFor example, if our users have a login_count, then 0 is a good default value. When a user is created, they've never logged in. Defining that default value during table creation saves us from specifying a login_count when INSERTing a user.\r\n\r\n```\r\nexec(`\r\n  CREATE TABLE users (\r\n    name TEXT,\r\n    login_count INTEGER NOT NULL DEFAULT 0\r\n  );\r\n`)\r\nexec(`INSERT INTO users (name) VALUES ('Amir')`)\r\nexec(`SELECT * FROM users`)\r\n[{login_count: 0, name: 'Amir'}] \r\n``` \r\n\r\nf we specify a value when inserting, it will override the default.\r\n```\r\nexec(`\r\n  CREATE TABLE users (\r\n    name TEXT,\r\n    login_count INTEGER NOT NULL DEFAULT 0\r\n  );\r\n`)\r\nexec(`INSERT INTO users (name, login_count) VALUES ('Amir', 1)`)\r\nexec(`SELECT * FROM users`)\r\n\r\n```\r\nColumn aliases\r\nWe can rename columns when needed using AS. The result object's properties will use our column aliases instead of the original column names. In this example, we rename the age column, but we leave the name alone.\r\n\r\n\r\n```\r\nexec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Keanu', 2)`)\r\nexec(`SELECT name, age AS oldness FROM cats`)\r\n[{name: 'Keanu', oldness: 2}]\r\n```\r\n\r\nColumn aliases become useful in complex queries that involve multiple tables. However, they're also useful for something much simpler: querying mathematical expressions and functions. Now we can clean up the results of those queries!\r\n\r\n```\r\nexec(`SELECT 1 + 1`)\r\n[{'1 + 1': 2}] \r\n```\r\n```\r\nexec(`SELECT 1 + 1 AS sum`)\r\n[{sum: 2}]\r\n```\r\n\r\n``` \r\nexec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Keanu', 2)`)\r\nexec(`SELECT name AS cat_name, age AS cat_age from cats`)\r\n\r\n[{cat_age: 2, cat_name: 'Keanu'}]\r\n```\r\n\r\n>In order to differentiate people with same naem we can use ids:\r\n```\r\nxec(`CREATE TABLE people (id INTEGER NOT NULL, name TEXT NOT NULL)`)\r\nexec(`INSERT INTO people (id, name) VALUES (1, 'Amir')`)\r\nexec(`INSERT INTO people (id, name) VALUES (2, 'Amir')`)\r\nexec(`SELECT * FROM people where ID = 1`)\r\n[{id: 1, name: 'Amir'}]\r\n```\r\n\r\n>But doing ids manually is tedious. It's much better to let the database choose IDs for us. In SQLite, we can do that by making the ID column a PRIMARY KEY.In databases, \"key\" means \"a column or set of columns that is always unique\". We've already seen keys in the form of uniqueness constraints. If we put a uniqueness constraint on one column, that makes it a key. If the constraint requires two columns together to be unique, then those two columns together are a key. Database systems themselves don't usually care about keys; they're more useful for humans as a shorthand for \"a set of columns that's always unique\".However, databases do care very much about primary keys. The primary key is a key that we've declared to be special: it's the main (primary) key for the table. In most real-world databases, the primary key is an integer column, often named id. When we tell the database that a column is the primary key, it does several things. First, the primary key column is automatically UNIQUE, so it can never have duplicate values. Second, in most databases, the primary key is also NOT NULL. This isn't true in SQLite, but let's ignore that for a moment. If we create a PRIMARY KEY column, then we won't be allowed to insert duplicates.\r\n\r\n```\r\n\r\nexec(`CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL)`)\r\nexec(`INSERT INTO people (id, name) VALUES (1, 'Amir')`)\r\nexec(`SELECT * FROM people`)\r\n[{id: 1, name: 'Amir'}]\r\n```\r\n> always make your primary keys NOT NULL!\r\n\r\n```\r\nexec(`CREATE TABLE people (name TEXT PRIMARY KEY NOT NULL)`)\r\n```\r\n>Most primary keys are auto-incrementing integer IDs. \"Auto-incrementing\" means that each new ID increases by 1 automatically. When we insert a record, we don't have to specify the ID. The first record inserted will get an ID of 1. After that, the database will always automatically choose the next unused integer. It's kind of like a default value, except it automatically changes with every new record.\r\n\r\n```\r\nexec(`CREATE TABLE people (id INTEGER PRIMARY KEY NOT NULL, name TEXT)`)\r\nexec(`INSERT INTO people (name) VALUES ('Amir')`)\r\nexec(`INSERT INTO people (name) VALUES ('Betty')`)\r\nexec(`SELECT * FROM people`)\r\n[{id: 1, name: 'Amir'}, {id: 2, name: 'Betty'}] \r\n``` \r\n\r\n>One last detail about primary keys. A table can have only one primary key. If we try to create two primary keys in the same table, the database will error.\r\n\r\n>Primary keys in a nutshell:\r\n\r\nEach table can only have one primary key.\r\nPrimary key values must be unique.\r\nPrimary key values can't be NULL (but SQLite will allow NULL in some situations for backwards compatibility).\r\nPrimary key columns can have any type, but most are automatically-incrementing integers starting at 1. In SQLite, an INTEGER PRIMARY KEY will automatically increment.\r\nPrimary keys combine a lot of complicated ideas, but using them is relatively simple. Except in rare situations, your tables should always have an auto-incrementing integer primary key. You never need to include it in your inserts; the database will do it for you. Just by typing INTEGER PRIMARY KEY, you get an easy-to-use, automatically-managed ID column.\r\n\r\n>\r\n>Dropping tables and columns\r\n>Sometimes an entire table is no longer needed. We could DELETE all data in it, but the table would still exist. Over time, we'd end up with many unused, empty tables in our database. It's better to completely destroy the table.\r\n\r\n>We remove tables by DROPing them. If we DROP a table, trying to access it in any way is an error because it no longer exists.\r\n\r\n```\r\nexec(`CREATE TABLE users (email TEXT, name TEXT)`)\r\nexec(`DROP TABLE users`)\r\nexec(`SELECT * FROM users`)\r\nError: no such table: users \r\n\r\n```\r\n>Drop the cats table.\r\n\r\n```\r\nexec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\r\nexec(`DROP TABLE cats`)\r\n\r\nexec(`\r\n  INSERT INTO cats (name, age)\r\n  VALUES ('Ms. Fluff', 3);\r\n`)\r\n\t\r\nError: no such table: cats\r\n```\r\n>What's the difference between deleting and dropping? Deleting is always about data: it removes rows. Dropping is always about database structure: it removes tables. In most database systems, we can also drop a single column from a table. Later in this course, we'll see examples of dropping other structures as well.\r\n\r\n\r\nSQL: Bind parameters\r\nSQL isn't very useful in isolation. In real systems, it will always be combined with a general-purpose language like JavaScript.\r\n\r\nThroughout this course, we've seen query results like [{name: 'Amir'}, {name: 'Betty'}]. Now we'll write JavaScript code to work with those query results.\r\n\r\nThe simplest case is: we INSERT some rows, then access parts of them.\r\n\r\n> \r\nexec(`CREATE TABLE users (name TEXT);`)\r\nexec(`INSERT INTO users (name) VALUES ('Amir');`)\r\nexec(`INSERT INTO users (name) VALUES ('Betty');`)\r\n[] \r\n> \r\nexec(`SELECT * FROM users`)\r\n[{name: 'Amir'}, {name: 'Betty'}] \r\n> \r\nconst users = exec(`SELECT * FROM users`)\r\nconst amir = users[0]\r\namir.name\r\n'Amir' \r\nThe most common type of query is \"find me the record with this ID\". We want to say SELECT * FROM users WHERE id = ?. But what goes in place of the \"?\"?\r\n\r\nThe answer is that ? is actually the correct thing to put there! A ? tells SQLite \"I (the programmer) will provide a parameter for you to insert here.\" We provide the parameter values as the second value to our exec function.\r\n\r\n> \r\nexec(`CREATE TABLE users (id INTEGER NOT NULL, name TEXT);`)\r\nexec(`INSERT INTO users (id, name) VALUES (1, 'Amir');`)\r\nexec(`INSERT INTO users (id, name) VALUES (2, 'Betty');`)\r\nexec(`INSERT INTO users (id, name) VALUES (3, 'Betty');`)\r\n[] \r\n> \r\nconst users = exec(`SELECT name FROM users WHERE id = ?`, [1])\r\nconst amir = users[0]\r\namir.name\r\n'Amir' \r\nWe can use more than one ? if needed. Each one is a different parameter. If we have two ? parameters in our query, we have to provide two values to fill those parameters.\r\n\r\n> \r\nexec(\r\n  \"SELECT * FROM users WHERE id = ? AND name = ?\",\r\n  [1, 'Amir']\r\n)\r\n[{id: 1, name: 'Amir'}] \r\n> \r\nexec(\r\n  \"SELECT * FROM users WHERE id = ? AND name = ?\",\r\n  [2, 'Amir']\r\n)\r\n[] \r\nHere's a code problem for you to complete:\r\n\r\nWrite a findUser function that finds a user by their ID, returning the result (an array of objects) that comes back from the database. Use a bind parameter (?) to provide the ID to the query. Remember that the ID needs to be passed in an array!\r\n\r\n> \r\nexec(`CREATE TABLE users (id INTEGER NOT NULL, name TEXT);`)\r\nexec(`INSERT INTO users (id, name) VALUES (1, 'Amir');`)\r\nexec(`INSERT INTO users (id, name) VALUES (2, 'Betty');`)\r\nexec(`INSERT INTO users (id, name) VALUES (3, 'Betty');`)\r\nfunction findUser(id) {\r\n  return exec(`SELECT * FROM users WHERE id= ?`, [id])\r\n}\r\n\r\n\r\n\r\n[findUser(1), findUser(2), findUser(100)]\r\nGOAL:\t\r\n[[{id: 1, name: 'Amir'}], [{id: 2, name: 'Betty'}], []]\r\nYOURS:\t\r\n[[{id: 1, name: 'Amir'}], [{id: 2, name: 'Betty'}], []] \r\nThat findUser function works, but it's annoying to use. By directly returning what it gets from the database, it always returns the user wrapped in an array. It also returns [] when the user isn't found. A better version would return just the user object, and null when the user doesn't exist.\r\n\r\nHere's a code problem for you to complete:\r\n\r\nWrite a findUser function that finds a user by their ID. Return the user object itself, not the full query result array. If no user is found, return JavaScript's null. (You can check for whether the query returned no results with if (queryResult.length === 0) { ... }.)\r\n\r\n> \r\nexec(`CREATE TABLE users (id INTEGER NOT NULL, name TEXT);`)\r\nexec(`INSERT INTO users (id, name) VALUES (1, 'Amir');`)\r\nexec(`INSERT INTO users (id, name) VALUES (2, 'Betty');`)\r\nexec(`INSERT INTO users (id, name) VALUES (3, 'Betty');`)\r\nfunction findUser(id) {\r\n  const queryResult = exec(`SELECT * FROM users WHERE id= ?`, [id])\r\n  if (queryResult.length === 0) { return null }\r\n  return queryResult[0]\r\n  \r\n}\r\n\r\n\r\n\r\n[findUser(1), findUser(2), findUser(100)]\r\nGOAL:\t\r\n[{id: 1, name: 'Amir'}, {id: 2, name: 'Betty'}, null]\r\nYOURS:\t\r\n[{id: 1, name: 'Amir'}, {id: 2, name: 'Betty'}, null] \r\nWhen we do exec(`SELECT ... ?`, [1, 2]), the 1 and 2 are called \"bind parameters\". The query contains some holes marked with ?, and the parameters get bound to those holes.\r\n\r\nWhat if we want to reference a bind parameter multiple times in the query? Instead of ?, we can reference ?1, ?2, etc. Parameter numbers start at 1, so ?1 refers to the bind parameter at index 0. Here's an example of ?1 in action:\r\n\r\nTo find all cats whose name matches their owner's name, we can compare them in a WHERE.\r\n\r\n> \r\nexec(`CREATE TABLE cats (name TEXT, owner_name TEXT)`)\r\nexec(`INSERT INTO cats (name, owner_name) VALUES ('Amir', 'Ms. Fluff')`)\r\nexec(`INSERT INTO cats (name, owner_name) VALUES ('Wilford', 'Wilford')`)\r\nexec(`SELECT name FROM cats WHERE name = owner_name`)\r\n[{name: 'Wilford'}] \r\nIf we only care about one particular matching cat and owner (like Wilford and Wilford), then we can also find them using a bind parameter. We'll pass 'Wilford' in as the bind parameter, then reference it twice with ?1.\r\n\r\n> \r\nexec(`CREATE TABLE cats (name TEXT, owner_name TEXT)`)\r\nexec(`INSERT INTO cats (name, owner_name) VALUES ('Amir', 'Ms. Fluff')`)\r\nexec(`INSERT INTO cats (name, owner_name) VALUES ('Wilford', 'Wilford')`)\r\nexec(`SELECT name FROM cats WHERE name = ?1 AND owner_name = ?1`, ['Wilford'])\r\n[{name: 'Wilford'}] \r\nThe syntax for these parameters varies by database. For example, PostgreSQL's bind parameters are referenced with $1, $2, etc.\r\n\r\nThe query execution function also varies between different databases. In this course, we execute queries with exec(query, bindParameters), which is a function that we (the course authors) defined while writing the course. In Node's PostgreSQL API, the equivalent function is called query. In Python's SQLite API, it's called execute.\r\n\r\nNo matter the syntax, all SQL databases support bind parameters in some form. They wouldn't be very useful without it!\r\n\r\nSQL: Comments\r\nIn SQL, comments begin with --. This is an unusual syntax for comments, although it is shared with some other programming languages, like Ada and Haskell. Anything from the -- until the end of the line gets ignored.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE cats (\r\n    name TEXT\r\n    -- owner_name TEXT\r\n  )\r\n`)\r\nexec(`INSERT INTO cats (name, owner_name) VALUES ('Wilford', 'Wilford')`)\r\nError: table cats has no column named owner_name \r\nSQL databases also support C-style comments /* like this */, which can span multiple lines.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE cats (\r\n    id INTEGER PRIMARY KEY\r\n    /*\r\n    name TEXT,\r\n    owner_name TEXT\r\n    */\r\n  )\r\n`)\r\nexec(`INSERT INTO cats (name, owner_name) VALUES ('Wilford', 'Wilford')`)\r\nError: table cats has no column named name \r\n\r\n\r\nSQL: Comparing with null\r\nNULL in SQL databases has some sharp edges. For example, mathematical operations on NULL give another NULL (which comes back to us as JavaScript's null).\r\n\r\n> \r\nexec(`SELECT NULL + 0 AS result`)\r\n[{result: null}] \r\n> \r\nexec(`SELECT NULL + 1 AS result`)\r\n[{result: null}] \r\n> \r\nexec(`SELECT NULL * 5 AS result`)\r\n[{result: null}] \r\nWhen we use = to compare anything with NULL, we get another NULL. That's even true when comparing NULL = NULL.\r\n\r\n> \r\nexec(`SELECT NULL = NULL AS result`)\r\n[{result: null}] \r\n> \r\nexec(`SELECT NULL = 1 AS result`)\r\n[{result: null}] \r\n> \r\nexec(`SELECT 'cat' = NULL AS result`)\r\n[{result: null}] \r\nFortunately, SQL also has IS NULL and IS NOT NULL comparisons that properly check for NULL values. (As usual, SQLite uses 1 and 0 to represent true and false.)\r\n\r\n> \r\nexec(`SELECT NULL IS NULL AS result`)\r\n[{result: 1}] \r\n> \r\nexec(`SELECT NULL IS NOT NULL AS result`)\r\n[{result: 0}] \r\n> \r\nexec(`SELECT 5 IS NULL AS result`)\r\n[{result: 0}] \r\n> \r\nexec(`SELECT 5 IS NOT NULL AS result`)\r\n[{result: 1}] \r\n> \r\nexec(`SELECT (NULL = NULL) IS NULL AS result`)\r\n[{result: 1}] \r\nUsually, you'll see IS NULL and IS NOT NULL as conditions in WHERE queries.\r\n\r\nFor example, suppose that we have a database where only some users have emails. We want to email all of our users. To do that, we need to select all users who have an email address.\r\n\r\n> \r\nexec(`CREATE TABLE users (name TEXT NOT NULL, email TEXT NULL)`)\r\nexec(`INSERT INTO users (name, email) VALUES ('Amir', 'amir@example.com')`)\r\nexec(`INSERT INTO users (name, email) VALUES ('Cindy', NULL)`)\r\nexec(`SELECT * FROM users WHERE email IS NOT NULL`)\r\n[{email: 'amir@example.com', name: 'Amir'}] \r\nHere's a code problem for you to complete:\r\n\r\nHere's a table where some users have a cat, and some don't. Select all users that have a cat.\r\n\r\n> \r\nexec(`CREATE TABLE users (name TEXT NOT NULL, cat_name TEXT NULL)`)\r\nexec(`INSERT INTO users (name, cat_name) VALUES ('Amir', 'Ms. Fluff')`)\r\nexec(`INSERT INTO users (name, cat_name) VALUES ('Betty', 'Keanu')`)\r\nexec(`INSERT INTO users (name, cat_name) VALUES ('Cindy', NULL)`)\r\nexec(`INSERT INTO users (name, cat_name) VALUES ('Dalili', NULL)`)\r\nexec(`INSERT INTO users (name, cat_name) VALUES ('Wilford', 'Wilford')`)\r\nexec(`SELECT * FROM users WHERE cat_name IS NOT NULL`)\r\n\r\nGOAL:\t\r\n[{cat_name: 'Ms. Fluff', name: 'Amir'}, {cat_name: 'Keanu', name: 'Betty'}, {cat_name: 'Wilford', name: 'Wilford'}]\r\nYOURS:\t\r\n[{cat_name: 'Ms. Fluff', name: 'Amir'}, {cat_name: 'Keanu', name: 'Betty'}, {cat_name: 'Wilford', name: 'Wilford'}] \r\nThe specific details of null handling vary from database to database. Fortunately, SQLite's NULL behavior was designed to be similar to other SQL databases, so the specifics above apply to most databases.\r\n\r\nSQL: Selecting expressions from tables\r\nWhen SELECTing from a table, we can SELECT expressions computed from the table's columns.\r\n\r\n> \r\nexec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Ms. Fluff', 3)`)\r\nexec(`SELECT age, age + 1 AS age_next_year FROM cats`)\r\n[{age: 3, age_next_year: 4}] \r\nIn JavaScript, we can concatenate strings like \"a\" + \"b\". In SQLite, we concatenate with \"a\" || \"b\". This syntax is unfortunate because || means \"or\" in most other languages. (In SQL, \"or\" is simply OR.)\r\n\r\n> \r\nexec(`CREATE TABLE cats (name TEXT)`)\r\nexec(`INSERT INTO cats (name) VALUES ('Ms. Fluff')`)\r\nexec(`SELECT name || ' the cat' AS name FROM cats`)\r\n[{name: 'Ms. Fluff the cat'}] \r\nThis doesn't change Ms. Fluff because SELECT never changes tables. That makes it safer to hack away at SELECTs when exploring the data.\r\n\r\nSQL dialects tend to have more built-in operators than other programming languages. For example, most programming languages have >, <, >=, and <=. SQL has those too.\r\n\r\nBut most SQL dialects also have a special BETWEEN operator. In SQL, instead of x >= y and x <= z, we can say x BETWEEN y AND z. (Remember that SQLite represents true as 1 and false as 0.)\r\n\r\n> \r\nexec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Ms. Fluff', 3)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Katy Purry', 5)`)\r\nexec(`SELECT name, age BETWEEN 2 AND 3 AS is_2_or_3 FROM cats`)\r\n[{is_2_or_3: 1, name: 'Ms. Fluff'}, {is_2_or_3: 0, name: 'Katy Purry'}] \r\nThe AND in x BETWEEN y AND z is an interesting example of SQL syntax. Normally, AND in SQL is a \"logical and\", like && in most programming languages. SELECT 1 AND 1 returns 1, SELECT 1 AND 0 returns 0, etc.\r\n\r\nSQL often reuses keywords, which is happening here. When we select x BETWEEN y AND z, the AND is part of BETWEEN. It has nothing to do with the logical AND of SELECT x AND y.\r\n\r\nWe can think of this by analogy to JavaScript's syntax. In JavaScript objects like {a: 1}, : separates the property from its value. In JavaScript switch statements, we say case x:, with the : marking the case clause. Both of these use the same : character, but it means something different in each context. A similar thing is happening with AND: in SQL, it can be either a \"logical and\" or it can be part of BETWEEN.\r\n\r\nSQL is making a trade-off here that doesn't exist in any popular language created since the 90s: it's using huge numbers of language keywords instead of providing functions.\r\n\r\nIn JavaScript, most functions are required or imported from third-party NPM modules. In Python or Java, which have larger standard libraries, a lot of functions come with the language. In SQL, many \"functions\" aren't functions at all; they're syntax of the language itself, like x BETWEEN y AND z. This is why JavaScript has 64 keywords, but PostgreSQL's SQL dialect has 760.\r\n\r\nHere's a code problem for you to complete:\r\n\r\nSelect two values from the cats table. First: the cats' names, with \" the cat\" appended to each. Second: is_3_years_old, a boolean (represented as 0 or 1 in SQLite). Remember that equality comparison in SQL is =, not == or ===.\r\n\r\n> \r\nexec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Ms. Fluff', 3)`)\r\nexec(`INSERT INTO cats (name, age) VALUES ('Keanu', 2)`)\r\nexec(`SELECT name || ' the cat' as name, age = 3 AS is_3_years_old FROM cats `)\r\n\r\nGOAL:\t\r\n[{is_3_years_old: 1, name: 'Ms. Fluff the cat'}, {is_3_years_old: 0, name: 'Keanu the cat'}]\r\nYOURS:\t\r\n[{is_3_years_old: 1, name: 'Ms. Fluff the cat'}, {is_3_years_old: 0, name: 'Keanu the cat'}] \r\n\r\nSQL: Multiple statements\r\nSQL allows us to separate statements with ;. When we do that, only the data from the final statement will be returned.\r\n\r\n> \r\nexec(`SELECT 1; SELECT 2 AS two`)\r\n[{two: 2}] \r\nHere's a code problem for you to complete:\r\n\r\nUse SQL's ; syntax to:\r\n\r\nCreate a users table with a text name.\r\nInsert a user named \"Amir\".\r\nSelect the user back out.\r\n> \r\nexec(`\r\n  CREATE TABLE users (name TEXT); INSERT INTO users (name) VALUES ('Amir'); SELECT * FROM users\r\n\r\n\r\n\r\n`)\r\nGOAL:\t\r\n[{name: 'Amir'}]\r\nYOURS:\t\r\n[{name: 'Amir'}] \r\nWhen using multiple statements, later statements will always see changes made by earlier statements. That's true for INSERT, UPDATE, DELETE, and any other kind of change.\r\n\r\nHere's a code problem for you to complete:\r\n\r\nUse ; to update Amir's name to \"Amir A\", then select all of the users.\r\n\r\n> \r\nexec(`CREATE TABLE users (name TEXT)`)\r\nexec(`INSERT INTO users (name) VALUES ('Amir')`)\r\nexec(`\r\n  UPDATE users SET name = 'Amir A';SELECT * FROM users\r\n\r\n`)\r\nGOAL:\t\r\n[{name: 'Amir A'}]\r\nYOURS:\t\r\n[{name: 'Amir A'}] \r\nUsually, ; will work like you'd expect: it's like you're calling exec multiple times. However, there's one notable exception.\r\n\r\nMany database APIs don't let us use ; with bind parameters. Our database API has that constraint: if we use both of these API features at the same time, it will cause an error. Unlike most errors in this course, this one comes from Execute Program itself, not from SQLite.\r\n\r\n> \r\n// Bind parameters can't be used with multiple statements.\r\n// (Many database libraries have this limitation.)\r\nexec(`SELECT 1; SELECT ? AS two`, [1])\r\nError: It looks like you tried to execute multiple statements with \";\" while also using bind parameters. Many database APIs, including Execute Program's, don't allow you to do both of those at the same time. Try executing each statement in a separate call to \"exec\" instead of using semicolons. (This error is specific to Execute Program; it doesn't come from SQLite.) \r\n> \r\nexec(`SELECT ?; SELECT ? AS two`, [1, 2])\r\nError: It looks like you tried to execute multiple statements with \";\" while also using bind parameters. Many database APIs, including Execute Program's, don't allow you to do both of those at the same time. Try executing each statement in a separate call to \"exec\" instead of using semicolons. (This error is specific to Execute Program; it doesn't come from SQLite.) \r\nFinish Lesson\r\n\r\n\r\nSQL: Null in unique constraints\r\nWhat happens if there are NULLs in a column with a UNIQUE constraint? At first glance, here's what you might expect: one NULL is allowed, but multiple NULLs will violate the UNIQUE constraint. But that would make some things very difficult in practice. Here's an example:\r\n\r\nSuppose that we have a users table with an email column, which has a UNIQUE constraint. Some users will register with a third-party authentication system like Google's, Twitter's, or GitHub's. Those users will have a NULL email address column.\r\n\r\nIf a UNIQUE constraint only allowed one NULL, then only one user would be allowed to register with those third-party authentication systems. After that, all further registration attempts would violate the UNIQUE constraint.\r\n\r\nFor exactly this reason, UNIQUE has special behavior for NULL. NULL values are effectively ignored by a UNIQUE constraint.\r\n\r\n(In the following examples, you can answer with error if a query will result in an error. Queries like INSERT and CREATE that return no rows will have a return value of [].)\r\n\r\nEach of these example uses this table. Each example is separate, and each starts with the table empty.\r\n\r\n> \r\nexec(`CREATE TABLE users (email TEXT NULL UNIQUE)`)\r\n[] \r\n> \r\nexec(`INSERT INTO users (email) VALUES ('amir@example.com')`)\r\nexec(`INSERT INTO users (email) VALUES ('betty@example.com')`)\r\n[] \r\n> \r\nexec(`INSERT INTO users (email) VALUES (NULL)`)\r\nexec(`SELECT * FROM users`)\r\n[{email: null}] \r\n> \r\nexec(`INSERT INTO users (email) VALUES ('amir@example.com')`)\r\nexec(`INSERT INTO users (email) VALUES ('amir@example.com')`)\r\nError: UNIQUE constraint failed: users.email \r\n> \r\nexec(`INSERT INTO users (email) VALUES (NULL)`)\r\nexec(`INSERT INTO users (email) VALUES (NULL)`)\r\nexec(`SELECT * FROM users`)\r\n[{email: null}, {email: null}] \r\nSometimes, language quirks are mistakes: a language designer might not anticipate problems with the language they've designed. This NULL/UNIQUE behavior is a quirk, but it's not a language design mistake. It's an intentional choice that allows us to build databases like the one above.\r\n\r\nSQL: Referencing other tables\r\nUntil this lesson, every table in the course has been an island: it hasn't related to other tables. In real systems, data relates to other data. To start with a simple example: people can own cats.\r\n\r\nIn a general-purpose programming language like JavaScript, we might represent that as: {name: 'Amir', cats: [{name: 'Ms. Fluff'}]}. The cats are stored as part of the person. Many SQL databases will allow us to store cats \"inside\" people in this way. However, if we use that style then we give up much of SQL's value.\r\n\r\nInstead, we'll create two separate tables. Each person will have an integer ID. Each cat will have an integer owner_id holding the owner's ID. (Remember that execing an INSERT, CREATE, etc. returns [].)\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);\r\n  CREATE TABLE cats (owner_id INTEGER NOT NULL, name TEXT NOT NULL);\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n`)\r\n[] \r\n> \r\nexec(`SELECT id FROM people WHERE name = 'Amir';`)\r\n[{id: 100}] \r\n> \r\nexec(`SELECT name FROM cats WHERE owner_id = 100;`)\r\n[{name: 'Ms. Fluff'}] \r\n> \r\nexec(`SELECT name FROM cats WHERE owner_id = 101;`)\r\n[] \r\nWe can combine the person and cat queries in a JavaScript function.\r\n\r\n> \r\nfunction findCatNames(personName) {\r\n  const allCatNames = []\r\n  const people = exec(`SELECT id FROM people WHERE name = ?`, [personName])\r\n  for (const person of people) {\r\n    const cats = exec(`SELECT name FROM cats WHERE owner_id = ?`, [person.id])\r\n    for (const cat of cats) {\r\n      allCatNames.push(cat.name)\r\n    }\r\n  }\r\n  return allCatNames\r\n}\r\nfindCatNames('Amir')\r\n['Ms. Fluff'] \r\nOne important note about tables that reference each other. We would never create separate tables named amir_cats, betty_cats, etc. Instead, we leave all of the cats in one table. When we need to find a certain person's cats, we let the ID columns guide us.\r\n\r\nThat's part of a more general rule of SQL databases: the application itself never changes the database's structure. The application doesn't create or drop tables or change columns. We set the database schema up in advance. Then the application creates, updates, and deletes rows.\r\n\r\nHaving only one cats table doesn't limit us. We can select a person's cats by owner_id, even when there are multiple people with different cats:\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);\r\n  CREATE TABLE cats (owner_id INTEGER NOT NULL, name TEXT NOT NULL);\r\n\r\n  -- Amir owns Ms. Fluff.\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n\r\n  -- Betty owns Keanu.\r\n  INSERT INTO people (id, name) VALUES (101, 'Betty');\r\n  INSERT INTO cats (owner_id, name) VALUES (101, 'Keanu');\r\n`)\r\n\r\n// The database holds both Amir's and Betty's cats.\r\n// Selecting by owner ID lets us distinguish between them.\r\nexec(`SELECT name FROM cats WHERE owner_id = ?`, [100])\r\n[{name: 'Ms. Fluff'}] \r\nHere's a code problem for you to complete:\r\n\r\nWrite a function to find the names of all toys owned by a certain cat.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE cats (id INTEGER PRIMARY KEY, name TEXT NOT NULL);\r\n  CREATE TABLE toys (cat_id INTEGER NOT NULL, name TEXT NOT NULL);\r\n  INSERT INTO cats (name) VALUES ('Ms. Fluff');\r\n  INSERT INTO cats (name) VALUES ('Keanu');\r\n  INSERT INTO toys (cat_id, name) VALUES (1, 'Birdo');\r\n  INSERT INTO toys (cat_id, name) VALUES (2, 'Mouser');\r\n`)\r\nfunction findToys(catName) {\r\n  const allToyNames = []\r\n  \r\n  const cats = exec(`SELECT id FROM cats WHERE name =?`, [catName])\r\n  for (let i=0; i<cats.length; i++){\r\n    const toys = exec(`SELECT name FROM toys WHERE cat_id =?`, [cats[i].id])\r\n    for (let j=0; j<toys.length;j++){\r\n    allToyNames.push(toys[j].name)\r\n  }\r\n  }\r\n  return allToyNames\r\n}\r\nfindToys('Ms. Fluff')\r\nGOAL:\t\r\n['Birdo']\r\nYOURS:\t\r\n['Birdo'] \r\nSQL: SQL injection\r\nAt first glance, SQL databases' bind parameters seem unnecessary. (Bind parameters are the ? in SELECT * FROM users WHERE id = ?.) Can't we just use string concatenation instead?\r\n\r\nImagine that we're writing an account registration form for a web app. The user enters their email address into our form. Then we insert the email address into our database.\r\n\r\nIn the next example, look at how we build the INSERT statement. We're concatenating strings to build the SQL rather than using bind parameters.\r\n\r\n> \r\nexec(`CREATE TABLE users (email TEXT UNIQUE)`)\r\n\r\nfunction register(email) {\r\n  exec(`INSERT INTO users (email) VALUES ('` + email + `')`)\r\n}\r\n\r\nregister('amir@example.com')\r\nexec(`SELECT * FROM users`)\r\n[{email: 'amir@example.com'}] \r\nThat code example will technically work... if all of our users are very nice people who don't know about SQL injection attacks!\r\n\r\nIn any real-world system, that code is very, very bad. It's the worst code in this course! It contains a security hole that will allow an attacker to execute any SQL that they want. They can pull data out of our database, or change it, or delete it. All they have to do is enter a carefully built string into the account registration form.\r\n\r\nLet's start by examining the way that we build the query: by combining strings with +. We'll forget about the database itself for a moment and just focus on the SQL.\r\n\r\nBe careful with the next few code examples; it's easy to make a mistake with the quotes. You may find it useful to copy and paste the strings together, emulating what JavaScript will do.\r\n\r\n> \r\nconst email = \"amir@example.com\"\r\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\r\n\"INSERT INTO users (email) VALUES ('amir@example.com')\" \r\n> \r\nconst email = \"' oh no '\"\r\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\r\n\"INSERT INTO users (email) VALUES ('' oh no '')\" \r\n> \r\nconst email = \"'); DROP TABLE users; --\"\r\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\r\n\"INSERT INTO users (email) VALUES (''); DROP TABLE users; --')\" \r\nWhat will happen if the user types that last email string into our registration form's email field? It won't result in a user with an email column of ''); DROP TABLE users; --. Instead, the combined string shown above will be executed as SQL... including the DROP TABLE after the semicolon. It will actually drop the entire users table in our production database!\r\n\r\nLet's see the SQL injection run for real, deleting the table. (Remember that you can type error if the code will error.)\r\n\r\n> \r\nexec(`CREATE TABLE users (email TEXT UNIQUE)`)\r\nexec(`INSERT INTO users (email) VALUES (''); DROP TABLE users; --')`)\r\nexec(`SELECT * FROM users`)\r\nError: no such table: users \r\nAnd here's a more complete version, using our original register function:\r\n\r\n> \r\nexec(`CREATE TABLE users (email TEXT UNIQUE)`)\r\n\r\nfunction register(email) {\r\n  exec(`INSERT INTO users (email) VALUES ('` + email + `')`)\r\n}\r\n\r\nregister(\"'); DROP TABLE users; --\")\r\n\r\nexec(`SELECT * FROM users`)\r\nError: no such table: users \r\nThe key to this attack is the quote (') that closes the string in our INSERT. After that point, the rest of the user's \"email address\" string is executed as SQL code.\r\n\r\nThis technique is one of the most common security exploits on the Internet. It's called a \"SQL injection attack\" because the attacker injects their own SQL code into our database query. That makes this the most important lesson in this SQL course!\r\n\r\nSQL injection is still a huge real-world problem \"that will never go away\". Some people keep lists of data leaks caused by SQL injection attacks. When this lesson was written, the four most recent entries in the list included: data stolen from the government of India, patient records from a medical company, and users' financial data.\r\n\r\nOne interesting question about the attack string: why is there a comment (--) at the end? Because otherwise there would be a dangling ') at the end of the combined SQL string, causing a syntax error in the SQL. The attacker adds the comment to prevent that syntax error, which would stop their attack code from running.\r\n\r\n(For the next two examples, remember that successful CREATEs and INSERTs return no rows: []. And you can answer \"error\" if the code will result in an error.)\r\n\r\nThis is valid SQL:\r\n\r\n> \r\nexec(`CREATE TABLE users (email TEXT UNIQUE)`)\r\nexec(`INSERT INTO users (email) VALUES (''); DROP TABLE users; --')`)\r\n[] \r\nBut this is not, because of the mismatched single quote (') at the end:\r\n\r\n> \r\nexec(`CREATE TABLE users (email TEXT UNIQUE)`)\r\nexec(`INSERT INTO users (email) VALUES (''); DROP TABLE users;')`)\r\nError: unrecognized token: \"')\" \r\nThis form of SQL injection has been made even more famous by an XKCD comic about it. Take a look at the code in that comic: it's exactly the kind of attack that we just saw! It closes off a string, uses a semicolon to start a new statement, drops a table, and has a comment to avoid a syntax error.\r\n\r\nHere's a code problem for you to complete:\r\n\r\nDrop the students table by executing a \"Bobby Tables\" SQL injection attack, as made famous by XKCD. (If you get stuck, try using a text editor to manually combine your attack string with the other strings in the register function. Make sure that that combined SQL string looks right.)\r\n\r\n> \r\nexec(`CREATE TABLE students (name TEXT)`)\r\n\r\nfunction register(name) {\r\n  exec(`INSERT INTO students (name) VALUES ('` + name + `')`)\r\n}\r\n\r\nregister(\r\n  \"Robert');DROP TABLE students; --\"\r\n\r\n)\r\n\r\nexec(`SELECT * FROM students`)\r\nGOAL:\t\r\nError: no such table: students\r\nYOURS:\t\r\nError: no such table: students \r\nWe've used DROP TABLE to show that an attacker can run SQL maliciously. However, deleting data isn't their only option. For example, they might UPDATE our database to become an administrator without us noticing.\r\n\r\nLike before, let's start by seeing how the attack SQL is constructed. (And like before, you may want to copy and paste the pieces of this string together.)\r\n\r\n> \r\nconst email = \"attacker@example.com'); UPDATE users SET admin = 1 WHERE email = 'attacker@example.com';--\"\r\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\r\n\"INSERT INTO users (email) VALUES ('attacker@example.com'); UPDATE users SET admin = 1 WHERE email = 'attacker@example.com';--')\" \r\nHere's a code problem for you to complete:\r\n\r\nUse a SQL injection attack to make attacker@example.com an administrator. (Note: our code here also inserts an innocent user. After the attack is executed, the innocent user shouldn't be an admin, so you'll need a WHERE on your UPDATE. The final SELECT here will return both users: attacker and innocent.)\r\n\r\n> \r\nexec(`CREATE TABLE users (email TEXT, admin INTEGER NOT NULL DEFAULT 0)`)\r\nexec(`INSERT INTO users (email) VALUES ('innocent@example.com')`)\r\n\r\nfunction register(email) {\r\n  exec(`INSERT INTO users (email) VALUES ('` + email + `')`)\r\n}\r\n\r\nregister(\r\n  \"attacker@example.com'); UPDATE users SET admin = 1 WHERE email = 'attacker@example.com'; UPDATE users SET admin = 0 WHERE email = 'innocent@example.com';--'\"\r\n\r\n)\r\n\r\nexec(`SELECT * FROM users`)\r\nGOAL:\t\r\n[{admin: 0, email: 'innocent@example.com'}, {admin: 1, email: 'attacker@example.com'}]\r\nYOURS:\t\r\n[{admin: 0, email: 'innocent@example.com'}, {admin: 1, email: 'attacker@example.com'}] \r\nGreat! Now please never do that to anyone else's web app!\r\n\r\nSQL injection attacks are subtle, but the practical takeaway from this lesson is simple. Never concatenate SQL strings, even if it seems safe. Write your SQL in a single, self-contained string. If you need to pass dynamic data to your INSERTs, SELECTs, etc., use bind parameters. Bind parameters are carefully implemented by the database authors to inject values securely.\r\n\r\nPlease don't let the direness of this warning scare you away from SQL! Avoiding SQL injection is relatively easy if you never concatenate SQL strings. And in practice, most projects use object-relational mappers or other higher-level libraries that generate SQL. When using those libraries, you'll still need to understand the concepts in this course. But the library will help you to avoid SQL injection vulnerabilities.\r\n\r\nA final note: this kind of attack can happen in other languages, too; it's not specific to SQL. If your application ever executes user input as code, then there's a potential security vulnerability. This is why most teams' linter configurations disallow the eval function. Always treat user input with care!\r\n\r\nFinish Lesson\r\nBrag…\r\n\r\n\r\nSQL: Foreign keys\r\nOne big selling point of SQL databases is correctness: the database lets us set up constraints that should never be violated. Then it makes sure that we don't accidentally violate them.\r\n\r\nWe can't insert into columns that don't exist.\r\nWe can't insert or update nulls into NOT NULL columns.\r\nWe can't insert or update duplicate values in UNIQUE columns.\r\nIn most databases, we can't insert the wrong data type into columns. (SQLite is an anomaly here; it allows us to make this mistake.)\r\nWe've seen tables referencing other tables, like a cat's owner_id referencing a person's id. What if we make a mistake with those IDs? What if we insert a cat whose owner_id doesn't reference any actual person? So far, we haven't seen a way to prevent that.\r\n\r\n(Remember that statements like CREATE and INSERT return [].)\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);\r\n  -- Remember that INTEGER PRIMARY KEYs start at 1.\r\n  INSERT INTO people (name) VALUES ('Amir');\r\n  \r\n  CREATE TABLE cats (owner_id INTEGER NOT NULL, name TEXT NOT NULL);\r\n  INSERT INTO cats (owner_id, name) VALUES (2170, 'Ms. Fluff');\r\n`)\r\n[] \r\n> \r\nexec(`SELECT id FROM people`)\r\n[{id: 1}] \r\n> \r\nexec(`SELECT owner_id FROM cats WHERE name = 'Ms. Fluff'`)\r\n[{owner_id: 2170}] \r\n> \r\nexec(`SELECT name FROM people WHERE id = 2170`)\r\n[] \r\nThis is a problem! The cat has an owner_id, but there's no person with that ID.\r\n\r\nSuppose that this database is being used by a cat groomer. Ms. Fluff is dropped off, gets her grooming, looks great... and the database says that her owner is person 2170, who doesn't exist. Who do we call to pick her up? The database is wrong; cats are supposed to have owners who actually exist!\r\n\r\nWe can prevent this mistake with a foreign key: a column whose value must equal a value in another table. In our case, we want the database to ensure that every cat's owner_id equals some person's id.\r\n\r\nNote the new REFERENCES syntax in the cats table below.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);\r\n  CREATE TABLE cats (\r\n    owner_id INTEGER REFERENCES people(id),\r\n    name TEXT NOT NULL\r\n  );\r\n`)\r\n[] \r\nThe database won't let us violate this foreign key in any way.\r\n\r\nWe can't insert a cat whose owner_id references a person ID that doesn't exist.\r\nWe can't change an existing cat's owner_id to one that doesn't match some person.\r\nIf some cats reference a person, then we can't change the person's ID. That would leave the cats referencing a person ID that doesn't exist.\r\nFor the same reason, we can't delete a person referenced by some cats.\r\n(All of the following examples use the two tables above. Each example is separate, and each starts with the tables empty. Remember that you can type error to indicate an error.)\r\n\r\n> \r\nexec(`\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n`)\r\n[] \r\n> \r\nexec(`INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu')`)\r\nError: FOREIGN KEY constraint failed \r\n> \r\nexec(`\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n  UPDATE people SET id = 101 WHERE name = 'Amir';\r\n`)\r\nError: FOREIGN KEY constraint failed \r\n> \r\nexec(`\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n  UPDATE cats SET owner_id = 101 WHERE name = 'Ms. Fluff';\r\n`)\r\nError: FOREIGN KEY constraint failed \r\n> \r\nexec(`\r\n  INSERT INTO people (id, name) VALUES (200, 'Betty');\r\n  INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu');\r\n  DELETE FROM people WHERE name = 'Betty';\r\n`)\r\nError: FOREIGN KEY constraint failed \r\n> \r\nexec(`\r\n  INSERT INTO people (id, name) VALUES (200, 'Betty');\r\n  INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu');\r\n  DELETE FROM cats WHERE name = 'Keanu';\r\n  DELETE FROM people WHERE name = 'Betty';\r\n`)\r\n[] \r\nAll of this safety comes from that one little REFERENCES in our table definition. This shows us the power of SQL's declarative constraints. We don't have to write separate code to say \"a person can't be deleted if they still have cats\", \"a cat can't be updated to have an owner ID who doesn't exist\", etc. That one REFERENCES clause prevents many kinds of mistakes.\r\n\r\nWe have a nice phrase that describes preventing all of those mistakes: referential integrity. Referential as in \"concerning references from one table to another\"; and integrity as in \"the references are guaranteed to be correct\".\r\n\r\nHere's a code problem for you to complete:\r\n\r\nCreate a cats table with a TEXT name and an owner_id INTEGER foreign key that references the id column of the people table.\r\n\r\n> \r\nexec(`CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);`)\r\nexec(`\r\n  CREATE TABLE cats (name TEXT, owner_id INTEGER REFERENCES people(id))\r\n\r\n\r\n\r\n\r\n`)\r\nexec(`INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu')`)\r\nGOAL:\t\r\nError: FOREIGN KEY constraint failed\r\nYOURS:\t\r\nError: FOREIGN KEY constraint failed \r\nWe're still allowed to UPDATE and DELETE rows in any way that satisfies the foreign key constraint. For example, we can update Keanu's owner_id to reference Amir instead of Betty. Then Betty can be deleted because no cats reference her any more.\r\n\r\n> \r\nexec(`\r\n  -- Ms. Fluff belongs to Amir (user 100)\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n\r\n  -- Keanu belongs to Betty (user 200)\r\n  INSERT INTO people (id, name) VALUES (200, 'Betty');\r\n  INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu');\r\n  \r\n  -- Keanu belongs to Amir instead of Betty\r\n  UPDATE cats SET owner_id = 100 WHERE name = 'Keanu';\r\n  \r\n  -- Delete Betty, who is no longer referenced by any cats\r\n  DELETE FROM people WHERE name = 'Betty';\r\n  SELECT name, owner_id FROM cats;\r\n`)\r\n[{name: 'Ms. Fluff', owner_id: 100}, {name: 'Keanu', owner_id: 100}] \r\nThe foreign keys were respected at every step of that change:\r\n\r\nInitially, both cats' owner_ids reference different people.\r\nWe update Keanu's owner_id to be 100, which is Amir's ID. Now both cats are owned by Amir.\r\nThen we delete Betty, which is OK because no cats reference her any more.\r\nSetting up these constraints takes effort. It's more work than throwing all of our data into a schemaless database with no foreign keys. However, we do this work because it saves us from other work that's more annoying, more difficult, and more error-prone.\r\n\r\nCarefully creating a schema now means that we're less likely to end up with invalid data in our production database. Our foreign key means that we'll never find \"orphaned\" cats whose owner_id references an owner who doesn't exist. If PostgreSQL ever allows us to orphan a cat, that's a bug in PostgreSQL!\r\n\r\nYou may also hear people talk about \"leaked\" records, by analog to memory leaks. That means the same thing as \"orphaned\": a row that's referencing another row that no longer exists, because we didn't add a foreign key constraint.\r\n\r\nFinally, a note about terminology. Why are these called foreign keys? A key is a column that uniquely identifies a row. We've seen several tables with a numeric key called id. But we could have other types of keys. For example, users tables often have an email column that's a key: no two users ever have the same email.\r\n\r\nA cat's owner_id references the person's id key. From the cat's perspective, owner_id is referencing something \"foreign\": the id column of the people table. That's why it's a \"foreign key\".\r\n\r\nQuiz: \"Two foreign keys\"\r\nLet's write some code. You can solve this problem using only what you've learned in this course so far. If you need a reminder, there's a cheat sheet for all of the lessons that you've finished at the bottom-right of the page.\r\n\r\nEach test below shows some code and its result. Your goal is to get each test's actual result to match the expected result.\r\n\r\nEdit the code below until all tests pass. If you get stuck, try getting each test to pass individually.\r\n\r\nCreate three tables:\r\n\r\nPeople have an id and a name.\r\nCats have an id, an owner_id, and a name.\r\nToys have a cat_id and a name.\r\nBoth IDs are integer primary keys.\r\n>\r\nexec(`\r\n  -- Deleting a person with cats fails.\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (id, owner_id, name) VALUES (1000, 100, 'Ms. Fluff');\r\n  INSERT INTO toys (cat_id, name) VALUES (1000, 'Birdo');\r\n  DELETE FROM people WHERE name = 'Amir';\r\n`)\r\nExpected: Error: FOREIGN KEY constraint failed OK!\r\n>\r\nexec(`\r\n  -- Deleting a cat with toys fails.\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (id, owner_id, name) VALUES (1000, 100, 'Ms. Fluff');\r\n  INSERT INTO toys (cat_id, name) VALUES (1000, 'Birdo');\r\n  DELETE FROM cats WHERE name = 'Ms. Fluff';\r\n`)\r\nExpected: Error: FOREIGN KEY constraint failed OK!\r\n>\r\nexec(`\r\n  -- Changing a toy's cat_id fails.\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (id, owner_id, name) VALUES (1000, 100, 'Ms. Fluff');\r\n  INSERT INTO toys (cat_id, name) VALUES (1000, 'Birdo');\r\n  UPDATE toys SET cat_id = 1001 WHERE name = 'Birdo';\r\n`)\r\nExpected: Error: FOREIGN KEY constraint failed OK!\r\n3 tests, 0 failures\r\nexec(`\r\nCREATE TABLE people (name TEXT, id INTEGER UNIQUE);\r\nCREATE TABLE cats (name TEXT, id INTEGER UNIQUE, owner_id REFERENCES people(id));\r\nCREATE TABLE toys (name TEXT, cat_id INTEGER REFERENCES cats(id));\r\n\r\n`)\r\n\r\n\r\n\r\nconst email = \"'); DROP TABLE users; --\"\r\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\r\n\"INSERT INTO users (email) VALUES (''); DROP TABLE users; --')\"  \r\n\r\nSQL: On conflict do nothing\r\nSuppose that we want to track whether the cats have been vaccinated. Vaccination only needs to happen once, so we don't need to track a vaccination count. If a cat exists in the vaccinations table, then they've been vaccinated.\r\n\r\n> \r\nexec(`CREATE TABLE vaccinations (cat_name TEXT UNIQUE NOT NULL)`)\r\nexec(`INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')`)\r\nexec(`SELECT * FROM vaccinations`)\r\n[{cat_name: 'Ms. Fluff'}] \r\nThe fact that Ms. Fluff is in the vaccinations table tells us that she's been vaccinated. But what if she's accidentally vaccinated a second time, and we try to insert her again? (Remember that the cat_name column has a UNIQUE constraint.)\r\n\r\n> \r\nexec(`CREATE TABLE vaccinations (cat_name TEXT UNIQUE NOT NULL)`)\r\nexec(`INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')`)\r\nexec(`INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')`)\r\nError: UNIQUE constraint failed: vaccinations.cat_name \r\nThis isn't what we want! She was already vaccinated, so vaccinating her again shouldn't change this table.\r\n\r\nWe could use JavaScript's catch to catch the error, but there's a better way. SQL allows us to specify what happens when there's a conflict (that is, when a constraint is violated).\r\n\r\nThe simplest thing that we can do is nothing at all: when there's a conflict, we ignore it. In SQL terms, we tell the database ON CONFLICT, the column that might conflict (cat_name), and what to do (DO NOTHING). The insert is aborted, so nothing in the database changes.\r\n\r\n> \r\nexec(`CREATE TABLE vaccinations (cat_name TEXT UNIQUE NOT NULL)`)\r\nexec(`INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')`)\r\nexec(`\r\n  INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')\r\n  ON CONFLICT (cat_name) DO NOTHING\r\n`)\r\nexec(`SELECT * FROM vaccinations`)\r\n[{cat_name: 'Ms. Fluff'}] \r\nON CONFLICT ... DO NOTHING is useful whenever you want to make sure that a certain row exists, but don't need to do anything if it already exists.\r\n\r\nImagine that we allow users to request deactivation of their accounts. To do that, they email support, and the support representative deactivates the account for them. We track the date that the account was deactivated.\r\n\r\nSometimes, a user will request account deactivation again because they forget that they're already deactivated. When that happens, we don't create another deactivation record, and we don't change the deactivation date. The support representative still tells our system to deactivate the account, but the system uses ON CONFLICT (...) DO NOTHING to ignore the request.\r\n\r\nHere's a code problem for you to complete:\r\n\r\nAmir requested account deactivation on 2025-10-03. We deactivated his account as requested. Then they requested deactivation again on 2025-10-22. We want that request to be ignored, and it shouldn't change the deactivation date. Finish the final INSERT here to use ON CONFLICT to ignore the deactivation request if the account is already deactivated.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  )\r\n`)\r\nexec(`\r\n  CREATE TABLE deactivations (\r\n    user_id UNIQUE REFERENCES users(id),\r\n    date TEXT NOT NULL\r\n  )\r\n`)\r\nexec(`INSERT INTO users (name) VALUES ('Amir')`)\r\nexec(`INSERT INTO deactivations (user_id, date) VALUES (1, '2025-10-03')`)\r\nexec(`\r\n  INSERT INTO deactivations (user_id, date) VALUES (1, '2025-10-22')\r\n  ON CONFLICT (user_id) DO NOTHING\r\n\r\n`)\r\nexec(`SELECT * FROM deactivations`)\r\nGOAL:\t\r\n[{date: '2025-10-03', user_id: 1}]\r\nYOURS:\t\r\n[{date: '2025-10-03', user_id: 1}] \r\n\r\nSQL: Constraint analysis\r\nWhat if a foreign key column is null? By default, that's allowed. A cat with a null owner_id means \"this cat has no owner\".\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);\r\n  CREATE TABLE cats (\r\n    owner_id INTEGER REFERENCES people(id),\r\n    name TEXT NOT NULL\r\n  );\r\n  INSERT INTO cats (owner_id, name) VALUES (null, 'Ms. Fluff');\r\n  SELECT * FROM cats;\r\n`)\r\n[{name: 'Ms. Fluff', owner_id: null}] \r\nThe database lets us do this because we might want it! For example, imagine that we're building a site where users can register with discount codes. Some users register with a discount code, but others don't. We want to track which users registered with which discount codes.\r\n\r\nThis sounds simple, but there are a few subtle decisions to be made. Let's do some analysis to come up with appropriate database constraints.\r\n\r\nOur database will have two tables, discounts (id, discount_code) and users (id, discount_id, name). We'll analyze the three most common types of constraints: foreign keys, nullability, and uniqueness.\r\n\r\nFirst: should users' discount_id be a foreign key to discounts? Yes! Otherwise users could reference discounts that don't exist, which doesn't make sense.\r\nSecond: should every user have a discount_id, or is it OK for some of them to be null? Some users will register without using a discount code. For those users, discount_id should be null. So discount_id should be nullable.\r\nThird: can two users reference the same discount? This is a more subtle decision.\r\nIn some systems, discount codes can be used many times; in others, they can only be used once. We'll decide that discount codes can only be used once. We can guarantee that by making users' discount_id unique. If no two users can have the same discount_id, then no discount code can be used twice.\r\n\r\nThat gives us three constraint decisions:\r\n\r\nUsers' discount_id is a foreign key to discounts.\r\nUsers' discount_id is nullable.\r\nUsers' discount_id is unique.\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL,\r\n    discount_id INTEGER REFERENCES discounts(id) NULL UNIQUE\r\n  );\r\n  CREATE TABLE discounts (id INTEGER PRIMARY KEY, discount_code TEXT NOT NULL);\r\n`)\r\n[] \r\nNow let's make sure that these tables work as intended. We'll run four different checks.\r\n\r\n(Each of these examples uses the tables above, but the tables always begin empty. If you think that a statement will cause an error, you can type error as its output. Remember that executing a successful INSERT returns [].)\r\n\r\nFirst, users can't reference discounts that don't exist.\r\n\r\n> \r\nexec(`\r\n  INSERT INTO users (name, discount_id) VALUES ('Amir', 1234)\r\n`)\r\nError: FOREIGN KEY constraint failed \r\nSecond, users can register with no discount at all (discount_id can be null).\r\n\r\n> \r\nexec(`\r\n  INSERT INTO users (name, discount_id) VALUES ('Amir', null)\r\n`)\r\n[] \r\nThird, users can reference discounts that do exist.\r\n\r\n> \r\nexec(`\r\n  INSERT INTO discounts (id, discount_code) VALUES (1, 'one-time-use-a1b2c3');\r\n  INSERT INTO users (name, discount_id) VALUES ('Amir', 1);\r\n`)\r\n[] \r\nFourth, two users can't reference the same discount. (Amir uses the discount, then shares it with Betty, who tries to use it.)\r\n\r\n> \r\nexec(`\r\n  INSERT INTO discounts (id, discount_code) VALUES (1, 'one-time-use-a1b2c3');\r\n  INSERT INTO users (name, discount_id)\r\n    VALUES\r\n      ('Amir', 1),\r\n      ('Betty', 1);\r\n`)\r\nError: UNIQUE constraint failed: users.discount_id \r\nAs you gain experience with SQL, you'll learn patterns about when certain constraints are appropriate. For example, users' email addresses are usually TEXT NOT NULL UNIQUE. An is_admin flag will usually be BOOLEAN NOT NULL DEFAULT FALSE. And so on.\r\n\r\nForeign keys are more tricky. For foreign keys, it's a good idea to always slow down and explicitly ask the questions that we asked above:\r\n\r\n\"Is it OK for a row to have no value for this foreign key?\"\r\n\"Is it OK for two rows to have the same value for this foreign key?\"\r\nHere's another example where we ask the same questions, but get very different answers. Users can post comments. Each comment has a user_id referencing the user who posted it. Now, the analysis questions:\r\n\r\nFirst: should user_id be a foreign key to users? Yes! We don't want the database to think that a comment was posted by someone who doesn't exist.\r\nSecond: should every comment have a user_id, or is it OK for some of them to have a null user_id? Every comment is posted by someone (unless the computer is haunted by ghosts). So comments' user_id should be NOT NULL.\r\nThird: can two comments reference the same user? Like before, this one is more subtle.\r\nIf only one comment can reference a given user, then trying to insert a second comment by the same user will error. A system with that constraint would only allow each user to post exactly one comment, ever. We want users to post multiple comments, so the comments' user_id foreign key should not be unique.\r\n\r\nAgain, we have three constraint decisions. But when compared to the user/discount example, we've made opposite decisions about nullability and uniqueness:\r\n\r\nComments' user_id is a foreign key to users (the same as user/discount).\r\nComments' user_id is not nullable (the opposite of user/discount).\r\nComments' user_id is not unique (the opposite of user/discount).\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE comments (\r\n    user_id REFERENCES users(id) NOT NULL,\r\n    comment_text TEXT NOT NULL\r\n  );\r\n`)\r\n[] \r\nNow let's check each of those constraints, like we did for the user/discount example. (Each of these examples uses the tables above, but the tables always begin empty.)\r\n\r\nFirst, comments can't reference users that don't exist.\r\n\r\n> \r\nexec(`\r\n  INSERT INTO comments (user_id, comment_text)\r\n    VALUES (1, 'Ms. Fluff needs a bath!');\r\n`)\r\nError: FOREIGN KEY constraint failed \r\nSecond, comments must reference a user (user_id can't be null).\r\n\r\n> \r\nexec(`\r\n  INSERT INTO comments (user_id, comment_text)\r\n    VALUES (null, 'Ms. Fluff needs a bath!');\r\n`)\r\nError: NOT NULL constraint failed: comments.user_id \r\nThird, comments can reference users that exist.\r\n\r\n> \r\nexec(`\r\n  INSERT INTO users (id, name) VALUES (1, 'Amir');\r\n  INSERT INTO comments (user_id, comment_text)\r\n    VALUES (1, 'Ms. Fluff needs a bath!');\r\n`)\r\n[] \r\nFourth, two comments can reference the same user.\r\n\r\n> \r\nexec(`\r\n  INSERT INTO users (id, name) VALUES (1, 'Amir');\r\n  INSERT INTO comments (user_id, comment_text)\r\n    VALUES\r\n      (1, 'Ms. Fluff needs a bath!'),\r\n      (1, 'Ms. Fluff strongly dislikes water.');\r\n`)\r\n[] \r\nOur user/discount example is what's often called a \"one-to-one\" relationship. Each user relates to zero or one discounts, and each discount relates to zero or one users. A user never has multiple discounts, and a discount is never used by multiple users.\r\n\r\nThe user/comment example is a \"one-to-many\" relationship. One user can have many comments, but a comment is only related to one user.\r\n\r\nShorthand terms like one-to-one and one-to-many are useful for talking to other developers, but the database doesn't know what they mean. The database only knows about constraints. Even if you use shorthand with other humans, you have to make decisions about the individual constraints in your tables:\r\n\r\nShould this column be a foreign key?\r\nCan this column be null?\r\nCan multiple rows have the same value for this column?\r\n\r\n\r\nQuiz: \"Discounts and users and comments\"\r\nLet's write some code. You can solve this problem using only what you've learned in this course so far. If you need a reminder, there's a cheat sheet for all of the lessons that you've finished at the bottom-right of the page.\r\n\r\nEach test below shows some code and its result. Your goal is to get each test's actual result to match the expected result.\r\n\r\nEdit the code below until all tests pass. If you get stuck, try getting each test to pass individually.\r\n\r\nCreate users, discounts, and comments tables. A user can have one discount (but may have no discount at all). Many comments can belong to the same user.\r\n\r\nWe've given you the basic table structure. However, the constraints are missing (foreign keys, nullability, and uniqueness). Insert the appropriate constraints, using the tests as a guide.\r\n\r\n>\r\n// Users can't reference discounts that don't exist.\r\nexec(`INSERT INTO users (name, discount_id) VALUES ('Amir', 1234)`)\r\nExpected: Error: FOREIGN KEY constraint failed OK!\r\n>\r\n// Users can have no discount.\r\nexec(`INSERT INTO users (name, discount_id) VALUES ('Amir', null)`)\r\nExpected: [] OK!\r\n>\r\n// Two users can't reference the same discount.\r\nexec(`INSERT INTO discounts (id, discount_code) VALUES (1, 'one-time-use-a1b2c3')`)\r\nexec(`INSERT INTO users (name, discount_id) VALUES ('Amir', 1)`)\r\nexec(`INSERT INTO users (name, discount_id) VALUES ('Betty', 1)`)\r\nExpected: Error: UNIQUE constraint failed: users.discount_id OK!\r\n>\r\n// Comments can't reference users that don't exist.\r\nexec(`INSERT INTO comments (user_id, comment_text) VALUES (1, 'Ms. Fluff needs a bath!')`)\r\nExpected: Error: FOREIGN KEY constraint failed OK!\r\n>\r\n// Comments can't have a null user reference.\r\nexec(`INSERT INTO comments (user_id, comment_text) VALUES (null, 'Ms. Fluff needs a bath!')`)\r\nExpected: Error: NOT NULL constraint failed: comments.user_id OK!\r\n>\r\n// Comments can reference a user.\r\nexec(`INSERT INTO users (id, name) VALUES (1, 'Amir')`)\r\nexec(`INSERT INTO comments (user_id, comment_text) VALUES (1, 'Ms. Fluff needs a bath!')`)\r\nExpected: [] OK!\r\n>\r\n// Comments can reference users which themselves reference discounts.\r\nexec(`INSERT INTO discounts (id, discount_code) VALUES (1, 'one-time-use-a1b2c3')`)\r\nexec(`INSERT INTO users (id, name, discount_id) VALUES (1, 'Amir', 1)`)\r\nexec(`INSERT INTO comments (user_id, comment_text) VALUES (1, 'Ms. Fluff strongly dislikes water.')`)\r\nExpected: [] OK!\r\n7 tests, 0 failures\r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    discount_id INTEGER UNIQUE REFERENCES discounts(id),\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE discounts (\r\n    id INTEGER PRIMARY KEY,\r\n    discount_code TEXT NULL\r\n  );\r\n  CREATE TABLE comments (\r\n    user_id INTEGER NOT NULL REFERENCES users(id),\r\n    comment_text TEXT NOT NULL\r\n  );\r\n`)\r\n\r\n\r\n\r\nSQL: Review\r\nIt's time to review! These examples are all taken from lessons that you've finished. Revisiting them makes sure that you haven't forgotten anything.\r\n\r\nType in what each expression will evaluate to. For example, for the prompt 1 + 1, you would type 2.\r\n\r\nIn this course, the exec function runs SQL code. It returns database rows as arrays of objects like [{name: 'Amir'}]. When you execute SQL statements that don't return data, like INSERT and UPDATE, exec returns []. You can type error if the code will result in an error.\r\n\r\n> \r\nexec(`CREATE TABLE vaccinations (cat_name TEXT UNIQUE NOT NULL)`)\r\nexec(`INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')`)\r\nexec(`\r\n  INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')\r\n  ON CONFLICT (cat_name) DO NOTHING\r\n`)\r\nexec(`SELECT * FROM vaccinations`)\r\n[{cat_name: 'Ms. Fluff'}] \r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE comments (\r\n    user_id REFERENCES users(id) NOT NULL,\r\n    comment_text TEXT NOT NULL\r\n  );\r\n`)\r\nexec(`\r\n  INSERT INTO comments (user_id, comment_text)\r\n    VALUES (null, 'Ms. Fluff needs a bath!');\r\n`)\r\nerror \r\n> \r\nconst email = \"'); DROP TABLE users; --\"\r\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\r\n\"INSERT INTO users (email) VALUES (''); DROP TABLE users; --')\" \r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE comments (\r\n    user_id REFERENCES users(id) NOT NULL,\r\n    comment_text TEXT NOT NULL\r\n  );\r\n`)\r\nexec(`\r\n  INSERT INTO users (id, name) VALUES (1, 'Amir');\r\n  INSERT INTO comments (user_id, comment_text)\r\n    VALUES\r\n      (1, 'Ms. Fluff needs a bath!'),\r\n      (1, 'Ms. Fluff strongly dislikes water.');\r\n`)\r\n[] \r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL,\r\n    discount_id INTEGER REFERENCES discounts(id) NULL UNIQUE\r\n  );\r\n  CREATE TABLE discounts (id INTEGER PRIMARY KEY, discount_code TEXT NOT NULL);\r\n`)\r\nexec(`\r\n  INSERT INTO users (name, discount_id) VALUES ('Amir', null)\r\n`)\r\n[] \r\nHere's a code problem for you to complete:\r\n\r\nAmir requested account deactivation on 2025-10-03. We deactivated his account as requested. Then they requested deactivation again on 2025-10-22. We want that request to be ignored, and it shouldn't change the deactivation date. Finish the final INSERT here to use ON CONFLICT to ignore the deactivation request if the account is already deactivated.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  )\r\n`)\r\nexec(`\r\n  CREATE TABLE deactivations (\r\n    user_id UNIQUE REFERENCES users(id),\r\n    date TEXT NOT NULL\r\n  )\r\n`)\r\nexec(`INSERT INTO users (name) VALUES ('Amir')`)\r\nexec(`INSERT INTO deactivations (user_id, date) VALUES (1, '2025-10-03')`)\r\nexec(`\r\n  INSERT INTO deactivations (user_id, date) VALUES (1, '2025-10-22')\r\n  ON CONFLICT (user_id) DO NOTHING\r\n\r\n`)\r\nexec(`SELECT * FROM deactivations`)\r\nGOAL:\t\r\n[{date: '2025-10-03', user_id: 1}]\r\nYOURS:\t\r\n[{date: '2025-10-03', user_id: 1}] \r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL,\r\n    discount_id INTEGER REFERENCES discounts(id) NULL UNIQUE\r\n  );\r\n  CREATE TABLE discounts (id INTEGER PRIMARY KEY, discount_code TEXT NOT NULL);\r\n`)\r\nexec(`\r\n  INSERT INTO discounts (id, discount_code) VALUES (1, 'one-time-use-a1b2c3');\r\n  INSERT INTO users (name, discount_id)\r\n    VALUES\r\n      ('Amir', 1),\r\n      ('Betty', 1);\r\n`)\r\nerror \r\n\r\nSQL: Simple joins\r\nForeign keys let us guarantee that rows in one table correctly reference rows in another table. With that guarantee in place, we can ask the database system to combine the tables' data for us.\r\n\r\nIn this lesson, our goal is to produce a list of every cat's name, along with their owner's name. We could write that code in JavaScript, using a nested loop that executes one cat query per person. But that would be inefficient. SQL can do it in one query!\r\n\r\nHere's our cats-and-owners database. (We'll use this database throughout this lesson, but it will always begin empty in each code example.)\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    first_name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE cats (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    owner_id INTEGER NOT NULL REFERENCES people(id),\r\n    name TEXT NOT NULL\r\n  );\r\n\r\n  -- Amir has a cat named Ms. Fluff.\r\n  INSERT INTO people (id, first_name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n\r\n  -- Betty has a cat named Keanu.\r\n  INSERT INTO people (id, first_name) VALUES (200, 'Betty');\r\n  INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu');\r\n`)\r\n[] \r\nWe can build our cats-and-owners list by JOINing the two tables together into one. First, we'll do the simplest possible join: people JOIN cats, giving us combinations of every person with every cat. (It will look strange, so we don't recommend dwelling on it; we'll improve it soon.)\r\n\r\n> \r\nexec(`SELECT * FROM people JOIN cats`)\r\n[{first_name: 'Amir', id: 1, name: 'Ms. Fluff', owner_id: 100}, {first_name: 'Amir', id: 2, name: 'Keanu', owner_id: 200}, {first_name: 'Betty', id: 1, name: 'Ms. Fluff', owner_id: 100}, {first_name: 'Betty', id: 2, name: 'Keanu', owner_id: 200}] \r\nThe join gave us every combination of a person and a cat, whether or not they're related via owner_id. There are 2 people and 2 cats, so the join gave us 4 rows (2 * 2):\r\n\r\nAmir and Ms. Fluff\r\nAmir and Keanu\r\nBetty and Ms. Fluff\r\nBetty and Keanu\r\nIf we had 100 people and 100 cats then this join would give us 10,000 rows: each of the 100 people would be independently combined with each of the 100 cats. You can think of it like this:\r\n\r\nFor each person in the people table:\r\nFor each cat in the cats table:\r\nReturn a row with the columns from that person and this cat.\r\nThe join has all of the columns from people (id and first_name) and all of the columns from cats (id, name, and owner_id). Both tables have an id column, which is awkward because we can't have two columns with the same name. The cats' ids are \"winning\" here, so we see them rather than the peoples' ids. We'll address the issue of conflicting column names in more detail later.\r\n\r\nTo make our join more useful, we can add an ON clause. ON is like WHERE, but it applies specifically to joins. We \"select where\", but we \"join on\". For our cats-and-owners list, we want all pairs of people and cats where people.id equals cats.owner_id:\r\n\r\n> \r\nexec(`SELECT * FROM people JOIN cats ON people.id = cats.owner_id`)\r\n[{first_name: 'Amir', id: 1, name: 'Ms. Fluff', owner_id: 100}, {first_name: 'Betty', id: 2, name: 'Keanu', owner_id: 200}] \r\nThis is much better! Our condition was people.id = cats.owner_id, so people and cats get matched up. For example, the cat with owner_id 100 gets joined with person 100: Amir gets matched with Ms. Fluff. Because our cats table has a FOREIGN KEY that associates cats.owner_id to people.id, we know our cats will always be matched with their correct owner!\r\n\r\nThere's a simple rule for thinking about what a join will do. It's always correct to think about basic JOINs as two nested loops with a filter, like this:\r\n\r\nFor each person in the people table:\r\nFor each cat in the cats table:\r\nIf the ON condition is true for this person and this cat:\r\nReturn a row with the columns from this person and this cat.\r\nHere's a code problem for you to complete:\r\n\r\nWrite a JOIN that joins people and cats on cats.owner_id = people.id. Make sure that you join people to cats, in that order.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    first_name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE cats (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    owner_id INTEGER NOT NULL REFERENCES people(id),\r\n    name TEXT NOT NULL\r\n  );\r\n\r\n  -- Amir owns Ms. Fluff\r\n  INSERT INTO people (id, first_name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n\r\n  -- Betty owns Keanu\r\n  INSERT INTO people (id, first_name) VALUES (200, 'Betty');\r\n  INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu');\r\n`)\r\nexec(`\r\n  SELECT * FROM people JOIN cats ON cats.owner_id = people.id\r\n\r\n`)\r\nGOAL:\t\r\n[{first_name: 'Amir', id: 1, name: 'Ms. Fluff', owner_id: 100}, {first_name: 'Betty', id: 2, name: 'Keanu', owner_id: 200}]\r\nYOURS:\t\r\n[{first_name: 'Amir', id: 1, name: 'Ms. Fluff', owner_id: 100}, {first_name: 'Betty', id: 2, name: 'Keanu', owner_id: 200}] \r\nWith our cats and owners matched, we can pick the columns that we want with AS, like we've done for more basic SELECTs. (For example, SELECT name AS person, age AS oldness FROM some_table.) In a JOIN, data is identified by the table it comes from, like people.first_name AS person.\r\n\r\nHere's a code problem for you to complete:\r\n\r\nWrite a JOIN that joins people and cats on cats.owner_id = people.id. Using AS, return data in the form of [{person: 'Amir', cat: 'Ms. Fluff'}]\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    first_name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE cats (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    owner_id INTEGER NOT NULL REFERENCES people(id),\r\n    name TEXT NOT NULL\r\n  );\r\n\r\n  INSERT INTO people (id, first_name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (id, owner_id, name) VALUES (1, 100, 'Ms. Fluff');\r\n  INSERT INTO people (id, first_name) VALUES (200, 'Betty');\r\n  INSERT INTO cats (id, owner_id, name) VALUES (2, 200, 'Keanu');\r\n`)\r\nexec(`\r\n  SELECT people.first_name AS person, cats.name AS cat FROM people JOIN cats ON cats.owner_id = people.id\r\n\r\n\r\n\r\n\r\n`)\r\nGOAL:\t\r\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\r\nYOURS:\t\r\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}] \r\nUsually, the order of tables in a join doesn't matter: cats JOIN people is the same as people JOIN cats. There are two cases where join order may matter, though, depending on your database system.\r\n\r\nThe first case is query optimization. In rare cases, your database engine may optimize a complex join badly, causing it to be slower than it could be. Reordering the join may help.\r\n\r\nThe second case is when there are duplicate column names. When the joined tables have duplicate column names, the last table in the JOIN wins. Here's an example from earlier in the lesson: we select from people JOIN cats with no AS to alias the column names.\r\n\r\n> \r\nexec(`SELECT * FROM people JOIN cats ON people.id = cats.owner_id`)\r\n[{first_name: 'Amir', id: 1, name: 'Ms. Fluff', owner_id: 100}, {first_name: 'Betty', id: 2, name: 'Keanu', owner_id: 200}] \r\nNotice that the id columns returned are the cats' IDs: 1 and 2. If we reverse the order and select cats JOIN people, the id column will be the people's IDs, 100 and 200.\r\n\r\n> \r\nexec(`SELECT * FROM cats JOIN people ON people.id = cats.owner_id`)\r\n[{first_name: 'Amir', id: 100, name: 'Ms. Fluff', owner_id: 100}, {first_name: 'Betty', id: 200, name: 'Keanu', owner_id: 200}] \r\nIt's common for tables to have the same column names, especially for id columns. This can get very confusing, so it's best to use AS to explicitly alias every joined column, rather than blindly selecting *. That will make your SQL code more clear to other programmers. We recommend writing those aliases on their own lines, indented inside the SELECT.\r\n\r\n> \r\nexec(`\r\n  SELECT\r\n    cats.id AS cat_id,\r\n    people.id AS person_id\r\n  FROM people JOIN cats ON people.id = cats.owner_id\r\n`)\r\n[{cat_id: 1, person_id: 100}, {cat_id: 2, person_id: 200}] \r\nWe've been treating JOIN as if it returns a table. The proper term is \"relation\", which means: \"it has rows and columns and supports operations like WHERE, AS, JOIN, etc.\"\r\n\r\n(If a join combines two relations into a new relation, does that mean that we can join on the result of a join? Yes! We'll see that in a later lesson.)\r\n\r\nRelations are the core concept in SQL databases. We've called them \"SQL databases\" so far, but \"relational databases\" is a more correct term. SQL is just the most popular relational query language.\r\n\r\nThere are many kind of relations. A table is a relation stored on the disk. A join gives us a relation that the database constructs on the fly based on our join condition.\r\n\r\nEven SELECT 1 gives us a relation: it has one row with one column named 1. That's why execing that statement gives us an array of objects, as if we were selecting from a table: [{'1': 1}]. We could join a table against SELECT 1 if we wanted to!\r\n\r\nWhen querying relations, we can use all of the query operations that we've already seen on tables: AS, WHERE, etc. In the example above, we already did that with AS.\r\n\r\nWhen we use WHERE with joins, it filters the rows, just like it does with a normal table. The WHERE can see columns from both of the joined tables.\r\n\r\n> \r\nexec(`\r\n  SELECT people.first_name AS person, cats.name AS cat\r\n  FROM people\r\n  JOIN cats\r\n    ON people.id = cats.owner_id\r\n  WHERE people.first_name = 'Amir'\r\n`)\r\n[{cat: 'Ms. Fluff', person: 'Amir'}] \r\n> \r\nexec(`\r\n  SELECT people.first_name AS person, cats.name AS cat\r\n  FROM people\r\n  JOIN cats\r\n    ON people.id = cats.owner_id\r\n  WHERE people.first_name = 'Betty'\r\n`)\r\n[{cat: 'Keanu', person: 'Betty'}] \r\nWhat if we join people and cats, but some people have no cats? They won't show up in the results because ON people.id = cats.owner_id is never true for a person with no cats.\r\n\r\nFor example: Betty's id is 200. If no cat's owner_id is 200, then no cat can be paired with Betty in our JOIN. Betty won't show up at all in the results. Amir and Ms. Fluff will still show up because they're still related.\r\n\r\n> \r\nexec(`\r\n  -- Delete Keanu, so Betty now has no cats.\r\n  DELETE FROM cats WHERE owner_id = 200;\r\n\r\n  SELECT people.first_name AS person, cats.name AS cat\r\n  FROM people\r\n  JOIN cats\r\n    ON people.id = cats.owner_id\r\n`)\r\n[{cat: 'Ms. Fluff', person: 'Amir'}] \r\nWhen a person has multiple cats, the JOIN will find them all.\r\n\r\nOne important note, though. Suppose that Betty owns two cats, Keanu and Kim. The query will NOT combine the cats' names into an array like [{person: 'Betty', cat: ['Keanu', 'Kim']}]. Instead, the join returns two separate rows:\r\n\r\n{person: 'Betty', cat: 'Keanu'}\r\n{person: 'Betty', cat: 'Kim'}\r\n> \r\nexec(`\r\n  -- Betty also has a cat named Kim\r\n  INSERT INTO cats (owner_id, name) VALUES (200, 'Kim');\r\n\r\n  SELECT\r\n    people.first_name AS person,\r\n    cats.name AS cat\r\n  FROM people\r\n  JOIN cats\r\n    ON people.id = cats.owner_id\r\n  WHERE people.first_name = 'Betty'\r\n`)\r\n[{cat: 'Keanu', person: 'Betty'}, {cat: 'Kim', person: 'Betty'}] \r\nHere's a code problem for you to complete:\r\n\r\nUse a join to find cats and their toys. The join should return two columns aliased with AS: cat (the cat's name) and toy (the toy's name).\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE cats (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE toys (\r\n    cat_id INTEGER REFERENCES cats(id) NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n\r\n  INSERT INTO cats (id, name) VALUES (1, 'Ms. Fluff');\r\n  INSERT INTO cats (id, name) VALUES (2, 'Keanu');\r\n  INSERT INTO toys (cat_id, name) VALUES (1, 'Birdo');\r\n  INSERT INTO toys (cat_id, name) VALUES (2, 'Mouser');\r\n  INSERT INTO toys (cat_id, name) VALUES (2, 'Shy Guy');\r\n`)\r\nexec(`\r\n  SELECT cats.name AS cat, toys.name AS toy FROM cats JOIN toys ON cats.id = toys.cat_id\r\n\r\n\r\n\r\n\r\n\r\n\r\n`)\r\nGOAL:\t\r\n[{cat: 'Ms. Fluff', toy: 'Birdo'}, {cat: 'Keanu', toy: 'Mouser'}, {cat: 'Keanu', toy: 'Shy Guy'}]\r\nYOURS:\t\r\n[{cat: 'Ms. Fluff', toy: 'Birdo'}, {cat: 'Keanu', toy: 'Mouser'}, {cat: 'Keanu', toy: 'Shy Guy'}] \r\nYou'll sometimes see the \"simple\" joins from this lesson called \"inner joins\", which is the full technical term for them. We can even write cats INNER JOIN toys if we like. However, that does exactly the same thing, so it's not necessary.\r\n\r\nThe existence of \"inner\" joins implies that there are also \"outer\" joins, and it's true! They're much less common, so we won't look at them in detail. We will see one type of outer join in a later lesson, though.\r\n\r\nSQL: On conflict update\r\nImagine that we want to track how many times someone has visited our website. If a person has never visited, no row exists for them. When a person visits, a row is created or updated to reflect how many times they've visited.\r\n\r\nThe SQL features that we've learned so far aren't sufficient to directly express this kind of \"create-or-update\" logic. We'll have to do it in JavaScript instead. First, we query the table to see whether any visits row exists for this person's email address. If a row exists then we update it. Otherwise, we create a new row.\r\n\r\nIn this example, our first call to the visit() will create the visits row. Then the second call will notice that existing row and update it.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE visits (\r\n    id INTEGER PRIMARY KEY,\r\n    -- email is unique because we only want one row per person\r\n    email TEXT UNIQUE NOT NULL,\r\n    count INTEGER NOT NULL\r\n  )\r\n`)\r\n\r\nfunction visit(email) {\r\n  const visits = exec(\r\n    \"SELECT * FROM visits WHERE email = ?\",\r\n    [email]\r\n  )\r\n\r\n  if (visits.length === 0) {\r\n    exec(\r\n      \"INSERT INTO visits (email, count) VALUES (?, ?)\",\r\n      [email, 1]\r\n    )\r\n  } else {\r\n    const visit = visits[0]\r\n    exec(\r\n      \"UPDATE visits SET count = ? WHERE id = ?\",\r\n      [visit.count + 1, visit.id]\r\n    )\r\n  }\r\n}\r\n\r\nvisit('amir@example.com')\r\nvisit('amir@example.com')\r\nexec(`SELECT email, count FROM visits`)\r\n[{count: 2, email: 'amir@example.com'}] \r\nThat worked, but there's a subtle problem that will bite us in practice. We need to make two observations to see it:\r\n\r\nFirst: imagine that a user hits the refresh button while a page is loading. That causes two requests to our servers with very little time between them. If our luck is bad, the two requests will end up running at the same time on two different physical servers.\r\n\r\nSecond: our SELECT and INSERT queries are executed separately, so there's always a small delay between them. It's possible for server 2 to execute its SELECT after server 1's SELECT, but before server 1's INSERT.\r\n\r\nHere's a step-by-step view of the problem:\r\n\r\nServer 1 does its SELECT and sees nothing.\r\nServer 2 does its SELECT and sees nothing.\r\nServer 1 does its INSERT.\r\nServer 2 does its INSERT. But there's already a record for this email address, so this insert violates the UNIQUE constraint on email. An exception is thrown!\r\nThese bugs are called \"race conditions\": the two servers are \"racing\" to complete their write, and the slower server \"loses\" the race. This may seem like a nitpick: how likely is it that this will actually happen?\r\n\r\nIt's relatively unlikely for any given request. However, unlikely problems become likely at scale. If our site gets 1,000,000 requests per month, then one-in-a-million situations will happen once per month. This happens in practice: recently, two Execute Program users saw error pages caused by a UNIQUE constraint violation, which in turn was caused by exactly this kind of race condition!\r\n\r\nFortunately, SQL gives us a way to shorten this code while simultaneously fixing the bug. There's already a UNIQUE constraint on visits' email column, because we only want to maintain one row per visitor. If we try to insert two rows for the same person, it will be an error. This is the same constraint violation error that showed up in our race condition bug.\r\n\r\n(When you think that code in this course will cause an error, you can type error as its output.)\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE visits (\r\n    id INTEGER PRIMARY KEY,\r\n    -- email is unique because we only want one row per person\r\n    email TEXT UNIQUE NOT NULL,\r\n    count INTEGER NOT NULL\r\n  )\r\n`)\r\nexec(`INSERT INTO visits (email, count) VALUES ('amir@example.com', 1)`)\r\nexec(`INSERT INTO visits (email, count) VALUES ('amir@example.com', 1)`)\r\nError: UNIQUE constraint failed: visits.email \r\nThat error is good: it shows that the UNIQUE constraint is working! We can use this error to our advantage with SQL's ON CONFLICT clause.\r\n\r\nWe've already seen ON CONFLICT (column_name) DO NOTHING, which would leave our record unchanged. But there's also ON CONFLICT (column_name) DO UPDATE [...]. We'll tell the database \"if the insert conflicts with an existing record's email, increment that row's count instead of erroring\".\r\n\r\nHere's an isolated example of that. Look closely at the ON CONFLICT (email) DO UPDATE SET count = count + 1. It means:\r\n\r\nIf our insert violates the email column's uniqueness constraint,\r\nUpdate that existing row by incrementing its count by 1.\r\n> \r\nexec(`\r\n  CREATE TABLE visits (\r\n    id INTEGER PRIMARY KEY,\r\n    -- email is unique because we only want one row per person\r\n    email TEXT UNIQUE NOT NULL,\r\n    count INTEGER NOT NULL\r\n  )\r\n`)\r\nexec(`\r\n  INSERT INTO visits (email, count) VALUES ('amir@example.com', 1)\r\n`)\r\nexec(`\r\n  INSERT INTO visits (email, count) VALUES ('amir@example.com', 1)\r\n  ON CONFLICT (email) DO UPDATE SET count = count + 1\r\n`)\r\nexec(`SELECT email, count FROM visits`)\r\n[{count: 2, email: 'amir@example.com'}] \r\nNow we can write a better version of our visit function. Instead of retrieving the row and using if to decide what to do, we'll use an ON CONFLICT. That way the database already knows what to do if the row exists!\r\n\r\nHere's a code problem for you to complete:\r\n\r\nWrite a visit function that:\r\n\r\nINSERTs a row for the given email when one doesn't exist.\r\nUPDATEs the row if the given email already exists.\r\nUses an ON CONFLICT (...) DO UPDATE ... to do both of the above at once.\r\n> \r\nexec(`\r\n  CREATE TABLE visits (\r\n    id INTEGER PRIMARY KEY,\r\n    -- email is unique because we only want one row per person\r\n    email TEXT UNIQUE NOT NULL,\r\n    count INTEGER NOT NULL\r\n  )\r\n`)\r\n\r\nfunction visit(email) {\r\n  exec(\r\n    `\r\n      INSERT INTO visits (email, count) VALUES (?, 1)\r\n      ON CONFLICT (email) DO UPDATE SET count = count + 1\r\n\r\n    `,\r\n    [email]\r\n  )\r\n}\r\nvisit('amir@example.com')\r\nvisit('amir@example.com')\r\nexec(`SELECT email, count FROM visits`)\r\nGOAL:\t\r\n[{count: 2, email: 'amir@example.com'}]\r\nYOURS:\t\r\n[{count: 2, email: 'amir@example.com'}] \r\nThe new version of visit fixes the race condition bug while being simpler than the original. There's no conditional in the JavaScript, and we've replaced a trio of SELECT/INSERT/UPDATE statements with a single INSERT ... ON CONFLICT statement.\r\n\r\nThe new version is also more efficient. Our original version had to retrieve the visits count from the database, then make a decision, then go back to the database again to create or update the visits row. The new version is a single statement that hits the database only once.\r\n\r\nSQL: Join performance\r\nIn a previous lesson, we used JOIN to list all pairs of people and their cats. We could have done that by looping in JavaScript, querying to find each person's cats. In this lesson, we'll see why we chose to write a JOIN instead of using JavaScript.\r\n\r\n(In this lesson, our database will always be set up with a people table and a cats table. The cats table has an owner_id, which is a foreign key to a person. Amir has a cat named Ms. Fluff, and Betty has a cat named Keanu. You'll see this in the setup for each example, but it's always the same, so you can skip reading it.)\r\n\r\nFirst, let's get every person-and-cat pair using JavaScript.\r\n\r\nHere's a code problem for you to complete:\r\n\r\nFinish the function peopleAndCats() so that it creates a list of each pair of cat and person. For every cat, call results.push({person: person.name, cat: cat.name}) to build up a list of results.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE cats (\r\n    owner_id INTEGER REFERENCES people(id) NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n  INSERT INTO people (id, name) VALUES (200, 'Betty');\r\n  INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu');\r\n`)\r\n\r\nfunction peopleAndCats() {\r\n  const results = []\r\n  const people = exec(`SELECT * FROM people`)\r\n  for (const person of people) {\r\n    const catsOwnedByPerson = exec(`\r\n      SELECT * FROM cats WHERE cats.owner_id = ?\r\n    `, [person.id])\r\n    for (const cat of catsOwnedByPerson) {\r\n       results.push({person: person.name, cat: cat.name})}\r\n\r\n\r\n  }\r\n  return results\r\n}\r\npeopleAndCats()\r\nGOAL:\t\r\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\r\nYOURS:\t\r\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}] \r\nThis is correct, in the sense that it will return the right results. But it has a big problem: its performance is terrible!\r\n\r\nWhat happens if we have 10,000 people? Our outer loop for (const person of people) will run 10,000 times! We'll do a total of 10,001 queries: one query to find all of the people, then a separate cat query for each of the 10,000 people.\r\n\r\nThis is a very common problem when querying any kind of database, SQL or otherwise. It's called an \"N+1 problem\": we do 1 person query, then N (10,000) cat queries. That's too many queries; we can't afford to put that much load on the database for a single pageview on our site.\r\n\r\nWe'll fix this in stages. First, let's reduce the number of queries. We'll get all of the people, then get all of the cats. Then we'll write a nested loop:\r\n\r\nFor each person:\r\nFor each cat:\r\nIf this person is this cat's owner:\r\nAdd the cat to the results.\r\nHere's a code problem for you to complete:\r\n\r\nAdd an entry to the results array for each person and cat where cat.owner_id equals person.id. (You can use results.push({person: person.name, cat: cat.name}) to add an entry to the results.) You won't need to add any more database queries.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE cats (\r\n    owner_id INTEGER REFERENCES people(id) NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n  \r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n  INSERT INTO people (id, name) VALUES (200, 'Betty');\r\n  INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu');\r\n`)\r\n\r\nfunction peopleAndCats() {\r\n  const results = []\r\n  const people = exec(`SELECT * FROM people`)\r\n  const cats = exec(`SELECT * FROM cats`)\r\n  for (const person of people) {\r\n    for (const cat of cats) {\r\n      if (cat.owner_id === person.id){\r\n        results.push({person: person.name, cat: cat.name})}\r\n\r\n\r\n    }\r\n  }\r\n  return results\r\n}\r\npeopleAndCats()\r\nGOAL:\t\r\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\r\nYOURS:\t\r\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}] \r\nWe reduced the number of queries to 2!\r\n\r\nBut this still has a performance problem. What if we have 10,000 people and 10,000 cats, but we only want to retrieve Amir and his cat Ms. Fluff? We could do it by calling our peopleAndCats function, then filtering its results. But we'll end up retrieving a total of 20,000 rows from the database even though we only need 2.\r\n\r\nAlso, even though we've reduced the number of queries, we've made our JavaScript very slow. The inner loop that looks at each cat runs 10,000 times for every iteration of the outer loop. With 10,000 people and 10,000 cats, the comparison of owner_id to person.id will run a total of 100,000,000 times (10,000 * 10,000). All of that just to find out that Amir owns Ms. Fluff. This method does not work in real systems.\r\n\r\nHere's where relational databases show their usefulness. We can use a JOIN to get the same result.\r\n\r\nHere's a code problem for you to complete:\r\n\r\nWrite a SELECT ... FROM ... JOIN ... ON ... query to get a list of all cats and people. Remember to select people.name AS person, cats.name AS cat to get the right column names.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE cats (\r\n    owner_id INTEGER REFERENCES people(id) NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n  INSERT INTO people (id, name) VALUES (200, 'Betty');\r\n  INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu');\r\n`)\r\nexec(`\r\n  SELECT \r\n    cats.name AS cat, people.name AS person FROM people JOIN cats ON cats.owner_id = people.id\r\n\r\n\r\n\r\n\r\n\r\n`)\r\nGOAL:\t\r\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\r\nYOURS:\t\r\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}] \r\nWe got the same result in a single database query! This fixes the two performance problems we've talked about so far: it requires only one query, and it doesn't have any nested loops.\r\n\r\nWhat's really going on in the JOIN, though? So far, we've been thinking about JOINs as nested loops, similar to the ones that we wrote in JavaScript above. Aren't we just asking the database to do 100,000,000 (10,000 * 10,000) iterations, which will be slow?\r\n\r\nFortunately, no! Nested loops are a perfect mental model for how JOIN works, but they're only a mental model. In reality, the database will optimize the query, rebuilding it to be more efficient while still giving the same results.\r\n\r\nHere's a concrete example. (Your answer here should be identical to the one above, with an extra WHERE added.)\r\n\r\nHere's a code problem for you to complete:\r\n\r\nWrite a JOIN query to find all cats that are owned by a person with a name of \"Amir\".\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE cats (\r\n    owner_id INTEGER REFERENCES people(id) NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n\r\n  INSERT INTO people (id, name) VALUES (100, 'Amir');\r\n  INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');\r\n  INSERT INTO people (id, name) VALUES (200, 'Betty');\r\n  INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu');\r\n`)\r\nexec(`\r\n  SELECT people.name AS person, cats.name AS cat FROM people JOIN cats ON cats.owner_id = people.id WHERE people.name = 'Amir'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n`)\r\nGOAL:\t\r\n[{cat: 'Ms. Fluff', person: 'Amir'}]\r\nYOURS:\t\r\n[{cat: 'Ms. Fluff', person: 'Amir'}] \r\nIn the example above, WHERE people.name = ... tells the database that only one person matters. Then ON people.id = cats.owner_id tells it that it only needs to consider cats owned by that person. By understanding both of those limitations, the database can execute the query more intelligently. It will do something similar to exec(`SELECT * FROM cats WHERE owner_id = ?`, [amir.id]), selecting only the cats that are relevant.\r\n\r\nThis is impressive, but it's still a simple example. The bigger the query gets, the harder it is for a human to optimize manually. But the database has no such limitation; it will happily optimize any query that we come up with.\r\n\r\nImagine that we we're joining across 8 different tables instead of just 2. (That's not extremely common, but it does happen.)\r\n\r\nEach table has 10,000 records. With 8 nested loops, we'd require 10,000,000,000,000,000,000,000,000,000,0000 iterations (10,000 to the 8th power). That would take something like 3,170,979,198,376,458,752 years.\r\n\r\nIf our database is set up properly, an 8-table join with a WHERE that matches only one row will execute in less than a millisecond. That lets us have our cake while eating it! We get to think about joins using a simple conceptual model: nested loops with an if inside. But the query actually executes in a much more intelligent way.\r\n\r\n(Full disclosure: database optimizers aren't perfect. In real databases, we give them certain kinds of manual hints that we'll learn about in later lessons. In rare cases, the optimizer does a bad job and we have to change our queries significantly to work around it. But in 99.9% of cases, the optimizer will do what you want!)\r\n\r\n\r\nSQL: Left and right joins\r\nIn an earlier lesson, we saw an example where users can register with discount codes. The discount codes were optional: some users register with a code, so they have a foreign key to the discount. Other users register without a code, so the foreign key is null.\r\n\r\nSuppose that we want to produce a report listing our users and what discount codes they used. The report should include all users, whether they used a discount code or not.\r\n\r\nWe could write a loop in JavaScript: loop over each user, selecting any discounts for that user. That would cause an N+1 query problem: we'd query all of the users, followed by N individual queries to get each user's discount, if any. (Imagine that N is 10,000,000, to see why this is a problem: too many queries!)\r\n\r\nAs usual, SQL has an answer. In this case, it's a join. However, the type of join that we've seen so far doesn't help us. If we select from users JOIN discounts ON users.id = discounts.user_id, we'll only get results for users who have corresponding discounts. (The users.id = discounts.user_id will never be true for a user who has no corresponding discount row.)\r\n\r\nThat doesn't solve our problem because we want to include all users, even if they have no discount. Here's an example of that solution, even though it doesn't solve our problem:\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL,\r\n    discount_id INTEGER REFERENCES discounts(id) NULL UNIQUE\r\n  );\r\n  CREATE TABLE discounts (id INTEGER PRIMARY KEY, discount_code TEXT NOT NULL);\r\n\r\n  -- Amir registered with a discount (both Amir and the discount get ID 1).\r\n  INSERT INTO discounts (discount_code) VALUES ('free-month');\r\n  INSERT INTO users (name, discount_id) VALUES ('Amir', 1);\r\n\r\n  -- Betty registered with no discount.\r\n  INSERT INTO users (name, discount_id) VALUES ('Betty', NULL);\r\n\r\n  SELECT\r\n    users.name AS name,\r\n    discounts.discount_code AS discount_code\r\n  FROM users JOIN discounts\r\n    ON users.discount_id = discounts.id\r\n`)\r\n[{discount_code: 'free-month', name: 'Amir'}] \r\nBetty existed, but she wasn't in our query's results. To fix that, we can tell the database to include users in the report even when there's no matching discount. This is called a left join: users LEFT JOIN discounts. The \"left\" means \"include rows from the left table (users), even if there's no corresponding row from the right table (discounts).\r\n\r\nWith a LEFT JOIN, both Amir and Betty will show up in the results. Amir will have his discount_code, but Betty's discount_code will be NULL (which will be represented as JavaScript's null).\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL,\r\n    discount_id INTEGER REFERENCES discounts(id) NULL UNIQUE\r\n  );\r\n  CREATE TABLE discounts (id INTEGER PRIMARY KEY, discount_code TEXT NOT NULL);\r\n\r\n  -- Amir registered with a discount (both Amir and the discount get ID 1).\r\n  INSERT INTO discounts (discount_code) VALUES ('free-month');\r\n  INSERT INTO users (name, discount_id) VALUES ('Amir', 1);\r\n\r\n  -- Betty registered with no discount.\r\n  INSERT INTO users (name, discount_id) VALUES ('Betty', NULL);\r\n\r\n  SELECT\r\n    users.name AS name,\r\n    discounts.discount_code AS discount_code\r\n  FROM users LEFT JOIN discounts\r\n    ON users.discount_id = discounts.id\r\n`)\r\n[{discount_code: 'free-month', name: 'Amir'}, {discount_code: null, name: 'Betty'}] \r\nLEFT JOIN adds one small tweak to our mental model of joins. Inner joins (the simple kind that we've seen without LEFT) still work in the same way. But here's how the database executes a left join (the new part is the \"If no discounts matched this user\" section):\r\n\r\nFor each user:\r\nFor each discount:\r\nIf this user's discount_id matches this discount's id:\r\nReturn a row with all of the user's columns and all of the discount's columns.\r\nIf no discounts matched this user:\r\nReturn a row with all of the user's columns, and NULLs in all of the missing discount's columns.\r\nAs usual, this is only a mental model, but it's a correct one. In reality, the database will use a more efficient method that gives exactly the same result.\r\n\r\nYou might wonder whether LEFT JOIN implies that there's also a RIGHT JOIN. There is! In a RIGHT JOIN, rows from the right table are always included, even if there's no corresponding row from the left table.\r\n\r\nLeft and right joins are much less common than the basic inner joins that we've seen before, where every row must exactly match the ON. But when you need a left or right join, you'll be glad that it's available. They're useful when you want a list of records (like users) along with other corresponding records (like discounts) that may or may not exist.\r\n\r\n(As is often the case, SQLite is a bit weird here. It supports left joins, but not right joins. Fortunately, we can convert right joins into left joins by flipping the order of the tables.)\r\n\r\nLike with basic inner joins, left and right joins will produce any combination of rows that match. For example, suppose that we select from users LEFT JOIN comments ON users.id = comments.user_id.\r\n\r\nEvery comment in the database will show up in the results. If Amir has written 100 comments, he'll show up 100 times: once with each of his comments. But because it's a LEFT JOIN, every user is guaranteed to show up at least once. Betty will show up even if she's never written a comment.\r\n\r\nHere's a code problem for you to complete:\r\n\r\nUse a join to get a list of usernames and comment texts for every comment in the system. Make it a left join so that it also includes users who have never written a comment. (They'll have a null comment text.) Select only the name and comment_text columns.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE comments (\r\n    user_id REFERENCES users(id) NOT NULL,\r\n    comment_text TEXT NOT NULL\r\n  );\r\n\r\n  -- Amir has written two comments.\r\n  INSERT INTO users (name) VALUES ('Amir');\r\n  INSERT INTO comments (\r\n    user_id,\r\n    comment_text\r\n  ) VALUES (1, 'Ms. Fluff needs a bath!');\r\n  INSERT INTO comments (\r\n    user_id,\r\n    comment_text\r\n  ) VALUES (1, 'Ms. Fluff strongly dislikes water.');\r\n\r\n  -- Betty has written no comments.\r\n  INSERT INTO users (name) VALUES ('Betty');\r\n  SELECT users.name, comments.comment_text FROM users LEFT JOIN comments ON users.id = comments.user_id\r\n\r\n\r\n\r\n\r\n\r\n`)\r\nGOAL:\t\r\n[{comment_text: 'Ms. Fluff needs a bath!', name: 'Amir'}, {comment_text: 'Ms. Fluff strongly dislikes water.', name: 'Amir'}, {comment_text: null, name: 'Betty'}]\r\nYOURS:\t\r\n[{comment_text: 'Ms. Fluff needs a bath!', name: 'Amir'}, {comment_text: 'Ms. Fluff strongly dislikes water.', name: 'Amir'}, {comment_text: null, name: 'Betty'}] \r\nYou'll sometimes see left and right joins called LEFT OUTER JOINs and RIGHT OUTER JOINs. Fortunately, \"outer\" doesn't change the meaning; it's just a more precise name for the same idea.\r\n\r\nIn this course, we only address inner (\"simple\") joins and left joins. However, there's a surprising array of additional join types. For 99% of your practical work, inner joins will be sufficient. Left joins will probably get you through the final 1%.\r\n\r\nWe don't recommend focusing on other join types until you've spent a lot of time using SQL databases on projects. However, if you'd like a taste of how deep the join rabbit hole goes, we think that this article is thorough and understandable without belaboring the point.\r\n\r\n\r\nSQL: Join mistakes\r\nLet's examine some subtle mistakes that we might make with SQL joins. First, what happens if we forget to add the ON condition to an inner join?\r\n\r\nWith no ON, an inner join returns every combination of the left table's rows with the right table's rows. If the left table has N rows and the right table has M rows, then the join will have N*M total rows.\r\n\r\nHowever, we won't notice that mistake if we only test with simple cases! For example, imagine that we're joining users with their comments, but we forget the ON. If we only test with one user and one comment, then the results will look correct.\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE comments (\r\n    user_id REFERENCES users(id) NOT NULL,\r\n    comment_text TEXT NOT NULL\r\n  );\r\n\r\n  -- Amir has written a comment.\r\n  INSERT INTO users (name) VALUES ('Amir');\r\n  INSERT INTO comments (\r\n    user_id,\r\n    comment_text\r\n  ) VALUES (1, 'Ms. Fluff needs a bath!');\r\n\r\n  -- \"Test\" our JOIN by querying all of the users and comments.\r\n  SELECT\r\n    users.name AS name,\r\n    comments.comment_text AS comment_text\r\n  FROM users JOIN comments;\r\n`)\r\n[{comment_text: 'Ms. Fluff needs a bath!', name: 'Amir'}] \r\nThe ON is missing, but our test doesn't notice! There's a great rule of thumb in testing that goes something like: \"If you're testing code that deals with arrays, write separate tests for 0 elements, 1 element, and many elements.\" We can imagine a similar process for testing joins. When joining tables, it's a good idea to test multiple cases, like:\r\n\r\nThere are no rows at all.\r\nOnly the left table has rows.\r\nOnly the right table has rows.\r\nBoth tables have multiple rows.\r\n(Sometimes you'll want to add even more cases: \"what happens if the left table has multiple rows that match one row on the right?\" Etc. As usual, the amount of testing should match your confidence in the code.)\r\n\r\nTesting is deep and subtle, but there's a baseline rule that you should always use when writing a join: never test a join by inserting only one row into each table. That \"test\" is too loose, like the one above. Almost any join will pass it, even if it's the wrong join!\r\n\r\nThat rule will catch other mistakes as well. For example, what happens if we accidentally flip the order of the tables in a LEFT JOIN?\r\n\r\nIn the next example, we meant to select from users LEFT JOIN comments. However, we mixed up left and right joins, so we accidentally selected from comments LEFT JOIN users. (It's common to mix up the different join types, so this is a realistic mistake.)\r\n\r\nWe only test the join with one user and one comment. It could be a LEFT JOIN, a RIGHT JOIN, an INNER JOIN, or an OUTER JOIN. They're all the same for that test case, but only one is correct!\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE comments (\r\n    user_id REFERENCES users(id) NOT NULL,\r\n    comment_text TEXT NOT NULL\r\n  );\r\n\r\n  -- Amir has written a comment.\r\n  -- This is a bad test case: it won't notice if we switch the tables!\r\n  INSERT INTO users (name) VALUES ('Amir');\r\n  INSERT INTO comments (\r\n    user_id,\r\n    comment_text\r\n  ) VALUES (1, 'Ms. Fluff needs a bath!');\r\n\r\n  -- This join contains an error: the table order is flipped.\r\n  -- But our test can't tell!\r\n  SELECT\r\n    users.name AS name,\r\n    comments.comment_text AS comment_text\r\n  FROM comments LEFT JOIN users\r\n    ON users.id = comments.user_id\r\n`)\r\n[{comment_text: 'Ms. Fluff needs a bath!', name: 'Amir'}] \r\nOne final type of join mistake. So far, all of our examples have used foreign keys in the ON. Usually, that's a good idea. Joining on foreign keys means that we don't have to worry about cases where the join condition column has a value, but it doesn't match any value in the other table.\r\n\r\nHowever, the database will let us write any ON that we want. It doesn't care whether there's a foreign key or not. For example, it will let us join against the wrong table's ID.\r\n\r\n(Be careful with this example. It will successfully produce one joined row of \"user\" with comment, but the \"user\"'s name will be Ms. Fluff, not Amir!)\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE cats (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE comments (\r\n    user_id REFERENCES users(id) NOT NULL,\r\n    comment_text TEXT NOT NULL\r\n  );\r\n\r\n  -- Ms. Fluff is a cat (with ID 1).\r\n  INSERT INTO cats (name) VALUES ('Ms. Fluff');\r\n\r\n  -- Amir (user ID 1) has written a comment.\r\n  INSERT INTO users (name) VALUES ('Amir');\r\n  INSERT INTO comments (\r\n    user_id,\r\n    comment_text\r\n  ) VALUES (1, 'Ms. Fluff needs a bath!');\r\n\r\n  -- Select all of the comments joined with \"users\".\r\n  -- But we accidentally join against cats' IDs instead of users' IDs.\r\n  -- The database won't stop us!\r\n  -- It will happily match up comments' \"user_id\"s with cats' \"id\"s.\r\n  SELECT\r\n    name,\r\n    comment_text\r\n  FROM cats JOIN comments\r\n    ON id = comments.user_id;\r\n`)\r\n[{comment_text: 'Ms. Fluff needs a bath!', name: 'Ms. Fluff'}] \r\nWe can tell that this is wrong because no cat who has ever existed would say that they need a bath!\r\n\r\nLike our previous examples, more thorough testing will highlight this kind of mistake.\r\n\r\nThere's another method to spot it as well. In past lessons, we've recommended listing the columns in a SELECT on separate lines, like we did in this example. For joins, we've also recommended explicitly naming those columns' tables, like SELECT users.name. However, we intentionally didn't follow that advice above: we selected only the names of the columns without specifying which tables they came from.\r\n\r\nQualifying the column names with their tables makes it easier to spot this kind of mistake. In order for this mistake to happen, we'd have to write SELECT cats.name. Just seeing the table name a second time gives us a chance to notice the mistake.\r\n\r\nHopefully, we type the correct table name the second time: users.name. If we do that while selecting from a join that doesn't include users, we'll get an error. (You can type \"error\" to indicate an error.\")\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE cats (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE comments (\r\n    user_id REFERENCES users(id) NOT NULL,\r\n    comment_text TEXT NOT NULL\r\n  );\r\n\r\n  -- Ms. Fluff is a cat (with ID 1).\r\n  INSERT INTO cats (name) VALUES ('Ms. Fluff');\r\n\r\n  -- Amir (user ID 1) has written a comment.\r\n  INSERT INTO users (name) VALUES ('Amir');\r\n  INSERT INTO comments (\r\n    user_id,\r\n    comment_text\r\n  ) VALUES (1, 'Ms. Fluff needs a bath!');\r\n\r\n  -- Select all of the comments joined with \"users\".\r\n  -- But we accidentally join against cats' IDs instead of users' IDs.\r\n  -- The database won't stop us!\r\n  -- It will happily match up comments' \"user_id\"s with cats' \"id\"s.\r\n  --\r\n  -- Naming the tables explicitly gives us a second chance to notice.\r\n  SELECT\r\n    users.name,\r\n    comments.comment_text\r\n  FROM cats JOIN comments\r\n    ON id = comments.user_id;\r\n`)\r\nError: no such column: users.name \r\nSQL is quite good at preventing mistakes. That's what all of its constraint types are for. However, it can't save us from every mistake. Hopefully this lesson helps you to catch some mistakes earlier. We can reduce the advice here into two minimal rules:\r\n\r\nWhen testing a join, use more than one row in each table.\r\nWhen selecting from a join, qualify your selects with table names (like SELECT users.name) to make sure that you're selecting the right things.\r\n\r\nSQL: ON vs WHERE\r\nFor this lesson, our goal is: find the pairs of cats and owners where the person's name is the same as the cat's name.\r\n\r\n(All of the examples in this lesson will use this database, but it will always be empty at the beginning of each example.)\r\n\r\n> \r\nexec(`\r\n  CREATE TABLE people (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    name TEXT NOT NULL\r\n  );\r\n  CREATE TABLE cats (\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    owner_id INTEGER NOT NULL REFERENCES people(id),\r\n    name TEXT NOT NULL\r\n  );\r\n\r\n  -- Wilford has a cat named Wilford.\r\n  INSERT INTO people (id, name) VALUES (300, 'Wilford');\r\n  INSERT INTO cats (owner_id, name) VALUES (300, 'Wilford');\r\n\r\n  -- Cindy has no cats.\r\n  INSERT INTO people (id, name) VALUES (200, 'Cindy');\r\n`)\r\n[] \r\nFirst, we'll do the query in a straightforward way, using both an ON and a WHERE. We use the ON to match people and cats using the owner_id foreign key. We use the WHERE to select only the person-cat pairs where the owner's name is the same as the cat's name. (Note the AS column aliases.)\r\n\r\n> \r\nexec(`\r\n  SELECT\r\n    people.name AS person_name,\r\n    cats.name AS cat_name\r\n  FROM people\r\n  INNER JOIN cats\r\n    ON people.id = cats.owner_id\r\n  WHERE people.name = cats.name\r\n`)\r\n[{cat_name: 'Wilford', person_name: 'Wilford'}] \r\nIf we like, we can move the people.name = cats.name check into the ON, eliminating the WHERE.\r\n\r\n> \r\nexec(`\r\n  SELECT\r\n    people.name AS person_name,\r\n    cats.name AS cat_name\r\n  FROM people\r\n  INNER JOIN cats\r\n    ON people.id = cats.owner_id\r\n    AND people.name = cats.name\r\n`)\r\n[{cat_name: 'Wilford', person_name: 'Wilford'}] \r\nThe cat's name isn't a foreign key to the person's name, but that's OK; we can still compare those columns in the ON. Databases don't limit what we put in an ON, just like they don't limit what we put in a WHERE. If the columns exist, the database will let us join on them.\r\n\r\nWe can also convert the entire ON into a WHERE.\r\n\r\n> \r\nexec(`\r\n  SELECT\r\n    people.name AS person_name,\r\n    cats.name AS cat_name\r\n  FROM people\r\n  INNER JOIN cats\r\n  WHERE people.id = cats.owner_id\r\n  AND people.name = cats.name\r\n`)\r\n[{cat_name: 'Wilford', person_name: 'Wilford'}] \r\nConceptually, this version is computing every combination of person and cat, then filtering that giant list:\r\n\r\nFor each person:\r\nFor each cat:\r\nProduce a new temporary row that contains this person's columns with this cat's columns.\r\nFor each of those combinations of every person with every cat:\r\nIf the cat's owner_id matches the person's id:\r\nAnd the cat's name matches the person's name:\r\nInclude this combination of person and cat in the final results.\r\nAs always, the mental model above is correct, but the database will intelligently optimize the query to make it faster. (If we have 10,000 people and 10,000 cats, the database will NOT produce a temporary list of 100,000,000 rows.)\r\n\r\nAll three of the queries above are truly equivalent: an ON mixed with a WHERE; an ON only; and a WHERE only. So why bother with ON at all? Why not always use WHERE? Let's analyze that question along three dimensions: performance, correctness, and clarity for human readers.\r\n\r\nFirst: performance. Modern databases are very good at optimizing ON and WHERE. You're unlikely to encounter a performance problem that's fixed by converting an ON to a WHERE or vice-versa. So performance isn't a reason to choose one or the other.\r\n\r\nSecond: correctness. For inner joins (the common type of \"simple\" joins that we're using here), ON and WHERE are interchangeable. Your query will never be wrong if you convert one to the other. However, ON and WHERE are NOT interchangeable for any other type of join. In LEFT, RIGHT, and other more rare types that we don't cover in this course, like OUTER, converting an ON to a WHERE can change the results.\r\n\r\nThird: clarity for human readers. An ON should specify which rows from the left table go with which rows from the right table. Here are some examples of good ONs. They concern the relationship between the two tables being joined.\r\n\r\nMatching the left table's foreign key against the column that it references in the right table.\r\nMatching email addresses in an invitations_sent table against email addresses in our users table to find out what percentage of invited users eventually register (assuming that there's no proper foreign key between the tables).\r\nHere are some examples of conditions that are better in a WHERE than an ON. They're not about the two tables' relationships.\r\n\r\nSelecting a range of rows (like WHERE created_at > /* some date here */).\r\nSelecting a specific row (like WHERE user_id = ? or WHERE cats.name = 'Ms. Fluff').\r\nSeparating ON conditions from WHERE conditions helps with both correctness and clarity. It makes mistakes with rare types of joins less likely, where converting an ON to a WHERE will give different results. It also gives readers a hint about whether the condition concerns combinations of left and right rows.\r\n\r\nThere's no hard-and-fast rule about when to use ON vs. WHERE. The example that we started with lives in a gray area where either choice makes sense. Putting the people.name = cats.name condition in the ON is probably slightly better, but neither is \"wrong\".\r\n\r\nYou'll do fine as long as you ask yourself \"is this condition about how the left table relates to the right table, or is it about something else?\"\r\n\r\nFinish Lesson\r\nBrag…","frontmatter":{"date":"2020-04-03","title":"SQL","category":"knowledge-base"},"fields":{"slug":"/SQL/"},"timeToRead":84,"html":"<p><img src=\"https://i.imgur.com/ETtwNWY.jpg\" title=\"Photo from wallpapersafari.com\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from wallpapersafari.com</em></p></p>\n<blockquote>\n<p>SQL stands for Structured Query Language. SQL is used to communicate with a database. </p>\n</blockquote>\n<blockquote>\n<p>SQL manages data well. In SQL, data is stored in tables made up of columns.</p>\n</blockquote>\n<blockquote>\n<p>You can try running your sql statements online here: <a href=\"https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_in\">https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_in</a></p>\n</blockquote>\n<blockquote>\n<p>Please note that in general: You can't execute a query using Javascript because Javascript can't connect directly with your database, but you can use AJAX. With this technology you'll be able to send a request to a PHP (or other server side language) page where resides the code that can execute a query to your db and get back the result of this query.</p>\n</blockquote>\n<blockquote>\n<p>Creating a table called <code>users</code> which contains columns email and name. Both email and name will be a text field. exec in this case is just a custom JS function</p>\n</blockquote>\n<pre><code class=\"language-SQL\">exec(`CREATE TABLE users (email TEXT, name TEXT)`)\n</code></pre>\n<blockquote>\n<p>In the online tool of w3schools we write those statements without <code>exec(<code></code>)</code></p>\n</blockquote>\n<pre><code>CREATE TABLE users (email TEXT, name TEXT)\n</code></pre>\n<blockquote>\n<p>Now creating a row/data entry in our users table:</p>\n</blockquote>\n<pre><code class=\"language-SQL\">exec(`INSERT INTO users (email, name) VALUES ('adda@example.com', 'Adda')`)\n</code></pre>\n<blockquote>\n<p>Then we can access data from this table with following code:</p>\n</blockquote>\n<pre><code class=\"language-SQL\">exec(`SELECT * FROM users`)\n</code></pre>\n<blockquote>\n<p><code>*</code> means all the columns!!</p>\n</blockquote>\n<blockquote>\n<p>Select always returns an array of objects:</p>\n</blockquote>\n<pre><code>[{email: 'adda@example.com', name: 'Adda'}] \n</code></pre>\n<blockquote>\n<p>Once again: Select returns an array of objects which we are selecting</p>\n</blockquote>\n<blockquote>\n<p>Other SQL methods like create table, insert, delete, alter or begin return empty arrays and alter the table</p>\n</blockquote>\n<pre><code class=\"language-SQL\">exec(`INSERT INTO users (email, name) VALUES ('adda@example.com', 'Adda')`)\n[]\n</code></pre>\n<blockquote>\n<p>SQL keywords like INSERT and SELECT ignore case, so INSERT and InSeRt mean the same thing. Table and column names also ignore case, so users and USErs refer to the same table. However convention is: SQL keywords in UPPERCASE, like CREATE and INSERT and names of tables and columns will be lower<em>snake</em>case, like user_name</p>\n</blockquote>\n<blockquote>\n<p>If we try to insert into or select form a column that doesn't exist, the database system will error.</p>\n</blockquote>\n<blockquote>\n<p>NUmbers are stored as REAL (with decimal) or as INTEGER (without decimal)</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE rectangles (width REAL, height REAL`)\n</code></pre>\n<blockquote>\n<p>There are many more times. Example for Postgress database: <a href=\"https://www.postgresql.org/docs/11/datatype.html\">https://www.postgresql.org/docs/11/datatype.html</a></p>\n</blockquote>\n<blockquote>\n<p>Instead of always selecting all columns with SELECT * we can define columns we only want to see</p>\n</blockquote>\n<pre><code>exec(`SELECT name FROM users`)\n</code></pre>\n<blockquote>\n<p>We can select multiple columns by separating them with comma</p>\n</blockquote>\n<pre><code>exec(`SELECT age, name FROM users`)\n</code></pre>\n<blockquote>\n<p>Now how to select only given rows? We use SELECT * WHERE\nHere is the table:</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE users (email TEXT NOT NULL, name TEXT NOT NULL)`)\nexec(`INSERT INTO users (email, name) VALUES ('betty.j@example.com', 'Betty')`)\nexec(`INSERT INTO users (email, name) VALUES ('betty.k@example.com', 'Betty')`)\nexec(`INSERT INTO users (email, name) VALUES ('cindy@example.com', 'Cindy')`)\n</code></pre>\n<blockquote>\n<p>Here we only select oen row:</p>\n</blockquote>\n<pre><code>exec(`SELECT * FROM users where name = 'Cindy'`)\n[{email: 'cindy@example.com', name: 'Cindy'}]\n</code></pre>\n<blockquote>\n<p>When we use both a WHERE and a SELECT, they can reference different columns.</p>\n</blockquote>\n<pre><code>exec(`SELECT email FROM users WHERE name = 'Cindy'`)\n[{email: 'cindy@example.com'}] \n</code></pre>\n<blockquote>\n<p>You can also use lless than &#x3C; or bigger than > or not equal to != or another way how to write not equal to &#x3C;></p>\n</blockquote>\n<pre><code>exec(`SELECT name FROM cats WHERE age > 4 `)\n</code></pre>\n<blockquote>\n<p>We can also have multiple conditions connected with logical AND or OR:</p>\n</blockquote>\n<pre><code>exec(`\n  SELECT email FROM users\n  WHERE name = 'Betty' AND email = 'betty.j@example.com';\n`)\n</code></pre>\n<blockquote>\n<p>WHERE clauses can call functions. For example, SQLite defines a length function that works on strings.</p>\n</blockquote>\n<pre><code>exec(`SELECT name FROM users WHERE length(name) > 4`)\n</code></pre>\n<blockquote>\n<p>Here are examples of postgress database functions: <a href=\"https://www.postgresql.org/docs/12/functions.html\">https://www.postgresql.org/docs/12/functions.html</a></p>\n</blockquote>\n<blockquote>\n<p>We can also define our own</p>\n</blockquote>\n<blockquote>\n<p>Like most programming languages, SQL supports \"null\", which indicates the absence of a value. For example, a user's login_count might be null if they've never logged in.</p>\n</blockquote>\n<blockquote>\n<p>When a column is allowed to be null, we say that it's \"nullable\". </p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE users (name TEXT, login_count INTEGER)`)\nexec(`INSERT INTO users (name, login_count) VALUES(NULL, NULL)`)\nexec(`SELECT * FROM users`)\n[{login_count: null, name: null}]\n</code></pre>\n<blockquote>\n<p>We'll explicitly mark columns as either NULL or NOT NULL.We can tell the database to disallow null values by adding NOT NULL to a column declaration. Trying to insert a null value into a NOT NULL column is an error.</p>\n</blockquote>\n<blockquote>\n<p>it's best to make columns NOT NULL unless you have a very good reason not to. When you do make a column nullable, it's best to explicitly mark it as NULL by defining it as phone_number TEXT NULL. </p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE cats (name TEST NOT NULL, age INTEGER NULL)`)\n</code></pre>\n<blockquote>\n<p>Updating value for each row for a given column:</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\nexec(`INSERT INTO cats (name, age) VALUES ('Ms. Fluff', 3)`)\nexec(`INSERT INTO cats (name, age) VALUES ('Keanu', 2)`)\nexec(`UPDATE cats SET name = 'Cat'`)\nexec(`SELECT name FROM cats`)\n[{name: 'Cat'}, {name: 'Cat'}]\n</code></pre>\n<blockquote>\n<p>Changing value only for specific row:</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\nexec(`INSERT INTO cats (name, age) VALUES ('Ms. Fluff', 3)`)\nexec(`INSERT INTO cats (name, age) VALUES ('Keanu', 2)`)\nexec(`UPDATE cats SET name = 'Mr. Reeves' WHERE name = 'Keanu'`)\nexec(`SELECT name FROM cats`)\n[{name: 'Ms. Fluff'}, {name: 'Mr. Reeves'}] \n</code></pre>\n<blockquote>\n<p>If our UPDATE's WHERE clause matches multiple rows, then all of those rows will be updated. This makes UPDATE potentially dangerous. Be very careful that your UPDATE only affects the rows that you expected it to update!</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE rects (kind TEXT, width REAL, height REAL)`)\nexec(`INSERT INTO rects (kind, width, height) VALUES ('tall', 1.1, 2.7)`)\nexec(`INSERT INTO rects (kind, width, height) VALUES ('tall', 4.4, 4.3)`)\nexec(`INSERT INTO rects (kind, width, height) VALUES ('tall', 0.4, 8.9)`)\nexec(`INSERT INTO rects (kind, width, height) VALUES ('tall', 100, 0.1)`)\nexec(`UPDATE rects SET kind ='wide' WHERE width > height`)\n</code></pre>\n<blockquote>\n<p>It is possible to insert multiple rows. When we insert many rows with separate INSERT statements, we're putting heavy load on the database. The database has to parse each insert statement, execute it safely by acquiring and releasing locks, and store its result on disk. All of those processes happen for every insert. There are many ways to mitigate those costs, but there's one way that reduces them all at once: multi-row inserts. </p>\n</blockquote>\n<blockquote>\n<p>The syntax is straightforward: we write an insert statement as normal, but with multiple rows of data after VALUES. Each one becomes a separate row in the database. Now, the database only has to parse, lock, execute, and store data once. The amount of data stored is the same, but the overhead is much smaller.</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE cats (name TEXT NOT NULL)`)\nexec(`\n  INSERT INTO cats (name) VALUES \n    ('Ms. Fluff'), \n    ('Keanu')\n    \n`)\nexec(`SELECT * FROM cats`)\nGOAL:   \n[{name: 'Ms. Fluff'}, {name: 'Keanu'}]\n</code></pre>\n<pre><code>exec(`CREATE TABLE users (name TEXT NOT NULL)`)\nexec(`\n  INSERT INTO users (name) VALUES\n    ('Amir'),\n    ('Betty'),\n    ('Cindy')\n`)\nexec(`SELECT * FROM users`)\n[{name: 'Amir'}, {name: 'Betty'}, {name: 'Cindy'}]\n</code></pre>\n<blockquote>\n<p>Selecting expressions\nWe can SELECT many kinds of expressions: columns, like we've seen already; but also constants, mathematical expressions, and function calls. For example, if we SELECT 1, we get 1 back. If we SELECT 1 + 1, we get 2 back.</p>\n</blockquote>\n<pre><code>exec(`SELECT 1`)\n[{'1': 1}] \n</code></pre>\n<pre><code>exec(`SELECT 1 + 1`)\n[{'1 + 1': 2}] \n</code></pre>\n<blockquote>\n<p>The output here is the same as ever: an array of objects. But now, there are no column names. Instead, the properties on the \"row\" object are the expressions that we queried.</p>\n</blockquote>\n<pre><code>exec(`SELECT 2 * 3`)\n[{'2 * 3': 6}] \n</code></pre>\n<p>We can also query functions that return values dynamically. For example, the current date is written as DATE('now') in SQLite. This query asks: is the current date after DATE(0), which was January 1, 1970?</p>\n<pre><code>exec(`SELECT DATE('now') > DATE(0)`)\n[{\"DATE('now') > DATE(0)\": 1}] \n</code></pre>\n<blockquote>\n<p>Select the number 17.</p>\n</blockquote>\n<pre><code>exec(`SELECT 17`)\n[{'17': 17}]\n</code></pre>\n<blockquote>\n<p>we can enforce a column to have unique valueswith work UNIQUE.  Inserting a duplicate value into a UNIQUE column is an error.</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE users (email TEXT UNIQUE, name TEXT)`)\nexec(`INSERT INTO users (email, name) VALUES ('amir@example.com', 'Amir')`)\nexec(`SELECT email FROM users`)\n[{email: 'amir@example.com'}] \n</code></pre>\n<pre><code>exec(`CREATE TABLE users (email TEXT UNIQUE, name TEXT)`)\nexec(`INSERT INTO users (email, name) VALUES ('amir@example.com', 'Amir')`)\nexec(`INSERT INTO users (email, name) VALUES ('amir@example.com', 'Amir')`)\nexec(`SELECT * FROM users`)\nError: UNIQUE constraint failed: users.email\n</code></pre>\n<blockquote>\n<p>What if we store email in 2 comuns? as username and domain? How can we mae sure that both usrname and domain need to be unique??</p>\n</blockquote>\n<pre><code>exec(`\n  CREATE TABLE emails (\n    username TEXT,\n    domain TEXT,\n    UNIQUE (username, domain)\n  )\n`)\n</code></pre>\n<blockquote>\n<p>We can UPDATE our new emails table as much as we like. But if we try to update it in a way that results in two rows with the same username and the same domain, that's an error.</p>\n</blockquote>\n<blockquote>\n<p>We can delete data with the DELETE statement. Like UPDATE, it will delete every row by default. You'll want to be very careful with DELETE!</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE users (email TEXT, name TEXT)`)\nexec(`INSERT INTO users (email, name) VALUES ('amir@example.com', 'Amir')`)\nexec(`INSERT INTO users (email, name) VALUES ('betty.j@example.com', 'Betty')`)\nexec(`DELETE FROM users`)\nexec(`SELECT name FROM users`)\n[]\n</code></pre>\n<blockquote>\n<p>We can be more specific what we are deleting:</p>\n</blockquote>\n<pre><code>exec(`DELETE FROM users WHERE name = 'Betty' OR name = 'Amir'`)\n</code></pre>\n<p>Defaults\nNormally, we have to specify all of the columns when inserting a row. But that quickly becomes tedious because many real-world tables have dozens of columns. We can eliminate some of that tedium by defining default values for columns.</p>\n<p>For example, if our users have a login<em>count, then 0 is a good default value. When a user is created, they've never logged in. Defining that default value during table creation saves us from specifying a login</em>count when INSERTing a user.</p>\n<pre><code>exec(`\n  CREATE TABLE users (\n    name TEXT,\n    login_count INTEGER NOT NULL DEFAULT 0\n  );\n`)\nexec(`INSERT INTO users (name) VALUES ('Amir')`)\nexec(`SELECT * FROM users`)\n[{login_count: 0, name: 'Amir'}] \n</code></pre>\n<p>f we specify a value when inserting, it will override the default.</p>\n<pre><code>exec(`\n  CREATE TABLE users (\n    name TEXT,\n    login_count INTEGER NOT NULL DEFAULT 0\n  );\n`)\nexec(`INSERT INTO users (name, login_count) VALUES ('Amir', 1)`)\nexec(`SELECT * FROM users`)\n</code></pre>\n<p>Column aliases\nWe can rename columns when needed using AS. The result object's properties will use our column aliases instead of the original column names. In this example, we rename the age column, but we leave the name alone.</p>\n<pre><code>exec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\nexec(`INSERT INTO cats (name, age) VALUES ('Keanu', 2)`)\nexec(`SELECT name, age AS oldness FROM cats`)\n[{name: 'Keanu', oldness: 2}]\n</code></pre>\n<p>Column aliases become useful in complex queries that involve multiple tables. However, they're also useful for something much simpler: querying mathematical expressions and functions. Now we can clean up the results of those queries!</p>\n<pre><code>exec(`SELECT 1 + 1`)\n[{'1 + 1': 2}] \n</code></pre>\n<pre><code>exec(`SELECT 1 + 1 AS sum`)\n[{sum: 2}]\n</code></pre>\n<pre><code>exec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\nexec(`INSERT INTO cats (name, age) VALUES ('Keanu', 2)`)\nexec(`SELECT name AS cat_name, age AS cat_age from cats`)\n\n[{cat_age: 2, cat_name: 'Keanu'}]\n</code></pre>\n<blockquote>\n<p>In order to differentiate people with same naem we can use ids:</p>\n</blockquote>\n<pre><code>xec(`CREATE TABLE people (id INTEGER NOT NULL, name TEXT NOT NULL)`)\nexec(`INSERT INTO people (id, name) VALUES (1, 'Amir')`)\nexec(`INSERT INTO people (id, name) VALUES (2, 'Amir')`)\nexec(`SELECT * FROM people where ID = 1`)\n[{id: 1, name: 'Amir'}]\n</code></pre>\n<blockquote>\n<p>But doing ids manually is tedious. It's much better to let the database choose IDs for us. In SQLite, we can do that by making the ID column a PRIMARY KEY.In databases, \"key\" means \"a column or set of columns that is always unique\". We've already seen keys in the form of uniqueness constraints. If we put a uniqueness constraint on one column, that makes it a key. If the constraint requires two columns together to be unique, then those two columns together are a key. Database systems themselves don't usually care about keys; they're more useful for humans as a shorthand for \"a set of columns that's always unique\".However, databases do care very much about primary keys. The primary key is a key that we've declared to be special: it's the main (primary) key for the table. In most real-world databases, the primary key is an integer column, often named id. When we tell the database that a column is the primary key, it does several things. First, the primary key column is automatically UNIQUE, so it can never have duplicate values. Second, in most databases, the primary key is also NOT NULL. This isn't true in SQLite, but let's ignore that for a moment. If we create a PRIMARY KEY column, then we won't be allowed to insert duplicates.</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL)`)\nexec(`INSERT INTO people (id, name) VALUES (1, 'Amir')`)\nexec(`SELECT * FROM people`)\n[{id: 1, name: 'Amir'}]\n</code></pre>\n<blockquote>\n<p>always make your primary keys NOT NULL!</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE people (name TEXT PRIMARY KEY NOT NULL)`)\n</code></pre>\n<blockquote>\n<p>Most primary keys are auto-incrementing integer IDs. \"Auto-incrementing\" means that each new ID increases by 1 automatically. When we insert a record, we don't have to specify the ID. The first record inserted will get an ID of 1. After that, the database will always automatically choose the next unused integer. It's kind of like a default value, except it automatically changes with every new record.</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE people (id INTEGER PRIMARY KEY NOT NULL, name TEXT)`)\nexec(`INSERT INTO people (name) VALUES ('Amir')`)\nexec(`INSERT INTO people (name) VALUES ('Betty')`)\nexec(`SELECT * FROM people`)\n[{id: 1, name: 'Amir'}, {id: 2, name: 'Betty'}] \n</code></pre>\n<blockquote>\n<p>One last detail about primary keys. A table can have only one primary key. If we try to create two primary keys in the same table, the database will error.</p>\n</blockquote>\n<blockquote>\n<p>Primary keys in a nutshell:</p>\n</blockquote>\n<p>Each table can only have one primary key.\nPrimary key values must be unique.\nPrimary key values can't be NULL (but SQLite will allow NULL in some situations for backwards compatibility).\nPrimary key columns can have any type, but most are automatically-incrementing integers starting at 1. In SQLite, an INTEGER PRIMARY KEY will automatically increment.\nPrimary keys combine a lot of complicated ideas, but using them is relatively simple. Except in rare situations, your tables should always have an auto-incrementing integer primary key. You never need to include it in your inserts; the database will do it for you. Just by typing INTEGER PRIMARY KEY, you get an easy-to-use, automatically-managed ID column.</p>\n<blockquote>\n<p>Dropping tables and columns\nSometimes an entire table is no longer needed. We could DELETE all data in it, but the table would still exist. Over time, we'd end up with many unused, empty tables in our database. It's better to completely destroy the table.</p>\n</blockquote>\n<blockquote>\n<p>We remove tables by DROPing them. If we DROP a table, trying to access it in any way is an error because it no longer exists.</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE users (email TEXT, name TEXT)`)\nexec(`DROP TABLE users`)\nexec(`SELECT * FROM users`)\nError: no such table: users \n</code></pre>\n<blockquote>\n<p>Drop the cats table.</p>\n</blockquote>\n<pre><code>exec(`CREATE TABLE cats (name TEXT, age INTEGER)`)\nexec(`DROP TABLE cats`)\n\nexec(`\n  INSERT INTO cats (name, age)\n  VALUES ('Ms. Fluff', 3);\n`)\n    \nError: no such table: cats\n</code></pre>\n<blockquote>\n<p>What's the difference between deleting and dropping? Deleting is always about data: it removes rows. Dropping is always about database structure: it removes tables. In most database systems, we can also drop a single column from a table. Later in this course, we'll see examples of dropping other structures as well.</p>\n</blockquote>\n<p>SQL: Bind parameters\nSQL isn't very useful in isolation. In real systems, it will always be combined with a general-purpose language like JavaScript.</p>\n<p>Throughout this course, we've seen query results like [{name: 'Amir'}, {name: 'Betty'}]. Now we'll write JavaScript code to work with those query results.</p>\n<p>The simplest case is: we INSERT some rows, then access parts of them.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (name TEXT);</code>)\nexec(<code>INSERT INTO users (name) VALUES ('Amir');</code>)\nexec(<code>INSERT INTO users (name) VALUES ('Betty');</code>)\n[] </p>\n<p>exec(<code>SELECT * FROM users</code>)\n[{name: 'Amir'}, {name: 'Betty'}] </p>\n<p>const users = exec(<code>SELECT * FROM users</code>)\nconst amir = users[0]\namir.name\n'Amir'\nThe most common type of query is \"find me the record with this ID\". We want to say SELECT * FROM users WHERE id = ?. But what goes in place of the \"?\"?</p>\n</blockquote>\n<p>The answer is that ? is actually the correct thing to put there! A ? tells SQLite \"I (the programmer) will provide a parameter for you to insert here.\" We provide the parameter values as the second value to our exec function.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (id INTEGER NOT NULL, name TEXT);</code>)\nexec(<code>INSERT INTO users (id, name) VALUES (1, 'Amir');</code>)\nexec(<code>INSERT INTO users (id, name) VALUES (2, 'Betty');</code>)\nexec(<code>INSERT INTO users (id, name) VALUES (3, 'Betty');</code>)\n[] </p>\n<p>const users = exec(<code>SELECT name FROM users WHERE id = ?</code>, [1])\nconst amir = users[0]\namir.name\n'Amir'\nWe can use more than one ? if needed. Each one is a different parameter. If we have two ? parameters in our query, we have to provide two values to fill those parameters.</p>\n</blockquote>\n<blockquote>\n<p>exec(\n\"SELECT * FROM users WHERE id = ? AND name = ?\",\n[1, 'Amir']\n)\n[{id: 1, name: 'Amir'}] </p>\n<p>exec(\n\"SELECT * FROM users WHERE id = ? AND name = ?\",\n[2, 'Amir']\n)\n[]\nHere's a code problem for you to complete:</p>\n</blockquote>\n<p>Write a findUser function that finds a user by their ID, returning the result (an array of objects) that comes back from the database. Use a bind parameter (?) to provide the ID to the query. Remember that the ID needs to be passed in an array!</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (id INTEGER NOT NULL, name TEXT);</code>)\nexec(<code>INSERT INTO users (id, name) VALUES (1, 'Amir');</code>)\nexec(<code>INSERT INTO users (id, name) VALUES (2, 'Betty');</code>)\nexec(<code>INSERT INTO users (id, name) VALUES (3, 'Betty');</code>)\nfunction findUser(id) {\nreturn exec(<code>SELECT * FROM users WHERE id= ?</code>, [id])\n}</p>\n</blockquote>\n<p>[findUser(1), findUser(2), findUser(100)]\nGOAL:\n[[{id: 1, name: 'Amir'}], [{id: 2, name: 'Betty'}], []]\nYOURS:\n[[{id: 1, name: 'Amir'}], [{id: 2, name: 'Betty'}], []]\nThat findUser function works, but it's annoying to use. By directly returning what it gets from the database, it always returns the user wrapped in an array. It also returns [] when the user isn't found. A better version would return just the user object, and null when the user doesn't exist.</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Write a findUser function that finds a user by their ID. Return the user object itself, not the full query result array. If no user is found, return JavaScript's null. (You can check for whether the query returned no results with if (queryResult.length === 0) { ... }.)</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (id INTEGER NOT NULL, name TEXT);</code>)\nexec(<code>INSERT INTO users (id, name) VALUES (1, 'Amir');</code>)\nexec(<code>INSERT INTO users (id, name) VALUES (2, 'Betty');</code>)\nexec(<code>INSERT INTO users (id, name) VALUES (3, 'Betty');</code>)\nfunction findUser(id) {\nconst queryResult = exec(<code>SELECT * FROM users WHERE id= ?</code>, [id])\nif (queryResult.length === 0) { return null }\nreturn queryResult[0]</p>\n</blockquote>\n<p>}</p>\n<p>[findUser(1), findUser(2), findUser(100)]\nGOAL:\n[{id: 1, name: 'Amir'}, {id: 2, name: 'Betty'}, null]\nYOURS:\n[{id: 1, name: 'Amir'}, {id: 2, name: 'Betty'}, null]\nWhen we do exec(<code>SELECT ... ?</code>, [1, 2]), the 1 and 2 are called \"bind parameters\". The query contains some holes marked with ?, and the parameters get bound to those holes.</p>\n<p>What if we want to reference a bind parameter multiple times in the query? Instead of ?, we can reference ?1, ?2, etc. Parameter numbers start at 1, so ?1 refers to the bind parameter at index 0. Here's an example of ?1 in action:</p>\n<p>To find all cats whose name matches their owner's name, we can compare them in a WHERE.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE cats (name TEXT, owner_name TEXT)</code>)\nexec(<code>INSERT INTO cats (name, owner_name) VALUES ('Amir', 'Ms. Fluff')</code>)\nexec(<code>INSERT INTO cats (name, owner_name) VALUES ('Wilford', 'Wilford')</code>)\nexec(<code>SELECT name FROM cats WHERE name = owner_name</code>)\n[{name: 'Wilford'}]\nIf we only care about one particular matching cat and owner (like Wilford and Wilford), then we can also find them using a bind parameter. We'll pass 'Wilford' in as the bind parameter, then reference it twice with ?1.</p>\n</blockquote>\n<blockquote>\n<p>exec(<code>CREATE TABLE cats (name TEXT, owner_name TEXT)</code>)\nexec(<code>INSERT INTO cats (name, owner_name) VALUES ('Amir', 'Ms. Fluff')</code>)\nexec(<code>INSERT INTO cats (name, owner_name) VALUES ('Wilford', 'Wilford')</code>)\nexec(<code>SELECT name FROM cats WHERE name = ?1 AND owner_name = ?1</code>, ['Wilford'])\n[{name: 'Wilford'}]\nThe syntax for these parameters varies by database. For example, PostgreSQL's bind parameters are referenced with $1, $2, etc.</p>\n</blockquote>\n<p>The query execution function also varies between different databases. In this course, we execute queries with exec(query, bindParameters), which is a function that we (the course authors) defined while writing the course. In Node's PostgreSQL API, the equivalent function is called query. In Python's SQLite API, it's called execute.</p>\n<p>No matter the syntax, all SQL databases support bind parameters in some form. They wouldn't be very useful without it!</p>\n<p>SQL: Comments\nIn SQL, comments begin with --. This is an unusual syntax for comments, although it is shared with some other programming languages, like Ada and Haskell. Anything from the -- until the end of the line gets ignored.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE cats (</p>\n</blockquote>\n<pre><code>name TEXT\n-- owner_name TEXT\n</code></pre>\n<p>  )\n<code>) exec(</code>INSERT INTO cats (name, owner<em>name) VALUES ('Wilford', 'Wilford')`)\nError: table cats has no column named owner</em>name\nSQL databases also support C-style comments /* like this */, which can span multiple lines.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE cats (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY\n/*\nname TEXT,\nowner_name TEXT\n*/\n</code></pre>\n<p>  )\n<code>) exec(</code>INSERT INTO cats (name, owner_name) VALUES ('Wilford', 'Wilford')`)\nError: table cats has no column named name </p>\n<p>SQL: Comparing with null\nNULL in SQL databases has some sharp edges. For example, mathematical operations on NULL give another NULL (which comes back to us as JavaScript's null).</p>\n<blockquote>\n<p>exec(<code>SELECT NULL + 0 AS result</code>)\n[{result: null}] </p>\n<p>exec(<code>SELECT NULL + 1 AS result</code>)\n[{result: null}] </p>\n<p>exec(<code>SELECT NULL * 5 AS result</code>)\n[{result: null}]\nWhen we use = to compare anything with NULL, we get another NULL. That's even true when comparing NULL = NULL.</p>\n</blockquote>\n<blockquote>\n<p>exec(<code>SELECT NULL = NULL AS result</code>)\n[{result: null}] </p>\n<p>exec(<code>SELECT NULL = 1 AS result</code>)\n[{result: null}] </p>\n<p>exec(<code>SELECT 'cat' = NULL AS result</code>)\n[{result: null}]\nFortunately, SQL also has IS NULL and IS NOT NULL comparisons that properly check for NULL values. (As usual, SQLite uses 1 and 0 to represent true and false.)</p>\n</blockquote>\n<blockquote>\n<p>exec(<code>SELECT NULL IS NULL AS result</code>)\n[{result: 1}] </p>\n<p>exec(<code>SELECT NULL IS NOT NULL AS result</code>)\n[{result: 0}] </p>\n<p>exec(<code>SELECT 5 IS NULL AS result</code>)\n[{result: 0}] </p>\n<p>exec(<code>SELECT 5 IS NOT NULL AS result</code>)\n[{result: 1}] </p>\n<p>exec(<code>SELECT (NULL = NULL) IS NULL AS result</code>)\n[{result: 1}]\nUsually, you'll see IS NULL and IS NOT NULL as conditions in WHERE queries.</p>\n</blockquote>\n<p>For example, suppose that we have a database where only some users have emails. We want to email all of our users. To do that, we need to select all users who have an email address.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (name TEXT NOT NULL, email TEXT NULL)</code>)\nexec(<code>INSERT INTO users (name, email) VALUES ('Amir', 'amir@example.com')</code>)\nexec(<code>INSERT INTO users (name, email) VALUES ('Cindy', NULL)</code>)\nexec(<code>SELECT * FROM users WHERE email IS NOT NULL</code>)\n[{email: 'amir@example.com', name: 'Amir'}]\nHere's a code problem for you to complete:</p>\n</blockquote>\n<p>Here's a table where some users have a cat, and some don't. Select all users that have a cat.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (name TEXT NOT NULL, cat_name TEXT NULL)</code>)\nexec(<code>INSERT INTO users (name, cat_name) VALUES ('Amir', 'Ms. Fluff')</code>)\nexec(<code>INSERT INTO users (name, cat_name) VALUES ('Betty', 'Keanu')</code>)\nexec(<code>INSERT INTO users (name, cat_name) VALUES ('Cindy', NULL)</code>)\nexec(<code>INSERT INTO users (name, cat_name) VALUES ('Dalili', NULL)</code>)\nexec(<code>INSERT INTO users (name, cat_name) VALUES ('Wilford', 'Wilford')</code>)\nexec(<code>SELECT * FROM users WHERE cat_name IS NOT NULL</code>)</p>\n</blockquote>\n<p>GOAL:\n[{cat<em>name: 'Ms. Fluff', name: 'Amir'}, {cat</em>name: 'Keanu', name: 'Betty'}, {cat_name: 'Wilford', name: 'Wilford'}]\nYOURS:\n[{cat<em>name: 'Ms. Fluff', name: 'Amir'}, {cat</em>name: 'Keanu', name: 'Betty'}, {cat_name: 'Wilford', name: 'Wilford'}]\nThe specific details of null handling vary from database to database. Fortunately, SQLite's NULL behavior was designed to be similar to other SQL databases, so the specifics above apply to most databases.</p>\n<p>SQL: Selecting expressions from tables\nWhen SELECTing from a table, we can SELECT expressions computed from the table's columns.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE cats (name TEXT, age INTEGER)</code>)\nexec(<code>INSERT INTO cats (name, age) VALUES ('Ms. Fluff', 3)</code>)\nexec(<code>SELECT age, age + 1 AS age_next_year FROM cats</code>)\n[{age: 3, age<em>next</em>year: 4}]\nIn JavaScript, we can concatenate strings like \"a\" + \"b\". In SQLite, we concatenate with \"a\" || \"b\". This syntax is unfortunate because || means \"or\" in most other languages. (In SQL, \"or\" is simply OR.)</p>\n</blockquote>\n<blockquote>\n<p>exec(<code>CREATE TABLE cats (name TEXT)</code>)\nexec(<code>INSERT INTO cats (name) VALUES ('Ms. Fluff')</code>)\nexec(<code>SELECT name || ' the cat' AS name FROM cats</code>)\n[{name: 'Ms. Fluff the cat'}]\nThis doesn't change Ms. Fluff because SELECT never changes tables. That makes it safer to hack away at SELECTs when exploring the data.</p>\n</blockquote>\n<p>SQL dialects tend to have more built-in operators than other programming languages. For example, most programming languages have >, &#x3C;, >=, and &#x3C;=. SQL has those too.</p>\n<p>But most SQL dialects also have a special BETWEEN operator. In SQL, instead of x >= y and x &#x3C;= z, we can say x BETWEEN y AND z. (Remember that SQLite represents true as 1 and false as 0.)</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE cats (name TEXT, age INTEGER)</code>)\nexec(<code>INSERT INTO cats (name, age) VALUES ('Ms. Fluff', 3)</code>)\nexec(<code>INSERT INTO cats (name, age) VALUES ('Katy Purry', 5)</code>)\nexec(<code>SELECT name, age BETWEEN 2 AND 3 AS is_2_or_3 FROM cats</code>)\n[{is<em>2</em>or<em>3: 1, name: 'Ms. Fluff'}, {is</em>2<em>or</em>3: 0, name: 'Katy Purry'}]\nThe AND in x BETWEEN y AND z is an interesting example of SQL syntax. Normally, AND in SQL is a \"logical and\", like &#x26;&#x26; in most programming languages. SELECT 1 AND 1 returns 1, SELECT 1 AND 0 returns 0, etc.</p>\n</blockquote>\n<p>SQL often reuses keywords, which is happening here. When we select x BETWEEN y AND z, the AND is part of BETWEEN. It has nothing to do with the logical AND of SELECT x AND y.</p>\n<p>We can think of this by analogy to JavaScript's syntax. In JavaScript objects like {a: 1}, : separates the property from its value. In JavaScript switch statements, we say case x:, with the : marking the case clause. Both of these use the same : character, but it means something different in each context. A similar thing is happening with AND: in SQL, it can be either a \"logical and\" or it can be part of BETWEEN.</p>\n<p>SQL is making a trade-off here that doesn't exist in any popular language created since the 90s: it's using huge numbers of language keywords instead of providing functions.</p>\n<p>In JavaScript, most functions are required or imported from third-party NPM modules. In Python or Java, which have larger standard libraries, a lot of functions come with the language. In SQL, many \"functions\" aren't functions at all; they're syntax of the language itself, like x BETWEEN y AND z. This is why JavaScript has 64 keywords, but PostgreSQL's SQL dialect has 760.</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Select two values from the cats table. First: the cats' names, with \" the cat\" appended to each. Second: is<em>3</em>years_old, a boolean (represented as 0 or 1 in SQLite). Remember that equality comparison in SQL is =, not == or ===.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE cats (name TEXT, age INTEGER)</code>)\nexec(<code>INSERT INTO cats (name, age) VALUES ('Ms. Fluff', 3)</code>)\nexec(<code>INSERT INTO cats (name, age) VALUES ('Keanu', 2)</code>)\nexec(<code>SELECT name || ' the cat' as name, age = 3 AS is_3_years_old FROM cats</code>)</p>\n</blockquote>\n<p>GOAL:\n[{is<em>3</em>years<em>old: 1, name: 'Ms. Fluff the cat'}, {is</em>3<em>years</em>old: 0, name: 'Keanu the cat'}]\nYOURS:\n[{is<em>3</em>years<em>old: 1, name: 'Ms. Fluff the cat'}, {is</em>3<em>years</em>old: 0, name: 'Keanu the cat'}] </p>\n<p>SQL: Multiple statements\nSQL allows us to separate statements with ;. When we do that, only the data from the final statement will be returned.</p>\n<blockquote>\n<p>exec(<code>SELECT 1; SELECT 2 AS two</code>)\n[{two: 2}]\nHere's a code problem for you to complete:</p>\n</blockquote>\n<p>Use SQL's ; syntax to:</p>\n<p>Create a users table with a text name.\nInsert a user named \"Amir\".\nSelect the user back out.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (name TEXT); INSERT INTO users (name) VALUES ('Amir'); SELECT * FROM users</p>\n</blockquote>\n<p>`)\nGOAL:\n[{name: 'Amir'}]\nYOURS:\n[{name: 'Amir'}]\nWhen using multiple statements, later statements will always see changes made by earlier statements. That's true for INSERT, UPDATE, DELETE, and any other kind of change.</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Use ; to update Amir's name to \"Amir A\", then select all of the users.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (name TEXT)</code>)\nexec(<code>INSERT INTO users (name) VALUES ('Amir')</code>)\nexec(`\nUPDATE users SET name = 'Amir A';SELECT * FROM users</p>\n</blockquote>\n<p>`)\nGOAL:\n[{name: 'Amir A'}]\nYOURS:\n[{name: 'Amir A'}]\nUsually, ; will work like you'd expect: it's like you're calling exec multiple times. However, there's one notable exception.</p>\n<p>Many database APIs don't let us use ; with bind parameters. Our database API has that constraint: if we use both of these API features at the same time, it will cause an error. Unlike most errors in this course, this one comes from Execute Program itself, not from SQLite.</p>\n<blockquote>\n<p>// Bind parameters can't be used with multiple statements.\n// (Many database libraries have this limitation.)\nexec(<code>SELECT 1; SELECT ? AS two</code>, [1])\nError: It looks like you tried to execute multiple statements with \";\" while also using bind parameters. Many database APIs, including Execute Program's, don't allow you to do both of those at the same time. Try executing each statement in a separate call to \"exec\" instead of using semicolons. (This error is specific to Execute Program; it doesn't come from SQLite.) </p>\n<p>exec(<code>SELECT ?; SELECT ? AS two</code>, [1, 2])\nError: It looks like you tried to execute multiple statements with \";\" while also using bind parameters. Many database APIs, including Execute Program's, don't allow you to do both of those at the same time. Try executing each statement in a separate call to \"exec\" instead of using semicolons. (This error is specific to Execute Program; it doesn't come from SQLite.)\nFinish Lesson</p>\n</blockquote>\n<p>SQL: Null in unique constraints\nWhat happens if there are NULLs in a column with a UNIQUE constraint? At first glance, here's what you might expect: one NULL is allowed, but multiple NULLs will violate the UNIQUE constraint. But that would make some things very difficult in practice. Here's an example:</p>\n<p>Suppose that we have a users table with an email column, which has a UNIQUE constraint. Some users will register with a third-party authentication system like Google's, Twitter's, or GitHub's. Those users will have a NULL email address column.</p>\n<p>If a UNIQUE constraint only allowed one NULL, then only one user would be allowed to register with those third-party authentication systems. After that, all further registration attempts would violate the UNIQUE constraint.</p>\n<p>For exactly this reason, UNIQUE has special behavior for NULL. NULL values are effectively ignored by a UNIQUE constraint.</p>\n<p>(In the following examples, you can answer with error if a query will result in an error. Queries like INSERT and CREATE that return no rows will have a return value of [].)</p>\n<p>Each of these example uses this table. Each example is separate, and each starts with the table empty.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (email TEXT NULL UNIQUE)</code>)\n[] </p>\n<p>exec(<code>INSERT INTO users (email) VALUES ('amir@example.com')</code>)\nexec(<code>INSERT INTO users (email) VALUES ('betty@example.com')</code>)\n[] </p>\n<p>exec(<code>INSERT INTO users (email) VALUES (NULL)</code>)\nexec(<code>SELECT * FROM users</code>)\n[{email: null}] </p>\n<p>exec(<code>INSERT INTO users (email) VALUES ('amir@example.com')</code>)\nexec(<code>INSERT INTO users (email) VALUES ('amir@example.com')</code>)\nError: UNIQUE constraint failed: users.email </p>\n<p>exec(<code>INSERT INTO users (email) VALUES (NULL)</code>)\nexec(<code>INSERT INTO users (email) VALUES (NULL)</code>)\nexec(<code>SELECT * FROM users</code>)\n[{email: null}, {email: null}]\nSometimes, language quirks are mistakes: a language designer might not anticipate problems with the language they've designed. This NULL/UNIQUE behavior is a quirk, but it's not a language design mistake. It's an intentional choice that allows us to build databases like the one above.</p>\n</blockquote>\n<p>SQL: Referencing other tables\nUntil this lesson, every table in the course has been an island: it hasn't related to other tables. In real systems, data relates to other data. To start with a simple example: people can own cats.</p>\n<p>In a general-purpose programming language like JavaScript, we might represent that as: {name: 'Amir', cats: [{name: 'Ms. Fluff'}]}. The cats are stored as part of the person. Many SQL databases will allow us to store cats \"inside\" people in this way. However, if we use that style then we give up much of SQL's value.</p>\n<p>Instead, we'll create two separate tables. Each person will have an integer ID. Each cat will have an integer owner_id holding the owner's ID. (Remember that execing an INSERT, CREATE, etc. returns [].)</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL); CREATE TABLE cats (owner_id INTEGER NOT NULL, name TEXT NOT NULL); INSERT INTO people (id, name) VALUES (100, 'Amir'); INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');</code>)\n[] </p>\n<p>exec(<code>SELECT id FROM people WHERE name = 'Amir';</code>)\n[{id: 100}] </p>\n<p>exec(<code>SELECT name FROM cats WHERE owner_id = 100;</code>)\n[{name: 'Ms. Fluff'}] </p>\n<p>exec(<code>SELECT name FROM cats WHERE owner_id = 101;</code>)\n[]\nWe can combine the person and cat queries in a JavaScript function.</p>\n</blockquote>\n<blockquote>\n<p>function findCatNames(personName) {\nconst allCatNames = []\nconst people = exec(<code>SELECT id FROM people WHERE name = ?</code>, [personName])\nfor (const person of people) {</p>\n</blockquote>\n<pre><code>const cats = exec(`SELECT name FROM cats WHERE owner_id = ?`, [person.id])\nfor (const cat of cats) {\n  allCatNames.push(cat.name)\n}\n</code></pre>\n<p>  }\nreturn allCatNames\n}\nfindCatNames('Amir')\n['Ms. Fluff']\nOne important note about tables that reference each other. We would never create separate tables named amir<em>cats, betty</em>cats, etc. Instead, we leave all of the cats in one table. When we need to find a certain person's cats, we let the ID columns guide us.</p>\n<p>That's part of a more general rule of SQL databases: the application itself never changes the database's structure. The application doesn't create or drop tables or change columns. We set the database schema up in advance. Then the application creates, updates, and deletes rows.</p>\n<p>Having only one cats table doesn't limit us. We can select a person's cats by owner_id, even when there are multiple people with different cats:</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);\nCREATE TABLE cats (owner_id INTEGER NOT NULL, name TEXT NOT NULL);</p>\n</blockquote>\n<p>  -- Amir owns Ms. Fluff.\nINSERT INTO people (id, name) VALUES (100, 'Amir');\nINSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');</p>\n<p>  -- Betty owns Keanu.\nINSERT INTO people (id, name) VALUES (101, 'Betty');\nINSERT INTO cats (owner_id, name) VALUES (101, 'Keanu');\n`)</p>\n<p>// The database holds both Amir's and Betty's cats.\n// Selecting by owner ID lets us distinguish between them.\nexec(<code>SELECT name FROM cats WHERE owner_id = ?</code>, [100])\n[{name: 'Ms. Fluff'}]\nHere's a code problem for you to complete:</p>\n<p>Write a function to find the names of all toys owned by a certain cat.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE cats (id INTEGER PRIMARY KEY, name TEXT NOT NULL); CREATE TABLE toys (cat_id INTEGER NOT NULL, name TEXT NOT NULL); INSERT INTO cats (name) VALUES ('Ms. Fluff'); INSERT INTO cats (name) VALUES ('Keanu'); INSERT INTO toys (cat_id, name) VALUES (1, 'Birdo'); INSERT INTO toys (cat_id, name) VALUES (2, 'Mouser');</code>)\nfunction findToys(catName) {\nconst allToyNames = []</p>\n</blockquote>\n<p>  const cats = exec(<code>SELECT id FROM cats WHERE name =?</code>, [catName])\nfor (let i=0; i&#x3C;cats.length; i++){\nconst toys = exec(<code>SELECT name FROM toys WHERE cat_id =?</code>, [cats[i].id])\nfor (let j=0; j&#x3C;toys.length;j++){\nallToyNames.push(toys[j].name)\n}\n}\nreturn allToyNames\n}\nfindToys('Ms. Fluff')\nGOAL:\n['Birdo']\nYOURS:\n['Birdo']\nSQL: SQL injection\nAt first glance, SQL databases' bind parameters seem unnecessary. (Bind parameters are the ? in SELECT * FROM users WHERE id = ?.) Can't we just use string concatenation instead?</p>\n<p>Imagine that we're writing an account registration form for a web app. The user enters their email address into our form. Then we insert the email address into our database.</p>\n<p>In the next example, look at how we build the INSERT statement. We're concatenating strings to build the SQL rather than using bind parameters.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (email TEXT UNIQUE)</code>)</p>\n</blockquote>\n<p>function register(email) {\nexec(<code>INSERT INTO users (email) VALUES ('</code> + email + <code>')</code>)\n}</p>\n<p>register('amir@example.com')\nexec(<code>SELECT * FROM users</code>)\n[{email: 'amir@example.com'}]\nThat code example will technically work... if all of our users are very nice people who don't know about SQL injection attacks!</p>\n<p>In any real-world system, that code is very, very bad. It's the worst code in this course! It contains a security hole that will allow an attacker to execute any SQL that they want. They can pull data out of our database, or change it, or delete it. All they have to do is enter a carefully built string into the account registration form.</p>\n<p>Let's start by examining the way that we build the query: by combining strings with +. We'll forget about the database itself for a moment and just focus on the SQL.</p>\n<p>Be careful with the next few code examples; it's easy to make a mistake with the quotes. You may find it useful to copy and paste the strings together, emulating what JavaScript will do.</p>\n<blockquote>\n<p>const email = \"amir@example.com\"\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\n\"INSERT INTO users (email) VALUES ('amir@example.com')\" </p>\n<p>const email = \"' oh no '\"\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\n\"INSERT INTO users (email) VALUES ('' oh no '')\" </p>\n<p>const email = \"'); DROP TABLE users; --\"\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\n\"INSERT INTO users (email) VALUES (''); DROP TABLE users; --')\"\nWhat will happen if the user types that last email string into our registration form's email field? It won't result in a user with an email column of ''); DROP TABLE users; --. Instead, the combined string shown above will be executed as SQL... including the DROP TABLE after the semicolon. It will actually drop the entire users table in our production database!</p>\n</blockquote>\n<p>Let's see the SQL injection run for real, deleting the table. (Remember that you can type error if the code will error.)</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (email TEXT UNIQUE)</code>)\nexec(<code>INSERT INTO users (email) VALUES (''); DROP TABLE users; --')</code>)\nexec(<code>SELECT * FROM users</code>)\nError: no such table: users\nAnd here's a more complete version, using our original register function:</p>\n</blockquote>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (email TEXT UNIQUE)</code>)</p>\n</blockquote>\n<p>function register(email) {\nexec(<code>INSERT INTO users (email) VALUES ('</code> + email + <code>')</code>)\n}</p>\n<p>register(\"'); DROP TABLE users; --\")</p>\n<p>exec(<code>SELECT * FROM users</code>)\nError: no such table: users\nThe key to this attack is the quote (') that closes the string in our INSERT. After that point, the rest of the user's \"email address\" string is executed as SQL code.</p>\n<p>This technique is one of the most common security exploits on the Internet. It's called a \"SQL injection attack\" because the attacker injects their own SQL code into our database query. That makes this the most important lesson in this SQL course!</p>\n<p>SQL injection is still a huge real-world problem \"that will never go away\". Some people keep lists of data leaks caused by SQL injection attacks. When this lesson was written, the four most recent entries in the list included: data stolen from the government of India, patient records from a medical company, and users' financial data.</p>\n<p>One interesting question about the attack string: why is there a comment (--) at the end? Because otherwise there would be a dangling ') at the end of the combined SQL string, causing a syntax error in the SQL. The attacker adds the comment to prevent that syntax error, which would stop their attack code from running.</p>\n<p>(For the next two examples, remember that successful CREATEs and INSERTs return no rows: []. And you can answer \"error\" if the code will result in an error.)</p>\n<p>This is valid SQL:</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (email TEXT UNIQUE)</code>)\nexec(<code>INSERT INTO users (email) VALUES (''); DROP TABLE users; --')</code>)\n[]\nBut this is not, because of the mismatched single quote (') at the end:</p>\n</blockquote>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (email TEXT UNIQUE)</code>)\nexec(<code>INSERT INTO users (email) VALUES (''); DROP TABLE users;')</code>)\nError: unrecognized token: \"')\"\nThis form of SQL injection has been made even more famous by an XKCD comic about it. Take a look at the code in that comic: it's exactly the kind of attack that we just saw! It closes off a string, uses a semicolon to start a new statement, drops a table, and has a comment to avoid a syntax error.</p>\n</blockquote>\n<p>Here's a code problem for you to complete:</p>\n<p>Drop the students table by executing a \"Bobby Tables\" SQL injection attack, as made famous by XKCD. (If you get stuck, try using a text editor to manually combine your attack string with the other strings in the register function. Make sure that that combined SQL string looks right.)</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE students (name TEXT)</code>)</p>\n</blockquote>\n<p>function register(name) {\nexec(<code>INSERT INTO students (name) VALUES ('</code> + name + <code>')</code>)\n}</p>\n<p>register(\n\"Robert');DROP TABLE students; --\"</p>\n<p>)</p>\n<p>exec(<code>SELECT * FROM students</code>)\nGOAL:\nError: no such table: students\nYOURS:\nError: no such table: students\nWe've used DROP TABLE to show that an attacker can run SQL maliciously. However, deleting data isn't their only option. For example, they might UPDATE our database to become an administrator without us noticing.</p>\n<p>Like before, let's start by seeing how the attack SQL is constructed. (And like before, you may want to copy and paste the pieces of this string together.)</p>\n<blockquote>\n<p>const email = \"attacker@example.com'); UPDATE users SET admin = 1 WHERE email = 'attacker@example.com';--\"\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\n\"INSERT INTO users (email) VALUES ('attacker@example.com'); UPDATE users SET admin = 1 WHERE email = 'attacker@example.com';--')\"\nHere's a code problem for you to complete:</p>\n</blockquote>\n<p>Use a SQL injection attack to make attacker@example.com an administrator. (Note: our code here also inserts an innocent user. After the attack is executed, the innocent user shouldn't be an admin, so you'll need a WHERE on your UPDATE. The final SELECT here will return both users: attacker and innocent.)</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE users (email TEXT, admin INTEGER NOT NULL DEFAULT 0)</code>)\nexec(<code>INSERT INTO users (email) VALUES ('innocent@example.com')</code>)</p>\n</blockquote>\n<p>function register(email) {\nexec(<code>INSERT INTO users (email) VALUES ('</code> + email + <code>')</code>)\n}</p>\n<p>register(\n\"attacker@example.com'); UPDATE users SET admin = 1 WHERE email = 'attacker@example.com'; UPDATE users SET admin = 0 WHERE email = 'innocent@example.com';--'\"</p>\n<p>)</p>\n<p>exec(<code>SELECT * FROM users</code>)\nGOAL:\n[{admin: 0, email: 'innocent@example.com'}, {admin: 1, email: 'attacker@example.com'}]\nYOURS:\n[{admin: 0, email: 'innocent@example.com'}, {admin: 1, email: 'attacker@example.com'}]\nGreat! Now please never do that to anyone else's web app!</p>\n<p>SQL injection attacks are subtle, but the practical takeaway from this lesson is simple. Never concatenate SQL strings, even if it seems safe. Write your SQL in a single, self-contained string. If you need to pass dynamic data to your INSERTs, SELECTs, etc., use bind parameters. Bind parameters are carefully implemented by the database authors to inject values securely.</p>\n<p>Please don't let the direness of this warning scare you away from SQL! Avoiding SQL injection is relatively easy if you never concatenate SQL strings. And in practice, most projects use object-relational mappers or other higher-level libraries that generate SQL. When using those libraries, you'll still need to understand the concepts in this course. But the library will help you to avoid SQL injection vulnerabilities.</p>\n<p>A final note: this kind of attack can happen in other languages, too; it's not specific to SQL. If your application ever executes user input as code, then there's a potential security vulnerability. This is why most teams' linter configurations disallow the eval function. Always treat user input with care!</p>\n<p>Finish Lesson\nBrag…</p>\n<p>SQL: Foreign keys\nOne big selling point of SQL databases is correctness: the database lets us set up constraints that should never be violated. Then it makes sure that we don't accidentally violate them.</p>\n<p>We can't insert into columns that don't exist.\nWe can't insert or update nulls into NOT NULL columns.\nWe can't insert or update duplicate values in UNIQUE columns.\nIn most databases, we can't insert the wrong data type into columns. (SQLite is an anomaly here; it allows us to make this mistake.)\nWe've seen tables referencing other tables, like a cat's owner<em>id referencing a person's id. What if we make a mistake with those IDs? What if we insert a cat whose owner</em>id doesn't reference any actual person? So far, we haven't seen a way to prevent that.</p>\n<p>(Remember that statements like CREATE and INSERT return [].)</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);\n-- Remember that INTEGER PRIMARY KEYs start at 1.\nINSERT INTO people (name) VALUES ('Amir');</p>\n</blockquote>\n<p>  CREATE TABLE cats (owner<em>id INTEGER NOT NULL, name TEXT NOT NULL);\nINSERT INTO cats (owner</em>id, name) VALUES (2170, 'Ms. Fluff');\n`)\n[] </p>\n<blockquote>\n<p>exec(<code>SELECT id FROM people</code>)\n[{id: 1}] </p>\n<p>exec(<code>SELECT owner_id FROM cats WHERE name = 'Ms. Fluff'</code>)\n[{owner_id: 2170}] </p>\n<p>exec(<code>SELECT name FROM people WHERE id = 2170</code>)\n[]\nThis is a problem! The cat has an owner_id, but there's no person with that ID.</p>\n</blockquote>\n<p>Suppose that this database is being used by a cat groomer. Ms. Fluff is dropped off, gets her grooming, looks great... and the database says that her owner is person 2170, who doesn't exist. Who do we call to pick her up? The database is wrong; cats are supposed to have owners who actually exist!</p>\n<p>We can prevent this mistake with a foreign key: a column whose value must equal a value in another table. In our case, we want the database to ensure that every cat's owner_id equals some person's id.</p>\n<p>Note the new REFERENCES syntax in the cats table below.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);\nCREATE TABLE cats (</p>\n</blockquote>\n<pre><code>owner_id INTEGER REFERENCES people(id),\nname TEXT NOT NULL\n</code></pre>\n<p>  );\n`)\n[]\nThe database won't let us violate this foreign key in any way.</p>\n<p>We can't insert a cat whose owner<em>id references a person ID that doesn't exist.\nWe can't change an existing cat's owner</em>id to one that doesn't match some person.\nIf some cats reference a person, then we can't change the person's ID. That would leave the cats referencing a person ID that doesn't exist.\nFor the same reason, we can't delete a person referenced by some cats.\n(All of the following examples use the two tables above. Each example is separate, and each starts with the tables empty. Remember that you can type error to indicate an error.)</p>\n<blockquote>\n<p>exec(<code>INSERT INTO people (id, name) VALUES (100, 'Amir'); INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');</code>)\n[] </p>\n<p>exec(<code>INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu')</code>)\nError: FOREIGN KEY constraint failed </p>\n<p>exec(<code>INSERT INTO people (id, name) VALUES (100, 'Amir'); INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff'); UPDATE people SET id = 101 WHERE name = 'Amir';</code>)\nError: FOREIGN KEY constraint failed </p>\n<p>exec(<code>INSERT INTO people (id, name) VALUES (100, 'Amir'); INSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff'); UPDATE cats SET owner_id = 101 WHERE name = 'Ms. Fluff';</code>)\nError: FOREIGN KEY constraint failed </p>\n<p>exec(<code>INSERT INTO people (id, name) VALUES (200, 'Betty'); INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu'); DELETE FROM people WHERE name = 'Betty';</code>)\nError: FOREIGN KEY constraint failed </p>\n<p>exec(<code>INSERT INTO people (id, name) VALUES (200, 'Betty'); INSERT INTO cats (owner_id, name) VALUES (200, 'Keanu'); DELETE FROM cats WHERE name = 'Keanu'; DELETE FROM people WHERE name = 'Betty';</code>)\n[]\nAll of this safety comes from that one little REFERENCES in our table definition. This shows us the power of SQL's declarative constraints. We don't have to write separate code to say \"a person can't be deleted if they still have cats\", \"a cat can't be updated to have an owner ID who doesn't exist\", etc. That one REFERENCES clause prevents many kinds of mistakes.</p>\n</blockquote>\n<p>We have a nice phrase that describes preventing all of those mistakes: referential integrity. Referential as in \"concerning references from one table to another\"; and integrity as in \"the references are guaranteed to be correct\".</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Create a cats table with a TEXT name and an owner_id INTEGER foreign key that references the id column of the people table.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);</code>)\nexec(`\nCREATE TABLE cats (name TEXT, owner_id INTEGER REFERENCES people(id))</p>\n</blockquote>\n<p><code>) exec(</code>INSERT INTO cats (owner<em>id, name) VALUES (200, 'Keanu')`)\nGOAL:\nError: FOREIGN KEY constraint failed\nYOURS:\nError: FOREIGN KEY constraint failed\nWe're still allowed to UPDATE and DELETE rows in any way that satisfies the foreign key constraint. For example, we can update Keanu's owner</em>id to reference Amir instead of Betty. Then Betty can be deleted because no cats reference her any more.</p>\n<blockquote>\n<p>exec(`\n-- Ms. Fluff belongs to Amir (user 100)\nINSERT INTO people (id, name) VALUES (100, 'Amir');\nINSERT INTO cats (owner_id, name) VALUES (100, 'Ms. Fluff');</p>\n</blockquote>\n<p>  -- Keanu belongs to Betty (user 200)\nINSERT INTO people (id, name) VALUES (200, 'Betty');\nINSERT INTO cats (owner_id, name) VALUES (200, 'Keanu');</p>\n<p>  -- Keanu belongs to Amir instead of Betty\nUPDATE cats SET owner_id = 100 WHERE name = 'Keanu';</p>\n<p>  -- Delete Betty, who is no longer referenced by any cats\nDELETE FROM people WHERE name = 'Betty';\nSELECT name, owner<em>id FROM cats;\n`)\n[{name: 'Ms. Fluff', owner</em>id: 100}, {name: 'Keanu', owner_id: 100}]\nThe foreign keys were respected at every step of that change:</p>\n<p>Initially, both cats' owner<em>ids reference different people.\nWe update Keanu's owner</em>id to be 100, which is Amir's ID. Now both cats are owned by Amir.\nThen we delete Betty, which is OK because no cats reference her any more.\nSetting up these constraints takes effort. It's more work than throwing all of our data into a schemaless database with no foreign keys. However, we do this work because it saves us from other work that's more annoying, more difficult, and more error-prone.</p>\n<p>Carefully creating a schema now means that we're less likely to end up with invalid data in our production database. Our foreign key means that we'll never find \"orphaned\" cats whose owner_id references an owner who doesn't exist. If PostgreSQL ever allows us to orphan a cat, that's a bug in PostgreSQL!</p>\n<p>You may also hear people talk about \"leaked\" records, by analog to memory leaks. That means the same thing as \"orphaned\": a row that's referencing another row that no longer exists, because we didn't add a foreign key constraint.</p>\n<p>Finally, a note about terminology. Why are these called foreign keys? A key is a column that uniquely identifies a row. We've seen several tables with a numeric key called id. But we could have other types of keys. For example, users tables often have an email column that's a key: no two users ever have the same email.</p>\n<p>A cat's owner<em>id references the person's id key. From the cat's perspective, owner</em>id is referencing something \"foreign\": the id column of the people table. That's why it's a \"foreign key\".</p>\n<p>Quiz: \"Two foreign keys\"\nLet's write some code. You can solve this problem using only what you've learned in this course so far. If you need a reminder, there's a cheat sheet for all of the lessons that you've finished at the bottom-right of the page.</p>\n<p>Each test below shows some code and its result. Your goal is to get each test's actual result to match the expected result.</p>\n<p>Edit the code below until all tests pass. If you get stuck, try getting each test to pass individually.</p>\n<p>Create three tables:</p>\n<p>People have an id and a name.\nCats have an id, an owner<em>id, and a name.\nToys have a cat</em>id and a name.\nBoth IDs are integer primary keys.</p>\n<blockquote>\n<p>exec(<code>-- Deleting a person with cats fails. INSERT INTO people (id, name) VALUES (100, 'Amir'); INSERT INTO cats (id, owner_id, name) VALUES (1000, 100, 'Ms. Fluff'); INSERT INTO toys (cat_id, name) VALUES (1000, 'Birdo'); DELETE FROM people WHERE name = 'Amir';</code>)\nExpected: Error: FOREIGN KEY constraint failed OK!</p>\n<p>exec(<code>-- Deleting a cat with toys fails. INSERT INTO people (id, name) VALUES (100, 'Amir'); INSERT INTO cats (id, owner_id, name) VALUES (1000, 100, 'Ms. Fluff'); INSERT INTO toys (cat_id, name) VALUES (1000, 'Birdo'); DELETE FROM cats WHERE name = 'Ms. Fluff';</code>)\nExpected: Error: FOREIGN KEY constraint failed OK!</p>\n<p>exec(<code>-- Changing a toy's cat_id fails. INSERT INTO people (id, name) VALUES (100, 'Amir'); INSERT INTO cats (id, owner_id, name) VALUES (1000, 100, 'Ms. Fluff'); INSERT INTO toys (cat_id, name) VALUES (1000, 'Birdo'); UPDATE toys SET cat_id = 1001 WHERE name = 'Birdo';</code>)\nExpected: Error: FOREIGN KEY constraint failed OK!\n3 tests, 0 failures\nexec(`\nCREATE TABLE people (name TEXT, id INTEGER UNIQUE);\nCREATE TABLE cats (name TEXT, id INTEGER UNIQUE, owner<em>id REFERENCES people(id));\nCREATE TABLE toys (name TEXT, cat</em>id INTEGER REFERENCES cats(id));</p>\n</blockquote>\n<p>`)</p>\n<p>const email = \"'); DROP TABLE users; --\"\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\n\"INSERT INTO users (email) VALUES (''); DROP TABLE users; --')\"  </p>\n<p>SQL: On conflict do nothing\nSuppose that we want to track whether the cats have been vaccinated. Vaccination only needs to happen once, so we don't need to track a vaccination count. If a cat exists in the vaccinations table, then they've been vaccinated.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE vaccinations (cat_name TEXT UNIQUE NOT NULL)</code>)\nexec(<code>INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')</code>)\nexec(<code>SELECT * FROM vaccinations</code>)\n[{cat_name: 'Ms. Fluff'}]\nThe fact that Ms. Fluff is in the vaccinations table tells us that she's been vaccinated. But what if she's accidentally vaccinated a second time, and we try to insert her again? (Remember that the cat_name column has a UNIQUE constraint.)</p>\n</blockquote>\n<blockquote>\n<p>exec(<code>CREATE TABLE vaccinations (cat_name TEXT UNIQUE NOT NULL)</code>)\nexec(<code>INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')</code>)\nexec(<code>INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')</code>)\nError: UNIQUE constraint failed: vaccinations.cat_name\nThis isn't what we want! She was already vaccinated, so vaccinating her again shouldn't change this table.</p>\n</blockquote>\n<p>We could use JavaScript's catch to catch the error, but there's a better way. SQL allows us to specify what happens when there's a conflict (that is, when a constraint is violated).</p>\n<p>The simplest thing that we can do is nothing at all: when there's a conflict, we ignore it. In SQL terms, we tell the database ON CONFLICT, the column that might conflict (cat_name), and what to do (DO NOTHING). The insert is aborted, so nothing in the database changes.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE vaccinations (cat_name TEXT UNIQUE NOT NULL)</code>)\nexec(<code>INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')</code>)\nexec(<code>INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff') ON CONFLICT (cat_name) DO NOTHING</code>)\nexec(<code>SELECT * FROM vaccinations</code>)\n[{cat_name: 'Ms. Fluff'}]\nON CONFLICT ... DO NOTHING is useful whenever you want to make sure that a certain row exists, but don't need to do anything if it already exists.</p>\n</blockquote>\n<p>Imagine that we allow users to request deactivation of their accounts. To do that, they email support, and the support representative deactivates the account for them. We track the date that the account was deactivated.</p>\n<p>Sometimes, a user will request account deactivation again because they forget that they're already deactivated. When that happens, we don't create another deactivation record, and we don't change the deactivation date. The support representative still tells our system to deactivate the account, but the system uses ON CONFLICT (...) DO NOTHING to ignore the request.</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Amir requested account deactivation on 2025-10-03. We deactivated his account as requested. Then they requested deactivation again on 2025-10-22. We want that request to be ignored, and it shouldn't change the deactivation date. Finish the final INSERT here to use ON CONFLICT to ignore the deactivation request if the account is already deactivated.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n</code></pre>\n<p>  )\n<code>) exec(</code>\nCREATE TABLE deactivations (\nuser<em>id UNIQUE REFERENCES users(id),\ndate TEXT NOT NULL\n)\n<code>) exec(</code>INSERT INTO users (name) VALUES ('Amir')<code>) exec(</code>INSERT INTO deactivations (user</em>id, date) VALUES (1, '2025-10-03')<code>) exec(</code>\nINSERT INTO deactivations (user<em>id, date) VALUES (1, '2025-10-22')\nON CONFLICT (user</em>id) DO NOTHING</p>\n<p><code>) exec(</code>SELECT * FROM deactivations`)\nGOAL:\n[{date: '2025-10-03', user_id: 1}]\nYOURS:\n[{date: '2025-10-03', user_id: 1}] </p>\n<p>SQL: Constraint analysis\nWhat if a foreign key column is null? By default, that's allowed. A cat with a null owner_id means \"this cat has no owner\".</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT NOT NULL);\nCREATE TABLE cats (</p>\n</blockquote>\n<pre><code>owner_id INTEGER REFERENCES people(id),\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nINSERT INTO cats (owner<em>id, name) VALUES (null, 'Ms. Fluff');\nSELECT * FROM cats;\n`)\n[{name: 'Ms. Fluff', owner</em>id: null}]\nThe database lets us do this because we might want it! For example, imagine that we're building a site where users can register with discount codes. Some users register with a discount code, but others don't. We want to track which users registered with which discount codes.</p>\n<p>This sounds simple, but there are a few subtle decisions to be made. Let's do some analysis to come up with appropriate database constraints.</p>\n<p>Our database will have two tables, discounts (id, discount<em>code) and users (id, discount</em>id, name). We'll analyze the three most common types of constraints: foreign keys, nullability, and uniqueness.</p>\n<p>First: should users' discount<em>id be a foreign key to discounts? Yes! Otherwise users could reference discounts that don't exist, which doesn't make sense.\nSecond: should every user have a discount</em>id, or is it OK for some of them to be null? Some users will register without using a discount code. For those users, discount<em>id should be null. So discount</em>id should be nullable.\nThird: can two users reference the same discount? This is a more subtle decision.\nIn some systems, discount codes can be used many times; in others, they can only be used once. We'll decide that discount codes can only be used once. We can guarantee that by making users' discount<em>id unique. If no two users can have the same discount</em>id, then no discount code can be used twice.</p>\n<p>That gives us three constraint decisions:</p>\n<p>Users' discount<em>id is a foreign key to discounts.\nUsers' discount</em>id is nullable.\nUsers' discount_id is unique.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\ndiscount_id INTEGER REFERENCES discounts(id) NULL UNIQUE\n</code></pre>\n<p>  );\nCREATE TABLE discounts (id INTEGER PRIMARY KEY, discount_code TEXT NOT NULL);\n`)\n[]\nNow let's make sure that these tables work as intended. We'll run four different checks.</p>\n<p>(Each of these examples uses the tables above, but the tables always begin empty. If you think that a statement will cause an error, you can type error as its output. Remember that executing a successful INSERT returns [].)</p>\n<p>First, users can't reference discounts that don't exist.</p>\n<blockquote>\n<p>exec(<code>INSERT INTO users (name, discount_id) VALUES ('Amir', 1234)</code>)\nError: FOREIGN KEY constraint failed\nSecond, users can register with no discount at all (discount_id can be null).</p>\n</blockquote>\n<blockquote>\n<p>exec(<code>INSERT INTO users (name, discount_id) VALUES ('Amir', null)</code>)\n[]\nThird, users can reference discounts that do exist.</p>\n</blockquote>\n<blockquote>\n<p>exec(<code>INSERT INTO discounts (id, discount_code) VALUES (1, 'one-time-use-a1b2c3'); INSERT INTO users (name, discount_id) VALUES ('Amir', 1);</code>)\n[]\nFourth, two users can't reference the same discount. (Amir uses the discount, then shares it with Betty, who tries to use it.)</p>\n</blockquote>\n<blockquote>\n<p>exec(`\nINSERT INTO discounts (id, discount<em>code) VALUES (1, 'one-time-use-a1b2c3');\nINSERT INTO users (name, discount</em>id)</p>\n</blockquote>\n<pre><code>VALUES\n  ('Amir', 1),\n  ('Betty', 1);\n</code></pre>\n<p>`)\nError: UNIQUE constraint failed: users.discount<em>id\nAs you gain experience with SQL, you'll learn patterns about when certain constraints are appropriate. For example, users' email addresses are usually TEXT NOT NULL UNIQUE. An is</em>admin flag will usually be BOOLEAN NOT NULL DEFAULT FALSE. And so on.</p>\n<p>Foreign keys are more tricky. For foreign keys, it's a good idea to always slow down and explicitly ask the questions that we asked above:</p>\n<p>\"Is it OK for a row to have no value for this foreign key?\"\n\"Is it OK for two rows to have the same value for this foreign key?\"\nHere's another example where we ask the same questions, but get very different answers. Users can post comments. Each comment has a user_id referencing the user who posted it. Now, the analysis questions:</p>\n<p>First: should user<em>id be a foreign key to users? Yes! We don't want the database to think that a comment was posted by someone who doesn't exist.\nSecond: should every comment have a user</em>id, or is it OK for some of them to have a null user<em>id? Every comment is posted by someone (unless the computer is haunted by ghosts). So comments' user</em>id should be NOT NULL.\nThird: can two comments reference the same user? Like before, this one is more subtle.\nIf only one comment can reference a given user, then trying to insert a second comment by the same user will error. A system with that constraint would only allow each user to post exactly one comment, ever. We want users to post multiple comments, so the comments' user_id foreign key should not be unique.</p>\n<p>Again, we have three constraint decisions. But when compared to the user/discount example, we've made opposite decisions about nullability and uniqueness:</p>\n<p>Comments' user<em>id is a foreign key to users (the same as user/discount).\nComments' user</em>id is not nullable (the opposite of user/discount).\nComments' user_id is not unique (the opposite of user/discount).</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE comments (\nuser<em>id REFERENCES users(id) NOT NULL,\ncomment</em>text TEXT NOT NULL\n);\n`)\n[]\nNow let's check each of those constraints, like we did for the user/discount example. (Each of these examples uses the tables above, but the tables always begin empty.)</p>\n<p>First, comments can't reference users that don't exist.</p>\n<blockquote>\n<p>exec(`\nINSERT INTO comments (user<em>id, comment</em>text)</p>\n</blockquote>\n<pre><code>VALUES (1, 'Ms. Fluff needs a bath!');\n</code></pre>\n<p>`)\nError: FOREIGN KEY constraint failed\nSecond, comments must reference a user (user_id can't be null).</p>\n<blockquote>\n<p>exec(`\nINSERT INTO comments (user<em>id, comment</em>text)</p>\n</blockquote>\n<pre><code>VALUES (null, 'Ms. Fluff needs a bath!');\n</code></pre>\n<p>`)\nError: NOT NULL constraint failed: comments.user_id\nThird, comments can reference users that exist.</p>\n<blockquote>\n<p>exec(`\nINSERT INTO users (id, name) VALUES (1, 'Amir');\nINSERT INTO comments (user<em>id, comment</em>text)</p>\n</blockquote>\n<pre><code>VALUES (1, 'Ms. Fluff needs a bath!');\n</code></pre>\n<p>`)\n[]\nFourth, two comments can reference the same user.</p>\n<blockquote>\n<p>exec(`\nINSERT INTO users (id, name) VALUES (1, 'Amir');\nINSERT INTO comments (user<em>id, comment</em>text)</p>\n</blockquote>\n<pre><code>VALUES\n  (1, 'Ms. Fluff needs a bath!'),\n  (1, 'Ms. Fluff strongly dislikes water.');\n</code></pre>\n<p>`)\n[]\nOur user/discount example is what's often called a \"one-to-one\" relationship. Each user relates to zero or one discounts, and each discount relates to zero or one users. A user never has multiple discounts, and a discount is never used by multiple users.</p>\n<p>The user/comment example is a \"one-to-many\" relationship. One user can have many comments, but a comment is only related to one user.</p>\n<p>Shorthand terms like one-to-one and one-to-many are useful for talking to other developers, but the database doesn't know what they mean. The database only knows about constraints. Even if you use shorthand with other humans, you have to make decisions about the individual constraints in your tables:</p>\n<p>Should this column be a foreign key?\nCan this column be null?\nCan multiple rows have the same value for this column?</p>\n<p>Quiz: \"Discounts and users and comments\"\nLet's write some code. You can solve this problem using only what you've learned in this course so far. If you need a reminder, there's a cheat sheet for all of the lessons that you've finished at the bottom-right of the page.</p>\n<p>Each test below shows some code and its result. Your goal is to get each test's actual result to match the expected result.</p>\n<p>Edit the code below until all tests pass. If you get stuck, try getting each test to pass individually.</p>\n<p>Create users, discounts, and comments tables. A user can have one discount (but may have no discount at all). Many comments can belong to the same user.</p>\n<p>We've given you the basic table structure. However, the constraints are missing (foreign keys, nullability, and uniqueness). Insert the appropriate constraints, using the tests as a guide.</p>\n<blockquote>\n<p>// Users can't reference discounts that don't exist.\nexec(<code>INSERT INTO users (name, discount_id) VALUES ('Amir', 1234)</code>)\nExpected: Error: FOREIGN KEY constraint failed OK!</p>\n<p>// Users can have no discount.\nexec(<code>INSERT INTO users (name, discount_id) VALUES ('Amir', null)</code>)\nExpected: [] OK!</p>\n<p>// Two users can't reference the same discount.\nexec(<code>INSERT INTO discounts (id, discount_code) VALUES (1, 'one-time-use-a1b2c3')</code>)\nexec(<code>INSERT INTO users (name, discount_id) VALUES ('Amir', 1)</code>)\nexec(<code>INSERT INTO users (name, discount_id) VALUES ('Betty', 1)</code>)\nExpected: Error: UNIQUE constraint failed: users.discount_id OK!</p>\n<p>// Comments can't reference users that don't exist.\nexec(<code>INSERT INTO comments (user_id, comment_text) VALUES (1, 'Ms. Fluff needs a bath!')</code>)\nExpected: Error: FOREIGN KEY constraint failed OK!</p>\n<p>// Comments can't have a null user reference.\nexec(<code>INSERT INTO comments (user_id, comment_text) VALUES (null, 'Ms. Fluff needs a bath!')</code>)\nExpected: Error: NOT NULL constraint failed: comments.user_id OK!</p>\n<p>// Comments can reference a user.\nexec(<code>INSERT INTO users (id, name) VALUES (1, 'Amir')</code>)\nexec(<code>INSERT INTO comments (user_id, comment_text) VALUES (1, 'Ms. Fluff needs a bath!')</code>)\nExpected: [] OK!</p>\n<p>// Comments can reference users which themselves reference discounts.\nexec(<code>INSERT INTO discounts (id, discount_code) VALUES (1, 'one-time-use-a1b2c3')</code>)\nexec(<code>INSERT INTO users (id, name, discount_id) VALUES (1, 'Amir', 1)</code>)\nexec(<code>INSERT INTO comments (user_id, comment_text) VALUES (1, 'Ms. Fluff strongly dislikes water.')</code>)\nExpected: [] OK!\n7 tests, 0 failures\nexec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\ndiscount_id INTEGER UNIQUE REFERENCES discounts(id),\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE discounts (\nid INTEGER PRIMARY KEY,\ndiscount<em>code TEXT NULL\n);\nCREATE TABLE comments (\nuser</em>id INTEGER NOT NULL REFERENCES users(id),\ncomment_text TEXT NOT NULL\n);\n`)</p>\n<p>SQL: Review\nIt's time to review! These examples are all taken from lessons that you've finished. Revisiting them makes sure that you haven't forgotten anything.</p>\n<p>Type in what each expression will evaluate to. For example, for the prompt 1 + 1, you would type 2.</p>\n<p>In this course, the exec function runs SQL code. It returns database rows as arrays of objects like [{name: 'Amir'}]. When you execute SQL statements that don't return data, like INSERT and UPDATE, exec returns []. You can type error if the code will result in an error.</p>\n<blockquote>\n<p>exec(<code>CREATE TABLE vaccinations (cat_name TEXT UNIQUE NOT NULL)</code>)\nexec(<code>INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff')</code>)\nexec(<code>INSERT INTO vaccinations (cat_name) VALUES ('Ms. Fluff') ON CONFLICT (cat_name) DO NOTHING</code>)\nexec(<code>SELECT * FROM vaccinations</code>)\n[{cat_name: 'Ms. Fluff'}] </p>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE comments (\nuser<em>id REFERENCES users(id) NOT NULL,\ncomment</em>text TEXT NOT NULL\n);\n<code>) exec(</code>\nINSERT INTO comments (user<em>id, comment</em>text)\nVALUES (null, 'Ms. Fluff needs a bath!');\n`)\nerror </p>\n<blockquote>\n<p>const email = \"'); DROP TABLE users; --\"\n\"INSERT INTO users (email) VALUES ('\" + email + \"')\"\n\"INSERT INTO users (email) VALUES (''); DROP TABLE users; --')\" </p>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE comments (\nuser<em>id REFERENCES users(id) NOT NULL,\ncomment</em>text TEXT NOT NULL\n);\n<code>) exec(</code>\nINSERT INTO users (id, name) VALUES (1, 'Amir');\nINSERT INTO comments (user<em>id, comment</em>text)\nVALUES\n(1, 'Ms. Fluff needs a bath!'),\n(1, 'Ms. Fluff strongly dislikes water.');\n`)\n[] </p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\ndiscount_id INTEGER REFERENCES discounts(id) NULL UNIQUE\n</code></pre>\n<p>  );\nCREATE TABLE discounts (id INTEGER PRIMARY KEY, discount<em>code TEXT NOT NULL);\n<code>) exec(</code>\nINSERT INTO users (name, discount</em>id) VALUES ('Amir', null)\n`)\n[]\nHere's a code problem for you to complete:</p>\n<p>Amir requested account deactivation on 2025-10-03. We deactivated his account as requested. Then they requested deactivation again on 2025-10-22. We want that request to be ignored, and it shouldn't change the deactivation date. Finish the final INSERT here to use ON CONFLICT to ignore the deactivation request if the account is already deactivated.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n</code></pre>\n<p>  )\n<code>) exec(</code>\nCREATE TABLE deactivations (\nuser<em>id UNIQUE REFERENCES users(id),\ndate TEXT NOT NULL\n)\n<code>) exec(</code>INSERT INTO users (name) VALUES ('Amir')<code>) exec(</code>INSERT INTO deactivations (user</em>id, date) VALUES (1, '2025-10-03')<code>) exec(</code>\nINSERT INTO deactivations (user<em>id, date) VALUES (1, '2025-10-22')\nON CONFLICT (user</em>id) DO NOTHING</p>\n<p><code>) exec(</code>SELECT * FROM deactivations`)\nGOAL:\n[{date: '2025-10-03', user_id: 1}]\nYOURS:\n[{date: '2025-10-03', user_id: 1}] </p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\ndiscount_id INTEGER REFERENCES discounts(id) NULL UNIQUE\n</code></pre>\n<p>  );\nCREATE TABLE discounts (id INTEGER PRIMARY KEY, discount<em>code TEXT NOT NULL);\n<code>) exec(</code>\nINSERT INTO discounts (id, discount</em>code) VALUES (1, 'one-time-use-a1b2c3');\nINSERT INTO users (name, discount_id)\nVALUES\n('Amir', 1),\n('Betty', 1);\n`)\nerror </p>\n<p>SQL: Simple joins\nForeign keys let us guarantee that rows in one table correctly reference rows in another table. With that guarantee in place, we can ask the database system to combine the tables' data for us.</p>\n<p>In this lesson, our goal is to produce a list of every cat's name, along with their owner's name. We could write that code in JavaScript, using a nested loop that executes one cat query per person. But that would be inefficient. SQL can do it in one query!</p>\n<p>Here's our cats-and-owners database. (We'll use this database throughout this lesson, but it will always begin empty in each code example.)</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY NOT NULL,\nfirst_name TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE cats (\nid INTEGER PRIMARY KEY NOT NULL,\nowner_id INTEGER NOT NULL REFERENCES people(id),\nname TEXT NOT NULL\n);</p>\n<p>  -- Amir has a cat named Ms. Fluff.\nINSERT INTO people (id, first<em>name) VALUES (100, 'Amir');\nINSERT INTO cats (owner</em>id, name) VALUES (100, 'Ms. Fluff');</p>\n<p>  -- Betty has a cat named Keanu.\nINSERT INTO people (id, first<em>name) VALUES (200, 'Betty');\nINSERT INTO cats (owner</em>id, name) VALUES (200, 'Keanu');\n`)\n[]\nWe can build our cats-and-owners list by JOINing the two tables together into one. First, we'll do the simplest possible join: people JOIN cats, giving us combinations of every person with every cat. (It will look strange, so we don't recommend dwelling on it; we'll improve it soon.)</p>\n<blockquote>\n<p>exec(<code>SELECT * FROM people JOIN cats</code>)\n[{first<em>name: 'Amir', id: 1, name: 'Ms. Fluff', owner</em>id: 100}, {first<em>name: 'Amir', id: 2, name: 'Keanu', owner</em>id: 200}, {first<em>name: 'Betty', id: 1, name: 'Ms. Fluff', owner</em>id: 100}, {first<em>name: 'Betty', id: 2, name: 'Keanu', owner</em>id: 200}]\nThe join gave us every combination of a person and a cat, whether or not they're related via owner_id. There are 2 people and 2 cats, so the join gave us 4 rows (2 * 2):</p>\n</blockquote>\n<p>Amir and Ms. Fluff\nAmir and Keanu\nBetty and Ms. Fluff\nBetty and Keanu\nIf we had 100 people and 100 cats then this join would give us 10,000 rows: each of the 100 people would be independently combined with each of the 100 cats. You can think of it like this:</p>\n<p>For each person in the people table:\nFor each cat in the cats table:\nReturn a row with the columns from that person and this cat.\nThe join has all of the columns from people (id and first<em>name) and all of the columns from cats (id, name, and owner</em>id). Both tables have an id column, which is awkward because we can't have two columns with the same name. The cats' ids are \"winning\" here, so we see them rather than the peoples' ids. We'll address the issue of conflicting column names in more detail later.</p>\n<p>To make our join more useful, we can add an ON clause. ON is like WHERE, but it applies specifically to joins. We \"select where\", but we \"join on\". For our cats-and-owners list, we want all pairs of people and cats where people.id equals cats.owner_id:</p>\n<blockquote>\n<p>exec(<code>SELECT * FROM people JOIN cats ON people.id = cats.owner_id</code>)\n[{first<em>name: 'Amir', id: 1, name: 'Ms. Fluff', owner</em>id: 100}, {first<em>name: 'Betty', id: 2, name: 'Keanu', owner</em>id: 200}]\nThis is much better! Our condition was people.id = cats.owner<em>id, so people and cats get matched up. For example, the cat with owner</em>id 100 gets joined with person 100: Amir gets matched with Ms. Fluff. Because our cats table has a FOREIGN KEY that associates cats.owner_id to people.id, we know our cats will always be matched with their correct owner!</p>\n</blockquote>\n<p>There's a simple rule for thinking about what a join will do. It's always correct to think about basic JOINs as two nested loops with a filter, like this:</p>\n<p>For each person in the people table:\nFor each cat in the cats table:\nIf the ON condition is true for this person and this cat:\nReturn a row with the columns from this person and this cat.\nHere's a code problem for you to complete:</p>\n<p>Write a JOIN that joins people and cats on cats.owner_id = people.id. Make sure that you join people to cats, in that order.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY NOT NULL,\nfirst_name TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE cats (\nid INTEGER PRIMARY KEY NOT NULL,\nowner_id INTEGER NOT NULL REFERENCES people(id),\nname TEXT NOT NULL\n);</p>\n<p>  -- Amir owns Ms. Fluff\nINSERT INTO people (id, first<em>name) VALUES (100, 'Amir');\nINSERT INTO cats (owner</em>id, name) VALUES (100, 'Ms. Fluff');</p>\n<p>  -- Betty owns Keanu\nINSERT INTO people (id, first<em>name) VALUES (200, 'Betty');\nINSERT INTO cats (owner</em>id, name) VALUES (200, 'Keanu');\n<code>) exec(</code>\nSELECT * FROM people JOIN cats ON cats.owner_id = people.id</p>\n<p>`)\nGOAL:\n[{first<em>name: 'Amir', id: 1, name: 'Ms. Fluff', owner</em>id: 100}, {first<em>name: 'Betty', id: 2, name: 'Keanu', owner</em>id: 200}]\nYOURS:\n[{first<em>name: 'Amir', id: 1, name: 'Ms. Fluff', owner</em>id: 100}, {first<em>name: 'Betty', id: 2, name: 'Keanu', owner</em>id: 200}]\nWith our cats and owners matched, we can pick the columns that we want with AS, like we've done for more basic SELECTs. (For example, SELECT name AS person, age AS oldness FROM some<em>table.) In a JOIN, data is identified by the table it comes from, like people.first</em>name AS person.</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Write a JOIN that joins people and cats on cats.owner_id = people.id. Using AS, return data in the form of [{person: 'Amir', cat: 'Ms. Fluff'}]</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY NOT NULL,\nfirst_name TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE cats (\nid INTEGER PRIMARY KEY NOT NULL,\nowner_id INTEGER NOT NULL REFERENCES people(id),\nname TEXT NOT NULL\n);</p>\n<p>  INSERT INTO people (id, first<em>name) VALUES (100, 'Amir');\nINSERT INTO cats (id, owner</em>id, name) VALUES (1, 100, 'Ms. Fluff');\nINSERT INTO people (id, first<em>name) VALUES (200, 'Betty');\nINSERT INTO cats (id, owner</em>id, name) VALUES (2, 200, 'Keanu');\n<code>) exec(</code>\nSELECT people.first<em>name AS person, cats.name AS cat FROM people JOIN cats ON cats.owner</em>id = people.id</p>\n<p>`)\nGOAL:\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\nYOURS:\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\nUsually, the order of tables in a join doesn't matter: cats JOIN people is the same as people JOIN cats. There are two cases where join order may matter, though, depending on your database system.</p>\n<p>The first case is query optimization. In rare cases, your database engine may optimize a complex join badly, causing it to be slower than it could be. Reordering the join may help.</p>\n<p>The second case is when there are duplicate column names. When the joined tables have duplicate column names, the last table in the JOIN wins. Here's an example from earlier in the lesson: we select from people JOIN cats with no AS to alias the column names.</p>\n<blockquote>\n<p>exec(<code>SELECT * FROM people JOIN cats ON people.id = cats.owner_id</code>)\n[{first<em>name: 'Amir', id: 1, name: 'Ms. Fluff', owner</em>id: 100}, {first<em>name: 'Betty', id: 2, name: 'Keanu', owner</em>id: 200}]\nNotice that the id columns returned are the cats' IDs: 1 and 2. If we reverse the order and select cats JOIN people, the id column will be the people's IDs, 100 and 200.</p>\n</blockquote>\n<blockquote>\n<p>exec(<code>SELECT * FROM cats JOIN people ON people.id = cats.owner_id</code>)\n[{first<em>name: 'Amir', id: 100, name: 'Ms. Fluff', owner</em>id: 100}, {first<em>name: 'Betty', id: 200, name: 'Keanu', owner</em>id: 200}]\nIt's common for tables to have the same column names, especially for id columns. This can get very confusing, so it's best to use AS to explicitly alias every joined column, rather than blindly selecting *. That will make your SQL code more clear to other programmers. We recommend writing those aliases on their own lines, indented inside the SELECT.</p>\n</blockquote>\n<blockquote>\n<p>exec(`\nSELECT</p>\n</blockquote>\n<pre><code>cats.id AS cat_id,\npeople.id AS person_id\n</code></pre>\n<p>  FROM people JOIN cats ON people.id = cats.owner<em>id\n`)\n[{cat</em>id: 1, person<em>id: 100}, {cat</em>id: 2, person_id: 200}]\nWe've been treating JOIN as if it returns a table. The proper term is \"relation\", which means: \"it has rows and columns and supports operations like WHERE, AS, JOIN, etc.\"</p>\n<p>(If a join combines two relations into a new relation, does that mean that we can join on the result of a join? Yes! We'll see that in a later lesson.)</p>\n<p>Relations are the core concept in SQL databases. We've called them \"SQL databases\" so far, but \"relational databases\" is a more correct term. SQL is just the most popular relational query language.</p>\n<p>There are many kind of relations. A table is a relation stored on the disk. A join gives us a relation that the database constructs on the fly based on our join condition.</p>\n<p>Even SELECT 1 gives us a relation: it has one row with one column named 1. That's why execing that statement gives us an array of objects, as if we were selecting from a table: [{'1': 1}]. We could join a table against SELECT 1 if we wanted to!</p>\n<p>When querying relations, we can use all of the query operations that we've already seen on tables: AS, WHERE, etc. In the example above, we already did that with AS.</p>\n<p>When we use WHERE with joins, it filters the rows, just like it does with a normal table. The WHERE can see columns from both of the joined tables.</p>\n<blockquote>\n<p>exec(`\nSELECT people.first_name AS person, cats.name AS cat\nFROM people\nJOIN cats</p>\n</blockquote>\n<pre><code>ON people.id = cats.owner_id\n</code></pre>\n<p>  WHERE people.first_name = 'Amir'\n`)\n[{cat: 'Ms. Fluff', person: 'Amir'}] </p>\n<blockquote>\n<p>exec(`\nSELECT people.first_name AS person, cats.name AS cat\nFROM people\nJOIN cats</p>\n</blockquote>\n<pre><code>ON people.id = cats.owner_id\n</code></pre>\n<p>  WHERE people.first<em>name = 'Betty'\n`)\n[{cat: 'Keanu', person: 'Betty'}]\nWhat if we join people and cats, but some people have no cats? They won't show up in the results because ON people.id = cats.owner</em>id is never true for a person with no cats.</p>\n<p>For example: Betty's id is 200. If no cat's owner_id is 200, then no cat can be paired with Betty in our JOIN. Betty won't show up at all in the results. Amir and Ms. Fluff will still show up because they're still related.</p>\n<blockquote>\n<p>exec(`\n-- Delete Keanu, so Betty now has no cats.\nDELETE FROM cats WHERE owner_id = 200;</p>\n</blockquote>\n<p>  SELECT people.first<em>name AS person, cats.name AS cat\nFROM people\nJOIN cats\nON people.id = cats.owner</em>id\n`)\n[{cat: 'Ms. Fluff', person: 'Amir'}]\nWhen a person has multiple cats, the JOIN will find them all.</p>\n<p>One important note, though. Suppose that Betty owns two cats, Keanu and Kim. The query will NOT combine the cats' names into an array like [{person: 'Betty', cat: ['Keanu', 'Kim']}]. Instead, the join returns two separate rows:</p>\n<p>{person: 'Betty', cat: 'Keanu'}\n{person: 'Betty', cat: 'Kim'}</p>\n<blockquote>\n<p>exec(`\n-- Betty also has a cat named Kim\nINSERT INTO cats (owner_id, name) VALUES (200, 'Kim');</p>\n</blockquote>\n<p>  SELECT\npeople.first<em>name AS person,\ncats.name AS cat\nFROM people\nJOIN cats\nON people.id = cats.owner</em>id\nWHERE people.first_name = 'Betty'\n`)\n[{cat: 'Keanu', person: 'Betty'}, {cat: 'Kim', person: 'Betty'}]\nHere's a code problem for you to complete:</p>\n<p>Use a join to find cats and their toys. The join should return two columns aliased with AS: cat (the cat's name) and toy (the toy's name).</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE cats (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY NOT NULL,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE toys (\ncat_id INTEGER REFERENCES cats(id) NOT NULL,\nname TEXT NOT NULL\n);</p>\n<p>  INSERT INTO cats (id, name) VALUES (1, 'Ms. Fluff');\nINSERT INTO cats (id, name) VALUES (2, 'Keanu');\nINSERT INTO toys (cat<em>id, name) VALUES (1, 'Birdo');\nINSERT INTO toys (cat</em>id, name) VALUES (2, 'Mouser');\nINSERT INTO toys (cat<em>id, name) VALUES (2, 'Shy Guy');\n<code>) exec(</code>\nSELECT cats.name AS cat, toys.name AS toy FROM cats JOIN toys ON cats.id = toys.cat</em>id</p>\n<p>`)\nGOAL:\n[{cat: 'Ms. Fluff', toy: 'Birdo'}, {cat: 'Keanu', toy: 'Mouser'}, {cat: 'Keanu', toy: 'Shy Guy'}]\nYOURS:\n[{cat: 'Ms. Fluff', toy: 'Birdo'}, {cat: 'Keanu', toy: 'Mouser'}, {cat: 'Keanu', toy: 'Shy Guy'}]\nYou'll sometimes see the \"simple\" joins from this lesson called \"inner joins\", which is the full technical term for them. We can even write cats INNER JOIN toys if we like. However, that does exactly the same thing, so it's not necessary.</p>\n<p>The existence of \"inner\" joins implies that there are also \"outer\" joins, and it's true! They're much less common, so we won't look at them in detail. We will see one type of outer join in a later lesson, though.</p>\n<p>SQL: On conflict update\nImagine that we want to track how many times someone has visited our website. If a person has never visited, no row exists for them. When a person visits, a row is created or updated to reflect how many times they've visited.</p>\n<p>The SQL features that we've learned so far aren't sufficient to directly express this kind of \"create-or-update\" logic. We'll have to do it in JavaScript instead. First, we query the table to see whether any visits row exists for this person's email address. If a row exists then we update it. Otherwise, we create a new row.</p>\n<p>In this example, our first call to the visit() will create the visits row. Then the second call will notice that existing row and update it.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE visits (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\n-- email is unique because we only want one row per person\nemail TEXT UNIQUE NOT NULL,\ncount INTEGER NOT NULL\n</code></pre>\n<p>  )\n`)</p>\n<p>function visit(email) {\nconst visits = exec(\n\"SELECT * FROM visits WHERE email = ?\",\n[email]\n)</p>\n<p>  if (visits.length === 0) {\nexec(\n\"INSERT INTO visits (email, count) VALUES (?, ?)\",\n[email, 1]\n)\n} else {\nconst visit = visits[0]\nexec(\n\"UPDATE visits SET count = ? WHERE id = ?\",\n[visit.count + 1, visit.id]\n)\n}\n}</p>\n<p>visit('amir@example.com')\nvisit('amir@example.com')\nexec(<code>SELECT email, count FROM visits</code>)\n[{count: 2, email: 'amir@example.com'}]\nThat worked, but there's a subtle problem that will bite us in practice. We need to make two observations to see it:</p>\n<p>First: imagine that a user hits the refresh button while a page is loading. That causes two requests to our servers with very little time between them. If our luck is bad, the two requests will end up running at the same time on two different physical servers.</p>\n<p>Second: our SELECT and INSERT queries are executed separately, so there's always a small delay between them. It's possible for server 2 to execute its SELECT after server 1's SELECT, but before server 1's INSERT.</p>\n<p>Here's a step-by-step view of the problem:</p>\n<p>Server 1 does its SELECT and sees nothing.\nServer 2 does its SELECT and sees nothing.\nServer 1 does its INSERT.\nServer 2 does its INSERT. But there's already a record for this email address, so this insert violates the UNIQUE constraint on email. An exception is thrown!\nThese bugs are called \"race conditions\": the two servers are \"racing\" to complete their write, and the slower server \"loses\" the race. This may seem like a nitpick: how likely is it that this will actually happen?</p>\n<p>It's relatively unlikely for any given request. However, unlikely problems become likely at scale. If our site gets 1,000,000 requests per month, then one-in-a-million situations will happen once per month. This happens in practice: recently, two Execute Program users saw error pages caused by a UNIQUE constraint violation, which in turn was caused by exactly this kind of race condition!</p>\n<p>Fortunately, SQL gives us a way to shorten this code while simultaneously fixing the bug. There's already a UNIQUE constraint on visits' email column, because we only want to maintain one row per visitor. If we try to insert two rows for the same person, it will be an error. This is the same constraint violation error that showed up in our race condition bug.</p>\n<p>(When you think that code in this course will cause an error, you can type error as its output.)</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE visits (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\n-- email is unique because we only want one row per person\nemail TEXT UNIQUE NOT NULL,\ncount INTEGER NOT NULL\n</code></pre>\n<p>  )\n<code>) exec(</code>INSERT INTO visits (email, count) VALUES ('amir@example.com', 1)<code>) exec(</code>INSERT INTO visits (email, count) VALUES ('amir@example.com', 1)`)\nError: UNIQUE constraint failed: visits.email\nThat error is good: it shows that the UNIQUE constraint is working! We can use this error to our advantage with SQL's ON CONFLICT clause.</p>\n<p>We've already seen ON CONFLICT (column<em>name) DO NOTHING, which would leave our record unchanged. But there's also ON CONFLICT (column</em>name) DO UPDATE [...]. We'll tell the database \"if the insert conflicts with an existing record's email, increment that row's count instead of erroring\".</p>\n<p>Here's an isolated example of that. Look closely at the ON CONFLICT (email) DO UPDATE SET count = count + 1. It means:</p>\n<p>If our insert violates the email column's uniqueness constraint,\nUpdate that existing row by incrementing its count by 1.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE visits (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\n-- email is unique because we only want one row per person\nemail TEXT UNIQUE NOT NULL,\ncount INTEGER NOT NULL\n</code></pre>\n<p>  )\n<code>) exec(</code>\nINSERT INTO visits (email, count) VALUES ('amir@example.com', 1)\n<code>) exec(</code>\nINSERT INTO visits (email, count) VALUES ('amir@example.com', 1)\nON CONFLICT (email) DO UPDATE SET count = count + 1\n<code>) exec(</code>SELECT email, count FROM visits`)\n[{count: 2, email: 'amir@example.com'}]\nNow we can write a better version of our visit function. Instead of retrieving the row and using if to decide what to do, we'll use an ON CONFLICT. That way the database already knows what to do if the row exists!</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Write a visit function that:</p>\n<p>INSERTs a row for the given email when one doesn't exist.\nUPDATEs the row if the given email already exists.\nUses an ON CONFLICT (...) DO UPDATE ... to do both of the above at once.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE visits (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\n-- email is unique because we only want one row per person\nemail TEXT UNIQUE NOT NULL,\ncount INTEGER NOT NULL\n</code></pre>\n<p>  )\n`)</p>\n<p>function visit(email) {\nexec(\n`\nINSERT INTO visits (email, count) VALUES (?, 1)\nON CONFLICT (email) DO UPDATE SET count = count + 1</p>\n<pre><code>`,\n[email]\n</code></pre>\n<p>  )\n}\nvisit('amir@example.com')\nvisit('amir@example.com')\nexec(<code>SELECT email, count FROM visits</code>)\nGOAL:\n[{count: 2, email: 'amir@example.com'}]\nYOURS:\n[{count: 2, email: 'amir@example.com'}]\nThe new version of visit fixes the race condition bug while being simpler than the original. There's no conditional in the JavaScript, and we've replaced a trio of SELECT/INSERT/UPDATE statements with a single INSERT ... ON CONFLICT statement.</p>\n<p>The new version is also more efficient. Our original version had to retrieve the visits count from the database, then make a decision, then go back to the database again to create or update the visits row. The new version is a single statement that hits the database only once.</p>\n<p>SQL: Join performance\nIn a previous lesson, we used JOIN to list all pairs of people and their cats. We could have done that by looping in JavaScript, querying to find each person's cats. In this lesson, we'll see why we chose to write a JOIN instead of using JavaScript.</p>\n<p>(In this lesson, our database will always be set up with a people table and a cats table. The cats table has an owner_id, which is a foreign key to a person. Amir has a cat named Ms. Fluff, and Betty has a cat named Keanu. You'll see this in the setup for each example, but it's always the same, so you can skip reading it.)</p>\n<p>First, let's get every person-and-cat pair using JavaScript.</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Finish the function peopleAndCats() so that it creates a list of each pair of cat and person. For every cat, call results.push({person: person.name, cat: cat.name}) to build up a list of results.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY NOT NULL,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE cats (\nowner_id INTEGER REFERENCES people(id) NOT NULL,\nname TEXT NOT NULL\n);</p>\n<p>  INSERT INTO people (id, name) VALUES (100, 'Amir');\nINSERT INTO cats (owner<em>id, name) VALUES (100, 'Ms. Fluff');\nINSERT INTO people (id, name) VALUES (200, 'Betty');\nINSERT INTO cats (owner</em>id, name) VALUES (200, 'Keanu');\n`)</p>\n<p>function peopleAndCats() {\nconst results = []\nconst people = exec(<code>SELECT * FROM people</code>)\nfor (const person of people) {\nconst catsOwnedByPerson = exec(<code>SELECT * FROM cats WHERE cats.owner_id = ?</code>, [person.id])\nfor (const cat of catsOwnedByPerson) {\nresults.push({person: person.name, cat: cat.name})}</p>\n<p>  }\nreturn results\n}\npeopleAndCats()\nGOAL:\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\nYOURS:\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\nThis is correct, in the sense that it will return the right results. But it has a big problem: its performance is terrible!</p>\n<p>What happens if we have 10,000 people? Our outer loop for (const person of people) will run 10,000 times! We'll do a total of 10,001 queries: one query to find all of the people, then a separate cat query for each of the 10,000 people.</p>\n<p>This is a very common problem when querying any kind of database, SQL or otherwise. It's called an \"N+1 problem\": we do 1 person query, then N (10,000) cat queries. That's too many queries; we can't afford to put that much load on the database for a single pageview on our site.</p>\n<p>We'll fix this in stages. First, let's reduce the number of queries. We'll get all of the people, then get all of the cats. Then we'll write a nested loop:</p>\n<p>For each person:\nFor each cat:\nIf this person is this cat's owner:\nAdd the cat to the results.\nHere's a code problem for you to complete:</p>\n<p>Add an entry to the results array for each person and cat where cat.owner_id equals person.id. (You can use results.push({person: person.name, cat: cat.name}) to add an entry to the results.) You won't need to add any more database queries.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY NOT NULL,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE cats (\nowner_id INTEGER REFERENCES people(id) NOT NULL,\nname TEXT NOT NULL\n);</p>\n<p>  INSERT INTO people (id, name) VALUES (100, 'Amir');\nINSERT INTO cats (owner<em>id, name) VALUES (100, 'Ms. Fluff');\nINSERT INTO people (id, name) VALUES (200, 'Betty');\nINSERT INTO cats (owner</em>id, name) VALUES (200, 'Keanu');\n`)</p>\n<p>function peopleAndCats() {\nconst results = []\nconst people = exec(<code>SELECT * FROM people</code>)\nconst cats = exec(<code>SELECT * FROM cats</code>)\nfor (const person of people) {\nfor (const cat of cats) {\nif (cat.owner_id === person.id){\nresults.push({person: person.name, cat: cat.name})}</p>\n<pre><code>}\n</code></pre>\n<p>  }\nreturn results\n}\npeopleAndCats()\nGOAL:\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\nYOURS:\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\nWe reduced the number of queries to 2!</p>\n<p>But this still has a performance problem. What if we have 10,000 people and 10,000 cats, but we only want to retrieve Amir and his cat Ms. Fluff? We could do it by calling our peopleAndCats function, then filtering its results. But we'll end up retrieving a total of 20,000 rows from the database even though we only need 2.</p>\n<p>Also, even though we've reduced the number of queries, we've made our JavaScript very slow. The inner loop that looks at each cat runs 10,000 times for every iteration of the outer loop. With 10,000 people and 10,000 cats, the comparison of owner_id to person.id will run a total of 100,000,000 times (10,000 * 10,000). All of that just to find out that Amir owns Ms. Fluff. This method does not work in real systems.</p>\n<p>Here's where relational databases show their usefulness. We can use a JOIN to get the same result.</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Write a SELECT ... FROM ... JOIN ... ON ... query to get a list of all cats and people. Remember to select people.name AS person, cats.name AS cat to get the right column names.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY NOT NULL,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE cats (\nowner_id INTEGER REFERENCES people(id) NOT NULL,\nname TEXT NOT NULL\n);</p>\n<p>  INSERT INTO people (id, name) VALUES (100, 'Amir');\nINSERT INTO cats (owner<em>id, name) VALUES (100, 'Ms. Fluff');\nINSERT INTO people (id, name) VALUES (200, 'Betty');\nINSERT INTO cats (owner</em>id, name) VALUES (200, 'Keanu');\n<code>) exec(</code>\nSELECT\ncats.name AS cat, people.name AS person FROM people JOIN cats ON cats.owner_id = people.id</p>\n<p>`)\nGOAL:\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\nYOURS:\n[{cat: 'Ms. Fluff', person: 'Amir'}, {cat: 'Keanu', person: 'Betty'}]\nWe got the same result in a single database query! This fixes the two performance problems we've talked about so far: it requires only one query, and it doesn't have any nested loops.</p>\n<p>What's really going on in the JOIN, though? So far, we've been thinking about JOINs as nested loops, similar to the ones that we wrote in JavaScript above. Aren't we just asking the database to do 100,000,000 (10,000 * 10,000) iterations, which will be slow?</p>\n<p>Fortunately, no! Nested loops are a perfect mental model for how JOIN works, but they're only a mental model. In reality, the database will optimize the query, rebuilding it to be more efficient while still giving the same results.</p>\n<p>Here's a concrete example. (Your answer here should be identical to the one above, with an extra WHERE added.)</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Write a JOIN query to find all cats that are owned by a person with a name of \"Amir\".</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY NOT NULL,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE cats (\nowner_id INTEGER REFERENCES people(id) NOT NULL,\nname TEXT NOT NULL\n);</p>\n<p>  INSERT INTO people (id, name) VALUES (100, 'Amir');\nINSERT INTO cats (owner<em>id, name) VALUES (100, 'Ms. Fluff');\nINSERT INTO people (id, name) VALUES (200, 'Betty');\nINSERT INTO cats (owner</em>id, name) VALUES (200, 'Keanu');\n<code>) exec(</code>\nSELECT people.name AS person, cats.name AS cat FROM people JOIN cats ON cats.owner_id = people.id WHERE people.name = 'Amir'</p>\n<p><code>) GOAL: [{cat: 'Ms. Fluff', person: 'Amir'}] YOURS: [{cat: 'Ms. Fluff', person: 'Amir'}] In the example above, WHERE people.name = ... tells the database that only one person matters. Then ON people.id = cats.owner_id tells it that it only needs to consider cats owned by that person. By understanding both of those limitations, the database can execute the query more intelligently. It will do something similar to exec(</code>SELECT * FROM cats WHERE owner_id = ?`, [amir.id]), selecting only the cats that are relevant.</p>\n<p>This is impressive, but it's still a simple example. The bigger the query gets, the harder it is for a human to optimize manually. But the database has no such limitation; it will happily optimize any query that we come up with.</p>\n<p>Imagine that we we're joining across 8 different tables instead of just 2. (That's not extremely common, but it does happen.)</p>\n<p>Each table has 10,000 records. With 8 nested loops, we'd require 10,000,000,000,000,000,000,000,000,000,0000 iterations (10,000 to the 8th power). That would take something like 3,170,979,198,376,458,752 years.</p>\n<p>If our database is set up properly, an 8-table join with a WHERE that matches only one row will execute in less than a millisecond. That lets us have our cake while eating it! We get to think about joins using a simple conceptual model: nested loops with an if inside. But the query actually executes in a much more intelligent way.</p>\n<p>(Full disclosure: database optimizers aren't perfect. In real databases, we give them certain kinds of manual hints that we'll learn about in later lessons. In rare cases, the optimizer does a bad job and we have to change our queries significantly to work around it. But in 99.9% of cases, the optimizer will do what you want!)</p>\n<p>SQL: Left and right joins\nIn an earlier lesson, we saw an example where users can register with discount codes. The discount codes were optional: some users register with a code, so they have a foreign key to the discount. Other users register without a code, so the foreign key is null.</p>\n<p>Suppose that we want to produce a report listing our users and what discount codes they used. The report should include all users, whether they used a discount code or not.</p>\n<p>We could write a loop in JavaScript: loop over each user, selecting any discounts for that user. That would cause an N+1 query problem: we'd query all of the users, followed by N individual queries to get each user's discount, if any. (Imagine that N is 10,000,000, to see why this is a problem: too many queries!)</p>\n<p>As usual, SQL has an answer. In this case, it's a join. However, the type of join that we've seen so far doesn't help us. If we select from users JOIN discounts ON users.id = discounts.user<em>id, we'll only get results for users who have corresponding discounts. (The users.id = discounts.user</em>id will never be true for a user who has no corresponding discount row.)</p>\n<p>That doesn't solve our problem because we want to include all users, even if they have no discount. Here's an example of that solution, even though it doesn't solve our problem:</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\ndiscount_id INTEGER REFERENCES discounts(id) NULL UNIQUE\n</code></pre>\n<p>  );\nCREATE TABLE discounts (id INTEGER PRIMARY KEY, discount_code TEXT NOT NULL);</p>\n<p>  -- Amir registered with a discount (both Amir and the discount get ID 1).\nINSERT INTO discounts (discount<em>code) VALUES ('free-month');\nINSERT INTO users (name, discount</em>id) VALUES ('Amir', 1);</p>\n<p>  -- Betty registered with no discount.\nINSERT INTO users (name, discount_id) VALUES ('Betty', NULL);</p>\n<p>  SELECT\nusers.name AS name,\ndiscounts.discount<em>code AS discount</em>code\nFROM users JOIN discounts\nON users.discount<em>id = discounts.id\n`)\n[{discount</em>code: 'free-month', name: 'Amir'}]\nBetty existed, but she wasn't in our query's results. To fix that, we can tell the database to include users in the report even when there's no matching discount. This is called a left join: users LEFT JOIN discounts. The \"left\" means \"include rows from the left table (users), even if there's no corresponding row from the right table (discounts).</p>\n<p>With a LEFT JOIN, both Amir and Betty will show up in the results. Amir will have his discount<em>code, but Betty's discount</em>code will be NULL (which will be represented as JavaScript's null).</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\ndiscount_id INTEGER REFERENCES discounts(id) NULL UNIQUE\n</code></pre>\n<p>  );\nCREATE TABLE discounts (id INTEGER PRIMARY KEY, discount_code TEXT NOT NULL);</p>\n<p>  -- Amir registered with a discount (both Amir and the discount get ID 1).\nINSERT INTO discounts (discount<em>code) VALUES ('free-month');\nINSERT INTO users (name, discount</em>id) VALUES ('Amir', 1);</p>\n<p>  -- Betty registered with no discount.\nINSERT INTO users (name, discount_id) VALUES ('Betty', NULL);</p>\n<p>  SELECT\nusers.name AS name,\ndiscounts.discount<em>code AS discount</em>code\nFROM users LEFT JOIN discounts\nON users.discount<em>id = discounts.id\n`)\n[{discount</em>code: 'free-month', name: 'Amir'}, {discount_code: null, name: 'Betty'}]\nLEFT JOIN adds one small tweak to our mental model of joins. Inner joins (the simple kind that we've seen without LEFT) still work in the same way. But here's how the database executes a left join (the new part is the \"If no discounts matched this user\" section):</p>\n<p>For each user:\nFor each discount:\nIf this user's discount_id matches this discount's id:\nReturn a row with all of the user's columns and all of the discount's columns.\nIf no discounts matched this user:\nReturn a row with all of the user's columns, and NULLs in all of the missing discount's columns.\nAs usual, this is only a mental model, but it's a correct one. In reality, the database will use a more efficient method that gives exactly the same result.</p>\n<p>You might wonder whether LEFT JOIN implies that there's also a RIGHT JOIN. There is! In a RIGHT JOIN, rows from the right table are always included, even if there's no corresponding row from the left table.</p>\n<p>Left and right joins are much less common than the basic inner joins that we've seen before, where every row must exactly match the ON. But when you need a left or right join, you'll be glad that it's available. They're useful when you want a list of records (like users) along with other corresponding records (like discounts) that may or may not exist.</p>\n<p>(As is often the case, SQLite is a bit weird here. It supports left joins, but not right joins. Fortunately, we can convert right joins into left joins by flipping the order of the tables.)</p>\n<p>Like with basic inner joins, left and right joins will produce any combination of rows that match. For example, suppose that we select from users LEFT JOIN comments ON users.id = comments.user_id.</p>\n<p>Every comment in the database will show up in the results. If Amir has written 100 comments, he'll show up 100 times: once with each of his comments. But because it's a LEFT JOIN, every user is guaranteed to show up at least once. Betty will show up even if she's never written a comment.</p>\n<p>Here's a code problem for you to complete:</p>\n<p>Use a join to get a list of usernames and comment texts for every comment in the system. Make it a left join so that it also includes users who have never written a comment. (They'll have a null comment text.) Select only the name and comment_text columns.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE comments (\nuser<em>id REFERENCES users(id) NOT NULL,\ncomment</em>text TEXT NOT NULL\n);</p>\n<p>  -- Amir has written two comments.\nINSERT INTO users (name) VALUES ('Amir');\nINSERT INTO comments (\nuser<em>id,\ncomment</em>text\n) VALUES (1, 'Ms. Fluff needs a bath!');\nINSERT INTO comments (\nuser<em>id,\ncomment</em>text\n) VALUES (1, 'Ms. Fluff strongly dislikes water.');</p>\n<p>  -- Betty has written no comments.\nINSERT INTO users (name) VALUES ('Betty');\nSELECT users.name, comments.comment<em>text FROM users LEFT JOIN comments ON users.id = comments.user</em>id</p>\n<p>`)\nGOAL:\n[{comment<em>text: 'Ms. Fluff needs a bath!', name: 'Amir'}, {comment</em>text: 'Ms. Fluff strongly dislikes water.', name: 'Amir'}, {comment_text: null, name: 'Betty'}]\nYOURS:\n[{comment<em>text: 'Ms. Fluff needs a bath!', name: 'Amir'}, {comment</em>text: 'Ms. Fluff strongly dislikes water.', name: 'Amir'}, {comment_text: null, name: 'Betty'}]\nYou'll sometimes see left and right joins called LEFT OUTER JOINs and RIGHT OUTER JOINs. Fortunately, \"outer\" doesn't change the meaning; it's just a more precise name for the same idea.</p>\n<p>In this course, we only address inner (\"simple\") joins and left joins. However, there's a surprising array of additional join types. For 99% of your practical work, inner joins will be sufficient. Left joins will probably get you through the final 1%.</p>\n<p>We don't recommend focusing on other join types until you've spent a lot of time using SQL databases on projects. However, if you'd like a taste of how deep the join rabbit hole goes, we think that this article is thorough and understandable without belaboring the point.</p>\n<p>SQL: Join mistakes\nLet's examine some subtle mistakes that we might make with SQL joins. First, what happens if we forget to add the ON condition to an inner join?</p>\n<p>With no ON, an inner join returns every combination of the left table's rows with the right table's rows. If the left table has N rows and the right table has M rows, then the join will have N*M total rows.</p>\n<p>However, we won't notice that mistake if we only test with simple cases! For example, imagine that we're joining users with their comments, but we forget the ON. If we only test with one user and one comment, then the results will look correct.</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE comments (\nuser<em>id REFERENCES users(id) NOT NULL,\ncomment</em>text TEXT NOT NULL\n);</p>\n<p>  -- Amir has written a comment.\nINSERT INTO users (name) VALUES ('Amir');\nINSERT INTO comments (\nuser<em>id,\ncomment</em>text\n) VALUES (1, 'Ms. Fluff needs a bath!');</p>\n<p>  -- \"Test\" our JOIN by querying all of the users and comments.\nSELECT\nusers.name AS name,\ncomments.comment<em>text AS comment</em>text\nFROM users JOIN comments;\n`)\n[{comment_text: 'Ms. Fluff needs a bath!', name: 'Amir'}]\nThe ON is missing, but our test doesn't notice! There's a great rule of thumb in testing that goes something like: \"If you're testing code that deals with arrays, write separate tests for 0 elements, 1 element, and many elements.\" We can imagine a similar process for testing joins. When joining tables, it's a good idea to test multiple cases, like:</p>\n<p>There are no rows at all.\nOnly the left table has rows.\nOnly the right table has rows.\nBoth tables have multiple rows.\n(Sometimes you'll want to add even more cases: \"what happens if the left table has multiple rows that match one row on the right?\" Etc. As usual, the amount of testing should match your confidence in the code.)</p>\n<p>Testing is deep and subtle, but there's a baseline rule that you should always use when writing a join: never test a join by inserting only one row into each table. That \"test\" is too loose, like the one above. Almost any join will pass it, even if it's the wrong join!</p>\n<p>That rule will catch other mistakes as well. For example, what happens if we accidentally flip the order of the tables in a LEFT JOIN?</p>\n<p>In the next example, we meant to select from users LEFT JOIN comments. However, we mixed up left and right joins, so we accidentally selected from comments LEFT JOIN users. (It's common to mix up the different join types, so this is a realistic mistake.)</p>\n<p>We only test the join with one user and one comment. It could be a LEFT JOIN, a RIGHT JOIN, an INNER JOIN, or an OUTER JOIN. They're all the same for that test case, but only one is correct!</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE comments (\nuser<em>id REFERENCES users(id) NOT NULL,\ncomment</em>text TEXT NOT NULL\n);</p>\n<p>  -- Amir has written a comment.\n-- This is a bad test case: it won't notice if we switch the tables!\nINSERT INTO users (name) VALUES ('Amir');\nINSERT INTO comments (\nuser<em>id,\ncomment</em>text\n) VALUES (1, 'Ms. Fluff needs a bath!');</p>\n<p>  -- This join contains an error: the table order is flipped.\n-- But our test can't tell!\nSELECT\nusers.name AS name,\ncomments.comment<em>text AS comment</em>text\nFROM comments LEFT JOIN users\nON users.id = comments.user<em>id\n`)\n[{comment</em>text: 'Ms. Fluff needs a bath!', name: 'Amir'}]\nOne final type of join mistake. So far, all of our examples have used foreign keys in the ON. Usually, that's a good idea. Joining on foreign keys means that we don't have to worry about cases where the join condition column has a value, but it doesn't match any value in the other table.</p>\n<p>However, the database will let us write any ON that we want. It doesn't care whether there's a foreign key or not. For example, it will let us join against the wrong table's ID.</p>\n<p>(Be careful with this example. It will successfully produce one joined row of \"user\" with comment, but the \"user\"'s name will be Ms. Fluff, not Amir!)</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE cats (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n);\nCREATE TABLE comments (\nuser<em>id REFERENCES users(id) NOT NULL,\ncomment</em>text TEXT NOT NULL\n);</p>\n<p>  -- Ms. Fluff is a cat (with ID 1).\nINSERT INTO cats (name) VALUES ('Ms. Fluff');</p>\n<p>  -- Amir (user ID 1) has written a comment.\nINSERT INTO users (name) VALUES ('Amir');\nINSERT INTO comments (\nuser<em>id,\ncomment</em>text\n) VALUES (1, 'Ms. Fluff needs a bath!');</p>\n<p>  -- Select all of the comments joined with \"users\".\n-- But we accidentally join against cats' IDs instead of users' IDs.\n-- The database won't stop us!\n-- It will happily match up comments' \"user<em>id\"s with cats' \"id\"s.\nSELECT\nname,\ncomment</em>text\nFROM cats JOIN comments\nON id = comments.user<em>id;\n`)\n[{comment</em>text: 'Ms. Fluff needs a bath!', name: 'Ms. Fluff'}]\nWe can tell that this is wrong because no cat who has ever existed would say that they need a bath!</p>\n<p>Like our previous examples, more thorough testing will highlight this kind of mistake.</p>\n<p>There's another method to spot it as well. In past lessons, we've recommended listing the columns in a SELECT on separate lines, like we did in this example. For joins, we've also recommended explicitly naming those columns' tables, like SELECT users.name. However, we intentionally didn't follow that advice above: we selected only the names of the columns without specifying which tables they came from.</p>\n<p>Qualifying the column names with their tables makes it easier to spot this kind of mistake. In order for this mistake to happen, we'd have to write SELECT cats.name. Just seeing the table name a second time gives us a chance to notice the mistake.</p>\n<p>Hopefully, we type the correct table name the second time: users.name. If we do that while selecting from a join that doesn't include users, we'll get an error. (You can type \"error\" to indicate an error.\")</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE users (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE cats (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL\n);\nCREATE TABLE comments (\nuser<em>id REFERENCES users(id) NOT NULL,\ncomment</em>text TEXT NOT NULL\n);</p>\n<p>  -- Ms. Fluff is a cat (with ID 1).\nINSERT INTO cats (name) VALUES ('Ms. Fluff');</p>\n<p>  -- Amir (user ID 1) has written a comment.\nINSERT INTO users (name) VALUES ('Amir');\nINSERT INTO comments (\nuser<em>id,\ncomment</em>text\n) VALUES (1, 'Ms. Fluff needs a bath!');</p>\n<p>  -- Select all of the comments joined with \"users\".\n-- But we accidentally join against cats' IDs instead of users' IDs.\n-- The database won't stop us!\n-- It will happily match up comments' \"user<em>id\"s with cats' \"id\"s.\n--\n-- Naming the tables explicitly gives us a second chance to notice.\nSELECT\nusers.name,\ncomments.comment</em>text\nFROM cats JOIN comments\nON id = comments.user_id;\n`)\nError: no such column: users.name\nSQL is quite good at preventing mistakes. That's what all of its constraint types are for. However, it can't save us from every mistake. Hopefully this lesson helps you to catch some mistakes earlier. We can reduce the advice here into two minimal rules:</p>\n<p>When testing a join, use more than one row in each table.\nWhen selecting from a join, qualify your selects with table names (like SELECT users.name) to make sure that you're selecting the right things.</p>\n<p>SQL: ON vs WHERE\nFor this lesson, our goal is: find the pairs of cats and owners where the person's name is the same as the cat's name.</p>\n<p>(All of the examples in this lesson will use this database, but it will always be empty at the beginning of each example.)</p>\n<blockquote>\n<p>exec(`\nCREATE TABLE people (</p>\n</blockquote>\n<pre><code>id INTEGER PRIMARY KEY NOT NULL,\nname TEXT NOT NULL\n</code></pre>\n<p>  );\nCREATE TABLE cats (\nid INTEGER PRIMARY KEY NOT NULL,\nowner_id INTEGER NOT NULL REFERENCES people(id),\nname TEXT NOT NULL\n);</p>\n<p>  -- Wilford has a cat named Wilford.\nINSERT INTO people (id, name) VALUES (300, 'Wilford');\nINSERT INTO cats (owner_id, name) VALUES (300, 'Wilford');</p>\n<p>  -- Cindy has no cats.\nINSERT INTO people (id, name) VALUES (200, 'Cindy');\n`)\n[]\nFirst, we'll do the query in a straightforward way, using both an ON and a WHERE. We use the ON to match people and cats using the owner_id foreign key. We use the WHERE to select only the person-cat pairs where the owner's name is the same as the cat's name. (Note the AS column aliases.)</p>\n<blockquote>\n<p>exec(`\nSELECT</p>\n</blockquote>\n<pre><code>people.name AS person_name,\ncats.name AS cat_name\n</code></pre>\n<p>  FROM people\nINNER JOIN cats\nON people.id = cats.owner<em>id\nWHERE people.name = cats.name\n`)\n[{cat</em>name: 'Wilford', person_name: 'Wilford'}]\nIf we like, we can move the people.name = cats.name check into the ON, eliminating the WHERE.</p>\n<blockquote>\n<p>exec(`\nSELECT</p>\n</blockquote>\n<pre><code>people.name AS person_name,\ncats.name AS cat_name\n</code></pre>\n<p>  FROM people\nINNER JOIN cats\nON people.id = cats.owner<em>id\nAND people.name = cats.name\n`)\n[{cat</em>name: 'Wilford', person_name: 'Wilford'}]\nThe cat's name isn't a foreign key to the person's name, but that's OK; we can still compare those columns in the ON. Databases don't limit what we put in an ON, just like they don't limit what we put in a WHERE. If the columns exist, the database will let us join on them.</p>\n<p>We can also convert the entire ON into a WHERE.</p>\n<blockquote>\n<p>exec(`\nSELECT</p>\n</blockquote>\n<pre><code>people.name AS person_name,\ncats.name AS cat_name\n</code></pre>\n<p>  FROM people\nINNER JOIN cats\nWHERE people.id = cats.owner<em>id\nAND people.name = cats.name\n`)\n[{cat</em>name: 'Wilford', person_name: 'Wilford'}]\nConceptually, this version is computing every combination of person and cat, then filtering that giant list:</p>\n<p>For each person:\nFor each cat:\nProduce a new temporary row that contains this person's columns with this cat's columns.\nFor each of those combinations of every person with every cat:\nIf the cat's owner_id matches the person's id:\nAnd the cat's name matches the person's name:\nInclude this combination of person and cat in the final results.\nAs always, the mental model above is correct, but the database will intelligently optimize the query to make it faster. (If we have 10,000 people and 10,000 cats, the database will NOT produce a temporary list of 100,000,000 rows.)</p>\n<p>All three of the queries above are truly equivalent: an ON mixed with a WHERE; an ON only; and a WHERE only. So why bother with ON at all? Why not always use WHERE? Let's analyze that question along three dimensions: performance, correctness, and clarity for human readers.</p>\n<p>First: performance. Modern databases are very good at optimizing ON and WHERE. You're unlikely to encounter a performance problem that's fixed by converting an ON to a WHERE or vice-versa. So performance isn't a reason to choose one or the other.</p>\n<p>Second: correctness. For inner joins (the common type of \"simple\" joins that we're using here), ON and WHERE are interchangeable. Your query will never be wrong if you convert one to the other. However, ON and WHERE are NOT interchangeable for any other type of join. In LEFT, RIGHT, and other more rare types that we don't cover in this course, like OUTER, converting an ON to a WHERE can change the results.</p>\n<p>Third: clarity for human readers. An ON should specify which rows from the left table go with which rows from the right table. Here are some examples of good ONs. They concern the relationship between the two tables being joined.</p>\n<p>Matching the left table's foreign key against the column that it references in the right table.\nMatching email addresses in an invitations_sent table against email addresses in our users table to find out what percentage of invited users eventually register (assuming that there's no proper foreign key between the tables).\nHere are some examples of conditions that are better in a WHERE than an ON. They're not about the two tables' relationships.</p>\n<p>Selecting a range of rows (like WHERE created<em>at > /* some date here */).\nSelecting a specific row (like WHERE user</em>id = ? or WHERE cats.name = 'Ms. Fluff').\nSeparating ON conditions from WHERE conditions helps with both correctness and clarity. It makes mistakes with rare types of joins less likely, where converting an ON to a WHERE will give different results. It also gives readers a hint about whether the condition concerns combinations of left and right rows.</p>\n<p>There's no hard-and-fast rule about when to use ON vs. WHERE. The example that we started with lives in a gray area where either choice makes sense. Putting the people.name = cats.name condition in the ON is probably slightly better, but neither is \"wrong\".</p>\n<p>You'll do fine as long as you ask yourself \"is this condition about how the left table relates to the right table, or is it about something else?\"</p>\n<p>Finish Lesson\nBrag…</p>"}},{"node":{"id":"165b185c-911f-5447-b8c4-a4089e6e1bff","excerpt":"Photo by Quang Nguyen Vinh from Pexels Recently I have dicovered a cool way to add gifs or images to Github. Instead of having an issue or…","rawMarkdownBody":"\r\n[![](https://i.imgur.com/9CkwiRc.jpg)](https://i.imgur.com/9CkwiRc.jpg)<p style=\"font-size: 12px; text-align: right\">_Photo by Quang Nguyen Vinh from Pexels_</p>\r\n\r\nRecently I have dicovered a cool way to add gifs or images to Github. Instead of having an issue or PR full of gifs or picture and therefore very little readable, it is possible to collapse them in a very elegant way.\r\n\r\nThis is how it looks collapsed:\r\n\r\n![](https://i.imgur.com/0esh5A2.png)\r\n\r\nThis is how it looks expanded:\r\n\r\n![](https://i.imgur.com/KcxchDF.png)\r\n\r\nIn order to do it, add:\r\n```\r\n<details><summary>GIF</summary>\r\n\r\n![]()\r\n\r\n</details>\r\n```\r\nor\r\n\r\n```\r\n<details><summary>IMAGE</summary>\r\n\r\n![](https://i.imgur.com/9CkwiRc.jpg)\r\n\r\n</details>\r\n```\r\nIt is very important that you include blank spaces between  the lines, else it will not work. \r\n\r\n<code>```![]()```</code> is a standard way how Github adds images of gifs when you simply CTRL + V or drag and drop them.\r\n\r\n<code>GIF</code> or <code>IMAGE</code> is just a random name which will appear next to the collapsable arrow.\r\n\r\nYay, success :) ","frontmatter":{"date":"2020-03-29","title":"Collapsable gifs in Github","category":"knowledge-base"},"fields":{"slug":"/Collapsable_Gifs_Github/"},"timeToRead":1,"html":"<p><a href=\"https://i.imgur.com/9CkwiRc.jpg\"><img src=\"https://i.imgur.com/9CkwiRc.jpg\"></a><p style=\"font-size: 12px; text-align: right\"><em>Photo by Quang Nguyen Vinh from Pexels</em></p></p>\n<p>Recently I have dicovered a cool way to add gifs or images to Github. Instead of having an issue or PR full of gifs or picture and therefore very little readable, it is possible to collapse them in a very elegant way.</p>\n<p>This is how it looks collapsed:</p>\n<p><img src=\"https://i.imgur.com/0esh5A2.png\"></p>\n<p>This is how it looks expanded:</p>\n<p><img src=\"https://i.imgur.com/KcxchDF.png\"></p>\n<p>In order to do it, add:</p>\n<pre><code>&#x3C;details>&#x3C;summary>GIF&#x3C;/summary>\n\n![]()\n\n&#x3C;/details>\n</code></pre>\n<p>or</p>\n<pre><code>&#x3C;details>&#x3C;summary>IMAGE&#x3C;/summary>\n\n![](https://i.imgur.com/9CkwiRc.jpg)\n\n&#x3C;/details>\n</code></pre>\n<p>It is very important that you include blank spaces between  the lines, else it will not work. </p>\n<p><code><code>![]()</code></code> is a standard way how Github adds images of gifs when you simply CTRL + V or drag and drop them.</p>\n<p><code>GIF</code> or <code>IMAGE</code> is just a random name which will appear next to the collapsable arrow.</p>\n<p>Yay, success :) </p>"}},{"node":{"id":"ec725961-0b37-51f4-a9d2-8f88631db642","excerpt":"Photo by Pixabay from Pexels When you do not want your precious text to break into new line, you can use following CSS:","rawMarkdownBody":"\r\n[![](https://i.imgur.com/tfarmht.jpg)](https://i.imgur.com/tfarmht.jpg)<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\nWhen you do not want your precious text to break into new line, you can use following CSS:\r\n\r\n```\r\nwhiteSpace: 'nowrap' \r\n```","frontmatter":{"date":"2020-03-28","title":"Non-Breakable","category":"knowledge-base"},"fields":{"slug":"/Non-Breakable/"},"timeToRead":1,"html":"<p><a href=\"https://i.imgur.com/tfarmht.jpg\"><img src=\"https://i.imgur.com/tfarmht.jpg\"></a><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<p>When you do not want your precious text to break into new line, you can use following CSS:</p>\n<pre><code>whiteSpace: 'nowrap' \n</code></pre>"}},{"node":{"id":"07e0a0e0-fabb-5ff0-adca-b0a0366f0b6b","excerpt":"Photo by Picography from Pexels If you need a hero, it is Stashing! Imagine you are working on a projects and it gets really messy…","rawMarkdownBody":"\r\n[![](https://i.imgur.com/8ErnL8l.jpg)](https://i.imgur.com/8ErnL8l.jpg)<p style=\"font-size: 12px; text-align: right\">_Photo by Picography from Pexels_</p>\r\n\r\nIf you need a hero, it is Stashing!\r\n\r\nImagine you are working on a projects and it gets really messy. Especially like me when you don't really know what you are doing, but you are doing it anyway :) Test and trial - the best way to hell :) \r\n\r\nAnyhow, things get ugly and you do not really want to make any evidence of it, denial - the ultimate way to pretend it was NOT you who messed up everything :) So, you say, no, not gonna commit, no way on Earth will make me do that. But you need to go back in time and see what there was before (cause obviously you deleted everything, before you could at least give it a try to understand it first) or you need to switch branches. You think, I am screwed! So totally screwed..\r\n\r\nAnd that is exactly the time when your personal saviour comes to play! Stash - the hero of the day! Better remember that name, learn it by heart, so that you can recite it in the middle of the night:\r\n\r\n```\r\ngit stash\r\n```\r\n\r\nWill save all your shi... shiny code... without commiting :) And then you can see anything there was before your higly dangerous business, or you can switch branches at will. And when you are done and bored with old stuff, you get back to your lab experiment code with:\r\n```\r\ngit stash pop\r\n```\r\n\r\nAnd there you are :) Back where you left off and back in the black hole. Good luck with that!","frontmatter":{"date":"2020-03-27","title":"Git Stashing","category":"knowledge-base"},"fields":{"slug":"/Git Stashing/"},"timeToRead":1,"html":"<p><a href=\"https://i.imgur.com/8ErnL8l.jpg\"><img src=\"https://i.imgur.com/8ErnL8l.jpg\"></a><p style=\"font-size: 12px; text-align: right\"><em>Photo by Picography from Pexels</em></p></p>\n<p>If you need a hero, it is Stashing!</p>\n<p>Imagine you are working on a projects and it gets really messy. Especially like me when you don't really know what you are doing, but you are doing it anyway :) Test and trial - the best way to hell :) </p>\n<p>Anyhow, things get ugly and you do not really want to make any evidence of it, denial - the ultimate way to pretend it was NOT you who messed up everything :) So, you say, no, not gonna commit, no way on Earth will make me do that. But you need to go back in time and see what there was before (cause obviously you deleted everything, before you could at least give it a try to understand it first) or you need to switch branches. You think, I am screwed! So totally screwed..</p>\n<p>And that is exactly the time when your personal saviour comes to play! Stash - the hero of the day! Better remember that name, learn it by heart, so that you can recite it in the middle of the night:</p>\n<pre><code>git stash\n</code></pre>\n<p>Will save all your shi... shiny code... without commiting :) And then you can see anything there was before your higly dangerous business, or you can switch branches at will. And when you are done and bored with old stuff, you get back to your lab experiment code with:</p>\n<pre><code>git stash pop\n</code></pre>\n<p>And there you are :) Back where you left off and back in the black hole. Good luck with that!</p>"}},{"node":{"id":"b4ce4ccd-ad09-57d5-99f3-ce988f0e904e","excerpt":"Photo by Kirill Belotserkovsky from Pexels All cool images should be clickable. Because when you cannot click on somethign it does not exist…","rawMarkdownBody":"\r\n\r\n[![](https://i.imgur.com/4CmQr4y.jpg)](https://i.imgur.com/4CmQr4y.jpg)<p style=\"font-size: 12px; text-align: right\">_Photo by Kirill Belotserkovsky from Pexels_</p>\r\n\r\n\r\n> All cool images should be clickable. Because when you cannot click on somethign it does <code>not exist</code> :)\r\n\r\n>So how to make our gorgeous image larger on click or hover?\r\n\r\n> Let's go to our html file where we create a wrapper `div` tag around our `img` tag:\r\n\r\n```\r\n<div class=\"imageContainer\" style=\"width: 100px\">\r\n    <img\r\n        src=\"https://i.imgur.com/4CmQr4y.jpg\"\r\n        alt=\"Kirill Belotserkovsky\"\r\n    />\r\n</div>\r\n\r\n```\r\n> Then in our css file we write following to add on hover effect:\r\n```\r\n.imageContainer > img:hover {\r\nwidth: 800px;\r\n}\r\n```\r\n\r\n> Or add `active` which is on click effect:\r\n```\r\n.imageContainer > img:active {\r\nwidth: 800px;\r\nheight: 800px;\r\n}\r\n```\r\n\r\n> Another way is to use modals, which is a bit more complicated. But good example is in [w3schools](https://www.w3schools.com/howto/howto_css_modal_images.asp)\r\n\r\n\r\n>In `.md` files we have a problem that we cannot really import external css files. But there is a way how you can make an image clickable:\r\n```\r\n[![pic](https://i.imgur.com/VvvlEcI.jpg)](https://i.imgur.com/VvvlEcI.jpg)\r\n```\r\n> Result will look like this:\r\n\r\n[![pic](https://i.imgur.com/VvvlEcI.jpg)](https://i.imgur.com/VvvlEcI.jpg)<p style=\"font-size: 12px; text-align: right\">_Photo by eberhard grossgasteiger from Pexels_</p>\r\n\r\n> It is not sooo perfect as it opens in the same page, but still something.\r\n\r\n>And what I just discovered is that we can use `style` tags in and `.md` file!! This opens up a lot of new unexplored possibilities. \r\n😈😈😈\r\n\r\n> In an `.md` file I can write:\r\n```\r\n<style>\r\n.imageContainer > img:hover {\r\nmax-width: 760px;\r\n}\r\n</style>\r\n\r\n<div class=\"imageContainer\" style=\"width: 200px\">\r\n    <img\r\n        src=\"https://i.imgur.com/5zSAEo3.jpg\"\r\n        alt=\"Photo by Julius Silver from Pexels\"\r\n    />\r\n</div>\r\n```\r\n\r\n> The result will look like this. When I hover over on the image with mouse, it will become bigger:\r\n \r\n<style>\r\n.imageContainer > img:hover {\r\nmax-width: 760px;\r\n}\r\n</style>\r\n\r\n<div class=\"imageContainer\" style=\"width: 200px\">\r\n    <img\r\n        src=\"https://i.imgur.com/5zSAEo3.jpg\"\r\n        alt=\"Photo by Julius Silver from Pexels\"\r\n    />\r\n</div>\r\n\r\n> How about clicking now? Integrate following code to your `.md` file. Then you will need to click **and hold** the click:\r\n```\r\n<style>\r\n.imageContainer2 > img:active {\r\nmax-width: 760px;\r\n}\r\n</style>\r\n\r\n<div class=\"imageContainer2\" style=\"width: 200px\">\r\n    <img\r\n        src=\"https://i.imgur.com/48E34Uh.jpg\"\r\n        alt=\"Photo by Quang Nguyen Vinh from Pexels\"\r\n    />\r\n</div>\r\n```\r\n\r\n<style>\r\n.imageContainer2 > img:active {\r\nmax-width: 760px;\r\n}\r\n</style>\r\n\r\n<div class=\"imageContainer2\" style=\"width: 200px\">\r\n    <img\r\n        src=\"https://i.imgur.com/48E34Uh.jpg\"\r\n        alt=\"Photo by Quang Nguyen Vinh from Pexels\"\r\n    />\r\n</div>\r\n\r\n>Downside is that you really need to hold the click... Well, that is weird, isn't it?\r\n\r\n> Now let's try a small hack with input, button and label and see it we can make it work. Paste following code:\r\n```\r\n<style>\r\n#btnControl {\r\n    display: none;\r\n}\r\n#btnControl:checked + label > img {\r\n   max-width: 760px;\r\n}\r\n</style>\r\n<input type=\"checkbox\" id=\"btnControl\"/>\r\n<label class=\"btn\" for=\"btnControl\" style=\"width:200px; padding: 0\" ><img  src=\"https://i.imgur.com/N56WE3x.jpg\" id=\"btnLeft\" alt=\"Photo by R.Fera from Pexels\" /></label>\r\n```\r\n\r\n>Result will be a nice clickable image:\r\n\r\n<br/>\r\n\r\n<style>\r\n#btnControl {\r\n    display: none;\r\n}\r\n\r\n#btnControl:checked + label > img {\r\n   max-width: 760px;\r\n}\r\n</style>\r\n\r\n<input type=\"checkbox\" id=\"btnControl\"/>\r\n<label class=\"btn\" for=\"btnControl\" style=\"width:200px; padding: 0\" ><img  src=\"https://i.imgur.com/N56WE3x.jpg\" id=\"btnLeft\" alt=\"Photo by R.Fera from Pexels\"  /></label>\r\n\r\n>Yay! We have done this!\r\n\r\n> Another interesting way to have a zoom effect:\r\n```\r\n<style>\r\n.zoom {\r\n    transition:transform 0.25s ease;\r\n}\r\n.zoom:hover {\r\n    -webkit-transform:scale(4);\r\n    transform:scale(4);\r\n}\r\n</style>\r\n<img src=\"https://i.imgur.com/N4KOQ5H.jpg\" class=\"zoom\" style=\"width: 200px\"  alt=\"Photo by H. Emre from Pexels\" />\r\n```\r\n<style>\r\n.zoom {\r\n    transition:transform 0.25s ease;\r\n}\r\n.zoom:hover {\r\n    -webkit-transform:scale(4);\r\n    transform:scale(4);\r\n\r\n\r\n}\r\n</style>\r\n<img src=\"https://i.imgur.com/N4KOQ5H.jpg\" class=\"zoom\" style=\"width: 200px\" alt=\"Photo by H. Emre from Pexels\" />\r\n\r\n\r\n>Although this is now going beyond our container, still it is a first step to have a nice zoom. Can be of course polisheed further.\r\n\r\n>Some more interesting thing can be found on [StackOverflow](https://stackoverflow.com/questions/13630229/can-i-have-an-onclick-effect-in-css/32721572)\r\n\r\n\r\n\r\n> Lastly here is how we can use modals in in html file which looks realy great but unfortunately does not work in `.md` file.\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n<style>\r\nbody {font-family: Arial, Helvetica, sans-serif;}\r\n#myImg {\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n}\r\n#myImg:hover {opacity: 0.7;}\r\n/* The Modal (background) */\r\n.modal {\r\n  display: none; /* Hidden by default */\r\n  position: fixed; /* Stay in place */\r\n  z-index: 1; /* Sit on top */\r\n  padding-top: 100px; /* Location of the box */\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%; /* Full width */\r\n  height: 100%; /* Full height */\r\n  overflow: auto; /* Enable scroll if needed */\r\n  background-color: rgb(0,0,0); /* Fallback color */\r\n  background-color: rgba(0,0,0,0.9); /* Black w/ opacity */\r\n}\r\n/* Modal Content (image) */\r\n.modal-content {\r\n  margin: auto;\r\n  display: block;\r\n  width: 80%;\r\n  max-width: 700px;\r\n}\r\n/* Caption of Modal Image */\r\n#caption {\r\n  margin: auto;\r\n  display: block;\r\n  width: 80%;\r\n  max-width: 700px;\r\n  text-align: center;\r\n  color: #ccc;\r\n  padding: 10px 0;\r\n  height: 150px;\r\n}\r\n/* Add Animation */\r\n.modal-content, #caption {  \r\n  -webkit-animation-name: zoom;\r\n  -webkit-animation-duration: 0.6s;\r\n  animation-name: zoom;\r\n  animation-duration: 0.6s;\r\n}\r\n@-webkit-keyframes zoom {\r\n  from {-webkit-transform:scale(0)} \r\n  to {-webkit-transform:scale(1)}\r\n}\r\n@keyframes zoom {\r\n  from {transform:scale(0)} \r\n  to {transform:scale(1)}\r\n}\r\n/* The Close Button */\r\n.close {\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 35px;\r\n  color: #f1f1f1;\r\n  font-size: 40px;\r\n  font-weight: bold;\r\n  transition: 0.3s;\r\n}\r\n.close:hover,\r\n.close:focus {\r\n  color: #bbb;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n}\r\n/* 100% Image Width on Smaller Screens */\r\n@media only screen and (max-width: 700px){\r\n  .modal-content {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<h2>Image Modal</h2>\r\n<p>In this example, we use CSS to create a modal (dialog box) that is hidden by default.</p>\r\n<p>We use JavaScript to trigger the modal and to display the current image inside the modal when it is clicked on. Also note that we use the value from the image's \"alt\" attribute as an image caption text inside the modal.</p>\r\n<img id=\"myImg\" src=\"https://i.imgur.com/fZibGvE.jpg\" alt=\"Photo by Roberto Shumski from Pexels\" style=\"width:100%;max-width:300px\">\r\n<!-- The Modal -->\r\n<div id=\"myModal\" class=\"modal\">\r\n  <span class=\"close\">&times;</span>\r\n  <img class=\"modal-content\" id=\"img01\">\r\n  <div id=\"caption\"></div>\r\n</div>\r\n<script>\r\n// Get the modal\r\nvar modal = document.getElementById(\"myModal\");\r\n// Get the image and insert it inside the modal - use its \"alt\" text as a caption\r\nvar img = document.getElementById(\"myImg\");\r\nvar modalImg = document.getElementById(\"img01\");\r\nvar captionText = document.getElementById(\"caption\");\r\nimg.onclick = function(){\r\n  modal.style.display = \"block\";\r\n  modalImg.src = this.src;\r\n  captionText.innerHTML = this.alt;\r\n}\r\n// Get the <span> element that closes the modal\r\nvar span = document.getElementsByClassName(\"close\")[0];\r\n// When the user clicks on <span> (x), close the modal\r\nspan.onclick = function() { \r\n  modal.style.display = \"none\";\r\n}\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n[![](https://i.imgur.com/fZibGvE.jpg)](https://i.imgur.com/fZibGvE.jpg)<p style=\"font-size: 12px; text-align: right\">_Photo by Roberto Shumski from Pexels_</p>","frontmatter":{"date":"2020-03-15","title":"Clickable Images","category":"knowledge-base"},"fields":{"slug":"/Clickable_Images/"},"timeToRead":5,"html":"<p><a href=\"https://i.imgur.com/4CmQr4y.jpg\"><img src=\"https://i.imgur.com/4CmQr4y.jpg\"></a><p style=\"font-size: 12px; text-align: right\"><em>Photo by Kirill Belotserkovsky from Pexels</em></p></p>\n<blockquote>\n<p>All cool images should be clickable. Because when you cannot click on somethign it does <code>not exist</code> :)</p>\n</blockquote>\n<blockquote>\n<p>So how to make our gorgeous image larger on click or hover?</p>\n</blockquote>\n<blockquote>\n<p>Let's go to our html file where we create a wrapper <code>div</code> tag around our <code>img</code> tag:</p>\n</blockquote>\n<pre><code>&#x3C;div class=\"imageContainer\" style=\"width: 100px\">\n    &#x3C;img\n        src=\"https://i.imgur.com/4CmQr4y.jpg\"\n        alt=\"Kirill Belotserkovsky\"\n    />\n&#x3C;/div>\n</code></pre>\n<blockquote>\n<p>Then in our css file we write following to add on hover effect:</p>\n</blockquote>\n<pre><code>.imageContainer > img:hover {\nwidth: 800px;\n}\n</code></pre>\n<blockquote>\n<p>Or add <code>active</code> which is on click effect:</p>\n</blockquote>\n<pre><code>.imageContainer > img:active {\nwidth: 800px;\nheight: 800px;\n}\n</code></pre>\n<blockquote>\n<p>Another way is to use modals, which is a bit more complicated. But good example is in <a href=\"https://www.w3schools.com/howto/howto_css_modal_images.asp\">w3schools</a></p>\n</blockquote>\n<blockquote>\n<p>In <code>.md</code> files we have a problem that we cannot really import external css files. But there is a way how you can make an image clickable:</p>\n</blockquote>\n<pre><code>[![pic](https://i.imgur.com/VvvlEcI.jpg)](https://i.imgur.com/VvvlEcI.jpg)\n</code></pre>\n<blockquote>\n<p>Result will look like this:</p>\n</blockquote>\n<p><a href=\"https://i.imgur.com/VvvlEcI.jpg\"><img src=\"https://i.imgur.com/VvvlEcI.jpg\" alt=\"pic\"></a><p style=\"font-size: 12px; text-align: right\"><em>Photo by eberhard grossgasteiger from Pexels</em></p></p>\n<blockquote>\n<p>It is not sooo perfect as it opens in the same page, but still something.</p>\n</blockquote>\n<blockquote>\n<p>And what I just discovered is that we can use <code>style</code> tags in and <code>.md</code> file!! This opens up a lot of new unexplored possibilities.\n😈😈😈</p>\n</blockquote>\n<blockquote>\n<p>In an <code>.md</code> file I can write:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n.imageContainer > img:hover {\nmax-width: 760px;\n}\n&#x3C;/style>\n\n&#x3C;div class=\"imageContainer\" style=\"width: 200px\">\n    &#x3C;img\n        src=\"https://i.imgur.com/5zSAEo3.jpg\"\n        alt=\"Photo by Julius Silver from Pexels\"\n    />\n&#x3C;/div>\n</code></pre>\n<blockquote>\n<p>The result will look like this. When I hover over on the image with mouse, it will become bigger:</p>\n</blockquote>\n<style>\n.imageContainer > img:hover {\nmax-width: 760px;\n}\n</style>\n<div class=\"imageContainer\" style=\"width: 200px\">\n    <img\n        src=\"https://i.imgur.com/5zSAEo3.jpg\"\n        alt=\"Photo by Julius Silver from Pexels\"\n    />\n</div>\n<blockquote>\n<p>How about clicking now? Integrate following code to your <code>.md</code> file. Then you will need to click <strong>and hold</strong> the click:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n.imageContainer2 > img:active {\nmax-width: 760px;\n}\n&#x3C;/style>\n\n&#x3C;div class=\"imageContainer2\" style=\"width: 200px\">\n    &#x3C;img\n        src=\"https://i.imgur.com/48E34Uh.jpg\"\n        alt=\"Photo by Quang Nguyen Vinh from Pexels\"\n    />\n&#x3C;/div>\n</code></pre>\n<style>\n.imageContainer2 > img:active {\nmax-width: 760px;\n}\n</style>\n<div class=\"imageContainer2\" style=\"width: 200px\">\n    <img\n        src=\"https://i.imgur.com/48E34Uh.jpg\"\n        alt=\"Photo by Quang Nguyen Vinh from Pexels\"\n    />\n</div>\n<blockquote>\n<p>Downside is that you really need to hold the click... Well, that is weird, isn't it?</p>\n</blockquote>\n<blockquote>\n<p>Now let's try a small hack with input, button and label and see it we can make it work. Paste following code:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n#btnControl {\n    display: none;\n}\n#btnControl:checked + label > img {\n   max-width: 760px;\n}\n&#x3C;/style>\n&#x3C;input type=\"checkbox\" id=\"btnControl\"/>\n&#x3C;label class=\"btn\" for=\"btnControl\" style=\"width:200px; padding: 0\" >&#x3C;img  src=\"https://i.imgur.com/N56WE3x.jpg\" id=\"btnLeft\" alt=\"Photo by R.Fera from Pexels\" />&#x3C;/label>\n</code></pre>\n<blockquote>\n<p>Result will be a nice clickable image:</p>\n</blockquote>\n<br/>\n<style>\n#btnControl {\n    display: none;\n}\n\n#btnControl:checked + label > img {\n   max-width: 760px;\n}\n</style>\n<input type=\"checkbox\" id=\"btnControl\"/>\n<label class=\"btn\" for=\"btnControl\" style=\"width:200px; padding: 0\" ><img  src=\"https://i.imgur.com/N56WE3x.jpg\" id=\"btnLeft\" alt=\"Photo by R.Fera from Pexels\"  /></label>\n<blockquote>\n<p>Yay! We have done this!</p>\n</blockquote>\n<blockquote>\n<p>Another interesting way to have a zoom effect:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n.zoom {\n    transition:transform 0.25s ease;\n}\n.zoom:hover {\n    -webkit-transform:scale(4);\n    transform:scale(4);\n}\n&#x3C;/style>\n&#x3C;img src=\"https://i.imgur.com/N4KOQ5H.jpg\" class=\"zoom\" style=\"width: 200px\"  alt=\"Photo by H. Emre from Pexels\" />\n</code></pre>\n<style>\n.zoom {\n    transition:transform 0.25s ease;\n}\n.zoom:hover {\n    -webkit-transform:scale(4);\n    transform:scale(4);\n\n\n}\n</style>\n<img src=\"https://i.imgur.com/N4KOQ5H.jpg\" class=\"zoom\" style=\"width: 200px\" alt=\"Photo by H. Emre from Pexels\" />\n<blockquote>\n<p>Although this is now going beyond our container, still it is a first step to have a nice zoom. Can be of course polisheed further.</p>\n</blockquote>\n<blockquote>\n<p>Some more interesting thing can be found on <a href=\"https://stackoverflow.com/questions/13630229/can-i-have-an-onclick-effect-in-css/32721572\">StackOverflow</a></p>\n</blockquote>\n<blockquote>\n<p>Lastly here is how we can use modals in in html file which looks realy great but unfortunately does not work in <code>.md</code> file.</p>\n</blockquote>\n<pre><code>&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n&#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n&#x3C;style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n#myImg {\n  border-radius: 5px;\n  cursor: pointer;\n  transition: 0.3s;\n}\n#myImg:hover {opacity: 0.7;}\n/* The Modal (background) */\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  padding-top: 100px; /* Location of the box */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.9); /* Black w/ opacity */\n}\n/* Modal Content (image) */\n.modal-content {\n  margin: auto;\n  display: block;\n  width: 80%;\n  max-width: 700px;\n}\n/* Caption of Modal Image */\n#caption {\n  margin: auto;\n  display: block;\n  width: 80%;\n  max-width: 700px;\n  text-align: center;\n  color: #ccc;\n  padding: 10px 0;\n  height: 150px;\n}\n/* Add Animation */\n.modal-content, #caption {  \n  -webkit-animation-name: zoom;\n  -webkit-animation-duration: 0.6s;\n  animation-name: zoom;\n  animation-duration: 0.6s;\n}\n@-webkit-keyframes zoom {\n  from {-webkit-transform:scale(0)} \n  to {-webkit-transform:scale(1)}\n}\n@keyframes zoom {\n  from {transform:scale(0)} \n  to {transform:scale(1)}\n}\n/* The Close Button */\n.close {\n  position: absolute;\n  top: 15px;\n  right: 35px;\n  color: #f1f1f1;\n  font-size: 40px;\n  font-weight: bold;\n  transition: 0.3s;\n}\n.close:hover,\n.close:focus {\n  color: #bbb;\n  text-decoration: none;\n  cursor: pointer;\n}\n/* 100% Image Width on Smaller Screens */\n@media only screen and (max-width: 700px){\n  .modal-content {\n    width: 100%;\n  }\n}\n&#x3C;/style>\n&#x3C;/head>\n&#x3C;body>\n&#x3C;h2>Image Modal&#x3C;/h2>\n&#x3C;p>In this example, we use CSS to create a modal (dialog box) that is hidden by default.&#x3C;/p>\n&#x3C;p>We use JavaScript to trigger the modal and to display the current image inside the modal when it is clicked on. Also note that we use the value from the image's \"alt\" attribute as an image caption text inside the modal.&#x3C;/p>\n&#x3C;img id=\"myImg\" src=\"https://i.imgur.com/fZibGvE.jpg\" alt=\"Photo by Roberto Shumski from Pexels\" style=\"width:100%;max-width:300px\">\n&#x3C;!-- The Modal -->\n&#x3C;div id=\"myModal\" class=\"modal\">\n  &#x3C;span class=\"close\">&#x26;times;&#x3C;/span>\n  &#x3C;img class=\"modal-content\" id=\"img01\">\n  &#x3C;div id=\"caption\">&#x3C;/div>\n&#x3C;/div>\n&#x3C;script>\n// Get the modal\nvar modal = document.getElementById(\"myModal\");\n// Get the image and insert it inside the modal - use its \"alt\" text as a caption\nvar img = document.getElementById(\"myImg\");\nvar modalImg = document.getElementById(\"img01\");\nvar captionText = document.getElementById(\"caption\");\nimg.onclick = function(){\n  modal.style.display = \"block\";\n  modalImg.src = this.src;\n  captionText.innerHTML = this.alt;\n}\n// Get the &#x3C;span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n// When the user clicks on &#x3C;span> (x), close the modal\nspan.onclick = function() { \n  modal.style.display = \"none\";\n}\n&#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><a href=\"https://i.imgur.com/fZibGvE.jpg\"><img src=\"https://i.imgur.com/fZibGvE.jpg\"></a><p style=\"font-size: 12px; text-align: right\"><em>Photo by Roberto Shumski from Pexels</em></p></p>"}},{"node":{"id":"acefea71-e69d-5437-b555-71133a0185b4","excerpt":"Photo from wallpapersafari.com Some things in life are obvious. Like when you want to concatenate two strings for example \"For the \"  and…","rawMarkdownBody":"![](https://i.imgur.com/ETtwNWY.jpg \"Photo from wallpapersafari.com\")<p style=\"font-size: 12px; text-align: right\">_Photo from wallpapersafari.com_</p>\r\n\r\n> Some things in life are obvious. Like when you want to concatenate two strings for example <code>\"For the \" </code> and <code>\"Alliance!\"</code> everyone knows that there are **maximum** of two (reasonable) ways:\r\n\r\n> One: The most straight-forward, simple and elegant way is using a `plus` sign:\r\n```\r\nconst callToArms = \"For the \"\r\nconst theOnlyCorrectAndMorallyAcceptableFaction = \"Alliance!\"\r\nconst warCry = callToArms + theOnlyCorrectAndMorallyAcceptableFaction\r\nconsole.log(warCry)\r\n```\r\n\r\n> Two: More complex way when you want to show off that you know string methods is using `concat`. Ofc only if you want to impress someone:\r\n```\r\nconst callToArms = \"For the \"\r\nconst theOnlyCorrectAndMorallyAcceptableFaction = \"Alliance!\"\r\nconst warCry = callToArms.concat(theOnlyCorrectAndMorallyAcceptableFaction)\r\nconsole.log(warCry)\r\n```\r\n\r\n> Now what on earth is `Template Literal`? And why would you introduce a third option in already perfect world with already too (twoo) many unnecessary choices? To be even cool(er) and even more high-end? Kaman programmers. Why, just why? :)\r\n\r\n>OK, enough of initial shock and drama, let's learn something cool(er). It turns out there is another way (and now I wonder how many more(er) I am still not yet aware of) how to contactenate two strings. It is called `Template Literal`... because it makes perfect sense (??!) and the syntax also makes perfect sense (totally) and is not at all overly complicated :)\r\n```\r\nconst callToArms = \"For the \"\r\nconst theOnlyCorrectAndMorallyAcceptableFaction = \"Alliance!\"\r\nconst warCry =`${callToArms}${theOnlyCorrectAndMorallyAcceptableFaction}`\r\nconsole.log(warCry)\r\n```\r\n\r\n> Because everyone loves `dollars` and `braces` ;)\r\n\r\n\r\n![](https://i.imgur.com/8ubmVyL.jpg \"Photo by Reynaldo #brigworkz Brigantty from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Reynaldo #brigworkz Brigantty from Pexels_</p>\r\n\r\n> Now let's start discovering template literals more:\r\n\r\n> It seems that JavaScript support 3 ways to define a string: 'single quoted' and \"double quoted\" and with `backticks`. They're treated as ordinary strings: `hello` is the same as 'hello'.\r\n\r\n> String defined with `backticks` are called \"template literals\". They have several features that allow them to be used as \"templates\", with placeholders that are filled in later.\r\n\r\n> Interpolation is the most common use case. \"Interpolation\" means \"inserting something into something else\". With template literals, we can insert the result of any JavaScript expression into the string by wrapping it in ${...}.\r\n```\r\n`1 + 1 = ${1 + 1}`\r\n'1 + 1 = 2' \r\n\r\n`${'Shouting'.toUpperCase()} and ${'Whispering'.toLowerCase()}`\r\n'SHOUTING and whispering' \r\n```\r\n> Interpolating with <code>${...}</code> converts the value to a string by calling its <code>.toString()</code> method. For numbers, that works great. But for arrays, it probably won't do what we want. For objects, it definitely won't do what we want!\r\n\r\n```\r\nconst x = 4;\r\n`1 + ${x} = ${x + 1}`\r\n'1 + 4 = 5' \r\n```\r\n> We can use single quote in the template literal, if we escape it:\r\n```\r\n`\\'`\r\n```\r\n\r\n>Normally, JavaScript strings can't have newlines in them:\r\n```\r\nconst x = 'oh\r\nno'\r\nSyntaxError: Invalid or unexpected token \r\n```\r\n\r\n> However, template literals don't have that limitation: they can contain newlines! This simplifies a lot of code. For example, here's an email template written using old-style JavaScript:\r\n```\r\nconst name = 'Amir'\r\nconst email = `\r\n  Hi, ${name},\r\n  \r\n  We've updated our privacy policy!\r\n`\r\nemail === \"\\n  Hi, Amir,\\n  \\n  We've updated our privacy policy!\\n\"\r\ntrue\r\n```\r\n","frontmatter":{"date":"2020-03-14","title":"Template Literal","category":"knowledge-base"},"fields":{"slug":"/Template_Literal/"},"timeToRead":3,"html":"<p><img src=\"https://i.imgur.com/ETtwNWY.jpg\" title=\"Photo from wallpapersafari.com\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from wallpapersafari.com</em></p></p>\n<blockquote>\n<p>Some things in life are obvious. Like when you want to concatenate two strings for example <code>\"For the \" </code> and <code>\"Alliance!\"</code> everyone knows that there are <strong>maximum</strong> of two (reasonable) ways:</p>\n</blockquote>\n<blockquote>\n<p>One: The most straight-forward, simple and elegant way is using a <code>plus</code> sign:</p>\n</blockquote>\n<pre><code>const callToArms = \"For the \"\nconst theOnlyCorrectAndMorallyAcceptableFaction = \"Alliance!\"\nconst warCry = callToArms + theOnlyCorrectAndMorallyAcceptableFaction\nconsole.log(warCry)\n</code></pre>\n<blockquote>\n<p>Two: More complex way when you want to show off that you know string methods is using <code>concat</code>. Ofc only if you want to impress someone:</p>\n</blockquote>\n<pre><code>const callToArms = \"For the \"\nconst theOnlyCorrectAndMorallyAcceptableFaction = \"Alliance!\"\nconst warCry = callToArms.concat(theOnlyCorrectAndMorallyAcceptableFaction)\nconsole.log(warCry)\n</code></pre>\n<blockquote>\n<p>Now what on earth is <code>Template Literal</code>? And why would you introduce a third option in already perfect world with already too (twoo) many unnecessary choices? To be even cool(er) and even more high-end? Kaman programmers. Why, just why? :)</p>\n</blockquote>\n<blockquote>\n<p>OK, enough of initial shock and drama, let's learn something cool(er). It turns out there is another way (and now I wonder how many more(er) I am still not yet aware of) how to contactenate two strings. It is called <code>Template Literal</code>... because it makes perfect sense (??!) and the syntax also makes perfect sense (totally) and is not at all overly complicated :)</p>\n</blockquote>\n<pre><code>const callToArms = \"For the \"\nconst theOnlyCorrectAndMorallyAcceptableFaction = \"Alliance!\"\nconst warCry =`${callToArms}${theOnlyCorrectAndMorallyAcceptableFaction}`\nconsole.log(warCry)\n</code></pre>\n<blockquote>\n<p>Because everyone loves <code>dollars</code> and <code>braces</code> ;)</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/8ubmVyL.jpg\" title=\"Photo by Reynaldo #brigworkz Brigantty from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Reynaldo #brigworkz Brigantty from Pexels</em></p></p>\n<blockquote>\n<p>Now let's start discovering template literals more:</p>\n</blockquote>\n<blockquote>\n<p>It seems that JavaScript support 3 ways to define a string: 'single quoted' and \"double quoted\" and with <code>backticks</code>. They're treated as ordinary strings: <code>hello</code> is the same as 'hello'.</p>\n</blockquote>\n<blockquote>\n<p>String defined with <code>backticks</code> are called \"template literals\". They have several features that allow them to be used as \"templates\", with placeholders that are filled in later.</p>\n</blockquote>\n<blockquote>\n<p>Interpolation is the most common use case. \"Interpolation\" means \"inserting something into something else\". With template literals, we can insert the result of any JavaScript expression into the string by wrapping it in ${...}.</p>\n</blockquote>\n<pre><code>`1 + 1 = ${1 + 1}`\n'1 + 1 = 2' \n\n`${'Shouting'.toUpperCase()} and ${'Whispering'.toLowerCase()}`\n'SHOUTING and whispering' \n</code></pre>\n<blockquote>\n<p>Interpolating with <code>${...}</code> converts the value to a string by calling its <code>.toString()</code> method. For numbers, that works great. But for arrays, it probably won't do what we want. For objects, it definitely won't do what we want!</p>\n</blockquote>\n<pre><code>const x = 4;\n`1 + ${x} = ${x + 1}`\n'1 + 4 = 5' \n</code></pre>\n<blockquote>\n<p>We can use single quote in the template literal, if we escape it:</p>\n</blockquote>\n<pre><code>`\\'`\n</code></pre>\n<blockquote>\n<p>Normally, JavaScript strings can't have newlines in them:</p>\n</blockquote>\n<pre><code>const x = 'oh\nno'\nSyntaxError: Invalid or unexpected token \n</code></pre>\n<blockquote>\n<p>However, template literals don't have that limitation: they can contain newlines! This simplifies a lot of code. For example, here's an email template written using old-style JavaScript:</p>\n</blockquote>\n<pre><code>const name = 'Amir'\nconst email = `\n  Hi, ${name},\n  \n  We've updated our privacy policy!\n`\nemail === \"\\n  Hi, Amir,\\n  \\n  We've updated our privacy policy!\\n\"\ntrue\n</code></pre>"}},{"node":{"id":"e5fd7c03-f341-538f-8080-980c9d45edf8","excerpt":"Photo by Kaboompics .com from Pexels Does your head also go KABOOM when you think about it? I always find myself wondering should I use…","rawMarkdownBody":"![](https://i.imgur.com/ppveEdb.jpg \"Photo by Kaboompics .com from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Kaboompics .com from Pexels_</p>\r\n\r\n> Does your head also go `KABOOM` when you think about it? I always find myself wondering should I use bracket or is brace also an actually word for a bracket? And how do parentheses mix in all of the chaos?\r\n\r\n> Then I found a random [article](https://www.cis.upenn.edu/~matuszek/General/JavaSyntax/parentheses.html) and it turns out that each of above means something different. At least in American English. So there actually seems to be some level of ORDER in this mess (in scientific terms it is called `controlled chaos`, where you know exactly where your stuff is even if your mother tells you that \"this MESS is horrendeous\"). So let's debunk it.\r\n\r\n> **Parentheses** are smooth: `()` and we love them!\r\n\r\n> **Brackets** are actually square brackets: `[]` and are a bit more difficult to type on the (German) keyboard, but at least they are still close enough to each other.\r\n\r\n> **Braces** are actually curly braces: `{}` and are more difficult to type and more distant from each other. They look cool but you need finger acrobatics to actually type em :)\r\n\r\n\r\n![](https://i.imgur.com/Nwprkto.jpg\"Photo by iRise Drink from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by iRise Drink from Pexels_</p>\r\n","frontmatter":{"date":"2020-03-13","title":"Brackets, Braces and Parentheses","category":"knowledge-base"},"fields":{"slug":"/Brackets_Braces_Parentheses/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/ppveEdb.jpg\" title=\"Photo by Kaboompics .com from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Kaboompics .com from Pexels</em></p></p>\n<blockquote>\n<p>Does your head also go <code>KABOOM</code> when you think about it? I always find myself wondering should I use bracket or is brace also an actually word for a bracket? And how do parentheses mix in all of the chaos?</p>\n</blockquote>\n<blockquote>\n<p>Then I found a random <a href=\"https://www.cis.upenn.edu/~matuszek/General/JavaSyntax/parentheses.html\">article</a> and it turns out that each of above means something different. At least in American English. So there actually seems to be some level of ORDER in this mess (in scientific terms it is called <code>controlled chaos</code>, where you know exactly where your stuff is even if your mother tells you that \"this MESS is horrendeous\"). So let's debunk it.</p>\n</blockquote>\n<blockquote>\n<p><strong>Parentheses</strong> are smooth: <code>()</code> and we love them!</p>\n</blockquote>\n<blockquote>\n<p><strong>Brackets</strong> are actually square brackets: <code>[]</code> and are a bit more difficult to type on the (German) keyboard, but at least they are still close enough to each other.</p>\n</blockquote>\n<blockquote>\n<p><strong>Braces</strong> are actually curly braces: <code>{}</code> and are more difficult to type and more distant from each other. They look cool but you need finger acrobatics to actually type em :)</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/Nwprkto.jpg%22Photo%20by%20iRise%20Drink%20from%20Pexels%22\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by iRise Drink from Pexels</em></p></p>"}},{"node":{"id":"182571b7-9207-5ab9-a811-9061eafc1594","excerpt":"Photo from destructoid.com Using regular expressions in Javascript can be very powerful but also tricky for newbies like me.  Let's start…","rawMarkdownBody":"![](https://i.imgur.com/HaPRiVv.jpg \"Photo from destructoid.com\")<p style=\"font-size: 12px; text-align: right\">_Photo from destructoid.com_</p>\r\n\r\n>Using regular expressions in Javascript can be very powerful but also tricky for newbies like me. \r\n\r\n>Let's start with a problem. All over your brand new blog you have beautiful images! They come from different websites like Pexels, Pixabay, and were created by different people. But you, as a proper `hacker`, want to claim all those spectacular images as YOURS.. your preciouses 😈\r\n\r\n> You get strings such as:\r\n```\r\n\"Photo from pixabay.com\"\r\n\"Photo by Random Person from Pexels\"\r\n```\r\n\r\n> What you want to achieve is ultimately that those result in:\r\n```\r\n\"Photo by Addania\"\r\n```\r\n\r\n> We can write a function that will replace random people and random websits with your own signature :)\r\n```\r\nconst replaceAuthor = (string) => {\r\n    return string.replace(/(Photo by .+ from Pexels)|(Photo from \\b(\\w*.com\\w*)\\b)|(Photo from \\w+)/, \"Photo by Addania\")\r\n}\r\nconsole.log(replaceAuthor(\"Photo from pixabay.com\"))\r\nconsole.log(replaceAuthor(\"Photo by Random Person from Pexels\"))\r\n```\r\n> Please note that `.replace` is a string method which takes in 2 arguments:\r\n>- 1st one is a regular expression which we denote with `/` at the beginning and at the end\r\n>- 2nd argument is a string which will replace whatever regexp from the first argument matches (interestingly the 2nd argument can also be a function)\r\n\r\n> Also note that the regular expression itself looks like this:\r\n```\r\n/(Photo by .+ from Pexels)|(Photo from \\b(\\w*.com\\w*)\\b)|(Photo from \\w+)/\r\n```\r\n>It consists of 3 parts:\r\n\r\n- `Photo by .+ from Pexels` - basically \"Photo by\" ANYTHING and then followed by \"from Pexels\"\r\n\r\nOR (denoted with `/`)\r\n\r\n- `Photo from \\b(\\w*.com\\w*)\\b`  - basically \"Photo from\" and then 1 single word with \".com\" at the end\r\n\r\nOR (denoted with `/`)\r\n\r\n- `Photo from \\w+` - basically \"Photo from\" and then 1 single word\r\n\r\n> Quick beginners course on regular expressions can be found at [regexone.com](https://regexone.com/)\r\n\r\n> Great online tool to test if your regular expression works is at [regex101.com](https://regex101.com/)\r\n\r\n\r\n![](https://i.imgur.com/uZmysyC.jpg \"Photo from theverge.com\")<p style=\"font-size: 12px; text-align: right\">_Photo from theverge.com_</p>\r\n","frontmatter":{"date":"2020-03-12","title":"Using RegExp","category":"knowledge-base"},"fields":{"slug":"/RegExp/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/HaPRiVv.jpg\" title=\"Photo from destructoid.com\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from destructoid.com</em></p></p>\n<blockquote>\n<p>Using regular expressions in Javascript can be very powerful but also tricky for newbies like me. </p>\n</blockquote>\n<blockquote>\n<p>Let's start with a problem. All over your brand new blog you have beautiful images! They come from different websites like Pexels, Pixabay, and were created by different people. But you, as a proper <code>hacker</code>, want to claim all those spectacular images as YOURS.. your preciouses 😈</p>\n</blockquote>\n<blockquote>\n<p>You get strings such as:</p>\n</blockquote>\n<pre><code>\"Photo from pixabay.com\"\n\"Photo by Random Person from Pexels\"\n</code></pre>\n<blockquote>\n<p>What you want to achieve is ultimately that those result in:</p>\n</blockquote>\n<pre><code>\"Photo by Addania\"\n</code></pre>\n<blockquote>\n<p>We can write a function that will replace random people and random websits with your own signature :)</p>\n</blockquote>\n<pre><code>const replaceAuthor = (string) => {\n    return string.replace(/(Photo by .+ from Pexels)|(Photo from \\b(\\w*.com\\w*)\\b)|(Photo from \\w+)/, \"Photo by Addania\")\n}\nconsole.log(replaceAuthor(\"Photo from pixabay.com\"))\nconsole.log(replaceAuthor(\"Photo by Random Person from Pexels\"))\n</code></pre>\n<blockquote>\n<p>Please note that <code>.replace</code> is a string method which takes in 2 arguments:</p>\n<ul>\n<li>1st one is a regular expression which we denote with <code>/</code> at the beginning and at the end</li>\n<li>2nd argument is a string which will replace whatever regexp from the first argument matches (interestingly the 2nd argument can also be a function)</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Also note that the regular expression itself looks like this:</p>\n</blockquote>\n<pre><code>/(Photo by .+ from Pexels)|(Photo from \\b(\\w*.com\\w*)\\b)|(Photo from \\w+)/\n</code></pre>\n<blockquote>\n<p>It consists of 3 parts:</p>\n</blockquote>\n<ul>\n<li><code>Photo by .+ from Pexels</code> - basically \"Photo by\" ANYTHING and then followed by \"from Pexels\"</li>\n</ul>\n<p>OR (denoted with <code>/</code>)</p>\n<ul>\n<li><code>Photo from \\b(\\w*.com\\w*)\\b</code>  - basically \"Photo from\" and then 1 single word with \".com\" at the end</li>\n</ul>\n<p>OR (denoted with <code>/</code>)</p>\n<ul>\n<li><code>Photo from \\w+</code> - basically \"Photo from\" and then 1 single word</li>\n</ul>\n<blockquote>\n<p>Quick beginners course on regular expressions can be found at <a href=\"https://regexone.com/\">regexone.com</a></p>\n</blockquote>\n<blockquote>\n<p>Great online tool to test if your regular expression works is at <a href=\"https://regex101.com/\">regex101.com</a></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/uZmysyC.jpg\" title=\"Photo from theverge.com\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from theverge.com</em></p></p>"}},{"node":{"id":"e02dd6d7-f6d0-5dde-984f-2d47888ddd34","excerpt":"Photo by Miguel Á. Padriñán from Pexels They are cool! But how can we add them to .md files? One way is to visit a website like emojipedia…","rawMarkdownBody":"![](https://i.imgur.com/Lp2TItm.jpg \"Photo by Miguel Á. Padriñán from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Miguel Á. Padriñán from Pexels_</p>\r\n\r\n>They are `cool`! But how can we add them to `.md` files?\r\n\r\n> One way is to visit a website like [emojipedia.org](https://emojipedia.org/), search for your emoji, for example my personal favourite: \r\n```\r\ndevil\r\n```\r\n(yup I have a [personal](https://www.youtube.com/watch?v=pBSuvuWB0T8) - [demon](https://www.youtube.com/watch?v=s43bd66HFDo))\r\n\r\n>There you will see a button to copy the emoji and then all you need to do is `CTRL + V` to your `.md` file. Tadaaa:\r\n\r\n😈\r\n\r\n>Time for plotting spree:\r\n\r\n<img src=\"https://i.imgur.com/ecoffoD.png\" alt=\"drawing\" width=\"100\"/>\r\n","frontmatter":{"date":"2020-03-11","title":"Emojis","category":"knowledge-base"},"fields":{"slug":"/Emojis/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/Lp2TItm.jpg\" title=\"Photo by Miguel Á. Padriñán from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Miguel Á. Padriñán from Pexels</em></p></p>\n<blockquote>\n<p>They are <code>cool</code>! But how can we add them to <code>.md</code> files?</p>\n</blockquote>\n<blockquote>\n<p>One way is to visit a website like <a href=\"https://emojipedia.org/\">emojipedia.org</a>, search for your emoji, for example my personal favourite: </p>\n</blockquote>\n<pre><code>devil\n</code></pre>\n<p>(yup I have a <a href=\"https://www.youtube.com/watch?v=pBSuvuWB0T8\">personal</a> - <a href=\"https://www.youtube.com/watch?v=s43bd66HFDo\">demon</a>)</p>\n<blockquote>\n<p>There you will see a button to copy the emoji and then all you need to do is <code>CTRL + V</code> to your <code>.md</code> file. Tadaaa:</p>\n</blockquote>\n<p>😈</p>\n<blockquote>\n<p>Time for plotting spree:</p>\n</blockquote>\n<img src=\"https://i.imgur.com/ecoffoD.png\" alt=\"drawing\" width=\"100\"/>"}},{"node":{"id":"8f3eead9-fdc7-5d91-a6be-e31b03453bfc","excerpt":"Photo by  S. Hermann & F. Richter from Pixabay I got assigned to an issue to replace some icons with new ones. And I was trying to figure…","rawMarkdownBody":"![](https://i.imgur.com/hqzszg6.jpg \"Photo by  S. Hermann & F. Richter from Pixabay\")<p style=\"font-size: 12px; text-align: right\">_Photo by  S. Hermann & F. Richter from Pixabay_</p>\r\n\r\n>I got assigned to an issue to replace some icons with new ones. And I was trying to figure out from where they are imported (as pictures obviously). And then when after one hour browsing the code I still couldn't find it, my attention was cought by a new tag I haven't seen before: `svg` and `path` tag.\r\n\r\n> I took the tags, pasted it to an empty `.html` file:\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n   width=\"612px\" height=\"502.174px\" viewBox=\"0 65.326 612 502.174\" enable-background=\"new 0 65.326 612 502.174\"\r\n   xml:space=\"preserve\" class=\"logo\">\r\n<path class=\"kiwi\" d=\"M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03\r\n  c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341\r\n  c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933\r\n  c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991\r\n  c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875\r\n  c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489\r\n  c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309\r\n  c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876\r\n  c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413\r\n  c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566\r\n  c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156\r\n  c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351\r\n  c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247\r\n  c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331\r\n  z M445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111\r\n  C434.693,207.929,439.613,203.01,445.731,203.01z\"/>\r\n</svg>\r\n</body>\r\n</html>\r\n```\r\n> opened in browser, and ....\r\n\r\n<br/>\r\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n   width=\"61px\" height=\"50.174px\" viewBox=\"0 65.326 612 502.174\" enable-background=\"new 0 65.326 612 502.174\"\r\n   xml:space=\"preserve\" class=\"logo\">\r\n<path class=\"kiwi\" d=\"M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03\r\n  c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341\r\n  c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933\r\n  c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991\r\n  c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875\r\n  c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489\r\n  c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309\r\n  c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876\r\n  c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413\r\n  c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566\r\n  c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156\r\n  c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351\r\n  c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247\r\n  c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331\r\n  z M445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111\r\n  C434.693,207.929,439.613,203.01,445.731,203.01z\"/>\r\n</svg>\r\n<br/>\r\n<br/>\r\n\r\n😳\r\n\r\n😳\r\n\r\n😳\r\n\r\n😳\r\n\r\n🤯\r\n\r\nRIP Addania\r\n\r\n> My mind was blown! Wohaaaa! Those new possibilities! Doors opening to entire new universe!\r\n\r\n> It turns out that SVG (scalable vector graphics) is a way to paint images in html!\r\n>  \r\n> U-N-B-E-L-I-E-V-A-B-L-E!\r\n\r\n>Now let's get to work:\r\n\r\n![](https://i.imgur.com/ftG4IMt.jpg \"Photo by Ann H from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Ann H from Pexels_</p>\r\n\r\n>Kiwi art by [Chris Coyier](https://css-tricks.com/using-svg/)","frontmatter":{"date":"2020-03-10","title":"SVG","category":"knowledge-base"},"fields":{"slug":"/SVG/"},"timeToRead":3,"html":"<p><img src=\"https://i.imgur.com/hqzszg6.jpg\" title=\"Photo by  S. Hermann &#x26; F. Richter from Pixabay\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by  S. Hermann &#x26; F. Richter from Pixabay</em></p></p>\n<blockquote>\n<p>I got assigned to an issue to replace some icons with new ones. And I was trying to figure out from where they are imported (as pictures obviously). And then when after one hour browsing the code I still couldn't find it, my attention was cought by a new tag I haven't seen before: <code>svg</code> and <code>path</code> tag.</p>\n</blockquote>\n<blockquote>\n<p>I took the tags, pasted it to an empty <code>.html</code> file:</p>\n</blockquote>\n<pre><code>&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;body>\n&#x3C;svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n   width=\"612px\" height=\"502.174px\" viewBox=\"0 65.326 612 502.174\" enable-background=\"new 0 65.326 612 502.174\"\n   xml:space=\"preserve\" class=\"logo\">\n&#x3C;path class=\"kiwi\" d=\"M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03\n  c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341\n  c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933\n  c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991\n  c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875\n  c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489\n  c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309\n  c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876\n  c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413\n  c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566\n  c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156\n  c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351\n  c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247\n  c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331\n  z M445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111\n  C434.693,207.929,439.613,203.01,445.731,203.01z\"/>\n&#x3C;/svg>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<blockquote>\n<p>opened in browser, and ....</p>\n</blockquote>\n<br/>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n   width=\"61px\" height=\"50.174px\" viewBox=\"0 65.326 612 502.174\" enable-background=\"new 0 65.326 612 502.174\"\n   xml:space=\"preserve\" class=\"logo\">\n<path class=\"kiwi\" d=\"M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03\n  c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341\n  c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933\n  c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991\n  c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875\n  c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489\n  c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309\n  c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876\n  c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413\n  c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566\n  c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156\n  c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351\n  c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247\n  c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331\n  z M445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111\n  C434.693,207.929,439.613,203.01,445.731,203.01z\"/>\n</svg>\n<br/>\n<br/>\n<p>😳</p>\n<p>😳</p>\n<p>😳</p>\n<p>😳</p>\n<p>🤯</p>\n<p>RIP Addania</p>\n<blockquote>\n<p>My mind was blown! Wohaaaa! Those new possibilities! Doors opening to entire new universe!</p>\n</blockquote>\n<blockquote>\n<p>It turns out that SVG (scalable vector graphics) is a way to paint images in html!</p>\n<p>U-N-B-E-L-I-E-V-A-B-L-E!</p>\n</blockquote>\n<blockquote>\n<p>Now let's get to work:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/ftG4IMt.jpg\" title=\"Photo by Ann H from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Ann H from Pexels</em></p></p>\n<blockquote>\n<p>Kiwi art by <a href=\"https://css-tricks.com/using-svg/\">Chris Coyier</a></p>\n</blockquote>"}},{"node":{"id":"8f88326d-433c-59fa-8445-4e79f969fa4c","excerpt":"As every good programmer we will need to download a good code editor. According to the polls many developers use VCS (Visual Code Studio…","rawMarkdownBody":"\r\nAs every good programmer we will need to download a good code editor. According to the [polls](https://2019.stateofjs.com/other-tools/) many developers use VCS (Visual Code Studio). Let's install that one then.\r\n\r\n![](https://i.imgur.com/SshAdpx.jpg \"Photo by Negative Space from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Negative Space from Pexels_</p>\r\n\r\n> You can visit their official [website](https://code.visualstudio.com/download) and download the code manually.\r\n\r\n> Alternatively you can search for it in the Ubuntu Software App.\r\n\r\n> Or use CLI to install it.\r\n\r\n> Let's first update the distribution and install dependencies:\r\n\r\n```\r\nsudo apt update\r\nsudo apt install software-properties-common apt-transport-https wget\r\n```\r\n\r\n> You can open up the VCS from the terminal with this command:\r\n\r\n```\r\ncode .\r\n```\r\n\r\n> The dot <code>.</code> means that it will open the files from the current directory.\r\n\r\n> You can also open a specific file in VCS from terminal\r\n\r\n```\r\ncode package.json\r\n```\r\n","frontmatter":{"date":"2020-03-02","title":"Visual Code Studio","category":"knowledge-base"},"fields":{"slug":"/Visual_Code_Studio/"},"timeToRead":1,"html":"<p>As every good programmer we will need to download a good code editor. According to the <a href=\"https://2019.stateofjs.com/other-tools/\">polls</a> many developers use VCS (Visual Code Studio). Let's install that one then.</p>\n<p><img src=\"https://i.imgur.com/SshAdpx.jpg\" title=\"Photo by Negative Space from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Negative Space from Pexels</em></p></p>\n<blockquote>\n<p>You can visit their official <a href=\"https://code.visualstudio.com/download\">website</a> and download the code manually.</p>\n</blockquote>\n<blockquote>\n<p>Alternatively you can search for it in the Ubuntu Software App.</p>\n</blockquote>\n<blockquote>\n<p>Or use CLI to install it.</p>\n</blockquote>\n<blockquote>\n<p>Let's first update the distribution and install dependencies:</p>\n</blockquote>\n<pre><code>sudo apt update\nsudo apt install software-properties-common apt-transport-https wget\n</code></pre>\n<blockquote>\n<p>You can open up the VCS from the terminal with this command:</p>\n</blockquote>\n<pre><code>code .\n</code></pre>\n<blockquote>\n<p>The dot <code>.</code> means that it will open the files from the current directory.</p>\n</blockquote>\n<blockquote>\n<p>You can also open a specific file in VCS from terminal</p>\n</blockquote>\n<pre><code>code package.json\n</code></pre>"}},{"node":{"id":"e38f7042-0c7a-539a-ac7a-ecba39ae34db","excerpt":"Photo by bongkarn thanyakij from Pexels Recently I had this problem to play audio on my Ubuntu whenever I tried to play mp4 videos. Which…","rawMarkdownBody":"\r\n![](https://i.imgur.com/k7kjCMC.jpg \"Photo by bongkarn thanyakij from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by bongkarn thanyakij from Pexels_</p>\r\n\r\nRecently I had this problem to play audio on my Ubuntu whenever I tried to play mp4 videos. Which was solved when I visited the Ubuntu Software store and downloaded:\r\n\r\n```\r\nGStreamer Multimedia Codecs\r\n```\r\n\r\n![](https://i.imgur.com/1i0Ez5b.png \"Photo by Addania\")\r\n","frontmatter":{"date":"2020-03-01","title":"How to fix Audio on MP4 on Ubuntu","category":"knowledge-base"},"fields":{"slug":"/MP4_Audio_Ubuntu_Fix/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/k7kjCMC.jpg\" title=\"Photo by bongkarn thanyakij from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by bongkarn thanyakij from Pexels</em></p></p>\n<p>Recently I had this problem to play audio on my Ubuntu whenever I tried to play mp4 videos. Which was solved when I visited the Ubuntu Software store and downloaded:</p>\n<pre><code>GStreamer Multimedia Codecs\n</code></pre>\n<p><img src=\"https://i.imgur.com/1i0Ez5b.png\" title=\"Photo by Addania\"></p>"}},{"node":{"id":"308a2d17-92f2-59e2-9fc3-19496a3168f7","excerpt":"Photo by picjumbo.com from Pexels Not only did I just get a brand new computer, for me this also denotes an entirely new chapter in my life…","rawMarkdownBody":"\r\n![](https://i.imgur.com/1GXsIyS.jpg \"Photo by picjumbo.com from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by picjumbo.com from Pexels_</p>\r\n\r\n```\r\nNew computer === New Beginning :)\r\n```\r\n\r\nNot only did I just get a brand new computer, for me this also denotes an entirely new chapter in my life. From totally commercial role as a Team Lead Account Manager I jumped right into the abbys of Fron-End Development. Was a complete surprise to many... many who did not know me well enough. Made sense though for those who were close to me and especially made most sense for myself :) I am very much excited to dive into the uncharted waters of\r\n\r\n```\r\nze dark side\r\n```\r\n\r\nas one of my fellow colleagues said :)\r\n\r\nHaving a new computer is like having a blank slate. So innocently pristine, like any new beginning. Let's then start from the scratch and see what we need to set up in order to kick off this new career adventure :)\r\n\r\n![](https://i.imgur.com/ZnEqVOf.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\nSteps we will follow on our journey to new computer configuration with development environment:\r\n\r\n**General:**\r\n\r\n- Node.js\r\n- Git\r\n- Projects folder\r\n- Create React App\r\n- Gatsby\r\n- Github repo\r\n- Code editor\r\n- Prettier\r\n- Flow\r\n- Other useful extensions\r\n- Husky\r\n- Git Flow\r\n\r\n**Company specific:**\r\n\r\n- Daily memo extension\r\n- Main App: Repo setup\r\n- Main App: Backend - Docker\r\n- Main App: Backend - Docker Compose\r\n- Main App: Backend - Config Overrides\r\n- Main App: Backend - Starting the Back-End\r\n- Main App: Front-End Config\r\n- Main App: Daily Routine\r\n- Handbook: Front-End Config\r\n- Handbook: Daily Routine\r\n- Main Transformer: Front-End Config\r\n- Main Transformer: Daily Routine\r\n\r\n---\r\n\r\n##GENERAL SETTINGS##\r\n<br>\r\n<br>\r\n\r\n<h2>Node.js</h2>\r\n\r\nFirst things first, we will need to install Node.js. Node.js is a JavaScript runtime environment. It allows JavaScript to run outside of a browser creating a localhost environment. It comes with a NPM module (Node Package Manager) which allows to install cool packages. You can read more about [Node.js](https://addania.github.io/coding/Intro_to_NodeJS/).\r\n\r\nIn order to install Node.js, we will need to firstly install [NVM](https://addania.github.io/coding/NVM/) (Node version Manager) which enables to switch between different Node.js versions.\r\n\r\n> Open up your Ubuntu terminal or CLI (Command Line Interface)\r\n\r\n![](https://i.imgur.com/DXV0rGZ.jpg \"Photo by Addania\")<p style=\"font-size: 12px; text-align: right\">_Photo by Addania_</p>\r\n\r\n> Update your Linux distribution by running individually:\r\n\r\n```\r\nsudo apt update\r\nsudo apt -y upgrade\r\n```\r\n\r\n> Install <code>curl</code> which enables you to transfer data and download further dependencies:\r\n\r\n```\r\nsudo apt-get install curl\r\n```\r\n\r\n> Download latest version of NVM:\r\n\r\n```\r\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash\r\n```\r\n\r\n> Close and open your terminal\r\n\r\n> Make sure that the download ran successfully by checking the version of nvm:\r\n\r\n```\r\nnvm --version\r\n```\r\n\r\n> Now we will need to set the default version of Node.js. It is good practice to set it to the latest version, which in my case currently is 15.13.0. You can check the latest version here: nodejs.org/en/\r\n\r\n```\r\nnvm install 15.13.0\r\nnvm use 15.13.0\r\n```\r\n\r\n> Test if the installation was successful:\r\n\r\n```\r\nnpm --version\r\nnode --version\r\n```\r\n\r\nPerfect, you have managed to install NVM and Node.js, our main tools to begin with.\r\n\r\n---\r\n\r\n<h2>Git</h2>\r\n\r\n[Git](https://addania.github.io/coding/Intro_to_Git/) is a version control system. Which is a bread and butter for any development project. It will track changes made to your files and make your life way easier when merging different branches to reflect recent updates.\r\n\r\n![](https://i.imgur.com/xGqWMmI.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\n> Install Git by running separately:\r\n\r\n```\r\nsudo apt-get update\r\nsudo apt-get install git\r\n```\r\n\r\n> Verify that the installation ran successfully:\r\n\r\n```\r\ngit --version\r\n```\r\n\r\n> Configure your username and email address:\r\n\r\n```\r\ngit config --global user.name \"addya\"\r\ngit config --global user.email \"addya@guilneas.com”\r\n```\r\n\r\nCongrats, Git is now installed :)\r\n\r\n---\r\n\r\n<h2>Project Folder</h2>\r\n\r\nLet's now create a dedicated place for all your future projects. It will be a folder called <code>projects</code> which will be located under the main folder <code>Home</code>.\r\n\r\n![](https://i.imgur.com/WIwOGuL.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\n> Open up your terminal. You should be in the folder called Home. But to make sure you are there, simply run <code>cd</code> command:\r\n\r\n```\r\ncd\r\n```\r\n\r\n> Create a new folder called <code>projects</code>:\r\n\r\n```\r\nmkdir projects\r\n```\r\n\r\n> Now enter this projects folder with <code>cd</code> (change directory) command:\r\n\r\n```\r\ncd projects\r\n```\r\n\r\nYay, our most important folder is created :)\r\n\r\n---\r\n\r\n<h2>Create React App</h2>\r\n\r\nCreate React App is an officially supported way to create single page React applications. We will create our very first React project using Create React App.\r\n\r\n![](https://i.imgur.com/ovGgKYM.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\n> Install Create React App:\r\n\r\n```\r\nnpm install -g create-react-app\r\n```\r\n\r\n> Make sure you are in your <code>projects</code> folder\r\n\r\n```\r\ncd projects\r\n```\r\n\r\n> Now create your very first Create React App Project called <code>myFirstProject</code>:\r\n\r\n```\r\nnpx create-react-app myFirstProject\r\n```\r\n\r\n> Navigate to your project folder:\r\n\r\n```\r\ncd myFirstProject\r\n```\r\n\r\n> Start your local host environment:\r\n\r\n```\r\nnpm start\r\n```\r\n\r\n> Open your browser and paste this address:\r\n\r\n```\r\nlocalhost:3000\r\n```\r\n\r\nIt should open up your app :) Success!! For more reading about Create React App project, see their official [tutorials](https://reactjs.org/tutorial/tutorial.html). You can also see my article how to [publish](https://addania.github.io/coding/Publish_Create_React_App_on_GithubPages/) your Create React App project on Github pages.\r\n\r\n---\r\n\r\n<h2>Gatsby</h2>\r\n\r\nGatsby is a React framework which allows easy creations of multiple React pages, making it ideal infrastructure for blogs, etc.\r\n\r\n![](https://i.imgur.com/e4IDES5.jpg \"Photo by Somya Dinkar from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Somya Dinkar from Pexels_</p>\r\n\r\n> Install Gatsby:\r\n\r\n```\r\nnpm install -g gatsby-cli\r\n```\r\n\r\n> Make sure it was done correctly by checking:\r\n\r\n```\r\ngatsby --help\r\n```\r\n\r\n> Go to your projects folder:\r\n\r\n```\r\ncd projects\r\n```\r\n\r\n> Install new Gasby project called <code>hello-world</code>:\r\n\r\n```\r\ngatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n```\r\n\r\n> Go to your new project:\r\n\r\n```\r\ncd hello-world\r\n```\r\n\r\n> Start your project in the local host environment by running:\r\n> :\r\n\r\n```\r\nnpm start\r\n```\r\n\r\nor\r\n\r\n```\r\ngatsby develop\r\n```\r\n\r\n> Open your browser and paste this address:\r\n\r\n```\r\nlocalhost:8000\r\n```\r\n\r\nGreat, now you know another way how to create React projects. For more reading about Gatsby, see their official [tutorials](https://www.gatsbyjs.org/tutorial/). You can also see one of my articles on how to [publish](https://addania.github.io/coding/Publish_your_Gatsby_site_to_GitHubpages/) your Gatsby project on Github pages.\r\n\r\n---\r\n\r\n<h2>Github repo</h2>\r\n\r\nSo far we have only talked about our LOCAL environment, which is the one on our laptop. But how about we want to have a backup of our project also online somewhere REMOTE, accessible from any place by anyone? Github is a software development plaform which allows you to store, manage and publish your code.\r\n\r\n![](https://i.imgur.com/TnLmNXz.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\n> Firstly create your own Github account navigating to their official website:\r\n\r\n```\r\nhttps://github.com/\r\n```\r\n\r\n> Then create your very first repository (or repo for short) by clicking on <code>New</code> button:\r\n\r\n![](https://i.imgur.com/P5OEU2v.png \"Photo by Addania\")<p style=\"font-size: 12px; text-align: right\"></p>\r\n\r\n> We will need to link our LOCAL with REMOTE repository by generating [SSH Key](https://addania.github.io/coding/Generate_SSH_Key/).\r\n\r\nAs soon as you have successfully generated a SSH key, we are good to continue with projects.\r\n\r\n---\r\n\r\n<h2>Code Editor</h2>\r\n\r\nWe also need to download a good code editor. According to the [polls](https://2019.stateofjs.com/other-tools/) many developers use VSC (Visual Studio Code). Let's install that one then.\r\n\r\n![](https://i.imgur.com/SshAdpx.jpg \"Photo by Negative Space from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Negative Space from Pexels_</p>\r\n\r\n> You can visit their official [website](https://code.visualstudio.com/download) and download the code manually.\r\n\r\n> Alternatively you can search for it in the Ubuntu Software App.\r\n\r\n> Or use CLI to install it., as I will describe below:\r\n\r\n> Let's first update the distribution and install dependencies:\r\n\r\n```\r\nsudo apt update\r\nsudo apt install software-properties-common apt-transport-https wget\r\n```\r\n\r\n> Now we need to import the Microsoft GPG key:\r\n\r\n```\r\nwget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -\r\n```\r\n\r\n> Next we should enable Visual Code studio repository:\r\n\r\n```\r\nsudo add-apt-repository \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\"\r\n```\r\n\r\n> Now we will install the Visual Studio Code:\r\n\r\n```\r\nsudo apt update\r\nsudo apt install code\r\n```\r\n\r\n> In Visual Studio Code you can install different extensions. From the left navigation bar you click on the last icon called Extensions:\r\n\r\n![](https://i.imgur.com/SiyrHY6.png \"Photo by bongkarn thanyakij from Pexels\")\r\n\r\n> You can search there for any name of extension. Particularly useful one is Prettier (see section below)\r\n\r\n> You can also always display those extensions which are installed entering <code>@installed</code> to the search field:\r\n\r\n```\r\n@installed\r\n```\r\n\r\n> When you have some project opened in VSC you can use command <code>CTRL+SHIFT+F</code>. This will allow you to seach for a substring within content of ALL the files which are opened in the VSC (for example your project folder)\r\n\r\n```\r\nCTRL + SHIFT + F\r\n```\r\n\r\n> To search for the substring in the filename use:\r\n\r\n```\r\nCTRL + P\r\n```\r\n\r\n---\r\n\r\n<h2>Prettier</h2>\r\n\r\n![](https://i.imgur.com/DEkKbQ1.jpg \"Photo by Richi choraria from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Richi choraria from Pexels_</p>\r\n\r\nPrettier helps format your code. We can add it as an extension to Visual Studio Code.\r\n\r\n> Open the VCS:\r\n\r\n```\r\ncode .\r\n```\r\n\r\n> In the left vertical menu click on the last icon called Extensions:\r\n\r\n![](https://i.imgur.com/SiyrHY6.png \"Photo by Addania\")\r\n\r\n> Search for Prettier - Code Formatter and install it.\r\n\r\n> Then go to the Visual Code Studio Settings from the top bottom icon:\r\n\r\n![](https://i.imgur.com/4344x8Q.png \"Photo by Addania\")\r\n\r\n> Navigate to Text Editor -> Formatting and tick the box <code>Format on Save</code>\r\n\r\n---\r\n\r\n<h2>Flow Language Support</h2>\r\n\r\nFlow Language Support is also another useful extension for the Visual Studio Code if your projects are using Flow (like Typescript) to define types.\r\n\r\n> Open the VCS:\r\n\r\n```\r\ncode .\r\n```\r\n\r\n> In the left vertical menu click on the last icon called Extensions:\r\n\r\n![](https://i.imgur.com/SiyrHY6.png \"Photo by Addania\")\r\n\r\n> Search for Flow Language Support and install it.\r\n\r\n---\r\n\r\n<h2>Other useful extensions</h2>\r\n\r\n![](https://i.imgur.com/Ly5LiZx.jpg \"Photo by Janko Ferlic from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Janko Ferlic from Pexels_</p>\r\n\r\nHere is a list of useful extensions for Visual Studio Code which you might consider:\r\n\r\n-     auto-rename-tag\t- \tAutomatically rename paired HTML/XML tag\r\n-     bracket-pair-colorizer\t- \tColorizes bracket pairs\r\n-     code-groovy\t- \tLanguage support for Groovy\r\n-     setting Synch by Shan\t- \tStore your VSC settings on Github and then always synch them when needed with other devices\r\n-     contextualduplicate\t- \tDuplicates text based on the context. If text is selected, only the selected text will be duplicated.\r\n-     duplicateselection\t-  Adds an action to VSCode to duplicate the current selection.\r\n-     EditorConfig\t-  Overrides user/workspace settings with settings found in .editorconfig files.\r\n-     file-icons\t- \tArray of icons for most languages and frameworks\r\n-     gitconfig\t- \tSyntax highlighting for .gitconfig, .gitattributes, and .gitmodules files.\r\n-     gitlens\t- \tGit capabilities built into Visual Studio Code. It helps you to visualize code authorship and Git blame annotations\r\n-     htmltagwrap\t- \tWraps your selection in HTML tags.\r\n-     npm-intellisense\t- \tAutocompletes npm modules in import statements\r\n-     partial-diff\t- \tCompare text in 2 visible editors\r\n-     path-intellisense\t- \tAutocompletes filenames.\r\n-     csstools\t- \tAdds support for modern and experimental CSS\r\n-     Prettier - Code formatter\r\n-     quitcontrol-vscode\t- \tStop mistyping keyboard shortctus that close/quit VSCode unintentionally\r\n-     rainbow-csv\t- \tHighlight columns in comma (.csv), tab (.tsv), semicolon and pipe - separated files in different colors\r\n-     svg\t- \tSVG Language Support Extension\r\n-     typescript-javascript-grammar\t- \tAdds TypeScript grammar extension.\r\n-     vscode-docker\t- \tMakes it easy to build, manage and deploy containerized applications\r\n-     vscode-eslint\t- \tIntegrates ESLint into VS Code.\r\n-     vscode-flow-ide\t- \tFlowtype extension. Flowtype is a static type checker ment to find errors in Javascript programs.\r\n-     vscode-language-babel\t- \tJavaScript syntax highlighting for ES201x, React JSX, Flow and GraphQL.\r\n-     vscode-npm-script\t- Supports running npm scripts defined in the package.json file and validating the installed modules against the dependencies defined in the package.json.\r\n-     vscode-pigments\t- \tAdds color previews to vscode instantly.\r\n\r\n---\r\n\r\n<h2>Husky</h2>\r\n\r\nDid someone say husky? :)\r\n\r\n![](https://i.imgur.com/DcFUuks.jpg?1 \"Photo by Ian Turnell from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Ian Turnell from Pexels_</p>\r\n\r\n---\r\n\r\n<h2>Git Flow</h2>\r\n\r\n![](https://i.imgur.com/nB7b3H4.jpg \"Photo by Kateryna Babaieva from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Kateryna Babaieva from Pexels_</p>\r\n\r\n[Git flow](https://addania.github.io/coding/Git_Flow/) is an amazing concept how to manage branches. Make sure you read the [article](https://nvie.com/posts/a-successful-git-branching-model/) which explains it in detail. Git flow needs to be installed.\r\n\r\n> Install Git flow using following command:\r\n\r\n```\r\nsudo apt-get install git-flow\r\n```\r\n\r\n> For more reading refer to nvie [documentation](https://github.com/nvie/gitflow/wiki/Linux). Please note that you will need to add word <code>sudo</code> in front the the commands.\r\n\r\n**NOTES:**\r\n\r\n> Please note that later on in your repo you will need to initiate the git flow with:\r\n\r\n```\r\ngit flow init --defaults\r\n```\r\n\r\n> And later on you will be creating branches with\r\n\r\n```\r\ngit flow feature start <name-of-your-branch>\r\n```\r\n\r\n> Create a new branch based on another branch:\r\n\r\n```\r\ngit flow feature start 11153s-redesign-dashboard-header-action-buttons feature/11117-redesign-Dashboard-Menu\r\n```\r\n\r\n---\r\n\r\n##COMPANY SPECIFIC SETTINGS##\r\n<br>\r\n<br>\r\n\r\n![](https://i.imgur.com/UdGibOh.jpg \"Photo by Negative Space from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Negative Space from Pexels_</p>\r\n\r\n<h2>Daily memo</h2>\r\n\r\n> Use following extension: https://github.com/pmedianetwork/daily-memo-chrome-extension\r\n\r\n> Follow the read-me notes\r\n\r\n---\r\n\r\n<h2>Main App: Repo setup</h2>\r\n\r\n> Clone the repo from the Github URL\r\n\r\n```\r\ngit clone URL\r\n```\r\n\r\n---\r\n\r\n<h2>Main App: Backend - Docker</h2>\r\n\r\n![](https://i.imgur.com/iLSMcLv.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\nDocker will run backend of our application. Docker is a tool that makes it easier to create, deploy & run applications by using containers. Containers allow to package up your code with all the required parts (like libraries or other dependencies) and deploy them all as a single package. Thanks to that we will make sure that our code will run on any machine regardless of custom settings which can be different from the machine that was originally used to writing or testing the application. Docker also acts like a virtual machine, provides performance boost and reduces the size of the app. For more info this is a nice [article](https://opensource.com/resources/what-docker) to read.\r\n\r\nLet's now get our hands dirty with installation:\r\n\r\n> Update your apt first:\r\n\r\n```\r\nsudo apt-get update\r\n```\r\n\r\n> Allow apt to use repository:\r\n\r\n```\r\nsudo apt-get install \\\r\n    apt-transport-https \\\r\n    ca-certificates \\\r\n    curl \\\r\n    gnupg-agent \\\r\n    software-properties-common\r\n```\r\n\r\n> Add official GPG Key for Docker:\r\n\r\n```\r\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\r\n```\r\n\r\n> Double-check if the key is correct. If yes, last 8 digits of fingerprint should be 0EBFCD88:\r\n\r\n```\r\nsudo apt-key fingerprint 0EBFCD88\r\n```\r\n\r\n> Setup stable repository. Please note that here I had to replace original [documentation](https://docs.docker.com/install/linux/docker-ce/ubuntu/) with the [hack](https://stackoverflow.com/questions/60274857/i-cant-install-docker-because-containerd-io-has-no-installation-candidate) from Stackoverflow :\r\n\r\n```\r\nsudo add-apt-repository \\\r\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\r\n   bionic \\\r\n   stable\"\r\n```\r\n\r\n> Again update the apt:\r\n\r\n```\r\nsudo apt-get update\r\n```\r\n\r\n> Now you can install Docker Engine:\r\n\r\n```\r\nsudo apt-get install docker-ce docker-ce-cli containerd.io\r\n```\r\n\r\n> Now check for all available versions of Docker:\r\n\r\n```\r\napt-cache madison docker-ce\r\n```\r\n\r\n> Example output will be\r\n\r\n```\r\ndocker-ce | 5:19.03.6~3-0~ubuntu-eoan | https://download.docker.com/linux/ubuntu eoan/stable amd64 Packages\r\ndocker-ce | 5:19.03.6~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages\r\ndocker-ce | 5:19.03.5~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages\r\n```\r\n\r\n> Pick the version you want (I would opt for latest one):\r\n\r\n```\r\n5:19.03.6~3-0~ubuntu-eoan\r\n```\r\n\r\n> Then install that specific version but remember to REPLACE <code><VERSION_STRING></code> with your version, in our case <code>5:19.03.6~3-0~ubuntu-eoan</code>:\r\n\r\n```\r\nsudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io\r\n```\r\n\r\n> In above case the final code will look like this:\r\n\r\n```\r\nsudo apt-get install docker-ce=5:19.03.6~3-0~ubuntu-eoan docker-ce-cli=5:19.03.6~3-0~ubuntu-eoan containerd.io\r\n```\r\n\r\n> Verify if installation was success:\r\n\r\n```\r\nsudo docker run hello-world\r\n```\r\n\r\n> If it was, you should get a message simialr to this one:\r\n\r\n```\r\nHello from Docker!\r\nThis message shows that your installation appears to be working correctly.\r\n\r\nTo generate this message, Docker took the following steps:\r\n 1. The Docker client contacted the Docker daemon.\r\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\r\n    (amd64)\r\n 3. The Docker daemon created a new container from that image which runs the\r\n    executable that produces the output you are currently reading.\r\n 4. The Docker daemon streamed that output to the Docker client, which sent it\r\n    to your terminal.\r\n```\r\n\r\nAbove installation steps of Docker can also be found in official [documentation](https://docs.docker.com/install/linux/docker-ce/ubuntu/) together with a small [hack](https://stackoverflow.com/questions/60274857/i-cant-install-docker-because-containerd-io-has-no-installation-candidate).\r\n\r\nIn order to make our lives easier, we can continue [setting](https://docs.docker.com/install/linux/linux-postinstall/) up Docker, so that we do not need to use <code>sudo</code> every single time with managing Docker as a non-root user.\r\n\r\n> We will start with creating a Docker group:\r\n\r\n```\r\nsudo groupadd docker\r\n```\r\n\r\n> Add your users to the docker group:\r\n\r\n```\r\nsudo usermod -aG docker $USER\r\n```\r\n\r\n> Log in and out from your profile (or restart your computer)\r\n\r\n> Verify if you can run Docker command without <code>sudo</code>\r\n\r\n```\r\ndocker run hello-world\r\n```\r\n\r\n> You should get a message similar to this:\r\n\r\n```\r\nHello from Docker!\r\nThis message shows that your installation appears to be working correctly.\r\n\r\nTo generate this message, Docker took the following steps:\r\n 1. The Docker client contacted the Docker daemon.\r\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\r\n    (amd64)\r\n 3. The Docker daemon created a new container from that image which runs the\r\n    executable that produces the output you are currently reading.\r\n 4. The Docker daemon streamed that output to the Docker client, which sent it\r\n    to your terminal.\r\n```\r\n\r\n---\r\n\r\n<h2>Main App: Backend - Docker Compose</h2>\r\n\r\n![](https://i.imgur.com/tu2hiV9.jpg \"Photo by freestocks.org from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by freestocks.org from Pexels_</p>\r\n\r\n> Download latest version of Docker compose:\r\n\r\n```\r\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\r\n```\r\n\r\n> Apply permissions to binary:\r\n\r\n```\r\nsudo chmod +x /usr/local/bin/docker-compose\r\n```\r\n\r\n> Check the installation:\r\n\r\n```\r\ndocker-compose --version\r\n```\r\n\r\n> Output on terminal should be:\r\n\r\n```\r\ndocker-compose version 1.25.4, build 1110ad01\r\n```\r\n\r\n---\r\n\r\n<h2>Main App: Backend - Config Overrides</h2>\r\n\r\n![](https://i.imgur.com/Q6MbuWu.jpg \"Photo by Rodolfo Clix from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Rodolfo Clix from Pexels_</p>\r\n\r\n> These settings assume that you have already downloaded the repository from Github to your LOCAL machine. If you havent done so, clone the repo first with:\r\n\r\n```\r\ngit clone <repo url>\r\n```\r\n\r\n> Then go to your project root folder\r\n\r\n> Create a yml file called <code>adverity-user-overrides-config.yml</code>\r\n\r\n```\r\ntouch adverity-user-overrides-config.yml\r\n```\r\n\r\n> Paste following config to it (where database ulr, username, password, access key id, secret access key need to be requested):\r\n\r\n```\r\ndataSource:\r\n  url: \"<database url>\"\r\nadverity:\r\n  datalake:\r\n    datalakeType: \"sftp\"\r\n    sftp:\r\n      server: \"localhost\"\r\n      username: \"<username>\"\r\n      password: \"<password>\"\r\n      remoteBaseDir: \"/data\"\r\n    s3:\r\n      accessKey: \"<access key id>\"\r\n      secretKey: \"<secret access key>\"\r\naws:\r\n  s3:\r\n    accessKey: \"<access key id>\"\r\n    secretKey: \"<secret access key>\"\r\n\r\nrabbitmq:\r\n  connectionfactory:\r\n    hostname: \"localhost\"\r\n```\r\n\r\n---\r\n\r\n<h2>Main App: Backend - Starting the Backend</h2>\r\n\r\n![](https://i.imgur.com/p7LQncr.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\nDocker will be starting our back-end environment. In one tab of the terminal we will always start our back-end and in another tab we will start our front end local host.\r\n\r\n> Upon the first start we will need to execute command from the root folder of the project:\r\n\r\n```\r\n./docker/build\r\n```\r\n\r\n> This command will build our entire backend.\r\n\r\n> We will need to run this command any time there is any change in the back-end!! For example, database migration or any update to backend.\r\n\r\n> To start the Docker local host (backend infrastructure, like database, sftp datalake, import queues like rabbitMQ, etc.) we will use following command from the root folder of the project:\r\n\r\n```\r\ndocker-compose -f docker/docker-compose-infrastructure.yml up -d\r\n```\r\n\r\n> If we use <code>-d</code> in this command this will result in the backend infrastructure to be running forever silently, even if I turn off and on the computer, it will be by default running. I could run it every time manually if I don't use -d:\r\n\r\n```\r\ndocker-compose -f docker/docker-compose-infrastructure.yml up\r\n```\r\n\r\n> If it gets some error that some plugin failed to be downloaded, try to run it again! If it is stuck at 91%, it might be a visual bug, but it can be already running.\r\n\r\n> I can check if my Docker container (backend infrastrucure) is running with the command:\r\n\r\n```\r\ndocker ps\r\n```\r\n\r\n> Now we need to start the back-end itself (by backend is meant the Java application which connects my frontend app with the backend infrastructure like data)\r\n\r\n> To do it, go to the root folder of the project (all backend stuff is done in root folder):\r\n\r\n```\r\nnpm run insights-start:backend\r\n```\r\n\r\n<!--- just\r\n\r\nOLD INFO - INITIAL\r\n\r\n> To do it, go to the root folder of the project (all backend stuff is done in root folder):\r\n\r\n```\r\n./gradlew bootRun\r\n```\r\n\r\n\r\n> Alternatively instead of `./gradlew bootRun` is to use:\r\n\r\n```\r\nmake start\r\n```\r\n\r\n> <code>./gradlew bootRun</code> needs to be executed every day.\r\n\r\n> Now we will need to import some data to the application (becasue by default it will be empty). We will do this only once at the beginning, later on I do not need to do it. Run following command from root folder:\r\n\r\n```\r\nmake importQ\r\n```\r\n--->\r\n\r\n> Now we are ready to start the front end. You can follow to the <code>Front-End Config</code> section.\r\n\r\n<br />\r\n\r\n**NOTES & ADDITIONAL COMMANDS FOR DOCKER BACKEND:**\r\n\r\n> When I restart the computer, I can check if my Docker container (backend infrastrucure) is running by default with the command:\r\n\r\n```\r\ndocker ps\r\n```\r\n\r\n> Following 3 services should be running:\r\n\r\n```\r\nrabbitMQ\r\nsftp\r\npostgres\r\n```\r\n\r\n> To stop Docker:\r\n\r\n```\r\nCTRL + C\r\n```\r\n\r\nand then\r\n\r\n```\r\ndocker-compose -f docker/docker-compose-infrastructure.yml down\r\n```\r\n\r\n> I can also prune any cache if I want to:\r\n\r\n```\r\ndocker system prune\r\n```\r\n\r\n---\r\n\r\n<h2>Other configs</h2>\r\n\r\n> You will need to install HomeBrew to follow steps below. Go to: [brew.sh](https://brew.sh)\r\n\r\n> Install brew:\r\n\r\n```\r\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\r\n```\r\n\r\n> When it asks you to press RETURN it actually means to press ENTER\r\n\r\n> Then follow instructions in the terminal. It will say something liek: Add HomeBrew to your PATH in home/addania/.profile:\r\n\r\n```\r\necho 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/addania/.profile\r\n```\r\n\r\n> Second instruction will be something like this:\r\n\r\n```\r\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\r\n```\r\n\r\n> Now check if you can use HomeBrew\r\n\r\n```\r\nbrew help\r\n```\r\n\r\n> Then you can proceed with steps below:\r\n\r\n> It is important to set aws and npm registry as mentioned [here](https://handbook.internal.adverity.net/development-environment/general/private-npm-registry/). Instructions are a little bit confusing and useful for MAC users, not Ubuntu, so here are the steps:\r\n\r\n> Update your system\r\n\r\n```\r\nsudo apt update\r\n```\r\n\r\n> Go to this [website](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install) and install aws-cli version 2. It is important that you install version 2 and not version 1 (because it can mess up your setup and then you will have to uninstall the version 1 and install version 2). Command should be following, but confirm with the above page:\r\n\r\n```\r\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\r\nunzip awscliv2.zip\r\nsudo ./aws/install\r\n```\r\n\r\n> Last command you will probably have to do separately:\r\n\r\n```\r\nsudo ./aws/install\r\n```\r\n\r\n> Check if you have the correct version of the aws:\r\n\r\n```\r\naws --version\r\n```\r\n\r\n> If above command gives you version, then skip next workaround and move on to installing aws-vault.\r\n\r\n> If above command gives you unexpected result like for example not found, then the folder in which the aws resides is probably different from the default. For this scenario, here is the following workaround. Check following path, if your aws is there:\r\n\r\n```\r\n/usr/local/aws-cli/v2/current/bin/aws --version\r\n```\r\n\r\n> If you found it, then run this command:\r\n\r\n```\r\nwhich aws\r\n```\r\n\r\n> It will probably output you something like `/usr/local/bin/aws`. Use that output to link your current aws path `/usr/local/aws-cli/v2/current/bin/aws` to the default one `/usr/local/bin/aws`:\r\n\r\n```\r\nln -s /usr/local/aws-cli/v2/current/bin/aws /usr/local/bin/aws\r\n```\r\n\r\n> If this does not work, try it without local:\r\n\r\n```\r\nln -s /usr/local/aws-cli/v2/current/bin/aws /usr/bin/aws\r\n```\r\n\r\n> This should work now, you should again confirm with `aws --version` which should output a version\r\n\r\n> Then you need to install the aws-vault. Go to this [website](https://github.com/99designs/aws-vault) and in read.me check the latest releases. For example in the time of writing latest release was: https://github.com/99designs/aws-vault/releases/tag/v6.3.1\r\n\r\n> Download the file `aws-valut-linux-amd64`\r\n\r\n> Then go to the terminal and move it the `/usr/local/bin/aws-vault`\r\n\r\n```\r\nsudo mv aws-vault-linux-amd64 /usr/local/bin/aws-vault\r\n```\r\n\r\n> Then use this command:\r\n\r\n```\r\nsudo chmod +x /usr/local/bin/aws-vault\r\n```\r\n\r\n> Test if the vault works:\r\n\r\n```\r\naws-vault --version\r\n```\r\n\r\n> Add vault to the adverity-main:\r\n\r\n```\r\naws-vault add adverity-main\r\n```\r\n\r\n> Verify if it worked:\r\n\r\n```\r\naws-vault list\r\n```\r\n\r\n> Verify access:\r\n\r\n```\r\naws-vault exec adverity-main -- aws sts get-caller-identity\r\n```\r\n\r\n> then go to the root folter on you PC (such as Home). Create a `.aws` folder or navigate to it if it already exists. Create a config file there (without any extension).\r\n\r\n> /.aws/config file should look like described in the handbook [here](https://handbook.internal.adverity.net/development-environment/general/private-npm-registry/). Here is just a mock with xxx and yyy placeholders:\r\n\r\n```\r\n [profile adverity-main]\r\n # if you have set up MFA, you should uncomment the line below and update mfa_serial with the ARN of your MFA virtual device\r\n #mfa_serial= xxxxx\r\n region=eu-west-1\r\n source_profile= yyyyy\r\n\r\n [profile codeartifact]\r\n role_arn = xxxxx\r\n region=eu-west-1\r\n source_profile = yyyyy\r\n```\r\n\r\n> Test if you have correct access by running:\r\n\r\n```\r\naws-vault exec codeartifact -- aws codeartifact list-domains\r\n```\r\n\r\n> Expected outcome should look like this:\r\n\r\n```\r\n {\r\n     \"domains\": [\r\n         {\r\n             \"name\": \"xx\",\r\n             \"owner\": \"yyy\",\r\n             \"status\": \"Active\",\r\n             \"encryptionKey\": \"zzz\"\r\n         }\r\n     ]\r\n }\r\n```\r\n\r\n> Go to the root folder of your computer (Home) and find a file there called: `.bashrc` and paste following snippet into it. Please note, paste it at the end BEFORE the last NVM commands:\r\n\r\n```\r\nexport ADVERITY_CODEARTIFACT_AUTH_TOKEN=`aws-vault exec codeartifact -- aws codeartifact get-authorization-token --domain adverity --domain-owner 508912190628 --query authorizationToken --output text`\r\n```\r\n\r\n> Restart your terminal!\r\n\r\n> Then go to terminal and execute:\r\n\r\n```\r\nsource ~/.bashrc\r\n```\r\n\r\n> Verify if your setup works:\r\n\r\n```\r\ngit clone git@github.com:pmedianetwork/npm-repo-test.git npm-repo-test \\\r\n    && cd \"$_\" \\\r\n    && npm install\r\n```\r\n\r\n---\r\n\r\n<h2>Main App: Front-End Config</h2>\r\n\r\n![](https://i.imgur.com/894yf32.jpg?1 \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\nThis assumes that you have already cloned the repository from the Github URL using <code>git clone URL</code>\r\n\r\nThen you can navigate to web-app folder:\r\n\r\n```\r\ncd web-app\r\nnpm run bootstrap:ci\r\n```\r\n\r\n> To start the frontend, open a new tab in your terminal and follow these instructions:\r\n\r\n```\r\ncd web-app\r\nnpm run insights-start\r\n```\r\n\r\n> You will need to open the browser. Where <code>appName</code> is the repo name. App will run under:\r\n\r\n```\r\nhttp://localhost:8080/<appName>\r\n```\r\n\r\n> You will need to login to the app. Login credentials can be found in <code>BootStrap.groovy</code> file in the <code>grails-app/init</code> folder\r\n\r\n> Then navigate to a Tenant <code>Big client</code>\r\n\r\n> Click on your Account -> Admin Pages -> Dev -> Bulk import Big csv files for client Big\r\n\r\n> This should load data, data will persist even if we restart the app.\r\n\r\n---\r\n\r\n<h2>Main App: Daily Routine</h2>\r\n\r\n![](https://i.imgur.com/F6TX3fJ.jpg \"Photo by Kaboompics.com from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Kaboompics.com from Pexels_</p>\r\n\r\nShortcut to start up everything.\r\n\r\n> Backend daily routine:\r\n\r\n```\r\ncd projects/<appName>\r\n./gradlew bootRun\r\n```\r\n\r\n> Frontend daily routine:\r\n\r\n```\r\ncd projects/<appName>/web-app\r\nnpm start\r\n```\r\n\r\n> Open browser:\r\n\r\n```\r\nhttp://localhost:8080/<appName>\r\n```\r\n\r\n> Login\r\n\r\n> You are ready to rock :)\r\n\r\n---\r\n\r\n<h2>Handbook: Front-End Config</h2>\r\n\r\n![](https://i.imgur.com/qDy6nQF.jpg \"Photo by Kaboompics .com from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Kaboompics .com from Pexels_</p>\r\n\r\nThis assumes that you have already cloned the repository of the Handbook from the Github URL using <code>git clone URL</code>\r\n\r\n> Then you can navigate to project folder:\r\n\r\n```\r\ncd handbook\r\n```\r\n\r\n> Then initiate git flow\r\n\r\n```\r\ngit flow init\r\n```\r\n\r\n> It will ask you couple of questions:\r\n\r\n![](https://i.imgur.com/QdOT2pp.png?1 \"Photo by Addania\")\r\n\r\n> Answer <code>master</code> to the first question and <code>develop</code> to the second question. Then hit enter to confirm all the rest of the questions.\r\n\r\n> Then check how your <code>config</code> file in <code>git</code> folder looks like. It should look like this:\r\n\r\n```\r\n[core]\r\n\trepositoryformatversion = 0\r\n\tfilemode = true\r\n\tbare = false\r\n\tlogallrefupdates = true\r\n[remote \"origin\"]\r\n\turl = git@github.com:pmedianetwork/handbook.git\r\n\tfetch = +refs/heads/*:refs/remotes/origin/*\r\n[branch \"develop\"]\r\n\tremote = origin\r\n\tmerge = refs/heads/develop\r\n[branch \"master\"]\r\n\tremote = origin\r\n\tmerge = refs/heads/master\r\n[gitflow \"branch\"]\r\n\tmaster = master\r\n\tdevelop = develop\r\n[gitflow \"prefix\"]\r\n\tfeature = feature/\r\n\tbugfix = bugfix/\r\n\trelease = release/\r\n\thotfix = hotfix/\r\n\tsupport = support/\r\n\tversiontag =\r\n[gitflow \"path\"]\r\n\thooks = /home/addania/projects/handbook/.git/hooks\r\n```\r\n\r\n> Great!\r\n\r\n> Let's install some <code>prepare-commit-msg</code> git hook:\r\n\r\n```\r\ncurl https://gist.githubusercontent.com/bartoszmajsak/1396344/raw/bff6973325b159254a3ba13c5cb9ac8fda8e382b/prepare-commit-msg.sh > .git/hooks/prepare-commit-msg && chmod u+x .git/hooks/prepare-commit-msg\r\n```\r\n\r\n> Now we can start the backend for the handbook. Pre-requisites are all the steps from the Docker and Docker Compose section including managing Docker as a non-root user (please see corresponding sections above).\r\n\r\n> If we have done everything as above, we can now start the backend simply with:\r\n\r\n```\r\ndocker-compose up\r\n```\r\n\r\n> We should check the browser at the URL:\r\n\r\n```\r\nlocalhost:4567\r\n```\r\n\r\n> You are also ready to rock the handbook ;)\r\n\r\n---\r\n\r\n<h2>Handbook: Daily Routine Start-up</h2>\r\n\r\n![](https://i.imgur.com/vck5NPy.jpg \"Photo by Free Photos.cc from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Free Photos.cc from Pexels_</p>\r\n\r\n> Navigate to handbook folder\r\n\r\n```\r\ncd projects/handbook\r\n```\r\n\r\n> Start the backend:\r\n\r\n```\r\ndocker-compose up\r\n```\r\n\r\n> App is served at the URL:\r\n\r\n```\r\nlocalhost:4567\r\n```\r\n\r\n---\r\n\r\n<h2>Handbook: Daily Routine Branching and Commits</h2>\r\n\r\n![](https://i.imgur.com/kRYW41f.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\n> If you want to create a branch and then PR, go to the handbook folder\r\n\r\n```\r\ncd handbook\r\n```\r\n\r\n> Make sure you are on develop branch:\r\n\r\n```\r\ngit status\r\n```\r\n\r\n> If not use:\r\n\r\n```\r\ngit checkout develop\r\n```\r\n\r\n> Fetch and pull latest changes:\r\n\r\n```\r\ngit fetch\r\ngit pull\r\n```\r\n\r\n> Please note that FETCH is a general command and will update local copies of all remote branches so this is always safe for your local branches. BUT: fetch will not update local branches (which track remote branches); if you want to update your local branches you still need to pull every branch.\r\n\r\n> Create a new feature branch from develop using git flow:\r\n\r\n```\r\ngit flow feature start fix-typos\r\n```\r\n\r\n> Please note that we don't have hotfixes on handbook, everything is a feature. IN above example <code>fix-typos</code> is a the name of the branch. Also notice that names of the branches should be kebab-cased:\r\n\r\n> Make sure you are on the the newly created branch:\r\n\r\n```\r\ngit status\r\n```\r\n\r\n> Start the backend:\r\n\r\n```\r\ndocker-compose up\r\n```\r\n\r\n> Start the front end:\r\n\r\n```\r\ncd web-app\r\ndocker-compose up\r\n```\r\n\r\n> Code code code FTW\r\n\r\n> You cannot forget to do the changesets.\r\n\r\n> Navigate to root folder of the project and then to folder called:\r\n\r\n```\r\n.changesets\r\n```\r\n\r\n> There you will find a file called\r\n\r\n```\r\nchangeset.md.template\r\n```\r\n\r\n> Rename it to your branch name (again kebab-cased)\r\n\r\n```\r\nfix-typos.md\r\n```\r\n\r\n> Open it. It will look like this:\r\n\r\n```\r\n---\r\nlabel: New|Updated|Removed\r\n---\r\n\r\nAdd description here...\r\n```\r\n\r\n> Select a label and add a description\r\n\r\n```\r\n---\r\nlabel: Updated\r\n---\r\n\r\nCorrecting minor spelling mistakes, fixing capitalization of names and beginnings of sentences, removing redundant words, adding missing repo\r\n\r\n```\r\n\r\n> Now you are ready to commit your changes and create a PR.\r\n\r\n> Add changes\r\n\r\n```\r\ngit add .\r\n```\r\n\r\n> Commit changes:\r\n\r\n```\r\ngit commit -m \"fix typos in the text\r\n\r\nCorrecting minor spelling mistakes, capitalization of names and beginnings of sentences\"\r\n```\r\n\r\n> Push changes to the REMOTE:\r\n\r\n```\r\ngit push origin feature/fix-typos\r\n```\r\n\r\n> Create Pull request\r\n\r\n> Announce on communicator that you request code reviews\r\n\r\n> Pray for no change requests\r\n\r\n> Merge. Merging will also automatically deploy new version of the handbook, close the PR and delete the branch. It will also be announced on the communicator that new version was released.\r\n\r\n**IMPORTANT GOOD PRACTICE TIPS**\r\n\r\n> If someone requests changes, `DO NOT` resolve the conversation. Requester should do it. Always change things on your LOCAL and then push to REMOTE so that all pre-commit hooks are applied. `DO NOT` commit changes directly in Github (as it will automatically resolve the conversation without requester doing so and no pre-commit hooks will be applied)! When you commit changes also reply to the conversation with the commit link (hash)!!\r\n\r\n**PLEASE NOTE:**\r\n\r\n> Alternatively, if you forget to add the changesets, push to REMOTE and create PR, jenkins will complain and say it is not possible to merge\r\n\r\n![](https://i.imgur.com/1TOqFl6.png \"Photo by Addania\")\r\n\r\n> Then you will need to click on <code>Click here to add a changeset</code>\r\n\r\n![](https://i.imgur.com/TcETP39.png \"Photo by Addania\")\r\n\r\n> Select a label and add a description\r\n\r\n```\r\n---\r\nlabel: Updated\r\n---\r\n\r\nCorrecting minor spelling mistakes, fixing capitalization of names and beginnings of sentences, removing redundant words, adding missing repo\r\n\r\n```\r\n\r\n> Then press <code>Commit a new file</code>\r\n\r\n![](https://i.imgur.com/ertY3xG.png \"Photo by Addania\")\r\n\r\n**UPDATING YOUR BRANCH:**\r\n\r\n> It can happen that you create your amazing new branch for the latest version of develop only to realize next day it is already outdated compared to develop. In such scenario, we will start with fetch. Fetch is a general command which is not branch-related. It will update local copies of ALL remote branches so this is always safe for your local branches. Meaning also that you can do it from any branch.\r\n\r\n```\r\ngit fetch\r\n```\r\n\r\n> Switch to develop branch\r\n\r\n```\r\ngit checkout develop\r\n```\r\n\r\n> Pull the latest changes of develop from REMOTE to your LOCAL:\r\n\r\n```\r\ngit pull\r\n```\r\n\r\n> Switch back to my new branch\r\n\r\n```\r\ngit checkout myBeautifulNewBranch\r\n```\r\n\r\n> Merge develop to the new branch\r\n\r\n```\r\ngit merge develop\r\n```\r\n\r\n> Then you can add, commit and push changes to REMOTE.\r\n\r\n```\r\ngit add .\r\ngit commit -m \"updating my branch with latest develop\"\r\ngit push origin myBeautifulNewBranch\r\n```\r\n\r\n![](https://i.imgur.com/k7kjCMC.jpg \"Photo by bongkarn thanyakij from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by bongkarn thanyakij from Pexels_</p>\r\n\r\n---\r\n\r\n<h2>Main Transformer: Setup</h2>\r\n\r\n> Clone repo with:\r\n\r\n```\r\ngit clone <ULR>\r\n```\r\n\r\n> Prerequisites:\r\n\r\n- docker\r\n- docker-compose\r\n- nvm\r\n\r\n> Go to the root folder of the project and create a .env file:\r\n\r\n```\r\ntouch .env\r\n```\r\n\r\n> Content of the file should be\r\n","frontmatter":{"date":"2020-02-29","title":"Tabula Rasa","category":"knowledge-base"},"fields":{"slug":"/Tabula_Rasa/"},"timeToRead":28,"html":"<p><img src=\"https://i.imgur.com/1GXsIyS.jpg\" title=\"Photo by picjumbo.com from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by picjumbo.com from Pexels</em></p></p>\n<pre><code>New computer === New Beginning :)\n</code></pre>\n<p>Not only did I just get a brand new computer, for me this also denotes an entirely new chapter in my life. From totally commercial role as a Team Lead Account Manager I jumped right into the abbys of Fron-End Development. Was a complete surprise to many... many who did not know me well enough. Made sense though for those who were close to me and especially made most sense for myself :) I am very much excited to dive into the uncharted waters of</p>\n<pre><code>ze dark side\n</code></pre>\n<p>as one of my fellow colleagues said :)</p>\n<p>Having a new computer is like having a blank slate. So innocently pristine, like any new beginning. Let's then start from the scratch and see what we need to set up in order to kick off this new career adventure :)</p>\n<p><img src=\"https://i.imgur.com/ZnEqVOf.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<p>Steps we will follow on our journey to new computer configuration with development environment:</p>\n<p><strong>General:</strong></p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n<li>Projects folder</li>\n<li>Create React App</li>\n<li>Gatsby</li>\n<li>Github repo</li>\n<li>Code editor</li>\n<li>Prettier</li>\n<li>Flow</li>\n<li>Other useful extensions</li>\n<li>Husky</li>\n<li>Git Flow</li>\n</ul>\n<p><strong>Company specific:</strong></p>\n<ul>\n<li>Daily memo extension</li>\n<li>Main App: Repo setup</li>\n<li>Main App: Backend - Docker</li>\n<li>Main App: Backend - Docker Compose</li>\n<li>Main App: Backend - Config Overrides</li>\n<li>Main App: Backend - Starting the Back-End</li>\n<li>Main App: Front-End Config</li>\n<li>Main App: Daily Routine</li>\n<li>Handbook: Front-End Config</li>\n<li>Handbook: Daily Routine</li>\n<li>Main Transformer: Front-End Config</li>\n<li>Main Transformer: Daily Routine</li>\n</ul>\n<hr>\n<h2>GENERAL SETTINGS</h2>\n<br>\n<br>\n<h2>Node.js</h2>\n<p>First things first, we will need to install Node.js. Node.js is a JavaScript runtime environment. It allows JavaScript to run outside of a browser creating a localhost environment. It comes with a NPM module (Node Package Manager) which allows to install cool packages. You can read more about <a href=\"https://addania.github.io/coding/Intro_to_NodeJS/\">Node.js</a>.</p>\n<p>In order to install Node.js, we will need to firstly install <a href=\"https://addania.github.io/coding/NVM/\">NVM</a> (Node version Manager) which enables to switch between different Node.js versions.</p>\n<blockquote>\n<p>Open up your Ubuntu terminal or CLI (Command Line Interface)</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/DXV0rGZ.jpg\" title=\"Photo by Addania\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Addania</em></p></p>\n<blockquote>\n<p>Update your Linux distribution by running individually:</p>\n</blockquote>\n<pre><code>sudo apt update\nsudo apt -y upgrade\n</code></pre>\n<blockquote>\n<p>Install <code>curl</code> which enables you to transfer data and download further dependencies:</p>\n</blockquote>\n<pre><code>sudo apt-get install curl\n</code></pre>\n<blockquote>\n<p>Download latest version of NVM:</p>\n</blockquote>\n<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash\n</code></pre>\n<blockquote>\n<p>Close and open your terminal</p>\n</blockquote>\n<blockquote>\n<p>Make sure that the download ran successfully by checking the version of nvm:</p>\n</blockquote>\n<pre><code>nvm --version\n</code></pre>\n<blockquote>\n<p>Now we will need to set the default version of Node.js. It is good practice to set it to the latest version, which in my case currently is 15.13.0. You can check the latest version here: nodejs.org/en/</p>\n</blockquote>\n<pre><code>nvm install 15.13.0\nnvm use 15.13.0\n</code></pre>\n<blockquote>\n<p>Test if the installation was successful:</p>\n</blockquote>\n<pre><code>npm --version\nnode --version\n</code></pre>\n<p>Perfect, you have managed to install NVM and Node.js, our main tools to begin with.</p>\n<hr>\n<h2>Git</h2>\n<p><a href=\"https://addania.github.io/coding/Intro_to_Git/\">Git</a> is a version control system. Which is a bread and butter for any development project. It will track changes made to your files and make your life way easier when merging different branches to reflect recent updates.</p>\n<p><img src=\"https://i.imgur.com/xGqWMmI.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<blockquote>\n<p>Install Git by running separately:</p>\n</blockquote>\n<pre><code>sudo apt-get update\nsudo apt-get install git\n</code></pre>\n<blockquote>\n<p>Verify that the installation ran successfully:</p>\n</blockquote>\n<pre><code>git --version\n</code></pre>\n<blockquote>\n<p>Configure your username and email address:</p>\n</blockquote>\n<pre><code>git config --global user.name \"addya\"\ngit config --global user.email \"addya@guilneas.com”\n</code></pre>\n<p>Congrats, Git is now installed :)</p>\n<hr>\n<h2>Project Folder</h2>\n<p>Let's now create a dedicated place for all your future projects. It will be a folder called <code>projects</code> which will be located under the main folder <code>Home</code>.</p>\n<p><img src=\"https://i.imgur.com/WIwOGuL.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<blockquote>\n<p>Open up your terminal. You should be in the folder called Home. But to make sure you are there, simply run <code>cd</code> command:</p>\n</blockquote>\n<pre><code>cd\n</code></pre>\n<blockquote>\n<p>Create a new folder called <code>projects</code>:</p>\n</blockquote>\n<pre><code>mkdir projects\n</code></pre>\n<blockquote>\n<p>Now enter this projects folder with <code>cd</code> (change directory) command:</p>\n</blockquote>\n<pre><code>cd projects\n</code></pre>\n<p>Yay, our most important folder is created :)</p>\n<hr>\n<h2>Create React App</h2>\n<p>Create React App is an officially supported way to create single page React applications. We will create our very first React project using Create React App.</p>\n<p><img src=\"https://i.imgur.com/ovGgKYM.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<blockquote>\n<p>Install Create React App:</p>\n</blockquote>\n<pre><code>npm install -g create-react-app\n</code></pre>\n<blockquote>\n<p>Make sure you are in your <code>projects</code> folder</p>\n</blockquote>\n<pre><code>cd projects\n</code></pre>\n<blockquote>\n<p>Now create your very first Create React App Project called <code>myFirstProject</code>:</p>\n</blockquote>\n<pre><code>npx create-react-app myFirstProject\n</code></pre>\n<blockquote>\n<p>Navigate to your project folder:</p>\n</blockquote>\n<pre><code>cd myFirstProject\n</code></pre>\n<blockquote>\n<p>Start your local host environment:</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<blockquote>\n<p>Open your browser and paste this address:</p>\n</blockquote>\n<pre><code>localhost:3000\n</code></pre>\n<p>It should open up your app :) Success!! For more reading about Create React App project, see their official <a href=\"https://reactjs.org/tutorial/tutorial.html\">tutorials</a>. You can also see my article how to <a href=\"https://addania.github.io/coding/Publish_Create_React_App_on_GithubPages/\">publish</a> your Create React App project on Github pages.</p>\n<hr>\n<h2>Gatsby</h2>\n<p>Gatsby is a React framework which allows easy creations of multiple React pages, making it ideal infrastructure for blogs, etc.</p>\n<p><img src=\"https://i.imgur.com/e4IDES5.jpg\" title=\"Photo by Somya Dinkar from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Somya Dinkar from Pexels</em></p></p>\n<blockquote>\n<p>Install Gatsby:</p>\n</blockquote>\n<pre><code>npm install -g gatsby-cli\n</code></pre>\n<blockquote>\n<p>Make sure it was done correctly by checking:</p>\n</blockquote>\n<pre><code>gatsby --help\n</code></pre>\n<blockquote>\n<p>Go to your projects folder:</p>\n</blockquote>\n<pre><code>cd projects\n</code></pre>\n<blockquote>\n<p>Install new Gasby project called <code>hello-world</code>:</p>\n</blockquote>\n<pre><code>gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world\n</code></pre>\n<blockquote>\n<p>Go to your new project:</p>\n</blockquote>\n<pre><code>cd hello-world\n</code></pre>\n<blockquote>\n<p>Start your project in the local host environment by running:\n:</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<p>or</p>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>Open your browser and paste this address:</p>\n</blockquote>\n<pre><code>localhost:8000\n</code></pre>\n<p>Great, now you know another way how to create React projects. For more reading about Gatsby, see their official <a href=\"https://www.gatsbyjs.org/tutorial/\">tutorials</a>. You can also see one of my articles on how to <a href=\"https://addania.github.io/coding/Publish_your_Gatsby_site_to_GitHubpages/\">publish</a> your Gatsby project on Github pages.</p>\n<hr>\n<h2>Github repo</h2>\n<p>So far we have only talked about our LOCAL environment, which is the one on our laptop. But how about we want to have a backup of our project also online somewhere REMOTE, accessible from any place by anyone? Github is a software development plaform which allows you to store, manage and publish your code.</p>\n<p><img src=\"https://i.imgur.com/TnLmNXz.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<blockquote>\n<p>Firstly create your own Github account navigating to their official website:</p>\n</blockquote>\n<pre><code>https://github.com/\n</code></pre>\n<blockquote>\n<p>Then create your very first repository (or repo for short) by clicking on <code>New</code> button:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/P5OEU2v.png\" title=\"Photo by Addania\"><p style=\"font-size: 12px; text-align: right\"></p></p>\n<blockquote>\n<p>We will need to link our LOCAL with REMOTE repository by generating <a href=\"https://addania.github.io/coding/Generate_SSH_Key/\">SSH Key</a>.</p>\n</blockquote>\n<p>As soon as you have successfully generated a SSH key, we are good to continue with projects.</p>\n<hr>\n<h2>Code Editor</h2>\n<p>We also need to download a good code editor. According to the <a href=\"https://2019.stateofjs.com/other-tools/\">polls</a> many developers use VSC (Visual Studio Code). Let's install that one then.</p>\n<p><img src=\"https://i.imgur.com/SshAdpx.jpg\" title=\"Photo by Negative Space from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Negative Space from Pexels</em></p></p>\n<blockquote>\n<p>You can visit their official <a href=\"https://code.visualstudio.com/download\">website</a> and download the code manually.</p>\n</blockquote>\n<blockquote>\n<p>Alternatively you can search for it in the Ubuntu Software App.</p>\n</blockquote>\n<blockquote>\n<p>Or use CLI to install it., as I will describe below:</p>\n</blockquote>\n<blockquote>\n<p>Let's first update the distribution and install dependencies:</p>\n</blockquote>\n<pre><code>sudo apt update\nsudo apt install software-properties-common apt-transport-https wget\n</code></pre>\n<blockquote>\n<p>Now we need to import the Microsoft GPG key:</p>\n</blockquote>\n<pre><code>wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -\n</code></pre>\n<blockquote>\n<p>Next we should enable Visual Code studio repository:</p>\n</blockquote>\n<pre><code>sudo add-apt-repository \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\"\n</code></pre>\n<blockquote>\n<p>Now we will install the Visual Studio Code:</p>\n</blockquote>\n<pre><code>sudo apt update\nsudo apt install code\n</code></pre>\n<blockquote>\n<p>In Visual Studio Code you can install different extensions. From the left navigation bar you click on the last icon called Extensions:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/SiyrHY6.png\" title=\"Photo by bongkarn thanyakij from Pexels\"></p>\n<blockquote>\n<p>You can search there for any name of extension. Particularly useful one is Prettier (see section below)</p>\n</blockquote>\n<blockquote>\n<p>You can also always display those extensions which are installed entering <code>@installed</code> to the search field:</p>\n</blockquote>\n<pre><code>@installed\n</code></pre>\n<blockquote>\n<p>When you have some project opened in VSC you can use command <code>CTRL+SHIFT+F</code>. This will allow you to seach for a substring within content of ALL the files which are opened in the VSC (for example your project folder)</p>\n</blockquote>\n<pre><code>CTRL + SHIFT + F\n</code></pre>\n<blockquote>\n<p>To search for the substring in the filename use:</p>\n</blockquote>\n<pre><code>CTRL + P\n</code></pre>\n<hr>\n<h2>Prettier</h2>\n<p><img src=\"https://i.imgur.com/DEkKbQ1.jpg\" title=\"Photo by Richi choraria from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Richi choraria from Pexels</em></p></p>\n<p>Prettier helps format your code. We can add it as an extension to Visual Studio Code.</p>\n<blockquote>\n<p>Open the VCS:</p>\n</blockquote>\n<pre><code>code .\n</code></pre>\n<blockquote>\n<p>In the left vertical menu click on the last icon called Extensions:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/SiyrHY6.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Search for Prettier - Code Formatter and install it.</p>\n</blockquote>\n<blockquote>\n<p>Then go to the Visual Code Studio Settings from the top bottom icon:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/4344x8Q.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Navigate to Text Editor -> Formatting and tick the box <code>Format on Save</code></p>\n</blockquote>\n<hr>\n<h2>Flow Language Support</h2>\n<p>Flow Language Support is also another useful extension for the Visual Studio Code if your projects are using Flow (like Typescript) to define types.</p>\n<blockquote>\n<p>Open the VCS:</p>\n</blockquote>\n<pre><code>code .\n</code></pre>\n<blockquote>\n<p>In the left vertical menu click on the last icon called Extensions:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/SiyrHY6.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Search for Flow Language Support and install it.</p>\n</blockquote>\n<hr>\n<h2>Other useful extensions</h2>\n<p><img src=\"https://i.imgur.com/Ly5LiZx.jpg\" title=\"Photo by Janko Ferlic from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Janko Ferlic from Pexels</em></p></p>\n<p>Here is a list of useful extensions for Visual Studio Code which you might consider:</p>\n<ul>\n<li>auto-rename-tag\t- \tAutomatically rename paired HTML/XML tag</li>\n<li>bracket-pair-colorizer\t- \tColorizes bracket pairs</li>\n<li>code-groovy\t- \tLanguage support for Groovy</li>\n<li>setting Synch by Shan\t- \tStore your VSC settings on Github and then always synch them when needed with other devices</li>\n<li>contextualduplicate\t- \tDuplicates text based on the context. If text is selected, only the selected text will be duplicated.</li>\n<li>duplicateselection\t-  Adds an action to VSCode to duplicate the current selection.</li>\n<li>EditorConfig\t-  Overrides user/workspace settings with settings found in .editorconfig files.</li>\n<li>file-icons\t- \tArray of icons for most languages and frameworks</li>\n<li>gitconfig\t- \tSyntax highlighting for .gitconfig, .gitattributes, and .gitmodules files.</li>\n<li>gitlens\t- \tGit capabilities built into Visual Studio Code. It helps you to visualize code authorship and Git blame annotations</li>\n<li>htmltagwrap\t- \tWraps your selection in HTML tags.</li>\n<li>npm-intellisense\t- \tAutocompletes npm modules in import statements</li>\n<li>partial-diff\t- \tCompare text in 2 visible editors</li>\n<li>path-intellisense\t- \tAutocompletes filenames.</li>\n<li>csstools\t- \tAdds support for modern and experimental CSS</li>\n<li>Prettier - Code formatter</li>\n<li>quitcontrol-vscode\t- \tStop mistyping keyboard shortctus that close/quit VSCode unintentionally</li>\n<li>rainbow-csv\t- \tHighlight columns in comma (.csv), tab (.tsv), semicolon and pipe - separated files in different colors</li>\n<li>svg\t- \tSVG Language Support Extension</li>\n<li>typescript-javascript-grammar\t- \tAdds TypeScript grammar extension.</li>\n<li>vscode-docker\t- \tMakes it easy to build, manage and deploy containerized applications</li>\n<li>vscode-eslint\t- \tIntegrates ESLint into VS Code.</li>\n<li>vscode-flow-ide\t- \tFlowtype extension. Flowtype is a static type checker ment to find errors in Javascript programs.</li>\n<li>vscode-language-babel\t- \tJavaScript syntax highlighting for ES201x, React JSX, Flow and GraphQL.</li>\n<li>vscode-npm-script\t- Supports running npm scripts defined in the package.json file and validating the installed modules against the dependencies defined in the package.json.</li>\n<li>vscode-pigments\t- \tAdds color previews to vscode instantly.</li>\n</ul>\n<hr>\n<h2>Husky</h2>\n<p>Did someone say husky? :)</p>\n<p><img src=\"https://i.imgur.com/DcFUuks.jpg?1\" title=\"Photo by Ian Turnell from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Ian Turnell from Pexels</em></p></p>\n<hr>\n<h2>Git Flow</h2>\n<p><img src=\"https://i.imgur.com/nB7b3H4.jpg\" title=\"Photo by Kateryna Babaieva from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Kateryna Babaieva from Pexels</em></p></p>\n<p><a href=\"https://addania.github.io/coding/Git_Flow/\">Git flow</a> is an amazing concept how to manage branches. Make sure you read the <a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">article</a> which explains it in detail. Git flow needs to be installed.</p>\n<blockquote>\n<p>Install Git flow using following command:</p>\n</blockquote>\n<pre><code>sudo apt-get install git-flow\n</code></pre>\n<blockquote>\n<p>For more reading refer to nvie <a href=\"https://github.com/nvie/gitflow/wiki/Linux\">documentation</a>. Please note that you will need to add word <code>sudo</code> in front the the commands.</p>\n</blockquote>\n<p><strong>NOTES:</strong></p>\n<blockquote>\n<p>Please note that later on in your repo you will need to initiate the git flow with:</p>\n</blockquote>\n<pre><code>git flow init --defaults\n</code></pre>\n<blockquote>\n<p>And later on you will be creating branches with</p>\n</blockquote>\n<pre><code>git flow feature start &#x3C;name-of-your-branch>\n</code></pre>\n<blockquote>\n<p>Create a new branch based on another branch:</p>\n</blockquote>\n<pre><code>git flow feature start 11153s-redesign-dashboard-header-action-buttons feature/11117-redesign-Dashboard-Menu\n</code></pre>\n<hr>\n<h2>COMPANY SPECIFIC SETTINGS</h2>\n<br>\n<br>\n<p><img src=\"https://i.imgur.com/UdGibOh.jpg\" title=\"Photo by Negative Space from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Negative Space from Pexels</em></p></p>\n<h2>Daily memo</h2>\n<blockquote>\n<p>Use following extension: <a href=\"https://github.com/pmedianetwork/daily-memo-chrome-extension\">https://github.com/pmedianetwork/daily-memo-chrome-extension</a></p>\n</blockquote>\n<blockquote>\n<p>Follow the read-me notes</p>\n</blockquote>\n<hr>\n<h2>Main App: Repo setup</h2>\n<blockquote>\n<p>Clone the repo from the Github URL</p>\n</blockquote>\n<pre><code>git clone URL\n</code></pre>\n<hr>\n<h2>Main App: Backend - Docker</h2>\n<p><img src=\"https://i.imgur.com/iLSMcLv.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<p>Docker will run backend of our application. Docker is a tool that makes it easier to create, deploy &#x26; run applications by using containers. Containers allow to package up your code with all the required parts (like libraries or other dependencies) and deploy them all as a single package. Thanks to that we will make sure that our code will run on any machine regardless of custom settings which can be different from the machine that was originally used to writing or testing the application. Docker also acts like a virtual machine, provides performance boost and reduces the size of the app. For more info this is a nice <a href=\"https://opensource.com/resources/what-docker\">article</a> to read.</p>\n<p>Let's now get our hands dirty with installation:</p>\n<blockquote>\n<p>Update your apt first:</p>\n</blockquote>\n<pre><code>sudo apt-get update\n</code></pre>\n<blockquote>\n<p>Allow apt to use repository:</p>\n</blockquote>\n<pre><code>sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n</code></pre>\n<blockquote>\n<p>Add official GPG Key for Docker:</p>\n</blockquote>\n<pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n</code></pre>\n<blockquote>\n<p>Double-check if the key is correct. If yes, last 8 digits of fingerprint should be 0EBFCD88:</p>\n</blockquote>\n<pre><code>sudo apt-key fingerprint 0EBFCD88\n</code></pre>\n<blockquote>\n<p>Setup stable repository. Please note that here I had to replace original <a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">documentation</a> with the <a href=\"https://stackoverflow.com/questions/60274857/i-cant-install-docker-because-containerd-io-has-no-installation-candidate\">hack</a> from Stackoverflow :</p>\n</blockquote>\n<pre><code>sudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   bionic \\\n   stable\"\n</code></pre>\n<blockquote>\n<p>Again update the apt:</p>\n</blockquote>\n<pre><code>sudo apt-get update\n</code></pre>\n<blockquote>\n<p>Now you can install Docker Engine:</p>\n</blockquote>\n<pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io\n</code></pre>\n<blockquote>\n<p>Now check for all available versions of Docker:</p>\n</blockquote>\n<pre><code>apt-cache madison docker-ce\n</code></pre>\n<blockquote>\n<p>Example output will be</p>\n</blockquote>\n<pre><code>docker-ce | 5:19.03.6~3-0~ubuntu-eoan | https://download.docker.com/linux/ubuntu eoan/stable amd64 Packages\ndocker-ce | 5:19.03.6~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages\ndocker-ce | 5:19.03.5~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages\n</code></pre>\n<blockquote>\n<p>Pick the version you want (I would opt for latest one):</p>\n</blockquote>\n<pre><code>5:19.03.6~3-0~ubuntu-eoan\n</code></pre>\n<blockquote>\n<p>Then install that specific version but remember to REPLACE <code>&#x3C;VERSION_STRING></code> with your version, in our case <code>5:19.03.6~3-0~ubuntu-eoan</code>:</p>\n</blockquote>\n<pre><code>sudo apt-get install docker-ce=&#x3C;VERSION_STRING> docker-ce-cli=&#x3C;VERSION_STRING> containerd.io\n</code></pre>\n<blockquote>\n<p>In above case the final code will look like this:</p>\n</blockquote>\n<pre><code>sudo apt-get install docker-ce=5:19.03.6~3-0~ubuntu-eoan docker-ce-cli=5:19.03.6~3-0~ubuntu-eoan containerd.io\n</code></pre>\n<blockquote>\n<p>Verify if installation was success:</p>\n</blockquote>\n<pre><code>sudo docker run hello-world\n</code></pre>\n<blockquote>\n<p>If it was, you should get a message simialr to this one:</p>\n</blockquote>\n<pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n</code></pre>\n<p>Above installation steps of Docker can also be found in official <a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">documentation</a> together with a small <a href=\"https://stackoverflow.com/questions/60274857/i-cant-install-docker-because-containerd-io-has-no-installation-candidate\">hack</a>.</p>\n<p>In order to make our lives easier, we can continue <a href=\"https://docs.docker.com/install/linux/linux-postinstall/\">setting</a> up Docker, so that we do not need to use <code>sudo</code> every single time with managing Docker as a non-root user.</p>\n<blockquote>\n<p>We will start with creating a Docker group:</p>\n</blockquote>\n<pre><code>sudo groupadd docker\n</code></pre>\n<blockquote>\n<p>Add your users to the docker group:</p>\n</blockquote>\n<pre><code>sudo usermod -aG docker $USER\n</code></pre>\n<blockquote>\n<p>Log in and out from your profile (or restart your computer)</p>\n</blockquote>\n<blockquote>\n<p>Verify if you can run Docker command without <code>sudo</code></p>\n</blockquote>\n<pre><code>docker run hello-world\n</code></pre>\n<blockquote>\n<p>You should get a message similar to this:</p>\n</blockquote>\n<pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n</code></pre>\n<hr>\n<h2>Main App: Backend - Docker Compose</h2>\n<p><img src=\"https://i.imgur.com/tu2hiV9.jpg\" title=\"Photo by freestocks.org from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by freestocks.org from Pexels</em></p></p>\n<blockquote>\n<p>Download latest version of Docker compose:</p>\n</blockquote>\n<pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n</code></pre>\n<blockquote>\n<p>Apply permissions to binary:</p>\n</blockquote>\n<pre><code>sudo chmod +x /usr/local/bin/docker-compose\n</code></pre>\n<blockquote>\n<p>Check the installation:</p>\n</blockquote>\n<pre><code>docker-compose --version\n</code></pre>\n<blockquote>\n<p>Output on terminal should be:</p>\n</blockquote>\n<pre><code>docker-compose version 1.25.4, build 1110ad01\n</code></pre>\n<hr>\n<h2>Main App: Backend - Config Overrides</h2>\n<p><img src=\"https://i.imgur.com/Q6MbuWu.jpg\" title=\"Photo by Rodolfo Clix from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Rodolfo Clix from Pexels</em></p></p>\n<blockquote>\n<p>These settings assume that you have already downloaded the repository from Github to your LOCAL machine. If you havent done so, clone the repo first with:</p>\n</blockquote>\n<pre><code>git clone &#x3C;repo url>\n</code></pre>\n<blockquote>\n<p>Then go to your project root folder</p>\n</blockquote>\n<blockquote>\n<p>Create a yml file called <code>adverity-user-overrides-config.yml</code></p>\n</blockquote>\n<pre><code>touch adverity-user-overrides-config.yml\n</code></pre>\n<blockquote>\n<p>Paste following config to it (where database ulr, username, password, access key id, secret access key need to be requested):</p>\n</blockquote>\n<pre><code>dataSource:\n  url: \"&#x3C;database url>\"\nadverity:\n  datalake:\n    datalakeType: \"sftp\"\n    sftp:\n      server: \"localhost\"\n      username: \"&#x3C;username>\"\n      password: \"&#x3C;password>\"\n      remoteBaseDir: \"/data\"\n    s3:\n      accessKey: \"&#x3C;access key id>\"\n      secretKey: \"&#x3C;secret access key>\"\naws:\n  s3:\n    accessKey: \"&#x3C;access key id>\"\n    secretKey: \"&#x3C;secret access key>\"\n\nrabbitmq:\n  connectionfactory:\n    hostname: \"localhost\"\n</code></pre>\n<hr>\n<h2>Main App: Backend - Starting the Backend</h2>\n<p><img src=\"https://i.imgur.com/p7LQncr.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<p>Docker will be starting our back-end environment. In one tab of the terminal we will always start our back-end and in another tab we will start our front end local host.</p>\n<blockquote>\n<p>Upon the first start we will need to execute command from the root folder of the project:</p>\n</blockquote>\n<pre><code>./docker/build\n</code></pre>\n<blockquote>\n<p>This command will build our entire backend.</p>\n</blockquote>\n<blockquote>\n<p>We will need to run this command any time there is any change in the back-end!! For example, database migration or any update to backend.</p>\n</blockquote>\n<blockquote>\n<p>To start the Docker local host (backend infrastructure, like database, sftp datalake, import queues like rabbitMQ, etc.) we will use following command from the root folder of the project:</p>\n</blockquote>\n<pre><code>docker-compose -f docker/docker-compose-infrastructure.yml up -d\n</code></pre>\n<blockquote>\n<p>If we use <code>-d</code> in this command this will result in the backend infrastructure to be running forever silently, even if I turn off and on the computer, it will be by default running. I could run it every time manually if I don't use -d:</p>\n</blockquote>\n<pre><code>docker-compose -f docker/docker-compose-infrastructure.yml up\n</code></pre>\n<blockquote>\n<p>If it gets some error that some plugin failed to be downloaded, try to run it again! If it is stuck at 91%, it might be a visual bug, but it can be already running.</p>\n</blockquote>\n<blockquote>\n<p>I can check if my Docker container (backend infrastrucure) is running with the command:</p>\n</blockquote>\n<pre><code>docker ps\n</code></pre>\n<blockquote>\n<p>Now we need to start the back-end itself (by backend is meant the Java application which connects my frontend app with the backend infrastructure like data)</p>\n</blockquote>\n<blockquote>\n<p>To do it, go to the root folder of the project (all backend stuff is done in root folder):</p>\n</blockquote>\n<pre><code>npm run insights-start:backend\n</code></pre>\n<!--- just\n\nOLD INFO - INITIAL\n\n> To do it, go to the root folder of the project (all backend stuff is done in root folder):\n\n```\n./gradlew bootRun\n```\n\n\n> Alternatively instead of `./gradlew bootRun` is to use:\n\n```\nmake start\n```\n\n> <code>./gradlew bootRun</code> needs to be executed every day.\n\n> Now we will need to import some data to the application (becasue by default it will be empty). We will do this only once at the beginning, later on I do not need to do it. Run following command from root folder:\n\n```\nmake importQ\n```\n--->\n<blockquote>\n<p>Now we are ready to start the front end. You can follow to the <code>Front-End Config</code> section.</p>\n</blockquote>\n<br />\n<p><strong>NOTES &#x26; ADDITIONAL COMMANDS FOR DOCKER BACKEND:</strong></p>\n<blockquote>\n<p>When I restart the computer, I can check if my Docker container (backend infrastrucure) is running by default with the command:</p>\n</blockquote>\n<pre><code>docker ps\n</code></pre>\n<blockquote>\n<p>Following 3 services should be running:</p>\n</blockquote>\n<pre><code>rabbitMQ\nsftp\npostgres\n</code></pre>\n<blockquote>\n<p>To stop Docker:</p>\n</blockquote>\n<pre><code>CTRL + C\n</code></pre>\n<p>and then</p>\n<pre><code>docker-compose -f docker/docker-compose-infrastructure.yml down\n</code></pre>\n<blockquote>\n<p>I can also prune any cache if I want to:</p>\n</blockquote>\n<pre><code>docker system prune\n</code></pre>\n<hr>\n<h2>Other configs</h2>\n<blockquote>\n<p>You will need to install HomeBrew to follow steps below. Go to: <a href=\"https://brew.sh\">brew.sh</a></p>\n</blockquote>\n<blockquote>\n<p>Install brew:</p>\n</blockquote>\n<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre>\n<blockquote>\n<p>When it asks you to press RETURN it actually means to press ENTER</p>\n</blockquote>\n<blockquote>\n<p>Then follow instructions in the terminal. It will say something liek: Add HomeBrew to your PATH in home/addania/.profile:</p>\n</blockquote>\n<pre><code>echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/addania/.profile\n</code></pre>\n<blockquote>\n<p>Second instruction will be something like this:</p>\n</blockquote>\n<pre><code>eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\n</code></pre>\n<blockquote>\n<p>Now check if you can use HomeBrew</p>\n</blockquote>\n<pre><code>brew help\n</code></pre>\n<blockquote>\n<p>Then you can proceed with steps below:</p>\n</blockquote>\n<blockquote>\n<p>It is important to set aws and npm registry as mentioned <a href=\"https://handbook.internal.adverity.net/development-environment/general/private-npm-registry/\">here</a>. Instructions are a little bit confusing and useful for MAC users, not Ubuntu, so here are the steps:</p>\n</blockquote>\n<blockquote>\n<p>Update your system</p>\n</blockquote>\n<pre><code>sudo apt update\n</code></pre>\n<blockquote>\n<p>Go to this <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install\">website</a> and install aws-cli version 2. It is important that you install version 2 and not version 1 (because it can mess up your setup and then you will have to uninstall the version 1 and install version 2). Command should be following, but confirm with the above page:</p>\n</blockquote>\n<pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\n</code></pre>\n<blockquote>\n<p>Last command you will probably have to do separately:</p>\n</blockquote>\n<pre><code>sudo ./aws/install\n</code></pre>\n<blockquote>\n<p>Check if you have the correct version of the aws:</p>\n</blockquote>\n<pre><code>aws --version\n</code></pre>\n<blockquote>\n<p>If above command gives you version, then skip next workaround and move on to installing aws-vault.</p>\n</blockquote>\n<blockquote>\n<p>If above command gives you unexpected result like for example not found, then the folder in which the aws resides is probably different from the default. For this scenario, here is the following workaround. Check following path, if your aws is there:</p>\n</blockquote>\n<pre><code>/usr/local/aws-cli/v2/current/bin/aws --version\n</code></pre>\n<blockquote>\n<p>If you found it, then run this command:</p>\n</blockquote>\n<pre><code>which aws\n</code></pre>\n<blockquote>\n<p>It will probably output you something like <code>/usr/local/bin/aws</code>. Use that output to link your current aws path <code>/usr/local/aws-cli/v2/current/bin/aws</code> to the default one <code>/usr/local/bin/aws</code>:</p>\n</blockquote>\n<pre><code>ln -s /usr/local/aws-cli/v2/current/bin/aws /usr/local/bin/aws\n</code></pre>\n<blockquote>\n<p>If this does not work, try it without local:</p>\n</blockquote>\n<pre><code>ln -s /usr/local/aws-cli/v2/current/bin/aws /usr/bin/aws\n</code></pre>\n<blockquote>\n<p>This should work now, you should again confirm with <code>aws --version</code> which should output a version</p>\n</blockquote>\n<blockquote>\n<p>Then you need to install the aws-vault. Go to this <a href=\"https://github.com/99designs/aws-vault\">website</a> and in read.me check the latest releases. For example in the time of writing latest release was: <a href=\"https://github.com/99designs/aws-vault/releases/tag/v6.3.1\">https://github.com/99designs/aws-vault/releases/tag/v6.3.1</a></p>\n</blockquote>\n<blockquote>\n<p>Download the file <code>aws-valut-linux-amd64</code></p>\n</blockquote>\n<blockquote>\n<p>Then go to the terminal and move it the <code>/usr/local/bin/aws-vault</code></p>\n</blockquote>\n<pre><code>sudo mv aws-vault-linux-amd64 /usr/local/bin/aws-vault\n</code></pre>\n<blockquote>\n<p>Then use this command:</p>\n</blockquote>\n<pre><code>sudo chmod +x /usr/local/bin/aws-vault\n</code></pre>\n<blockquote>\n<p>Test if the vault works:</p>\n</blockquote>\n<pre><code>aws-vault --version\n</code></pre>\n<blockquote>\n<p>Add vault to the adverity-main:</p>\n</blockquote>\n<pre><code>aws-vault add adverity-main\n</code></pre>\n<blockquote>\n<p>Verify if it worked:</p>\n</blockquote>\n<pre><code>aws-vault list\n</code></pre>\n<blockquote>\n<p>Verify access:</p>\n</blockquote>\n<pre><code>aws-vault exec adverity-main -- aws sts get-caller-identity\n</code></pre>\n<blockquote>\n<p>then go to the root folter on you PC (such as Home). Create a <code>.aws</code> folder or navigate to it if it already exists. Create a config file there (without any extension).</p>\n</blockquote>\n<blockquote>\n<p>/.aws/config file should look like described in the handbook <a href=\"https://handbook.internal.adverity.net/development-environment/general/private-npm-registry/\">here</a>. Here is just a mock with xxx and yyy placeholders:</p>\n</blockquote>\n<pre><code> [profile adverity-main]\n # if you have set up MFA, you should uncomment the line below and update mfa_serial with the ARN of your MFA virtual device\n #mfa_serial= xxxxx\n region=eu-west-1\n source_profile= yyyyy\n\n [profile codeartifact]\n role_arn = xxxxx\n region=eu-west-1\n source_profile = yyyyy\n</code></pre>\n<blockquote>\n<p>Test if you have correct access by running:</p>\n</blockquote>\n<pre><code>aws-vault exec codeartifact -- aws codeartifact list-domains\n</code></pre>\n<blockquote>\n<p>Expected outcome should look like this:</p>\n</blockquote>\n<pre><code> {\n     \"domains\": [\n         {\n             \"name\": \"xx\",\n             \"owner\": \"yyy\",\n             \"status\": \"Active\",\n             \"encryptionKey\": \"zzz\"\n         }\n     ]\n }\n</code></pre>\n<blockquote>\n<p>Go to the root folder of your computer (Home) and find a file there called: <code>.bashrc</code> and paste following snippet into it. Please note, paste it at the end BEFORE the last NVM commands:</p>\n</blockquote>\n<pre><code>export ADVERITY_CODEARTIFACT_AUTH_TOKEN=`aws-vault exec codeartifact -- aws codeartifact get-authorization-token --domain adverity --domain-owner 508912190628 --query authorizationToken --output text`\n</code></pre>\n<blockquote>\n<p>Restart your terminal!</p>\n</blockquote>\n<blockquote>\n<p>Then go to terminal and execute:</p>\n</blockquote>\n<pre><code>source ~/.bashrc\n</code></pre>\n<blockquote>\n<p>Verify if your setup works:</p>\n</blockquote>\n<pre><code>git clone git@github.com:pmedianetwork/npm-repo-test.git npm-repo-test \\\n    &#x26;&#x26; cd \"$_\" \\\n    &#x26;&#x26; npm install\n</code></pre>\n<hr>\n<h2>Main App: Front-End Config</h2>\n<p><img src=\"https://i.imgur.com/894yf32.jpg?1\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<p>This assumes that you have already cloned the repository from the Github URL using <code>git clone URL</code></p>\n<p>Then you can navigate to web-app folder:</p>\n<pre><code>cd web-app\nnpm run bootstrap:ci\n</code></pre>\n<blockquote>\n<p>To start the frontend, open a new tab in your terminal and follow these instructions:</p>\n</blockquote>\n<pre><code>cd web-app\nnpm run insights-start\n</code></pre>\n<blockquote>\n<p>You will need to open the browser. Where <code>appName</code> is the repo name. App will run under:</p>\n</blockquote>\n<pre><code>http://localhost:8080/&#x3C;appName>\n</code></pre>\n<blockquote>\n<p>You will need to login to the app. Login credentials can be found in <code>BootStrap.groovy</code> file in the <code>grails-app/init</code> folder</p>\n</blockquote>\n<blockquote>\n<p>Then navigate to a Tenant <code>Big client</code></p>\n</blockquote>\n<blockquote>\n<p>Click on your Account -> Admin Pages -> Dev -> Bulk import Big csv files for client Big</p>\n</blockquote>\n<blockquote>\n<p>This should load data, data will persist even if we restart the app.</p>\n</blockquote>\n<hr>\n<h2>Main App: Daily Routine</h2>\n<p><img src=\"https://i.imgur.com/F6TX3fJ.jpg\" title=\"Photo by Kaboompics.com from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Kaboompics.com from Pexels</em></p></p>\n<p>Shortcut to start up everything.</p>\n<blockquote>\n<p>Backend daily routine:</p>\n</blockquote>\n<pre><code>cd projects/&#x3C;appName>\n./gradlew bootRun\n</code></pre>\n<blockquote>\n<p>Frontend daily routine:</p>\n</blockquote>\n<pre><code>cd projects/&#x3C;appName>/web-app\nnpm start\n</code></pre>\n<blockquote>\n<p>Open browser:</p>\n</blockquote>\n<pre><code>http://localhost:8080/&#x3C;appName>\n</code></pre>\n<blockquote>\n<p>Login</p>\n</blockquote>\n<blockquote>\n<p>You are ready to rock :)</p>\n</blockquote>\n<hr>\n<h2>Handbook: Front-End Config</h2>\n<p><img src=\"https://i.imgur.com/qDy6nQF.jpg\" title=\"Photo by Kaboompics .com from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Kaboompics .com from Pexels</em></p></p>\n<p>This assumes that you have already cloned the repository of the Handbook from the Github URL using <code>git clone URL</code></p>\n<blockquote>\n<p>Then you can navigate to project folder:</p>\n</blockquote>\n<pre><code>cd handbook\n</code></pre>\n<blockquote>\n<p>Then initiate git flow</p>\n</blockquote>\n<pre><code>git flow init\n</code></pre>\n<blockquote>\n<p>It will ask you couple of questions:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/QdOT2pp.png?1\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Answer <code>master</code> to the first question and <code>develop</code> to the second question. Then hit enter to confirm all the rest of the questions.</p>\n</blockquote>\n<blockquote>\n<p>Then check how your <code>config</code> file in <code>git</code> folder looks like. It should look like this:</p>\n</blockquote>\n<pre><code>[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n[remote \"origin\"]\n    url = git@github.com:pmedianetwork/handbook.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"develop\"]\n    remote = origin\n    merge = refs/heads/develop\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[gitflow \"branch\"]\n    master = master\n    develop = develop\n[gitflow \"prefix\"]\n    feature = feature/\n    bugfix = bugfix/\n    release = release/\n    hotfix = hotfix/\n    support = support/\n    versiontag =\n[gitflow \"path\"]\n    hooks = /home/addania/projects/handbook/.git/hooks\n</code></pre>\n<blockquote>\n<p>Great!</p>\n</blockquote>\n<blockquote>\n<p>Let's install some <code>prepare-commit-msg</code> git hook:</p>\n</blockquote>\n<pre><code>curl https://gist.githubusercontent.com/bartoszmajsak/1396344/raw/bff6973325b159254a3ba13c5cb9ac8fda8e382b/prepare-commit-msg.sh > .git/hooks/prepare-commit-msg &#x26;&#x26; chmod u+x .git/hooks/prepare-commit-msg\n</code></pre>\n<blockquote>\n<p>Now we can start the backend for the handbook. Pre-requisites are all the steps from the Docker and Docker Compose section including managing Docker as a non-root user (please see corresponding sections above).</p>\n</blockquote>\n<blockquote>\n<p>If we have done everything as above, we can now start the backend simply with:</p>\n</blockquote>\n<pre><code>docker-compose up\n</code></pre>\n<blockquote>\n<p>We should check the browser at the URL:</p>\n</blockquote>\n<pre><code>localhost:4567\n</code></pre>\n<blockquote>\n<p>You are also ready to rock the handbook ;)</p>\n</blockquote>\n<hr>\n<h2>Handbook: Daily Routine Start-up</h2>\n<p><img src=\"https://i.imgur.com/vck5NPy.jpg\" title=\"Photo by Free Photos.cc from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Free Photos.cc from Pexels</em></p></p>\n<blockquote>\n<p>Navigate to handbook folder</p>\n</blockquote>\n<pre><code>cd projects/handbook\n</code></pre>\n<blockquote>\n<p>Start the backend:</p>\n</blockquote>\n<pre><code>docker-compose up\n</code></pre>\n<blockquote>\n<p>App is served at the URL:</p>\n</blockquote>\n<pre><code>localhost:4567\n</code></pre>\n<hr>\n<h2>Handbook: Daily Routine Branching and Commits</h2>\n<p><img src=\"https://i.imgur.com/kRYW41f.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<blockquote>\n<p>If you want to create a branch and then PR, go to the handbook folder</p>\n</blockquote>\n<pre><code>cd handbook\n</code></pre>\n<blockquote>\n<p>Make sure you are on develop branch:</p>\n</blockquote>\n<pre><code>git status\n</code></pre>\n<blockquote>\n<p>If not use:</p>\n</blockquote>\n<pre><code>git checkout develop\n</code></pre>\n<blockquote>\n<p>Fetch and pull latest changes:</p>\n</blockquote>\n<pre><code>git fetch\ngit pull\n</code></pre>\n<blockquote>\n<p>Please note that FETCH is a general command and will update local copies of all remote branches so this is always safe for your local branches. BUT: fetch will not update local branches (which track remote branches); if you want to update your local branches you still need to pull every branch.</p>\n</blockquote>\n<blockquote>\n<p>Create a new feature branch from develop using git flow:</p>\n</blockquote>\n<pre><code>git flow feature start fix-typos\n</code></pre>\n<blockquote>\n<p>Please note that we don't have hotfixes on handbook, everything is a feature. IN above example <code>fix-typos</code> is a the name of the branch. Also notice that names of the branches should be kebab-cased:</p>\n</blockquote>\n<blockquote>\n<p>Make sure you are on the the newly created branch:</p>\n</blockquote>\n<pre><code>git status\n</code></pre>\n<blockquote>\n<p>Start the backend:</p>\n</blockquote>\n<pre><code>docker-compose up\n</code></pre>\n<blockquote>\n<p>Start the front end:</p>\n</blockquote>\n<pre><code>cd web-app\ndocker-compose up\n</code></pre>\n<blockquote>\n<p>Code code code FTW</p>\n</blockquote>\n<blockquote>\n<p>You cannot forget to do the changesets.</p>\n</blockquote>\n<blockquote>\n<p>Navigate to root folder of the project and then to folder called:</p>\n</blockquote>\n<pre><code>.changesets\n</code></pre>\n<blockquote>\n<p>There you will find a file called</p>\n</blockquote>\n<pre><code>changeset.md.template\n</code></pre>\n<blockquote>\n<p>Rename it to your branch name (again kebab-cased)</p>\n</blockquote>\n<pre><code>fix-typos.md\n</code></pre>\n<blockquote>\n<p>Open it. It will look like this:</p>\n</blockquote>\n<pre><code>---\nlabel: New|Updated|Removed\n---\n\nAdd description here...\n</code></pre>\n<blockquote>\n<p>Select a label and add a description</p>\n</blockquote>\n<pre><code>---\nlabel: Updated\n---\n\nCorrecting minor spelling mistakes, fixing capitalization of names and beginnings of sentences, removing redundant words, adding missing repo\n</code></pre>\n<blockquote>\n<p>Now you are ready to commit your changes and create a PR.</p>\n</blockquote>\n<blockquote>\n<p>Add changes</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Commit changes:</p>\n</blockquote>\n<pre><code>git commit -m \"fix typos in the text\n\nCorrecting minor spelling mistakes, capitalization of names and beginnings of sentences\"\n</code></pre>\n<blockquote>\n<p>Push changes to the REMOTE:</p>\n</blockquote>\n<pre><code>git push origin feature/fix-typos\n</code></pre>\n<blockquote>\n<p>Create Pull request</p>\n</blockquote>\n<blockquote>\n<p>Announce on communicator that you request code reviews</p>\n</blockquote>\n<blockquote>\n<p>Pray for no change requests</p>\n</blockquote>\n<blockquote>\n<p>Merge. Merging will also automatically deploy new version of the handbook, close the PR and delete the branch. It will also be announced on the communicator that new version was released.</p>\n</blockquote>\n<p><strong>IMPORTANT GOOD PRACTICE TIPS</strong></p>\n<blockquote>\n<p>If someone requests changes, <code>DO NOT</code> resolve the conversation. Requester should do it. Always change things on your LOCAL and then push to REMOTE so that all pre-commit hooks are applied. <code>DO NOT</code> commit changes directly in Github (as it will automatically resolve the conversation without requester doing so and no pre-commit hooks will be applied)! When you commit changes also reply to the conversation with the commit link (hash)!!</p>\n</blockquote>\n<p><strong>PLEASE NOTE:</strong></p>\n<blockquote>\n<p>Alternatively, if you forget to add the changesets, push to REMOTE and create PR, jenkins will complain and say it is not possible to merge</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/1TOqFl6.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Then you will need to click on <code>Click here to add a changeset</code></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/TcETP39.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Select a label and add a description</p>\n</blockquote>\n<pre><code>---\nlabel: Updated\n---\n\nCorrecting minor spelling mistakes, fixing capitalization of names and beginnings of sentences, removing redundant words, adding missing repo\n</code></pre>\n<blockquote>\n<p>Then press <code>Commit a new file</code></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/ertY3xG.png\" title=\"Photo by Addania\"></p>\n<p><strong>UPDATING YOUR BRANCH:</strong></p>\n<blockquote>\n<p>It can happen that you create your amazing new branch for the latest version of develop only to realize next day it is already outdated compared to develop. In such scenario, we will start with fetch. Fetch is a general command which is not branch-related. It will update local copies of ALL remote branches so this is always safe for your local branches. Meaning also that you can do it from any branch.</p>\n</blockquote>\n<pre><code>git fetch\n</code></pre>\n<blockquote>\n<p>Switch to develop branch</p>\n</blockquote>\n<pre><code>git checkout develop\n</code></pre>\n<blockquote>\n<p>Pull the latest changes of develop from REMOTE to your LOCAL:</p>\n</blockquote>\n<pre><code>git pull\n</code></pre>\n<blockquote>\n<p>Switch back to my new branch</p>\n</blockquote>\n<pre><code>git checkout myBeautifulNewBranch\n</code></pre>\n<blockquote>\n<p>Merge develop to the new branch</p>\n</blockquote>\n<pre><code>git merge develop\n</code></pre>\n<blockquote>\n<p>Then you can add, commit and push changes to REMOTE.</p>\n</blockquote>\n<pre><code>git add .\ngit commit -m \"updating my branch with latest develop\"\ngit push origin myBeautifulNewBranch\n</code></pre>\n<p><img src=\"https://i.imgur.com/k7kjCMC.jpg\" title=\"Photo by bongkarn thanyakij from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by bongkarn thanyakij from Pexels</em></p></p>\n<hr>\n<h2>Main Transformer: Setup</h2>\n<blockquote>\n<p>Clone repo with:</p>\n</blockquote>\n<pre><code>git clone &#x3C;ULR>\n</code></pre>\n<blockquote>\n<p>Prerequisites:</p>\n</blockquote>\n<ul>\n<li>docker</li>\n<li>docker-compose</li>\n<li>nvm</li>\n</ul>\n<blockquote>\n<p>Go to the root folder of the project and create a .env file:</p>\n</blockquote>\n<pre><code>touch .env\n</code></pre>\n<blockquote>\n<p>Content of the file should be</p>\n</blockquote>"}},{"node":{"id":"5d7eba93-23c5-5a17-ba4d-f8fde67ddbca","excerpt":"The long-expected day has finally arrived when I got my completely brand new baby computer for my new role as Front-End Developer. Thus was…","rawMarkdownBody":"\r\n![](https://i.imgur.com/86RXy1V.jpg \"Photo from https://commons.wikimedia.org/wiki/File:Lenovo_ThinkPad_Logo.jpg\")\r\n\r\nThe long-expected day has finally arrived when I got my completely brand new baby computer for my new role as Front-End Developer. Thus was the joy when I saw that ligh-weight ThinkPad cutie. Excitement lasted until I tried to copy paste the first thing. You can guess it... <code>IT DID NOT WORK!</code>\r\n\r\nTo my horror I realized that <code>FN</code> and <code>STRG/CTRL</code> keys were switched!! Which cruel creature on this planet would ever do that to humanity? I wondered. And wonder soon became frustration. Frustration quickly turned into anger, which then left me browsing internet for a desperate life-saving hack.\r\n\r\nAnd I found what I was searching for. Solution which was much quicker and easier than I thought.\r\n\r\nIn order to swap <code>FN</code> and <code>STRG/CTRL</code>, you will need to go to BIOS. In my dual operating system configuration, upon starting the computer I can choose between Ubuntu and Windows or navigate to <code>System Setup</code>. Choose System Setup to start BIOS:\r\n\r\n![](https://i.imgur.com/fYkEih0.jpg \"Photo by Addania\")\r\n\r\nAfterwards go to the <code>Config</code> tab and select <code>Keyboard/Mouse</code> setting.\r\n\r\n![](https://i.imgur.com/FvQdpkx.jpg \"Photo by Addania\")\r\n\r\nEnable the <code>Fn and Ctrl Key swap</code>\r\n\r\n![](https://i.imgur.com/avrwWxq.jpg \"Photo by Addania\")\r\n\r\nThen you can click <code>ESC</code> to exit this tab and navigate to <code>Restart</code> tab & select <code>Exit saving changes</code>\r\n![](https://i.imgur.com/o6u7l7v.jpg \"Photo by Addania\")\r\n\r\nYou will obviously need to confirm that you want to save the configuration changes.\r\n![](https://i.imgur.com/uIt2Pmu.jpg\"Photo by Addania\")\r\n\r\nResult? Totally professionally hacked computer :))\r\n\r\n![](https://i.imgur.com/38E4Bra.jpg \"Photo by Addania\")\r\n\r\nI am a Monster, I know ;)\r\n\r\n<img src=\"https://i.imgur.com/ecoffoD.png\" alt=\"drawing\" width=\"150\"/>\r\n","frontmatter":{"date":"2020-02-28","title":"ThinkPad Switch CTRL and FN key","category":"knowledge-base"},"fields":{"slug":"/ThinkPad_Switch_CTRLandFN_key/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/86RXy1V.jpg\" title=\"Photo from https://commons.wikimedia.org/wiki/File:Lenovo_ThinkPad_Logo.jpg\"></p>\n<p>The long-expected day has finally arrived when I got my completely brand new baby computer for my new role as Front-End Developer. Thus was the joy when I saw that ligh-weight ThinkPad cutie. Excitement lasted until I tried to copy paste the first thing. You can guess it... <code>IT DID NOT WORK!</code></p>\n<p>To my horror I realized that <code>FN</code> and <code>STRG/CTRL</code> keys were switched!! Which cruel creature on this planet would ever do that to humanity? I wondered. And wonder soon became frustration. Frustration quickly turned into anger, which then left me browsing internet for a desperate life-saving hack.</p>\n<p>And I found what I was searching for. Solution which was much quicker and easier than I thought.</p>\n<p>In order to swap <code>FN</code> and <code>STRG/CTRL</code>, you will need to go to BIOS. In my dual operating system configuration, upon starting the computer I can choose between Ubuntu and Windows or navigate to <code>System Setup</code>. Choose System Setup to start BIOS:</p>\n<p><img src=\"https://i.imgur.com/fYkEih0.jpg\" title=\"Photo by Addania\"></p>\n<p>Afterwards go to the <code>Config</code> tab and select <code>Keyboard/Mouse</code> setting.</p>\n<p><img src=\"https://i.imgur.com/FvQdpkx.jpg\" title=\"Photo by Addania\"></p>\n<p>Enable the <code>Fn and Ctrl Key swap</code></p>\n<p><img src=\"https://i.imgur.com/avrwWxq.jpg\" title=\"Photo by Addania\"></p>\n<p>Then you can click <code>ESC</code> to exit this tab and navigate to <code>Restart</code> tab &#x26; select <code>Exit saving changes</code>\n<img src=\"https://i.imgur.com/o6u7l7v.jpg\" title=\"Photo by Addania\"></p>\n<p>You will obviously need to confirm that you want to save the configuration changes.\n<img src=\"https://i.imgur.com/uIt2Pmu.jpg%22Photo%20by%20Addania%22\"></p>\n<p>Result? Totally professionally hacked computer :))</p>\n<p><img src=\"https://i.imgur.com/38E4Bra.jpg\" title=\"Photo by Addania\"></p>\n<p>I am a Monster, I know ;)</p>\n<img src=\"https://i.imgur.com/ecoffoD.png\" alt=\"drawing\" width=\"150\"/>"}},{"node":{"id":"cafc87cb-9d2c-56ab-91fd-7df7ccd97c90","excerpt":"Because everyone loves when the app throws an error, right? That is why it is useful to know how to actually throw it :) You grab the error…","rawMarkdownBody":"\r\n![](https://i.imgur.com/eusnq5M.jpg \"Photo from Gratisography from Pexels\")\r\n\r\n> Because everyone loves when the app throws an error, right? That is why it is useful to know how to actually throw it :) You grab the error, strain the muscles, grind your teeth and throw it as far as possible :)) And having utility functions to CATCH those poor innocent errors, would be practical too.\r\n\r\n>Anyhow, to log an error in the console <code>use throw new Error</code> and some meaningful description of the error itself:\r\n```\r\nthrow new Error('WAAAA');\r\n```\r\n>Another way to throw an error suing throwing and object:\r\n```\r\nconst generateError = (message: string, code: number) => {\r\n    throw { message: message, errorCode: code }\r\n}\r\n\r\ngenerateError(\"Upsy\", 500)\r\n```\r\n\r\n![](https://i.imgur.com/lTVJXap.jpg \"Photo by Andrea Piacquadio from Pexels\")\r\n","frontmatter":{"date":"2020-02-27","title":"Throwing errors in Javascript","category":"knowledge-base"},"fields":{"slug":"/Throwing_Errors_Javascript/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/eusnq5M.jpg\" title=\"Photo from Gratisography from Pexels\"></p>\n<blockquote>\n<p>Because everyone loves when the app throws an error, right? That is why it is useful to know how to actually throw it :) You grab the error, strain the muscles, grind your teeth and throw it as far as possible :)) And having utility functions to CATCH those poor innocent errors, would be practical too.</p>\n</blockquote>\n<blockquote>\n<p>Anyhow, to log an error in the console <code>use throw new Error</code> and some meaningful description of the error itself:</p>\n</blockquote>\n<pre><code>throw new Error('WAAAA');\n</code></pre>\n<blockquote>\n<p>Another way to throw an error suing throwing and object:</p>\n</blockquote>\n<pre><code>const generateError = (message: string, code: number) => {\n    throw { message: message, errorCode: code }\n}\n\ngenerateError(\"Upsy\", 500)\n</code></pre>\n<p><img src=\"https://i.imgur.com/lTVJXap.jpg\" title=\"Photo by Andrea Piacquadio from Pexels\"></p>"}},{"node":{"id":"e6b3518f-4c42-5689-92c0-fcf519a43f36","excerpt":"I would like to compile here couple of tips for the best practices I stumbled upon during my intro to programming universe :) Will be funny…","rawMarkdownBody":"\r\n![](https://i.imgur.com/gyWBniE.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nI would like to compile here couple of tips for the best practices I stumbled upon during my intro to programming universe :) Will be funny to review those in couple of years from now :)\r\n\r\n> **Use Prettier**\r\n\r\nCode should always be ... pretty :) and of course neatly formatted - really be picky here, have your code simply <code>AWESOME</code>\r\n```\r\nhttps://create-react-app.dev/docs/setting-up-your-editor/#formatting-code-automatically\r\n```\r\n\r\n> **Fix ESLint warnings**\r\n\r\nAlways make sure you have fixed all the ESLint warnings!\r\n\r\n> **Delete console.logs**\r\n\r\nIt certainly does not look professional to leave unintended console.logs which were part of your development or testing\r\n\r\n> **Delete all comments**\r\n\r\nOf course only those which are remnants of tests or unused code. Relevant comments should still be kept.\r\n\r\n> **Never use let or var**\r\n\r\nIn React especially we want to avoid mutating variables. Therefore we use <code>const</code> instead which cannot be re-assigned. We should always keep in mind not the re-assign values.\r\n\r\n> **Don't use mutating functions**\r\n\r\nAs above, in React we want to avoid any mutation. All functions which mutate should be avoided. Such are:\r\n```\r\n.push\r\n.delete\r\n```\r\nUse non-mutating functions such as:\r\n```\r\n.map\r\n.filter\r\n```\r\n\r\n> **Favour native ES6 functions**\r\n\r\nIf there is a ES6 native function available, use that one before you reach out for other libraries like <code>lodash</code> or <code>moment</code>.\r\n\r\n> **Use pure functions**\r\n\r\nAll functions should be pure - same inputs always yields same output, no side-effects and no mutations.\r\n\r\n> **Use arrow functions**\r\n\r\nDo not declare functions with word <code>function</code>\r\n```\r\nfunction sum(a, b) {\r\n return a+b\r\n}\r\n```\r\n\r\nUse latest ES6 arrow function syntax:\r\n```\r\nconst sum = (a, b) => {\r\n return a+b\r\n}\r\n```\r\n\r\n> **Use explicit return**\r\n\r\nAvoid using word <code>return</code> if possible\r\n\r\nInstead of:\r\n```\r\nconst getDimensions = (inputData, inputColumns) => {\r\n  return inputColumns.filter(column => typeof inputData[column] === \"string\");\r\n}\r\n```\r\n\r\nit is better to write:\r\n```\r\nconst getDimensions = (inputData, inputColumns) =>\r\n  inputColumns.filter(column => typeof inputData[column] === \"string\");\r\n```\r\n\r\n> **Avoid creating unnecessary variables**\r\n\r\nInstead of:\r\n```\r\nconst parseData = csvData => {\r\n  const jsonData = csvJSON(csvData);\r\n  const formattedImpressions = formatImpressions(jsonData);\r\n  const formattedDates = extractDate(formattedImpressions);\r\n  const sortedData = sortArray(formattedDates);\r\n  const tableColumns = getColumns(sortedData[0]);\r\n  const metricColumns = getMetrics(sortedData[0], tableColumns);\r\n  const dimensionColumns = getDimensions(sortedData[0], tableColumns);\r\n  const finalData = formatDate(sortedData);\r\n  return [finalData, metricColumns, dimensionColumns];\r\n}\r\n\r\n```\r\nit is preferred to use:\r\n```\r\nconst parseData = csvData => {\r\n  const sortedData = sortArray(extractDate(formatMetrics(parseCsv(csvData))));\r\n  return {\r\n    sortedData: sortedData,\r\n    metrics: getMetrics(sortedData[0], getColumns(sortedData[0])),\r\n    dimensions: getDimensions(sortedData[0], getColumns(sortedData[0]))\r\n  };\r\n};\r\n```\r\n\r\n> **Separate concern**\r\n\r\nThis is really <code>THE topic</code>! Each element should only do one thing. Elements which logically go together should be kept close together. An element should not be concerned with anything that is not necessarily their business. Separate business logic from the presentation layer.\r\n\r\n> **Add tests for all functions**\r\n\r\nEach function should be tested properly. Thorough test suit will improve software quality, make your life easier in long run and enable you to catch errors early. Especially before they go to production.\r\n\r\n> **Return objects rather then arrays**\r\n\r\nIf you need to output multiple values, do not use an array, use preferably an object where you specify what you are returning\r\n\r\nInstead of:\r\n```\r\nconst parseData = csvData => {\r\n  ...\r\n  return [finalData, metricColumns, dimensionColumns];\r\n}\r\n```\r\nbetter practice is:\r\n```\r\nconst parseData = csvData => {\r\n  ...\r\n  return {\r\n    sortedData: sortedData,\r\n    metrics: metrics,\r\n    dimensions: dimensions\r\n  };\r\n}\r\n```\r\n\r\n> **Reduce lines of code**\r\n\r\nAlways strive for efficiency - less lines of code, less reading, less maintenance\r\n\r\n> **Do not define a function within a function**\r\n\r\nNo function inception :) If you need to define sub-function, define it outside of an existing function (can still be in the same file)\r\n\r\n> **Avoid repeating code**\r\n\r\nAbstract anything into a function or a const, that would need to be repeated multiple times in code. It will allow you then to adapt changes in one place, instead of say...30\r\n\r\n> **Remove legacy**\r\n\r\nCheck if all your functions, components, tests or dependencies are actually being used. It is often the case that we forget to remove a test after we have removed a function.\r\n\r\n> **Do not use abbreviations**\r\n\r\nAll names of variables, functions, components, etc. should be always full names, even if it is a common abbreviation\r\n\r\n- n => number\r\n- i => index\r\n- e => event\r\n- acc => accumulator\r\n- min => minumum or minus\r\n\r\n> **Use positive names**\r\n\r\nAvoid using negative names, because if you need to use them in negative conditions, we would have double negations. Which is unnecessary complication.\r\n\r\nExample:\r\n- notAvailable\r\n- nonUser\r\n\r\nInstead of:\r\n```\r\nif ( !notAvailable ) {}\r\n```\r\n\r\nwe can use:\r\n```\r\nif ( available ) {}\r\n```\r\n\r\n> **Do not use types in names**\r\n\r\nSince Typescript is used, it is not necessary to name variables with types:\r\n\r\n- nameString\r\n- ListComponent\r\n- computeFunction\r\n\r\nWords like <code>string</code>, <code>component</code>, <code>function</code> are redundant\r\n\r\n> **Use named exports**\r\n\r\nAvoid default exports: \r\n```\r\nexport default App\r\n```\r\n\r\nInstead use named exports:\r\n```\r\nexport const App = () => (...)\r\n\r\n```\r\n\r\nAn interesting article about this topic is here:\r\n\r\nhttps://humanwhocodes.com/blog/2019/01/stop-using-default-exports-javascript-module/\r\n\r\n> **Keep relevant context**\r\n\r\nSometimes modules which are imported from some other place are too general, like <code>refresh</code>. We still want to keep its context, that it is coming from api.\r\n\r\nInstead of:\r\n```\r\nimport { refresh } from 'api'\r\n...\r\nrefresh()\r\n```\r\n\r\nit is better to use:\r\n```\r\nimport * as api from 'api'\r\n...\r\napi.refresh()\r\n}\r\n\r\n```\r\n\r\nSame goes for React. We want to know which elements are imported from React directly:\r\n```\r\nimport * as React from 'react'\r\n```\r\n\r\n> **Use atomic commits**\r\n\r\nEach commit should only consist of one change. Therefore avoid needing word <code>and</code> in the commit message. Always think about what is the minimum viable commit - smallest useful change.\r\n\r\n> **Use commits to tell stories about the code**\r\n\r\nGood commit messages are very helpful to future you or to other developers to understand code changes and reason behind those changes. Good commit messages should always convey <code>INTENT</code>.\r\n\r\nGood commit message consists of:\r\n\r\n1// Commit title - a short one-liner\r\n\r\n2// At least one line break - this line break then allows to neatly list all commit titles with:\r\n```\r\ngit log --pretty=oneline\r\n```\r\n\r\n3// Commit body - longer description of what the change does and an explanation why the change was done\r\n\r\n4// Contex - outline context or alternatives you considered\r\n\r\nCommit messages can contain link to bug tracking system or link to blog posts which explain the problem\r\n\r\n> **Rename or move, then commit**\r\n\r\nGood practice is to first rename or move file, then commit (without any further changes to the file)! Only after the commit you should do more changes to the file. Reason is, that if you rename or move file AND make changes to it, in the change history it will be shown as if entire file was removed and new one was added. You will not be able to track and compare changes within the file.\r\n\r\n```\r\ngit mv oldfile newfile\r\ngit commit -m \"moved oldfile to newfile\"\r\n```\r\n> **Review your commit history** \r\n\r\nYou should review the development history so that you can tell meaningful stories from it, rather than having a scatterplot of all commits. To remove, reorder, edit, merge and split commits use:\r\n```\r\ngit rebase --interactive\r\n```\r\n\r\n> **Deconstruct all props**\r\n\r\nDo not simply use <code>(props)</code>\r\n\r\nInstead of:\r\n```\r\nexport const Subheader = (props) => {}\r\n```\r\n\r\ndeconstruct all props:\r\n```\r\nexport const Subheader = ({ text, color, dimensions }) => {}\r\n```\r\n\r\n> **Object keys should be camelCased**\r\n\r\nInstead of:\r\n```\r\nconst data={\r\n  Date: \"2020-02-20\",\r\n  Impressions: 152369\r\n}\r\n```\r\n\r\nwe should implement camelCase:\r\n```\r\nconst data={\r\n  date: \"2020-02-20\",\r\n  impressions: 152369\r\n}\r\n```\r\n\r\n> **Functions should not have React dependency**\r\n\r\nBasically use a component when we need to display HTML. Use functions without React dependency\r\n\r\n> **Use plural name if you generate more items**\r\n\r\nIf you have a component within which you map through a list and then generate multiple items, then name of the component should be plural.\r\n\r\nExample: Filter => Filters\r\n\r\n> **Avoid using meaningless text in links**\r\n\r\nFor example <code>in this article</code> or <code>here</code>\r\n\r\n![](https://i.imgur.com/XREQjDp.jpg \"Photo by Jeswin Thomas from Pexels\")\r\n\r\n\r\n","frontmatter":{"date":"2020-02-21","title":"Best Practices","category":"knowledge-base"},"fields":{"slug":"/Best_Practices/"},"timeToRead":7,"html":"<p><img src=\"https://i.imgur.com/gyWBniE.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>I would like to compile here couple of tips for the best practices I stumbled upon during my intro to programming universe :) Will be funny to review those in couple of years from now :)</p>\n<blockquote>\n<p><strong>Use Prettier</strong></p>\n</blockquote>\n<p>Code should always be ... pretty :) and of course neatly formatted - really be picky here, have your code simply <code>AWESOME</code></p>\n<pre><code>https://create-react-app.dev/docs/setting-up-your-editor/#formatting-code-automatically\n</code></pre>\n<blockquote>\n<p><strong>Fix ESLint warnings</strong></p>\n</blockquote>\n<p>Always make sure you have fixed all the ESLint warnings!</p>\n<blockquote>\n<p><strong>Delete console.logs</strong></p>\n</blockquote>\n<p>It certainly does not look professional to leave unintended console.logs which were part of your development or testing</p>\n<blockquote>\n<p><strong>Delete all comments</strong></p>\n</blockquote>\n<p>Of course only those which are remnants of tests or unused code. Relevant comments should still be kept.</p>\n<blockquote>\n<p><strong>Never use let or var</strong></p>\n</blockquote>\n<p>In React especially we want to avoid mutating variables. Therefore we use <code>const</code> instead which cannot be re-assigned. We should always keep in mind not the re-assign values.</p>\n<blockquote>\n<p><strong>Don't use mutating functions</strong></p>\n</blockquote>\n<p>As above, in React we want to avoid any mutation. All functions which mutate should be avoided. Such are:</p>\n<pre><code>.push\n.delete\n</code></pre>\n<p>Use non-mutating functions such as:</p>\n<pre><code>.map\n.filter\n</code></pre>\n<blockquote>\n<p><strong>Favour native ES6 functions</strong></p>\n</blockquote>\n<p>If there is a ES6 native function available, use that one before you reach out for other libraries like <code>lodash</code> or <code>moment</code>.</p>\n<blockquote>\n<p><strong>Use pure functions</strong></p>\n</blockquote>\n<p>All functions should be pure - same inputs always yields same output, no side-effects and no mutations.</p>\n<blockquote>\n<p><strong>Use arrow functions</strong></p>\n</blockquote>\n<p>Do not declare functions with word <code>function</code></p>\n<pre><code>function sum(a, b) {\n return a+b\n}\n</code></pre>\n<p>Use latest ES6 arrow function syntax:</p>\n<pre><code>const sum = (a, b) => {\n return a+b\n}\n</code></pre>\n<blockquote>\n<p><strong>Use explicit return</strong></p>\n</blockquote>\n<p>Avoid using word <code>return</code> if possible</p>\n<p>Instead of:</p>\n<pre><code>const getDimensions = (inputData, inputColumns) => {\n  return inputColumns.filter(column => typeof inputData[column] === \"string\");\n}\n</code></pre>\n<p>it is better to write:</p>\n<pre><code>const getDimensions = (inputData, inputColumns) =>\n  inputColumns.filter(column => typeof inputData[column] === \"string\");\n</code></pre>\n<blockquote>\n<p><strong>Avoid creating unnecessary variables</strong></p>\n</blockquote>\n<p>Instead of:</p>\n<pre><code>const parseData = csvData => {\n  const jsonData = csvJSON(csvData);\n  const formattedImpressions = formatImpressions(jsonData);\n  const formattedDates = extractDate(formattedImpressions);\n  const sortedData = sortArray(formattedDates);\n  const tableColumns = getColumns(sortedData[0]);\n  const metricColumns = getMetrics(sortedData[0], tableColumns);\n  const dimensionColumns = getDimensions(sortedData[0], tableColumns);\n  const finalData = formatDate(sortedData);\n  return [finalData, metricColumns, dimensionColumns];\n}\n</code></pre>\n<p>it is preferred to use:</p>\n<pre><code>const parseData = csvData => {\n  const sortedData = sortArray(extractDate(formatMetrics(parseCsv(csvData))));\n  return {\n    sortedData: sortedData,\n    metrics: getMetrics(sortedData[0], getColumns(sortedData[0])),\n    dimensions: getDimensions(sortedData[0], getColumns(sortedData[0]))\n  };\n};\n</code></pre>\n<blockquote>\n<p><strong>Separate concern</strong></p>\n</blockquote>\n<p>This is really <code>THE topic</code>! Each element should only do one thing. Elements which logically go together should be kept close together. An element should not be concerned with anything that is not necessarily their business. Separate business logic from the presentation layer.</p>\n<blockquote>\n<p><strong>Add tests for all functions</strong></p>\n</blockquote>\n<p>Each function should be tested properly. Thorough test suit will improve software quality, make your life easier in long run and enable you to catch errors early. Especially before they go to production.</p>\n<blockquote>\n<p><strong>Return objects rather then arrays</strong></p>\n</blockquote>\n<p>If you need to output multiple values, do not use an array, use preferably an object where you specify what you are returning</p>\n<p>Instead of:</p>\n<pre><code>const parseData = csvData => {\n  ...\n  return [finalData, metricColumns, dimensionColumns];\n}\n</code></pre>\n<p>better practice is:</p>\n<pre><code>const parseData = csvData => {\n  ...\n  return {\n    sortedData: sortedData,\n    metrics: metrics,\n    dimensions: dimensions\n  };\n}\n</code></pre>\n<blockquote>\n<p><strong>Reduce lines of code</strong></p>\n</blockquote>\n<p>Always strive for efficiency - less lines of code, less reading, less maintenance</p>\n<blockquote>\n<p><strong>Do not define a function within a function</strong></p>\n</blockquote>\n<p>No function inception :) If you need to define sub-function, define it outside of an existing function (can still be in the same file)</p>\n<blockquote>\n<p><strong>Avoid repeating code</strong></p>\n</blockquote>\n<p>Abstract anything into a function or a const, that would need to be repeated multiple times in code. It will allow you then to adapt changes in one place, instead of say...30</p>\n<blockquote>\n<p><strong>Remove legacy</strong></p>\n</blockquote>\n<p>Check if all your functions, components, tests or dependencies are actually being used. It is often the case that we forget to remove a test after we have removed a function.</p>\n<blockquote>\n<p><strong>Do not use abbreviations</strong></p>\n</blockquote>\n<p>All names of variables, functions, components, etc. should be always full names, even if it is a common abbreviation</p>\n<ul>\n<li>n => number</li>\n<li>i => index</li>\n<li>e => event</li>\n<li>acc => accumulator</li>\n<li>min => minumum or minus</li>\n</ul>\n<blockquote>\n<p><strong>Use positive names</strong></p>\n</blockquote>\n<p>Avoid using negative names, because if you need to use them in negative conditions, we would have double negations. Which is unnecessary complication.</p>\n<p>Example:</p>\n<ul>\n<li>notAvailable</li>\n<li>nonUser</li>\n</ul>\n<p>Instead of:</p>\n<pre><code>if ( !notAvailable ) {}\n</code></pre>\n<p>we can use:</p>\n<pre><code>if ( available ) {}\n</code></pre>\n<blockquote>\n<p><strong>Do not use types in names</strong></p>\n</blockquote>\n<p>Since Typescript is used, it is not necessary to name variables with types:</p>\n<ul>\n<li>nameString</li>\n<li>ListComponent</li>\n<li>computeFunction</li>\n</ul>\n<p>Words like <code>string</code>, <code>component</code>, <code>function</code> are redundant</p>\n<blockquote>\n<p><strong>Use named exports</strong></p>\n</blockquote>\n<p>Avoid default exports: </p>\n<pre><code>export default App\n</code></pre>\n<p>Instead use named exports:</p>\n<pre><code>export const App = () => (...)\n</code></pre>\n<p>An interesting article about this topic is here:</p>\n<p><a href=\"https://humanwhocodes.com/blog/2019/01/stop-using-default-exports-javascript-module/\">https://humanwhocodes.com/blog/2019/01/stop-using-default-exports-javascript-module/</a></p>\n<blockquote>\n<p><strong>Keep relevant context</strong></p>\n</blockquote>\n<p>Sometimes modules which are imported from some other place are too general, like <code>refresh</code>. We still want to keep its context, that it is coming from api.</p>\n<p>Instead of:</p>\n<pre><code>import { refresh } from 'api'\n...\nrefresh()\n</code></pre>\n<p>it is better to use:</p>\n<pre><code>import * as api from 'api'\n...\napi.refresh()\n}\n</code></pre>\n<p>Same goes for React. We want to know which elements are imported from React directly:</p>\n<pre><code>import * as React from 'react'\n</code></pre>\n<blockquote>\n<p><strong>Use atomic commits</strong></p>\n</blockquote>\n<p>Each commit should only consist of one change. Therefore avoid needing word <code>and</code> in the commit message. Always think about what is the minimum viable commit - smallest useful change.</p>\n<blockquote>\n<p><strong>Use commits to tell stories about the code</strong></p>\n</blockquote>\n<p>Good commit messages are very helpful to future you or to other developers to understand code changes and reason behind those changes. Good commit messages should always convey <code>INTENT</code>.</p>\n<p>Good commit message consists of:</p>\n<p>1// Commit title - a short one-liner</p>\n<p>2// At least one line break - this line break then allows to neatly list all commit titles with:</p>\n<pre><code>git log --pretty=oneline\n</code></pre>\n<p>3// Commit body - longer description of what the change does and an explanation why the change was done</p>\n<p>4// Contex - outline context or alternatives you considered</p>\n<p>Commit messages can contain link to bug tracking system or link to blog posts which explain the problem</p>\n<blockquote>\n<p><strong>Rename or move, then commit</strong></p>\n</blockquote>\n<p>Good practice is to first rename or move file, then commit (without any further changes to the file)! Only after the commit you should do more changes to the file. Reason is, that if you rename or move file AND make changes to it, in the change history it will be shown as if entire file was removed and new one was added. You will not be able to track and compare changes within the file.</p>\n<pre><code>git mv oldfile newfile\ngit commit -m \"moved oldfile to newfile\"\n</code></pre>\n<blockquote>\n<p><strong>Review your commit history</strong> </p>\n</blockquote>\n<p>You should review the development history so that you can tell meaningful stories from it, rather than having a scatterplot of all commits. To remove, reorder, edit, merge and split commits use:</p>\n<pre><code>git rebase --interactive\n</code></pre>\n<blockquote>\n<p><strong>Deconstruct all props</strong></p>\n</blockquote>\n<p>Do not simply use <code>(props)</code></p>\n<p>Instead of:</p>\n<pre><code>export const Subheader = (props) => {}\n</code></pre>\n<p>deconstruct all props:</p>\n<pre><code>export const Subheader = ({ text, color, dimensions }) => {}\n</code></pre>\n<blockquote>\n<p><strong>Object keys should be camelCased</strong></p>\n</blockquote>\n<p>Instead of:</p>\n<pre><code>const data={\n  Date: \"2020-02-20\",\n  Impressions: 152369\n}\n</code></pre>\n<p>we should implement camelCase:</p>\n<pre><code>const data={\n  date: \"2020-02-20\",\n  impressions: 152369\n}\n</code></pre>\n<blockquote>\n<p><strong>Functions should not have React dependency</strong></p>\n</blockquote>\n<p>Basically use a component when we need to display HTML. Use functions without React dependency</p>\n<blockquote>\n<p><strong>Use plural name if you generate more items</strong></p>\n</blockquote>\n<p>If you have a component within which you map through a list and then generate multiple items, then name of the component should be plural.</p>\n<p>Example: Filter => Filters</p>\n<blockquote>\n<p><strong>Avoid using meaningless text in links</strong></p>\n</blockquote>\n<p>For example <code>in this article</code> or <code>here</code></p>\n<p><img src=\"https://i.imgur.com/XREQjDp.jpg\" title=\"Photo by Jeswin Thomas from Pexels\"></p>"}},{"node":{"id":"b1672b34-9203-5e4e-975e-c31c99f88db9","excerpt":"\"Place code as close to where it's relevant as possible.\" Kent C. Dodds \"Things that change together should be located as close as…","rawMarkdownBody":"\r\n![](https://i.imgur.com/xI4DXv7.jpg \"Photo by ELEVATE from Pexels\")\r\n\r\n> \"Place code as close to where it's relevant as possible.\"\r\n\r\nKent C. Dodds\r\n\r\n> \"Things that change together should be located as close as reasonable.\"\r\n\r\nDan Abramov\r\n\r\nThis means for example if a component is using some functions and these functions are not used in any other places, then place those functions within the same file but outside of the component, rather then creating an external file for for each function. \r\n\r\nAll elements that logically belong to gether should be kept close to each other. \r\n\r\nSame goes for tests, these should be kept as close to the function files as possible. If there are only couple of function files, their tests can reside next to them. This is to remind the future you or other developers not to forget to update tests when functions change. If there are many function files and main folder would be clattred, create a dedicated subfolder for tests.\r\n\r\nReference:\r\n\r\nhttps://kentcdodds.com/blog/colocation/\r\n\r\n![](https://i.imgur.com/VwFJtH1.jpg \"Photo by Anastasiya Lobanovskaya from Pexels\")","frontmatter":{"date":"2020-02-20","title":"Colocation","category":"knowledge-base"},"fields":{"slug":"/Colocation/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/xI4DXv7.jpg\" title=\"Photo by ELEVATE from Pexels\"></p>\n<blockquote>\n<p>\"Place code as close to where it's relevant as possible.\"</p>\n</blockquote>\n<p>Kent C. Dodds</p>\n<blockquote>\n<p>\"Things that change together should be located as close as reasonable.\"</p>\n</blockquote>\n<p>Dan Abramov</p>\n<p>This means for example if a component is using some functions and these functions are not used in any other places, then place those functions within the same file but outside of the component, rather then creating an external file for for each function. </p>\n<p>All elements that logically belong to gether should be kept close to each other. </p>\n<p>Same goes for tests, these should be kept as close to the function files as possible. If there are only couple of function files, their tests can reside next to them. This is to remind the future you or other developers not to forget to update tests when functions change. If there are many function files and main folder would be clattred, create a dedicated subfolder for tests.</p>\n<p>Reference:</p>\n<p><a href=\"https://kentcdodds.com/blog/colocation/\">https://kentcdodds.com/blog/colocation/</a></p>\n<p><img src=\"https://i.imgur.com/VwFJtH1.jpg\" title=\"Photo by Anastasiya Lobanovskaya from Pexels\"></p>"}},{"node":{"id":"fa6ce3f0-957d-50a7-a5a4-1e4489926b5a","excerpt":"The most fascinating model of how to work with branches and how to merge them in order to enable the entire dev team to work efficiently and…","rawMarkdownBody":"\r\n![](https://i.imgur.com/uOGLcr9.png \"Photo by Vincent Driessen from https://nvie.com/\")\r\n\r\nThe most fascinating model of how to work with branches and how to merge them in order to enable the entire dev team to work efficiently and in a structured manner.\r\n\r\nReference:\r\n\r\nhttps://nvie.com/posts/a-successful-git-branching-model/\r\n","frontmatter":{"date":"2020-02-19","title":"Git Flow","category":"knowledge-base"},"fields":{"slug":"/Git_Flow/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/uOGLcr9.png\" title=\"Photo by Vincent Driessen from https://nvie.com/\"></p>\n<p>The most fascinating model of how to work with branches and how to merge them in order to enable the entire dev team to work efficiently and in a structured manner.</p>\n<p>Reference:</p>\n<p><a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">https://nvie.com/posts/a-successful-git-branching-model/</a></p>"}},{"node":{"id":"2c6735be-9183-5bc1-ac43-5d361afdf703","excerpt":"Each version of the software will be attributed a version tag. There is a convention how the numbers should be assigned.  In the image above…","rawMarkdownBody":"\r\n![](https://i.imgur.com/xdi5UzW.png \"Photo by Pixabay from Pexels\")\r\n\r\nEach version of the software will be attributed a version tag. There is a convention how the numbers should be assigned. \r\n\r\nIn the image above, the version tag consists of 3 numbers: <code>5.2.1</code>:\r\n\r\n> <code>Major</code> - for major features which are not backward compatible\r\n\r\n> <code>Minor</code> - for new features which aree backward compatible\r\n\r\n> <code>Patch</code> - for bug fixes which are also backward compatible\r\n\r\nThe very first version of the software is usually tagged as: 1.0.0\r\n\r\nSee the picture below for the more detailled explanation:\r\n\r\n![](https://i.imgur.com/18jTUgb.png \"Photo from https://docs.npmjs.com/about-semantic-versioning\")\r\n\r\nReference:\r\n\r\nhttps://docs.npmjs.com/about-semantic-versioning  ","frontmatter":{"date":"2020-02-18","title":"Semantic Versioning","category":"knowledge-base"},"fields":{"slug":"/Semantic_Versioning/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/xdi5UzW.png\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>Each version of the software will be attributed a version tag. There is a convention how the numbers should be assigned. </p>\n<p>In the image above, the version tag consists of 3 numbers: <code>5.2.1</code>:</p>\n<blockquote>\n<p><code>Major</code> - for major features which are not backward compatible</p>\n</blockquote>\n<blockquote>\n<p><code>Minor</code> - for new features which aree backward compatible</p>\n</blockquote>\n<blockquote>\n<p><code>Patch</code> - for bug fixes which are also backward compatible</p>\n</blockquote>\n<p>The very first version of the software is usually tagged as: 1.0.0</p>\n<p>See the picture below for the more detailled explanation:</p>\n<p><img src=\"https://i.imgur.com/18jTUgb.png\" title=\"Photo from https://docs.npmjs.com/about-semantic-versioning\"></p>\n<p>Reference:</p>\n<p><a href=\"https://docs.npmjs.com/about-semantic-versioning\">https://docs.npmjs.com/about-semantic-versioning</a>  </p>"}},{"node":{"id":"a8b65fb6-9281-5aeb-b52d-2414473fa7ca","excerpt":"“You should name a variable using the same care with which you name a first-born child.” Robert C. Martin Name of each variable, function or…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Vv2NHVt.jpg \"Photo by Pixabay from Pexels\")\r\n\r\n> “You should name a variable using the same care with which you name a first-born child.”\r\n\r\nRobert C. Martin\r\n\r\nName of each variable, function or component should be chosen with care. There are couple of possible casing conventions:\r\n\r\n- camelCase\r\n- PascalCase\r\n- snake_case\r\n- kebab-case\r\n\r\n\r\nWe could use <code>camelCase</code> for example for variables, functions or keys in the object.\r\n\r\n<code>PascalCase</code> is often usd for components and for types in Typescript.\r\n\r\n<code>kebab-case</code> might be a good choice for naming branches\r\n","frontmatter":{"date":"2020-02-17","title":"Casing","category":"knowledge-base"},"fields":{"slug":"/Casing/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/Vv2NHVt.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<blockquote>\n<p>“You should name a variable using the same care with which you name a first-born child.”</p>\n</blockquote>\n<p>Robert C. Martin</p>\n<p>Name of each variable, function or component should be chosen with care. There are couple of possible casing conventions:</p>\n<ul>\n<li>camelCase</li>\n<li>PascalCase</li>\n<li>snake_case</li>\n<li>kebab-case</li>\n</ul>\n<p>We could use <code>camelCase</code> for example for variables, functions or keys in the object.</p>\n<p><code>PascalCase</code> is often usd for components and for types in Typescript.</p>\n<p><code>kebab-case</code> might be a good choice for naming branches</p>"}},{"node":{"id":"2f797632-3c4a-533b-9fa9-0d1dab0d0d70","excerpt":"Let's assume we have an object which looks like this: Object destructuring means taking each of the object elements and assigning them to a…","rawMarkdownBody":"\r\n![](https://i.imgur.com/vPArtow.jpg \"Photo by Grimbeorn the Old from https://steamcommunity.com/sharedfiles/filedetails/?id=1139259633\")\r\n\r\n> Let's assume we have an object which looks like this:\r\n```\r\nconst character = {\r\n  name: \"Tyrande\", \r\n  surname: \"Whisperwind\", \r\n  race: \"Night Elf\",\r\n  profession: \"Priest\"\r\n}\r\n```\r\n\r\n> Object destructuring means taking each of the object elements and assigning them to a new variable. Object destructuring looks like this:\r\n\r\n```\r\nlet { name, surname, race, profession } = character\r\n```\r\n\r\n> We can then use those variables for example:\r\n```\r\nconsole.log(name)\r\n// Tyrande\r\n```\r\n\r\nReference:\r\n\r\nhttps://www.youtube.com/watch?v=G4T2ZgJPKbw\r\n","frontmatter":{"date":"2020-02-16","title":"Object Destructuring","category":"knowledge-base"},"fields":{"slug":"/Object_Destructuring/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/vPArtow.jpg\" title=\"Photo by Grimbeorn the Old from https://steamcommunity.com/sharedfiles/filedetails/?id=1139259633\"></p>\n<blockquote>\n<p>Let's assume we have an object which looks like this:</p>\n</blockquote>\n<pre><code>const character = {\n  name: \"Tyrande\", \n  surname: \"Whisperwind\", \n  race: \"Night Elf\",\n  profession: \"Priest\"\n}\n</code></pre>\n<blockquote>\n<p>Object destructuring means taking each of the object elements and assigning them to a new variable. Object destructuring looks like this:</p>\n</blockquote>\n<pre><code>let { name, surname, race, profession } = character\n</code></pre>\n<blockquote>\n<p>We can then use those variables for example:</p>\n</blockquote>\n<pre><code>console.log(name)\n// Tyrande\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://www.youtube.com/watch?v=G4T2ZgJPKbw\">https://www.youtube.com/watch?v=G4T2ZgJPKbw</a></p>"}},{"node":{"id":"2828f5f8-d27b-55c4-bc5d-2c2e4f516efd","excerpt":"Redux is a global state manager. It is a predictable state container for JavaScript (apps.redux.js.org). Redux helps write applications that…","rawMarkdownBody":"\r\n![](https://i.imgur.com/DzveM7R.png \"Photo by Traversy Media\r\n from https://www.youtube.com/watch?v=93p3LxR9xfM\")\r\n\r\nRedux is a global state manager. It is a predictable state container for JavaScript (apps.redux.js.org). Redux helps write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.\r\n\r\nWe use Redux when we want to <code>share state</code> between components.\r\n\r\nInstead of individual <code>Component level state</code> you will have <code>Application level state</code>.\r\n\r\nRedux concept incorporates some teminology:\r\n\r\n> <code>View</code> - your components\r\n\r\n> <code>Store</code> - your state (it sends the state **to** components)\r\n\r\n> <code>Action creator</code> - one of components might be a button which when clicked will create an **action** - therefore it is called **action creator**. It will dispatch the action to the store.\r\n\r\n> <code>Reducers</code> - pure functions which define how application state changes, in response to that **action**. They receive <code>old state and action </code> from the store, reducers run calculations on how the new state should be based on old state and action and respond with the new state. This new state is sent to component and component will react to this new state\r\n\r\n\r\nReference:\r\n\r\nhttps://www.youtube.com/watch?v=93p3LxR9xfM \r\n\r\n\r\nIn order to implement the redux, we need to import a give script in the htmls file: \r\n\r\n```\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.5.2/redux.js\" type=\"text/javascript\"></script>\r\n```\r\n\r\nThis export single global variable called Redux.\r\n\r\n\r\nIn .js file we need to import createStore which will create the:\r\n\r\n```\r\nimport {createStore} from \"redux\";\r\n```\r\nStore hold current application state object and can dispatch actions. For store, we need to define the the <code>reducer</code> - which is a fucntion which handles how the app will react to current state and action and what will be then the new state based on those.\r\n```\r\nconst store= createStore(counter)\r\n```\r\n\r\nIn our case the reducer will be counter which will look like this. Notice how it receives state (with default value 0) and action:\r\n```\r\nconst counter = (state=0, action) => {\r\n  switch(action.type) {\r\n      case \"INCREMENT\": return state+1;\r\n      case \"DECREMENT\": return state-1;\r\n      default: return state;\r\n  }\r\n}\r\n```\r\n\r\nReduccer manages state updates, in our case it is a pure function counter.\r\n\r\nStore has 3 important methods in it:\r\n- getState\r\n- dispatch\r\n- subscribe\r\n\r\n<code>getState</code> retrieves current state from the redux store:\r\n```\r\nconsole.log(store.getState())\r\n```\r\nResult would be 0, because our default state is 0.\r\n\r\n<code>dispatch</code> lets you dispatch actions which changes the state\r\n```\r\nstore.dispatch({type: \"INCREMENT\"})\r\n```\r\nIf we console log the  state now, we will get a result of 1, becasue we dispactechd and action to increment the state:\r\n```\r\nstore.dispatch({type: \"INCREMENT\"})\r\nconsole.log(store.getState())\r\n```\r\n\r\n<code>subscribe</code> lets you register a callback that redux store will call anytime the action has been dispatched, so that you can update the ui of your application, to reflect the current application state.\r\n```\r\nstore.subscribe( () => {\r\n  document.body. innerText = store.getState();\r\n});\r\n\r\ndocument.addEventListener(\"click\", ()=> {\r\n  store.dospatch({type: \"INCREMENT\"})\r\n});\r\n```\r\nSo any time state changes, through subscribe, store will activate this function <code>document.body. innerText = store.getState();</code> and it will show the current state. ANd on every click, we will dispatch an action of \"INCREMENT\" type, which will change the current state, since there is new state, subscribe will change the text in body to the new state.\r\n\r\nReference: \r\n\r\nhttps://egghead.io/courses/getting-started-with-redux\r\n\r\nConnect is a redux function to connect a react component to a redux store. It provides its connected component with the pieces of the data it needs from the store, and the functions it can use to dispatch actions to the store. https://react-redux.js.org/api/connect\r\n\r\n","frontmatter":{"date":"2020-02-15","title":"Redux","category":"knowledge-base"},"fields":{"slug":"/Redux/"},"timeToRead":3,"html":"<p><img src=\"https://i.imgur.com/DzveM7R.png\" title=\"Photo by Traversy Media\n from https://www.youtube.com/watch?v=93p3LxR9xfM\"></p>\n<p>Redux is a global state manager. It is a predictable state container for JavaScript (apps.redux.js.org). Redux helps write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.</p>\n<p>We use Redux when we want to <code>share state</code> between components.</p>\n<p>Instead of individual <code>Component level state</code> you will have <code>Application level state</code>.</p>\n<p>Redux concept incorporates some teminology:</p>\n<blockquote>\n<p><code>View</code> - your components</p>\n</blockquote>\n<blockquote>\n<p><code>Store</code> - your state (it sends the state <strong>to</strong> components)</p>\n</blockquote>\n<blockquote>\n<p><code>Action creator</code> - one of components might be a button which when clicked will create an <strong>action</strong> - therefore it is called <strong>action creator</strong>. It will dispatch the action to the store.</p>\n</blockquote>\n<blockquote>\n<p><code>Reducers</code> - pure functions which define how application state changes, in response to that <strong>action</strong>. They receive <code>old state and action </code> from the store, reducers run calculations on how the new state should be based on old state and action and respond with the new state. This new state is sent to component and component will react to this new state</p>\n</blockquote>\n<p>Reference:</p>\n<p><a href=\"https://www.youtube.com/watch?v=93p3LxR9xfM\">https://www.youtube.com/watch?v=93p3LxR9xfM</a> </p>\n<p>In order to implement the redux, we need to import a give script in the htmls file: </p>\n<pre><code>&#x3C;script src=\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.5.2/redux.js\" type=\"text/javascript\">&#x3C;/script>\n</code></pre>\n<p>This export single global variable called Redux.</p>\n<p>In .js file we need to import createStore which will create the:</p>\n<pre><code>import {createStore} from \"redux\";\n</code></pre>\n<p>Store hold current application state object and can dispatch actions. For store, we need to define the the <code>reducer</code> - which is a fucntion which handles how the app will react to current state and action and what will be then the new state based on those.</p>\n<pre><code>const store= createStore(counter)\n</code></pre>\n<p>In our case the reducer will be counter which will look like this. Notice how it receives state (with default value 0) and action:</p>\n<pre><code>const counter = (state=0, action) => {\n  switch(action.type) {\n      case \"INCREMENT\": return state+1;\n      case \"DECREMENT\": return state-1;\n      default: return state;\n  }\n}\n</code></pre>\n<p>Reduccer manages state updates, in our case it is a pure function counter.</p>\n<p>Store has 3 important methods in it:</p>\n<ul>\n<li>getState</li>\n<li>dispatch</li>\n<li>subscribe</li>\n</ul>\n<p><code>getState</code> retrieves current state from the redux store:</p>\n<pre><code>console.log(store.getState())\n</code></pre>\n<p>Result would be 0, because our default state is 0.</p>\n<p><code>dispatch</code> lets you dispatch actions which changes the state</p>\n<pre><code>store.dispatch({type: \"INCREMENT\"})\n</code></pre>\n<p>If we console log the  state now, we will get a result of 1, becasue we dispactechd and action to increment the state:</p>\n<pre><code>store.dispatch({type: \"INCREMENT\"})\nconsole.log(store.getState())\n</code></pre>\n<p><code>subscribe</code> lets you register a callback that redux store will call anytime the action has been dispatched, so that you can update the ui of your application, to reflect the current application state.</p>\n<pre><code>store.subscribe( () => {\n  document.body. innerText = store.getState();\n});\n\ndocument.addEventListener(\"click\", ()=> {\n  store.dospatch({type: \"INCREMENT\"})\n});\n</code></pre>\n<p>So any time state changes, through subscribe, store will activate this function <code>document.body. innerText = store.getState();</code> and it will show the current state. ANd on every click, we will dispatch an action of \"INCREMENT\" type, which will change the current state, since there is new state, subscribe will change the text in body to the new state.</p>\n<p>Reference: </p>\n<p><a href=\"https://egghead.io/courses/getting-started-with-redux\">https://egghead.io/courses/getting-started-with-redux</a></p>\n<p>Connect is a redux function to connect a react component to a redux store. It provides its connected component with the pieces of the data it needs from the store, and the functions it can use to dispatch actions to the store. <a href=\"https://react-redux.js.org/api/connect\">https://react-redux.js.org/api/connect</a></p>"}},{"node":{"id":"8d3d5a29-1468-5e75-beb4-e0495f865c5d","excerpt":"There are generally two ways how to define a path from which we import elements to our files. Relative imports Absolute imports Imagine a…","rawMarkdownBody":"\r\n![](https://i.imgur.com/xVQKAQS.jpg \"Photo by Pixabay\")\r\n\r\nThere are generally two ways how to define a path from which we import elements to our files.\r\n\r\n> <code>Relative imports</code>\r\n\r\n> <code>Absolute imports</code>\r\n\r\n\r\nImagine a file structure like this:\r\n```\r\n- src\r\n   - components\r\n       - Button.js\r\n       - Header.js\r\n       - Form.js\r\n   - features\r\n       - Input.js\r\n```\r\n\r\nIn order to import Button.js to our Input.js, we could do the following:\r\n\r\n**A)** import using the <code>Relative</code> path. \r\n\r\nRelative path is always... well... relative :) to the file in which we currently are, in our case Input.js. In order to import to Button.js to our Input.js, we will need to go firstly one directory up <code>\"../\"</code> and then to the directory <code>features</code>\r\n```\r\nimport { Button } from \"../features/Button.js\"\r\n```\r\n\r\n**B)** import using the <code>Absolute</code> path. \r\n\r\nAbsolute path is always fixed from <code>src</code> folder.\r\n```\r\nimport { Button } from \"features/Button.js\"\r\n```\r\nIn order to make the absolute path work in the create-react-app we will need to go to <code>package.json</code> and in the scripts section, we will need to add <code>NODE_PATH=src</code> to each script which is executing the code:\r\n```\r\n\"scripts\": {\r\n\t\"start\":\"NODE_PATH=src react-scripts start\",\r\n    \"build\":\"NODE_PATH=src react-scripts build\",\r\n    \"test\":\"NODE_PATH=src react-scripts test --env=jsdom\",\r\n}\r\n```\r\n\r\n\r\nReference:\r\n\r\nhttps://www.youtube.com/watch?v=h5ekwDyjmW4\r\n","frontmatter":{"date":"2020-02-14","title":"Relative and Absolute imports","category":"knowledge-base"},"fields":{"slug":"/Relative_and_Absolute_Imports/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/xVQKAQS.jpg\" title=\"Photo by Pixabay\"></p>\n<p>There are generally two ways how to define a path from which we import elements to our files.</p>\n<blockquote>\n<p><code>Relative imports</code></p>\n</blockquote>\n<blockquote>\n<p><code>Absolute imports</code></p>\n</blockquote>\n<p>Imagine a file structure like this:</p>\n<pre><code>- src\n   - components\n       - Button.js\n       - Header.js\n       - Form.js\n   - features\n       - Input.js\n</code></pre>\n<p>In order to import Button.js to our Input.js, we could do the following:</p>\n<p><strong>A)</strong> import using the <code>Relative</code> path. </p>\n<p>Relative path is always... well... relative :) to the file in which we currently are, in our case Input.js. In order to import to Button.js to our Input.js, we will need to go firstly one directory up <code>\"../\"</code> and then to the directory <code>features</code></p>\n<pre><code>import { Button } from \"../features/Button.js\"\n</code></pre>\n<p><strong>B)</strong> import using the <code>Absolute</code> path. </p>\n<p>Absolute path is always fixed from <code>src</code> folder.</p>\n<pre><code>import { Button } from \"features/Button.js\"\n</code></pre>\n<p>In order to make the absolute path work in the create-react-app we will need to go to <code>package.json</code> and in the scripts section, we will need to add <code>NODE_PATH=src</code> to each script which is executing the code:</p>\n<pre><code>\"scripts\": {\n    \"start\":\"NODE_PATH=src react-scripts start\",\n    \"build\":\"NODE_PATH=src react-scripts build\",\n    \"test\":\"NODE_PATH=src react-scripts test --env=jsdom\",\n}\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://www.youtube.com/watch?v=h5ekwDyjmW4\">https://www.youtube.com/watch?v=h5ekwDyjmW4</a></p>"}},{"node":{"id":"be7b21b5-3b42-5f18-ab35-7f6bb482811d","excerpt":"Photo by Matej from Pexels Intro This article is basically my notes following an amazing Typescript course by Maximilian Schwarzmüller and…","rawMarkdownBody":"\r\n![](https://i.imgur.com/n6YTT3v.jpg \"Photo by Matej from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Matej from Pexels_</p>\r\n\r\n## Intro\r\n\r\nThis article is basically my notes following an amazing [Typescript course](https://www.udemy.com/course/understanding-typescript/) by Maximilian Schwarzmüller and [SkillerWhale](https://skillerwhale.com/) training notes which I would recommend to everyone who wants to learn Typescript.\r\n\r\n> Typescript is a <code>superset</code> to Javascript which means it is a programming languages which builds on top of Javascript. It adds new features and advantages to Javascript. It allows to write cleaner, less error-prone and more powerful code.\r\n\r\n> Big disadvantage of Typescript is that it cannot be executed by Javascript environments like a browser. But good news is that Typescript is also a tool - it is also a `compiler` which we can run on our Typescript files and convert them to vanilla Javascript. Typescript brings new features which are then compiled to vanilla Javascript <code>workarounds</code>. Such features might be easier to write in Typescript (or using nicer syntax) while it would be an aweful lot of complex code in Javascript.\r\n\r\n> Most importantly Typescript enables defining and using `types`, which forces us to be more explicit how our code works, it catches unexpected and unnecessary errors early. It also allows to use next-generation Javascript features which can be then compiled to be used on older browsers. It also adds non-Javascript features like `Interfaces` and `Generics` which cannot be comiled to JS (but they only help during development, they actually don't need to be compiled to vanilla JS). It adds meta-programming features like `Decorators`.\r\n\r\n> To install Typscript you need to have `node.js` installed:\r\n\r\n```\r\nnodejs.org/en/\r\n```\r\n\r\n> Node.js will also install NPM tool (Node Package Manager) which will allow us to install Typescript globally with <code>npm install</code> command\r\n\r\n> To install Typescript:\r\n\r\n```\r\nnpm install -g typescript\r\n\r\n```\r\n\r\n> Maybe you need to add <code>sudo</code> in front of it:\r\n\r\n```\r\nsudo npm install -g typescript\r\n\r\n```\r\n\r\n> Typescript file has `.ts` extension, for example:\r\n\r\n```\r\napp.ts\r\n```\r\n\r\n> To envoke TS compiler we will use command <code>tsc</code> and then file name which we want to compile:\r\n\r\n```\r\ntsc app.ts\r\n```\r\n\r\n## Setting up Typescript project\r\n\r\n![](https://i.imgur.com/2QEDSKd.jpg?1 \"Photo by Markus Spiske from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Markus Spiske from Pexels_</p>\r\n\r\n> We will start creating an html file with following content:\r\n\r\n```es6\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Typescript Course</title>\r\n    <script src=\"app.js\"  defer></script>\r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n```\r\n\r\n> Especially important is the script tag which will envoke our `app.js` file and will execute it:\r\n\r\n```\r\n<script src=\"app.js\"  defer></script>\r\n```\r\n\r\n> Then in the same folder add `app.ts` file\r\n\r\n```\r\ntouch app.ts\r\n```\r\n\r\n> Add some `console.log` in there:\r\n\r\n```\r\nconsole.log(\"Monsters for the win!\")\r\n```\r\n\r\n> Now let's try to compile our `.ts` file and see if we can console it in browser:\r\n\r\n```\r\ntsc app.ts\r\n```\r\n\r\n> New file will be produced: `app.js`\r\n\r\n> Now open the `index.html` in your broswer and <code>CTRL + i</code> to see the console. You should see the message you consoled.\r\n\r\n> Problem is however, for now we will need to always save code, compile it, and manually refresh the browser. But we can automate the browser refresh by installing a tool.\r\n\r\n> Go to your main project folder and initialize npm with `npm init`. It will create the `package.json` file. Hit enter for each question it asks you\r\n\r\n```\r\nnpm init\r\n```\r\n\r\n> Then we will install a `lite-server` package:\r\n\r\n```\r\nnpm install --save-dev lite-server\r\n```\r\n\r\n> Then go to `package.json` and add a `start` script after the `test` script (make sure you separate them with comma):\r\n\r\n```\r\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n\"start\": \"lite-server\"\r\n```\r\n\r\n> Above means that if I type in console <code>npm start</code> I will start a `lite server` which will serve `index.html` next to `package.json` at url:\r\n\r\n```\r\nhttp://localhost:3000\r\n\r\n```\r\n\r\n> This will automatically reload the page if a file changes in our folder. So for example if I open `app.ts`, change the message, CTRL+S to save changes and then <code>tsc app.ts</code> in terminal, then my browser page will automatically reload to reflect the changes.\r\n\r\n## Core types\r\n\r\n![](https://i.imgur.com/BBgWcbe.jpg \"Photo by Ludvig Hedenborg from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Ludvig Hedenborg from Pexels_</p>\r\n\r\nCore types are data types provided by Typescript/Javascript (but they are not exclusive, we can define our own).\r\n\r\nCore types are:\r\n\r\n- **number** - there is only one number type, there is no difference between integers or floats (8, 8.6, -10)\r\n- **string** - text (\"monster\") - which can be denoted by double or single quotes or backticks:\",' or `\r\n- **boolean** - true or false\r\n\r\n> Defining type in the code is done with a colon and word `number`, `string` or `boolean` etc:\r\n\r\n```\r\nconst add = (n1: number, n2: number) => (n1 + n2);\r\n```\r\n\r\n> If I passed string to the above function, I will get a compilation error.\r\n\r\n```\r\nadd('1', 2)\r\n```\r\n\r\n> Error will be seen when I compile the code with:\r\n\r\n```\r\ntsc app.ts\r\n```\r\n\r\n> Error will look like this:\r\n\r\n```\r\nerror TS2345: Argument of type '\"1\"' is not assignable to parameter of type 'number'.\r\n```\r\n\r\n> I will only get error during `compilation` (during development), not during runtime (because browsers do not have built-in Typescript support). It does not change Javascript to work differently. But it adds extra sanity check!\r\n\r\n> Important is also to notice that even though compilation threw an error, by default the file was `still` compiled and served (but we can setup a blocker for that later).\r\n\r\n> Javascript uses `dynamic types` which are resolved at runtime. Typescript uses `static types` which are set during development, allowing us to catch errors early (before they go to production).\r\n\r\n> `Type inference` means that Typescript tries to detect type of data.\r\n\r\n> If you initialize a `constant` with number `5`, it will be of inferred type 5 when you hover over the number1 in `.ts` file. It is because as for constants you cannot re-assign their value:\r\n\r\n```\r\nconst number1=5;\r\n// if you hover over number1 you will see: const number1: 5\r\n```\r\n\r\n> If you initialize a `variable` with number 5, it will be of inferred type `number` (as for variables you can re-assign their value):\r\n\r\n```\r\nlet number2=5;\r\nlet number2: number\r\n```\r\n\r\n> We can actually write our own type in both declarations:\r\n\r\n```\r\nconst number1: number = 5;\r\nlet number2: number = 5;\r\n```\r\n\r\n> But it is redundant and not encouraged (not best practice), as Typescript can infer the data type itself from how I initialize the constant or variable.\r\n\r\n> Best practice would be to define a type `if you do not assign value but only initialize a variable`:\r\n\r\n```\r\nlet x;\r\n```\r\n\r\n> Then it is actually encouraged to define type:\r\n\r\n```\r\nlet x: number;\r\n```\r\n\r\n## Object types\r\n\r\n![](https://i.imgur.com/dGwZPCQ.jpg \"Photo from mocah.org\")<p style=\"font-size: 12px; text-align: right\">_Photo from mocah.org_</p>\r\n\r\n> Typescript automatically infers object keys and complains when we access property which does not exist:\r\n\r\n```\r\nconst hero = {\r\n    name: \"Addania\",\r\n    title: \"The Horde Slayer\"\r\n}\r\nconsole.log(hero.nickname);\r\n```\r\n\r\n> We can explicitly define that hero will be an `object type`:\r\n\r\n```\r\nconst hero: {} = {\r\n    name: \"Addania\",\r\n    title: \"The Horde Slayer\"\r\n}\r\n```\r\n\r\nor like this:\r\n\r\n```\r\nconst hero: object = {\r\n    name: \"Addania\",\r\n    title: \"The Horde Slayer\"\r\n}\r\n```\r\n\r\n> Above only says to Typescript that hero will be an object. If we want to be explicit of which type is which key, we can do it like this:\r\n\r\n```\r\nconst hero: {\r\n    name: string;\r\n    title: string;\r\n} = {\r\n    name: \"Addania\",\r\n    title: \"The Horde Slayer\"\r\n}\r\n```\r\n\r\n> Notice the semi-colon `;` between curly brackets. Semicolon is a Typescript way to define types in an object. Javascript way of giving multiple keys in an object is using comma.\r\n\r\n> Anyway, it is not recommended to explicitly define types if Typescript can infer them.\r\n\r\n> We can also add types for nested objects. Example object:\r\n\r\n```\r\nconst hero = {\r\n  name: \"Addania\",\r\n  title: \"The Horde Slayer\",\r\n  mounts: [\"Spectral Steed\", \"Blue Proto-Drake\"],\r\n  skills: {\r\n    enchanting: 360,\r\n    jewelcrafting: 320\r\n  }\r\n}\r\n```\r\n\r\n> This is how types would be defined:\r\n\r\n```\r\nconst hero:{\r\n    name: string;\r\n    title: string;\r\n    mounts: string[];\r\n    skills: {\r\n        enchanting: number;\r\n        jewelcrafting: number;\r\n    };\r\n}\r\n = {\r\n  name: \"Addania\",\r\n  title: \"The Horde Slayer\",\r\n  mounts: [\"Spectral Steed\", \"Blue Proto-Drake\"],\r\n  skills: {\r\n    enchanting: 360,\r\n    jewelcrafting: 320\r\n  }\r\n}\r\n```\r\n\r\n## More about object type\r\n\r\n**Object Types**\r\n\r\n> TypeScript has a general object type that corresponds to JavaScript's object type. This type includes all non-primitive values: arrays, dates, sets, maps, functions (callable objects), as well as objects in the narrower sense (things that can be written out as an object literal).\r\n\r\n> Since the object type is so general, you are unlikely to ever want to use it in practice. In this session you will learn how to write and work with types for objects in the narrower sense.\r\n\r\n> In the simplest case, object types are written out exactly like object literals, but instead of assigning values to properties, you assign types:\r\n\r\n```\r\ntype Message = { text: string, urgent: boolean }\r\nlet welcome: Message = { text: 'Welcome!', urgent: false }\r\n```\r\n\r\n> As with all types, you can also use object types directly, without first assigning them to a type alias:\r\n\r\n```\r\nlet welcome: { text: string, urgent: boolean } = { text: 'Welcome!', urgent: false }\r\n```\r\n\r\n> You can also leave out any explicit type annotations and let TypeScript infer the object type for you:\r\n\r\n```\r\n// The inferred type of welcome is { text: string, urgent: boolean }\r\nlet welcome = { text: 'Welcome!', urgent: false }\r\n```\r\n\r\n> But it is good practice to use explicit type annotations everywhere. And with objects, more than with primitives, the inferred type will often not be what you want. For example, if you want your object to have optional or read-only properties (discussed later in this session), you will have to tell the compiler with an explicit annotation.\r\n\r\n> An object type can include properties of any other type. It can also have many nested levels, in a similar way to defining a complex object literal. For example:\r\n\r\n```\r\ntype Message = { text: string, urgent: boolean }\r\ntype MessageSender = {\r\n messages: Message[],\r\n scheduledFor: Date,\r\n format: 'email'|'inapp'|'sms',\r\n from: {\r\n   email: string,\r\n   name: {\r\n     first: string,\r\n     last: string,\r\n   },\r\n },\r\n}\r\nlet messages: Message[] = [ /** ... */ ]\r\nlet messageSender: MessageSender = {\r\n messages: messages,\r\n scheduledFor: new Date(2018, 5, 21),\r\n format: 'email',\r\n from: {\r\n   email: 'orcaniser@skillerwhale.com',\r\n   name: { first: 'Eelton', last: 'John' },\r\n },\r\n}\r\n```\r\n\r\n**Type Compatibility (Structural Typing)**\r\n\r\n> In TypeScript, one object type A is compatible with another object type B when every property in B has a matching property in A. A matching property is a property with the same key and a compatible type - where compatibility is checked recursively in the case of properties that are themselves objects.\r\n\r\n> Object type A is compatible with object type B even if A has additional properties not present in B (but then B will not be compatible with A).\r\n\r\n```\r\ntype Message = { text: string, urgent: boolean }\r\ntype Todo = { text: string, urgent: true | false }\r\ntype DetailedMessage = { text: string, urgent: boolean, detail: string }\r\n```\r\n\r\n> Here, the types Message and Todo are both compatible with each other. (Note the types boolean and true | false are mutually compatible, since the sets of values described by these types are identical.)\r\n\r\n> The type DetailedMessage is also compatible with both Message and Todo, but Message and Todo are not compatible with DetailedMessage, because they are missing the additional detail: string property.\r\n\r\n> Whenever a value of one type is required by the compiler, a value of a compatible type is allowed. For example, if you have a function that requires a parameter of type Message, you can pass it an argument of type Todo or DetailedMessage without raising an error:\r\n\r\n```\r\nfunction sendMessage (message: Message) {\r\n // do some messaging\r\n}\r\nlet message: Message = {\r\n text: 'Your order has been shipped.',\r\n urgent: false\r\n}\r\nlet todo: Todo = {\r\n text: 'Ship order 00046728',\r\n urgent: true\r\n}\r\nlet detailedMessage: DetailedMessage = {\r\n text: 'You have a new message.',\r\n urgent: false,\r\n detail: 'Your order is delayed due to ...'\r\n}\r\nsendMessage(message) // ok because message is a Message\r\nsendMessage(todo) // ok because Todo is compatible with Message\r\nsendMessage(reminder) // ok because DetailedMessage is compatible with Message\r\n```\r\n\r\n> This is because TypeScript implements a structural typing system, as opposed to a nominal typing system.\r\n\r\n> In a structural typing system, one type is considered compatible with another when it has the same (or compatible) members. Compatibility in nominal typing systems is stricter: whenever a value of one type is required, only a value of that named type - or of a subtype explicitly declared as such - is allowed.\r\n\r\n> Other example:\r\n\r\n```\r\ntype Message = { text: string; urgent: boolean };\r\ntype Text = { text: string };\r\nconst welcome: Message = { text: \"xxx\", urgent: true };\r\nconst text: Text = { text: \"xxx\" };\r\nconst printing = (a: Text) => {\r\n console.log(a.text);\r\n};\r\nprinting(text);\r\nprinting(welcome); // Message is compatible with Text\r\nconst printing2 = (a: Message) => {\r\n console.log(a.text);\r\n};\r\nprinting2(text); // text is not compatible with Message\r\nprinting2(welcome);\r\n```\r\n\r\n**Optional Properties**\r\n\r\n> Sometimes you will want to limit the properties that your objects can have, but without insisting that they have all of these properties all of the time. In principle, you could do this by typing some properties as unions with undefined.\r\n\r\n```\r\ntype Message = { text: string, urgent: boolean, detail: string | undefined }\r\nlet messageWithoutDetail: Message = {\r\n text: 'Your order has been shipped.',\r\n urgent: false,\r\n detail: undefined\r\n}\r\nlet messageWithDetail: Message = {\r\n text: 'You have a new message.',\r\n urgent: false,\r\n detail: 'Your order is delayed due to ...'\r\n}\r\n```\r\n\r\n> This approach can be tedious, however, especially if you want to have several potentially undefined properties. In order to satisfy the TypeScript compiler, you have to explicitly give your messageWithoutDetail object a detail property with a value of undefined. But in JavaScript, it would be possible to access a detail property on this object (which would have the value undefined) without explicitly setting it.\r\n\r\n> The explicit detail assignment is needed by the compiler, but is not needed by the JavaScript run-time engine.\r\n\r\n> To simplify your code in these cases, TypeScript includes a ? modifier to indicate that a property is optional. This implicitly makes the type of that property a union with undefined, but also allows you to leave the property out altogether when defining objects of the relevant type.\r\n\r\n```\r\ntype Message = { text: string, urgent: boolean, detail?: string }\r\nlet messageWithoutDetail: Message = {\r\n text: 'Your order has been shipped.',\r\n urgent: false\r\n}\r\nlet messageWithDetail: Message = {\r\n text: 'You have a new message.',\r\n urgent: false,\r\n detail: 'Your order is delayed due to ...'\r\n}\r\n```\r\n\r\n> Other examples of optional properties:\r\n\r\n```\r\ntype Flat = { location: string; area: number; price: number | undefined };\r\ntype Flat2 = { location: string; area: number; price?: number };\r\n\r\nconst newHome: Flat = { location: \"Prag\", area: 60 }; // error, price needs to be provided, but can have value of undefined\r\nconst newHome2: Flat = { location: \"Prag\", area: 60, price: undefined }; // ok\r\nconst newHome3: Flat = { location: \"Prag\", area: 60, price: 700 }; // ok\r\nconst homeSweetHome: Flat2 = { location: \"Prag\", area: 60 }; // ok, because price is optional and does not need to be defined\r\nconst homeSweetHome2: Flat2 = { location: \"Prag\", area: 60, price: 700 }; // ok\r\nconst homeSweetHome3: Flat2 = { location: \"Prag\", area: 60, price: undefined }; // ok, because price can be undefined\r\n```\r\n\r\n> You can use control flow and type narrowing to handle optional properties, by first checking whether the property is undefined.\r\n\r\n```\r\nlet message: Message = { /* ... */ }\r\nlet details: string[] = []\r\n// Error: Argument of type 'string | undefined' is not assignable to parameter of type 'string'\r\ndetails.push(message.details)\r\nif (message.detail !== undefined) {\r\n // OK: message.details has been narrowed to type 'string'\r\n details.push(message.detail)\r\n}\r\n```\r\n\r\n> Another example:\r\n\r\n```\r\ntype Message2 = { text: string; urgent: boolean; detail?: string };\r\nlet details: string[] = [];\r\nconst message: Message2 = { text: \"Hi\", urgent: false, detail: \"blue\" };\r\ndetails.push(message.detail); // error because detail can be undefined and in details variable we want to only have strings\r\n```\r\n\r\n**Excess Property Checks**\r\n\r\n> TypeScript's structural typing system, where types are considered compatible even if they have additional properties, gives you a lot of flexibility when working with object types.\r\n> Optional properties take advantage of a flexible feature of JavaScript - that undefined properties can always be accessed at run-time (and have the value undefined) - to save you from writing extra lines of code just to satisfy the compiler.\r\n\r\n> Combining these two features of TypeScript, however, creates a hole in the compiler that bugs could potentially fall through. Consider the following code:\r\n\r\n```\r\ntype Message = { text: string, urgent: boolean, detail?: string }\r\nconst message: Message = {\r\n text: 'Welcome!',\r\n urgent: false,\r\n deetail: 'Your account has been created.'\r\n}\r\n```\r\n\r\n> Here the message variable has a property called deetail instead of a property called detail. This is almost certainly a typo, and a bug in the code.\r\n\r\n> Another example:\r\n\r\n```\r\ntype Message3 = { text: string; urgent: boolean; detail?: string };\r\nconst message3 = {\r\n text: \"Welcome!\",\r\n urgent: false,\r\n deetail: \"Your account has been created.\",\r\n};\r\nconst printing3 = (a: Message3) => {\r\n console.log(a.text);\r\n};\r\nprinting3(message3); //compiler considers this as ok, but it is a hole in the system! message3 is compatible with Message3\r\n```\r\n\r\n> But given the rules of structural typing and optional properties alone, this would not be an error: an object does not have to have the optional detail property to count as a Message, and it can have any additional properties - deetail or anything else - and still be compatible with the Message type.\r\n\r\n> In order to catch bugs like these, TypeScript imposes excess property checks in certain situations on top of its core structural typing system. Where excess property checks apply, one object type will be considered compatible with another when it has all the same properties as the other type and no additional properties.\r\n\r\n> There are two situations where TypeScript uses excess property checks:\r\n> When an object literal is assigned to a variable with an explicit type (as in the example above with Message).\r\n> When an object literal is passed directly as a function argument (as in the example below).\r\n\r\n> Because of this, the buggy code above in fact does generate an error, as does the similarly buggy code in the function call below:\r\n\r\n```\r\ntype Message = { text: string, urgent: boolean, detail?: string }\r\nfunction sendMessage (message: Message) {\r\n // do message sending\r\n}\r\n\r\nsendMessage({\r\n text: 'Welcome!',\r\n urgent: false,\r\n // Error: Object literal may only specify known properties, and 'deetail'\r\n // does not exist in type 'Message'. Did you mean to write 'detail'?\r\n deetail: 'Your account has been created.'\r\n})\r\n```\r\n\r\n> Recap on when excess properties apply:\r\n\r\n> Excess properties check will apply and detect our error if we explicitly assign a type:\r\n\r\n```\r\ntype Message4 = { text: string; urgent: boolean; detail?: string };\r\nconst message4: Message4 = {\r\n text: \"Welcome!\",\r\n urgent: false,\r\n deetail: \"Your account has been created.\", // we will get an error here now! excess properties are not allowed\r\n};\r\nconst printing4 = (a: Message3) => {\r\n console.log(a.text);\r\n};\r\nprinting4(message4);\r\n```\r\n\r\n> Another way how excess properties check will apply and detect our error if we pass object literal directly to our function!\r\n\r\n```\r\ntype Message5 = { text: string; urgent: boolean; detail?: string };\r\nconst printing5 = (a: Message5) => {\r\n console.log(a.text);\r\n};\r\n\r\nprinting5({\r\n text: \"Welcome!\",\r\n urgent: false,\r\n deetail: \"Your account has been created.\", // we will get an error here now! excess properties are not allowed\r\n});\r\n```\r\n\r\n> In some cases, excess property checks may result in a compiler error that doesn't correspond to a bug in your code - because you really do intend the object in question to have an additional property not specified in its type. In these cases, the simplest and usually best solution is just to include the additional property as an explicit optional property in the type definition.\r\n\r\n**Read-Only Properties**\r\n\r\n> You can indicate that a property cannot be reassigned using the readonly property modifier. TypeScript will indicate an error if a line of code reassigns the value of a readonly property after it has been set.\r\n> You prepend the readonly modifier to a property that you want to be read-only.\r\n\r\n```\r\ntype Message = {\r\n readonly text: string,\r\n urgent: boolean\r\n}\r\nlet welcome: Message = {\r\n text: 'Welcome',\r\n urgent: false\r\n}\r\n// Error: Cannot assign to 'text' because it is a read-only property\r\nwelcome.text = 'Welcome!!'\r\nfunction print (message: Message) {\r\n // Error: Cannot assign to 'text' because it is a read-only property\r\n message.text = `** ${message.text} **`\r\n console.log(message)\r\n}\r\n```\r\n\r\n> Another example:\r\n\r\n```\r\ntype Message6 = {\r\n  readonly text: string;\r\n  urgent: boolean;\r\n};\r\nlet welcome6: Message6 = {\r\n  text: \"Welcome\",\r\n  urgent: false,\r\n};\r\nwelcome6.text = \"Bem vindo\"; // error when trying to assign a new value to the text\r\n```\r\n\r\n> readonly can be particularly useful for function parameter types, providing a degree of assurance that the function will not modify the values that are passed to it.\r\n> Note that specifying a property as readonly only prevents reassignments to that property, however. It does not prevent the value itself from being changed if it is mutable. For example, an array assigned to a readonly property can still have new items added to it.\r\n\r\n```\r\ntype Message7 = {\r\n readonly clients: Array<string>;\r\n};\r\nlet welcome7: Message7 = {\r\n clients: [\"A\", \"B\"],\r\n};\r\nwelcome7.clients = [\"A\", \"B\", \"C\"]; // assigning new value to clients is not allowed\r\nwelcome7.clients.push(\"C\"); // but mutating array is still allowed\r\n```\r\n\r\n**Typing Methods in Object Types**\r\n\r\n> Object types can include method types as well as data types.\r\n> To type a method on an object you use a function type expression. Function type expressions mirror the syntax of arrow functions, with a typed list of parameters in brackets, and a return type after the => arrow. For example:\r\n\r\n```\r\ntype SendMessageFunction = (messages: Message[], saveLocalCopy: boolean) => string\r\n```\r\n\r\n> Another example:\r\n\r\n```\r\ntype Print = (a: Message5) => void\r\nconst printing8: Print = (a) => {\r\n console.log(a.text);\r\n};\r\n\r\n```\r\n\r\nYou can use a function type expression as an object property type like any other. Objects annotated with that type will then need to implement a method matching that function signature.\r\n\r\n```\r\ntype MessageSender = {\r\n sendAll: (messages: Message[], saveLocalCopy: boolean) => string\r\n}\r\nlet sender: MessageSender = {\r\n sendAll: (messages: Message[], saveLocalCopy: boolean) => {\r\n   // do some sending\r\n   return 'OK'\r\n}\r\nsender.sendAll(someMessages)\r\n\r\n```\r\n\r\n> Note that the parameter names in the implementation of a function or method do not have to match the parameter names in the type definition. However, the convention is to use the same names unless you have a good reason not to.\r\n\r\n## Array type\r\n\r\n<img src=\"https://i.imgur.com/PqcRvxa.jpg\" style=\"width: 800px\"><p style=\"font-size: 12px; text-align: right; width: 100%\">_Photo from wowhead.com_</p>\r\n\r\n> Let's imagine we have an array of all our very precious pets:\r\n\r\n```\r\nlet pets = [\"Wind Rider Cub\", \"Phoenix Hatchling\"]\r\n```\r\n\r\n> To define type as array of strings we say:\r\n\r\n```\r\nlet pets: string[];\r\n```\r\n\r\n> or alternatively:\r\n\r\n```\r\nlet pets: Array<string>;\r\n```\r\n\r\n> To define type as array of numbers we say:\r\n\r\n```\r\nlet hordeKillsPerDay: number[];\r\n```\r\n\r\n> or alternatively:\r\n\r\n```\r\nlet hordeKillsPerDay: Array<number>;\r\n```\r\n\r\n> To define type as mixed array (of numbers or strings) we say:\r\n\r\n```\r\nlet mixedAchievements: any[];\r\n```\r\n\r\n> or alternatively:\r\n\r\n```\r\nlet mixedAchievements: Array<any>;\r\n```\r\n\r\n> You can also be more specific:\r\n\r\n```\r\nlet mixedAchievements: (string | number)[];\r\n```\r\n\r\n> or alternatively:\r\n\r\n```\r\nlet mixedAchievements: Array<string | number>;\r\n```\r\n\r\n**More on Array types**\r\n\r\n> Arrays in `JavaScript` can have elements of different types. This is usually undesirable, and is a potential source of bugs. For example, when mapping or filtering an array, you want to assume all the elements have the same type.\r\n\r\n> Arrays in `TypeScript`, on the other hand, can only have elements of the same type.\r\n\r\n> There are two syntax options for defining an array. Because arrays are so common, TypeScript provides a short way to define array types, using square brackets:\r\n\r\n```\r\nconst strings: string[] = ['once', 'upon', 'a', 'time']\r\n```\r\n\r\n> You can also use the Array generic type. Generic types are like functions for types, which take their arguments in angle brackets:\r\n\r\n```\r\nconst strings: Array<string> = ['once', 'upon', 'a', 'time']\r\n```\r\n\r\n> TypeScript will raise a type error if you try to add an element of the wrong type to an array. The benefit of this restriction is that it can infer the type of every element in your array, and will raise an error if you try to do anything with an array element that is not compatible with its type.\r\n\r\n> You can loosen Typescript's array type restriction in a controlled way by creating an `array of a union type`. For example, arrays with the following type can contain a mixture of strings and numbers:\r\n\r\n```\r\nconst arrayWithStringsAndNumbers: (string | number)[] = [1, 'two', 3]\r\n```\r\n\r\n> Be careful, the `|` union type operator takes precedence over the `[]` array type operator, so the brackets are necessary to create an array type of a union type. Dropping the brackets will give you a union type where one of the subtypes is an array:\r\n\r\n```\r\nlet stringORArrayOfNumbers: string | number[] = 'just a string'\r\n```\r\n\r\n> TypeScript's restriction on arrays is generally a good thing, and you are unlikely to need to use union types in this way to loosen that restriction. You are more likely to use unions of literal types to tighten the restriction even further. For example:\r\n\r\n```\r\ntype ErrorCode = 400 | 401 | 403\r\nconst serverResponsesFromLast24Hours: number[] = [\r\n  /* array of all server responses as numbers */\r\n]\r\nconst errorCodesFromLast24Hours: ErrorCode[] = []\r\nfor (const response of serverResponsesFromLast24Hours) {\r\nif (response === 400 || response === 401 || response === 403) {\r\nerrorCodesFromLast24Hours.push(response)\r\n  }\r\n}\r\n// Error: Argument of type '200' is not assignable to parameter of type 'ErrorCode'\r\nerrorCodesFromLast24Hours.push(200)\r\n```\r\n\r\n> The more precise you can be about the types of values that can go into your arrays, the more helpful the compiler can be in ensuring that those values are used appropriately throughout your code.\r\n\r\n> If you do not explicitly annotate your array variables, TypeScript will infer the type based on the types of the elements in the initial assignment. There are called `Inferred Array Types`.\r\n\r\n```\r\nconst x = [1, 2, 3] // x has the inferred type 'number[]'\r\nconst y = ['one', 'two', 'three'] // y has the inferred type 'string[]'\r\nconst z = [1, true, 'three'] // z has the inferred type '(string | number | boolean)[]'\r\n```\r\n\r\n> The inferred type will always be a `general` type, like number or string, and not a `literal` type, like 1 or 'three'. If the elements in the initial assignment have different types, the inferred type of the array will be a union of all those types.\r\n\r\n> If your initial assignment is an empty array, TypeScript will look at how you use the array to infer the type.\r\n\r\n```\r\nconst x = [] // x initially has the inferred type 'any[]'\r\nx.push(1) // x now has the inferred type 'number[]'\r\nx.push('two') // x now has the inferred type '(number | string)[]'\r\n```\r\n\r\n> The inferred type will adapt based on the values you add to the array, so when you lookup elements from the array subsequently you will get a suitably cautious union type. But there will be nothing to stop you adding more values of different types.\r\n\r\n> For this reason, it is good practice to explicitly annotate any array that is initialised as an empty array.\r\n\r\n```\r\nconst x: Array< string | number > = []\r\n```\r\n\r\n**Readonly Arrays**\r\n\r\n> Arrays in JavaScript are `mutable`: you can add and remove elements using the push, pop, shift, and unshift methods, reassign the elements at any index, and modify the whole array with methods like sort:\r\n\r\n```\r\nconst numbers = [2, 4]\r\nnumbers.push(1) // [2, 4, 1]\r\nnumbers[1] = 3 // [2, 3, 1]\r\nnumbers.sort() // [1, 2, 3]\r\n```\r\n\r\n> As seen above, even if we declare an array as a `const`, we still can `mutate` it. Const only prevents up from re-assigning the entire array like so:\r\n\r\n```\r\nconst numbers = [2, 4]\r\nnumbers = [1,2,3] // not possible\r\n```\r\n\r\n> But we can still re-assign individual elements of an array:\r\n\r\n```\r\nconst numbers = [2, 4]\r\nnumbers[1] = 3 // [2, 3]\r\n```\r\n\r\n> TypeScript arrays are also `mutable` by default, but you can create an `immutable` array using the `ReadonlyArray` generic type or the `readonly` type modifier. TypeScript will raise a compiler error if you attempt to alter a readonly array.\r\n\r\n```\r\nconst numbers: readonly number[] = [2, 4] // or: const numbers: ReadonlyArray<number> = [2, 4]\r\nnumbers.push(1) // Error: Property 'push' does not exist on type 'readonly number[]'.\r\nnumbers[1] = 3 // Error: Index signature in type 'readonly number[]' only permits reading.\r\nnumbers.sort() // Error: Property 'sort' does not exist on type 'readonly number[]'.\r\n```\r\n\r\n> Note that this is not the same as the difference between `let` and `const` arrays. You cannot reassign a different array to a `const` variable, but you can still `mutate` the array itself. On the other hand, you cannot `mutate` a readonly array, but if it is assigned to a `let` variable, you can still reassign a different array to that variable.\r\n\r\n> Summary or arrays re-assigning and mutability:\r\n\r\n```\r\nlet numbers: ReadonlyArray<number> = [1, 2];\r\nnumbers = [3, 4]; // OK: re-assigning whole array is ok because it is declared as let\r\nnumbers[1] = 0; // Error: numbers is readonly therefore its individual elements cannot be re-assigned\r\n\r\nconst pets: ReadonlyArray<string> = [\"pheonix hatchling\", \"bear cub\"];\r\npets = [\"pebble\"]; // Error: array declared as const cannot be re-assigned\r\npets[0] = \"personal world destroyer\"; // Error: pets is readonly therefore its individual elements cannot be re-assigned\r\n\r\nconst mounts: Array<string> = [\"spectral tiger\", \"drake of the west wind\"];\r\nmounts = [\"fire hawk\", \"flameward hippogryph\"]; // Error: array declared as const cannot be re-assigned\r\nmounts[1] = \"heart of the aspects\"; // OK: individual elements of const srray can still be re-assigned\r\n\r\nlet titles: Array<string> = [\"Savior of Azeroth\", \"Dragonslayer\"];\r\ntitles = [\"the Flamebreaker\", \"Defender of a Shattered World\"]; // OK: array declared as let can be re-assigned\r\ntitles[1] = \"Blessed Defender of Nordrassil\"; // OK: individual elements of let array can still be re-assigned\r\n```\r\n\r\n> Please note, that `readonly` is only on the surface and refers to the level on which is it declared. Imagine we have array of objects:\r\n\r\n```\r\nconst achievements: ReadonlyArray<{ name: string; date: number }> = [\r\n  { name: \"Bucket List\", date: 1644150502 },\r\n  { name: \"Chromatic Champion\", date: 1644150502 },\r\n];\r\n\r\nachievements[0] = {name: \"Taste the Rainbow!\", date: 1644150502} // Error: you cant re-assign given element because achievements is readonly\r\nachievements[0].name = \"Taste the Rainbow\" // OK: readonly is only on the surface level of array elements, but if we dig deeper we can change values\r\n```\r\n\r\n> In above example we can see that we cant assign a new object to `achievements[0]` but we can change its name or date: `achievements[0].name`\r\n\r\n> If we do not even want to be able to change the name or date of those objects, then we need to add readonly further down the tree:\r\n\r\n```\r\nconst achievements: ReadonlyArray<{ readonly name: string; readonly date: number }> = [\r\n  { name: \"Bucket List\", date: 1644150502 },\r\n  { name: \"Chromatic Champion\", date: 1644150502 },\r\n];\r\n\r\nachievements[0] = {name: \"Taste the Rainbow!\", date: 1644150502} // Error: you cant re-assign given element because achievements is readonly\r\nachievements[0].name = \"Taste the Rainbow\" // Error: name is now also readonly property of the object\r\n```\r\n\r\n> Readonly modifier can be used on arrays, objects or properties of object.\r\n\r\n> We can also make an entire object readonly:\r\n\r\n```\r\ntype Item = Readonly<{item: string, amount: number}>\r\n```\r\n\r\n**String Indexed Access**\r\n\r\n> JavaScript `arrays` are special kinds of `objects`.\r\n\r\n```\r\nconst iAmArray = ['elementOnIndexZero', 'elementOnIndexOne', 'elementOnIndexTwo']\r\niAmArray[0] // 'elementOnIndexZero'\r\n```\r\n\r\n> Under the hood in Javascript, the array looks something like this:\r\n\r\n```\r\niAmArray = {\r\n  '0': 'elementOnIndexZero',\r\n  '1': 'elementOnIndexOne',\r\n  '2': 'elementOnIndexTwo',\r\n}\r\niAmArray[0] // 'elementOnIndexZero'\r\n```\r\n\r\n> You can access indexed elements of an array using a string as well as a number.\r\n\r\n```\r\nconst x = [2, 4, 6, 8]\r\nx[0] === x['0'] // true\r\n```\r\n\r\n> TypeScript attempts to accommodate this quirk by allowing `string-keyed property access` when it can be certain that the string can successfully be parsed as a number.\r\n\r\n> In practice, this means when the string is a string representation of a number that is either passed as a literal value or a variable with a literal type.\r\n\r\n```\r\nconst x: number[] = [2, 4, 6, 8]\r\nlet literalVariable: '0' = '0'\r\nlet stringVariable: string = '0'\r\nx['0'] // ok\r\nx[literalVariable] // ok\r\nx[stringVariable] // Error: Element implicitly has an 'any' type because index expression is not of type 'number'.\r\n```\r\n\r\n> The last case here raises an error because there is no type guarantee that `stringVariable` will hold a string representation of a number.\r\n\r\n> To get all of this to work, TypeScript allows you to access an array property using any string-keyed property, but implicitly gives the resulting element the any type if it cannot be parsed as a number. If you have the `noImplicitAny` compiler flag disabled, therefore, the last line in the example above will not raise an error.\r\n\r\n> More usefully, TypeScript will also allow you to access string-keyed properties of arrays when it can be certain that these correspond to genuine properties or methods on the array.\r\n\r\n```\r\nconst x: number[] = [2, 4, 6, 8]\r\n\r\nconst arrayPropertyKey = 'length'\r\n\r\nx['length'] // ok: equivalent to `x.length`\r\nx[arrayPropertyKey] // ok: also equivalent to `x.length`\r\nx['sort'] // ok: equivalent to x.sort, i.e. retrieves the fill method on x (without calling it)\r\nx['sort']() // ok: equivalent to x.sort(), i.e. retrieves the fill method on x (and calls it)\r\n```\r\n\r\n**Unchecked Indexed Access**\r\n\r\n> Because the elements of TypeScript arrays all have the same type, the compiler \"knows\" the type of each element. But there is a catch.\r\n\r\n```\r\nconst totals: number[] = [1, 2, 3]\r\n\r\nfor (const total of totals) {\r\n// total has type 'number' :)\r\n}\r\n\r\n// firstTotal has type 'number' :/\r\nconst firstTotal = totals[0]\r\n\r\n// fourthTotal has type 'number' :(\r\nconst fourthTotal = totals[3]\r\n```\r\n\r\n> The compiler gives fourthTotal an inferred type of number, but in fact totals[3] is undefined. This is called `unchecked index access`: the compiler doesn't force you to check whether the element at any given index exists.\r\n\r\n> If you are worried about this possibility, you can enable the `noUncheckedIndexedAccess` compiler flag. With this flag enabled, the type of elements accessed using an index will be a union type with undefined:\r\n\r\n```\r\nconst totals: number[] = [1, 2, 3]\r\n\r\nfor (const total of totals) {\r\n// total has type 'number' :)\r\n}\r\n\r\n// firstTotal has type 'number | undefined' :/\r\nconst firstTotal = totals[0]\r\n\r\n// fourthTotal has type 'number | undefined' :)\r\nconst fourthTotal = totals[3]\r\n```\r\n\r\n> Unchecked index access is a way in which TypeScript is not completely type safe. But because the errors that it lets through are rare, and enabling `noUncheckedIndexedAccess` forces you to write extra manual checks every time you need to access an element, this option is disabled by default.\r\n\r\n## Tuples\r\n\r\n![](https://i.imgur.com/OTOEqWp.jpg \"Photo by Gela Del Rosario from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Gela Del Rosario from Pexels_</p>\r\n\r\n> Typescript allows us to add a new type: <code>Tuple</code>. They are available in other programming languages but not in JS. Tuples are fixed length arrays. Example tuple:\r\n\r\n```\r\nconst profession= [1, \"cooking\"]\r\n```\r\n\r\n> By inference Typescript will think that profession is an array of either a number or string.\r\n\r\n```\r\nprofession: (number | string)[]\r\n```\r\n\r\n> Typescript will allow to add elements to the array or re-assign values:\r\n\r\n```\r\nprofession.push(\"first aid\");\r\nprofession[1]=2;\r\n```\r\n\r\n> So in this scenario, inference does not work the way we want it to work. How to say to Typescript that we can only have exactly 2 elements? Tuple is perfect for this.\r\n\r\n```\r\nconst role: [number, string] = [1, \"cooking\"]\r\n```\r\n\r\n> This tells Typescript I want a special array which should have exactly two elements out of which first one is number and second one is string. Please note, `.push` will still work as push is exception and works on Tuples!\r\n\r\n## Enum type\r\n\r\n> Enum is another data type which exists in Typescript and other languages but does not exist in JS. Enums are global variables that can have only limited number of options. For example for the role, we can have options: guildMaster, officer, guildee. These in code should be represented as numbers (starting from 0) but we also want to have human readable labels on top of them.\r\n\r\n> Imagine we then need to work with those values in the code. We could of course just have those as normal string values (not enums) but then we would need to remember if it was `guild-master` or `guild_master` or `guildMaster`.. Which can be cumbersome.\r\n\r\n> Another possibility would be to define 3 different global constants where each of role name would be a constant and hold a number:\r\n\r\n```\r\nconst guildMaster = 0;\r\nconst officer = 1;\r\nconst guildee = 2;\r\n```\r\n\r\n> And then we can work variable names in code:\r\n\r\n```\r\nif (officer){ console.log(\"Hi Officer!\")}\r\n```\r\n\r\n> But then again I needed 3 global variables.\r\n\r\n> Enums can help us in such cases.Enum is a `custom type` and are written in upper-case.\r\n\r\n> How to create Enum:\r\n\r\n```\r\nenum Role { guildMaster, officer, guildee};\r\n```\r\n\r\n> Behind the scenes `guild-master` receives number 0 (poor life of guild masters), `officer` gets number 1 and `guildee` gets number 2.\r\n\r\n> We can also start from any custom number:\r\n\r\n```\r\nenum Role { guildMaster = 5, officer, guildee};\r\n```\r\n\r\n> The rest of them will pick up and have 6 for officer and 7 for guildee.\r\n\r\n> Or we assign custom numbers to each of them:\r\n\r\n```\r\nenum Role { guildMaster = 5, officer = 100, guildee = 200};\r\n```\r\n\r\n> We are also not restricted to use numbers, we can use text:\r\n\r\n```\r\nenum Role { guildMaster = \"THE MASTER\", officer = 100, guildee = 200};\r\n```\r\n\r\n> Then we can access this values just like on an object:\r\n\r\n```\r\nenum Role { guildMaster = \"THE MASTER\", officer = 1, guildee = 0 }\r\n\r\nconst hero = {\r\n  name: \"Addania\",\r\n  title: \"The Horde Slayer\",\r\n  mounts: [\"Ashes of Al'ar\", \"Spectral Steed\", \"Blue Proto-Drake\"],\r\n  skills: {\r\n    enchanting: 360,\r\n    jewelcrafting: 320\r\n  },\r\n  role: Role.guildMaster\r\n}\r\n```\r\n\r\n> Now you are maybe asking how did I define the enum? At least for me this worked:\r\n\r\n```\r\nenum Role { guildMaster = \"THE MASTER\", officer = 1, guildee = 0 }\r\n\r\nconst hero: {\r\n    name: string;\r\n    title: string;\r\n    mounts: string[];\r\n    skills: {\r\n        enchanting: number;\r\n        jewelcrafting: number;\r\n    };\r\n    role: Role;\r\n\r\n} = {\r\n    name: \"Addania\",\r\n    title: \"The Horde Slayer\",\r\n    mounts: [\"Ashes of Al'ar\", \"Spectral Steed\", \"Blue Proto-Drake\"],\r\n    skills: {\r\n        enchanting: 360,\r\n        jewelcrafting: 320\r\n    },\r\n    role: Role.guildMaster\r\n}\r\n```\r\n\r\n## Any\r\n\r\n> Stores any value in there, Typescript will never yell at you.\r\n\r\n> We can say:\r\n\r\n```\r\nlet petName: any;\r\n```\r\n\r\n> Or at least we can say `any` array:\r\n\r\n```\r\nlet petList: any[];\r\n```\r\n\r\n> However, good practice is that we AVOID `any`!\r\n\r\n## Union type:\r\n\r\n> Imagine I want to have a function which should work on both numbers AND strings. It would either add 2 numbers or concatenate 2 strings:\r\n\r\n```\r\nconst combine = (input1, input2) => {\r\n    const result = input1 + input2\r\n    return (result)\r\n};\r\n```\r\n\r\n> Union type can help us in case we want to work with 2 or more types (can be multiple):\r\n\r\n```\r\nconst combine = (input1: number | string, input2: number | string) => {\r\n    const result = input1 + input2\r\n    return (result)\r\n};\r\n```\r\n\r\n## More about union types:\r\n\r\n**Unions of Sets and Types**\r\n\r\n> Every type describes a set of values - the values that have that type. The boolean type describes the set of the two possible Boolean values, true and false, the string type describes the set of all of the possible strings, and so on.\r\n\r\n> In set theory, the union of two or more sets is the (super)set containing all the elements of those (sub)sets. The union of the set of all rational numbers and the set of all irrational numbers, for example, is the set of all real numbers.\r\n\r\n> In type theory, the union of two or more types is the (super)type which describes the union of the sets described by those (sub)types. The boolean type, for example, is effectively the union of the literal types true and false.\r\n\r\n> In TypeScript, you can construct unions of any subtypes with the | operator. For example:\r\n\r\n```\r\ntype OptionalString = string | undefined // e.g. 'hello whale', undefined\r\ntype StringOrNumber = string | number // e.g. 'The meaning of life', 42\r\ntype OneOrMoreNumbers = number | number[] // e.g. 8, 12, [1, 2, 3, 4, 5]\r\ntype Primitive = boolean | string | number | bigint // e.g. true, 'true', 82, 10n\r\n```\r\n\r\n> The | operator is intentionally similar to the logical \"or\" operator, ||. You can read it as \"or\". The values of type X | Y must be either of type X or of type Y.\r\n\r\n**Unions and Supertypes**\r\n\r\n> Unions are supertypes of their component subtypes. Likewise, any built-in supertype (though not explicitly defined as a union) is equivalent to a union of all its subtypes, in the sense that it describes the exact same set of values.\r\n\r\n> For example, the general object type is equivalent to a union of every specific object type you might define. And the maximally general any and unknown types are equivalent to unions of every other type.\r\n\r\n> The unknown type behaves in all respects just like a union of every other type, and fits naturally into the rest of the type system. The any type is special, however: it is like a union of every other type which also signals that type checking should be disabled for variables of that type.\r\n\r\n> Because supertypes are equivalent to unions of their subtypes, writing an explicit union of a supertype with any of its subtypes is effectively meaningless: the resulting union will be no different from the supertype itself.\r\n\r\n> For example, a union with any results in a type that exactly equivalent to any itself, and likewise for unknown.\r\n\r\n```\r\ntype AnyByAnotherName = any | string\r\n\r\ntype UnknownByAnotherName = unknown | number\r\n```\r\n\r\n> In unions with any and unknown, meanwhile, any takes priority.\r\n\r\n```\r\ntype AnyInDisguise = any | unknown\r\n```\r\n\r\n> This means that any variable with the `AnyInDisguise` type will have all type checking disabled for it, just like an ordinary any variable.\r\n\r\n**Unions of Literal Types**\r\n\r\n> You can create unions of primitive types like string and number to describe even larger and more general sets of values. On the other side, you can create unions of literal types to describe smaller and more precise sets of values.\r\n\r\n> When dealing with HTTP response codes, for example, the number type is too general, as not every number is a valid response code. In JavaScript, or TypeScript without unions of literal types, you might check that numbers are within the desired range at run-time:\r\n\r\n```\r\nfunction validateResponse (response) {\r\n  if (response === 400 || response === 401 || response === 403 || response === 404) {\r\n    return response\r\n  }\r\n  throw new Error()\r\n}\r\n\r\nfunction server (code) {\r\n  switch (option) {\r\n    case 400:\r\n      return computerSaysNo()\r\n    case 401:\r\n      return logInPlease()\r\n    case 403:\r\n      return itsASecret()\r\n    case 404:\r\n      return cantFindIt()\r\n  }\r\n}\r\n\r\nconst errorCode = validateResponse(400)\r\nserver(errorCode)\r\n```\r\n\r\nWith a union of literal types, you can instead shift the burden of validation onto the compiler:\r\n\r\n```\r\ntype ErrorCode = 400 | 401 | 403 | 404\r\n\r\nfunction server (option: ErrorCode) {\r\n  switch(option) {\r\n    case 400:\r\n      return computerSaysNo()\r\n    case 401:\r\n      return logInPlease()\r\n    case 403:\r\n      return itsASecret()\r\n    case 404:\r\n      return cantFindIt()\r\n  }\r\n}\r\n\r\nserver(400)\r\n```\r\n\r\n**Arrays of Union Types**\r\n\r\n> In JavaScript, arrays can contain a mixture of values of different types. Typically, however, you want arrays to only contain values of the same type, and TypeScript enforces this restriction.\r\n\r\n> By creating an array of a union type, however, you can loosen this restriction in a controlled way. For example, arrays with the following type can contain a mixture of strings and numbers:\r\n\r\n```\r\ntype stringsAndNumbers = (string | number)[]\r\n```\r\n\r\n> Note that the | union type operator takes precedence over the [] array type operator, so the brackets are necessary to create an array type of a union type. Dropping the brackets will give you a union type, where one of the subtypes is an array:\r\n\r\n```\r\ntype stringOrNumbers = string | number[]\r\n```\r\n\r\n> Above example would be a union type of a string or an array of numbers\r\n\r\n> Partly for this reason, it is conventional to leave a space either side of the | operator, and no spaces before the [] operator.\r\n\r\n> TypeScript's restriction on arrays is generally a good thing, and you are unlikely to need to use union types in this way to loosen that restriction. You are more likely to use unions of literal types to tighten the restriction even further. For example:\r\n\r\n```\r\ntype ErrorCode = 400 | 401 | 403 | 404\r\n\r\nconst serverResponsesFromLast24Hours: number[] = [\r\n  /* array of all server responses as numbers */\r\n]\r\n\r\nconst errorCodesFromLast24Hours: ErrorCode[] = []\r\n\r\nfor (const response of serverResponsesFromLast24Hours) {\r\n  if (response === 400 || response === 401 || response === 403 || response === 404) {\r\n    errorCodesFromLast24Hours.push(response)\r\n  }\r\n}\r\n\r\n// Error: Argument of type '200' is not assignable to parameter of type 'ErrorCode'\r\nerrorCodesFromLast24Hours.push(200)\r\n```\r\n\r\n> The more precise you can be about the types of values that can go into your arrays, the more helpful the compiler can be in ensuring that those values are used appropriately throughout your code.\r\n\r\n**Unions of Object Types**\r\n\r\n> With unions of object types, the union does not merge the properties of the underlying types together. Suppose you have the following types in your code:\r\n\r\n```\r\ntype Customer = {\r\n  name: string,\r\n  customerSaverNumber: number\r\n}\r\n\r\ntype Employee = {\r\n  name: string,\r\n  employeeDiscountCode: number,\r\n}\r\n\r\ntype CheckoutUser = Customer | Employee\r\n\r\n```\r\n\r\n> A valid instance of CheckoutUser must be either a Customer or an Employee, and not a hybrid of the two. In other words, it must have a name property, and then either a customerSaveNumber or an employeeDiscountCode, `but not both`.\r\n\r\n> The following variable, therefore, does not satisfy the definition of CheckoutUser (is not a valid instance of CheckoutUser):\r\n\r\n```\r\nlet customerEmployeeHybrid = {\r\n  name: 'Rod',\r\n  customerSaverNumber: 479823498,\r\n  employeeDiscountCode: 094839\r\n}\r\n```\r\n\r\n> However, because of TypeScript's structural typing system, an object is compatible with either the Customer or the Employee type when it has all of the properties of that type, even if it has additional properties as well.\r\n\r\n> For this reason, the `customerEmployeeHybrid` variable is compatible with both the Customer type and the Employee type. As a result, it is also compatible with the CheckoutUser union type.\r\n\r\n> It is important to remember that this is just the result of the structural typing system. The customerEmployeeHybrid variable is compatible with the Customer and Employee types, but is not a valid instance of either. The difference here will show up anywhere excess property checks apply, such as with a direct assignment to an explicitly annotated variable:\r\n\r\n```\r\nlet hybridCustomer: Customer = {\r\n  name: 'Rod',\r\n  customerSaverNumber: 479823498,\r\n  // Error: Object literal may only specify known properties,\r\n  // and 'employeeDiscountCode' does not exist in type 'Customer'\r\n  employeeDiscountCode: 094839\r\n}\r\n\r\nlet hybridEmployee: Employee = {\r\n  name: 'Tod',\r\n  // Error: Object literal may only specify known properties,\r\n  // and 'customerSaverNumber' does not exist in type 'Employee'\r\n  customerSaverNumber: 479823498,\r\n  employeeDiscountCode: 094839\r\n}\r\n```\r\n\r\n> Other examples:\r\n\r\n```\r\ntype Customer = {\r\n name: string;\r\n customerSaverNumber: number;\r\n};\r\n\r\ntype Employee = {\r\n name: string;\r\n employeeDiscountCode: number;\r\n};\r\n\r\ntype CheckoutUser = Customer | Employee;\r\n\r\ntype Hybrid = {\r\n name: string;\r\n customerSaverNumber: number;\r\n employeeDiscountCode: number;\r\n};\r\n\r\nconst a: Customer = { name: \"mia\", customerSaverNumber: 1 }; // OK\r\n\r\nconst b: CheckoutUser = { name: \"mia\", customerSaverNumber: 1 }; // OK\r\n\r\nconst c: Hybrid = { name: \"mia\", customerSaverNumber: 1 }; // error, c is missing employee discount code\r\n\r\nconst d: Employee = { name: \"pete\", employeeDiscountCode: 202 }; // OK\r\n\r\nconst e: CheckoutUser = { name: \"pete\", employeeDiscountCode: 202 }; // OK\r\n\r\nconst f: Hybrid = { name: \"pete\", employeeDiscountCode: 202 }; // error, d is missing customerSaverNumber\r\n\r\nconst k: Hybrid = {\r\n name: \"david\",\r\n customerSaverNumber: 1,\r\n employeeDiscountCode: 202,\r\n}; // OK\r\n\r\n\r\nconst g: Customer = {\r\n name: \"dave\",\r\n customerSaverNumber: 1,\r\n employeeDiscountCode: 202,\r\n}; // error\r\n\r\n```\r\n\r\n> This error is because we explicitly specify what time g should be type Customer, this is an example when excess properties checks kick in. Typescript does not allow us to have additional property of employeeDiscountCode\r\n\r\n```\r\nconst h: Employee = {\r\n name: \"david\",\r\n customerSaverNumber: 1,\r\n employeeDiscountCode: 202,\r\n}; // error\r\n```\r\n\r\n> This error is because we explicitly specify what time h should be type Employee, this is an example when excess properties checks kick in. Typescript does not allow us to have additional property of customerSaverNumber\r\n\r\n> If we passed above to a function which expects a of a type Customer as an argument, it would work though. This is because excess properties check do not apply and Typescript's default structural typing is in place:\r\n\r\n```\r\nconst printMe = (a: Customer) => {\r\n console.log(a.name);\r\n};\r\n\r\nconst i = {\r\n name: \"jake\",\r\n customerSaverNumber: 2,\r\n employeeDiscountCode: 202,\r\n};\r\n\r\nprintMe(i); // this is ok - because excess properties check does not apply and Typescript's default structural typing is in place\r\n```\r\n\r\n> If we however, passed value of i directly to the call of the function instead of as a constant, typescript will have a problem with it:\r\n\r\n```\r\nconst printMe = (a: Customer) => {\r\n console.log(a.name);\r\n};\r\n\r\n\r\nprintMe({\r\n name: \"alan\",\r\n customerSaverNumber: 3,\r\n employeeDiscountCode: 202,\r\n}); // error - excess properties check kicks in and Typescript's default structural typing is overriden by more strict nominal typing\r\n```\r\n\r\n**Unions of Object Types and Excess Property Checks**\r\n\r\n> Excess property checks prevent you from assigning an object literal to an explicitly annotated variable if the literal includes properties not in the annotated type.\r\n\r\n> However, there is a loophole in the compiler when it comes to assigning object literals to unions of object types. If the additional property exists in any of the subtypes of the union, the assignment is allowed:\r\n\r\n```\r\ntype Customer = {\r\n  name: string,\r\n  customerSaverNumber: number\r\n}\r\n\r\ntype Employee = {\r\n  name: string,\r\n  employeeDiscountCode: number\r\n}\r\n\r\ntype CheckoutUser = Customer | Employee\r\n\r\nlet customerEmployeeHybrid: CheckoutUser = {\r\n  name: 'Rod',\r\n  customerSaverNumber: 479823498, // no error\r\n  employeeDiscountCode: 094839 // no error\r\n}\r\n```\r\n\r\n> Because the compiler raises no error in this case, you might think that unions of object types do merge the properties of the underlying types together, contrary to what you saw on the previous slide. But what is actually going on here is more subtle.\r\n\r\n> Excess property checks work by checking whether each property in the value exists in the type. Does customerSaverNumber exist in the CheckoutUser type? There is no definite answer here: it does exist in Customer, but it doesn't exist in Employee. But excess property checks have to give a definite answer, and since a \"no\" would rule out perfectly legitimate assignments of Customer values, it has to say \"yes\".\r\n\r\n> The case is the same with employeeDiscountCode: it does exist in Employee, but it doesn't exist in Customer.\r\n\r\n> The end result in this case is a legitimate assignment to a CheckoutUser variable that would not be a legitimate assignment to either a Customer variable or an Employee variable. Ideally the assignment of this hybrid object wouldn't be allowed, but the compiler cannot rule it out without also ruling out perfectly acceptable assignments of (non-hybrid) Customer and Employee values as well.\r\n\r\n**Discriminating Properties**\r\n\r\n> To get around the potentially problematic situation described in the previous slide, you can give the underlying types used in a union of object types a discriminating property: a property with the same key, but an incompatible type. For example, you could give the Customer and Employee object types each a role property with a different literal type:\r\n\r\n```\r\ntype Customer = {\r\n  role: 'Customer',\r\n  name: string,\r\n  customerSaverNumber: number\r\n}\r\n\r\ntype Employee = {\r\n  role: 'Employee',\r\n  name: string,\r\n  employeeDiscountCode: number\r\n}\r\n\r\ntype CheckoutUser = Customer | Employee\r\n```\r\n\r\n> With discriminating properties like these, it becomes impossible to create a hybrid object that is compatible with both types, and so the problematic situation from the previous slide will never arise. Any valid assignment to a CheckoutUser variable will have to have a role property, and the value of that property will determine which other properties are allowed.\r\n\r\n```\r\nlet customerWithEmployeeDiscountCode: CheckoutUser = {\r\n  role: 'Customer',\r\n  name: 'Rod',\r\n  customerSaverNumber: 479823498,\r\n  // Error: Object literal may only specify known properties,\r\n  // and 'employeeDiscountCode' does not exist in type 'Customer'\r\n  employeeDiscountCode: 094839\r\n}\r\n\r\nlet employeeWithCustomerSaverNumber: CheckoutUser = {\r\n  role: 'Employee',\r\n  name: 'Tod',\r\n  // Error: Object literal may only specify known properties,\r\n  // and 'customerSaverNumber' does not exist in type 'Employee'\r\n  customerSaverNumber: 479823498,\r\n  employeeDiscountCode: 094839\r\n}\r\n```\r\n\r\n**Tagged Union Types**\r\n\r\n> A union of object types in which each object contains a discriminating property is known variously as a tagged union, a discriminated union, or a sum type. Tagged unions are a useful data type common in functional programming languages, which TypeScript is able to bring to JavaScript.\r\n\r\n> It is common to use the name 'tag' for the discriminating property (at least when no other more meaningful name suggests itself from the nature of the data). But you can use any name you want.\r\n\r\n> In the example from previous slide, the discriminating property was included in the relevant subtypes themselves, but in many cases your code will be more maintainable if you include it in the higher-level union type instead. That way the subtypes can change independently of each other:\r\n\r\n```\r\ntype Customer = {\r\n  name: string,\r\n  customerSaverNumber: number\r\n}\r\n\r\ntype Employee = {\r\n  name: string,\r\n  employeeDiscountCode: number\r\n}\r\n\r\ntype CheckoutUser = { tag: 'Customer', value: Customer }\r\n                  | { tag: 'Employee', value: Employee }\r\n```\r\n\r\n> With the discriminating property in the union type, you can also easily add further options that don't have any additional data associated with them:\r\n\r\n```\r\ntype CheckoutUser = { tag: 'Anonymous' }\r\n                  | { tag: 'Manager' }\r\n                  | { tag: 'Customer', value: Customer }\r\n                  | { tag: 'Employee', value: Employee }\r\n```\r\n\r\n> There is nothing intrinsically special or different about tagged unions like these: they behave in all respects like any other union of object types. But because of the discriminating property, you can use them with switch statements to cleanly handle each subtype separately. The compiler will use type narrowing in each case block to determine which properties are available, and - as long as you haven't disabled strict null checks - will typically also be able to warn you if you forget to cover any of the cases.\r\n\r\n```\r\nconst validCustomerSaverNumbers: number[] = [ /** ... */ ]\r\n\r\nconst validEmployeeDiscountCodes: number[] = [ /** ... */ ]\r\n\r\nfunction discountApplies (checkoutUser: CheckoutUser): boolean {\r\n  switch (checkoutUser.tag) {\r\n    case 'Anonymous':\r\n      return false\r\n    case 'Manager':\r\n      return true\r\n    case 'Customer':\r\n      return validCustomerSaverNumbers.includes(checkoutUser.value.customerSaverNumber)\r\n    case 'Employee':\r\n      return validEmployeeDiscountCodes.includes(checkoutUser.value.employeeDiscountCode)\r\n  }\r\n}\r\n```\r\n\r\n> Note that in the 'Customer' and 'Employee' cases you need to access other properties on the checkoutUser.value object, rather than on checkoutUser directly.\r\n\r\n## Literal types\r\n\r\n![](https://i.imgur.com/niHJjzd.jpg \"Photo by Suzy Hazelwood from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Suzy Hazelwood from Pexels_</p>\r\n\r\n> Sometimes we might want to restrict value not only to string, number or boolean, but maybe we want to be even stricter. We can limit to only a specific value. For example for constants TS infers that the literal type is for example: 4.6\r\n\r\n```\r\nconst myNum=4.6\r\n```\r\n\r\n> If my parameter can only have 2 values (for example output can only be either: \"calculation result: \" or \"concatenation result: \"), we can use union types together with literal types:\r\n\r\n```\r\nconst combine = (input1: number | string, input2: number | string, output: \"calculation result: \" | \"concatenation result: \") => {\r\n    let result;\r\n    if (typeof input1 === \"number\" && typeof input2 === \"number\") {\r\n        result = input1 + input2\r\n    } else {\r\n        result = input1.toString() + input2.toString()\r\n    }\r\n    return (output + result)\r\n};\r\nconsole.log(combine(1, 2, \"calculation result: \"));\r\nconsole.log(combine(\"A\", \"B\", \"concatenation result: \"));\r\n```\r\n\r\n## Type aliases\r\n\r\n![](https://i.imgur.com/30FPntX.jpg \"Photo by sebastiaan stam from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by sebastiaan stam from Pexels_</p>\r\n\r\n> Instead of writing our union types all the time:\r\n\r\n```\r\ninput1: number | string;\r\ninput2: number | string;\r\n```\r\n\r\n> you create them on top of your file with word `type` and provide name of your alias or custom type. Please note that `type` is again only available in Typescript.\r\n\r\n```\r\ntype Combinable = number | string;\r\ntype OutputMessage = \"calculation result: \" | \"concatenation result: \";\r\nconst combine = (input1: Combinable, input2: Combinable, output: OutputMessage) => {\r\n    let result;\r\n    if (typeof input1 === \"number\" && typeof input2 === \"number\") {\r\n        result = input1 + input2\r\n    } else {\r\n        result = input1.toString() + input2.toString()\r\n    }\r\n    return (output + result)\r\n};\r\nconsole.log(combine(1, 2, \"calculation result: \"));\r\nconsole.log(combine(\"A\", \"B\", \"concatenation result: \"));\r\n```\r\n\r\n> You can create type aliases not only for union types, but also for for example object types. This allows avoiding repetition and manage types centrally.\r\n\r\n```\r\ntype Char = { name: string; level: number };\r\nconst char1: Char = { name: \"Addania\", level: 255 };\r\nconsole.log(char1.name);\r\n```\r\n\r\n## Return type\r\n\r\n![](https://i.imgur.com/OfCWNEV.jpg \"Photo by P C from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by P C from Pexels_</p>\r\n\r\n> In a simple function we can not only decide what types the parameters of function will be but also the return type. This is usually infered by typescript:\r\n\r\n> In a simple function like this, return value from function will be of type number:\r\n\r\n```\r\nconst add = (n1: number, n2: number) => {\r\n    return n1 + n2\r\n}\r\n```\r\n\r\n> When we hover over the add function, we will see following:\r\n\r\n```\r\nconst add: (n1: number, n2: number) => number\r\n```\r\n\r\n> Typescript inferred that return value will be number. But we can assign return type explicitly:\r\n\r\n```\r\nconst add2 = (n1: number, n2: number): number => {\r\n    return n1 + n2\r\n}\r\n```\r\n\r\n> Imagine following function:\r\n\r\n```\r\nconst add = (n1: number, n2: number) => {\r\n    return n1.toString() + n2.toString()\r\n}\r\n```\r\n\r\n> When we hover over the add function, we will see that return is a string:\r\n\r\n```\r\nconst add: (n1: number, n2: number) => string\r\n```\r\n\r\n> Typescript inferred that return will be string. But we can assign return type explicitly:\r\n\r\n```\r\nconst add2 = (n1: number, n2: number): string => {\r\n    return n1 + n2\r\n}\r\n```\r\n\r\n> Best practice is to let Typescript infer types.\r\n\r\n## Void type:\r\n\r\n![](https://i.imgur.com/n51Q4mm.jpg \"Photo by David Yu from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by David Yu from Pexels_</p>\r\n\r\n> Void type does not exist in Javascript, but we might know it from other languages.\r\n\r\n> WHAT on Earth is the void type? Imagine you have a function which returns nothing and only prints some text:\r\n\r\n```\r\nconst printResult=(n1: number)=> (\r\n    console.log(\"Result: \" + n1)\r\n)\r\n```\r\n\r\n> If you then hover over `printResult`, you will see that Typescript infers that it returns `void`:\r\n\r\n```\r\nprintResult: (n1: number) => void\r\n```\r\n\r\n> We could actually specify it explicitly (but this is not recommended):\r\n\r\n```\r\nconst printResult=(n1: number):void => (\r\n    console.log(\"Result: \" + n1)\r\n)\r\n\r\nprintResult(2)\r\n```\r\n\r\n> So `void` means I do not have return statement in my function.\r\n\r\n> Practically my function returns something though. Console.log the return of `printResult` would yield `undefined`.\r\n\r\n```\r\nconst printResult=(n1: number):void => (\r\n    console.log(\"Result: \" + n1)\r\n)\r\nconsole.log(print(2))\r\n```\r\n\r\n> `Undefined` is a REAL value in Javascript!\r\n\r\n> There is another way (but VERY NOT recommended way) to specify that my function will return `undefined`, but this only works when your function HAS a return statement which is empty:\r\n\r\n```\r\nconst printResult=(n1: number):undefined => (\r\n    console.log(\"Result: \" + n1)\r\n    return;\r\n)\r\nconsole.log(print(2))\r\n```\r\n\r\n## Function type\r\n\r\n![](https://i.imgur.com/M2Zf5ER.jpg \"Photo by Miguel Á. Padriñán from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Miguel Á. Padriñán from Pexels_</p>\r\n\r\n> We are able to tell to Typescript that certain variable is expected to be a function.\r\n\r\n> Imagine a code like this:\r\n\r\n```\r\nconst add = (n1: number, n2: number) => {\r\n    return n1 + n2\r\n}\r\nlet newFunction;\r\nnewFunction=add;\r\nconsole.log(newFunction(1,2))\r\n```\r\n\r\n> In order to tell explicitly to Typescript that `newFunction` will be a function, so that later on we cannot assign it just a number `newFunction=2`, we can define the function type:\r\n\r\n```\r\nlet newFunction: Function;\r\n```\r\n\r\n> We can also use an arrow notation where we can define a return type:\r\n\r\n```\r\nlet newFunction: () => number;\r\n```\r\n\r\n> We can also add types of parameters which we also need to enter:\r\n\r\n```\r\nlet newFunction: (a: number, b: number) => number;\r\n```\r\n\r\n**Function types and callbacks**\r\n\r\n![](https://i.imgur.com/tp0nHv2.jpg \"Photo by Hassan OUAJBIR from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Hassan OUAJBIR from Pexels_</p>\r\n\r\n> Imagine I have a function which will receive 2 numbers as paramenters and also a third parameter which will be another function (callback function):\r\n\r\n```\r\nconst printResult = (n1: number): void => (\r\n    console.log(\"Result: \" + n1)\r\n)\r\nconst add = (n1: number, n2: number, callback): number => {\r\n    const result = n1 + n2\r\n    callback(result);\r\n    return result\r\n}\r\nconst output = add(10, 20, printResult)\r\n```\r\n\r\n> Another way how we can do this using anonymous function (where I define the function right in the place where I call it):\r\n\r\n```\r\nconst add = (n1: number, n2: number, callback): number => {\r\n    const result = n1 + n2\r\n    callback(result);\r\n    return result\r\n}\r\nconst output = add(10, 20, (result) => {\r\n  console.log(\"Result is: \" + result)\r\n }\r\n)\r\n```\r\n\r\n> How to now define the function type:\r\n\r\n```\r\nconst add = (n1: number, n2: number, callback: (num: number) => void ): number => {\r\n    const result = n1 + n2\r\n    callback(result);\r\n    return result\r\n}\r\n```\r\n\r\n**More on function types**\r\n\r\n> Function signatures in TypeScript are simply annotated versions of JavaScript function signatures.\r\n\r\n```\r\n// annotated function declaration\r\nfunction add (a: number, b: number): number {\r\n  return a + b\r\n}\r\n\r\n// annotated function expression\r\nconst multiply = function (c: number, d: number): number {\r\n  return c * d\r\n}\r\n\r\n// annotated arrow function expression\r\nconst subtract = (e: number, f: number): number => {\r\n  return e - f\r\n}\r\n```\r\n\r\n> If you don't explicitly annotate the parameter or return types, the TypeScript compiler will infer them for you.\r\n\r\n> While the compiler is generally good at inferring return types, unannotated parameters will usually have an inferred type of any (you will see the exceptions later on). Assuming you have the default `noImplicitAny` flag enabled, this will raise an error, so as a general rule `parameter types must always be annotated`.\r\n\r\n> Functions that do not include an explicit return value have an inferred return type of void, which you can also specify explicitly.\r\n\r\n```\r\nfunction logger (): void {\r\nconsole.log('Hey Skillers!')\r\n}\r\n\r\nfunction loggerWithReturn (): void {\r\nconsole.log('Have a great day!')\r\nreturn\r\n}\r\n```\r\n\r\n> JavaScript's default return value (for functions that don't specify one) is undefined, hence undefined is the only value assignable to a variable of type void. There are some slight differences between the types void and undefined, however.\r\n\r\n> If your function explicitly returns undefined, its inferred return type will be undefined rather than void.\r\n\r\n> And although a function whose annotated return type is void can explicitly return undefined, a function whose annotated return type is undefined must do so:\r\n\r\n```\r\n// OK\r\nfunction logger (): void {\r\nconsole.log('Hey Skillers!')\r\nreturn undefined\r\n}\r\n\r\n// Error: A function whose declared type is neither 'void' nor 'any' must return a value.\r\nfunction logger (): undefined {\r\nconsole.log('Hey Skillers!')\r\n}\r\n```\r\n\r\n> You will see another difference between void and undefined later on. For now, just note that you should always use void as the return type for functions that do not return an explicit value (and not use it for anything else).\r\n\r\n**Function Parameters**\r\n\r\n> Functions in JavaScript are all technically `variadic` functions: they are able to accept a variable number of arguments. This is why you can get unintended consequences related to undefined or NaN instead of run-time errors when you pass in the wrong number of arguments:\r\n\r\n```\r\nfunction doNothing (number) {\r\nreturn number\r\n}\r\n\r\ndoNothing(1, 2, 3, 4, 5) // 1\r\ndoNothing() // undefined\r\n\r\nfunction add (a, b, c) {\r\nreturn a + b + c\r\n}\r\n\r\nadd() // NaN\r\nadd(1) // NaN\r\nadd(1, 2, 3, 4, 5) // 6\r\n```\r\n\r\n> TypeScript protects you from this buggy behaviour by throwing a compilation error any time you pass in the wrong number of arguments. When you really do want flexibility in the number of arguments you can pass to a function, there are two controlled ways in which TypeScript allows this.\r\n\r\n**Optional Parameters**\r\n\r\n> The parameter list in a function signature can end with any number of optional parameters, marked as optional with the ? operator. You do not need to supply an argument corresponding to an optional parameter when you call the function, and the compiler will guard against run-time errors by making the type of this parameter a union with undefined.\r\n\r\n```\r\nfunction add (a: number, b: number, c?: number) {\r\nreturn c === undefined\r\n? a + b\r\n: a + b + c\r\n}\r\n\r\nadd(1) // Error: Expected 2 arguments, but got 1\r\nadd(1, 2) // 3\r\nadd(1, 2, 3) // 6\r\n```\r\n\r\n> As with JavaScript, you can also make an argument optional by providing a default value after the type annotation:\r\n\r\n```\r\nfunction multiply (a: number, b: number = 10) {\r\nreturn a \\* b\r\n}\r\n\r\nmultiply(12, 10) // 120\r\nmultiply(12) // 120\r\n```\r\n\r\n> In this case, the parameter's type will not be a union with undefined, since the default value will be used whenever the argument is not specified.\r\n\r\n**Rest Parameters**\r\n\r\n> In the case of an unknown number of arguments you can use a rest parameter, just as you would in JavaScript. Since rest parameters are `arrays`, they must be annotated as an array type.\r\n\r\n```\r\nfunction add (...numbers: number[]) {\r\nreturn numbers.reduce((a, b) => a + b, 0)\r\n}\r\n\r\nadd(1, 2, 3, 4, 5) // 15\r\nadd() // 0\r\n```\r\n\r\n> Similarly but when we know first two parameters, and rest of the parameters are of an unknown length:\r\n\r\n```\r\nfunction add (x: number, y: number, ...numbers: number[]) {\r\n  return x+y+numbers.reduce((a, b) => a + b, 0)\r\n  }\r\nadd(1, 2, 3, 4, 5) // 15\r\nadd(1,2) // 0\r\n```\r\n\r\n**Function Type Expressions**\r\n\r\n> You can provide types for your functions inline, by annotating the parameters and the return value directly in the function signature, as you have seen. But you can also specify the type of a function separately from its implementation using a `function type expression`.\r\n\r\n> The syntax for `function type expressions` mirrors the syntax for arrow functions, but you can use them to annotate both styles of function expression:\r\n\r\n```\r\ntype NumberToString = (value: number, leadingZeros: number) => string\r\n\r\nconst numberToString: NumberToString = (value, leadingZeros) => {\r\nreturn value.toString().padLeft(leadingZeros)\r\n}\r\n\r\n// -OR-\r\n\r\nconst numberToString: NumberToString = function (value, leadingZeros) {\r\nreturn value.toString().padLeft(leadingZeros)\r\n}\r\n\r\n```\r\n\r\n> The `NumberToString` type specifies a function that takes two number arguments and returns a string. The numberToString variable is assigned a function that matches this type signature.\r\n\r\n> Note that, if you provide a function type annotation, you do not need to provide explicit type annotations for the parameters or the return value in the function expression itself, as these will be inferred to match those in the function type.\r\n\r\n> Also note that there is no way to explicitly annotate a function declaration with a function type expression. You need to write a function expression, assign that to a variable, and annotate the variable with the function type.\r\n\r\n> Function type expressions are mainly useful in two cases.\r\n\r\n> The first case is when you want to provide a type annotation for a function parameter passed to a higher-order function:\r\n\r\n```\r\ntype Action = 'Submit' | 'Cancel'\r\n\r\ntype Handler = (input: string) => void\r\n\r\nconst submitCallbacks: Handler[] = []\r\n\r\nconst cancelCallbacks: Handler[] = []\r\n\r\nconst addListener = (action: Action, handler: Handler) => {\r\nswitch (action) {\r\ncase 'Submit':\r\nsubmitCallbacks.push(handler)\r\nbreak\r\ncase 'Cancel':\r\ncancelCallbacks.push(handler)\r\nbreak\r\n }\r\n}\r\n```\r\n\r\n> When passing a function expression as an argument, you do not need to explicitly annotate its parameters or return type. As with function expressions assigned to annotated function variables, these types will be inferred based on the type of the parameter:\r\n\r\n```\r\naddListener('Submit', (input) => {\r\ninputs.push(input)\r\nconsole.log('thank you for you input')\r\n})\r\n```\r\n\r\n> The second case in which function type expressions are useful is when you want to specify the type signature of a method on an object type:\r\n\r\n```\r\ntype SetOfNumbers = {\r\nvalues: number[],\r\nadd: (value: number) => void,\r\ndelete: (value: number) => void,\r\ncontains: (value: number) => boolean,\r\nentries: () => number[]\r\n}\r\n```\r\n\r\n**Compatibility of Function Types (Structural Typing)**\r\n\r\n> TypeScript implements a structural typing system, which means that the type of the value you assign to a variable doesn't have to be identical to the type of the variable, it only has to be compatible with it.\r\n\r\n> With object types, for example, object type B is compatible with object type A if it contains at least the same properties as object type A. It can contain additional properties as well (at least where excess property checks don't apply).\r\n\r\n> Something similar is true of functions: you can assign a function of type B to a function variable of type A, as long as type B is compatible with type A.\r\n\r\n> For function type B to be compatible with function type A, three things have to hold:\r\n\r\n- 1. The return type of function type B must be compatible with the return type of function type A.\r\n\r\n```\r\nlet returnsStringB = (): string => 'boo!'\r\nlet returnsStringOrNumberA = (): string | number => Math.random() < 0.5 ? 2 : 'boo!'\r\n\r\nreturnsStringOrNumberA = returnsStringB // OK: B can be assigned to A because B is compatible with A\r\nreturnsStringB = returnsStringOrNumberA // ERROR: A is not compatible with B, B cant handle numbers\r\n```\r\n\r\n> The first assignment is fine, because string is compatible with string | number. But the second assignment is not allowed, because string | number is not compatible with string.\r\n\r\n- 2.  The types of the parameters in function type A must be compatible with the types of the parameters in function type B. (Note this is the opposite way round from the first condition.)\r\n\r\n```\r\nlet takesStringB = (x: string): void => {}\r\nlet takesStringOrNumberA = (x: string | number): void => {}\r\n\r\ntakesStringB = takesStringOrNumberA // OK\r\ntakesStringOrNumberA = takesStringB // ERROR\r\n```\r\n\r\n> The first assignment is fine, because takesStringOrNumber can be called with a string (as the type of takesString expects). The second assignment is not allowed, because takesString can't be called with a number (but the type of takesStringOrNumber says that it can be).\r\n\r\n> Another way to think about this is: in the place of takeStringB we expect something that can handle strings. If we provide it with a function that can handle string and numbers, we are fine. In the second line, in the place of takesStringOrNumberA we expect a function that can handle strings and numbers. But if we pass there a function which can only with with strings, then this is not OK.\r\n\r\n- 3. Function type B must have no more parameters than function type A (unless those additional parameters are optional or rest parameters), but it can have fewer.\r\n\r\n```\r\nlet takesTwoArguments = (x: number, y: number) => x + y\r\n\r\ntakesTwoArguments = (x: number) => x + 10 // OK\r\ntakesTwoArguments = (x: number, y: number, z: number) => x + y + z // ERROR\r\ntakesTwoArguments = (x: number, y: number, z?: number) => x + y // OK\r\n```\r\n\r\n> The first assignment is fine: the compiler will insist on a second argument when you call this function, but the function body will ignore it and there will be no run-time error. The second assignment, however, raises an error, because the compiler would only allow you to call this function with two arguments, and the required third argument would be undefined. For the same reason, the third assignment will not raise an error: since the third parameter is optional, the function body will not cause a run-time error when its value is undefined.\r\n\r\n> Don't worry if you don't understand all of these rules at once, this is the kind of thing that becomes clearer over time, with practice. For now, the important thing to know is that each of these constraints exists to make sure that type errors will not slip through when handling functions and function assignments.\r\n\r\n**Function Type Compatibility with void**\r\n\r\n> In general, for one function to be compatible with another function, the return type of the first function must be compatible with that of the second function. As we saw above, this is to prevent type errors from sneaking past the compiler:\r\n\r\n```\r\ntype ReturnsNumber = (x: number) => number\r\n\r\nconst returnsStringOrNumber: ReturnsNumber = (x: number): string | number => {\r\nreturn x < 10 ? x + 2 : 'x is too large'\r\n}\r\n\r\n// ERROR: Type '(x: number) => string | number' is not assignable to type 'ReturnsNumber'.\r\n// Type 'string | number' is not assignable to type 'number'.\r\n// Type 'string' is not assignable to type 'number'.\r\n```\r\n\r\n> If this assignment was allowed, then returnsStringOrNumber(20) would have the string value 'x is too large' (because of the function itself), but the type number (because of the ReturnsNumber type annotation). To prevent this kind of type error, assignments like these are not allowed.\r\n\r\n> There is one exception to this general rule, however. A function that returns any value (not just undefined) is compatible with a void function.\r\n\r\n> This exception exists to allow common patterns like these:\r\n\r\n```\r\nconst source = [4, 8, 16]\r\nconst destination = []\r\n\r\nsource.forEach(n => destination.push(n))\r\n```\r\n\r\n> The array method, forEach, requires a void function as its argument, but here we are passing it a function that returns a number (the push method returns the new length of the array).\r\n\r\n> Strictly speaking this shouldn't be allowable, because the only value compatible with void is undefined. And because of this exception, type errors can get past the compiler:\r\n\r\n```\r\ntype ReturnsVoid = () => void\r\n\r\nconst returnsString: ReturnsVoid = () => 'not undefined!!'\r\n\r\nconst result = returnsString() // result has type 'void', but its value is a 'string'\r\n```\r\n\r\n> Type errors like these can never give rise to any run-time errors, however. They simply mean that you have a value that is not undefined that the compiler will not let you use as such (because it is assigned to a variable with the type void).\r\n\r\n> Note that this exception only applies to void functions, not to functions that have a return type of undefined. This is another key difference between void and undefined as return types.\r\n\r\n**Never Return type**\r\n\r\n> The never type represents values that can never occur at run-time. It is not possible to assign anything to a variable of type never. In other words, the set described by this type is the empty set.\r\n\r\n> Perhaps surprisingly, the never type has some practical applications. One such application is as the return type of a function that will never return, either because it always throws an error, or because it runs forever.\r\n\r\n```\r\nfunction tick (): never {\r\nlet counter: number = 0\r\nwhile (true) counter += 1\r\n}\r\n\r\nfunction fail (): never {\r\nthrow new Error('something went wrong')\r\n}\r\n```\r\n\r\n> TypeScript uses control flow analysis to determine whether a function will never return, and in principle can give functions an inferred return type of never in these cases.\r\n\r\n> The inferred return type for functions that never return, however, is only never for function expressions. For function declarations, the inferred type is void.\r\n\r\n```\r\n// the inferred type of failDeclaration is '() => void'\r\nfunction failDeclaration () {\r\nthrow new Error('something went wrong')\r\n}\r\n\r\n// the inferred type of failExpression is '() => never'\r\nconst failExpression = function () {\r\nthrow new Error('something went wrong')\r\n}\r\n\r\n// the inferred type of failExpressionArrow is also '() => never'\r\nconst failExpressionArrow = () => {\r\nthrow new Error('something went wrong')\r\n}\r\n```\r\n\r\n> Ideally, the return type for function declarations that never return would also be never. But when the never type was introduced, this was found to be too big a breaking change for a lot of existing code, so for practical reasons the more accurate inference was only applied to function expressions.\r\n\r\n## Unknown type\r\n\r\n![](https://i.imgur.com/GPUfFFD.jpg \"Photo by Kaique Rocha from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Kaique Rocha from Pexels_</p>\r\n\r\n> Unknown is used if we do not know yet, if it is number or a string. We can store any numbers in there without getting errors:\r\n\r\n```\r\nlet userInput: unknown;\r\nuserInput = \"mia\"\r\nconsole.log(userInput)\r\nuserInput = 5\r\nconsole.log(userInput)\r\nuserInput = true\r\nconsole.log(userInput)\r\n```\r\n\r\n> This looks similar to `any` type. But it IS different.\r\n\r\n> Type `unknown` type cannot be then assigned to other variable which is for example of a type string. Typescript will throw an error.\r\n\r\n```\r\nlet userInput: unknown;\r\nlet userName: string;\r\nuserInput = 5\r\nuserInput = \"mia\"\r\nuserName=userInput\r\n```\r\n\r\n> Whereas with `any` it will not throw an error:\r\n\r\n```\r\nlet userInput: any;\r\nlet userName: string;\r\nuserInput = 5\r\nuserInput = \"mia\"\r\nuserName=userInput\r\n```\r\n\r\n> If the type of a variable is unknown in order to use it to assign it to a string, we need to check the type:\r\n\r\n```\r\nif (typeof userInput === \"string\") {\r\nuserName = userInput\r\n}\r\n```\r\n\r\n> `Unknown` is a better choice to any ,when we are not sure of which type the input will be (like when user enters something), because if enables type checks and forces us to check our types in the code manually. If we use any, all the type checks are disabled - typescript gives up.\r\n\r\n## Never type\r\n\r\n![](https://i.imgur.com/GrnyFyS.jpg \"Photo by Elina Krima from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Elina Krima from Pexels_</p>\r\n\r\n> Functions which throw error cancel the script after the word `throw`, so that there is no possibility it will ever return anything.\r\n\r\n```\r\nconst generateError = (message: string, code: number) => {\r\n    throw { message: message, errorCode: code }\r\n}\r\ngenerateError(\"Upsy\", 500)\r\n```\r\n\r\n> So the type of such function is not `void` (because `void` returns `undefined`). Type of such function is `never`.\r\n\r\n```\r\nconst generateError = (message: string, code: number): never => {\r\n    throw { message: message, errorCode: code }\r\n}\r\ngenerateError(\"Upsy\", 500)\r\n```\r\n\r\n> We can also console log this and see there is no console log:\r\n\r\n```\r\nconst generateError = (message: string, code: number): never => {\r\n    throw { message: message, errorCode: code }\r\n}\r\nconst something = generateError(\"Upsy\", 500)\r\nconsole.log(something)\r\n```\r\n\r\n> Also another function which would `never` return anything is an infite loop function:\r\n\r\n```\r\nconst generateError = (message: string, code: number): never => {\r\n    while (true){}\r\n}\r\nconst something = generateError(\"Upsy\", 500)\r\nconsole.log(something)\r\n```\r\n\r\n## Watchmode\r\n\r\n![](https://i.imgur.com/6tOCEK8.jpg \"Photo by Jordan Benton from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Jordan Benton from Pexels_</p>\r\n\r\n> So far after each change of our file we needed to manually run tsc `app.ts`.\r\n\r\n> We can enter the watchmode and make sure that compilation watches for any change of the file and if it changes then it re-compiles automatically.\r\n\r\n> How to enter watchmode:\r\n\r\n```\r\ntsc app.ts --watch\r\n```\r\n\r\n> Or alternatively:\r\n\r\n```\r\ntsc app.ts -w\r\n```\r\n\r\n> You can then exit it with:\r\n\r\n```\r\nCTRL + C\r\n```\r\n\r\n> How about I have more files than one. Let's add another file called `analytics.ts` and this file will contain following command:\r\n\r\n```\r\nconsole.log(\"Sending...\")\r\n```\r\n\r\n> In order to use this file in our project, we need to add it to the script tag of out `index.html`:\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Typescript Course</title>\r\n    <script src=\"app.js\" defer></script>\r\n    <script src=\"analytics.js\" defer></script>\r\n</head>\r\n<body>\r\n</body>\r\n</html>\r\n```\r\n\r\n> Now imagine we want to compile automatically every time any of these two files changes.\r\n\r\n> For that we will need to do only once:\r\n\r\n```\r\ntsc --init\r\n```\r\n\r\n> It will initiate the whole folder as a typescript project. It will also create `tsconfig.json` file.\r\n\r\n> Now we will be able to run just `tsc` in the terminal and it will compile all the .ts files in our project.\r\n\r\n> We can combine it with watchmode!\r\n\r\n```\r\ntsc -w\r\n```\r\n\r\nor\r\n\r\n```\r\ntsc --watch\r\n```\r\n\r\n## Excluding and including files to compile\r\n\r\n> `tsconfig.json` file is a critical file which tells Typescript how to compile this whole project!\r\n\r\n> It is possible to exclude certain files from compilation. In order to do that you need to add exclude command at the end of the `tsconfig.json` file. Make sure you add the command betwee two curly brackets and separate them by comma:\r\n\r\n```\r\n    /* Advanced Options */\r\n    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\r\n  },\r\n  \"exclude\": [\r\n    \"analytics.ts\"\r\n  ]\r\n}\r\n```\r\n\r\n> You will need to re-run the compilation with `tsc` command. Notice that file `analytics.js` is not created.\r\n\r\n> We can use it with regular expressions to check for any file ending with `.dev.ts`\r\n\r\n```\r\n},\r\n  \"exclude\": [\r\n    \"*.dev.ts\"\r\n  ]\r\n}\r\n```\r\n\r\n> We exclude a file ending with `.dev.ts` in ANY folder\r\n\r\n```\r\n},\r\n  \"exclude\": [\r\n    \"**/*.dev.ts\"\r\n  ]\r\n}\r\n```\r\n\r\n> Typically what we DO WANT to exclude are files in `node_modules` folder (which holds all dependencies):\r\n\r\n```\r\n},\r\n  \"exclude\": [\r\n    \"node_modules\"\r\n  ]\r\n}\r\n```\r\n\r\n> We can exlude any folder from compilation and no files within this folder will be compiled:\r\n\r\n```\r\n},\r\n  \"exclude\": [\r\n    \"folder_name_to_exclude\"\r\n  ]\r\n}\r\n```\r\n\r\n> By default this folder will be excluded by Typescript (so we do not necessarily need to do it, but we can)\r\n\r\n> On the other hand we can explicitely say which files to INCLUDE in our compilation. Anything else will be ignored:\r\n\r\n```\r\n},\r\n  \"exclude\": [\r\n    \"node_modules\"\r\n  ],\r\n  \"include\": [\r\n      \"app.ts\",\r\n      \"analytics.ts\"\r\n  ]\r\n}\r\n```\r\n\r\n> I can also include whole folder which I want to include in compilation. For example folder called \"section1\":\r\n\r\n```\r\n},\r\n  \"exclude\": [\r\n    \"node_modules\"\r\n  ],\r\n  \"include\": [\r\n      \"app.ts\",\r\n      \"analytics.ts\",\r\n      \"section1\"\r\n  ]\r\n}\r\n```\r\n\r\n> If I have both exclude and include, Typescript will compile what is INCLUDED minus what is EXCLUDED\r\n\r\n> Command file is like include but only applies to files (I cannot use it on folders):\r\n\r\n```\r\n},\r\n  \"exclude\": [\r\n    \"node_modules\"\r\n  ],\r\n  \"files\": [\r\n      \"app.ts\",\r\n      \"analytics.ts\"\r\n  ]\r\n}\r\n```\r\n\r\n## tsconfig.json options\r\n\r\n### Target\r\n\r\n![](https://i.imgur.com/LIWQef6.jpg \"Photo by vedanti from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by vedanti from Pexels_</p>\r\n\r\n> Target tells for which target Javascript version we want to compile our code and which runs in set of browsers. And you dedefine which browsers support the compiled code by setting the target.\r\n\r\n```\r\n \"compilerOptions\": {\r\n    /* Basic Options */\r\n    // \"incremental\": true,\r\n    \"target\": \"es5\",\r\n```\r\n\r\n> Default target is `es5`. And I can see it, because in my `.ts` files I use `const` and `let`, which if I open the `.js` file I will see `var` everywhere. Because in `es5` we do not have `let` and `const`!! `es5` makes sure that code will run in older browsers, but maybe I want to use `es6` and then I have other build tool which will transpile the Javascript code which can be then read by older browsers. Or maybe we want to ship code that ONLY works in modern browsers.\r\n\r\n> We can delete the es5 and press `CTRL+SPACE` it will give you all the possible options. You can set target to es6 which is equivalent to es2015. Or use even more recent version like: es2020\r\n\r\n### Libraries\r\n\r\n![](https://i.imgur.com/zZbnUAa.jpg \"Photo by Skitterphoto from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Skitterphoto from Pexels_</p>\r\n\r\n> Allows to specify which default objects and features Typescript knows (for example working with the DOM). If \"lib\" is empty, defaults are assumed based on our target. As our target is es5 or es6 than it assumes default libraries like working with DOM API, etc.\r\n\r\n> Add a button to the index.html file:\r\n\r\n```\r\n<body>\r\n    <button>Click Me!</button>\r\n</body>\r\n```\r\n\r\n> And then let us add event listener to the button, so that we console log a message when button is clicked. Add this to the .ts file:\r\n\r\n```\r\nconst button = document.querySelector(\"button\")!;\r\nbutton.addEventListener(\"click\", () => {\r\n    console.log(\"Button Clicked!\")\r\n})\r\n```\r\n\r\n> We needed to add ! after querySelector (to tell to Typescript that this button WILL exist).\r\n\r\n> Typescript does not complain for example about if the (HTML) document even exists, or if there is property like querySelector or addEventListener, etc. It does not complain becaise lib is commented out, and our target is es5 or es6. But in theory our application maybe is not for browsers, maybe it is a node.js application. Leaving lib empty is recommended.\r\n\r\n> If we uncomment lib and leave the array empty, then we override defaults and the libraries are empty, which means now we get all sorts of array, that typescript does not reckognize document, or even console.log, toString, Array<>, etc.\r\n\r\n> If we uncomment lib, then we should add custom libraries to our tsconfig.json file which would overwrite defaults. If you hit CTRL+SPACE you get auto-completion and see list of options. For our Javascript project we would need:\r\n\r\n```\r\n     \"lib\": [\r\n       \"DOM\",\r\n       \"ES6\",\r\n       \"DOM.Iterable\",\r\n       \"ScriptHost\"\r\n     ],\r\n```\r\n\r\n> But above is equivalent if we leave it empty becasue then defaults are assumed based on our es6 target.\r\n\r\n```\r\n\"lib\": [],\r\n```\r\n\r\n### allowJS and checkJS\r\n\r\n> This option allows Javascript files to be compiled. AllowJS will compile .js files. CheckJS will still check syntax of .js files, but it will not compile them. But it does not make sense if you have both .ts and .js files becaue then it will leave to double-compilation. This could be however used in projects where we dont have Typescript at all, but we still want to check .js files.\r\n\r\n### JSX\r\n\r\n> This is relevant only for React projects. It specifies what JSX code is generated.\r\n\r\n### sourceMap\r\n\r\n![](https://i.imgur.com/fNmTHCH.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\n> Source Map helps with debugging and development. You can see .js files from your project in the browser -> developer tools (or CTRL+SHIFT+i)->Sources\r\n\r\n> However, we only see the js files, not our ts files. Source map if set to true, will create new files in the project folder: `app.js.map` which in browser will be translated as app.ts file. Which can be practical especially if we use some easy nice syntax in ts which would then be very complicated in js.\r\n\r\n```\r\n\"sourceMap\": true,\r\n```\r\n\r\n> In the sources we will see our code and also we will be able to put cursor in a specific line of the code and stop then execution of the code there. Which is good for debugging (like adding `debugger` in the code). But this is only done in browser and we are not polluting our code in reality.\r\n\r\n### outDir and rootDir\r\n\r\n> These help us in bigger projects to organize the folder structure. Usually we will not want to have all files laying around in the project root folder. A typical project will want to have a `src` and `dist` subfolders. `dist` usually holds all output files (like the javascript files) and `src` might hold all typescript files.\r\n\r\n> By default Typescript will compile the Typescript files into Javascript files and put them right next to Typescript files.\r\n\r\n> With `outDir` we can tell Typescript where output (Javascript) files will be stored, for example in `dist` folder:\r\n\r\n```\r\n\"outDir\": \"./dist\",\r\n```\r\n\r\n> While our .ts files might reside in `src` folder.\r\n\r\n> Please note that then you also need to adpat `index.html` file to point to the .js files in dist folder:\r\n\r\n```\r\n<script src=\"dist/app.js\" defer></script>\r\n<script src=\"dist/analytics.js\" defer></script>\r\n```\r\n\r\n> You will also need to adapt `tsconfig.json` file in case you have include and you will need to add new parth to the files:\r\n\r\n```\r\n\"include\": [\r\n    \"src/app.ts\",\r\n    \"src/analytics.ts\"\r\n]\r\n```\r\n\r\n> Also if we had subfolder structure in the `src` folder, this will be replicated in the `dist` folder.\r\n\r\n> With `rootDir` I can set Typescript to only read files from this folder. It is equivalent if we used `include`.\r\n\r\n```\r\n\"rootDir\": \"./src\",\r\n```\r\n\r\n> The difference however is that `rootDir` will also make sure that `outDir` will replicate folder structure of the `rootDir`\r\n\r\n> Often we set both `outDir` and `rootDir`\r\n\r\n### removeComments\r\n\r\n> Any comments in the `.ts` file will be ignored in the `.js` file:\r\n\r\n```\r\n\"removeComments\": true,\r\n```\r\n\r\n### noEmit\r\n\r\n> `noEmit` setting will make sure no `.js` files are produced (for example if I only want to check my files)\r\n\r\n```\r\n\"noEmitOnError\": true,\r\n```\r\n\r\n> There is another one `noEmitOnError` which makes sure no `.js` file is produced if there was a compilation error. It is enought that in one file there is an error and no `js` files will be generated.\r\n\r\n```\r\n\"noEmitOnError\": true,\r\n```\r\n\r\n### Strict\r\n\r\n> This enables all strict type-checking options\r\n\r\n> We can set strict to true, which will be equivalent to enabling all the rest of strict options to true:\r\n\r\n```\r\n\"strict\": true,\r\n```\r\n\r\n> is the same as:\r\n\r\n```\r\n\"noImplicitAny\": true,\r\n\"strictNullChecks\": true,\r\n\"strictFunctionTypes\": true,\r\n\"strictBindCallApply\": true,\r\n\"strictPropertyInitialization\": true,\r\n\"noImplicitThis\": true,\r\n\"alwaysStrict\": true,\r\n```\r\n\r\n> `noImplicitAny` will always throw error if a parameter of a function is implied by Typescript to be of ANY type (which we should avoid). It forces us to be specific about what data we expect. For variables, it does not complain.\r\n\r\n```\r\n\"strictNullChecks\": true,\r\n```\r\n\r\n> `strictNullChecks` is checking if the objects we try to access actually exist. So for our button, we needed to add `!`after the querySelector, because otherwise Typescript would complain that it is not sure if that selector exists. It is because of this option. If it is true, it throws such errors to notify if some element might be null / might not exist.\r\n\r\n```\r\n\"strictNullChecks\": true,\r\n```\r\n\r\n### noUnused...\r\n\r\n> `noUnusedLocals` will ensure we dont have unused variables in the file. FOllowing code with throw an error, because user1 is defined but never used:\r\n\r\n```\r\nconst adding = (a1: number, a2: number) => {\r\n  const user1 = 'mia'\r\n  return a1+a2;\r\n};\r\n```\r\n\r\n> However. this one checks block scoped variables. The global variables are allowed not being used in a file because maybe they are used in another file. SO this code will not throw an error for user2, it will only throw error for user1:\r\n\r\n```\r\nconst user2 = \"addania\";\r\n\r\nconst adding = (a1: number, a2: number) => {\r\n  const user1 = \"mia\";\r\n  return a1 + a2;\r\n};\r\n```\r\n\r\n> `noUnusedParameters` will ensure that all parameters of the function are used in the body of the function. Following code will throw an error cause a2 is not used. Error will read: `a2 is declared but its value is never read`.\r\n\r\n```\r\nconst adding = (a1: number, a2: number) => {\r\n  return a1;\r\n};\r\n```\r\n\r\n### noImplicitReturns\r\n\r\n> This is also an important setting. It makes sure that our functions cover all branches and return something under all circumstances.\r\n\r\n> Following function only return something when addition is more then a zero. But it does not cover cases when it it zero and less. So not all paths are covered and we will be warned with the message: `No all code pathes return a value`.\r\n\r\n```\r\nconst adding = (a1: number, a2: number) => {\r\n  if (a1 + a2 > 0) {\r\n    return a1 + a2;\r\n  }\r\n};\r\n```\r\n\r\n> We need to add final return, even if it does not return anything to fix this error:\r\n\r\n```\r\nconst adding = (a1: number, a2: number) => {\r\n  if (a1 + a2 > 0) {\r\n    return a1 + a2;\r\n  }\r\n  return;\r\n};\r\n```\r\n\r\n## Syntax:\r\n\r\n![](https://i.imgur.com/equqbFL.jpg \"Photo by Miguel Constantin Montes from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Miguel Constantin Montes from Pexels_</p>\r\n\r\n> <code>!</code> means I am sure my element with certain ID will always be there in the `.html` file because I checked that id:\r\n\r\n```\r\nconst input1 = document.getElementById(\"num1\")!;\r\n```\r\n\r\n> A cleaner way how to work aroudn this error is to have a run-time check if the button exists with and if statement:\r\n\r\n```\r\nconst button = document.getQuerySelector(\"button\")\r\nif (button) {\r\n  button.addEventListener(\"click\", () => {\r\n    console.log(\"clicked\"\r\n  )})\r\n}\r\n```\r\n\r\n> <code>as HTMLInputElement</code> means TYPECASTING which says what kind of element it will be, in following case it will be an input element:\r\n\r\n```\r\nconst input1 = document.getElementById(\"num1\")! as HTMLInputElement;\r\n```\r\n\r\n## Typescript Next Generation Features\r\n\r\n> Typescript does not only allow creating types and compiles the code. It also allows using some next generation Javascript (introduced with ES6) and new features and makes it easier to write your code - modern syntax. It does not stop there, if you use modern javascript syntax and want to compile the code to older version like `\"target\": \"es5\"` in the tsconfig.json, then it will compile your shiny modern code to the older javascript with workarounds so that it can be run on older browsers.\r\n\r\n### let and const\r\n\r\n> Modern Javascript features allow to define `const` which will not change and `let` which can change.\r\n\r\n> We cannot re-assign new value to const, while we can do it for let. If we try to re-assign a constant, we get a typescript error. In the browser we would also get an runtime error:\r\n\r\n```\r\nconst user = \"mia\"\r\nuser = \"addania\"\r\n```\r\n\r\n> We can still use `var` as before, which allows to re-assign values. We should not use `var` not anymore.\r\n\r\n> `let` and `const` have one important difference to var regarding the scope in which they are available.\r\n\r\n> `var` has a global and function scope. Function scope means that var is only available within the function itself, but outside of the function all variables are global - available in our file.\r\n\r\n> But these two scopes are not the only scopes. There are other scopes like in if statements.\r\n\r\n```\r\nconst user2 = \"addania\";\r\nif (user2 === \"addania\") {\r\n  var b = 'i am be'\r\n}\r\nconsole.log(\"b\", b)\r\n```\r\n\r\n> This would work with var in Javascript - like in a browser. Because var is not in the function, it will have global scope. Typescript will compail about it, warning us though, because it is not good code to write.\r\n\r\n> This would not work with let and const. This would throw an error:\r\n\r\n```\r\nconst user2 = \"addania\";\r\nif (user2 === \"addania\") {\r\n  let b = 'i am be'\r\n  let c = 'i am ci'\r\n}\r\nconsole.log(b, c)\r\n```\r\n\r\n> let and const introduced new scope - block scope which is part of if statements, for loops, functions or even any snippet within curly braces - we can randomly add curly braces to the code and create a block scope:\r\n\r\n```\r\n{\r\n  const onlyAvailableHere = \"I'm VIP\"\r\n  let user\r\n}\r\n```\r\n\r\n### Arrow functions\r\n\r\n> Instead using function keyword:\r\n\r\n```\r\nfunction add(a: number, b: number) {\r\n  return a+b\r\n}\r\n```\r\n\r\n> We can use arrow functions:\r\n\r\n```\r\nconst add = (a: number, b: number) => {\r\n  return a+b\r\n}\r\n```\r\n\r\n> Still possible like this:\r\n\r\n```\r\nconst add = function(a: number, b: number){\r\n  return a+b\r\n}\r\n```\r\n\r\n> Benefits of arrow functions:\r\n\r\n- shorter syntax\r\n- we can ommit `return` keyword: `const add = (a: number, b: number) => a+b` (called implicit return)\r\n- we can omit parameter braces if we only have one parameter: `const double = a => a*2`\r\n\r\n> Please note, if we have no parameters, we need to use empty parenthesis `() =>`\r\n\r\n### Default function parameters\r\n\r\n> We can have a function with 2 parameters, but we can set a parameter to have a default value, if this value is not provided when the function is called. It is done using `=` sign:\r\n\r\n```\r\nconst adding = (a1: number, a2: number = 0) => a1 + a2;\r\nconsole.log(\"addng with default: \", adding(5));\r\n```\r\n\r\n> This only works if the parameter with the default value is the **last one**. This code below would not work / compile:\r\n\r\n```\r\nconst adding = (a1: number = 1, a2: number) => a1 + a2;\r\nconsole.log(\"addng with default: \", adding(5));\r\n```\r\n\r\n> If all arguments would have default value, then it would work:\r\n\r\n```\r\nconst adding = (a1: number = 1, a2: number = 5) => a1 + a2;\r\nconsole.log(\"addng with default: \", adding());\r\n```\r\n\r\n> Rule is, first declare parameters which are obligatory and only then parameters which are option and all need to have a default value set.\r\n\r\n### SPREAD OPERATOR\r\n\r\n> Spread operator is really useful to pull out elements of an array.\r\n\r\n```\r\nconst hobbies = [\"yoga\", \"cross-fit\"];\r\nconst activeHobbies = ['hiking', ...hobbies]\r\n```\r\n\r\n> ...hobbies will not add whole hobbies array and add it to the activeHobbies array. Result will not be: ['hiking', [\"yoga\", \"cross-fit\"]]\r\n\r\n> The result will be: [\"hiking2, \"yoga\", \"cross-fit\"]\r\n\r\n> Spread operator will pull out individual values from the array.\r\n\r\n> Another example:\r\n\r\n```\r\nactiveHobbies.push(...hobbies)\r\n```\r\n\r\n> Spread operator works also for objects. If we have `person` object and we declare a new constant copiedPerson and simply assign person to it like this:\r\n\r\n```\r\nconst person = {\r\n  name: 'adda',\r\n}\r\nconst copiedPerson = person\r\n```\r\n\r\n> Then we are only referencing this object. We do not create a new object with new memory address. We only create a new pointer which will point to the same memory address where person lives. This is important concept, because it can cause mutating existing objects which in React will NOT cause re-render.\r\n\r\n> Spread operator will help to create a new object with new memory address and it will pull out all the key-value pairs from `person` and idd them to the completely brand new shiny object `copiedPerson`\r\n\r\n```\r\nconst person = {\r\n  name: 'adda',\r\n}\r\nconst copiedPerson = {...person}\r\n```\r\n\r\n> Same goes for arrays. To create a new array from the old one:\r\n\r\n```\r\nconst hobbies = [\"yoga\", \"cross-fit\"];\r\nconst activeHobbies = [...hobbies]\r\n```\r\n\r\n> To create a new array of hobbies and want to add something more to it:\r\n\r\n```\r\nconst hobbies = [\"yoga\", \"cross-fit\"];\r\nconst activeHobbies = [ ...hobbies, 'hiking',]\r\n```\r\n\r\n> we can also change the order in case hiking should be first:\r\n\r\n```\r\nconst hobbies = [\"yoga\", \"cross-fit\"];\r\nconst activeHobbies = ['hiking', ...hobbies]\r\n```\r\n\r\n### Rest operator\r\n\r\n> Imagine you want to create a function which will add unlimited amount of numbers. We do not know if it will be 2 or 10 or 1000. Rest parameter will help to create an array from the incoming parameters:\r\n\r\n```\r\nconst addUnlimited = (...numbers: Array<number>) => {\r\n  let total = 0;\r\n  numbers.forEach((num) => {\r\n    total = total + num;\r\n  });\r\n  return total;\r\n};\r\nconsole.log(\"unlimited\", addUnlimited(10, 20, 30, 40));\r\nconsole.log(\"unlimited\", addUnlimited(10, 20));\r\nconsole.log(\"unlimited\", addUnlimited());\r\n```\r\n\r\n> Same example using reduce:\r\n\r\n```\r\nconst addUnlimited2 = (...numbers: Array<number>) => {\r\n  return numbers.reduce((currentResult, currentValue) => currentResult + currentValue, 0);\r\n};\r\nconsole.log(\"unlimited2\", addUnlimited(10, 20, 30, 40));\r\nconsole.log(\"unlimited2\", addUnlimited(10, 20));\r\nconsole.log(\"unlimited2\", addUnlimited());\r\n```\r\n\r\n> If our function should accept exactly 5 numbers, then we can limit it by a typing is as a tupple instead of array of numbers.\r\n\r\n```\r\nconst addUnlimited2 = (...numbers: [number, number, number, number, number]) => {\r\n  return numbers.reduce((currentResult, currentValue) => currentResult + currentValue, 0);\r\n};\r\n```\r\n\r\n### Array and Object descrtucturing\r\n\r\n> If we have an array and we want to extract its values into separate constants we can use array destructuring:\r\n\r\n```\r\nconst hobbies = [\"yoga\", \"cross-fit\"];\r\nconst [ hobby1, hobby2 ] = hobbies\r\n```\r\n\r\n> Destructure means you really pull emelents out of the array.\r\n\r\n> We can even use rest parameters and store the rest of the values to a dedicated constant for example `other`. All remaining elements in the other will be an **array** of strings:\r\n\r\n```\r\nconst hobbies = [\"yoga\", \"cross-fit\", \"hiking\", \"surfing\", \"diving\"];\r\nconst [ hobby1, hobby2, ...other ] = hobbies\r\n```\r\n\r\n> Same works for objects. Here we take the person object and pull out all the key-value paris and assign first three to dedicated constants and the rest to the otherInfo const:\r\n\r\n```\r\nconst human = {\r\n  firstName: \"mia\",\r\n  id: \"1\",\r\n  gender: \"female\",\r\n  age: 18,\r\n  nationality: undefined,\r\n};\r\nconst { firstName, id, gender, ...otherInfo } = human;\r\n```\r\n\r\n> Please note that the constant names need to reflect the key names in the original object. Order does not matter, but the names do!\r\n\r\n> If we wanted to overwrite those names, we put a colon there `:`\r\n\r\n```\r\nconst human = {\r\n  firstName: \"mia\",\r\n  id: \"1\",\r\n  gender: \"female\",\r\n  age: 18,\r\n  nationality: undefined,\r\n};\r\nconst { firstName: randomName, id, gender, ...otherInfo } = human;\r\n```\r\n\r\n## Best practises tips:\r\n\r\n![](https://i.imgur.com/VDxi6vE.jpg \"Photo by Porapak Apichodilok from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Porapak Apichodilok from Pexels_</p>\r\n\r\n> **Do not ignore**\r\n\r\nDo not use <code>@ts-ignore</code>. It turns off the compiler completely from the next line and prevents from spotting type errors\r\n\r\n> **Do not use React.FunctionComponent**\r\n> Eee:\r\n\r\n```\r\n\r\ntype Props = { foo: string }\r\nconst Foo: React.FunctionComponent<Props> = ({ foo }) => <div>{foo}</div>\r\n\r\n```\r\n\r\nApproved:\r\n\r\n```\r\n\r\nconst Foo = ({ foo }: Props) => <div>{foo}</div>\r\n\r\n```\r\n\r\n> **Do not use enums**\r\n\r\nNein:\r\n\r\n```\r\n\r\nenum Direction { Up, Down, Left, Right}\r\n\r\n```\r\n\r\nJaaaa:\r\n\r\n```\r\n\r\ntype Direction = \"up\" | \"down\" | \"left\" | \"right\"\r\n\r\n```\r\n\r\n> **Do not use wide types like object or any**\r\n\r\nAlways try to find concrete types\r\n\r\n![](https://i.imgur.com/ob6G3qI.jpg \"Photo by Pixabay from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Pixabay from Pexels_</p>\r\n\r\n**Intersection types**\r\n\r\n![](https://i.imgur.com/KlTaZzV.png \"Photo by Deva Darshan from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Deva Darshan from Pexels_</p>\r\n\r\n> Intersection types allow us to combine other types\r\n\r\n> Imagine we have a following types:\r\n\r\n```\r\ntype Admin = {\r\n  name: string;\r\n  privileges: Array<string>\r\n}\r\n\r\ntype Employee = {\r\n  name: string;\r\n  startDate: Date;\r\n}\r\n```\r\n\r\n> What if I want to combine these two objects to a new type `ElevatedEmployee` which should contain all of above? Of course we could create a new type and define it manually:\r\n\r\n```\r\ntype ElevatedEmployee = {\r\n  name: string;\r\n  startDate: Data;\r\n  priviledges: Array<string>\r\n}\r\n```\r\n\r\n> But since we already have a type for Admin and for Employee, we can combine them and create a new type based on them. This will also allow us to have one source of truth. IN order to define an intersection type, weuse `ampersand` symbol.\r\n\r\n```\r\ntype ElevatedEmployee = Admin & Employee;\r\nconst david: ElevatedEmployee = {\r\n  name: \"Dave\",\r\n  privileges: [],\r\n  startDate: new Date(),\r\n}\r\n```\r\n\r\n> We could also achieve this with interfaces:\r\n\r\n```\r\ninterface Admin {\r\n  name: string;\r\n  privileges: Array<string>;\r\n}\r\n\r\ninterface Employee {\r\n  name: string;\r\n  startDate: Date;\r\n}\r\n\r\ninterface ElevatedEmployee extends Admin, Employee {}\r\n\r\nconst david: ElevatedEmployee = {\r\n  name: \"Dave\",\r\n  privileges: [],\r\n  startDate: new Date(),\r\n};\r\n```\r\n\r\n> Intersection can be used for any types, not only objects:\r\n\r\n```\r\ntype Combinable = string | number\r\ntype Calculatable = number | boolean\r\ntype Universal = Combinable & Calculatable\r\n```\r\n\r\n> As a result Universal type will be of a type number, because number is the only `intersection` between (string or number) and (number or boolean).\r\n\r\n> Why is that? Simply because of the way intersections are implemented. Intersections of union types will result in whatever is common for both union types. Intersection of object will result in combination of all its objects.\r\n\r\n**Type guards**\r\n\r\n![](https://i.imgur.com/NYjRWPJ.png \"Photo by Mike from Pexels\")<p style=\"font-size: 12px; text-align: right\">_Photo by Mike from Pexels_</p>\r\n\r\n> Type guards help us with union types. Because we need to know which exact type we are getting at run time.\r\n\r\n**a) typeof type guard**\r\n\r\n> Imagine a function which can get Combinable parameters - strings or numbers. In order to process those numbers correctly, we need to have a logic which distinguished between strings and numbers. When those are strings or at least one of them is a string, we concatenate them. If both are numbers then we add them up:\r\n\r\n```\r\ntype Combinable = string | number;\r\n\r\nconst addUp = (a: Combinable, b: Combinable) => {\r\n  if (typeof a === \"string\" || typeof b === \"string\") {\r\n    return a.toString() + b.toString();\r\n  }\r\n  return a + b;\r\n};\r\n\r\nconsole.log(\"strings: \", addUp(\"m\", \"n\"));\r\nconsole.log(\"numbers: \", addUp(1, 2));\r\nconsole.log(\"string & number: \", addUp(\"m\", 1));\r\n```\r\n\r\n> `if (typeof a === \"string\" || typeof b === \"string\") {...}` is called a type guard. It allows us to use the flexibility of the union type gives us, bubt still ensures that our code runs correctly at run time.\r\n\r\n**b) typeof type guard**\r\n\r\n**Interfaces**\r\n\r\n> They represent objects! type can represent anything, interface only object\r\n\r\n```\r\ninterface Adda {\r\n  name: string,\r\n  nick: string,\r\n  age: number\r\n}\r\n```\r\n\r\n> It is matter of custom. Whichever I choose I should be consistent.\r\n\r\n**Alias**\r\n\r\n> Is when we extract our own type:\r\n\r\n```\r\ntype User = {\r\n  id: string,\r\n  age: number\r\n}\r\n```\r\n\r\n**Promises**\r\n\r\n> How to type a promise from an api? Use `Promise<>`\r\n\r\n```\r\ninterface LukeSkywalker {\r\n  name: string;\r\n  height: string;\r\n  mass: string;\r\n  hair_color: string;\r\n  skin_color: string;\r\n  eye_color: string;\r\n  birth_year: string;\r\n  gender: string;\r\n}\r\n\r\nexport const fetchLukeSkywalker = async (): Promise<LukeSkywalker> => {\r\n  const data = await fetch(\"https://swapi.dev/api/people/1\").then((res) => {\r\n    return res.json();\r\n  });\r\n\r\n  return data;\r\n};\r\n```\r\n\r\n> Another possibility is to use casting -> with word `as`. We can cast data to LukeSkywalker.\r\n\r\n```\r\ninterface LukeSkywalker {\r\n  name: string;\r\n  height: string;\r\n  mass: string;\r\n  hair_color: string;\r\n  skin_color: string;\r\n  eye_color: string;\r\n  birth_year: string;\r\n  gender: string;\r\n}\r\n\r\nexport const fetchLukeSkywalker = async () => {\r\n  const data = await fetch(\"https://swapi.dev/api/people/1\").then((res) => {\r\n    return res.json();\r\n  });\r\n\r\n  return data as LukeSkywalker;\r\n};\r\n```\r\n\r\n**Sets**\r\n\r\n> Sets are collections of values. A value in the Set may only occur once; it is unique in the Set's collection.\r\n\r\n```\r\nconst guitarists = new Set();\r\n```\r\n\r\n> How to type sets?\r\n\r\n```\r\nconst guitarists = new Set<string>();\r\n```\r\n\r\n**Objects with variables as keys**\r\n\r\n> How to type objects which can have a variable as a key to avoid errors such as? No index signature with a parameter of type 'string' was found on type '{}'\r\n\r\n> In this case the index is refering to the key of the object. Any such TS errors about index usually refer to the key of object (unless you work with arrays).\r\n\r\n> First solution\r\n\r\n```\r\nconst createCache = () => {\r\n  const cache = {};\r\n\r\n  const add = (id: string, value: string) => {\r\n    cache[id] = value;\r\n  };\r\n\r\n  return {\r\n    cache,\r\n    add,\r\n  };\r\n};\r\n```\r\n\r\n> There are couple of ways how to type such an object:\r\n\r\n```\r\nconst cache: {\r\n    [id: string]: string;\r\n    } = {};\r\n```\r\n\r\n> In above example I can use also any other key, not only id. I can use index, or any other work (k, n):\r\n\r\n```\r\nconst cache: {\r\n    [index: string]: string;\r\n    } = {};\r\n```\r\n\r\n> Or:\r\n\r\n```\r\nconst cache: {\r\n    [k: string]: string;\r\n    } = {};\r\n\r\n```\r\n\r\n> This [k: string] inside of a type is called index signature.\r\n\r\n> Another approach is to use interface:\r\n\r\n```\r\ninterface Cache {\r\n  [id: string]: string;\r\n}\r\n```\r\n\r\n> Or even using Record. Record allows to add any number of keys to that object at runtime.\r\n\r\n```\r\n const cache: Record<string, string> = {};\r\n```\r\n\r\n**Typing catch errors**\r\n\r\n> In javascript for each try block, we can only have 1 catch block\r\n\r\n> We can throw any error:\r\n\r\n```\r\nthrow 'What the!?'\r\nthrow 7\r\nthrow {wut: 'is this'}\r\nthrow null\r\nthrow new Promise(() => {})\r\nthrow undefined\r\n```\r\n\r\n> Now imagine a situation like this:\r\n\r\n```\r\nconst tryCatchDemo = (state: \"fail\" | \"succeed\") => {\r\n  try {\r\n    if (state === \"fail\") {\r\n      throw new Error(\"Failure!\");\r\n    }\r\n  } catch (e) {\r\n      return e.message;\r\n    }\r\n};\r\n```\r\n\r\n> TS will yell at us that: 'e' is of type 'unknown' and we want to access message on the e.\r\n\r\n> If we try to type \"e\" directly, it will yell that: Catch clause variable type annotation must be 'any' or 'unknown' if specified.\r\n\r\n```\r\nconst tryCatchDemo = (state: \"fail\" | \"succeed\") => {\r\n  try {\r\n    if (state === \"fail\") {\r\n      throw new Error(\"Failure!\");\r\n    }\r\n  } catch (e: Error) {\r\n      return e.message;\r\n    }\r\n};\r\n```\r\n\r\n> One way to fix this is:\r\n\r\n```\r\nconst tryCatchDemo = (state: \"fail\" | \"succeed\") => {\r\n  try {\r\n    if (state === \"fail\") {\r\n      throw new Error(\"Failure!\");\r\n    }\r\n  } catch (e) {\r\n    if(e instanceof Error){return e.message;}\r\n    }\r\n};\r\n```\r\n\r\n**Extending interface**\r\n\r\n> A reminder: interface is a type for objects. type can be anything, but interface can only be object.\r\n\r\n> Look at the code below, it has a duplication of id everywhere:\r\n\r\n```\r\ninterface User {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\ninterface Post {\r\n  id: string;\r\n  title: string;\r\n  body: string;\r\n}\r\n```\r\n\r\n> How can we avoid duplication? We can create Id Interface and extend the User and Post with Id.\r\n\r\n```\r\ninterface Id {\r\n  id: string\r\n}\r\n\r\ninterface User extends Id {\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\ninterface Post extends Id {\r\n  title: string;\r\n  body: string;\r\n}\r\n```\r\n\r\n> Please note that extends is only available for interfaces, and not for types.\r\n\r\n> Why is it usefull? If I change my mind and I want id to be number, I can then only change it in one place instead of multiple.\r\n\r\n> we can use extends with more items:\r\n\r\n```\r\ninterface Post extends Id, User {\r\n    title: string;\r\n  body: string;\r\n}\r\n```\r\n\r\n**Object intersection**\r\n\r\n> This combines objects. Imagine we have a scenario like this:\r\n\r\n```\r\ninterface User {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\ninterface Post {\r\n  title: string;\r\n  body: string;\r\n}\r\nexport const getDefaultUserAndPosts = (): unknown => {\r\n  return {\r\n    id: \"1\",\r\n    firstName: \"Matt\",\r\n    lastName: \"Pocock\",\r\n    posts: [\r\n      {\r\n        title: \"How I eat so much cheese\",\r\n        body: \"It's pretty edam difficult\",\r\n      },\r\n    ],\r\n  };\r\n};\r\n```\r\n\r\n> How do we type this return statement instead of unknown so it's both User AND { posts: Post[] }?\r\n\r\n> We can do it like this:\r\n\r\n```\r\ninterface User {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\ninterface Post {\r\n  title: string;\r\n  body: string;\r\n}\r\nexport const getDefaultUserAndPosts = (): User & { posts: Array<Post> } => {\r\n  return {\r\n    id: \"1\",\r\n    firstName: \"Matt\",\r\n    lastName: \"Pocock\",\r\n    posts: [\r\n      {\r\n        title: \"How I eat so much cheese\",\r\n        body: \"It's pretty edam difficult\",\r\n      },\r\n    ],\r\n  };\r\n};\r\n\r\n```\r\n\r\n> This little operator & is called intersection and it allows us to combine types. (While extends allows for inheritance)\r\n\r\n> We can intersect more things: User & { posts: Array<Post> } & { age: number }\r\n\r\n**Pick**\r\n\r\n> What if we have a type like this:\r\n\r\n```\r\ninterface User {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n```\r\n\r\n> and we want to create a new type which will contain everything except for id?\r\n> We can use omit to do that:\r\n\r\n```\r\ntype MyType = Omit<User, \"id\">\r\n```\r\n\r\n> We can omit multiple items:\r\n\r\n```\r\ntype MyType = Omit<User, \"id\", \"firstName\">\r\n```\r\n\r\n**Pick**\r\n\r\n> Maybe we want to only get 1 single property form already defined type.\r\n\r\n> Image we only want property lastName from User:\r\n\r\n```\r\ninterface User {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n```\r\n\r\n> We can then use pick utility in TS to do so:\r\n\r\n```\r\ntype MyType = Pick<User, \"lastName\">\r\n```\r\n\r\n**Typing Asynch functions**\r\n\r\n> Imagine you have a situation like this:\r\n\r\n```\r\ninterface User {\r\n  id: string;\r\n  lastName: string;\r\n}\r\n\r\nconst createThenGetUser = async (\r\n  createUser: unknown,\r\n  getUser: unknown,\r\n): Promise<User> => {\r\n  const userId: string = await createUser();\r\n  const user = await getUser(userId);\r\n  return user;\r\n};\r\n```\r\n\r\n> You want to replace unknowns with proper type:\r\n\r\n```\r\ninterface User {\r\n  id: string;\r\n  lastName: string;\r\n}\r\n\r\nconst createThenGetUser = async (\r\n  createUser: () => Promise<string>,\r\n  getUser: (id: string) => Promise<User>\r\n): Promise<User> => {\r\n  const userId: string = await createUser();\r\n  const user = await getUser(userId);\r\n  return user;\r\n};\r\n```\r\n\r\n**Return type of function**\r\n\r\n> How can we say to TS to take the type from a return statement of a function?\r\n\r\n```\r\nconst myFunc = () => {\r\n  return 123;\r\n};\r\n```\r\n\r\n> We can use ReturnType helper and typeof\r\n\r\n```\r\ntype MyFuncReturn = ReturnType<typeof myFunc>;\r\n```\r\n\r\n**Arguments type of function**\r\n\r\n> How can we say to TS to take the type from arguments of a function?\r\n\r\n```\r\nfunction sum(a: number, b: string): string {\r\n  return a + b;\r\n}\r\n```\r\n\r\n> We want a type called SumParams which will be [a: number, b: string]. We will use helper Parameters for if and it will return us a tuple.\r\n\r\n```\r\ntype SumParams = Parameters<typeof sum>;\r\n```\r\n\r\n> type FirstParam will be number\r\n\r\n```\r\ntype FirstParam = SumParams[0];\r\n```\r\n\r\n> type SecondParam will be string\r\n\r\n```\r\ntype SecondParam = SumParams[1];\r\n```\r\n\r\n> This is useful to type stuff which is not in my control, for example from 3rd party libraries\r\n\r\n**Awaited**\r\n\r\n> What if we have an asynch function which returns a promise, but we want to extract a type from it without the Promise.\r\n\r\n```\r\ntype A = Promise<string>;\r\n```\r\n\r\n> Awaited helps us to unwrap the promise\r\n\r\n```\r\ntype B = Awaited<A> // string\r\n```\r\n\r\n**Extracting keys from an object**\r\n\r\n> Imagine we have an object like this:\r\n\r\n```\r\nconst testingFrameworks = {\r\n  vitest: {\r\n    label: \"Vitest\",\r\n  },\r\n  jest: {\r\n    label: \"Jest\",\r\n  },\r\n  mocha: {\r\n    label: \"Mocha\",\r\n  },\r\n};\r\n```\r\n\r\n> And we want to extract a union type of its keys: \"vitest\" | \"jest\" | \"mocha\"\r\n\r\n> We will use keyof typeof for this:\r\n\r\n```\r\ntype TestingFramework = keyof typeof testingFrameworks;\r\n```\r\n\r\n**Union, Discriminated union and Enum**\r\n\r\n> What is difference between Union, Discriminated union and Enum\r\n\r\n> A is a discriminated union, with 'type' as the discriminator. Discriminated unions have common properties which are used to differentiate between members of the union. In this case, type is the discriminator.\r\n\r\n```\r\ntype A =\r\n  | {\r\n      type: \"a\";\r\n      a: string;\r\n    }\r\n  | {\r\n      type: \"b\";\r\n      b: string;\r\n    }\r\n  | {\r\n      type: \"c\";\r\n      c: string;\r\n    };\r\n```\r\n\r\n> B is a union, but not a discriminated union.\r\n\r\n```\r\ntype B = \"a\" | \"b\" | \"c\";\r\n```\r\n\r\n> C is an enum.\r\n\r\n```\r\nenum C {\r\n  A = \"a\",\r\n  B = \"b\",\r\n  C = \"c\",\r\n}\r\n```\r\n\r\n**Extract**\r\n\r\n> Now how can we extract one piece of info from discriminated union? Imagine we have a disc. union of type A:\r\n\r\n```\r\ntype A =\r\n  | {\r\n      type: \"a\";\r\n      a: string;\r\n    }\r\n  | {\r\n      type: \"b\";\r\n      b: string;\r\n    }\r\n  | {\r\n      type: \"c\";\r\n      c: string;\r\n    };\r\n```\r\n\r\n> and we want to extract such a type for \"a\":\r\n\r\n```\r\ntype Extracted = Extract<A, { type: 'a' }>\r\n\r\n```\r\n\r\n> Extract is a type helper and super useful. Another example:\r\n\r\n```\r\nexport type Event =\r\n  | {\r\n      type: \"click\";\r\n      event: MouseEvent;\r\n    }\r\n  | {\r\n      type: \"focus\";\r\n      event: FocusEvent;\r\n    }\r\n  | {\r\n      type: \"keydown\";\r\n      event: KeyboardEvent;\r\n    };\r\n\r\ntype ClickEvent = Extract<Event, { type: \"click\" }>;\r\n```\r\n\r\n> We can also grab event, or any other property:\r\n\r\n```\r\ntype FocussEvent = Extract<Event, { event: KeyboardEvent }>\r\n```\r\n\r\n> It also work not only on objects but also on unions, etc\r\n\r\n```\r\ntype Fruit = \"apple\" | \"banana\" | \"orange\"\r\ntype Exotic = Extract<Fruit, \"banana\" | \"orange\">\r\n```\r\n\r\n**_Exclude_**\r\n\r\n> It is reverse of Extract. It is useful for discriminated unions. It specifies which property you dont want:\r\n\r\n```\r\nexport type Event =\r\n  | {\r\n      type: \"click\";\r\n      event: MouseEvent;\r\n    }\r\n  | {\r\n      type: \"focus\";\r\n      event: FocusEvent;\r\n    }\r\n  | {\r\n      type: \"keydown\";\r\n      event: KeyboardEvent;\r\n    };\r\n\r\ntype NonKeyDownEvents = Exclude<Event, { type: \"keydown\" }>;\r\n```\r\n\r\n**Indexed access type - Object values of keys**\r\n\r\n> What if I have an object like this:\r\n\r\n```\r\nconst fakeDataDefaults = {\r\n  String: \"Default string\",\r\n  Int: 1,\r\n  Float: 1.14,\r\n  Boolean: true,\r\n  ID: \"id\",\r\n};\r\n```\r\n\r\n> And I want to extract the type for a specific key?\r\n\r\n```\r\ntype StringType = typeof fakeDataDefaults[\"String\"];\r\ntype IntType = typeof fakeDataDefaults[\"Int\"];\r\ntype FloatType = typeof fakeDataDefaults[\"Float\"];\r\ntype BooleanType = typeof fakeDataDefaults[\"Boolean\"];\r\ntype IDType = typeof fakeDataDefaults[\"ID\"];\r\n```\r\n\r\n> Or alternatively:\r\n\r\n```\r\ntype FakeDataDefaults = typeof fakeDataDefaults;\r\n\r\ntype StringType = FakeDataDefaults[\"String\"];\r\ntype IntType = FakeDataDefaults[\"Int\"];\r\ntype FloatType = FakeDataDefaults[\"Float\"];\r\ntype BooleanType = FakeDataDefaults[\"Boolean\"];\r\ntype IDType = FakeDataDefaults[\"ID\"];\r\n```\r\n\r\n> We can even access object inside objecz on this way:\r\n\r\n```\r\nconst fakeData = {\r\n  String: \"Default string\",\r\n  Int: 1,\r\n  Float: 1.14,\r\n  Boolean: true,\r\n  ID: {\r\n    job: \"driver\"\r\n  },\r\n};\r\n\r\ntype Job = typeof fakeData[\"ID\"][\"job\"]\r\n\r\n```\r\n\r\n**Accessing prop on discriminated union**\r\n\r\n> If I have an object like this::\r\n\r\n```\r\ntype Event =\r\n  | {\r\n      type: \"click\";\r\n      event: MouseEvent;\r\n    }\r\n  | {\r\n      type: \"focus\";\r\n      event: FocusEvent;\r\n    }\r\n  | {\r\n      type: \"keydown\";\r\n      event: KeyboardEvent;\r\n    };\r\n\r\n```\r\n\r\n> and I want to extract a type from it of: \"click\" | \"focus\" | \"keydown\"?\r\n\r\n```\r\ntype EventType = Event[\"type\"];\r\n```\r\n\r\n> If you access a key on a union, you are accessing all permutations of that key.\r\n\r\n> It would not work if one of the elements in the union would miss \"type\". It works well in discriminated unions using discriminators.\r\n\r\n**As const annotation**\r\n\r\n> Imagine we enum like this:\r\n\r\n```\r\nconst programModeEnumMap = {\r\n  GROUP: \"group\",\r\n  ANNOUNCEMENT: \"announcement\",\r\n  ONE_ON_ONE: \"1on1\",\r\n  SELF_DIRECTED: \"selfDirected\",\r\n  PLANNED_ONE_ON_ONE: \"planned1on1\",\r\n  PLANNED_SELF_DIRECTED: \"plannedSelfDirected\",\r\n};\r\n```\r\n\r\n> We want to access the type on GROUP key:\r\n\r\n```\r\ntype GroupProgram = typeof programModeEnumMap[\"GROUP\"]\r\n```\r\n\r\n> But this resolves to string and not \"group\". Why? Because this enum can be altered. For example lik ethis:\r\n\r\n```\r\nprogramModeEnumMap.GROUP = \"party\"\r\n```\r\n\r\n> This is mutable. So it must be typed as string.\r\n\r\n> How can we make the programModeEnumMap to resolve to literal values instead of generic values?\r\n\r\n```\r\nconst programModeEnumMap = {\r\n  GROUP: \"group\",\r\n  ANNOUNCEMENT: \"announcement\",\r\n  ONE_ON_ONE: \"1on1\",\r\n  SELF_DIRECTED: \"selfDirected\",\r\n  PLANNED_ONE_ON_ONE: \"planned1on1\",\r\n  PLANNED_SELF_DIRECTED: \"plannedSelfDirected\",\r\n} as const;\r\n```\r\n\r\n> As const freezes values and makes them resolve to their literal types. It also adds readonly annotation to the enum as well. This means it turns it into immutable. Its values cannot be changed\r\n\r\n> Same is true just for arrays. They are infered as array of numbers for example.\r\n\r\n```\r\nconst myArr = [1,2,3]\r\ntype MyArr = typeof myArr // Array<number>\r\n```\r\n\r\n> Why? Because I can do:\r\n\r\n```\r\nmyArr[0]\r\nmyArr.push(123)\r\n```\r\n\r\n> But if I add as const to the array, I wont be able to modify the array\r\n\r\n```\r\nconst myArr = [1, 2, 3] as const;\r\n```\r\n\r\n> This array will be readonly and its type will be [1, 2, 3]\r\n\r\n> Another way how to freeze an object is Object.freeze():\r\n\r\n```\r\nconst programModeEnumMap = Object.freeze({\r\n  GROUP: \"group\",\r\n  ANNOUNCEMENT: \"announcement\",\r\n  ONE_ON_ONE: \"1on1\",\r\n  SELF_DIRECTED: \"selfDirected\",\r\n  PLANNED_ONE_ON_ONE: \"planned1on1\",\r\n  PLANNED_SELF_DIRECTED: \"plannedSelfDirected\",\r\n});\r\n```\r\n\r\n> Object.freeze only works on the first level of object -> it does not go deeper. As const goes all the way down.\r\n\r\n**Indexed Access with Union**\r\n\r\n> Imagine we have an object like this:\r\n\r\n```\r\nconst programModeEnumMap = {\r\n  GROUP: \"group\",\r\n  ANNOUNCEMENT: \"announcement\",\r\n  ONE_ON_ONE: \"1on1\",\r\n  SELF_DIRECTED: \"selfDirected\",\r\n  PLANNED_ONE_ON_ONE: \"planned1on1\",\r\n  PLANNED_SELF_DIRECTED: \"plannedSelfDirected\",\r\n}\r\n```\r\n\r\n> And we want to create a union of \"1on1\" | \"selfDirected\" | \"planned1on1\"\r\n\r\n> One lame way to do it:\r\n\r\n```\r\ntype Program = typeof programModeEnumMap;\r\nexport type IndividualProgram =\r\n  | Program[\"ONE_ON_ONE\"]\r\n  | Program[\"SELF_DIRECTED\"]\r\n  | Program[\"PLANNED_ONE_ON_ONE\"];\r\n```\r\n\r\n> Better way is like this:\r\n\r\n```\r\ntype Program = typeof programModeEnumMap;\r\nexport type IndividualProgram = Program[\"ONE_ON_ONE\" | \"SELF_DIRECTED\" | \"PLANNED_ONE_ON_ONE\"]\r\n\r\n```\r\n\r\n> Notice that we can pass a union to the indexed access :)\r\n\r\n**Accessing types of object values**\r\n\r\n> Imagine we have an object like this:\r\n\r\n```\r\nconst frontendToBackendEnumMap = {\r\n  singleModule: \"SINGLE_MODULE\",\r\n  multiModule: \"MULTI_MODULE\",\r\n  sharedModule: \"SHARED_MODULE\",\r\n} as const;\r\n```\r\n\r\n> And we want to infer type from the values as a union: \"SINGLE_MODULE\" | \"MULTI_MODULE\" | \"SHARED_MODULE\"\r\n\r\n> We can do it like this:\r\n\r\n```\r\ntype BackendModuleEnum =\r\n  typeof frontendToBackendEnumMap[keyof typeof frontendToBackendEnumMap];\r\n```\r\n\r\n> We can make it nicer:\r\n\r\n```\r\ntype Obj = typeof frontendToBackendEnumMap\r\ntype BackendModuleEnum = Obj[keyof Obj]\r\n```\r\n\r\n> We coud achieve them same if we do this:\r\n\r\n```\r\ntype   BackendModuleEnum = Obj[\"SINGLE_MODULE\" | \"MULTI_MODULE\" | \"SHARED_MODULE\"]\r\n```\r\n\r\n> But in this case the type will not be up-to-date if anything changes\r\n\r\n**Creating union out of array**\r\n\r\n> Imagine we have an array:\r\n\r\n```\r\nconst fruits = [\"apple\", \"banana\", \"orange\"] as const;\r\n```\r\n\r\n> And we want to get from there a union of \"apple\" | \"banana\":\r\n\r\n```\r\ntype AppleOrBanana = typeof fruits[0 | 1];\r\n```\r\n\r\n> What if we want union of all fruits? \"apple\" | \"banana\" | \"orange\"\r\n\r\n> We can do it in a lame way like this:\r\n\r\n```\r\ntype Fruit = typeof fruits[0 | 1 | 2];\r\n```\r\n\r\n> More elegant though is:\r\n\r\n```\r\ntype Fruit = typeof fruits[number];\r\n```\r\n\r\n> The word number lets you access any member of the array, no matter how long it is\r\n\r\n**Template literals**\r\n\r\n> Imagine we have a function which takes in an argument called route of a type Route:\r\n\r\n```\r\nexport const goToRoute = (route: Route) => {};\r\n```\r\n\r\n> We want to type Route to accept any string which starts with a slash:\r\n\r\n```\r\ngoToRoute(\"/users\");\r\ngoToRoute(\"/\");\r\ngoToRoute(\"/admin/users\");\r\n```\r\n\r\n> We can use template literals for that which are denoted by a backtick:\r\n\r\n```\r\ntype Route = `/${string}`;\r\n```\r\n\r\n> Or similarly\r\n\r\n```\r\ntype MyString = string\r\ntype Route = `/${MyString}`;\r\n```\r\n\r\n> Syntax is similar to Javascript template literal, except we can also pass in types\r\n\r\n> Imagine you have these two types:\r\n\r\n```\r\ntype BreadType = \"rye\" | \"brown\" | \"white\";\r\n\r\ntype Filling = \"cheese\" | \"ham\" | \"salami\";\r\n```\r\n\r\n> And you want to create a type of them which will be like this:\r\n\r\n```\r\ntype Sandwich =\r\n      | \"rye sandwich with cheese\"\r\n      | \"rye sandwich with ham\"\r\n      | \"rye sandwich with salami\"\r\n      | \"brown sandwich with cheese\"\r\n      | \"brown sandwich with ham\"\r\n      | \"brown sandwich with salami\"\r\n      | \"white sandwich with cheese\"\r\n      | \"white sandwich with ham\"\r\n      | \"white sandwich with salami\"\r\n```\r\n\r\n> We can do it simply as this:\r\n\r\n```\r\ntype Sandwich = `${BreadType} sandwich with ${Filling}`;\r\n```\r\n\r\n> Now imagine that we have some type Routes:\r\n\r\n```\r\ntype Routes = \"/users\" | \"/users/:id\" | \"/posts\" | \"/posts/:id\";\r\n```\r\n\r\n> We want to create a type DynamicRoutes from Routes type, but only those which contain `:`\r\n\r\n```\r\ntype DynamicRoutes =  \"/users/:id\" | \"/posts/:id\";\r\n```\r\n\r\n> How to do it? We can use Extract helper function which takes 2 parameters: first the type from which we are extracting and second parameter type which will narrow it down\r\n\r\n```\r\ntype Routes = \"/users\" | \"/users/:id\" | \"/posts\" | \"/posts/:id\";\r\n\r\ntype WithDots = `${string}:${string}`;\r\ntype DynamicRoutes = Extract<Routes, WithDots>;\r\n```\r\n\r\n> Alternatively:\r\n\r\n```\r\ntype DynamicRoutes = Extract<Routes, `${string}:${string}`>;\r\n```\r\n\r\n> We can think of template literals almost like a regEx for Typescript :)\r\n\r\n> Template literals are powerful for string manipulations\r\n\r\n> Now lets talk about converting a template literal into keys in an object.\r\n\r\n> Imagine template literal type defined as this:\r\n\r\n```\r\ntype TemplateLiteralKey = `${\"user\" | \"post\" | \"comment\"}${\"Id\" | \"Name\"}`;\r\n```\r\n\r\n> Resulting type is:\r\n\r\n```\r\nuserId | userName | postId | postName | commentId | commentName\r\n\r\n```\r\n\r\n> What if we now want to create an object where we take those as keys?\r\n\r\n```\r\ntype ObjectOfKeys =  {\r\n        userId: string;\r\n        userName: string;\r\n        postId: string;\r\n        postName: string;\r\n        commentId: string;\r\n        commentName: string;\r\n}\r\n```\r\n\r\n> Answer:\r\n\r\n```\r\ntype ObjectOfKeys = {\r\n  [key in TemplateLiteralKey]: string;\r\n};\r\n\r\n```\r\n\r\n> Alternatively use Record:\r\n\r\n```\r\ntype ObjectOfKeys = Record<TemplateLiteralKey, string>;\r\n```\r\n\r\n**Record**\r\n\r\n> Record allows us to create an object based on the type of key and type of value.\r\n\r\n> Official documentation says: A Record<K, T> is an object type whose property keys are K and whose property values are T. That is, keyof Record<K, T> is equivalent to K, and Record<K, T>[K] is (basically) equivalent to T.\r\n\r\n```\r\ntype Record<K extends string, T> = {\r\n    [P in K]: T;\r\n}\r\n```\r\n\r\n**TS-TOOLBELT**\r\n\r\n> TS-TOOLBELT is a small library which contains for example a Split function which allows you to split a string based on a character on a type level.\r\n\r\n> Here is documentation: https://millsp.github.io/ts-toolbelt/modules/string_split.html\r\n\r\n> This is what you import:\r\n\r\n```\r\nimport { S } from \"ts-toolbelt\";\r\n```\r\n\r\n> Imagine you have this string\r\n\r\n```\r\ntype Path = \"Users/John/Documents/notes.txt\";\r\n```\r\n\r\n> And we want to split it by slash /\r\n\r\n> Resulting type should be an array of its elements:\r\n\r\n```\r\ntype Result =  [\"Users\", \"John\", \"Documents\", \"notes.txt\"]\r\n```\r\n\r\n> How to do it? Here is how:\r\n\r\n```\r\nimport { S } from \"ts-toolbelt\";\r\n\r\ntype Path = \"Users/John/Documents/notes.txt\";\r\n\r\ntype SplitPath = S.Split<Path, \"/\">;\r\n```\r\n\r\n**UPPERCASE**\r\n\r\n> What if we have a string literal type and we want to make it uppercase?\r\n\r\n```\r\ntype Greeting = \"Hello, world\"\r\n```\r\n\r\n> We can use utility function called Uppercase:\r\n\r\n```\r\ntype ShoutyGreeting = Uppercase<Greeting>\r\n```\r\n\r\n> It will equal to:\r\n\r\n```\r\ntype ShoutyGreeting = \"HELLO, WORLD\"\r\n```\r\n\r\n> Another example. Imagine we have such type:\r\n\r\n```\r\ntype Event = `log_in` | \"log_out\" | \"sign_up\";\r\n```\r\n\r\n> And we want ot create an object of it that will look like this:\r\n\r\n```\r\ntype ObjectOfKeys = {\r\n        LOG_IN: string;\r\n        LOG_OUT: string;\r\n        SIGN_UP: string;\r\n      }\r\n```\r\n\r\n> How to do it? Here find the solutio:\r\n\r\n```\r\ntype ObjectOfKeys = Record<Uppercase<Event>, string>;\r\n```\r\n\r\n> Similarly, we have Lowercase or Capitalize\r\n\r\n**Generics - type functions / type helpers**\r\n\r\n> How can I tell to typescript that Whatever type I pass in, I want that to be returned?\r\n\r\n```\r\ntype ReturnWhatIPassIn<T> = T;\r\n```\r\n\r\n> ReturnWhatIPassIn creates a variable called T but it can have any name.\r\n\r\n> When I pass in \"miau\", it will return \"miau\"\r\n\r\n> If I pass in true, it will return true\r\n\r\n```\r\ntype Miau = ReturnWhatIPassIn<\"miau\">\r\ntype Twelve = ReturnWhatIPassIn<12>\r\ntype False = ReturnWhatIPassIn<false>\r\n```\r\n\r\n> This allows us to create functions which return other types\r\n\r\n```\r\ntype ReturnWhatIPassIn<T> = T;\r\n```\r\n\r\n> `ReturnWhatIPassIn` is name of function\r\n\r\n> `<T>` is agument to the function\r\n\r\n> `T` is what the function returns\r\n\r\n> `type Miau = string` is a static type\r\n\r\n> If I add `<T>` to the type, I convert it to a function: `type Miau<T> = T`\r\n\r\n> If we remove `<T>` from `ReturnWhatIPassIn` it would no longer be a function, it would be a static value:\r\n\r\n```\r\ntype ReturnWhatIPassIn = 12\r\n```\r\n\r\n> We can add as many arguments to the function as I want:\r\n\r\n```\r\ntype ReturnWhatIPassIn<T, K, U> = T;\r\n```\r\n\r\n> I can give it default values\r\n\r\n> Imagine this example where we want to have a generic which will take the value and add / to its front:\r\n\r\n```\r\ntype AddRoutePrefix<TRoute> = `/${TRoute}`;\r\n\r\nAddRoutePrefix<\"about\"> will be \"/about\"\r\nAddRoutePrefix<\"\"> will be \"/\"\r\nAddRoutePrefix<\"about/team\"> will be \"/about/team\"\r\n\r\n```\r\n\r\n> There is a problem that this will also work with numbers and booleans and TS will not complain:\r\n\r\n```\r\nAddRoutePrefix<boolean>\r\nAddRoutePrefix<number>\r\n```\r\n\r\n> How can we limit this only to strings?\r\n\r\n```\r\ntype AddRoutePrefix<TRoute extends string> = `/${TRoute}`;\r\n```\r\n\r\n> The syntax extends is like gving a type to the Type Parameter. We can imagine it as if it was really a function:\r\n\r\n```\r\nconst addRoutePrefix = (route: string) => {}\r\n```\r\n\r\n> What if our Type Helper should work with more arguments?\r\n\r\n```\r\ntype CreateDataShape<T, U> = {\r\n  data: T;\r\n  error: U;\r\n};\r\n```\r\n\r\n> Now imagine that we not always want to pass in the U and if we dont pass it, then we want it to be undefined.\r\n\r\n```\r\ntype CreateDataShape<T, U = undefined> = {\r\n  data: T;\r\n  error: U;\r\n};\r\n```\r\n\r\n> Then we can use this in 2 different ways:\r\n\r\n```\r\ntype MyNewType = CreateDataShape<string>\r\ntype MyNewType = CreateDataShape<string, number>\r\n```\r\n\r\n> What if I know that I will always pass a function to my type?\r\n\r\n```\r\ntype GetParametersAndReturnType<T extends (a: any, b: any) => any> = {\r\n  params: Parameters<T>;\r\n  returnValue: ReturnType<T>;\r\n};\r\n```\r\n\r\n> Look at the type above and its usage below:\r\n\r\n```\r\ntype MyType1 = GetParametersAndReturnType<() => string>\r\n// { params: []; returnValue: string }\r\n\r\ntype MyType2 = GetParametersAndReturnType<(s: string) => void>\r\n// { params: [string]; returnValue: void }\r\n\r\ntype MyType3 = GetParametersAndReturnType<(n: number, b: boolean) => number>\r\n// { params: [number, boolean]; returnValue: number }\r\n```\r\n\r\n> This will work with 2 parameters, but what if we need more?\r\n\r\n```\r\ntype GetParametersAndReturnType<T extends (...args: any) => any> = {\r\n  params: Parameters<T>;\r\n  returnValue: ReturnType<T>;\r\n};\r\n```\r\n\r\n> Not there is a mind blowing type for generics where we want to make sure we can pass in anything EXCEPT for null or undefined\r\n\r\n> We will start with a code like this:\r\n\r\n```\r\nexport type Maybe<T> = T | null | undefined;\r\n```\r\n\r\nWe want that all these tests pass\r\n\r\n```\r\ntype Yes1 = Maybe<string>,\r\ntype Yes2 = Maybe<false>,\r\ntype Yes3 = Maybe<0>,\r\ntype Yes4 = Maybe<\"\">,\r\n```\r\n\r\n> But these test should fail:\r\n\r\n```\r\ntype No1 = Maybe<null>,\r\ntype No2 = Maybe<undefined>,\r\n```\r\n\r\n> And we want to narrow down T to be anything except for null or undefined:\r\n\r\n```\r\nexport type Maybe<T extends string | number | boolean> = T | null | undefined;\r\n```\r\n\r\n> But another mind-blowing way to do it is here:\r\n\r\n```\r\nexport type Maybe<T extends {}> = T | null | undefined;\r\n```\r\n\r\n> `{}` in typescript has a very special meaning. It represents anything that is not null or undefined. It is different from truthy values, cause we can pass there false or 0\r\n\r\n> Actually if we type something as an empty object, we can assign a string, or number to it\r\n\r\n```\r\nconst whatever: {} = \"abc\"\r\nconst whatever: {} = 123\r\nconst whatever: {} = false\r\nconst whatever: {} = 0\r\nconst whatever: {} = true\r\nconst whatever: {} = {}\r\nconst whatever: {} = []\r\n```\r\n\r\n> Why is it? Everything in Javascript is an object - array, string with various methods, etc.\r\n\r\n> Moreover, Typescript does structural comparisons when checking if something is comparable. If I need a type: { name: string }, it does not care that I pass { name: string, surname: string, age: number }. It only cares about the name being present and all additional properties are ignored. So if I have a type of empty object {}, I can pass any property in there.\r\n\r\n> null and undefined are not objects. whereas false is still an object, 0 is an object\r\n\r\n> Now how to declare a type which is a non-empty array?\r\n\r\n> If we do this:\r\n\r\n```\r\ntype NonEmpty<T> = Array<T>\r\n```\r\n\r\n> then we actually can pass empty array\r\n\r\n> We could use tuples for that:\r\n\r\n```\r\ntype NonEmpty<T> = [T, T, T]\r\n```\r\n\r\n> but then we would need to know exactly the length of that array, but if we want to be more flexible and to allow for any length, then it wont work.\r\n\r\n> A neat trick is to us following syntax with rest parameter:\r\n\r\n```\r\ntype NonEmpty<T> = [ T, ...T[]]\r\n```\r\n\r\n> Or similarly:\r\n\r\n```\r\ntype NonEmpty<T> = [ T, ...Array<T>]\r\n```\r\n\r\n> This syntax means that I need to have at least one element in the array and then as many as I like, even 0\r\n\r\n> If we want an array that needs to have at least 2 parameters:\r\n\r\n```\r\ntype NonEmpty<T> = [ T, T, ...Array<T>]\r\n```\r\n\r\n**Conditional types**\r\n\r\n> Now how can we conditionally render a type?\r\n\r\n> Imagine if I pass \"hello\" to my type, I want to return \"goodbye\" and if I pass \"goodbye\", I want to return \"hello\"\r\n\r\n```\r\ntype YouSayGoodbyeAndISayHello<T> = T extends \"hello\" ? \"goodbye\" : \"hello\";\r\n\r\ntype MyType = YouSayGoodbyeAndISayHello<\"hello\"> // \"goodbye\"\r\ntype MyType = YouSayGoodbyeAndISayHello<\"goodbye\"> // \"hello\"\r\n```\r\n\r\n> In this context `T extends \"hello\"` is actually a logical check. Does T extend \"hello\"?\r\n\r\n> This conditional type is mega powerful and turns typescript from just some static type checks to a its own language\r\n\r\n> Ternary statements can be nested :)\r\n\r\n**Infer**\r\n\r\n> `infer` keyword is often being used in conditional types\r\n\r\n> Imagine we want to create a type that will accept { data: \"ABC\" } and it will return \"ABC\"\r\n\r\n> If it accepts { data: { name: \"DEF\"} }, it will return { name: \"DEF\"}\r\n\r\n> We can do it like this:\r\n\r\n```\r\ntype GetDataValue<T> = T extends { data: infer E } ? E : never;\r\n\r\ntype No = GetDataValue<string> // returns never cause we didnt pass object with data\r\ntype Yes1 = GetDataValue<{ data: \"hello\" }> // returns \"hello\"\r\ntype Yes2 = GetDataValue<{ data: { name: \"hello\" } }> // returns { name: \"hello\" }\r\ntype Yes3 = GetDataValue<{ data: { name: \"hello\"; age: 20 } }> // returns { name: \"hello\"; age: 20 }\r\n```\r\n\r\n> how does the infer keyrowd work? Whatever is passed into the data key in an object, the TS will infer its type and save it to a variable called E (can be any name). We can then use that variable later to say what the function should return in case this condition is true!\r\n\r\n> Notice that the E will only be defined for the positive branch and not in the else case. Because in else case, E is not declared. SO we cant do this:\r\n\r\n```\r\ntype GetDataValue<T> = T extends { data: infer E } ? E : E; // ERROR E is not declared\r\n```\r\n\r\n> This whole infer allows us to declare a new type variable inside of the conditional check.\r\n\r\n> Another way to do this is exercise is:\r\n\r\n```\r\ntype GetDataValue<T> = T extends { data: any } ? T[\"data\"] : never;\r\n```\r\n\r\n**Template literals with infer**\r\n\r\n> Imagine we have type like this:\r\n\r\n```\r\ntype Names = [\r\n  \"Matt Pocock\",\r\n  \"Jimi Hendrix\",\r\n  \"Eric Clapton\",\r\n  \"John Mayer\",\r\n  \"BB King\",\r\n];\r\n```\r\n\r\n> and we want to infer another type from it which will be Pocock, Handrix, Claptop, Mayer\r\n\r\n```\r\ntype GetSurname<T> = unknow\r\n type New1 = GetSurname<Names[0]> // returns \"Pocock\"\r\n type New2 = GetSurname<Names[1]> // returns \"Hendrix\"\r\n type New3 = GetSurname<Names[2]> // returns \"Clapton\"\r\n type New4 = GetSurname<Names[3]> // returns \"Mayer\"\r\n type New5 = GetSurname<Names[4]> // returns \"King\"\r\n```\r\n\r\n> How ot declare the GetSurname type?\r\n\r\n> One way is using S and spliting it:\r\n\r\n```\r\nimport { S } from \"ts-toolbelt\";\r\ntype GetSurname<T extends string> = S.Split<T, \" \">[1];\r\n```\r\n\r\n> But we can also use template literal and word infer:\r\n\r\n```\r\ntype GetSurname<T> = T extends `${infer First} ${infer Last}` ? Last : never;\r\n```\r\n\r\n**Mapped types**\r\n\r\n> Imagine we have a union type:\r\n\r\n```\r\ntype Route = \"/\" | \"/about\" | \"/admin\" | \"/admin/users\";\r\n```\r\n\r\n> And we want to create a type for an object where both keys and values will be the members of the union:\r\n\r\n```\r\ntype Result = {\r\n        \"/\": \"/\";\r\n        \"/about\": \"/about\";\r\n        \"/admin\": \"/admin\";\r\n        \"/admin/users\": \"/admin/users\";\r\n}\r\n```\r\n\r\n> In order to do this we can use mapped types which iterated through each member of a union, defines a variable, for example Key and then allows us to use this variable:\r\n\r\n```\r\ntype RoutesObject = {\r\n  [Key in Route]: Key;\r\n};\r\n```\r\n\r\n> Variable name is anything we want\r\n\r\n```\r\ntype RoutesObject = {\r\n  [R in Route]: R;\r\n};\r\n```\r\n\r\n> What `in` basically does is for every member of a union, extract R and add it as a key and value\r\n\r\n> We can also use it like this:\r\n\r\n```\r\ntype RoutesObject = {\r\n  [Key in \"hi\" | \"there\"]: Key;\r\n};\r\n```\r\n\r\n> It would resolve into an object\r\n\r\n```\r\n{\r\n  hi: \"hi\",\r\n  there: \"there\",\r\n}\r\n```\r\n\r\n> Values also dont need to be same as keys:\r\n\r\n```\r\ntype RoutesObject = {\r\n  [Key in \"hi\" | \"there\"]: string;\r\n};\r\n```\r\n\r\n> Mapped types also work with objects. Imagine we have an object type like this:\r\n\r\n```\r\ninterface Attributes {\r\n  firstName: string;\r\n  lastName: string;\r\n  age: number;\r\n}\r\n```\r\n\r\n> And we want to extract from it a type that will look like this:\r\n\r\n```\r\n{\r\n  firstName: () => string;\r\n  lastName: () => string;\r\n  age: () => number;\r\n}\r\n```\r\n\r\n> We can do it like this:\r\n\r\n```\r\ntype AttributeGetters = {\r\n  [K in keyof Attributes]: () => Attributes[K];\r\n};\r\n```\r\n\r\n> Keyof Attributes also creates a union of all the keys in Attribute type\r\n\r\n> We can even create a same type as Attributes using mapped type:\r\n\r\n```\r\ntype MyNewAttribute = {\r\n  [K in keyof Attributes]: Attributes[K];\r\n};\r\n```\r\n\r\n> MyNewAttribute is now equivalent type as Attribute. Why would we want to do that? If we needed a new type where all keys are optional or readonly:\r\n\r\n```\r\ntype MyNewAttribute = {\r\n  [K in keyof Attributes]?: Attributes[K];\r\n};\r\n\r\ntype MyNewAttribute = {\r\n  readonly [K in keyof Attributes]: Attributes[K];\r\n};\r\n```\r\n\r\n> now what if we want to rename the keys of the new object type?\r\n\r\n```\r\ntype NowThis = {\r\n        getFirstName: () => string;\r\n        getLastName: () => string;\r\n        getAge: () => number;\r\n }\r\n```\r\n\r\n> We can use as property which allows us to use template literals\r\n\r\n```\r\ntype AttributeGetters = {\r\n  [K in keyof Attributes as `get${Capitalize<K>}`]: () => Attributes[K];\r\n};\r\n```\r\n\r\n> This `as` works as a remapper\r\n\r\n> Now if we have an object type like this\r\n\r\n```\r\ninterface Attributes {\r\n  greet1: [ \"hi\", \"there\" ];\r\n  greet2: [ \"hello\", \"you\" ];\r\n}\r\n```\r\n\r\n> And we wanted to extract a type that would be\r\n\r\n```\r\ntype GreetOnly = {\r\n  greet1: \"hi\";\r\n  greet2: \"hello\";\r\n}\r\n```\r\n\r\n> We can do it like this\r\n\r\n```\r\ntype NewType = {\r\n  [K in keyof Attributes]: Attributes[K][0]\r\n}\r\n```\r\n\r\n> Now imagine we have a type like this:\r\n\r\n```\r\ninterface Example {\r\n  name: string;\r\n  age: number;\r\n  id: string;\r\n  organisationId: string;\r\n  groupId: string;\r\n}\r\n```\r\n\r\n> And we want to extract a type from it which has such keys, which contain `id` in it. Resulting type should look like this:\r\n\r\n```\r\ntype Result: {\r\n        id: string;\r\n        organisationId: string;\r\n        groupId: string;\r\n}\r\n```\r\n\r\n> We will need conditional type, remapping and a generic\r\n\r\n```\r\ntype OnlyIdKeys<T> = {\r\n  [K in keyof T as `${K extends \"id\" | \"organisationId\" | \"groupId\"\r\n    ? K\r\n    : never}`]: T[K];\r\n};\r\n```\r\n\r\n> Then we use this type like this:\r\n\r\n```\r\ntype Result = OnlyIdKeys<Example>;\r\n```\r\n\r\n> Another even more generic and elegant way is to use template literals to search for an anything that contains id in it (WOW)\r\n\r\n```\r\ntype OnlyIdKeys<T> = {\r\n  [K in keyof T as K extends `${string}${\"id\" | \"Id\"}${string}`\r\n    ? K\r\n    : never]: T[K];\r\n};\r\n```\r\n\r\n> Now assume we have a discriminated union like this:\r\n\r\n```\r\ntype Route =\r\n  | {\r\n      route: \"/\";\r\n      search: {\r\n        page: string;\r\n        perPage: string;\r\n      };\r\n    }\r\n  | { route: \"/about\"; search: {} }\r\n  | { route: \"/admin\"; search: {} }\r\n  | { route: \"/admin/users\"; search: {} };\r\n\r\n```\r\n\r\n> and we want to extract a type of it, which will look like this:\r\n\r\n```\r\ntype Interesting = {\r\n        \"/\": {\r\n          page: string;\r\n          perPage: string;\r\n        };\r\n        \"/about\": {};\r\n        \"/admin\": {};\r\n        \"/admin/users\": {};\r\n      }\r\n```\r\n\r\n> How can we do it? Tip: We will need mapped type, indexed access aaaaand an Extract.\r\n\r\n```\r\ntype RoutesObject = {\r\n  [K in Route[\"route\"]]: Extract<Route, { route: K }>[\"search\"];\r\n};\r\n```\r\n\r\n> And a super elegant way to do it is:\r\n\r\n```\r\ntype RoutesObject = {\r\n  [K in Route as Route[\"route\"]]: Route[\"search\"];\r\n};\r\n```\r\n\r\n> We keep K as a Route and then we have access to the entire object including route and search. The key is then remapped to be Route[\"route\"] and value to Route[\"search\"]. Wow\r\n\r\n**Object to union**\r\n\r\n> What if we have an object like this?\r\n\r\n```\r\ninterface Values {\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n```\r\n\r\n> And from this we want to create a union o tuples:\r\n\r\n```\r\ntype UN = [\"email\", string] | [\"firstName\", string] | [\"lastName\", string]\r\n```\r\n\r\n> First we will create an intermediary type which looks like this:\r\n\r\n```\r\ntype F = {\r\n  [K in keyof Values]: [K, Values[K]];\r\n};\r\n```\r\n\r\n> Which will then look like this:\r\n\r\n```\r\ntype F = {\r\n  email: [\"email\", string];\r\n  firstName: [\"firstName\", string];\r\n  lastName: [\"lastName\", string];\r\n}\r\n```\r\n\r\n> And then the only thing we need to do it so simply extract value of object to a union type, which we did before:\r\n\r\n```\r\ntype ImUnion = F[keyof F]\r\n```\r\n\r\n> So the whole magic looks like this:\r\n\r\n```\r\ninterface Values {\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\ntype F = {\r\n  [K in keyof Values]: [K, Values[K]];\r\n};\r\n\r\ntype ValuesAsUnionOfTuples = F[keyof F];\r\n```\r\n\r\n> And to even make it nicer:\r\n\r\n```\r\ntype ValuesAsUnionOfTuples = {\r\n  [K in keyof Values]: [K, Values[K]];\r\n}[keyof Values];\r\n```\r\n\r\n> Similarly if we have such an object:\r\n\r\n```\r\ninterface FruitMap {\r\n  apple: \"red\";\r\n  banana: \"yellow\";\r\n  orange: \"orange\";\r\n}\r\n```\r\n\r\n> And we want a union type of it like this:\r\n\r\n```\r\ntype MyBreakfast: \"apple:red\" | \"banana:yellow\" | \"orange:orange\"\r\n```\r\n\r\n> We can do it like this:\r\n\r\n```\r\ntype TransformedFruit = {\r\n  [K in keyof FruitMap]: `${K}:${FruitMap[K]}`;\r\n}[keyof FruitMap];\r\n```\r\n\r\n**Array to union / Tuple to union type**\r\n\r\n> Imagine I have an array type like this:\r\n\r\n```\r\ntype X = [ \"user\", \"id\", \"name\"]\r\n```\r\n\r\n> What if I want a union type of it?\r\n\r\n```\r\ntype Y = X[number] // \"user\" | \"id\" | \"name\"\r\n```\r\n\r\n**Generics in functions**\r\n\r\n> How to type a function with generics to return what is passed in?\r\n\r\n```\r\nconst returnWhatIPassIn = <E>(t: E) => {\r\n  return t;\r\n};\r\n```\r\n\r\n> We add `<T>` in front of the parameters parentheses. And we are creating a type helper out of this function\r\n\r\n> The function then receives T and also returns T\r\n\r\n> It is equivalent to creating such a type:\r\n\r\n```\r\ntype ReturnWhatIPassIn<T> = T\r\ntype One = ReturnWhatIPassIn<1> // returns 1\r\ntype Two = ReturnWhatIPassIn<2> // returns 2\r\n```\r\n\r\n> We could also anotate the return type explicitely. But TS infers it correctly:\r\n\r\n```\r\nconst returnWhatIPassIn = <E>(t: E):E => {\r\n  return t;\r\n};\r\n```\r\n\r\n> We can also restrict T to only accept strings, but still be inferred as what literal value what is passed in and not as a generic string\r\n\r\n```\r\nexport const returnWhatIPassIn = <T extends string>(t: T) => t;\r\n```\r\n\r\n> What if we want to pass in 2 parameters?\r\n\r\n```\r\nconst returnBothOfWhatIPassIn = <T, U>(a: T, b: U) => {\r\n  return {\r\n    a,\r\n    b,\r\n  };\r\n};\r\n```\r\n\r\n> Above syntax is same as\r\n\r\n```\r\ntype Result<A, B> = {\r\n  a: A,\r\n  b: B\r\n}\r\n```\r\n\r\n> T will be infered as string and U as a number if we pass in values like this:\r\n\r\n```\r\nconst result = returnBothOfWhatIPassIn(\"a\", 1);\r\n```\r\n\r\n> If we want them to be literal, we can extend each\r\n\r\n```\r\nconst returnBothOfWhatIPassIn = <T extends string, U extends number>(a: T, b: U) => {\r\n  return {\r\n    a,\r\n    b,\r\n  };\r\n};\r\n```\r\n\r\n> This is pretty important charcteristics of generics and how we can use literal values\r\n\r\n> Similar example. What if we have a function like this which receives array of statuses and returns them? We dont want however the return type to be array of strings, we want it to be array of individual status (their literal values).\r\n\r\n```\r\nconst makeStatus = <TStatuses extends string[]>(\r\n  statuses: TStatuses\r\n) => {\r\n  return statuses;\r\n};\r\n\r\nconst statuses = makeStatus([\"INFO\", \"DEBUG\", \"ERROR\", \"WARNING\"]);\r\n```\r\n\r\n> Solution:\r\n\r\n```\r\nconst makeStatus = <TStatuses extends string>(\r\n  statuses: Array<TStatuses>\r\n): Array<TStatuses> => {\r\n  return statuses;\r\n};\r\n\r\nconst statuses = makeStatus([\"INFO\", \"DEBUG\", \"ERROR\", \"WARNING\"]);\r\n```\r\n\r\n> Important is that we can make in braces <> whatever we want, it can be array of something or the something.\r\n\r\n**Generics and components**\r\n\r\n> Imagine we have a component like this\r\n\r\n```\r\nexport class Component{\r\n  private props: unknown;\r\n\r\n  constructor(props: unknown) {\r\n    this.props = props;\r\n  }\r\n\r\n  getProps = () => this.props;\r\n}\r\n\r\nconst component = new Component({ a: 1, b: 2, c: 3 });\r\n```\r\n\r\n> And we want to make sure that whatever props we pass in, we will also infer the type from them\r\n\r\n> Solution looks like this\r\n\r\n```\r\nexport class Component<TProps> {\r\n  private props: TProps;\r\n\r\n  constructor(props: TProps) {\r\n    this.props = props;\r\n  }\r\n\r\n  getProps = () => this.props;\r\n}\r\n\r\nconst component = new Component({ a: 1, b: 2, c: 3 });\r\n```\r\n\r\n> Now what if we want our clone function to infer the props of the object we are passing in?\r\n\r\n```\r\nexport class Component<TProps> {\r\n  private props: TProps;\r\n  constructor(props: TProps) {\r\n    this.props = props;\r\n  }\r\n  getProps = () => this.props;\r\n}\r\n\r\nconst cloneComponent = (component) => {\r\n  return new Component(component.getProps());\r\n};\r\n```\r\n\r\n> Solution\r\n\r\n```\r\nexport class Component<TProps> {\r\n  private props: TProps;\r\n  constructor(props: TProps) {\r\n    this.props = props;\r\n  }\r\n  getProps = () => this.props;\r\n}\r\n\r\nconst cloneComponent = <TProps>(component: Component<TProps>) => {\r\n  return new Component(component.getProps());\r\n};\r\n```\r\n\r\n**How to create generics with Sets**\r\n\r\n> Set is just an array with unique values.\r\n\r\n> Imagine we have a set like this:\r\n\r\n```\r\nexport const createSet = ()=> {\r\n  return new Set();\r\n};\r\nconst stringSet = createSet<string>();\r\nconst numberSet = createSet<number>();\r\nconst unknownSet = createSet();\r\n```\r\n\r\n> And we want this to be infered as set of strings for the first one, set of number for seconds one and set of unknown for third one. Here is how:\r\n\r\n```\r\nexport const createSet = <T>(): Set<T> => {\r\n  return new Set();\r\n};\r\nconst stringSet = createSet<string>();\r\nconst numberSet = createSet<number>();\r\nconst unknownSet = createSet();\r\n```\r\n\r\n> Another way ho to do it:\r\n\r\n```\r\nexport const createSet = <T>() => {\r\n  return new Set<T>();\r\n};\r\nconst stringSet = createSet<string>();\r\nconst numberSet = createSet<number>();\r\nconst unknownSet = createSet();\r\n```\r\n\r\n> We can create sets like this\r\n\r\n```\r\ncontt mySet = new Set<number>()\r\nmySet.add(123) // works\r\nmySet.add(\"hi\") // error\r\n```\r\n\r\n> In above problem, how to set a default type if we dont pass anything? TS would infer unknown, but what if we want it to be string?\r\n\r\n```\r\nexport const createSet = <T = string>() => {\r\n  return new Set<T>();\r\n};\r\nconst numberSet = createSet<number>();\r\nconst stringSet = createSet<string>();\r\nconst otherStringSet = createSet();\r\n```\r\n\r\n**Typing asynchronous functions with generics**\r\n\r\n> How to type in a fetch function which should receive a type?\r\n\r\n```\r\nconst fetchData = async <T>(url: string): Promise<T> => {\r\n  const data = await fetch(url).then((response) => response.json());\r\n  return data;\r\n};\r\n```\r\n\r\n> Then when we call it we should prove its type:\r\n\r\n```\r\nasync () => {\r\n  const data = await fetchData<{ name: string }>(\r\n    \"https://swapi.dev/api/people/1\"\r\n  );\r\n```\r\n\r\n> We could also do it like this:\r\n\r\n```\r\nconst fetchData = async <T>(url: string) => {\r\n  const data = await fetch(url).then((response) => response.json());\r\n  return data as T;\r\n};\r\n```\r\n\r\n> But there is a better way:\r\n\r\n```\r\nconst fetchData = async <T>(url: string) => {\r\n  const data: T = await fetch(url).then((response) => response.json());\r\n  return data;\r\n};\r\n\r\n```\r\n\r\n> Or even:\r\n\r\n```\r\nconst fetchData = async <T>(url: string) => {\r\n  const data: T = await fetch(url).then((response): Promise<T> => response.json());\r\n  return data;\r\n};\r\n\r\n```\r\n\r\n> Goal is to not let any sneaky any leave this line of code\r\n\r\n**Function overloading**\r\n\r\n> Based on an amazing article from Dmitri Pavlutin:\r\n> https://dmitripavlutin.com/typescript-function-overloading/#:~:text=Function%20overloading%20in%20TypeScript%20lets,the%20function%20should%20be%20invoked\r\n\r\n> Most of the functions accept a fixed set of arguments. But some functions can accept a variable number of arguments, arguments of different types, and could even return different types depending on how you invoke the function. To annotate such function TypeScript offers the function overloading feature. Let's see how function overloading works.\r\n\r\n> Let's consider a function that returns a welcome message to a particular person:\r\n\r\n```\r\nfunction greet(person: string): string {\r\n  return `Hello, ${person}!`;\r\n}\r\n```\r\n\r\n> The function above accepts 1 argument of type string: the name of the person. Invoking the function is pretty simple:\r\n\r\n```\r\ngreet('World'); // 'Hello, World!'\r\n```\r\n\r\n> What if you'd like to make the greet() function more flexible? For example, make it additionally accept a list of persons to greet. Such a function would accept a string or an array of strings as an argument, as well as return a string or an array of strings.\r\n\r\n> How to annotate such a function? There are 2 approaches.\r\n\r\n> The first approach is straightforward and involves modifying the function signature directly by updating the parameter and return types.\r\n\r\n> Here's how greet() looks after updating the parameter and return types:\r\n\r\n```\r\nfunction greet(person: string | string[]): string | string[] {\r\n  if (typeof person === 'string') {\r\n    return `Hello, ${person}!`;\r\n  } else if (Array.isArray(person)) {\r\n    return person.map(name => `Hello, ${name}!`);\r\n  }\r\n  throw new Error('Unable to greet');\r\n}\r\n```\r\n\r\n> Now you can invoke greet() in 2 ways:\r\n\r\n```\r\ngreet('World');          // 'Hello, World!'\r\ngreet(['Jane', 'Joe']); // ['Hello, Jane!', 'Hello, Joe!']\r\n```\r\n\r\n> Updating the function signature directly to support the multiple ways of invocation is the usual and a good approach. However, there are situations when you might want to take an alternative approach and define separately all the ways your function can be invoked. This approach is called function overloading.\r\n\r\n> The second approach is to use the `function overloading` feature. I recommend it when the function signature is relatively complex and has multiple types involved.\r\n\r\n> Putting the function overloading in practice requires defining the so-called overload signatures and an implementation signature.\r\n\r\n> The overload signature defines the parameter and return types of the function, and doesn't have a body. A function can have multiple overload signatures: corresponding to the different ways you can invoke the function.\r\n\r\n> The implementation signature, on the other side, also has the parameter types and return type, but also a body that implements the function. There can be only one implementation signature.\r\n\r\n> Let's transform the function greet() to use the function overloading:\r\n\r\n```\r\n// Overload signatures\r\nfunction greet(person: string): string;\r\nfunction greet(persons: string[]): string[];\r\n\r\n// Implementation signature\r\nfunction greet(person: unknown): unknown {\r\n  if (typeof person === 'string') {\r\n    return `Hello, ${person}!`;\r\n  } else if (Array.isArray(person)) {\r\n    return person.map(name => `Hello, ${name}!`);\r\n  }\r\n  throw new Error('Unable to greet');\r\n}\r\n```\r\n\r\n> The greet() function has 2 overload signatures and one implementation signature.\r\n\r\n> Each overload signature describes one way the function can be invoked. In the case of greet() function, you can call it 2 ways: with a string argument, or with an array of strings argument.\r\n\r\n> The implementation signature function greet(person: unknown): unknown { ... } contains the proper logic how the function works.\r\n\r\n> Now, as before, you can invoke greet() with the arguments of type string or array of strings:\r\n\r\n```\r\ngreet('World');          // 'Hello, World!'\r\ngreet(['Jane', 'Joe']);  // ['Hello, Jane!', 'Hello, Joe!']\r\n```\r\n\r\n> You should think carefully, because function overloads are at their best when you have a different return type based on something that you pass in. If you just have the same return type, no matter what happens, it's always going to return a string, then you should probably be using a union to express these parameters instead.\r\n\r\n**Casting**\r\n\r\n> When we think we know better what this type is we can use `as` keyword which will say to typescript - I know what the type is so use it as I say. TYpescript will be: OK, Master.\r\n\r\n```\r\nsendEmail(\"abc\" as EmailAddress)\r\n```\r\n\r\n> In general this is not a good idea in Typescript\r\n\r\n**Type aliases**\r\n\r\n> When we create our own types with some random name:\r\n\r\n```\r\ntype RandomWord = string\r\n```\r\n\r\n> RandomWord is a type alias\r\n\r\n**Branded types**\r\n\r\n> Also known as nominal types. These types are really interesting, because they let you specify logic on the type level.\r\n\r\n> Imagine that throughout your application you will deal with emails. But to defined them as a string is too broad. You want to make sure they follow a pattern of an email address. We will use branded types for that\r\n\r\n> Branded types allows us to create a type to which within normal rules of Typescript no value would be possible to bed assigned to them. They are so called illegal types.\r\n\r\n> Example of illegal type is intersection between string and number:\r\n\r\n```\r\ntype Illegal = string & number\r\n```\r\n\r\n> This will result in never type because you cant have something that is both string and number. We cannotassign anything to never types.\r\n\r\n> Branded type is created as a base type and then intersection with object, where we label the Brand as for example Email:\r\n\r\n```\r\ntype Mail = string & { __brand: \"Email\" }\r\n```\r\n\r\n> String cannot be intersected with an object but notice that this is now not typed as never! Assigning value to this type will now not be possible.\r\n\r\n```\r\nconst a: Mail = \"abc\" //ERROR\r\n\r\n```\r\n\r\n> What we are missing still is a rule which will detect if it is a valid email address, like contains @, etc.\r\n\r\n```\r\nconst isEmail = (email: string): email is Mail => {\r\n  return email.includes(\"@gmail.com\")\r\n}\r\n\r\n```\r\n\r\n> Notice that the output of the `email is Mail`. This is also called casting where we say to the typescript that we know better than Typescript what the return type is going to be. Such a statement now means that if the isEmail returns true, then we can safely assume that email is of a type Mail. Else it cannot be assumed it is of type Mail and it will only be a string\r\n\r\n> We can then use our function like this:\r\n\r\n```\r\ntype Mail = string & { __brand: \"Email\" }\r\n\r\nconst isEmail = (email: string): email is Mail => {\r\n  return email.includes(\"@gmail.com\")\r\n}\r\n\r\nconst sendWelcomeEmail = (email: Mail) => {\r\n  //\r\n}\r\n\r\nconst signUp = (email: string) => {\r\n  if (isEmail){\r\n     sendWelcomeEmail(email) // email will be correctly typed as Mail\r\n  }\r\n}\r\n```\r\n\r\n> Another way to approach this topic is to use assert and then throw error if the condition for email address is not met:\r\n\r\n```\r\ntype Mail = string & { __brand: \"Email\" }\r\n\r\nconst asserEmail = (email: string): asserts email is Mail => {\r\n  if (!email.includes(\"@gmail.com\")){\r\n    throw new Error(`Invalid argument: [${email}] is not a valid email`)\r\n  }\r\n}\r\n\r\nconst sendWelcomeEmail = (email: Mail) => {\r\n  //\r\n}\r\n\r\nconst signUp = (email: string) => {\r\n  assertEmail(email);\r\n  sendWelcomeEmail(email) // email will be correctly typed as Mail, cause we reached so far here without error\r\n}\r\n\r\n```\r\n\r\n**Global scope**\r\n\r\n> howto declare and type in global scope\r\n\r\n```\r\ndeclare global {\r\n  function myFunc(): boolean;\r\n  var myVar: number;\r\n}\r\n\r\nglobalThis.myFunc = () => true;\r\nglobalThis.myVar = 1;\r\n```\r\n\r\n> noteice that in global scope we can only declare and type. We cannot write the implementation or assignment\r\n\r\n> Only vars work in global scope. No const or let.\r\n\r\n> Cool thing about global scope is that it support ambient merging. I can declare a global in one file and the same global in other file and the result will be a merged global from both files:\r\n\r\n> File 1\r\n\r\n```\r\ndeclare global {\r\n  interface DispatchableEvent {\r\n    LOG_IN: {\r\n      username: string;\r\n      password: string;\r\n    };\r\n  }\r\n}\r\n```\r\n\r\n> File 2\r\n\r\n```\r\ndeclare global {\r\n  interface DispatchableEvent {\r\n    LOG_OUT: {};\r\n    UPDATE_USERNAME: {\r\n      username: string;\r\n    };\r\n  }\r\n}\r\n```\r\n\r\n> Result:\r\n\r\n```\r\ninterface DispatchableEvent {\r\n    LOG_IN: {\r\n      username: string;\r\n      password: string;\r\n    };\r\n    LOG_OUT: {};\r\n    UPDATE_USERNAME: {\r\n      username: string;\r\n    };\r\n  }\r\n```\r\n\r\n> It's a combination of declaration merging and declaring global. Having this global interface that you can append to gives you a really nice solution for certain problems.\r\n\r\n> With multiple files we're really solving the problem of colocation. We want a pattern that we can just copy and paste over several files in our application and make sure that we're declaring the types really close to where the implementation is. Of course, we could just declare this in a single interface and just import that to all the places that we need it. Then, of course, it's not colocated. Whereas when they're colocated together, even though you're putting it inside a global scope, it means that if you delete this entire file, then log out just disappears from the ether and it doesn't matter anymore. Weirdly, by using a global here, we're able to get a more modular approach to our types.\r\n\r\n**Process.env**\r\n\r\n> In Node.js, process.env is a `global variable` injected during runtime. It is a view of the state of the system environment variables.\r\n\r\n**Type predicates**\r\n\r\n> sometimes you want more direct control over how types change throughout your code.\r\n\r\n> To define a user-defined type guard, we simply need to define a function whose return type is a type predicate:\r\n\r\n```\r\nfunction isFish(pet: Fish | Bird): pet is Fish {\r\n  return (pet as Fish).swim !== undefined;\r\n}\r\n\r\n```\r\n\r\n> `pet is Fish` is our type predicate in this example. A predicate takes the form `parameterName is Type`, where parameterName must be the name of a parameter from the current function signature.\r\n\r\n> Any time isFish is called with some variable, TypeScript will narrow that variable to that specific type if the original type is compatible.\r\n\r\n> Please note that we can need to return the Fish in this case.\r\n\r\n> If we have a function which does not return anything (is void) and maybe only throws error,it would not be enough to use the predicate. We will need to use `asserts` keyword\r\n\r\n```\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ninterface AdminUser extends User {\r\n  role: \"admin\";\r\n  organisations: string[];\r\n}\r\n\r\ninterface NormalUser extends User {\r\n  role: \"normal\";\r\n}\r\n\r\nfunction assertUserIsAdmin(\r\n  user: NormalUser | AdminUser\r\n): asserts user is AdminUser {\r\n  if (user.role !== \"admin\") {\r\n    throw new Error(\"Not an admin user\");\r\n  }\r\n}\r\n```\r\n\r\n> please note that asserts only works with function declaration and not with arrow functions. workaround is always to use function declaration or such a workaround:\r\n\r\n```\r\nconst assertUserIsAdmin: (\r\n  user: NormalUser | AdminUser\r\n) => asserts user is AdminUser = (user) => {\r\n  if (user.role !== \"admin\") {\r\n    throw new Error(\"Not an admin user\");\r\n  }\r\n};\r\n```\r\n\r\n> as per this comment: https://github.com/microsoft/TypeScript/issues/34523#issuecomment-700491122\r\n\r\n**CHATGPT**\r\n\r\n> My very first chat with CHATGPT and it already solved my problem:\r\n\r\n> Q: How do I use predicates with generics in typescript\r\n\r\n> A: In TypeScript, you can use generics to create reusable components that work with different types. Predicates can be used to narrow down the type of a generic parameter based on some condition. Here is an example of how to use predicates with generics in TypeScript:\r\n\r\n```\r\ntype FilterFunction<T> = (item: T) => boolean;\r\n\r\nfunction filter<T>(items: T[], predicate: FilterFunction<T>): T[] {\r\n  return items.filter(predicate);\r\n}\r\n\r\nfunction isNumber(value: unknown): value is number {\r\n  return typeof value === \"number\";\r\n}\r\n\r\nconst numbers = [1, 2, 3, \"four\"];\r\nconst filteredNumbers = filter(numbers, isNumber);\r\n\r\nconsole.log(filteredNumbers); // [1, 2, 3]\r\n\r\n```\r\n\r\n> In this example, we define a FilterFunction type that takes a generic parameter T and returns a boolean. We then define a filter function that takes an array of type T and a FilterFunction<T> predicate as arguments. The filter function returns a new array that contains only the items that match the predicate.\r\n\r\n> We also define an isNumber function that takes an unknown value and returns a boolean. This function is used as the predicate in the filter function to filter out non-numeric values from the numbers array.\r\n\r\n> Note that the isNumber function returns a type predicate value is number. This tells TypeScript that if the isNumber function returns true for a value, that value is of type number. This allows TypeScript to narrow down the type of the numbers array from Array<number | string> to Array<number>.\r\n\r\n> By using generics and predicates in TypeScript, you can write more reusable and type-safe code.\r\n\r\n> Q: given the above explanation, how would you then turn isNode to a predicate in this piece of code?\r\n\r\n```\r\ninterface DOMNodeExtractorConfig<T, Result> {\r\n  isNode: (node: unknown) => boolean;\r\n  transform: (node: T) => Result;\r\n}\r\n```\r\n\r\n> To turn isNode into a predicate, you need to change its return type to node is T. This tells TypeScript that if isNode returns true for a value, that value is of type T. Here's how you can update the DOMNodeExtractorConfig interface with a predicate type for isNode:\r\n\r\n```\r\ninterface DOMNodeExtractorConfig<T, Result> {\r\n  isNode: (node: unknown) => node is T;\r\n  transform: (node: T) => Result;\r\n}\r\n```\r\n\r\n> Now, when you use DOMNodeExtractorConfig, TypeScript will know that isNode is a type predicate and can narrow down the type of node accordingly. For example, if T is HTMLDivElement, TypeScript will be able to determine if a value is an HTMLDivElement or not based on the return value of isNode.\r\n\r\n> Here's an example of how you can use DOMNodeExtractorConfig with a predicate for isNode:\r\n\r\n```\r\nfunction extractNodes<T, Result>(config: DOMNodeExtractorConfig<T, Result>, nodes: unknown[]): Result[] {\r\n  return nodes.filter(config.isNode).map(config.transform);\r\n}\r\n\r\nconst divExtractor: DOMNodeExtractorConfig<HTMLDivElement, string> = {\r\n  isNode: (node: unknown): node is HTMLDivElement => node instanceof HTMLDivElement,\r\n  transform: (div: HTMLDivElement) => div.textContent || \"\",\r\n};\r\n\r\nconst nodes: unknown[] = [document.createElement(\"div\"), document.createElement(\"p\")];\r\nconst divs = extractNodes(divExtractor, nodes);\r\n\r\nconsole.log(divs); // [ <div></div> ]\r\n```\r\n\r\n> In this example, we define a divExtractor object with a predicate for isNode that checks if a value is an instance of HTMLDivElement. We then call extractNodes with the divExtractor and an array of unknown nodes. extractNodes uses the predicate to filter out non-div nodes and returns an array of transformed HTMLDivElement nodes.\r\n\r\n> By using a predicate for isNode, TypeScript can ensure that only nodes of the correct type are passed to the transform function.\r\n\r\n> Q: wow, you are amazing. thank you!\r\n> A: You're welcome! I'm glad I could help. If you have any more questions, feel free to ask!\r\n\r\n**Typescript and Classes**\r\n\r\n> We can actually use the name of the class as a type in Typescript. Classes have this funny property where they can actually cross boundaries a little bit and be used as either a type or a runtime value. Pretty cool!\r\n\r\n```\r\nclass CustomError extends Error {\r\n  constructor(message: string, public code: number) {\r\n    super(message);\r\n    this.name = \"CustomError\";\r\n  }\r\n}\r\nconst handleCustomError = (error: CustomError) => {\r\n  console.error(error.code);\r\n};\r\n\r\n```\r\n\r\n**Builder patterns**\r\n\r\n> The builder pattern is a design pattern used in software development to simplify the creation of complex objects. In TypeScript, the builder pattern involves creating a builder class that allows you to construct an object step by step.\r\n\r\n> Here's an example to help illustrate how the builder pattern works in TypeScript:\r\n\r\n```\r\nclass User {\r\n  constructor(\r\n    public readonly firstName: string,\r\n    public readonly lastName: string,\r\n    public readonly email: string,\r\n    public readonly age: number,\r\n    public readonly address?: string\r\n  ) {}\r\n}\r\n\r\nclass UserBuilder {\r\n  private firstName: string = '';\r\n  private lastName: string = '';\r\n  private email: string = '';\r\n  private age: number = 0;\r\n  private address?: string;\r\n\r\n  setFirstName(firstName: string): UserBuilder {\r\n    this.firstName = firstName;\r\n    return this;\r\n  }\r\n\r\n  setLastName(lastName: string): UserBuilder {\r\n    this.lastName = lastName;\r\n    return this;\r\n  }\r\n\r\n  setEmail(email: string): UserBuilder {\r\n    this.email = email;\r\n    return this;\r\n  }\r\n\r\n  setAge(age: number): UserBuilder {\r\n    this.age = age;\r\n    return this;\r\n  }\r\n\r\n  setAddress(address: string): UserBuilder {\r\n    this.address = address;\r\n    return this;\r\n  }\r\n\r\n  build(): User {\r\n    return new User(\r\n      this.firstName,\r\n      this.lastName,\r\n      this.email,\r\n      this.age,\r\n      this.address\r\n    );\r\n  }\r\n}\r\n\r\n```\r\n\r\n> In the example above, we have a User class that represents a user with basic information such as their first name, last name, email, age, and address. We also have a UserBuilder class that allows us to construct a User object step by step.\r\n\r\n> To create a User object using the builder pattern, you would first create a new UserBuilder object, set its properties using the builder's setXXX methods, and then call the build method to create the User object. Here's an example:\r\n\r\n```\r\nconst user = new UserBuilder()\r\n  .setFirstName('John')\r\n  .setLastName('Doe')\r\n  .setEmail('john.doe@example.com')\r\n  .setAge(30)\r\n  .setAddress('123 Main St')\r\n  .build();\r\n```\r\n\r\n> In the example above, we create a new User object with the UserBuilder class by setting its properties using the builder's setXXX methods and then calling the build method to create the User object.\r\n\r\n> Using the builder pattern can make it easier to construct complex objects with many properties because it allows you to break down the construction process into smaller, more manageable steps.\r\n\r\n**Definitely typed**\r\n\r\n> Definitely Typed is a repository that contains type definitions for lots and lots of libraries, which aren't built in TypeScript. https://github.com/DefinitelyTyped/DefinitelyTyped\r\n\r\n**Overriding types from external libraries with d.ts file**\r\n\r\n> What if we use a function from external library which is poorly typed and returns a string instead of union of:\r\n\r\n```\r\nexport const getAnimatingState = (): string => {\r\n  if (Math.random() > 0.5) {\r\n    return \"before-animation\";\r\n  }\r\n\r\n  if (Math.random() > 0.5) {\r\n    return \"animating\";\r\n  }\r\n\r\n  return \"after-animation\";\r\n};\r\n```\r\n\r\n> If we use this function, we will get return of string. Which is very loose:\r\n\r\n```\r\nimport { getAnimatingState } from \"external-lib\";\r\n\r\nconst animatingState = getAnimatingState();\r\n```\r\n\r\n> In order to override this, we will need to create a new file with d.ts extension: for example abc.d.ts\r\n\r\n> In this file we will `declare module` and type our getAnimatingState properly\r\n\r\n```\r\ndeclare module \"fake-lib\" {\r\n  export type Mytype = \"before-animation\" | \"animating\" | \"after-animation\";\r\n  export function getAnimatingState(): Mytype;\r\n}\r\n\r\n```\r\n\r\n> Then in file where we actually use the function we will import the getAnimatingState from our new d.ts file:\r\n\r\n```\r\nimport { getAnimatingState } from \"fake-lib\";\r\n\r\nconst animatingState = getAnimatingState();\r\n\r\n```\r\n\r\n> Our function now returns \"before-animation\" | \"animating\" | \"after-animation\" instead of string\r\n\r\n**Identity functions**\r\n\r\n> identity function takes in a value and returns the same value.\r\n\r\n```\r\nconst asConst = <T>(t: T) => t;\r\n```\r\n\r\n> If we call this function with array of object like this:\r\n\r\n```\r\nconst fruits = asConst([\r\n  {\r\n    name: \"apple\",\r\n    price: 1,\r\n  },\r\n  {\r\n    name: \"banana\",\r\n    price: 2,\r\n  },\r\n]);\r\n```\r\n\r\n> The infered return type of asConst function will be Array<{name: string, price: number}>\r\n\r\n> But we want it to be literal values of it, not just tring or number. We want the concrete thing.\r\n\r\n> How to solve this? We can use an external library ts-toolkit., It exports F and something called Narrow which will help us with the inference:\r\n\r\n```\r\nimport { F } from \"ts-toolbelt\";\r\n\r\nexport const asConst = <T>(t: F.Narrow<T>) => t;\r\n```\r\n\r\n> Now the inferred type will be:\r\n\r\n```\r\n[\r\n  {\r\n    name: \"apple\",\r\n    price: 1,\r\n  },\r\n  {\r\n    name: \"banana\",\r\n    price: 2,\r\n  },\r\n]\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n\r\n```\r\n","frontmatter":{"date":"2020-02-13","title":"TypeScript","category":"knowledge-base"},"fields":{"slug":"/TypeScript/"},"timeToRead":126,"html":"<p><img src=\"https://i.imgur.com/n6YTT3v.jpg\" title=\"Photo by Matej from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Matej from Pexels</em></p></p>\n<h2>Intro</h2>\n<p>This article is basically my notes following an amazing <a href=\"https://www.udemy.com/course/understanding-typescript/\">Typescript course</a> by Maximilian Schwarzmüller and <a href=\"https://skillerwhale.com/\">SkillerWhale</a> training notes which I would recommend to everyone who wants to learn Typescript.</p>\n<blockquote>\n<p>Typescript is a <code>superset</code> to Javascript which means it is a programming languages which builds on top of Javascript. It adds new features and advantages to Javascript. It allows to write cleaner, less error-prone and more powerful code.</p>\n</blockquote>\n<blockquote>\n<p>Big disadvantage of Typescript is that it cannot be executed by Javascript environments like a browser. But good news is that Typescript is also a tool - it is also a <code>compiler</code> which we can run on our Typescript files and convert them to vanilla Javascript. Typescript brings new features which are then compiled to vanilla Javascript <code>workarounds</code>. Such features might be easier to write in Typescript (or using nicer syntax) while it would be an aweful lot of complex code in Javascript.</p>\n</blockquote>\n<blockquote>\n<p>Most importantly Typescript enables defining and using <code>types</code>, which forces us to be more explicit how our code works, it catches unexpected and unnecessary errors early. It also allows to use next-generation Javascript features which can be then compiled to be used on older browsers. It also adds non-Javascript features like <code>Interfaces</code> and <code>Generics</code> which cannot be comiled to JS (but they only help during development, they actually don't need to be compiled to vanilla JS). It adds meta-programming features like <code>Decorators</code>.</p>\n</blockquote>\n<blockquote>\n<p>To install Typscript you need to have <code>node.js</code> installed:</p>\n</blockquote>\n<pre><code>nodejs.org/en/\n</code></pre>\n<blockquote>\n<p>Node.js will also install NPM tool (Node Package Manager) which will allow us to install Typescript globally with <code>npm install</code> command</p>\n</blockquote>\n<blockquote>\n<p>To install Typescript:</p>\n</blockquote>\n<pre><code>npm install -g typescript\n</code></pre>\n<blockquote>\n<p>Maybe you need to add <code>sudo</code> in front of it:</p>\n</blockquote>\n<pre><code>sudo npm install -g typescript\n</code></pre>\n<blockquote>\n<p>Typescript file has <code>.ts</code> extension, for example:</p>\n</blockquote>\n<pre><code>app.ts\n</code></pre>\n<blockquote>\n<p>To envoke TS compiler we will use command <code>tsc</code> and then file name which we want to compile:</p>\n</blockquote>\n<pre><code>tsc app.ts\n</code></pre>\n<h2>Setting up Typescript project</h2>\n<p><img src=\"https://i.imgur.com/2QEDSKd.jpg?1\" title=\"Photo by Markus Spiske from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Markus Spiske from Pexels</em></p></p>\n<blockquote>\n<p>We will start creating an html file with following content:</p>\n</blockquote>\n<pre><code class=\"language-es6\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;title>Typescript Course&#x3C;/title>\n    &#x3C;script src=\"app.js\"  defer>&#x3C;/script>\n  &#x3C;/head>\n  &#x3C;body>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<blockquote>\n<p>Especially important is the script tag which will envoke our <code>app.js</code> file and will execute it:</p>\n</blockquote>\n<pre><code>&#x3C;script src=\"app.js\"  defer>&#x3C;/script>\n</code></pre>\n<blockquote>\n<p>Then in the same folder add <code>app.ts</code> file</p>\n</blockquote>\n<pre><code>touch app.ts\n</code></pre>\n<blockquote>\n<p>Add some <code>console.log</code> in there:</p>\n</blockquote>\n<pre><code>console.log(\"Monsters for the win!\")\n</code></pre>\n<blockquote>\n<p>Now let's try to compile our <code>.ts</code> file and see if we can console it in browser:</p>\n</blockquote>\n<pre><code>tsc app.ts\n</code></pre>\n<blockquote>\n<p>New file will be produced: <code>app.js</code></p>\n</blockquote>\n<blockquote>\n<p>Now open the <code>index.html</code> in your broswer and <code>CTRL + i</code> to see the console. You should see the message you consoled.</p>\n</blockquote>\n<blockquote>\n<p>Problem is however, for now we will need to always save code, compile it, and manually refresh the browser. But we can automate the browser refresh by installing a tool.</p>\n</blockquote>\n<blockquote>\n<p>Go to your main project folder and initialize npm with <code>npm init</code>. It will create the <code>package.json</code> file. Hit enter for each question it asks you</p>\n</blockquote>\n<pre><code>npm init\n</code></pre>\n<blockquote>\n<p>Then we will install a <code>lite-server</code> package:</p>\n</blockquote>\n<pre><code>npm install --save-dev lite-server\n</code></pre>\n<blockquote>\n<p>Then go to <code>package.json</code> and add a <code>start</code> script after the <code>test</code> script (make sure you separate them with comma):</p>\n</blockquote>\n<pre><code>\"test\": \"echo \\\"Error: no test specified\\\" &#x26;&#x26; exit 1\",\n\"start\": \"lite-server\"\n</code></pre>\n<blockquote>\n<p>Above means that if I type in console <code>npm start</code> I will start a <code>lite server</code> which will serve <code>index.html</code> next to <code>package.json</code> at url:</p>\n</blockquote>\n<pre><code>http://localhost:3000\n</code></pre>\n<blockquote>\n<p>This will automatically reload the page if a file changes in our folder. So for example if I open <code>app.ts</code>, change the message, CTRL+S to save changes and then <code>tsc app.ts</code> in terminal, then my browser page will automatically reload to reflect the changes.</p>\n</blockquote>\n<h2>Core types</h2>\n<p><img src=\"https://i.imgur.com/BBgWcbe.jpg\" title=\"Photo by Ludvig Hedenborg from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Ludvig Hedenborg from Pexels</em></p></p>\n<p>Core types are data types provided by Typescript/Javascript (but they are not exclusive, we can define our own).</p>\n<p>Core types are:</p>\n<ul>\n<li><strong>number</strong> - there is only one number type, there is no difference between integers or floats (8, 8.6, -10)</li>\n<li><strong>string</strong> - text (\"monster\") - which can be denoted by double or single quotes or backticks:\",' or `</li>\n<li><strong>boolean</strong> - true or false</li>\n</ul>\n<blockquote>\n<p>Defining type in the code is done with a colon and word <code>number</code>, <code>string</code> or <code>boolean</code> etc:</p>\n</blockquote>\n<pre><code>const add = (n1: number, n2: number) => (n1 + n2);\n</code></pre>\n<blockquote>\n<p>If I passed string to the above function, I will get a compilation error.</p>\n</blockquote>\n<pre><code>add('1', 2)\n</code></pre>\n<blockquote>\n<p>Error will be seen when I compile the code with:</p>\n</blockquote>\n<pre><code>tsc app.ts\n</code></pre>\n<blockquote>\n<p>Error will look like this:</p>\n</blockquote>\n<pre><code>error TS2345: Argument of type '\"1\"' is not assignable to parameter of type 'number'.\n</code></pre>\n<blockquote>\n<p>I will only get error during <code>compilation</code> (during development), not during runtime (because browsers do not have built-in Typescript support). It does not change Javascript to work differently. But it adds extra sanity check!</p>\n</blockquote>\n<blockquote>\n<p>Important is also to notice that even though compilation threw an error, by default the file was <code>still</code> compiled and served (but we can setup a blocker for that later).</p>\n</blockquote>\n<blockquote>\n<p>Javascript uses <code>dynamic types</code> which are resolved at runtime. Typescript uses <code>static types</code> which are set during development, allowing us to catch errors early (before they go to production).</p>\n</blockquote>\n<blockquote>\n<p><code>Type inference</code> means that Typescript tries to detect type of data.</p>\n</blockquote>\n<blockquote>\n<p>If you initialize a <code>constant</code> with number <code>5</code>, it will be of inferred type 5 when you hover over the number1 in <code>.ts</code> file. It is because as for constants you cannot re-assign their value:</p>\n</blockquote>\n<pre><code>const number1=5;\n// if you hover over number1 you will see: const number1: 5\n</code></pre>\n<blockquote>\n<p>If you initialize a <code>variable</code> with number 5, it will be of inferred type <code>number</code> (as for variables you can re-assign their value):</p>\n</blockquote>\n<pre><code>let number2=5;\nlet number2: number\n</code></pre>\n<blockquote>\n<p>We can actually write our own type in both declarations:</p>\n</blockquote>\n<pre><code>const number1: number = 5;\nlet number2: number = 5;\n</code></pre>\n<blockquote>\n<p>But it is redundant and not encouraged (not best practice), as Typescript can infer the data type itself from how I initialize the constant or variable.</p>\n</blockquote>\n<blockquote>\n<p>Best practice would be to define a type <code>if you do not assign value but only initialize a variable</code>:</p>\n</blockquote>\n<pre><code>let x;\n</code></pre>\n<blockquote>\n<p>Then it is actually encouraged to define type:</p>\n</blockquote>\n<pre><code>let x: number;\n</code></pre>\n<h2>Object types</h2>\n<p><img src=\"https://i.imgur.com/dGwZPCQ.jpg\" title=\"Photo from mocah.org\"><p style=\"font-size: 12px; text-align: right\"><em>Photo from mocah.org</em></p></p>\n<blockquote>\n<p>Typescript automatically infers object keys and complains when we access property which does not exist:</p>\n</blockquote>\n<pre><code>const hero = {\n    name: \"Addania\",\n    title: \"The Horde Slayer\"\n}\nconsole.log(hero.nickname);\n</code></pre>\n<blockquote>\n<p>We can explicitly define that hero will be an <code>object type</code>:</p>\n</blockquote>\n<pre><code>const hero: {} = {\n    name: \"Addania\",\n    title: \"The Horde Slayer\"\n}\n</code></pre>\n<p>or like this:</p>\n<pre><code>const hero: object = {\n    name: \"Addania\",\n    title: \"The Horde Slayer\"\n}\n</code></pre>\n<blockquote>\n<p>Above only says to Typescript that hero will be an object. If we want to be explicit of which type is which key, we can do it like this:</p>\n</blockquote>\n<pre><code>const hero: {\n    name: string;\n    title: string;\n} = {\n    name: \"Addania\",\n    title: \"The Horde Slayer\"\n}\n</code></pre>\n<blockquote>\n<p>Notice the semi-colon <code>;</code> between curly brackets. Semicolon is a Typescript way to define types in an object. Javascript way of giving multiple keys in an object is using comma.</p>\n</blockquote>\n<blockquote>\n<p>Anyway, it is not recommended to explicitly define types if Typescript can infer them.</p>\n</blockquote>\n<blockquote>\n<p>We can also add types for nested objects. Example object:</p>\n</blockquote>\n<pre><code>const hero = {\n  name: \"Addania\",\n  title: \"The Horde Slayer\",\n  mounts: [\"Spectral Steed\", \"Blue Proto-Drake\"],\n  skills: {\n    enchanting: 360,\n    jewelcrafting: 320\n  }\n}\n</code></pre>\n<blockquote>\n<p>This is how types would be defined:</p>\n</blockquote>\n<pre><code>const hero:{\n    name: string;\n    title: string;\n    mounts: string[];\n    skills: {\n        enchanting: number;\n        jewelcrafting: number;\n    };\n}\n = {\n  name: \"Addania\",\n  title: \"The Horde Slayer\",\n  mounts: [\"Spectral Steed\", \"Blue Proto-Drake\"],\n  skills: {\n    enchanting: 360,\n    jewelcrafting: 320\n  }\n}\n</code></pre>\n<h2>More about object type</h2>\n<p><strong>Object Types</strong></p>\n<blockquote>\n<p>TypeScript has a general object type that corresponds to JavaScript's object type. This type includes all non-primitive values: arrays, dates, sets, maps, functions (callable objects), as well as objects in the narrower sense (things that can be written out as an object literal).</p>\n</blockquote>\n<blockquote>\n<p>Since the object type is so general, you are unlikely to ever want to use it in practice. In this session you will learn how to write and work with types for objects in the narrower sense.</p>\n</blockquote>\n<blockquote>\n<p>In the simplest case, object types are written out exactly like object literals, but instead of assigning values to properties, you assign types:</p>\n</blockquote>\n<pre><code>type Message = { text: string, urgent: boolean }\nlet welcome: Message = { text: 'Welcome!', urgent: false }\n</code></pre>\n<blockquote>\n<p>As with all types, you can also use object types directly, without first assigning them to a type alias:</p>\n</blockquote>\n<pre><code>let welcome: { text: string, urgent: boolean } = { text: 'Welcome!', urgent: false }\n</code></pre>\n<blockquote>\n<p>You can also leave out any explicit type annotations and let TypeScript infer the object type for you:</p>\n</blockquote>\n<pre><code>// The inferred type of welcome is { text: string, urgent: boolean }\nlet welcome = { text: 'Welcome!', urgent: false }\n</code></pre>\n<blockquote>\n<p>But it is good practice to use explicit type annotations everywhere. And with objects, more than with primitives, the inferred type will often not be what you want. For example, if you want your object to have optional or read-only properties (discussed later in this session), you will have to tell the compiler with an explicit annotation.</p>\n</blockquote>\n<blockquote>\n<p>An object type can include properties of any other type. It can also have many nested levels, in a similar way to defining a complex object literal. For example:</p>\n</blockquote>\n<pre><code>type Message = { text: string, urgent: boolean }\ntype MessageSender = {\n messages: Message[],\n scheduledFor: Date,\n format: 'email'|'inapp'|'sms',\n from: {\n   email: string,\n   name: {\n     first: string,\n     last: string,\n   },\n },\n}\nlet messages: Message[] = [ /** ... */ ]\nlet messageSender: MessageSender = {\n messages: messages,\n scheduledFor: new Date(2018, 5, 21),\n format: 'email',\n from: {\n   email: 'orcaniser@skillerwhale.com',\n   name: { first: 'Eelton', last: 'John' },\n },\n}\n</code></pre>\n<p><strong>Type Compatibility (Structural Typing)</strong></p>\n<blockquote>\n<p>In TypeScript, one object type A is compatible with another object type B when every property in B has a matching property in A. A matching property is a property with the same key and a compatible type - where compatibility is checked recursively in the case of properties that are themselves objects.</p>\n</blockquote>\n<blockquote>\n<p>Object type A is compatible with object type B even if A has additional properties not present in B (but then B will not be compatible with A).</p>\n</blockquote>\n<pre><code>type Message = { text: string, urgent: boolean }\ntype Todo = { text: string, urgent: true | false }\ntype DetailedMessage = { text: string, urgent: boolean, detail: string }\n</code></pre>\n<blockquote>\n<p>Here, the types Message and Todo are both compatible with each other. (Note the types boolean and true | false are mutually compatible, since the sets of values described by these types are identical.)</p>\n</blockquote>\n<blockquote>\n<p>The type DetailedMessage is also compatible with both Message and Todo, but Message and Todo are not compatible with DetailedMessage, because they are missing the additional detail: string property.</p>\n</blockquote>\n<blockquote>\n<p>Whenever a value of one type is required by the compiler, a value of a compatible type is allowed. For example, if you have a function that requires a parameter of type Message, you can pass it an argument of type Todo or DetailedMessage without raising an error:</p>\n</blockquote>\n<pre><code>function sendMessage (message: Message) {\n // do some messaging\n}\nlet message: Message = {\n text: 'Your order has been shipped.',\n urgent: false\n}\nlet todo: Todo = {\n text: 'Ship order 00046728',\n urgent: true\n}\nlet detailedMessage: DetailedMessage = {\n text: 'You have a new message.',\n urgent: false,\n detail: 'Your order is delayed due to ...'\n}\nsendMessage(message) // ok because message is a Message\nsendMessage(todo) // ok because Todo is compatible with Message\nsendMessage(reminder) // ok because DetailedMessage is compatible with Message\n</code></pre>\n<blockquote>\n<p>This is because TypeScript implements a structural typing system, as opposed to a nominal typing system.</p>\n</blockquote>\n<blockquote>\n<p>In a structural typing system, one type is considered compatible with another when it has the same (or compatible) members. Compatibility in nominal typing systems is stricter: whenever a value of one type is required, only a value of that named type - or of a subtype explicitly declared as such - is allowed.</p>\n</blockquote>\n<blockquote>\n<p>Other example:</p>\n</blockquote>\n<pre><code>type Message = { text: string; urgent: boolean };\ntype Text = { text: string };\nconst welcome: Message = { text: \"xxx\", urgent: true };\nconst text: Text = { text: \"xxx\" };\nconst printing = (a: Text) => {\n console.log(a.text);\n};\nprinting(text);\nprinting(welcome); // Message is compatible with Text\nconst printing2 = (a: Message) => {\n console.log(a.text);\n};\nprinting2(text); // text is not compatible with Message\nprinting2(welcome);\n</code></pre>\n<p><strong>Optional Properties</strong></p>\n<blockquote>\n<p>Sometimes you will want to limit the properties that your objects can have, but without insisting that they have all of these properties all of the time. In principle, you could do this by typing some properties as unions with undefined.</p>\n</blockquote>\n<pre><code>type Message = { text: string, urgent: boolean, detail: string | undefined }\nlet messageWithoutDetail: Message = {\n text: 'Your order has been shipped.',\n urgent: false,\n detail: undefined\n}\nlet messageWithDetail: Message = {\n text: 'You have a new message.',\n urgent: false,\n detail: 'Your order is delayed due to ...'\n}\n</code></pre>\n<blockquote>\n<p>This approach can be tedious, however, especially if you want to have several potentially undefined properties. In order to satisfy the TypeScript compiler, you have to explicitly give your messageWithoutDetail object a detail property with a value of undefined. But in JavaScript, it would be possible to access a detail property on this object (which would have the value undefined) without explicitly setting it.</p>\n</blockquote>\n<blockquote>\n<p>The explicit detail assignment is needed by the compiler, but is not needed by the JavaScript run-time engine.</p>\n</blockquote>\n<blockquote>\n<p>To simplify your code in these cases, TypeScript includes a ? modifier to indicate that a property is optional. This implicitly makes the type of that property a union with undefined, but also allows you to leave the property out altogether when defining objects of the relevant type.</p>\n</blockquote>\n<pre><code>type Message = { text: string, urgent: boolean, detail?: string }\nlet messageWithoutDetail: Message = {\n text: 'Your order has been shipped.',\n urgent: false\n}\nlet messageWithDetail: Message = {\n text: 'You have a new message.',\n urgent: false,\n detail: 'Your order is delayed due to ...'\n}\n</code></pre>\n<blockquote>\n<p>Other examples of optional properties:</p>\n</blockquote>\n<pre><code>type Flat = { location: string; area: number; price: number | undefined };\ntype Flat2 = { location: string; area: number; price?: number };\n\nconst newHome: Flat = { location: \"Prag\", area: 60 }; // error, price needs to be provided, but can have value of undefined\nconst newHome2: Flat = { location: \"Prag\", area: 60, price: undefined }; // ok\nconst newHome3: Flat = { location: \"Prag\", area: 60, price: 700 }; // ok\nconst homeSweetHome: Flat2 = { location: \"Prag\", area: 60 }; // ok, because price is optional and does not need to be defined\nconst homeSweetHome2: Flat2 = { location: \"Prag\", area: 60, price: 700 }; // ok\nconst homeSweetHome3: Flat2 = { location: \"Prag\", area: 60, price: undefined }; // ok, because price can be undefined\n</code></pre>\n<blockquote>\n<p>You can use control flow and type narrowing to handle optional properties, by first checking whether the property is undefined.</p>\n</blockquote>\n<pre><code>let message: Message = { /* ... */ }\nlet details: string[] = []\n// Error: Argument of type 'string | undefined' is not assignable to parameter of type 'string'\ndetails.push(message.details)\nif (message.detail !== undefined) {\n // OK: message.details has been narrowed to type 'string'\n details.push(message.detail)\n}\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>type Message2 = { text: string; urgent: boolean; detail?: string };\nlet details: string[] = [];\nconst message: Message2 = { text: \"Hi\", urgent: false, detail: \"blue\" };\ndetails.push(message.detail); // error because detail can be undefined and in details variable we want to only have strings\n</code></pre>\n<p><strong>Excess Property Checks</strong></p>\n<blockquote>\n<p>TypeScript's structural typing system, where types are considered compatible even if they have additional properties, gives you a lot of flexibility when working with object types.\nOptional properties take advantage of a flexible feature of JavaScript - that undefined properties can always be accessed at run-time (and have the value undefined) - to save you from writing extra lines of code just to satisfy the compiler.</p>\n</blockquote>\n<blockquote>\n<p>Combining these two features of TypeScript, however, creates a hole in the compiler that bugs could potentially fall through. Consider the following code:</p>\n</blockquote>\n<pre><code>type Message = { text: string, urgent: boolean, detail?: string }\nconst message: Message = {\n text: 'Welcome!',\n urgent: false,\n deetail: 'Your account has been created.'\n}\n</code></pre>\n<blockquote>\n<p>Here the message variable has a property called deetail instead of a property called detail. This is almost certainly a typo, and a bug in the code.</p>\n</blockquote>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>type Message3 = { text: string; urgent: boolean; detail?: string };\nconst message3 = {\n text: \"Welcome!\",\n urgent: false,\n deetail: \"Your account has been created.\",\n};\nconst printing3 = (a: Message3) => {\n console.log(a.text);\n};\nprinting3(message3); //compiler considers this as ok, but it is a hole in the system! message3 is compatible with Message3\n</code></pre>\n<blockquote>\n<p>But given the rules of structural typing and optional properties alone, this would not be an error: an object does not have to have the optional detail property to count as a Message, and it can have any additional properties - deetail or anything else - and still be compatible with the Message type.</p>\n</blockquote>\n<blockquote>\n<p>In order to catch bugs like these, TypeScript imposes excess property checks in certain situations on top of its core structural typing system. Where excess property checks apply, one object type will be considered compatible with another when it has all the same properties as the other type and no additional properties.</p>\n</blockquote>\n<blockquote>\n<p>There are two situations where TypeScript uses excess property checks:\nWhen an object literal is assigned to a variable with an explicit type (as in the example above with Message).\nWhen an object literal is passed directly as a function argument (as in the example below).</p>\n</blockquote>\n<blockquote>\n<p>Because of this, the buggy code above in fact does generate an error, as does the similarly buggy code in the function call below:</p>\n</blockquote>\n<pre><code>type Message = { text: string, urgent: boolean, detail?: string }\nfunction sendMessage (message: Message) {\n // do message sending\n}\n\nsendMessage({\n text: 'Welcome!',\n urgent: false,\n // Error: Object literal may only specify known properties, and 'deetail'\n // does not exist in type 'Message'. Did you mean to write 'detail'?\n deetail: 'Your account has been created.'\n})\n</code></pre>\n<blockquote>\n<p>Recap on when excess properties apply:</p>\n</blockquote>\n<blockquote>\n<p>Excess properties check will apply and detect our error if we explicitly assign a type:</p>\n</blockquote>\n<pre><code>type Message4 = { text: string; urgent: boolean; detail?: string };\nconst message4: Message4 = {\n text: \"Welcome!\",\n urgent: false,\n deetail: \"Your account has been created.\", // we will get an error here now! excess properties are not allowed\n};\nconst printing4 = (a: Message3) => {\n console.log(a.text);\n};\nprinting4(message4);\n</code></pre>\n<blockquote>\n<p>Another way how excess properties check will apply and detect our error if we pass object literal directly to our function!</p>\n</blockquote>\n<pre><code>type Message5 = { text: string; urgent: boolean; detail?: string };\nconst printing5 = (a: Message5) => {\n console.log(a.text);\n};\n\nprinting5({\n text: \"Welcome!\",\n urgent: false,\n deetail: \"Your account has been created.\", // we will get an error here now! excess properties are not allowed\n});\n</code></pre>\n<blockquote>\n<p>In some cases, excess property checks may result in a compiler error that doesn't correspond to a bug in your code - because you really do intend the object in question to have an additional property not specified in its type. In these cases, the simplest and usually best solution is just to include the additional property as an explicit optional property in the type definition.</p>\n</blockquote>\n<p><strong>Read-Only Properties</strong></p>\n<blockquote>\n<p>You can indicate that a property cannot be reassigned using the readonly property modifier. TypeScript will indicate an error if a line of code reassigns the value of a readonly property after it has been set.\nYou prepend the readonly modifier to a property that you want to be read-only.</p>\n</blockquote>\n<pre><code>type Message = {\n readonly text: string,\n urgent: boolean\n}\nlet welcome: Message = {\n text: 'Welcome',\n urgent: false\n}\n// Error: Cannot assign to 'text' because it is a read-only property\nwelcome.text = 'Welcome!!'\nfunction print (message: Message) {\n // Error: Cannot assign to 'text' because it is a read-only property\n message.text = `** ${message.text} **`\n console.log(message)\n}\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>type Message6 = {\n  readonly text: string;\n  urgent: boolean;\n};\nlet welcome6: Message6 = {\n  text: \"Welcome\",\n  urgent: false,\n};\nwelcome6.text = \"Bem vindo\"; // error when trying to assign a new value to the text\n</code></pre>\n<blockquote>\n<p>readonly can be particularly useful for function parameter types, providing a degree of assurance that the function will not modify the values that are passed to it.\nNote that specifying a property as readonly only prevents reassignments to that property, however. It does not prevent the value itself from being changed if it is mutable. For example, an array assigned to a readonly property can still have new items added to it.</p>\n</blockquote>\n<pre><code>type Message7 = {\n readonly clients: Array&#x3C;string>;\n};\nlet welcome7: Message7 = {\n clients: [\"A\", \"B\"],\n};\nwelcome7.clients = [\"A\", \"B\", \"C\"]; // assigning new value to clients is not allowed\nwelcome7.clients.push(\"C\"); // but mutating array is still allowed\n</code></pre>\n<p><strong>Typing Methods in Object Types</strong></p>\n<blockquote>\n<p>Object types can include method types as well as data types.\nTo type a method on an object you use a function type expression. Function type expressions mirror the syntax of arrow functions, with a typed list of parameters in brackets, and a return type after the => arrow. For example:</p>\n</blockquote>\n<pre><code>type SendMessageFunction = (messages: Message[], saveLocalCopy: boolean) => string\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>type Print = (a: Message5) => void\nconst printing8: Print = (a) => {\n console.log(a.text);\n};\n</code></pre>\n<p>You can use a function type expression as an object property type like any other. Objects annotated with that type will then need to implement a method matching that function signature.</p>\n<pre><code>type MessageSender = {\n sendAll: (messages: Message[], saveLocalCopy: boolean) => string\n}\nlet sender: MessageSender = {\n sendAll: (messages: Message[], saveLocalCopy: boolean) => {\n   // do some sending\n   return 'OK'\n}\nsender.sendAll(someMessages)\n</code></pre>\n<blockquote>\n<p>Note that the parameter names in the implementation of a function or method do not have to match the parameter names in the type definition. However, the convention is to use the same names unless you have a good reason not to.</p>\n</blockquote>\n<h2>Array type</h2>\n<p><img src=\"https://i.imgur.com/PqcRvxa.jpg\" style=\"width: 800px\"><p style=\"font-size: 12px; text-align: right; width: 100%\"><em>Photo from wowhead.com</em></p></p>\n<blockquote>\n<p>Let's imagine we have an array of all our very precious pets:</p>\n</blockquote>\n<pre><code>let pets = [\"Wind Rider Cub\", \"Phoenix Hatchling\"]\n</code></pre>\n<blockquote>\n<p>To define type as array of strings we say:</p>\n</blockquote>\n<pre><code>let pets: string[];\n</code></pre>\n<blockquote>\n<p>or alternatively:</p>\n</blockquote>\n<pre><code>let pets: Array&#x3C;string>;\n</code></pre>\n<blockquote>\n<p>To define type as array of numbers we say:</p>\n</blockquote>\n<pre><code>let hordeKillsPerDay: number[];\n</code></pre>\n<blockquote>\n<p>or alternatively:</p>\n</blockquote>\n<pre><code>let hordeKillsPerDay: Array&#x3C;number>;\n</code></pre>\n<blockquote>\n<p>To define type as mixed array (of numbers or strings) we say:</p>\n</blockquote>\n<pre><code>let mixedAchievements: any[];\n</code></pre>\n<blockquote>\n<p>or alternatively:</p>\n</blockquote>\n<pre><code>let mixedAchievements: Array&#x3C;any>;\n</code></pre>\n<blockquote>\n<p>You can also be more specific:</p>\n</blockquote>\n<pre><code>let mixedAchievements: (string | number)[];\n</code></pre>\n<blockquote>\n<p>or alternatively:</p>\n</blockquote>\n<pre><code>let mixedAchievements: Array&#x3C;string | number>;\n</code></pre>\n<p><strong>More on Array types</strong></p>\n<blockquote>\n<p>Arrays in <code>JavaScript</code> can have elements of different types. This is usually undesirable, and is a potential source of bugs. For example, when mapping or filtering an array, you want to assume all the elements have the same type.</p>\n</blockquote>\n<blockquote>\n<p>Arrays in <code>TypeScript</code>, on the other hand, can only have elements of the same type.</p>\n</blockquote>\n<blockquote>\n<p>There are two syntax options for defining an array. Because arrays are so common, TypeScript provides a short way to define array types, using square brackets:</p>\n</blockquote>\n<pre><code>const strings: string[] = ['once', 'upon', 'a', 'time']\n</code></pre>\n<blockquote>\n<p>You can also use the Array generic type. Generic types are like functions for types, which take their arguments in angle brackets:</p>\n</blockquote>\n<pre><code>const strings: Array&#x3C;string> = ['once', 'upon', 'a', 'time']\n</code></pre>\n<blockquote>\n<p>TypeScript will raise a type error if you try to add an element of the wrong type to an array. The benefit of this restriction is that it can infer the type of every element in your array, and will raise an error if you try to do anything with an array element that is not compatible with its type.</p>\n</blockquote>\n<blockquote>\n<p>You can loosen Typescript's array type restriction in a controlled way by creating an <code>array of a union type</code>. For example, arrays with the following type can contain a mixture of strings and numbers:</p>\n</blockquote>\n<pre><code>const arrayWithStringsAndNumbers: (string | number)[] = [1, 'two', 3]\n</code></pre>\n<blockquote>\n<p>Be careful, the <code>|</code> union type operator takes precedence over the <code>[]</code> array type operator, so the brackets are necessary to create an array type of a union type. Dropping the brackets will give you a union type where one of the subtypes is an array:</p>\n</blockquote>\n<pre><code>let stringORArrayOfNumbers: string | number[] = 'just a string'\n</code></pre>\n<blockquote>\n<p>TypeScript's restriction on arrays is generally a good thing, and you are unlikely to need to use union types in this way to loosen that restriction. You are more likely to use unions of literal types to tighten the restriction even further. For example:</p>\n</blockquote>\n<pre><code>type ErrorCode = 400 | 401 | 403\nconst serverResponsesFromLast24Hours: number[] = [\n  /* array of all server responses as numbers */\n]\nconst errorCodesFromLast24Hours: ErrorCode[] = []\nfor (const response of serverResponsesFromLast24Hours) {\nif (response === 400 || response === 401 || response === 403) {\nerrorCodesFromLast24Hours.push(response)\n  }\n}\n// Error: Argument of type '200' is not assignable to parameter of type 'ErrorCode'\nerrorCodesFromLast24Hours.push(200)\n</code></pre>\n<blockquote>\n<p>The more precise you can be about the types of values that can go into your arrays, the more helpful the compiler can be in ensuring that those values are used appropriately throughout your code.</p>\n</blockquote>\n<blockquote>\n<p>If you do not explicitly annotate your array variables, TypeScript will infer the type based on the types of the elements in the initial assignment. There are called <code>Inferred Array Types</code>.</p>\n</blockquote>\n<pre><code>const x = [1, 2, 3] // x has the inferred type 'number[]'\nconst y = ['one', 'two', 'three'] // y has the inferred type 'string[]'\nconst z = [1, true, 'three'] // z has the inferred type '(string | number | boolean)[]'\n</code></pre>\n<blockquote>\n<p>The inferred type will always be a <code>general</code> type, like number or string, and not a <code>literal</code> type, like 1 or 'three'. If the elements in the initial assignment have different types, the inferred type of the array will be a union of all those types.</p>\n</blockquote>\n<blockquote>\n<p>If your initial assignment is an empty array, TypeScript will look at how you use the array to infer the type.</p>\n</blockquote>\n<pre><code>const x = [] // x initially has the inferred type 'any[]'\nx.push(1) // x now has the inferred type 'number[]'\nx.push('two') // x now has the inferred type '(number | string)[]'\n</code></pre>\n<blockquote>\n<p>The inferred type will adapt based on the values you add to the array, so when you lookup elements from the array subsequently you will get a suitably cautious union type. But there will be nothing to stop you adding more values of different types.</p>\n</blockquote>\n<blockquote>\n<p>For this reason, it is good practice to explicitly annotate any array that is initialised as an empty array.</p>\n</blockquote>\n<pre><code>const x: Array&#x3C; string | number > = []\n</code></pre>\n<p><strong>Readonly Arrays</strong></p>\n<blockquote>\n<p>Arrays in JavaScript are <code>mutable</code>: you can add and remove elements using the push, pop, shift, and unshift methods, reassign the elements at any index, and modify the whole array with methods like sort:</p>\n</blockquote>\n<pre><code>const numbers = [2, 4]\nnumbers.push(1) // [2, 4, 1]\nnumbers[1] = 3 // [2, 3, 1]\nnumbers.sort() // [1, 2, 3]\n</code></pre>\n<blockquote>\n<p>As seen above, even if we declare an array as a <code>const</code>, we still can <code>mutate</code> it. Const only prevents up from re-assigning the entire array like so:</p>\n</blockquote>\n<pre><code>const numbers = [2, 4]\nnumbers = [1,2,3] // not possible\n</code></pre>\n<blockquote>\n<p>But we can still re-assign individual elements of an array:</p>\n</blockquote>\n<pre><code>const numbers = [2, 4]\nnumbers[1] = 3 // [2, 3]\n</code></pre>\n<blockquote>\n<p>TypeScript arrays are also <code>mutable</code> by default, but you can create an <code>immutable</code> array using the <code>ReadonlyArray</code> generic type or the <code>readonly</code> type modifier. TypeScript will raise a compiler error if you attempt to alter a readonly array.</p>\n</blockquote>\n<pre><code>const numbers: readonly number[] = [2, 4] // or: const numbers: ReadonlyArray&#x3C;number> = [2, 4]\nnumbers.push(1) // Error: Property 'push' does not exist on type 'readonly number[]'.\nnumbers[1] = 3 // Error: Index signature in type 'readonly number[]' only permits reading.\nnumbers.sort() // Error: Property 'sort' does not exist on type 'readonly number[]'.\n</code></pre>\n<blockquote>\n<p>Note that this is not the same as the difference between <code>let</code> and <code>const</code> arrays. You cannot reassign a different array to a <code>const</code> variable, but you can still <code>mutate</code> the array itself. On the other hand, you cannot <code>mutate</code> a readonly array, but if it is assigned to a <code>let</code> variable, you can still reassign a different array to that variable.</p>\n</blockquote>\n<blockquote>\n<p>Summary or arrays re-assigning and mutability:</p>\n</blockquote>\n<pre><code>let numbers: ReadonlyArray&#x3C;number> = [1, 2];\nnumbers = [3, 4]; // OK: re-assigning whole array is ok because it is declared as let\nnumbers[1] = 0; // Error: numbers is readonly therefore its individual elements cannot be re-assigned\n\nconst pets: ReadonlyArray&#x3C;string> = [\"pheonix hatchling\", \"bear cub\"];\npets = [\"pebble\"]; // Error: array declared as const cannot be re-assigned\npets[0] = \"personal world destroyer\"; // Error: pets is readonly therefore its individual elements cannot be re-assigned\n\nconst mounts: Array&#x3C;string> = [\"spectral tiger\", \"drake of the west wind\"];\nmounts = [\"fire hawk\", \"flameward hippogryph\"]; // Error: array declared as const cannot be re-assigned\nmounts[1] = \"heart of the aspects\"; // OK: individual elements of const srray can still be re-assigned\n\nlet titles: Array&#x3C;string> = [\"Savior of Azeroth\", \"Dragonslayer\"];\ntitles = [\"the Flamebreaker\", \"Defender of a Shattered World\"]; // OK: array declared as let can be re-assigned\ntitles[1] = \"Blessed Defender of Nordrassil\"; // OK: individual elements of let array can still be re-assigned\n</code></pre>\n<blockquote>\n<p>Please note, that <code>readonly</code> is only on the surface and refers to the level on which is it declared. Imagine we have array of objects:</p>\n</blockquote>\n<pre><code>const achievements: ReadonlyArray&#x3C;{ name: string; date: number }> = [\n  { name: \"Bucket List\", date: 1644150502 },\n  { name: \"Chromatic Champion\", date: 1644150502 },\n];\n\nachievements[0] = {name: \"Taste the Rainbow!\", date: 1644150502} // Error: you cant re-assign given element because achievements is readonly\nachievements[0].name = \"Taste the Rainbow\" // OK: readonly is only on the surface level of array elements, but if we dig deeper we can change values\n</code></pre>\n<blockquote>\n<p>In above example we can see that we cant assign a new object to <code>achievements[0]</code> but we can change its name or date: <code>achievements[0].name</code></p>\n</blockquote>\n<blockquote>\n<p>If we do not even want to be able to change the name or date of those objects, then we need to add readonly further down the tree:</p>\n</blockquote>\n<pre><code>const achievements: ReadonlyArray&#x3C;{ readonly name: string; readonly date: number }> = [\n  { name: \"Bucket List\", date: 1644150502 },\n  { name: \"Chromatic Champion\", date: 1644150502 },\n];\n\nachievements[0] = {name: \"Taste the Rainbow!\", date: 1644150502} // Error: you cant re-assign given element because achievements is readonly\nachievements[0].name = \"Taste the Rainbow\" // Error: name is now also readonly property of the object\n</code></pre>\n<blockquote>\n<p>Readonly modifier can be used on arrays, objects or properties of object.</p>\n</blockquote>\n<blockquote>\n<p>We can also make an entire object readonly:</p>\n</blockquote>\n<pre><code>type Item = Readonly&#x3C;{item: string, amount: number}>\n</code></pre>\n<p><strong>String Indexed Access</strong></p>\n<blockquote>\n<p>JavaScript <code>arrays</code> are special kinds of <code>objects</code>.</p>\n</blockquote>\n<pre><code>const iAmArray = ['elementOnIndexZero', 'elementOnIndexOne', 'elementOnIndexTwo']\niAmArray[0] // 'elementOnIndexZero'\n</code></pre>\n<blockquote>\n<p>Under the hood in Javascript, the array looks something like this:</p>\n</blockquote>\n<pre><code>iAmArray = {\n  '0': 'elementOnIndexZero',\n  '1': 'elementOnIndexOne',\n  '2': 'elementOnIndexTwo',\n}\niAmArray[0] // 'elementOnIndexZero'\n</code></pre>\n<blockquote>\n<p>You can access indexed elements of an array using a string as well as a number.</p>\n</blockquote>\n<pre><code>const x = [2, 4, 6, 8]\nx[0] === x['0'] // true\n</code></pre>\n<blockquote>\n<p>TypeScript attempts to accommodate this quirk by allowing <code>string-keyed property access</code> when it can be certain that the string can successfully be parsed as a number.</p>\n</blockquote>\n<blockquote>\n<p>In practice, this means when the string is a string representation of a number that is either passed as a literal value or a variable with a literal type.</p>\n</blockquote>\n<pre><code>const x: number[] = [2, 4, 6, 8]\nlet literalVariable: '0' = '0'\nlet stringVariable: string = '0'\nx['0'] // ok\nx[literalVariable] // ok\nx[stringVariable] // Error: Element implicitly has an 'any' type because index expression is not of type 'number'.\n</code></pre>\n<blockquote>\n<p>The last case here raises an error because there is no type guarantee that <code>stringVariable</code> will hold a string representation of a number.</p>\n</blockquote>\n<blockquote>\n<p>To get all of this to work, TypeScript allows you to access an array property using any string-keyed property, but implicitly gives the resulting element the any type if it cannot be parsed as a number. If you have the <code>noImplicitAny</code> compiler flag disabled, therefore, the last line in the example above will not raise an error.</p>\n</blockquote>\n<blockquote>\n<p>More usefully, TypeScript will also allow you to access string-keyed properties of arrays when it can be certain that these correspond to genuine properties or methods on the array.</p>\n</blockquote>\n<pre><code>const x: number[] = [2, 4, 6, 8]\n\nconst arrayPropertyKey = 'length'\n\nx['length'] // ok: equivalent to `x.length`\nx[arrayPropertyKey] // ok: also equivalent to `x.length`\nx['sort'] // ok: equivalent to x.sort, i.e. retrieves the fill method on x (without calling it)\nx['sort']() // ok: equivalent to x.sort(), i.e. retrieves the fill method on x (and calls it)\n</code></pre>\n<p><strong>Unchecked Indexed Access</strong></p>\n<blockquote>\n<p>Because the elements of TypeScript arrays all have the same type, the compiler \"knows\" the type of each element. But there is a catch.</p>\n</blockquote>\n<pre><code>const totals: number[] = [1, 2, 3]\n\nfor (const total of totals) {\n// total has type 'number' :)\n}\n\n// firstTotal has type 'number' :/\nconst firstTotal = totals[0]\n\n// fourthTotal has type 'number' :(\nconst fourthTotal = totals[3]\n</code></pre>\n<blockquote>\n<p>The compiler gives fourthTotal an inferred type of number, but in fact totals[3] is undefined. This is called <code>unchecked index access</code>: the compiler doesn't force you to check whether the element at any given index exists.</p>\n</blockquote>\n<blockquote>\n<p>If you are worried about this possibility, you can enable the <code>noUncheckedIndexedAccess</code> compiler flag. With this flag enabled, the type of elements accessed using an index will be a union type with undefined:</p>\n</blockquote>\n<pre><code>const totals: number[] = [1, 2, 3]\n\nfor (const total of totals) {\n// total has type 'number' :)\n}\n\n// firstTotal has type 'number | undefined' :/\nconst firstTotal = totals[0]\n\n// fourthTotal has type 'number | undefined' :)\nconst fourthTotal = totals[3]\n</code></pre>\n<blockquote>\n<p>Unchecked index access is a way in which TypeScript is not completely type safe. But because the errors that it lets through are rare, and enabling <code>noUncheckedIndexedAccess</code> forces you to write extra manual checks every time you need to access an element, this option is disabled by default.</p>\n</blockquote>\n<h2>Tuples</h2>\n<p><img src=\"https://i.imgur.com/OTOEqWp.jpg\" title=\"Photo by Gela Del Rosario from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Gela Del Rosario from Pexels</em></p></p>\n<blockquote>\n<p>Typescript allows us to add a new type: <code>Tuple</code>. They are available in other programming languages but not in JS. Tuples are fixed length arrays. Example tuple:</p>\n</blockquote>\n<pre><code>const profession= [1, \"cooking\"]\n</code></pre>\n<blockquote>\n<p>By inference Typescript will think that profession is an array of either a number or string.</p>\n</blockquote>\n<pre><code>profession: (number | string)[]\n</code></pre>\n<blockquote>\n<p>Typescript will allow to add elements to the array or re-assign values:</p>\n</blockquote>\n<pre><code>profession.push(\"first aid\");\nprofession[1]=2;\n</code></pre>\n<blockquote>\n<p>So in this scenario, inference does not work the way we want it to work. How to say to Typescript that we can only have exactly 2 elements? Tuple is perfect for this.</p>\n</blockquote>\n<pre><code>const role: [number, string] = [1, \"cooking\"]\n</code></pre>\n<blockquote>\n<p>This tells Typescript I want a special array which should have exactly two elements out of which first one is number and second one is string. Please note, <code>.push</code> will still work as push is exception and works on Tuples!</p>\n</blockquote>\n<h2>Enum type</h2>\n<blockquote>\n<p>Enum is another data type which exists in Typescript and other languages but does not exist in JS. Enums are global variables that can have only limited number of options. For example for the role, we can have options: guildMaster, officer, guildee. These in code should be represented as numbers (starting from 0) but we also want to have human readable labels on top of them.</p>\n</blockquote>\n<blockquote>\n<p>Imagine we then need to work with those values in the code. We could of course just have those as normal string values (not enums) but then we would need to remember if it was <code>guild-master</code> or <code>guild_master</code> or <code>guildMaster</code>.. Which can be cumbersome.</p>\n</blockquote>\n<blockquote>\n<p>Another possibility would be to define 3 different global constants where each of role name would be a constant and hold a number:</p>\n</blockquote>\n<pre><code>const guildMaster = 0;\nconst officer = 1;\nconst guildee = 2;\n</code></pre>\n<blockquote>\n<p>And then we can work variable names in code:</p>\n</blockquote>\n<pre><code>if (officer){ console.log(\"Hi Officer!\")}\n</code></pre>\n<blockquote>\n<p>But then again I needed 3 global variables.</p>\n</blockquote>\n<blockquote>\n<p>Enums can help us in such cases.Enum is a <code>custom type</code> and are written in upper-case.</p>\n</blockquote>\n<blockquote>\n<p>How to create Enum:</p>\n</blockquote>\n<pre><code>enum Role { guildMaster, officer, guildee};\n</code></pre>\n<blockquote>\n<p>Behind the scenes <code>guild-master</code> receives number 0 (poor life of guild masters), <code>officer</code> gets number 1 and <code>guildee</code> gets number 2.</p>\n</blockquote>\n<blockquote>\n<p>We can also start from any custom number:</p>\n</blockquote>\n<pre><code>enum Role { guildMaster = 5, officer, guildee};\n</code></pre>\n<blockquote>\n<p>The rest of them will pick up and have 6 for officer and 7 for guildee.</p>\n</blockquote>\n<blockquote>\n<p>Or we assign custom numbers to each of them:</p>\n</blockquote>\n<pre><code>enum Role { guildMaster = 5, officer = 100, guildee = 200};\n</code></pre>\n<blockquote>\n<p>We are also not restricted to use numbers, we can use text:</p>\n</blockquote>\n<pre><code>enum Role { guildMaster = \"THE MASTER\", officer = 100, guildee = 200};\n</code></pre>\n<blockquote>\n<p>Then we can access this values just like on an object:</p>\n</blockquote>\n<pre><code>enum Role { guildMaster = \"THE MASTER\", officer = 1, guildee = 0 }\n\nconst hero = {\n  name: \"Addania\",\n  title: \"The Horde Slayer\",\n  mounts: [\"Ashes of Al'ar\", \"Spectral Steed\", \"Blue Proto-Drake\"],\n  skills: {\n    enchanting: 360,\n    jewelcrafting: 320\n  },\n  role: Role.guildMaster\n}\n</code></pre>\n<blockquote>\n<p>Now you are maybe asking how did I define the enum? At least for me this worked:</p>\n</blockquote>\n<pre><code>enum Role { guildMaster = \"THE MASTER\", officer = 1, guildee = 0 }\n\nconst hero: {\n    name: string;\n    title: string;\n    mounts: string[];\n    skills: {\n        enchanting: number;\n        jewelcrafting: number;\n    };\n    role: Role;\n\n} = {\n    name: \"Addania\",\n    title: \"The Horde Slayer\",\n    mounts: [\"Ashes of Al'ar\", \"Spectral Steed\", \"Blue Proto-Drake\"],\n    skills: {\n        enchanting: 360,\n        jewelcrafting: 320\n    },\n    role: Role.guildMaster\n}\n</code></pre>\n<h2>Any</h2>\n<blockquote>\n<p>Stores any value in there, Typescript will never yell at you.</p>\n</blockquote>\n<blockquote>\n<p>We can say:</p>\n</blockquote>\n<pre><code>let petName: any;\n</code></pre>\n<blockquote>\n<p>Or at least we can say <code>any</code> array:</p>\n</blockquote>\n<pre><code>let petList: any[];\n</code></pre>\n<blockquote>\n<p>However, good practice is that we AVOID <code>any</code>!</p>\n</blockquote>\n<h2>Union type:</h2>\n<blockquote>\n<p>Imagine I want to have a function which should work on both numbers AND strings. It would either add 2 numbers or concatenate 2 strings:</p>\n</blockquote>\n<pre><code>const combine = (input1, input2) => {\n    const result = input1 + input2\n    return (result)\n};\n</code></pre>\n<blockquote>\n<p>Union type can help us in case we want to work with 2 or more types (can be multiple):</p>\n</blockquote>\n<pre><code>const combine = (input1: number | string, input2: number | string) => {\n    const result = input1 + input2\n    return (result)\n};\n</code></pre>\n<h2>More about union types:</h2>\n<p><strong>Unions of Sets and Types</strong></p>\n<blockquote>\n<p>Every type describes a set of values - the values that have that type. The boolean type describes the set of the two possible Boolean values, true and false, the string type describes the set of all of the possible strings, and so on.</p>\n</blockquote>\n<blockquote>\n<p>In set theory, the union of two or more sets is the (super)set containing all the elements of those (sub)sets. The union of the set of all rational numbers and the set of all irrational numbers, for example, is the set of all real numbers.</p>\n</blockquote>\n<blockquote>\n<p>In type theory, the union of two or more types is the (super)type which describes the union of the sets described by those (sub)types. The boolean type, for example, is effectively the union of the literal types true and false.</p>\n</blockquote>\n<blockquote>\n<p>In TypeScript, you can construct unions of any subtypes with the | operator. For example:</p>\n</blockquote>\n<pre><code>type OptionalString = string | undefined // e.g. 'hello whale', undefined\ntype StringOrNumber = string | number // e.g. 'The meaning of life', 42\ntype OneOrMoreNumbers = number | number[] // e.g. 8, 12, [1, 2, 3, 4, 5]\ntype Primitive = boolean | string | number | bigint // e.g. true, 'true', 82, 10n\n</code></pre>\n<blockquote>\n<p>The | operator is intentionally similar to the logical \"or\" operator, ||. You can read it as \"or\". The values of type X | Y must be either of type X or of type Y.</p>\n</blockquote>\n<p><strong>Unions and Supertypes</strong></p>\n<blockquote>\n<p>Unions are supertypes of their component subtypes. Likewise, any built-in supertype (though not explicitly defined as a union) is equivalent to a union of all its subtypes, in the sense that it describes the exact same set of values.</p>\n</blockquote>\n<blockquote>\n<p>For example, the general object type is equivalent to a union of every specific object type you might define. And the maximally general any and unknown types are equivalent to unions of every other type.</p>\n</blockquote>\n<blockquote>\n<p>The unknown type behaves in all respects just like a union of every other type, and fits naturally into the rest of the type system. The any type is special, however: it is like a union of every other type which also signals that type checking should be disabled for variables of that type.</p>\n</blockquote>\n<blockquote>\n<p>Because supertypes are equivalent to unions of their subtypes, writing an explicit union of a supertype with any of its subtypes is effectively meaningless: the resulting union will be no different from the supertype itself.</p>\n</blockquote>\n<blockquote>\n<p>For example, a union with any results in a type that exactly equivalent to any itself, and likewise for unknown.</p>\n</blockquote>\n<pre><code>type AnyByAnotherName = any | string\n\ntype UnknownByAnotherName = unknown | number\n</code></pre>\n<blockquote>\n<p>In unions with any and unknown, meanwhile, any takes priority.</p>\n</blockquote>\n<pre><code>type AnyInDisguise = any | unknown\n</code></pre>\n<blockquote>\n<p>This means that any variable with the <code>AnyInDisguise</code> type will have all type checking disabled for it, just like an ordinary any variable.</p>\n</blockquote>\n<p><strong>Unions of Literal Types</strong></p>\n<blockquote>\n<p>You can create unions of primitive types like string and number to describe even larger and more general sets of values. On the other side, you can create unions of literal types to describe smaller and more precise sets of values.</p>\n</blockquote>\n<blockquote>\n<p>When dealing with HTTP response codes, for example, the number type is too general, as not every number is a valid response code. In JavaScript, or TypeScript without unions of literal types, you might check that numbers are within the desired range at run-time:</p>\n</blockquote>\n<pre><code>function validateResponse (response) {\n  if (response === 400 || response === 401 || response === 403 || response === 404) {\n    return response\n  }\n  throw new Error()\n}\n\nfunction server (code) {\n  switch (option) {\n    case 400:\n      return computerSaysNo()\n    case 401:\n      return logInPlease()\n    case 403:\n      return itsASecret()\n    case 404:\n      return cantFindIt()\n  }\n}\n\nconst errorCode = validateResponse(400)\nserver(errorCode)\n</code></pre>\n<p>With a union of literal types, you can instead shift the burden of validation onto the compiler:</p>\n<pre><code>type ErrorCode = 400 | 401 | 403 | 404\n\nfunction server (option: ErrorCode) {\n  switch(option) {\n    case 400:\n      return computerSaysNo()\n    case 401:\n      return logInPlease()\n    case 403:\n      return itsASecret()\n    case 404:\n      return cantFindIt()\n  }\n}\n\nserver(400)\n</code></pre>\n<p><strong>Arrays of Union Types</strong></p>\n<blockquote>\n<p>In JavaScript, arrays can contain a mixture of values of different types. Typically, however, you want arrays to only contain values of the same type, and TypeScript enforces this restriction.</p>\n</blockquote>\n<blockquote>\n<p>By creating an array of a union type, however, you can loosen this restriction in a controlled way. For example, arrays with the following type can contain a mixture of strings and numbers:</p>\n</blockquote>\n<pre><code>type stringsAndNumbers = (string | number)[]\n</code></pre>\n<blockquote>\n<p>Note that the | union type operator takes precedence over the [] array type operator, so the brackets are necessary to create an array type of a union type. Dropping the brackets will give you a union type, where one of the subtypes is an array:</p>\n</blockquote>\n<pre><code>type stringOrNumbers = string | number[]\n</code></pre>\n<blockquote>\n<p>Above example would be a union type of a string or an array of numbers</p>\n</blockquote>\n<blockquote>\n<p>Partly for this reason, it is conventional to leave a space either side of the | operator, and no spaces before the [] operator.</p>\n</blockquote>\n<blockquote>\n<p>TypeScript's restriction on arrays is generally a good thing, and you are unlikely to need to use union types in this way to loosen that restriction. You are more likely to use unions of literal types to tighten the restriction even further. For example:</p>\n</blockquote>\n<pre><code>type ErrorCode = 400 | 401 | 403 | 404\n\nconst serverResponsesFromLast24Hours: number[] = [\n  /* array of all server responses as numbers */\n]\n\nconst errorCodesFromLast24Hours: ErrorCode[] = []\n\nfor (const response of serverResponsesFromLast24Hours) {\n  if (response === 400 || response === 401 || response === 403 || response === 404) {\n    errorCodesFromLast24Hours.push(response)\n  }\n}\n\n// Error: Argument of type '200' is not assignable to parameter of type 'ErrorCode'\nerrorCodesFromLast24Hours.push(200)\n</code></pre>\n<blockquote>\n<p>The more precise you can be about the types of values that can go into your arrays, the more helpful the compiler can be in ensuring that those values are used appropriately throughout your code.</p>\n</blockquote>\n<p><strong>Unions of Object Types</strong></p>\n<blockquote>\n<p>With unions of object types, the union does not merge the properties of the underlying types together. Suppose you have the following types in your code:</p>\n</blockquote>\n<pre><code>type Customer = {\n  name: string,\n  customerSaverNumber: number\n}\n\ntype Employee = {\n  name: string,\n  employeeDiscountCode: number,\n}\n\ntype CheckoutUser = Customer | Employee\n</code></pre>\n<blockquote>\n<p>A valid instance of CheckoutUser must be either a Customer or an Employee, and not a hybrid of the two. In other words, it must have a name property, and then either a customerSaveNumber or an employeeDiscountCode, <code>but not both</code>.</p>\n</blockquote>\n<blockquote>\n<p>The following variable, therefore, does not satisfy the definition of CheckoutUser (is not a valid instance of CheckoutUser):</p>\n</blockquote>\n<pre><code>let customerEmployeeHybrid = {\n  name: 'Rod',\n  customerSaverNumber: 479823498,\n  employeeDiscountCode: 094839\n}\n</code></pre>\n<blockquote>\n<p>However, because of TypeScript's structural typing system, an object is compatible with either the Customer or the Employee type when it has all of the properties of that type, even if it has additional properties as well.</p>\n</blockquote>\n<blockquote>\n<p>For this reason, the <code>customerEmployeeHybrid</code> variable is compatible with both the Customer type and the Employee type. As a result, it is also compatible with the CheckoutUser union type.</p>\n</blockquote>\n<blockquote>\n<p>It is important to remember that this is just the result of the structural typing system. The customerEmployeeHybrid variable is compatible with the Customer and Employee types, but is not a valid instance of either. The difference here will show up anywhere excess property checks apply, such as with a direct assignment to an explicitly annotated variable:</p>\n</blockquote>\n<pre><code>let hybridCustomer: Customer = {\n  name: 'Rod',\n  customerSaverNumber: 479823498,\n  // Error: Object literal may only specify known properties,\n  // and 'employeeDiscountCode' does not exist in type 'Customer'\n  employeeDiscountCode: 094839\n}\n\nlet hybridEmployee: Employee = {\n  name: 'Tod',\n  // Error: Object literal may only specify known properties,\n  // and 'customerSaverNumber' does not exist in type 'Employee'\n  customerSaverNumber: 479823498,\n  employeeDiscountCode: 094839\n}\n</code></pre>\n<blockquote>\n<p>Other examples:</p>\n</blockquote>\n<pre><code>type Customer = {\n name: string;\n customerSaverNumber: number;\n};\n\ntype Employee = {\n name: string;\n employeeDiscountCode: number;\n};\n\ntype CheckoutUser = Customer | Employee;\n\ntype Hybrid = {\n name: string;\n customerSaverNumber: number;\n employeeDiscountCode: number;\n};\n\nconst a: Customer = { name: \"mia\", customerSaverNumber: 1 }; // OK\n\nconst b: CheckoutUser = { name: \"mia\", customerSaverNumber: 1 }; // OK\n\nconst c: Hybrid = { name: \"mia\", customerSaverNumber: 1 }; // error, c is missing employee discount code\n\nconst d: Employee = { name: \"pete\", employeeDiscountCode: 202 }; // OK\n\nconst e: CheckoutUser = { name: \"pete\", employeeDiscountCode: 202 }; // OK\n\nconst f: Hybrid = { name: \"pete\", employeeDiscountCode: 202 }; // error, d is missing customerSaverNumber\n\nconst k: Hybrid = {\n name: \"david\",\n customerSaverNumber: 1,\n employeeDiscountCode: 202,\n}; // OK\n\n\nconst g: Customer = {\n name: \"dave\",\n customerSaverNumber: 1,\n employeeDiscountCode: 202,\n}; // error\n</code></pre>\n<blockquote>\n<p>This error is because we explicitly specify what time g should be type Customer, this is an example when excess properties checks kick in. Typescript does not allow us to have additional property of employeeDiscountCode</p>\n</blockquote>\n<pre><code>const h: Employee = {\n name: \"david\",\n customerSaverNumber: 1,\n employeeDiscountCode: 202,\n}; // error\n</code></pre>\n<blockquote>\n<p>This error is because we explicitly specify what time h should be type Employee, this is an example when excess properties checks kick in. Typescript does not allow us to have additional property of customerSaverNumber</p>\n</blockquote>\n<blockquote>\n<p>If we passed above to a function which expects a of a type Customer as an argument, it would work though. This is because excess properties check do not apply and Typescript's default structural typing is in place:</p>\n</blockquote>\n<pre><code>const printMe = (a: Customer) => {\n console.log(a.name);\n};\n\nconst i = {\n name: \"jake\",\n customerSaverNumber: 2,\n employeeDiscountCode: 202,\n};\n\nprintMe(i); // this is ok - because excess properties check does not apply and Typescript's default structural typing is in place\n</code></pre>\n<blockquote>\n<p>If we however, passed value of i directly to the call of the function instead of as a constant, typescript will have a problem with it:</p>\n</blockquote>\n<pre><code>const printMe = (a: Customer) => {\n console.log(a.name);\n};\n\n\nprintMe({\n name: \"alan\",\n customerSaverNumber: 3,\n employeeDiscountCode: 202,\n}); // error - excess properties check kicks in and Typescript's default structural typing is overriden by more strict nominal typing\n</code></pre>\n<p><strong>Unions of Object Types and Excess Property Checks</strong></p>\n<blockquote>\n<p>Excess property checks prevent you from assigning an object literal to an explicitly annotated variable if the literal includes properties not in the annotated type.</p>\n</blockquote>\n<blockquote>\n<p>However, there is a loophole in the compiler when it comes to assigning object literals to unions of object types. If the additional property exists in any of the subtypes of the union, the assignment is allowed:</p>\n</blockquote>\n<pre><code>type Customer = {\n  name: string,\n  customerSaverNumber: number\n}\n\ntype Employee = {\n  name: string,\n  employeeDiscountCode: number\n}\n\ntype CheckoutUser = Customer | Employee\n\nlet customerEmployeeHybrid: CheckoutUser = {\n  name: 'Rod',\n  customerSaverNumber: 479823498, // no error\n  employeeDiscountCode: 094839 // no error\n}\n</code></pre>\n<blockquote>\n<p>Because the compiler raises no error in this case, you might think that unions of object types do merge the properties of the underlying types together, contrary to what you saw on the previous slide. But what is actually going on here is more subtle.</p>\n</blockquote>\n<blockquote>\n<p>Excess property checks work by checking whether each property in the value exists in the type. Does customerSaverNumber exist in the CheckoutUser type? There is no definite answer here: it does exist in Customer, but it doesn't exist in Employee. But excess property checks have to give a definite answer, and since a \"no\" would rule out perfectly legitimate assignments of Customer values, it has to say \"yes\".</p>\n</blockquote>\n<blockquote>\n<p>The case is the same with employeeDiscountCode: it does exist in Employee, but it doesn't exist in Customer.</p>\n</blockquote>\n<blockquote>\n<p>The end result in this case is a legitimate assignment to a CheckoutUser variable that would not be a legitimate assignment to either a Customer variable or an Employee variable. Ideally the assignment of this hybrid object wouldn't be allowed, but the compiler cannot rule it out without also ruling out perfectly acceptable assignments of (non-hybrid) Customer and Employee values as well.</p>\n</blockquote>\n<p><strong>Discriminating Properties</strong></p>\n<blockquote>\n<p>To get around the potentially problematic situation described in the previous slide, you can give the underlying types used in a union of object types a discriminating property: a property with the same key, but an incompatible type. For example, you could give the Customer and Employee object types each a role property with a different literal type:</p>\n</blockquote>\n<pre><code>type Customer = {\n  role: 'Customer',\n  name: string,\n  customerSaverNumber: number\n}\n\ntype Employee = {\n  role: 'Employee',\n  name: string,\n  employeeDiscountCode: number\n}\n\ntype CheckoutUser = Customer | Employee\n</code></pre>\n<blockquote>\n<p>With discriminating properties like these, it becomes impossible to create a hybrid object that is compatible with both types, and so the problematic situation from the previous slide will never arise. Any valid assignment to a CheckoutUser variable will have to have a role property, and the value of that property will determine which other properties are allowed.</p>\n</blockquote>\n<pre><code>let customerWithEmployeeDiscountCode: CheckoutUser = {\n  role: 'Customer',\n  name: 'Rod',\n  customerSaverNumber: 479823498,\n  // Error: Object literal may only specify known properties,\n  // and 'employeeDiscountCode' does not exist in type 'Customer'\n  employeeDiscountCode: 094839\n}\n\nlet employeeWithCustomerSaverNumber: CheckoutUser = {\n  role: 'Employee',\n  name: 'Tod',\n  // Error: Object literal may only specify known properties,\n  // and 'customerSaverNumber' does not exist in type 'Employee'\n  customerSaverNumber: 479823498,\n  employeeDiscountCode: 094839\n}\n</code></pre>\n<p><strong>Tagged Union Types</strong></p>\n<blockquote>\n<p>A union of object types in which each object contains a discriminating property is known variously as a tagged union, a discriminated union, or a sum type. Tagged unions are a useful data type common in functional programming languages, which TypeScript is able to bring to JavaScript.</p>\n</blockquote>\n<blockquote>\n<p>It is common to use the name 'tag' for the discriminating property (at least when no other more meaningful name suggests itself from the nature of the data). But you can use any name you want.</p>\n</blockquote>\n<blockquote>\n<p>In the example from previous slide, the discriminating property was included in the relevant subtypes themselves, but in many cases your code will be more maintainable if you include it in the higher-level union type instead. That way the subtypes can change independently of each other:</p>\n</blockquote>\n<pre><code>type Customer = {\n  name: string,\n  customerSaverNumber: number\n}\n\ntype Employee = {\n  name: string,\n  employeeDiscountCode: number\n}\n\ntype CheckoutUser = { tag: 'Customer', value: Customer }\n                  | { tag: 'Employee', value: Employee }\n</code></pre>\n<blockquote>\n<p>With the discriminating property in the union type, you can also easily add further options that don't have any additional data associated with them:</p>\n</blockquote>\n<pre><code>type CheckoutUser = { tag: 'Anonymous' }\n                  | { tag: 'Manager' }\n                  | { tag: 'Customer', value: Customer }\n                  | { tag: 'Employee', value: Employee }\n</code></pre>\n<blockquote>\n<p>There is nothing intrinsically special or different about tagged unions like these: they behave in all respects like any other union of object types. But because of the discriminating property, you can use them with switch statements to cleanly handle each subtype separately. The compiler will use type narrowing in each case block to determine which properties are available, and - as long as you haven't disabled strict null checks - will typically also be able to warn you if you forget to cover any of the cases.</p>\n</blockquote>\n<pre><code>const validCustomerSaverNumbers: number[] = [ /** ... */ ]\n\nconst validEmployeeDiscountCodes: number[] = [ /** ... */ ]\n\nfunction discountApplies (checkoutUser: CheckoutUser): boolean {\n  switch (checkoutUser.tag) {\n    case 'Anonymous':\n      return false\n    case 'Manager':\n      return true\n    case 'Customer':\n      return validCustomerSaverNumbers.includes(checkoutUser.value.customerSaverNumber)\n    case 'Employee':\n      return validEmployeeDiscountCodes.includes(checkoutUser.value.employeeDiscountCode)\n  }\n}\n</code></pre>\n<blockquote>\n<p>Note that in the 'Customer' and 'Employee' cases you need to access other properties on the checkoutUser.value object, rather than on checkoutUser directly.</p>\n</blockquote>\n<h2>Literal types</h2>\n<p><img src=\"https://i.imgur.com/niHJjzd.jpg\" title=\"Photo by Suzy Hazelwood from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Suzy Hazelwood from Pexels</em></p></p>\n<blockquote>\n<p>Sometimes we might want to restrict value not only to string, number or boolean, but maybe we want to be even stricter. We can limit to only a specific value. For example for constants TS infers that the literal type is for example: 4.6</p>\n</blockquote>\n<pre><code>const myNum=4.6\n</code></pre>\n<blockquote>\n<p>If my parameter can only have 2 values (for example output can only be either: \"calculation result: \" or \"concatenation result: \"), we can use union types together with literal types:</p>\n</blockquote>\n<pre><code>const combine = (input1: number | string, input2: number | string, output: \"calculation result: \" | \"concatenation result: \") => {\n    let result;\n    if (typeof input1 === \"number\" &#x26;&#x26; typeof input2 === \"number\") {\n        result = input1 + input2\n    } else {\n        result = input1.toString() + input2.toString()\n    }\n    return (output + result)\n};\nconsole.log(combine(1, 2, \"calculation result: \"));\nconsole.log(combine(\"A\", \"B\", \"concatenation result: \"));\n</code></pre>\n<h2>Type aliases</h2>\n<p><img src=\"https://i.imgur.com/30FPntX.jpg\" title=\"Photo by sebastiaan stam from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by sebastiaan stam from Pexels</em></p></p>\n<blockquote>\n<p>Instead of writing our union types all the time:</p>\n</blockquote>\n<pre><code>input1: number | string;\ninput2: number | string;\n</code></pre>\n<blockquote>\n<p>you create them on top of your file with word <code>type</code> and provide name of your alias or custom type. Please note that <code>type</code> is again only available in Typescript.</p>\n</blockquote>\n<pre><code>type Combinable = number | string;\ntype OutputMessage = \"calculation result: \" | \"concatenation result: \";\nconst combine = (input1: Combinable, input2: Combinable, output: OutputMessage) => {\n    let result;\n    if (typeof input1 === \"number\" &#x26;&#x26; typeof input2 === \"number\") {\n        result = input1 + input2\n    } else {\n        result = input1.toString() + input2.toString()\n    }\n    return (output + result)\n};\nconsole.log(combine(1, 2, \"calculation result: \"));\nconsole.log(combine(\"A\", \"B\", \"concatenation result: \"));\n</code></pre>\n<blockquote>\n<p>You can create type aliases not only for union types, but also for for example object types. This allows avoiding repetition and manage types centrally.</p>\n</blockquote>\n<pre><code>type Char = { name: string; level: number };\nconst char1: Char = { name: \"Addania\", level: 255 };\nconsole.log(char1.name);\n</code></pre>\n<h2>Return type</h2>\n<p><img src=\"https://i.imgur.com/OfCWNEV.jpg\" title=\"Photo by P C from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by P C from Pexels</em></p></p>\n<blockquote>\n<p>In a simple function we can not only decide what types the parameters of function will be but also the return type. This is usually infered by typescript:</p>\n</blockquote>\n<blockquote>\n<p>In a simple function like this, return value from function will be of type number:</p>\n</blockquote>\n<pre><code>const add = (n1: number, n2: number) => {\n    return n1 + n2\n}\n</code></pre>\n<blockquote>\n<p>When we hover over the add function, we will see following:</p>\n</blockquote>\n<pre><code>const add: (n1: number, n2: number) => number\n</code></pre>\n<blockquote>\n<p>Typescript inferred that return value will be number. But we can assign return type explicitly:</p>\n</blockquote>\n<pre><code>const add2 = (n1: number, n2: number): number => {\n    return n1 + n2\n}\n</code></pre>\n<blockquote>\n<p>Imagine following function:</p>\n</blockquote>\n<pre><code>const add = (n1: number, n2: number) => {\n    return n1.toString() + n2.toString()\n}\n</code></pre>\n<blockquote>\n<p>When we hover over the add function, we will see that return is a string:</p>\n</blockquote>\n<pre><code>const add: (n1: number, n2: number) => string\n</code></pre>\n<blockquote>\n<p>Typescript inferred that return will be string. But we can assign return type explicitly:</p>\n</blockquote>\n<pre><code>const add2 = (n1: number, n2: number): string => {\n    return n1 + n2\n}\n</code></pre>\n<blockquote>\n<p>Best practice is to let Typescript infer types.</p>\n</blockquote>\n<h2>Void type:</h2>\n<p><img src=\"https://i.imgur.com/n51Q4mm.jpg\" title=\"Photo by David Yu from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by David Yu from Pexels</em></p></p>\n<blockquote>\n<p>Void type does not exist in Javascript, but we might know it from other languages.</p>\n</blockquote>\n<blockquote>\n<p>WHAT on Earth is the void type? Imagine you have a function which returns nothing and only prints some text:</p>\n</blockquote>\n<pre><code>const printResult=(n1: number)=> (\n    console.log(\"Result: \" + n1)\n)\n</code></pre>\n<blockquote>\n<p>If you then hover over <code>printResult</code>, you will see that Typescript infers that it returns <code>void</code>:</p>\n</blockquote>\n<pre><code>printResult: (n1: number) => void\n</code></pre>\n<blockquote>\n<p>We could actually specify it explicitly (but this is not recommended):</p>\n</blockquote>\n<pre><code>const printResult=(n1: number):void => (\n    console.log(\"Result: \" + n1)\n)\n\nprintResult(2)\n</code></pre>\n<blockquote>\n<p>So <code>void</code> means I do not have return statement in my function.</p>\n</blockquote>\n<blockquote>\n<p>Practically my function returns something though. Console.log the return of <code>printResult</code> would yield <code>undefined</code>.</p>\n</blockquote>\n<pre><code>const printResult=(n1: number):void => (\n    console.log(\"Result: \" + n1)\n)\nconsole.log(print(2))\n</code></pre>\n<blockquote>\n<p><code>Undefined</code> is a REAL value in Javascript!</p>\n</blockquote>\n<blockquote>\n<p>There is another way (but VERY NOT recommended way) to specify that my function will return <code>undefined</code>, but this only works when your function HAS a return statement which is empty:</p>\n</blockquote>\n<pre><code>const printResult=(n1: number):undefined => (\n    console.log(\"Result: \" + n1)\n    return;\n)\nconsole.log(print(2))\n</code></pre>\n<h2>Function type</h2>\n<p><img src=\"https://i.imgur.com/M2Zf5ER.jpg\" title=\"Photo by Miguel Á. Padriñán from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Miguel Á. Padriñán from Pexels</em></p></p>\n<blockquote>\n<p>We are able to tell to Typescript that certain variable is expected to be a function.</p>\n</blockquote>\n<blockquote>\n<p>Imagine a code like this:</p>\n</blockquote>\n<pre><code>const add = (n1: number, n2: number) => {\n    return n1 + n2\n}\nlet newFunction;\nnewFunction=add;\nconsole.log(newFunction(1,2))\n</code></pre>\n<blockquote>\n<p>In order to tell explicitly to Typescript that <code>newFunction</code> will be a function, so that later on we cannot assign it just a number <code>newFunction=2</code>, we can define the function type:</p>\n</blockquote>\n<pre><code>let newFunction: Function;\n</code></pre>\n<blockquote>\n<p>We can also use an arrow notation where we can define a return type:</p>\n</blockquote>\n<pre><code>let newFunction: () => number;\n</code></pre>\n<blockquote>\n<p>We can also add types of parameters which we also need to enter:</p>\n</blockquote>\n<pre><code>let newFunction: (a: number, b: number) => number;\n</code></pre>\n<p><strong>Function types and callbacks</strong></p>\n<p><img src=\"https://i.imgur.com/tp0nHv2.jpg\" title=\"Photo by Hassan OUAJBIR from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Hassan OUAJBIR from Pexels</em></p></p>\n<blockquote>\n<p>Imagine I have a function which will receive 2 numbers as paramenters and also a third parameter which will be another function (callback function):</p>\n</blockquote>\n<pre><code>const printResult = (n1: number): void => (\n    console.log(\"Result: \" + n1)\n)\nconst add = (n1: number, n2: number, callback): number => {\n    const result = n1 + n2\n    callback(result);\n    return result\n}\nconst output = add(10, 20, printResult)\n</code></pre>\n<blockquote>\n<p>Another way how we can do this using anonymous function (where I define the function right in the place where I call it):</p>\n</blockquote>\n<pre><code>const add = (n1: number, n2: number, callback): number => {\n    const result = n1 + n2\n    callback(result);\n    return result\n}\nconst output = add(10, 20, (result) => {\n  console.log(\"Result is: \" + result)\n }\n)\n</code></pre>\n<blockquote>\n<p>How to now define the function type:</p>\n</blockquote>\n<pre><code>const add = (n1: number, n2: number, callback: (num: number) => void ): number => {\n    const result = n1 + n2\n    callback(result);\n    return result\n}\n</code></pre>\n<p><strong>More on function types</strong></p>\n<blockquote>\n<p>Function signatures in TypeScript are simply annotated versions of JavaScript function signatures.</p>\n</blockquote>\n<pre><code>// annotated function declaration\nfunction add (a: number, b: number): number {\n  return a + b\n}\n\n// annotated function expression\nconst multiply = function (c: number, d: number): number {\n  return c * d\n}\n\n// annotated arrow function expression\nconst subtract = (e: number, f: number): number => {\n  return e - f\n}\n</code></pre>\n<blockquote>\n<p>If you don't explicitly annotate the parameter or return types, the TypeScript compiler will infer them for you.</p>\n</blockquote>\n<blockquote>\n<p>While the compiler is generally good at inferring return types, unannotated parameters will usually have an inferred type of any (you will see the exceptions later on). Assuming you have the default <code>noImplicitAny</code> flag enabled, this will raise an error, so as a general rule <code>parameter types must always be annotated</code>.</p>\n</blockquote>\n<blockquote>\n<p>Functions that do not include an explicit return value have an inferred return type of void, which you can also specify explicitly.</p>\n</blockquote>\n<pre><code>function logger (): void {\nconsole.log('Hey Skillers!')\n}\n\nfunction loggerWithReturn (): void {\nconsole.log('Have a great day!')\nreturn\n}\n</code></pre>\n<blockquote>\n<p>JavaScript's default return value (for functions that don't specify one) is undefined, hence undefined is the only value assignable to a variable of type void. There are some slight differences between the types void and undefined, however.</p>\n</blockquote>\n<blockquote>\n<p>If your function explicitly returns undefined, its inferred return type will be undefined rather than void.</p>\n</blockquote>\n<blockquote>\n<p>And although a function whose annotated return type is void can explicitly return undefined, a function whose annotated return type is undefined must do so:</p>\n</blockquote>\n<pre><code>// OK\nfunction logger (): void {\nconsole.log('Hey Skillers!')\nreturn undefined\n}\n\n// Error: A function whose declared type is neither 'void' nor 'any' must return a value.\nfunction logger (): undefined {\nconsole.log('Hey Skillers!')\n}\n</code></pre>\n<blockquote>\n<p>You will see another difference between void and undefined later on. For now, just note that you should always use void as the return type for functions that do not return an explicit value (and not use it for anything else).</p>\n</blockquote>\n<p><strong>Function Parameters</strong></p>\n<blockquote>\n<p>Functions in JavaScript are all technically <code>variadic</code> functions: they are able to accept a variable number of arguments. This is why you can get unintended consequences related to undefined or NaN instead of run-time errors when you pass in the wrong number of arguments:</p>\n</blockquote>\n<pre><code>function doNothing (number) {\nreturn number\n}\n\ndoNothing(1, 2, 3, 4, 5) // 1\ndoNothing() // undefined\n\nfunction add (a, b, c) {\nreturn a + b + c\n}\n\nadd() // NaN\nadd(1) // NaN\nadd(1, 2, 3, 4, 5) // 6\n</code></pre>\n<blockquote>\n<p>TypeScript protects you from this buggy behaviour by throwing a compilation error any time you pass in the wrong number of arguments. When you really do want flexibility in the number of arguments you can pass to a function, there are two controlled ways in which TypeScript allows this.</p>\n</blockquote>\n<p><strong>Optional Parameters</strong></p>\n<blockquote>\n<p>The parameter list in a function signature can end with any number of optional parameters, marked as optional with the ? operator. You do not need to supply an argument corresponding to an optional parameter when you call the function, and the compiler will guard against run-time errors by making the type of this parameter a union with undefined.</p>\n</blockquote>\n<pre><code>function add (a: number, b: number, c?: number) {\nreturn c === undefined\n? a + b\n: a + b + c\n}\n\nadd(1) // Error: Expected 2 arguments, but got 1\nadd(1, 2) // 3\nadd(1, 2, 3) // 6\n</code></pre>\n<blockquote>\n<p>As with JavaScript, you can also make an argument optional by providing a default value after the type annotation:</p>\n</blockquote>\n<pre><code>function multiply (a: number, b: number = 10) {\nreturn a \\* b\n}\n\nmultiply(12, 10) // 120\nmultiply(12) // 120\n</code></pre>\n<blockquote>\n<p>In this case, the parameter's type will not be a union with undefined, since the default value will be used whenever the argument is not specified.</p>\n</blockquote>\n<p><strong>Rest Parameters</strong></p>\n<blockquote>\n<p>In the case of an unknown number of arguments you can use a rest parameter, just as you would in JavaScript. Since rest parameters are <code>arrays</code>, they must be annotated as an array type.</p>\n</blockquote>\n<pre><code>function add (...numbers: number[]) {\nreturn numbers.reduce((a, b) => a + b, 0)\n}\n\nadd(1, 2, 3, 4, 5) // 15\nadd() // 0\n</code></pre>\n<blockquote>\n<p>Similarly but when we know first two parameters, and rest of the parameters are of an unknown length:</p>\n</blockquote>\n<pre><code>function add (x: number, y: number, ...numbers: number[]) {\n  return x+y+numbers.reduce((a, b) => a + b, 0)\n  }\nadd(1, 2, 3, 4, 5) // 15\nadd(1,2) // 0\n</code></pre>\n<p><strong>Function Type Expressions</strong></p>\n<blockquote>\n<p>You can provide types for your functions inline, by annotating the parameters and the return value directly in the function signature, as you have seen. But you can also specify the type of a function separately from its implementation using a <code>function type expression</code>.</p>\n</blockquote>\n<blockquote>\n<p>The syntax for <code>function type expressions</code> mirrors the syntax for arrow functions, but you can use them to annotate both styles of function expression:</p>\n</blockquote>\n<pre><code>type NumberToString = (value: number, leadingZeros: number) => string\n\nconst numberToString: NumberToString = (value, leadingZeros) => {\nreturn value.toString().padLeft(leadingZeros)\n}\n\n// -OR-\n\nconst numberToString: NumberToString = function (value, leadingZeros) {\nreturn value.toString().padLeft(leadingZeros)\n}\n</code></pre>\n<blockquote>\n<p>The <code>NumberToString</code> type specifies a function that takes two number arguments and returns a string. The numberToString variable is assigned a function that matches this type signature.</p>\n</blockquote>\n<blockquote>\n<p>Note that, if you provide a function type annotation, you do not need to provide explicit type annotations for the parameters or the return value in the function expression itself, as these will be inferred to match those in the function type.</p>\n</blockquote>\n<blockquote>\n<p>Also note that there is no way to explicitly annotate a function declaration with a function type expression. You need to write a function expression, assign that to a variable, and annotate the variable with the function type.</p>\n</blockquote>\n<blockquote>\n<p>Function type expressions are mainly useful in two cases.</p>\n</blockquote>\n<blockquote>\n<p>The first case is when you want to provide a type annotation for a function parameter passed to a higher-order function:</p>\n</blockquote>\n<pre><code>type Action = 'Submit' | 'Cancel'\n\ntype Handler = (input: string) => void\n\nconst submitCallbacks: Handler[] = []\n\nconst cancelCallbacks: Handler[] = []\n\nconst addListener = (action: Action, handler: Handler) => {\nswitch (action) {\ncase 'Submit':\nsubmitCallbacks.push(handler)\nbreak\ncase 'Cancel':\ncancelCallbacks.push(handler)\nbreak\n }\n}\n</code></pre>\n<blockquote>\n<p>When passing a function expression as an argument, you do not need to explicitly annotate its parameters or return type. As with function expressions assigned to annotated function variables, these types will be inferred based on the type of the parameter:</p>\n</blockquote>\n<pre><code>addListener('Submit', (input) => {\ninputs.push(input)\nconsole.log('thank you for you input')\n})\n</code></pre>\n<blockquote>\n<p>The second case in which function type expressions are useful is when you want to specify the type signature of a method on an object type:</p>\n</blockquote>\n<pre><code>type SetOfNumbers = {\nvalues: number[],\nadd: (value: number) => void,\ndelete: (value: number) => void,\ncontains: (value: number) => boolean,\nentries: () => number[]\n}\n</code></pre>\n<p><strong>Compatibility of Function Types (Structural Typing)</strong></p>\n<blockquote>\n<p>TypeScript implements a structural typing system, which means that the type of the value you assign to a variable doesn't have to be identical to the type of the variable, it only has to be compatible with it.</p>\n</blockquote>\n<blockquote>\n<p>With object types, for example, object type B is compatible with object type A if it contains at least the same properties as object type A. It can contain additional properties as well (at least where excess property checks don't apply).</p>\n</blockquote>\n<blockquote>\n<p>Something similar is true of functions: you can assign a function of type B to a function variable of type A, as long as type B is compatible with type A.</p>\n</blockquote>\n<blockquote>\n<p>For function type B to be compatible with function type A, three things have to hold:</p>\n</blockquote>\n<ul>\n<li>\n<ol>\n<li>The return type of function type B must be compatible with the return type of function type A.</li>\n</ol>\n</li>\n</ul>\n<pre><code>let returnsStringB = (): string => 'boo!'\nlet returnsStringOrNumberA = (): string | number => Math.random() &#x3C; 0.5 ? 2 : 'boo!'\n\nreturnsStringOrNumberA = returnsStringB // OK: B can be assigned to A because B is compatible with A\nreturnsStringB = returnsStringOrNumberA // ERROR: A is not compatible with B, B cant handle numbers\n</code></pre>\n<blockquote>\n<p>The first assignment is fine, because string is compatible with string | number. But the second assignment is not allowed, because string | number is not compatible with string.</p>\n</blockquote>\n<ul>\n<li>\n<ol start=\"2\">\n<li>The types of the parameters in function type A must be compatible with the types of the parameters in function type B. (Note this is the opposite way round from the first condition.)</li>\n</ol>\n</li>\n</ul>\n<pre><code>let takesStringB = (x: string): void => {}\nlet takesStringOrNumberA = (x: string | number): void => {}\n\ntakesStringB = takesStringOrNumberA // OK\ntakesStringOrNumberA = takesStringB // ERROR\n</code></pre>\n<blockquote>\n<p>The first assignment is fine, because takesStringOrNumber can be called with a string (as the type of takesString expects). The second assignment is not allowed, because takesString can't be called with a number (but the type of takesStringOrNumber says that it can be).</p>\n</blockquote>\n<blockquote>\n<p>Another way to think about this is: in the place of takeStringB we expect something that can handle strings. If we provide it with a function that can handle string and numbers, we are fine. In the second line, in the place of takesStringOrNumberA we expect a function that can handle strings and numbers. But if we pass there a function which can only with with strings, then this is not OK.</p>\n</blockquote>\n<ul>\n<li>\n<ol start=\"3\">\n<li>Function type B must have no more parameters than function type A (unless those additional parameters are optional or rest parameters), but it can have fewer.</li>\n</ol>\n</li>\n</ul>\n<pre><code>let takesTwoArguments = (x: number, y: number) => x + y\n\ntakesTwoArguments = (x: number) => x + 10 // OK\ntakesTwoArguments = (x: number, y: number, z: number) => x + y + z // ERROR\ntakesTwoArguments = (x: number, y: number, z?: number) => x + y // OK\n</code></pre>\n<blockquote>\n<p>The first assignment is fine: the compiler will insist on a second argument when you call this function, but the function body will ignore it and there will be no run-time error. The second assignment, however, raises an error, because the compiler would only allow you to call this function with two arguments, and the required third argument would be undefined. For the same reason, the third assignment will not raise an error: since the third parameter is optional, the function body will not cause a run-time error when its value is undefined.</p>\n</blockquote>\n<blockquote>\n<p>Don't worry if you don't understand all of these rules at once, this is the kind of thing that becomes clearer over time, with practice. For now, the important thing to know is that each of these constraints exists to make sure that type errors will not slip through when handling functions and function assignments.</p>\n</blockquote>\n<p><strong>Function Type Compatibility with void</strong></p>\n<blockquote>\n<p>In general, for one function to be compatible with another function, the return type of the first function must be compatible with that of the second function. As we saw above, this is to prevent type errors from sneaking past the compiler:</p>\n</blockquote>\n<pre><code>type ReturnsNumber = (x: number) => number\n\nconst returnsStringOrNumber: ReturnsNumber = (x: number): string | number => {\nreturn x &#x3C; 10 ? x + 2 : 'x is too large'\n}\n\n// ERROR: Type '(x: number) => string | number' is not assignable to type 'ReturnsNumber'.\n// Type 'string | number' is not assignable to type 'number'.\n// Type 'string' is not assignable to type 'number'.\n</code></pre>\n<blockquote>\n<p>If this assignment was allowed, then returnsStringOrNumber(20) would have the string value 'x is too large' (because of the function itself), but the type number (because of the ReturnsNumber type annotation). To prevent this kind of type error, assignments like these are not allowed.</p>\n</blockquote>\n<blockquote>\n<p>There is one exception to this general rule, however. A function that returns any value (not just undefined) is compatible with a void function.</p>\n</blockquote>\n<blockquote>\n<p>This exception exists to allow common patterns like these:</p>\n</blockquote>\n<pre><code>const source = [4, 8, 16]\nconst destination = []\n\nsource.forEach(n => destination.push(n))\n</code></pre>\n<blockquote>\n<p>The array method, forEach, requires a void function as its argument, but here we are passing it a function that returns a number (the push method returns the new length of the array).</p>\n</blockquote>\n<blockquote>\n<p>Strictly speaking this shouldn't be allowable, because the only value compatible with void is undefined. And because of this exception, type errors can get past the compiler:</p>\n</blockquote>\n<pre><code>type ReturnsVoid = () => void\n\nconst returnsString: ReturnsVoid = () => 'not undefined!!'\n\nconst result = returnsString() // result has type 'void', but its value is a 'string'\n</code></pre>\n<blockquote>\n<p>Type errors like these can never give rise to any run-time errors, however. They simply mean that you have a value that is not undefined that the compiler will not let you use as such (because it is assigned to a variable with the type void).</p>\n</blockquote>\n<blockquote>\n<p>Note that this exception only applies to void functions, not to functions that have a return type of undefined. This is another key difference between void and undefined as return types.</p>\n</blockquote>\n<p><strong>Never Return type</strong></p>\n<blockquote>\n<p>The never type represents values that can never occur at run-time. It is not possible to assign anything to a variable of type never. In other words, the set described by this type is the empty set.</p>\n</blockquote>\n<blockquote>\n<p>Perhaps surprisingly, the never type has some practical applications. One such application is as the return type of a function that will never return, either because it always throws an error, or because it runs forever.</p>\n</blockquote>\n<pre><code>function tick (): never {\nlet counter: number = 0\nwhile (true) counter += 1\n}\n\nfunction fail (): never {\nthrow new Error('something went wrong')\n}\n</code></pre>\n<blockquote>\n<p>TypeScript uses control flow analysis to determine whether a function will never return, and in principle can give functions an inferred return type of never in these cases.</p>\n</blockquote>\n<blockquote>\n<p>The inferred return type for functions that never return, however, is only never for function expressions. For function declarations, the inferred type is void.</p>\n</blockquote>\n<pre><code>// the inferred type of failDeclaration is '() => void'\nfunction failDeclaration () {\nthrow new Error('something went wrong')\n}\n\n// the inferred type of failExpression is '() => never'\nconst failExpression = function () {\nthrow new Error('something went wrong')\n}\n\n// the inferred type of failExpressionArrow is also '() => never'\nconst failExpressionArrow = () => {\nthrow new Error('something went wrong')\n}\n</code></pre>\n<blockquote>\n<p>Ideally, the return type for function declarations that never return would also be never. But when the never type was introduced, this was found to be too big a breaking change for a lot of existing code, so for practical reasons the more accurate inference was only applied to function expressions.</p>\n</blockquote>\n<h2>Unknown type</h2>\n<p><img src=\"https://i.imgur.com/GPUfFFD.jpg\" title=\"Photo by Kaique Rocha from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Kaique Rocha from Pexels</em></p></p>\n<blockquote>\n<p>Unknown is used if we do not know yet, if it is number or a string. We can store any numbers in there without getting errors:</p>\n</blockquote>\n<pre><code>let userInput: unknown;\nuserInput = \"mia\"\nconsole.log(userInput)\nuserInput = 5\nconsole.log(userInput)\nuserInput = true\nconsole.log(userInput)\n</code></pre>\n<blockquote>\n<p>This looks similar to <code>any</code> type. But it IS different.</p>\n</blockquote>\n<blockquote>\n<p>Type <code>unknown</code> type cannot be then assigned to other variable which is for example of a type string. Typescript will throw an error.</p>\n</blockquote>\n<pre><code>let userInput: unknown;\nlet userName: string;\nuserInput = 5\nuserInput = \"mia\"\nuserName=userInput\n</code></pre>\n<blockquote>\n<p>Whereas with <code>any</code> it will not throw an error:</p>\n</blockquote>\n<pre><code>let userInput: any;\nlet userName: string;\nuserInput = 5\nuserInput = \"mia\"\nuserName=userInput\n</code></pre>\n<blockquote>\n<p>If the type of a variable is unknown in order to use it to assign it to a string, we need to check the type:</p>\n</blockquote>\n<pre><code>if (typeof userInput === \"string\") {\nuserName = userInput\n}\n</code></pre>\n<blockquote>\n<p><code>Unknown</code> is a better choice to any ,when we are not sure of which type the input will be (like when user enters something), because if enables type checks and forces us to check our types in the code manually. If we use any, all the type checks are disabled - typescript gives up.</p>\n</blockquote>\n<h2>Never type</h2>\n<p><img src=\"https://i.imgur.com/GrnyFyS.jpg\" title=\"Photo by Elina Krima from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Elina Krima from Pexels</em></p></p>\n<blockquote>\n<p>Functions which throw error cancel the script after the word <code>throw</code>, so that there is no possibility it will ever return anything.</p>\n</blockquote>\n<pre><code>const generateError = (message: string, code: number) => {\n    throw { message: message, errorCode: code }\n}\ngenerateError(\"Upsy\", 500)\n</code></pre>\n<blockquote>\n<p>So the type of such function is not <code>void</code> (because <code>void</code> returns <code>undefined</code>). Type of such function is <code>never</code>.</p>\n</blockquote>\n<pre><code>const generateError = (message: string, code: number): never => {\n    throw { message: message, errorCode: code }\n}\ngenerateError(\"Upsy\", 500)\n</code></pre>\n<blockquote>\n<p>We can also console log this and see there is no console log:</p>\n</blockquote>\n<pre><code>const generateError = (message: string, code: number): never => {\n    throw { message: message, errorCode: code }\n}\nconst something = generateError(\"Upsy\", 500)\nconsole.log(something)\n</code></pre>\n<blockquote>\n<p>Also another function which would <code>never</code> return anything is an infite loop function:</p>\n</blockquote>\n<pre><code>const generateError = (message: string, code: number): never => {\n    while (true){}\n}\nconst something = generateError(\"Upsy\", 500)\nconsole.log(something)\n</code></pre>\n<h2>Watchmode</h2>\n<p><img src=\"https://i.imgur.com/6tOCEK8.jpg\" title=\"Photo by Jordan Benton from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Jordan Benton from Pexels</em></p></p>\n<blockquote>\n<p>So far after each change of our file we needed to manually run tsc <code>app.ts</code>.</p>\n</blockquote>\n<blockquote>\n<p>We can enter the watchmode and make sure that compilation watches for any change of the file and if it changes then it re-compiles automatically.</p>\n</blockquote>\n<blockquote>\n<p>How to enter watchmode:</p>\n</blockquote>\n<pre><code>tsc app.ts --watch\n</code></pre>\n<blockquote>\n<p>Or alternatively:</p>\n</blockquote>\n<pre><code>tsc app.ts -w\n</code></pre>\n<blockquote>\n<p>You can then exit it with:</p>\n</blockquote>\n<pre><code>CTRL + C\n</code></pre>\n<blockquote>\n<p>How about I have more files than one. Let's add another file called <code>analytics.ts</code> and this file will contain following command:</p>\n</blockquote>\n<pre><code>console.log(\"Sending...\")\n</code></pre>\n<blockquote>\n<p>In order to use this file in our project, we need to add it to the script tag of out <code>index.html</code>:</p>\n</blockquote>\n<pre><code>&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;title>Typescript Course&#x3C;/title>\n    &#x3C;script src=\"app.js\" defer>&#x3C;/script>\n    &#x3C;script src=\"analytics.js\" defer>&#x3C;/script>\n&#x3C;/head>\n&#x3C;body>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<blockquote>\n<p>Now imagine we want to compile automatically every time any of these two files changes.</p>\n</blockquote>\n<blockquote>\n<p>For that we will need to do only once:</p>\n</blockquote>\n<pre><code>tsc --init\n</code></pre>\n<blockquote>\n<p>It will initiate the whole folder as a typescript project. It will also create <code>tsconfig.json</code> file.</p>\n</blockquote>\n<blockquote>\n<p>Now we will be able to run just <code>tsc</code> in the terminal and it will compile all the .ts files in our project.</p>\n</blockquote>\n<blockquote>\n<p>We can combine it with watchmode!</p>\n</blockquote>\n<pre><code>tsc -w\n</code></pre>\n<p>or</p>\n<pre><code>tsc --watch\n</code></pre>\n<h2>Excluding and including files to compile</h2>\n<blockquote>\n<p><code>tsconfig.json</code> file is a critical file which tells Typescript how to compile this whole project!</p>\n</blockquote>\n<blockquote>\n<p>It is possible to exclude certain files from compilation. In order to do that you need to add exclude command at the end of the <code>tsconfig.json</code> file. Make sure you add the command betwee two curly brackets and separate them by comma:</p>\n</blockquote>\n<pre><code>    /* Advanced Options */\n    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\n  },\n  \"exclude\": [\n    \"analytics.ts\"\n  ]\n}\n</code></pre>\n<blockquote>\n<p>You will need to re-run the compilation with <code>tsc</code> command. Notice that file <code>analytics.js</code> is not created.</p>\n</blockquote>\n<blockquote>\n<p>We can use it with regular expressions to check for any file ending with <code>.dev.ts</code></p>\n</blockquote>\n<pre><code>},\n  \"exclude\": [\n    \"*.dev.ts\"\n  ]\n}\n</code></pre>\n<blockquote>\n<p>We exclude a file ending with <code>.dev.ts</code> in ANY folder</p>\n</blockquote>\n<pre><code>},\n  \"exclude\": [\n    \"**/*.dev.ts\"\n  ]\n}\n</code></pre>\n<blockquote>\n<p>Typically what we DO WANT to exclude are files in <code>node_modules</code> folder (which holds all dependencies):</p>\n</blockquote>\n<pre><code>},\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\n</code></pre>\n<blockquote>\n<p>We can exlude any folder from compilation and no files within this folder will be compiled:</p>\n</blockquote>\n<pre><code>},\n  \"exclude\": [\n    \"folder_name_to_exclude\"\n  ]\n}\n</code></pre>\n<blockquote>\n<p>By default this folder will be excluded by Typescript (so we do not necessarily need to do it, but we can)</p>\n</blockquote>\n<blockquote>\n<p>On the other hand we can explicitely say which files to INCLUDE in our compilation. Anything else will be ignored:</p>\n</blockquote>\n<pre><code>},\n  \"exclude\": [\n    \"node_modules\"\n  ],\n  \"include\": [\n      \"app.ts\",\n      \"analytics.ts\"\n  ]\n}\n</code></pre>\n<blockquote>\n<p>I can also include whole folder which I want to include in compilation. For example folder called \"section1\":</p>\n</blockquote>\n<pre><code>},\n  \"exclude\": [\n    \"node_modules\"\n  ],\n  \"include\": [\n      \"app.ts\",\n      \"analytics.ts\",\n      \"section1\"\n  ]\n}\n</code></pre>\n<blockquote>\n<p>If I have both exclude and include, Typescript will compile what is INCLUDED minus what is EXCLUDED</p>\n</blockquote>\n<blockquote>\n<p>Command file is like include but only applies to files (I cannot use it on folders):</p>\n</blockquote>\n<pre><code>},\n  \"exclude\": [\n    \"node_modules\"\n  ],\n  \"files\": [\n      \"app.ts\",\n      \"analytics.ts\"\n  ]\n}\n</code></pre>\n<h2>tsconfig.json options</h2>\n<h3>Target</h3>\n<p><img src=\"https://i.imgur.com/LIWQef6.jpg\" title=\"Photo by vedanti from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by vedanti from Pexels</em></p></p>\n<blockquote>\n<p>Target tells for which target Javascript version we want to compile our code and which runs in set of browsers. And you dedefine which browsers support the compiled code by setting the target.</p>\n</blockquote>\n<pre><code> \"compilerOptions\": {\n    /* Basic Options */\n    // \"incremental\": true,\n    \"target\": \"es5\",\n</code></pre>\n<blockquote>\n<p>Default target is <code>es5</code>. And I can see it, because in my <code>.ts</code> files I use <code>const</code> and <code>let</code>, which if I open the <code>.js</code> file I will see <code>var</code> everywhere. Because in <code>es5</code> we do not have <code>let</code> and <code>const</code>!! <code>es5</code> makes sure that code will run in older browsers, but maybe I want to use <code>es6</code> and then I have other build tool which will transpile the Javascript code which can be then read by older browsers. Or maybe we want to ship code that ONLY works in modern browsers.</p>\n</blockquote>\n<blockquote>\n<p>We can delete the es5 and press <code>CTRL+SPACE</code> it will give you all the possible options. You can set target to es6 which is equivalent to es2015. Or use even more recent version like: es2020</p>\n</blockquote>\n<h3>Libraries</h3>\n<p><img src=\"https://i.imgur.com/zZbnUAa.jpg\" title=\"Photo by Skitterphoto from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Skitterphoto from Pexels</em></p></p>\n<blockquote>\n<p>Allows to specify which default objects and features Typescript knows (for example working with the DOM). If \"lib\" is empty, defaults are assumed based on our target. As our target is es5 or es6 than it assumes default libraries like working with DOM API, etc.</p>\n</blockquote>\n<blockquote>\n<p>Add a button to the index.html file:</p>\n</blockquote>\n<pre><code>&#x3C;body>\n    &#x3C;button>Click Me!&#x3C;/button>\n&#x3C;/body>\n</code></pre>\n<blockquote>\n<p>And then let us add event listener to the button, so that we console log a message when button is clicked. Add this to the .ts file:</p>\n</blockquote>\n<pre><code>const button = document.querySelector(\"button\")!;\nbutton.addEventListener(\"click\", () => {\n    console.log(\"Button Clicked!\")\n})\n</code></pre>\n<blockquote>\n<p>We needed to add ! after querySelector (to tell to Typescript that this button WILL exist).</p>\n</blockquote>\n<blockquote>\n<p>Typescript does not complain for example about if the (HTML) document even exists, or if there is property like querySelector or addEventListener, etc. It does not complain becaise lib is commented out, and our target is es5 or es6. But in theory our application maybe is not for browsers, maybe it is a node.js application. Leaving lib empty is recommended.</p>\n</blockquote>\n<blockquote>\n<p>If we uncomment lib and leave the array empty, then we override defaults and the libraries are empty, which means now we get all sorts of array, that typescript does not reckognize document, or even console.log, toString, Array&#x3C;>, etc.</p>\n</blockquote>\n<blockquote>\n<p>If we uncomment lib, then we should add custom libraries to our tsconfig.json file which would overwrite defaults. If you hit CTRL+SPACE you get auto-completion and see list of options. For our Javascript project we would need:</p>\n</blockquote>\n<pre><code>     \"lib\": [\n       \"DOM\",\n       \"ES6\",\n       \"DOM.Iterable\",\n       \"ScriptHost\"\n     ],\n</code></pre>\n<blockquote>\n<p>But above is equivalent if we leave it empty becasue then defaults are assumed based on our es6 target.</p>\n</blockquote>\n<pre><code>\"lib\": [],\n</code></pre>\n<h3>allowJS and checkJS</h3>\n<blockquote>\n<p>This option allows Javascript files to be compiled. AllowJS will compile .js files. CheckJS will still check syntax of .js files, but it will not compile them. But it does not make sense if you have both .ts and .js files becaue then it will leave to double-compilation. This could be however used in projects where we dont have Typescript at all, but we still want to check .js files.</p>\n</blockquote>\n<h3>JSX</h3>\n<blockquote>\n<p>This is relevant only for React projects. It specifies what JSX code is generated.</p>\n</blockquote>\n<h3>sourceMap</h3>\n<p><img src=\"https://i.imgur.com/fNmTHCH.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<blockquote>\n<p>Source Map helps with debugging and development. You can see .js files from your project in the browser -> developer tools (or CTRL+SHIFT+i)->Sources</p>\n</blockquote>\n<blockquote>\n<p>However, we only see the js files, not our ts files. Source map if set to true, will create new files in the project folder: <code>app.js.map</code> which in browser will be translated as app.ts file. Which can be practical especially if we use some easy nice syntax in ts which would then be very complicated in js.</p>\n</blockquote>\n<pre><code>\"sourceMap\": true,\n</code></pre>\n<blockquote>\n<p>In the sources we will see our code and also we will be able to put cursor in a specific line of the code and stop then execution of the code there. Which is good for debugging (like adding <code>debugger</code> in the code). But this is only done in browser and we are not polluting our code in reality.</p>\n</blockquote>\n<h3>outDir and rootDir</h3>\n<blockquote>\n<p>These help us in bigger projects to organize the folder structure. Usually we will not want to have all files laying around in the project root folder. A typical project will want to have a <code>src</code> and <code>dist</code> subfolders. <code>dist</code> usually holds all output files (like the javascript files) and <code>src</code> might hold all typescript files.</p>\n</blockquote>\n<blockquote>\n<p>By default Typescript will compile the Typescript files into Javascript files and put them right next to Typescript files.</p>\n</blockquote>\n<blockquote>\n<p>With <code>outDir</code> we can tell Typescript where output (Javascript) files will be stored, for example in <code>dist</code> folder:</p>\n</blockquote>\n<pre><code>\"outDir\": \"./dist\",\n</code></pre>\n<blockquote>\n<p>While our .ts files might reside in <code>src</code> folder.</p>\n</blockquote>\n<blockquote>\n<p>Please note that then you also need to adpat <code>index.html</code> file to point to the .js files in dist folder:</p>\n</blockquote>\n<pre><code>&#x3C;script src=\"dist/app.js\" defer>&#x3C;/script>\n&#x3C;script src=\"dist/analytics.js\" defer>&#x3C;/script>\n</code></pre>\n<blockquote>\n<p>You will also need to adapt <code>tsconfig.json</code> file in case you have include and you will need to add new parth to the files:</p>\n</blockquote>\n<pre><code>\"include\": [\n    \"src/app.ts\",\n    \"src/analytics.ts\"\n]\n</code></pre>\n<blockquote>\n<p>Also if we had subfolder structure in the <code>src</code> folder, this will be replicated in the <code>dist</code> folder.</p>\n</blockquote>\n<blockquote>\n<p>With <code>rootDir</code> I can set Typescript to only read files from this folder. It is equivalent if we used <code>include</code>.</p>\n</blockquote>\n<pre><code>\"rootDir\": \"./src\",\n</code></pre>\n<blockquote>\n<p>The difference however is that <code>rootDir</code> will also make sure that <code>outDir</code> will replicate folder structure of the <code>rootDir</code></p>\n</blockquote>\n<blockquote>\n<p>Often we set both <code>outDir</code> and <code>rootDir</code></p>\n</blockquote>\n<h3>removeComments</h3>\n<blockquote>\n<p>Any comments in the <code>.ts</code> file will be ignored in the <code>.js</code> file:</p>\n</blockquote>\n<pre><code>\"removeComments\": true,\n</code></pre>\n<h3>noEmit</h3>\n<blockquote>\n<p><code>noEmit</code> setting will make sure no <code>.js</code> files are produced (for example if I only want to check my files)</p>\n</blockquote>\n<pre><code>\"noEmitOnError\": true,\n</code></pre>\n<blockquote>\n<p>There is another one <code>noEmitOnError</code> which makes sure no <code>.js</code> file is produced if there was a compilation error. It is enought that in one file there is an error and no <code>js</code> files will be generated.</p>\n</blockquote>\n<pre><code>\"noEmitOnError\": true,\n</code></pre>\n<h3>Strict</h3>\n<blockquote>\n<p>This enables all strict type-checking options</p>\n</blockquote>\n<blockquote>\n<p>We can set strict to true, which will be equivalent to enabling all the rest of strict options to true:</p>\n</blockquote>\n<pre><code>\"strict\": true,\n</code></pre>\n<blockquote>\n<p>is the same as:</p>\n</blockquote>\n<pre><code>\"noImplicitAny\": true,\n\"strictNullChecks\": true,\n\"strictFunctionTypes\": true,\n\"strictBindCallApply\": true,\n\"strictPropertyInitialization\": true,\n\"noImplicitThis\": true,\n\"alwaysStrict\": true,\n</code></pre>\n<blockquote>\n<p><code>noImplicitAny</code> will always throw error if a parameter of a function is implied by Typescript to be of ANY type (which we should avoid). It forces us to be specific about what data we expect. For variables, it does not complain.</p>\n</blockquote>\n<pre><code>\"strictNullChecks\": true,\n</code></pre>\n<blockquote>\n<p><code>strictNullChecks</code> is checking if the objects we try to access actually exist. So for our button, we needed to add <code>!</code>after the querySelector, because otherwise Typescript would complain that it is not sure if that selector exists. It is because of this option. If it is true, it throws such errors to notify if some element might be null / might not exist.</p>\n</blockquote>\n<pre><code>\"strictNullChecks\": true,\n</code></pre>\n<h3>noUnused...</h3>\n<blockquote>\n<p><code>noUnusedLocals</code> will ensure we dont have unused variables in the file. FOllowing code with throw an error, because user1 is defined but never used:</p>\n</blockquote>\n<pre><code>const adding = (a1: number, a2: number) => {\n  const user1 = 'mia'\n  return a1+a2;\n};\n</code></pre>\n<blockquote>\n<p>However. this one checks block scoped variables. The global variables are allowed not being used in a file because maybe they are used in another file. SO this code will not throw an error for user2, it will only throw error for user1:</p>\n</blockquote>\n<pre><code>const user2 = \"addania\";\n\nconst adding = (a1: number, a2: number) => {\n  const user1 = \"mia\";\n  return a1 + a2;\n};\n</code></pre>\n<blockquote>\n<p><code>noUnusedParameters</code> will ensure that all parameters of the function are used in the body of the function. Following code will throw an error cause a2 is not used. Error will read: <code>a2 is declared but its value is never read</code>.</p>\n</blockquote>\n<pre><code>const adding = (a1: number, a2: number) => {\n  return a1;\n};\n</code></pre>\n<h3>noImplicitReturns</h3>\n<blockquote>\n<p>This is also an important setting. It makes sure that our functions cover all branches and return something under all circumstances.</p>\n</blockquote>\n<blockquote>\n<p>Following function only return something when addition is more then a zero. But it does not cover cases when it it zero and less. So not all paths are covered and we will be warned with the message: <code>No all code pathes return a value</code>.</p>\n</blockquote>\n<pre><code>const adding = (a1: number, a2: number) => {\n  if (a1 + a2 > 0) {\n    return a1 + a2;\n  }\n};\n</code></pre>\n<blockquote>\n<p>We need to add final return, even if it does not return anything to fix this error:</p>\n</blockquote>\n<pre><code>const adding = (a1: number, a2: number) => {\n  if (a1 + a2 > 0) {\n    return a1 + a2;\n  }\n  return;\n};\n</code></pre>\n<h2>Syntax:</h2>\n<p><img src=\"https://i.imgur.com/equqbFL.jpg\" title=\"Photo by Miguel Constantin Montes from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Miguel Constantin Montes from Pexels</em></p></p>\n<blockquote>\n<p><code>!</code> means I am sure my element with certain ID will always be there in the <code>.html</code> file because I checked that id:</p>\n</blockquote>\n<pre><code>const input1 = document.getElementById(\"num1\")!;\n</code></pre>\n<blockquote>\n<p>A cleaner way how to work aroudn this error is to have a run-time check if the button exists with and if statement:</p>\n</blockquote>\n<pre><code>const button = document.getQuerySelector(\"button\")\nif (button) {\n  button.addEventListener(\"click\", () => {\n    console.log(\"clicked\"\n  )})\n}\n</code></pre>\n<blockquote>\n<p><code>as HTMLInputElement</code> means TYPECASTING which says what kind of element it will be, in following case it will be an input element:</p>\n</blockquote>\n<pre><code>const input1 = document.getElementById(\"num1\")! as HTMLInputElement;\n</code></pre>\n<h2>Typescript Next Generation Features</h2>\n<blockquote>\n<p>Typescript does not only allow creating types and compiles the code. It also allows using some next generation Javascript (introduced with ES6) and new features and makes it easier to write your code - modern syntax. It does not stop there, if you use modern javascript syntax and want to compile the code to older version like <code>\"target\": \"es5\"</code> in the tsconfig.json, then it will compile your shiny modern code to the older javascript with workarounds so that it can be run on older browsers.</p>\n</blockquote>\n<h3>let and const</h3>\n<blockquote>\n<p>Modern Javascript features allow to define <code>const</code> which will not change and <code>let</code> which can change.</p>\n</blockquote>\n<blockquote>\n<p>We cannot re-assign new value to const, while we can do it for let. If we try to re-assign a constant, we get a typescript error. In the browser we would also get an runtime error:</p>\n</blockquote>\n<pre><code>const user = \"mia\"\nuser = \"addania\"\n</code></pre>\n<blockquote>\n<p>We can still use <code>var</code> as before, which allows to re-assign values. We should not use <code>var</code> not anymore.</p>\n</blockquote>\n<blockquote>\n<p><code>let</code> and <code>const</code> have one important difference to var regarding the scope in which they are available.</p>\n</blockquote>\n<blockquote>\n<p><code>var</code> has a global and function scope. Function scope means that var is only available within the function itself, but outside of the function all variables are global - available in our file.</p>\n</blockquote>\n<blockquote>\n<p>But these two scopes are not the only scopes. There are other scopes like in if statements.</p>\n</blockquote>\n<pre><code>const user2 = \"addania\";\nif (user2 === \"addania\") {\n  var b = 'i am be'\n}\nconsole.log(\"b\", b)\n</code></pre>\n<blockquote>\n<p>This would work with var in Javascript - like in a browser. Because var is not in the function, it will have global scope. Typescript will compail about it, warning us though, because it is not good code to write.</p>\n</blockquote>\n<blockquote>\n<p>This would not work with let and const. This would throw an error:</p>\n</blockquote>\n<pre><code>const user2 = \"addania\";\nif (user2 === \"addania\") {\n  let b = 'i am be'\n  let c = 'i am ci'\n}\nconsole.log(b, c)\n</code></pre>\n<blockquote>\n<p>let and const introduced new scope - block scope which is part of if statements, for loops, functions or even any snippet within curly braces - we can randomly add curly braces to the code and create a block scope:</p>\n</blockquote>\n<pre><code>{\n  const onlyAvailableHere = \"I'm VIP\"\n  let user\n}\n</code></pre>\n<h3>Arrow functions</h3>\n<blockquote>\n<p>Instead using function keyword:</p>\n</blockquote>\n<pre><code>function add(a: number, b: number) {\n  return a+b\n}\n</code></pre>\n<blockquote>\n<p>We can use arrow functions:</p>\n</blockquote>\n<pre><code>const add = (a: number, b: number) => {\n  return a+b\n}\n</code></pre>\n<blockquote>\n<p>Still possible like this:</p>\n</blockquote>\n<pre><code>const add = function(a: number, b: number){\n  return a+b\n}\n</code></pre>\n<blockquote>\n<p>Benefits of arrow functions:</p>\n</blockquote>\n<ul>\n<li>shorter syntax</li>\n<li>we can ommit <code>return</code> keyword: <code>const add = (a: number, b: number) => a+b</code> (called implicit return)</li>\n<li>we can omit parameter braces if we only have one parameter: <code>const double = a => a*2</code></li>\n</ul>\n<blockquote>\n<p>Please note, if we have no parameters, we need to use empty parenthesis <code>() =></code></p>\n</blockquote>\n<h3>Default function parameters</h3>\n<blockquote>\n<p>We can have a function with 2 parameters, but we can set a parameter to have a default value, if this value is not provided when the function is called. It is done using <code>=</code> sign:</p>\n</blockquote>\n<pre><code>const adding = (a1: number, a2: number = 0) => a1 + a2;\nconsole.log(\"addng with default: \", adding(5));\n</code></pre>\n<blockquote>\n<p>This only works if the parameter with the default value is the <strong>last one</strong>. This code below would not work / compile:</p>\n</blockquote>\n<pre><code>const adding = (a1: number = 1, a2: number) => a1 + a2;\nconsole.log(\"addng with default: \", adding(5));\n</code></pre>\n<blockquote>\n<p>If all arguments would have default value, then it would work:</p>\n</blockquote>\n<pre><code>const adding = (a1: number = 1, a2: number = 5) => a1 + a2;\nconsole.log(\"addng with default: \", adding());\n</code></pre>\n<blockquote>\n<p>Rule is, first declare parameters which are obligatory and only then parameters which are option and all need to have a default value set.</p>\n</blockquote>\n<h3>SPREAD OPERATOR</h3>\n<blockquote>\n<p>Spread operator is really useful to pull out elements of an array.</p>\n</blockquote>\n<pre><code>const hobbies = [\"yoga\", \"cross-fit\"];\nconst activeHobbies = ['hiking', ...hobbies]\n</code></pre>\n<blockquote>\n<p>...hobbies will not add whole hobbies array and add it to the activeHobbies array. Result will not be: ['hiking', [\"yoga\", \"cross-fit\"]]</p>\n</blockquote>\n<blockquote>\n<p>The result will be: [\"hiking2, \"yoga\", \"cross-fit\"]</p>\n</blockquote>\n<blockquote>\n<p>Spread operator will pull out individual values from the array.</p>\n</blockquote>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>activeHobbies.push(...hobbies)\n</code></pre>\n<blockquote>\n<p>Spread operator works also for objects. If we have <code>person</code> object and we declare a new constant copiedPerson and simply assign person to it like this:</p>\n</blockquote>\n<pre><code>const person = {\n  name: 'adda',\n}\nconst copiedPerson = person\n</code></pre>\n<blockquote>\n<p>Then we are only referencing this object. We do not create a new object with new memory address. We only create a new pointer which will point to the same memory address where person lives. This is important concept, because it can cause mutating existing objects which in React will NOT cause re-render.</p>\n</blockquote>\n<blockquote>\n<p>Spread operator will help to create a new object with new memory address and it will pull out all the key-value pairs from <code>person</code> and idd them to the completely brand new shiny object <code>copiedPerson</code></p>\n</blockquote>\n<pre><code>const person = {\n  name: 'adda',\n}\nconst copiedPerson = {...person}\n</code></pre>\n<blockquote>\n<p>Same goes for arrays. To create a new array from the old one:</p>\n</blockquote>\n<pre><code>const hobbies = [\"yoga\", \"cross-fit\"];\nconst activeHobbies = [...hobbies]\n</code></pre>\n<blockquote>\n<p>To create a new array of hobbies and want to add something more to it:</p>\n</blockquote>\n<pre><code>const hobbies = [\"yoga\", \"cross-fit\"];\nconst activeHobbies = [ ...hobbies, 'hiking',]\n</code></pre>\n<blockquote>\n<p>we can also change the order in case hiking should be first:</p>\n</blockquote>\n<pre><code>const hobbies = [\"yoga\", \"cross-fit\"];\nconst activeHobbies = ['hiking', ...hobbies]\n</code></pre>\n<h3>Rest operator</h3>\n<blockquote>\n<p>Imagine you want to create a function which will add unlimited amount of numbers. We do not know if it will be 2 or 10 or 1000. Rest parameter will help to create an array from the incoming parameters:</p>\n</blockquote>\n<pre><code>const addUnlimited = (...numbers: Array&#x3C;number>) => {\n  let total = 0;\n  numbers.forEach((num) => {\n    total = total + num;\n  });\n  return total;\n};\nconsole.log(\"unlimited\", addUnlimited(10, 20, 30, 40));\nconsole.log(\"unlimited\", addUnlimited(10, 20));\nconsole.log(\"unlimited\", addUnlimited());\n</code></pre>\n<blockquote>\n<p>Same example using reduce:</p>\n</blockquote>\n<pre><code>const addUnlimited2 = (...numbers: Array&#x3C;number>) => {\n  return numbers.reduce((currentResult, currentValue) => currentResult + currentValue, 0);\n};\nconsole.log(\"unlimited2\", addUnlimited(10, 20, 30, 40));\nconsole.log(\"unlimited2\", addUnlimited(10, 20));\nconsole.log(\"unlimited2\", addUnlimited());\n</code></pre>\n<blockquote>\n<p>If our function should accept exactly 5 numbers, then we can limit it by a typing is as a tupple instead of array of numbers.</p>\n</blockquote>\n<pre><code>const addUnlimited2 = (...numbers: [number, number, number, number, number]) => {\n  return numbers.reduce((currentResult, currentValue) => currentResult + currentValue, 0);\n};\n</code></pre>\n<h3>Array and Object descrtucturing</h3>\n<blockquote>\n<p>If we have an array and we want to extract its values into separate constants we can use array destructuring:</p>\n</blockquote>\n<pre><code>const hobbies = [\"yoga\", \"cross-fit\"];\nconst [ hobby1, hobby2 ] = hobbies\n</code></pre>\n<blockquote>\n<p>Destructure means you really pull emelents out of the array.</p>\n</blockquote>\n<blockquote>\n<p>We can even use rest parameters and store the rest of the values to a dedicated constant for example <code>other</code>. All remaining elements in the other will be an <strong>array</strong> of strings:</p>\n</blockquote>\n<pre><code>const hobbies = [\"yoga\", \"cross-fit\", \"hiking\", \"surfing\", \"diving\"];\nconst [ hobby1, hobby2, ...other ] = hobbies\n</code></pre>\n<blockquote>\n<p>Same works for objects. Here we take the person object and pull out all the key-value paris and assign first three to dedicated constants and the rest to the otherInfo const:</p>\n</blockquote>\n<pre><code>const human = {\n  firstName: \"mia\",\n  id: \"1\",\n  gender: \"female\",\n  age: 18,\n  nationality: undefined,\n};\nconst { firstName, id, gender, ...otherInfo } = human;\n</code></pre>\n<blockquote>\n<p>Please note that the constant names need to reflect the key names in the original object. Order does not matter, but the names do!</p>\n</blockquote>\n<blockquote>\n<p>If we wanted to overwrite those names, we put a colon there <code>:</code></p>\n</blockquote>\n<pre><code>const human = {\n  firstName: \"mia\",\n  id: \"1\",\n  gender: \"female\",\n  age: 18,\n  nationality: undefined,\n};\nconst { firstName: randomName, id, gender, ...otherInfo } = human;\n</code></pre>\n<h2>Best practises tips:</h2>\n<p><img src=\"https://i.imgur.com/VDxi6vE.jpg\" title=\"Photo by Porapak Apichodilok from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Porapak Apichodilok from Pexels</em></p></p>\n<blockquote>\n<p><strong>Do not ignore</strong></p>\n</blockquote>\n<p>Do not use <code>@ts-ignore</code>. It turns off the compiler completely from the next line and prevents from spotting type errors</p>\n<blockquote>\n<p><strong>Do not use React.FunctionComponent</strong>\nEee:</p>\n</blockquote>\n<pre><code>type Props = { foo: string }\nconst Foo: React.FunctionComponent&#x3C;Props> = ({ foo }) => &#x3C;div>{foo}&#x3C;/div>\n</code></pre>\n<p>Approved:</p>\n<pre><code>const Foo = ({ foo }: Props) => &#x3C;div>{foo}&#x3C;/div>\n</code></pre>\n<blockquote>\n<p><strong>Do not use enums</strong></p>\n</blockquote>\n<p>Nein:</p>\n<pre><code>enum Direction { Up, Down, Left, Right}\n</code></pre>\n<p>Jaaaa:</p>\n<pre><code>type Direction = \"up\" | \"down\" | \"left\" | \"right\"\n</code></pre>\n<blockquote>\n<p><strong>Do not use wide types like object or any</strong></p>\n</blockquote>\n<p>Always try to find concrete types</p>\n<p><img src=\"https://i.imgur.com/ob6G3qI.jpg\" title=\"Photo by Pixabay from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Pixabay from Pexels</em></p></p>\n<p><strong>Intersection types</strong></p>\n<p><img src=\"https://i.imgur.com/KlTaZzV.png\" title=\"Photo by Deva Darshan from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Deva Darshan from Pexels</em></p></p>\n<blockquote>\n<p>Intersection types allow us to combine other types</p>\n</blockquote>\n<blockquote>\n<p>Imagine we have a following types:</p>\n</blockquote>\n<pre><code>type Admin = {\n  name: string;\n  privileges: Array&#x3C;string>\n}\n\ntype Employee = {\n  name: string;\n  startDate: Date;\n}\n</code></pre>\n<blockquote>\n<p>What if I want to combine these two objects to a new type <code>ElevatedEmployee</code> which should contain all of above? Of course we could create a new type and define it manually:</p>\n</blockquote>\n<pre><code>type ElevatedEmployee = {\n  name: string;\n  startDate: Data;\n  priviledges: Array&#x3C;string>\n}\n</code></pre>\n<blockquote>\n<p>But since we already have a type for Admin and for Employee, we can combine them and create a new type based on them. This will also allow us to have one source of truth. IN order to define an intersection type, weuse <code>ampersand</code> symbol.</p>\n</blockquote>\n<pre><code>type ElevatedEmployee = Admin &#x26; Employee;\nconst david: ElevatedEmployee = {\n  name: \"Dave\",\n  privileges: [],\n  startDate: new Date(),\n}\n</code></pre>\n<blockquote>\n<p>We could also achieve this with interfaces:</p>\n</blockquote>\n<pre><code>interface Admin {\n  name: string;\n  privileges: Array&#x3C;string>;\n}\n\ninterface Employee {\n  name: string;\n  startDate: Date;\n}\n\ninterface ElevatedEmployee extends Admin, Employee {}\n\nconst david: ElevatedEmployee = {\n  name: \"Dave\",\n  privileges: [],\n  startDate: new Date(),\n};\n</code></pre>\n<blockquote>\n<p>Intersection can be used for any types, not only objects:</p>\n</blockquote>\n<pre><code>type Combinable = string | number\ntype Calculatable = number | boolean\ntype Universal = Combinable &#x26; Calculatable\n</code></pre>\n<blockquote>\n<p>As a result Universal type will be of a type number, because number is the only <code>intersection</code> between (string or number) and (number or boolean).</p>\n</blockquote>\n<blockquote>\n<p>Why is that? Simply because of the way intersections are implemented. Intersections of union types will result in whatever is common for both union types. Intersection of object will result in combination of all its objects.</p>\n</blockquote>\n<p><strong>Type guards</strong></p>\n<p><img src=\"https://i.imgur.com/NYjRWPJ.png\" title=\"Photo by Mike from Pexels\"><p style=\"font-size: 12px; text-align: right\"><em>Photo by Mike from Pexels</em></p></p>\n<blockquote>\n<p>Type guards help us with union types. Because we need to know which exact type we are getting at run time.</p>\n</blockquote>\n<p><strong>a) typeof type guard</strong></p>\n<blockquote>\n<p>Imagine a function which can get Combinable parameters - strings or numbers. In order to process those numbers correctly, we need to have a logic which distinguished between strings and numbers. When those are strings or at least one of them is a string, we concatenate them. If both are numbers then we add them up:</p>\n</blockquote>\n<pre><code>type Combinable = string | number;\n\nconst addUp = (a: Combinable, b: Combinable) => {\n  if (typeof a === \"string\" || typeof b === \"string\") {\n    return a.toString() + b.toString();\n  }\n  return a + b;\n};\n\nconsole.log(\"strings: \", addUp(\"m\", \"n\"));\nconsole.log(\"numbers: \", addUp(1, 2));\nconsole.log(\"string &#x26; number: \", addUp(\"m\", 1));\n</code></pre>\n<blockquote>\n<p><code>if (typeof a === \"string\" || typeof b === \"string\") {...}</code> is called a type guard. It allows us to use the flexibility of the union type gives us, bubt still ensures that our code runs correctly at run time.</p>\n</blockquote>\n<p><strong>b) typeof type guard</strong></p>\n<p><strong>Interfaces</strong></p>\n<blockquote>\n<p>They represent objects! type can represent anything, interface only object</p>\n</blockquote>\n<pre><code>interface Adda {\n  name: string,\n  nick: string,\n  age: number\n}\n</code></pre>\n<blockquote>\n<p>It is matter of custom. Whichever I choose I should be consistent.</p>\n</blockquote>\n<p><strong>Alias</strong></p>\n<blockquote>\n<p>Is when we extract our own type:</p>\n</blockquote>\n<pre><code>type User = {\n  id: string,\n  age: number\n}\n</code></pre>\n<p><strong>Promises</strong></p>\n<blockquote>\n<p>How to type a promise from an api? Use <code>Promise&#x3C;></code></p>\n</blockquote>\n<pre><code>interface LukeSkywalker {\n  name: string;\n  height: string;\n  mass: string;\n  hair_color: string;\n  skin_color: string;\n  eye_color: string;\n  birth_year: string;\n  gender: string;\n}\n\nexport const fetchLukeSkywalker = async (): Promise&#x3C;LukeSkywalker> => {\n  const data = await fetch(\"https://swapi.dev/api/people/1\").then((res) => {\n    return res.json();\n  });\n\n  return data;\n};\n</code></pre>\n<blockquote>\n<p>Another possibility is to use casting -> with word <code>as</code>. We can cast data to LukeSkywalker.</p>\n</blockquote>\n<pre><code>interface LukeSkywalker {\n  name: string;\n  height: string;\n  mass: string;\n  hair_color: string;\n  skin_color: string;\n  eye_color: string;\n  birth_year: string;\n  gender: string;\n}\n\nexport const fetchLukeSkywalker = async () => {\n  const data = await fetch(\"https://swapi.dev/api/people/1\").then((res) => {\n    return res.json();\n  });\n\n  return data as LukeSkywalker;\n};\n</code></pre>\n<p><strong>Sets</strong></p>\n<blockquote>\n<p>Sets are collections of values. A value in the Set may only occur once; it is unique in the Set's collection.</p>\n</blockquote>\n<pre><code>const guitarists = new Set();\n</code></pre>\n<blockquote>\n<p>How to type sets?</p>\n</blockquote>\n<pre><code>const guitarists = new Set&#x3C;string>();\n</code></pre>\n<p><strong>Objects with variables as keys</strong></p>\n<blockquote>\n<p>How to type objects which can have a variable as a key to avoid errors such as? No index signature with a parameter of type 'string' was found on type '{}'</p>\n</blockquote>\n<blockquote>\n<p>In this case the index is refering to the key of the object. Any such TS errors about index usually refer to the key of object (unless you work with arrays).</p>\n</blockquote>\n<blockquote>\n<p>First solution</p>\n</blockquote>\n<pre><code>const createCache = () => {\n  const cache = {};\n\n  const add = (id: string, value: string) => {\n    cache[id] = value;\n  };\n\n  return {\n    cache,\n    add,\n  };\n};\n</code></pre>\n<blockquote>\n<p>There are couple of ways how to type such an object:</p>\n</blockquote>\n<pre><code>const cache: {\n    [id: string]: string;\n    } = {};\n</code></pre>\n<blockquote>\n<p>In above example I can use also any other key, not only id. I can use index, or any other work (k, n):</p>\n</blockquote>\n<pre><code>const cache: {\n    [index: string]: string;\n    } = {};\n</code></pre>\n<blockquote>\n<p>Or:</p>\n</blockquote>\n<pre><code>const cache: {\n    [k: string]: string;\n    } = {};\n</code></pre>\n<blockquote>\n<p>This [k: string] inside of a type is called index signature.</p>\n</blockquote>\n<blockquote>\n<p>Another approach is to use interface:</p>\n</blockquote>\n<pre><code>interface Cache {\n  [id: string]: string;\n}\n</code></pre>\n<blockquote>\n<p>Or even using Record. Record allows to add any number of keys to that object at runtime.</p>\n</blockquote>\n<pre><code> const cache: Record&#x3C;string, string> = {};\n</code></pre>\n<p><strong>Typing catch errors</strong></p>\n<blockquote>\n<p>In javascript for each try block, we can only have 1 catch block</p>\n</blockquote>\n<blockquote>\n<p>We can throw any error:</p>\n</blockquote>\n<pre><code>throw 'What the!?'\nthrow 7\nthrow {wut: 'is this'}\nthrow null\nthrow new Promise(() => {})\nthrow undefined\n</code></pre>\n<blockquote>\n<p>Now imagine a situation like this:</p>\n</blockquote>\n<pre><code>const tryCatchDemo = (state: \"fail\" | \"succeed\") => {\n  try {\n    if (state === \"fail\") {\n      throw new Error(\"Failure!\");\n    }\n  } catch (e) {\n      return e.message;\n    }\n};\n</code></pre>\n<blockquote>\n<p>TS will yell at us that: 'e' is of type 'unknown' and we want to access message on the e.</p>\n</blockquote>\n<blockquote>\n<p>If we try to type \"e\" directly, it will yell that: Catch clause variable type annotation must be 'any' or 'unknown' if specified.</p>\n</blockquote>\n<pre><code>const tryCatchDemo = (state: \"fail\" | \"succeed\") => {\n  try {\n    if (state === \"fail\") {\n      throw new Error(\"Failure!\");\n    }\n  } catch (e: Error) {\n      return e.message;\n    }\n};\n</code></pre>\n<blockquote>\n<p>One way to fix this is:</p>\n</blockquote>\n<pre><code>const tryCatchDemo = (state: \"fail\" | \"succeed\") => {\n  try {\n    if (state === \"fail\") {\n      throw new Error(\"Failure!\");\n    }\n  } catch (e) {\n    if(e instanceof Error){return e.message;}\n    }\n};\n</code></pre>\n<p><strong>Extending interface</strong></p>\n<blockquote>\n<p>A reminder: interface is a type for objects. type can be anything, but interface can only be object.</p>\n</blockquote>\n<blockquote>\n<p>Look at the code below, it has a duplication of id everywhere:</p>\n</blockquote>\n<pre><code>interface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface Post {\n  id: string;\n  title: string;\n  body: string;\n}\n</code></pre>\n<blockquote>\n<p>How can we avoid duplication? We can create Id Interface and extend the User and Post with Id.</p>\n</blockquote>\n<pre><code>interface Id {\n  id: string\n}\n\ninterface User extends Id {\n  firstName: string;\n  lastName: string;\n}\n\ninterface Post extends Id {\n  title: string;\n  body: string;\n}\n</code></pre>\n<blockquote>\n<p>Please note that extends is only available for interfaces, and not for types.</p>\n</blockquote>\n<blockquote>\n<p>Why is it usefull? If I change my mind and I want id to be number, I can then only change it in one place instead of multiple.</p>\n</blockquote>\n<blockquote>\n<p>we can use extends with more items:</p>\n</blockquote>\n<pre><code>interface Post extends Id, User {\n    title: string;\n  body: string;\n}\n</code></pre>\n<p><strong>Object intersection</strong></p>\n<blockquote>\n<p>This combines objects. Imagine we have a scenario like this:</p>\n</blockquote>\n<pre><code>interface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface Post {\n  title: string;\n  body: string;\n}\nexport const getDefaultUserAndPosts = (): unknown => {\n  return {\n    id: \"1\",\n    firstName: \"Matt\",\n    lastName: \"Pocock\",\n    posts: [\n      {\n        title: \"How I eat so much cheese\",\n        body: \"It's pretty edam difficult\",\n      },\n    ],\n  };\n};\n</code></pre>\n<blockquote>\n<p>How do we type this return statement instead of unknown so it's both User AND { posts: Post[] }?</p>\n</blockquote>\n<blockquote>\n<p>We can do it like this:</p>\n</blockquote>\n<pre><code>interface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface Post {\n  title: string;\n  body: string;\n}\nexport const getDefaultUserAndPosts = (): User &#x26; { posts: Array&#x3C;Post> } => {\n  return {\n    id: \"1\",\n    firstName: \"Matt\",\n    lastName: \"Pocock\",\n    posts: [\n      {\n        title: \"How I eat so much cheese\",\n        body: \"It's pretty edam difficult\",\n      },\n    ],\n  };\n};\n</code></pre>\n<blockquote>\n<p>This little operator &#x26; is called intersection and it allows us to combine types. (While extends allows for inheritance)</p>\n</blockquote>\n<blockquote>\n<p>We can intersect more things: User &#x26; { posts: Array<Post> } &#x26; { age: number }</p>\n</blockquote>\n<p><strong>Pick</strong></p>\n<blockquote>\n<p>What if we have a type like this:</p>\n</blockquote>\n<pre><code>interface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n</code></pre>\n<blockquote>\n<p>and we want to create a new type which will contain everything except for id?\nWe can use omit to do that:</p>\n</blockquote>\n<pre><code>type MyType = Omit&#x3C;User, \"id\">\n</code></pre>\n<blockquote>\n<p>We can omit multiple items:</p>\n</blockquote>\n<pre><code>type MyType = Omit&#x3C;User, \"id\", \"firstName\">\n</code></pre>\n<p><strong>Pick</strong></p>\n<blockquote>\n<p>Maybe we want to only get 1 single property form already defined type.</p>\n</blockquote>\n<blockquote>\n<p>Image we only want property lastName from User:</p>\n</blockquote>\n<pre><code>interface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n</code></pre>\n<blockquote>\n<p>We can then use pick utility in TS to do so:</p>\n</blockquote>\n<pre><code>type MyType = Pick&#x3C;User, \"lastName\">\n</code></pre>\n<p><strong>Typing Asynch functions</strong></p>\n<blockquote>\n<p>Imagine you have a situation like this:</p>\n</blockquote>\n<pre><code>interface User {\n  id: string;\n  lastName: string;\n}\n\nconst createThenGetUser = async (\n  createUser: unknown,\n  getUser: unknown,\n): Promise&#x3C;User> => {\n  const userId: string = await createUser();\n  const user = await getUser(userId);\n  return user;\n};\n</code></pre>\n<blockquote>\n<p>You want to replace unknowns with proper type:</p>\n</blockquote>\n<pre><code>interface User {\n  id: string;\n  lastName: string;\n}\n\nconst createThenGetUser = async (\n  createUser: () => Promise&#x3C;string>,\n  getUser: (id: string) => Promise&#x3C;User>\n): Promise&#x3C;User> => {\n  const userId: string = await createUser();\n  const user = await getUser(userId);\n  return user;\n};\n</code></pre>\n<p><strong>Return type of function</strong></p>\n<blockquote>\n<p>How can we say to TS to take the type from a return statement of a function?</p>\n</blockquote>\n<pre><code>const myFunc = () => {\n  return 123;\n};\n</code></pre>\n<blockquote>\n<p>We can use ReturnType helper and typeof</p>\n</blockquote>\n<pre><code>type MyFuncReturn = ReturnType&#x3C;typeof myFunc>;\n</code></pre>\n<p><strong>Arguments type of function</strong></p>\n<blockquote>\n<p>How can we say to TS to take the type from arguments of a function?</p>\n</blockquote>\n<pre><code>function sum(a: number, b: string): string {\n  return a + b;\n}\n</code></pre>\n<blockquote>\n<p>We want a type called SumParams which will be [a: number, b: string]. We will use helper Parameters for if and it will return us a tuple.</p>\n</blockquote>\n<pre><code>type SumParams = Parameters&#x3C;typeof sum>;\n</code></pre>\n<blockquote>\n<p>type FirstParam will be number</p>\n</blockquote>\n<pre><code>type FirstParam = SumParams[0];\n</code></pre>\n<blockquote>\n<p>type SecondParam will be string</p>\n</blockquote>\n<pre><code>type SecondParam = SumParams[1];\n</code></pre>\n<blockquote>\n<p>This is useful to type stuff which is not in my control, for example from 3rd party libraries</p>\n</blockquote>\n<p><strong>Awaited</strong></p>\n<blockquote>\n<p>What if we have an asynch function which returns a promise, but we want to extract a type from it without the Promise.</p>\n</blockquote>\n<pre><code>type A = Promise&#x3C;string>;\n</code></pre>\n<blockquote>\n<p>Awaited helps us to unwrap the promise</p>\n</blockquote>\n<pre><code>type B = Awaited&#x3C;A> // string\n</code></pre>\n<p><strong>Extracting keys from an object</strong></p>\n<blockquote>\n<p>Imagine we have an object like this:</p>\n</blockquote>\n<pre><code>const testingFrameworks = {\n  vitest: {\n    label: \"Vitest\",\n  },\n  jest: {\n    label: \"Jest\",\n  },\n  mocha: {\n    label: \"Mocha\",\n  },\n};\n</code></pre>\n<blockquote>\n<p>And we want to extract a union type of its keys: \"vitest\" | \"jest\" | \"mocha\"</p>\n</blockquote>\n<blockquote>\n<p>We will use keyof typeof for this:</p>\n</blockquote>\n<pre><code>type TestingFramework = keyof typeof testingFrameworks;\n</code></pre>\n<p><strong>Union, Discriminated union and Enum</strong></p>\n<blockquote>\n<p>What is difference between Union, Discriminated union and Enum</p>\n</blockquote>\n<blockquote>\n<p>A is a discriminated union, with 'type' as the discriminator. Discriminated unions have common properties which are used to differentiate between members of the union. In this case, type is the discriminator.</p>\n</blockquote>\n<pre><code>type A =\n  | {\n      type: \"a\";\n      a: string;\n    }\n  | {\n      type: \"b\";\n      b: string;\n    }\n  | {\n      type: \"c\";\n      c: string;\n    };\n</code></pre>\n<blockquote>\n<p>B is a union, but not a discriminated union.</p>\n</blockquote>\n<pre><code>type B = \"a\" | \"b\" | \"c\";\n</code></pre>\n<blockquote>\n<p>C is an enum.</p>\n</blockquote>\n<pre><code>enum C {\n  A = \"a\",\n  B = \"b\",\n  C = \"c\",\n}\n</code></pre>\n<p><strong>Extract</strong></p>\n<blockquote>\n<p>Now how can we extract one piece of info from discriminated union? Imagine we have a disc. union of type A:</p>\n</blockquote>\n<pre><code>type A =\n  | {\n      type: \"a\";\n      a: string;\n    }\n  | {\n      type: \"b\";\n      b: string;\n    }\n  | {\n      type: \"c\";\n      c: string;\n    };\n</code></pre>\n<blockquote>\n<p>and we want to extract such a type for \"a\":</p>\n</blockquote>\n<pre><code>type Extracted = Extract&#x3C;A, { type: 'a' }>\n</code></pre>\n<blockquote>\n<p>Extract is a type helper and super useful. Another example:</p>\n</blockquote>\n<pre><code>export type Event =\n  | {\n      type: \"click\";\n      event: MouseEvent;\n    }\n  | {\n      type: \"focus\";\n      event: FocusEvent;\n    }\n  | {\n      type: \"keydown\";\n      event: KeyboardEvent;\n    };\n\ntype ClickEvent = Extract&#x3C;Event, { type: \"click\" }>;\n</code></pre>\n<blockquote>\n<p>We can also grab event, or any other property:</p>\n</blockquote>\n<pre><code>type FocussEvent = Extract&#x3C;Event, { event: KeyboardEvent }>\n</code></pre>\n<blockquote>\n<p>It also work not only on objects but also on unions, etc</p>\n</blockquote>\n<pre><code>type Fruit = \"apple\" | \"banana\" | \"orange\"\ntype Exotic = Extract&#x3C;Fruit, \"banana\" | \"orange\">\n</code></pre>\n<p><strong><em>Exclude</em></strong></p>\n<blockquote>\n<p>It is reverse of Extract. It is useful for discriminated unions. It specifies which property you dont want:</p>\n</blockquote>\n<pre><code>export type Event =\n  | {\n      type: \"click\";\n      event: MouseEvent;\n    }\n  | {\n      type: \"focus\";\n      event: FocusEvent;\n    }\n  | {\n      type: \"keydown\";\n      event: KeyboardEvent;\n    };\n\ntype NonKeyDownEvents = Exclude&#x3C;Event, { type: \"keydown\" }>;\n</code></pre>\n<p><strong>Indexed access type - Object values of keys</strong></p>\n<blockquote>\n<p>What if I have an object like this:</p>\n</blockquote>\n<pre><code>const fakeDataDefaults = {\n  String: \"Default string\",\n  Int: 1,\n  Float: 1.14,\n  Boolean: true,\n  ID: \"id\",\n};\n</code></pre>\n<blockquote>\n<p>And I want to extract the type for a specific key?</p>\n</blockquote>\n<pre><code>type StringType = typeof fakeDataDefaults[\"String\"];\ntype IntType = typeof fakeDataDefaults[\"Int\"];\ntype FloatType = typeof fakeDataDefaults[\"Float\"];\ntype BooleanType = typeof fakeDataDefaults[\"Boolean\"];\ntype IDType = typeof fakeDataDefaults[\"ID\"];\n</code></pre>\n<blockquote>\n<p>Or alternatively:</p>\n</blockquote>\n<pre><code>type FakeDataDefaults = typeof fakeDataDefaults;\n\ntype StringType = FakeDataDefaults[\"String\"];\ntype IntType = FakeDataDefaults[\"Int\"];\ntype FloatType = FakeDataDefaults[\"Float\"];\ntype BooleanType = FakeDataDefaults[\"Boolean\"];\ntype IDType = FakeDataDefaults[\"ID\"];\n</code></pre>\n<blockquote>\n<p>We can even access object inside objecz on this way:</p>\n</blockquote>\n<pre><code>const fakeData = {\n  String: \"Default string\",\n  Int: 1,\n  Float: 1.14,\n  Boolean: true,\n  ID: {\n    job: \"driver\"\n  },\n};\n\ntype Job = typeof fakeData[\"ID\"][\"job\"]\n</code></pre>\n<p><strong>Accessing prop on discriminated union</strong></p>\n<blockquote>\n<p>If I have an object like this::</p>\n</blockquote>\n<pre><code>type Event =\n  | {\n      type: \"click\";\n      event: MouseEvent;\n    }\n  | {\n      type: \"focus\";\n      event: FocusEvent;\n    }\n  | {\n      type: \"keydown\";\n      event: KeyboardEvent;\n    };\n</code></pre>\n<blockquote>\n<p>and I want to extract a type from it of: \"click\" | \"focus\" | \"keydown\"?</p>\n</blockquote>\n<pre><code>type EventType = Event[\"type\"];\n</code></pre>\n<blockquote>\n<p>If you access a key on a union, you are accessing all permutations of that key.</p>\n</blockquote>\n<blockquote>\n<p>It would not work if one of the elements in the union would miss \"type\". It works well in discriminated unions using discriminators.</p>\n</blockquote>\n<p><strong>As const annotation</strong></p>\n<blockquote>\n<p>Imagine we enum like this:</p>\n</blockquote>\n<pre><code>const programModeEnumMap = {\n  GROUP: \"group\",\n  ANNOUNCEMENT: \"announcement\",\n  ONE_ON_ONE: \"1on1\",\n  SELF_DIRECTED: \"selfDirected\",\n  PLANNED_ONE_ON_ONE: \"planned1on1\",\n  PLANNED_SELF_DIRECTED: \"plannedSelfDirected\",\n};\n</code></pre>\n<blockquote>\n<p>We want to access the type on GROUP key:</p>\n</blockquote>\n<pre><code>type GroupProgram = typeof programModeEnumMap[\"GROUP\"]\n</code></pre>\n<blockquote>\n<p>But this resolves to string and not \"group\". Why? Because this enum can be altered. For example lik ethis:</p>\n</blockquote>\n<pre><code>programModeEnumMap.GROUP = \"party\"\n</code></pre>\n<blockquote>\n<p>This is mutable. So it must be typed as string.</p>\n</blockquote>\n<blockquote>\n<p>How can we make the programModeEnumMap to resolve to literal values instead of generic values?</p>\n</blockquote>\n<pre><code>const programModeEnumMap = {\n  GROUP: \"group\",\n  ANNOUNCEMENT: \"announcement\",\n  ONE_ON_ONE: \"1on1\",\n  SELF_DIRECTED: \"selfDirected\",\n  PLANNED_ONE_ON_ONE: \"planned1on1\",\n  PLANNED_SELF_DIRECTED: \"plannedSelfDirected\",\n} as const;\n</code></pre>\n<blockquote>\n<p>As const freezes values and makes them resolve to their literal types. It also adds readonly annotation to the enum as well. This means it turns it into immutable. Its values cannot be changed</p>\n</blockquote>\n<blockquote>\n<p>Same is true just for arrays. They are infered as array of numbers for example.</p>\n</blockquote>\n<pre><code>const myArr = [1,2,3]\ntype MyArr = typeof myArr // Array&#x3C;number>\n</code></pre>\n<blockquote>\n<p>Why? Because I can do:</p>\n</blockquote>\n<pre><code>myArr[0]\nmyArr.push(123)\n</code></pre>\n<blockquote>\n<p>But if I add as const to the array, I wont be able to modify the array</p>\n</blockquote>\n<pre><code>const myArr = [1, 2, 3] as const;\n</code></pre>\n<blockquote>\n<p>This array will be readonly and its type will be [1, 2, 3]</p>\n</blockquote>\n<blockquote>\n<p>Another way how to freeze an object is Object.freeze():</p>\n</blockquote>\n<pre><code>const programModeEnumMap = Object.freeze({\n  GROUP: \"group\",\n  ANNOUNCEMENT: \"announcement\",\n  ONE_ON_ONE: \"1on1\",\n  SELF_DIRECTED: \"selfDirected\",\n  PLANNED_ONE_ON_ONE: \"planned1on1\",\n  PLANNED_SELF_DIRECTED: \"plannedSelfDirected\",\n});\n</code></pre>\n<blockquote>\n<p>Object.freeze only works on the first level of object -> it does not go deeper. As const goes all the way down.</p>\n</blockquote>\n<p><strong>Indexed Access with Union</strong></p>\n<blockquote>\n<p>Imagine we have an object like this:</p>\n</blockquote>\n<pre><code>const programModeEnumMap = {\n  GROUP: \"group\",\n  ANNOUNCEMENT: \"announcement\",\n  ONE_ON_ONE: \"1on1\",\n  SELF_DIRECTED: \"selfDirected\",\n  PLANNED_ONE_ON_ONE: \"planned1on1\",\n  PLANNED_SELF_DIRECTED: \"plannedSelfDirected\",\n}\n</code></pre>\n<blockquote>\n<p>And we want to create a union of \"1on1\" | \"selfDirected\" | \"planned1on1\"</p>\n</blockquote>\n<blockquote>\n<p>One lame way to do it:</p>\n</blockquote>\n<pre><code>type Program = typeof programModeEnumMap;\nexport type IndividualProgram =\n  | Program[\"ONE_ON_ONE\"]\n  | Program[\"SELF_DIRECTED\"]\n  | Program[\"PLANNED_ONE_ON_ONE\"];\n</code></pre>\n<blockquote>\n<p>Better way is like this:</p>\n</blockquote>\n<pre><code>type Program = typeof programModeEnumMap;\nexport type IndividualProgram = Program[\"ONE_ON_ONE\" | \"SELF_DIRECTED\" | \"PLANNED_ONE_ON_ONE\"]\n</code></pre>\n<blockquote>\n<p>Notice that we can pass a union to the indexed access :)</p>\n</blockquote>\n<p><strong>Accessing types of object values</strong></p>\n<blockquote>\n<p>Imagine we have an object like this:</p>\n</blockquote>\n<pre><code>const frontendToBackendEnumMap = {\n  singleModule: \"SINGLE_MODULE\",\n  multiModule: \"MULTI_MODULE\",\n  sharedModule: \"SHARED_MODULE\",\n} as const;\n</code></pre>\n<blockquote>\n<p>And we want to infer type from the values as a union: \"SINGLE<em>MODULE\" | \"MULTI</em>MODULE\" | \"SHARED_MODULE\"</p>\n</blockquote>\n<blockquote>\n<p>We can do it like this:</p>\n</blockquote>\n<pre><code>type BackendModuleEnum =\n  typeof frontendToBackendEnumMap[keyof typeof frontendToBackendEnumMap];\n</code></pre>\n<blockquote>\n<p>We can make it nicer:</p>\n</blockquote>\n<pre><code>type Obj = typeof frontendToBackendEnumMap\ntype BackendModuleEnum = Obj[keyof Obj]\n</code></pre>\n<blockquote>\n<p>We coud achieve them same if we do this:</p>\n</blockquote>\n<pre><code>type   BackendModuleEnum = Obj[\"SINGLE_MODULE\" | \"MULTI_MODULE\" | \"SHARED_MODULE\"]\n</code></pre>\n<blockquote>\n<p>But in this case the type will not be up-to-date if anything changes</p>\n</blockquote>\n<p><strong>Creating union out of array</strong></p>\n<blockquote>\n<p>Imagine we have an array:</p>\n</blockquote>\n<pre><code>const fruits = [\"apple\", \"banana\", \"orange\"] as const;\n</code></pre>\n<blockquote>\n<p>And we want to get from there a union of \"apple\" | \"banana\":</p>\n</blockquote>\n<pre><code>type AppleOrBanana = typeof fruits[0 | 1];\n</code></pre>\n<blockquote>\n<p>What if we want union of all fruits? \"apple\" | \"banana\" | \"orange\"</p>\n</blockquote>\n<blockquote>\n<p>We can do it in a lame way like this:</p>\n</blockquote>\n<pre><code>type Fruit = typeof fruits[0 | 1 | 2];\n</code></pre>\n<blockquote>\n<p>More elegant though is:</p>\n</blockquote>\n<pre><code>type Fruit = typeof fruits[number];\n</code></pre>\n<blockquote>\n<p>The word number lets you access any member of the array, no matter how long it is</p>\n</blockquote>\n<p><strong>Template literals</strong></p>\n<blockquote>\n<p>Imagine we have a function which takes in an argument called route of a type Route:</p>\n</blockquote>\n<pre><code>export const goToRoute = (route: Route) => {};\n</code></pre>\n<blockquote>\n<p>We want to type Route to accept any string which starts with a slash:</p>\n</blockquote>\n<pre><code>goToRoute(\"/users\");\ngoToRoute(\"/\");\ngoToRoute(\"/admin/users\");\n</code></pre>\n<blockquote>\n<p>We can use template literals for that which are denoted by a backtick:</p>\n</blockquote>\n<pre><code>type Route = `/${string}`;\n</code></pre>\n<blockquote>\n<p>Or similarly</p>\n</blockquote>\n<pre><code>type MyString = string\ntype Route = `/${MyString}`;\n</code></pre>\n<blockquote>\n<p>Syntax is similar to Javascript template literal, except we can also pass in types</p>\n</blockquote>\n<blockquote>\n<p>Imagine you have these two types:</p>\n</blockquote>\n<pre><code>type BreadType = \"rye\" | \"brown\" | \"white\";\n\ntype Filling = \"cheese\" | \"ham\" | \"salami\";\n</code></pre>\n<blockquote>\n<p>And you want to create a type of them which will be like this:</p>\n</blockquote>\n<pre><code>type Sandwich =\n      | \"rye sandwich with cheese\"\n      | \"rye sandwich with ham\"\n      | \"rye sandwich with salami\"\n      | \"brown sandwich with cheese\"\n      | \"brown sandwich with ham\"\n      | \"brown sandwich with salami\"\n      | \"white sandwich with cheese\"\n      | \"white sandwich with ham\"\n      | \"white sandwich with salami\"\n</code></pre>\n<blockquote>\n<p>We can do it simply as this:</p>\n</blockquote>\n<pre><code>type Sandwich = `${BreadType} sandwich with ${Filling}`;\n</code></pre>\n<blockquote>\n<p>Now imagine that we have some type Routes:</p>\n</blockquote>\n<pre><code>type Routes = \"/users\" | \"/users/:id\" | \"/posts\" | \"/posts/:id\";\n</code></pre>\n<blockquote>\n<p>We want to create a type DynamicRoutes from Routes type, but only those which contain <code>:</code></p>\n</blockquote>\n<pre><code>type DynamicRoutes =  \"/users/:id\" | \"/posts/:id\";\n</code></pre>\n<blockquote>\n<p>How to do it? We can use Extract helper function which takes 2 parameters: first the type from which we are extracting and second parameter type which will narrow it down</p>\n</blockquote>\n<pre><code>type Routes = \"/users\" | \"/users/:id\" | \"/posts\" | \"/posts/:id\";\n\ntype WithDots = `${string}:${string}`;\ntype DynamicRoutes = Extract&#x3C;Routes, WithDots>;\n</code></pre>\n<blockquote>\n<p>Alternatively:</p>\n</blockquote>\n<pre><code>type DynamicRoutes = Extract&#x3C;Routes, `${string}:${string}`>;\n</code></pre>\n<blockquote>\n<p>We can think of template literals almost like a regEx for Typescript :)</p>\n</blockquote>\n<blockquote>\n<p>Template literals are powerful for string manipulations</p>\n</blockquote>\n<blockquote>\n<p>Now lets talk about converting a template literal into keys in an object.</p>\n</blockquote>\n<blockquote>\n<p>Imagine template literal type defined as this:</p>\n</blockquote>\n<pre><code>type TemplateLiteralKey = `${\"user\" | \"post\" | \"comment\"}${\"Id\" | \"Name\"}`;\n</code></pre>\n<blockquote>\n<p>Resulting type is:</p>\n</blockquote>\n<pre><code>userId | userName | postId | postName | commentId | commentName\n</code></pre>\n<blockquote>\n<p>What if we now want to create an object where we take those as keys?</p>\n</blockquote>\n<pre><code>type ObjectOfKeys =  {\n        userId: string;\n        userName: string;\n        postId: string;\n        postName: string;\n        commentId: string;\n        commentName: string;\n}\n</code></pre>\n<blockquote>\n<p>Answer:</p>\n</blockquote>\n<pre><code>type ObjectOfKeys = {\n  [key in TemplateLiteralKey]: string;\n};\n</code></pre>\n<blockquote>\n<p>Alternatively use Record:</p>\n</blockquote>\n<pre><code>type ObjectOfKeys = Record&#x3C;TemplateLiteralKey, string>;\n</code></pre>\n<p><strong>Record</strong></p>\n<blockquote>\n<p>Record allows us to create an object based on the type of key and type of value.</p>\n</blockquote>\n<blockquote>\n<p>Official documentation says: A Record&#x3C;K, T> is an object type whose property keys are K and whose property values are T. That is, keyof Record&#x3C;K, T> is equivalent to K, and Record&#x3C;K, T>[K] is (basically) equivalent to T.</p>\n</blockquote>\n<pre><code>type Record&#x3C;K extends string, T> = {\n    [P in K]: T;\n}\n</code></pre>\n<p><strong>TS-TOOLBELT</strong></p>\n<blockquote>\n<p>TS-TOOLBELT is a small library which contains for example a Split function which allows you to split a string based on a character on a type level.</p>\n</blockquote>\n<blockquote>\n<p>Here is documentation: <a href=\"https://millsp.github.io/ts-toolbelt/modules/string_split.html\">https://millsp.github.io/ts-toolbelt/modules/string_split.html</a></p>\n</blockquote>\n<blockquote>\n<p>This is what you import:</p>\n</blockquote>\n<pre><code>import { S } from \"ts-toolbelt\";\n</code></pre>\n<blockquote>\n<p>Imagine you have this string</p>\n</blockquote>\n<pre><code>type Path = \"Users/John/Documents/notes.txt\";\n</code></pre>\n<blockquote>\n<p>And we want to split it by slash /</p>\n</blockquote>\n<blockquote>\n<p>Resulting type should be an array of its elements:</p>\n</blockquote>\n<pre><code>type Result =  [\"Users\", \"John\", \"Documents\", \"notes.txt\"]\n</code></pre>\n<blockquote>\n<p>How to do it? Here is how:</p>\n</blockquote>\n<pre><code>import { S } from \"ts-toolbelt\";\n\ntype Path = \"Users/John/Documents/notes.txt\";\n\ntype SplitPath = S.Split&#x3C;Path, \"/\">;\n</code></pre>\n<p><strong>UPPERCASE</strong></p>\n<blockquote>\n<p>What if we have a string literal type and we want to make it uppercase?</p>\n</blockquote>\n<pre><code>type Greeting = \"Hello, world\"\n</code></pre>\n<blockquote>\n<p>We can use utility function called Uppercase:</p>\n</blockquote>\n<pre><code>type ShoutyGreeting = Uppercase&#x3C;Greeting>\n</code></pre>\n<blockquote>\n<p>It will equal to:</p>\n</blockquote>\n<pre><code>type ShoutyGreeting = \"HELLO, WORLD\"\n</code></pre>\n<blockquote>\n<p>Another example. Imagine we have such type:</p>\n</blockquote>\n<pre><code>type Event = `log_in` | \"log_out\" | \"sign_up\";\n</code></pre>\n<blockquote>\n<p>And we want ot create an object of it that will look like this:</p>\n</blockquote>\n<pre><code>type ObjectOfKeys = {\n        LOG_IN: string;\n        LOG_OUT: string;\n        SIGN_UP: string;\n      }\n</code></pre>\n<blockquote>\n<p>How to do it? Here find the solutio:</p>\n</blockquote>\n<pre><code>type ObjectOfKeys = Record&#x3C;Uppercase&#x3C;Event>, string>;\n</code></pre>\n<blockquote>\n<p>Similarly, we have Lowercase or Capitalize</p>\n</blockquote>\n<p><strong>Generics - type functions / type helpers</strong></p>\n<blockquote>\n<p>How can I tell to typescript that Whatever type I pass in, I want that to be returned?</p>\n</blockquote>\n<pre><code>type ReturnWhatIPassIn&#x3C;T> = T;\n</code></pre>\n<blockquote>\n<p>ReturnWhatIPassIn creates a variable called T but it can have any name.</p>\n</blockquote>\n<blockquote>\n<p>When I pass in \"miau\", it will return \"miau\"</p>\n</blockquote>\n<blockquote>\n<p>If I pass in true, it will return true</p>\n</blockquote>\n<pre><code>type Miau = ReturnWhatIPassIn&#x3C;\"miau\">\ntype Twelve = ReturnWhatIPassIn&#x3C;12>\ntype False = ReturnWhatIPassIn&#x3C;false>\n</code></pre>\n<blockquote>\n<p>This allows us to create functions which return other types</p>\n</blockquote>\n<pre><code>type ReturnWhatIPassIn&#x3C;T> = T;\n</code></pre>\n<blockquote>\n<p><code>ReturnWhatIPassIn</code> is name of function</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;T></code> is agument to the function</p>\n</blockquote>\n<blockquote>\n<p><code>T</code> is what the function returns</p>\n</blockquote>\n<blockquote>\n<p><code>type Miau = string</code> is a static type</p>\n</blockquote>\n<blockquote>\n<p>If I add <code>&#x3C;T></code> to the type, I convert it to a function: <code>type Miau&#x3C;T> = T</code></p>\n</blockquote>\n<blockquote>\n<p>If we remove <code>&#x3C;T></code> from <code>ReturnWhatIPassIn</code> it would no longer be a function, it would be a static value:</p>\n</blockquote>\n<pre><code>type ReturnWhatIPassIn = 12\n</code></pre>\n<blockquote>\n<p>We can add as many arguments to the function as I want:</p>\n</blockquote>\n<pre><code>type ReturnWhatIPassIn&#x3C;T, K, U> = T;\n</code></pre>\n<blockquote>\n<p>I can give it default values</p>\n</blockquote>\n<blockquote>\n<p>Imagine this example where we want to have a generic which will take the value and add / to its front:</p>\n</blockquote>\n<pre><code>type AddRoutePrefix&#x3C;TRoute> = `/${TRoute}`;\n\nAddRoutePrefix&#x3C;\"about\"> will be \"/about\"\nAddRoutePrefix&#x3C;\"\"> will be \"/\"\nAddRoutePrefix&#x3C;\"about/team\"> will be \"/about/team\"\n</code></pre>\n<blockquote>\n<p>There is a problem that this will also work with numbers and booleans and TS will not complain:</p>\n</blockquote>\n<pre><code>AddRoutePrefix&#x3C;boolean>\nAddRoutePrefix&#x3C;number>\n</code></pre>\n<blockquote>\n<p>How can we limit this only to strings?</p>\n</blockquote>\n<pre><code>type AddRoutePrefix&#x3C;TRoute extends string> = `/${TRoute}`;\n</code></pre>\n<blockquote>\n<p>The syntax extends is like gving a type to the Type Parameter. We can imagine it as if it was really a function:</p>\n</blockquote>\n<pre><code>const addRoutePrefix = (route: string) => {}\n</code></pre>\n<blockquote>\n<p>What if our Type Helper should work with more arguments?</p>\n</blockquote>\n<pre><code>type CreateDataShape&#x3C;T, U> = {\n  data: T;\n  error: U;\n};\n</code></pre>\n<blockquote>\n<p>Now imagine that we not always want to pass in the U and if we dont pass it, then we want it to be undefined.</p>\n</blockquote>\n<pre><code>type CreateDataShape&#x3C;T, U = undefined> = {\n  data: T;\n  error: U;\n};\n</code></pre>\n<blockquote>\n<p>Then we can use this in 2 different ways:</p>\n</blockquote>\n<pre><code>type MyNewType = CreateDataShape&#x3C;string>\ntype MyNewType = CreateDataShape&#x3C;string, number>\n</code></pre>\n<blockquote>\n<p>What if I know that I will always pass a function to my type?</p>\n</blockquote>\n<pre><code>type GetParametersAndReturnType&#x3C;T extends (a: any, b: any) => any> = {\n  params: Parameters&#x3C;T>;\n  returnValue: ReturnType&#x3C;T>;\n};\n</code></pre>\n<blockquote>\n<p>Look at the type above and its usage below:</p>\n</blockquote>\n<pre><code>type MyType1 = GetParametersAndReturnType&#x3C;() => string>\n// { params: []; returnValue: string }\n\ntype MyType2 = GetParametersAndReturnType&#x3C;(s: string) => void>\n// { params: [string]; returnValue: void }\n\ntype MyType3 = GetParametersAndReturnType&#x3C;(n: number, b: boolean) => number>\n// { params: [number, boolean]; returnValue: number }\n</code></pre>\n<blockquote>\n<p>This will work with 2 parameters, but what if we need more?</p>\n</blockquote>\n<pre><code>type GetParametersAndReturnType&#x3C;T extends (...args: any) => any> = {\n  params: Parameters&#x3C;T>;\n  returnValue: ReturnType&#x3C;T>;\n};\n</code></pre>\n<blockquote>\n<p>Not there is a mind blowing type for generics where we want to make sure we can pass in anything EXCEPT for null or undefined</p>\n</blockquote>\n<blockquote>\n<p>We will start with a code like this:</p>\n</blockquote>\n<pre><code>export type Maybe&#x3C;T> = T | null | undefined;\n</code></pre>\n<p>We want that all these tests pass</p>\n<pre><code>type Yes1 = Maybe&#x3C;string>,\ntype Yes2 = Maybe&#x3C;false>,\ntype Yes3 = Maybe&#x3C;0>,\ntype Yes4 = Maybe&#x3C;\"\">,\n</code></pre>\n<blockquote>\n<p>But these test should fail:</p>\n</blockquote>\n<pre><code>type No1 = Maybe&#x3C;null>,\ntype No2 = Maybe&#x3C;undefined>,\n</code></pre>\n<blockquote>\n<p>And we want to narrow down T to be anything except for null or undefined:</p>\n</blockquote>\n<pre><code>export type Maybe&#x3C;T extends string | number | boolean> = T | null | undefined;\n</code></pre>\n<blockquote>\n<p>But another mind-blowing way to do it is here:</p>\n</blockquote>\n<pre><code>export type Maybe&#x3C;T extends {}> = T | null | undefined;\n</code></pre>\n<blockquote>\n<p><code>{}</code> in typescript has a very special meaning. It represents anything that is not null or undefined. It is different from truthy values, cause we can pass there false or 0</p>\n</blockquote>\n<blockquote>\n<p>Actually if we type something as an empty object, we can assign a string, or number to it</p>\n</blockquote>\n<pre><code>const whatever: {} = \"abc\"\nconst whatever: {} = 123\nconst whatever: {} = false\nconst whatever: {} = 0\nconst whatever: {} = true\nconst whatever: {} = {}\nconst whatever: {} = []\n</code></pre>\n<blockquote>\n<p>Why is it? Everything in Javascript is an object - array, string with various methods, etc.</p>\n</blockquote>\n<blockquote>\n<p>Moreover, Typescript does structural comparisons when checking if something is comparable. If I need a type: { name: string }, it does not care that I pass { name: string, surname: string, age: number }. It only cares about the name being present and all additional properties are ignored. So if I have a type of empty object {}, I can pass any property in there.</p>\n</blockquote>\n<blockquote>\n<p>null and undefined are not objects. whereas false is still an object, 0 is an object</p>\n</blockquote>\n<blockquote>\n<p>Now how to declare a type which is a non-empty array?</p>\n</blockquote>\n<blockquote>\n<p>If we do this:</p>\n</blockquote>\n<pre><code>type NonEmpty&#x3C;T> = Array&#x3C;T>\n</code></pre>\n<blockquote>\n<p>then we actually can pass empty array</p>\n</blockquote>\n<blockquote>\n<p>We could use tuples for that:</p>\n</blockquote>\n<pre><code>type NonEmpty&#x3C;T> = [T, T, T]\n</code></pre>\n<blockquote>\n<p>but then we would need to know exactly the length of that array, but if we want to be more flexible and to allow for any length, then it wont work.</p>\n</blockquote>\n<blockquote>\n<p>A neat trick is to us following syntax with rest parameter:</p>\n</blockquote>\n<pre><code>type NonEmpty&#x3C;T> = [ T, ...T[]]\n</code></pre>\n<blockquote>\n<p>Or similarly:</p>\n</blockquote>\n<pre><code>type NonEmpty&#x3C;T> = [ T, ...Array&#x3C;T>]\n</code></pre>\n<blockquote>\n<p>This syntax means that I need to have at least one element in the array and then as many as I like, even 0</p>\n</blockquote>\n<blockquote>\n<p>If we want an array that needs to have at least 2 parameters:</p>\n</blockquote>\n<pre><code>type NonEmpty&#x3C;T> = [ T, T, ...Array&#x3C;T>]\n</code></pre>\n<p><strong>Conditional types</strong></p>\n<blockquote>\n<p>Now how can we conditionally render a type?</p>\n</blockquote>\n<blockquote>\n<p>Imagine if I pass \"hello\" to my type, I want to return \"goodbye\" and if I pass \"goodbye\", I want to return \"hello\"</p>\n</blockquote>\n<pre><code>type YouSayGoodbyeAndISayHello&#x3C;T> = T extends \"hello\" ? \"goodbye\" : \"hello\";\n\ntype MyType = YouSayGoodbyeAndISayHello&#x3C;\"hello\"> // \"goodbye\"\ntype MyType = YouSayGoodbyeAndISayHello&#x3C;\"goodbye\"> // \"hello\"\n</code></pre>\n<blockquote>\n<p>In this context <code>T extends \"hello\"</code> is actually a logical check. Does T extend \"hello\"?</p>\n</blockquote>\n<blockquote>\n<p>This conditional type is mega powerful and turns typescript from just some static type checks to a its own language</p>\n</blockquote>\n<blockquote>\n<p>Ternary statements can be nested :)</p>\n</blockquote>\n<p><strong>Infer</strong></p>\n<blockquote>\n<p><code>infer</code> keyword is often being used in conditional types</p>\n</blockquote>\n<blockquote>\n<p>Imagine we want to create a type that will accept { data: \"ABC\" } and it will return \"ABC\"</p>\n</blockquote>\n<blockquote>\n<p>If it accepts { data: { name: \"DEF\"} }, it will return { name: \"DEF\"}</p>\n</blockquote>\n<blockquote>\n<p>We can do it like this:</p>\n</blockquote>\n<pre><code>type GetDataValue&#x3C;T> = T extends { data: infer E } ? E : never;\n\ntype No = GetDataValue&#x3C;string> // returns never cause we didnt pass object with data\ntype Yes1 = GetDataValue&#x3C;{ data: \"hello\" }> // returns \"hello\"\ntype Yes2 = GetDataValue&#x3C;{ data: { name: \"hello\" } }> // returns { name: \"hello\" }\ntype Yes3 = GetDataValue&#x3C;{ data: { name: \"hello\"; age: 20 } }> // returns { name: \"hello\"; age: 20 }\n</code></pre>\n<blockquote>\n<p>how does the infer keyrowd work? Whatever is passed into the data key in an object, the TS will infer its type and save it to a variable called E (can be any name). We can then use that variable later to say what the function should return in case this condition is true!</p>\n</blockquote>\n<blockquote>\n<p>Notice that the E will only be defined for the positive branch and not in the else case. Because in else case, E is not declared. SO we cant do this:</p>\n</blockquote>\n<pre><code>type GetDataValue&#x3C;T> = T extends { data: infer E } ? E : E; // ERROR E is not declared\n</code></pre>\n<blockquote>\n<p>This whole infer allows us to declare a new type variable inside of the conditional check.</p>\n</blockquote>\n<blockquote>\n<p>Another way to do this is exercise is:</p>\n</blockquote>\n<pre><code>type GetDataValue&#x3C;T> = T extends { data: any } ? T[\"data\"] : never;\n</code></pre>\n<p><strong>Template literals with infer</strong></p>\n<blockquote>\n<p>Imagine we have type like this:</p>\n</blockquote>\n<pre><code>type Names = [\n  \"Matt Pocock\",\n  \"Jimi Hendrix\",\n  \"Eric Clapton\",\n  \"John Mayer\",\n  \"BB King\",\n];\n</code></pre>\n<blockquote>\n<p>and we want to infer another type from it which will be Pocock, Handrix, Claptop, Mayer</p>\n</blockquote>\n<pre><code>type GetSurname&#x3C;T> = unknow\n type New1 = GetSurname&#x3C;Names[0]> // returns \"Pocock\"\n type New2 = GetSurname&#x3C;Names[1]> // returns \"Hendrix\"\n type New3 = GetSurname&#x3C;Names[2]> // returns \"Clapton\"\n type New4 = GetSurname&#x3C;Names[3]> // returns \"Mayer\"\n type New5 = GetSurname&#x3C;Names[4]> // returns \"King\"\n</code></pre>\n<blockquote>\n<p>How ot declare the GetSurname type?</p>\n</blockquote>\n<blockquote>\n<p>One way is using S and spliting it:</p>\n</blockquote>\n<pre><code>import { S } from \"ts-toolbelt\";\ntype GetSurname&#x3C;T extends string> = S.Split&#x3C;T, \" \">[1];\n</code></pre>\n<blockquote>\n<p>But we can also use template literal and word infer:</p>\n</blockquote>\n<pre><code>type GetSurname&#x3C;T> = T extends `${infer First} ${infer Last}` ? Last : never;\n</code></pre>\n<p><strong>Mapped types</strong></p>\n<blockquote>\n<p>Imagine we have a union type:</p>\n</blockquote>\n<pre><code>type Route = \"/\" | \"/about\" | \"/admin\" | \"/admin/users\";\n</code></pre>\n<blockquote>\n<p>And we want to create a type for an object where both keys and values will be the members of the union:</p>\n</blockquote>\n<pre><code>type Result = {\n        \"/\": \"/\";\n        \"/about\": \"/about\";\n        \"/admin\": \"/admin\";\n        \"/admin/users\": \"/admin/users\";\n}\n</code></pre>\n<blockquote>\n<p>In order to do this we can use mapped types which iterated through each member of a union, defines a variable, for example Key and then allows us to use this variable:</p>\n</blockquote>\n<pre><code>type RoutesObject = {\n  [Key in Route]: Key;\n};\n</code></pre>\n<blockquote>\n<p>Variable name is anything we want</p>\n</blockquote>\n<pre><code>type RoutesObject = {\n  [R in Route]: R;\n};\n</code></pre>\n<blockquote>\n<p>What <code>in</code> basically does is for every member of a union, extract R and add it as a key and value</p>\n</blockquote>\n<blockquote>\n<p>We can also use it like this:</p>\n</blockquote>\n<pre><code>type RoutesObject = {\n  [Key in \"hi\" | \"there\"]: Key;\n};\n</code></pre>\n<blockquote>\n<p>It would resolve into an object</p>\n</blockquote>\n<pre><code>{\n  hi: \"hi\",\n  there: \"there\",\n}\n</code></pre>\n<blockquote>\n<p>Values also dont need to be same as keys:</p>\n</blockquote>\n<pre><code>type RoutesObject = {\n  [Key in \"hi\" | \"there\"]: string;\n};\n</code></pre>\n<blockquote>\n<p>Mapped types also work with objects. Imagine we have an object type like this:</p>\n</blockquote>\n<pre><code>interface Attributes {\n  firstName: string;\n  lastName: string;\n  age: number;\n}\n</code></pre>\n<blockquote>\n<p>And we want to extract from it a type that will look like this:</p>\n</blockquote>\n<pre><code>{\n  firstName: () => string;\n  lastName: () => string;\n  age: () => number;\n}\n</code></pre>\n<blockquote>\n<p>We can do it like this:</p>\n</blockquote>\n<pre><code>type AttributeGetters = {\n  [K in keyof Attributes]: () => Attributes[K];\n};\n</code></pre>\n<blockquote>\n<p>Keyof Attributes also creates a union of all the keys in Attribute type</p>\n</blockquote>\n<blockquote>\n<p>We can even create a same type as Attributes using mapped type:</p>\n</blockquote>\n<pre><code>type MyNewAttribute = {\n  [K in keyof Attributes]: Attributes[K];\n};\n</code></pre>\n<blockquote>\n<p>MyNewAttribute is now equivalent type as Attribute. Why would we want to do that? If we needed a new type where all keys are optional or readonly:</p>\n</blockquote>\n<pre><code>type MyNewAttribute = {\n  [K in keyof Attributes]?: Attributes[K];\n};\n\ntype MyNewAttribute = {\n  readonly [K in keyof Attributes]: Attributes[K];\n};\n</code></pre>\n<blockquote>\n<p>now what if we want to rename the keys of the new object type?</p>\n</blockquote>\n<pre><code>type NowThis = {\n        getFirstName: () => string;\n        getLastName: () => string;\n        getAge: () => number;\n }\n</code></pre>\n<blockquote>\n<p>We can use as property which allows us to use template literals</p>\n</blockquote>\n<pre><code>type AttributeGetters = {\n  [K in keyof Attributes as `get${Capitalize&#x3C;K>}`]: () => Attributes[K];\n};\n</code></pre>\n<blockquote>\n<p>This <code>as</code> works as a remapper</p>\n</blockquote>\n<blockquote>\n<p>Now if we have an object type like this</p>\n</blockquote>\n<pre><code>interface Attributes {\n  greet1: [ \"hi\", \"there\" ];\n  greet2: [ \"hello\", \"you\" ];\n}\n</code></pre>\n<blockquote>\n<p>And we wanted to extract a type that would be</p>\n</blockquote>\n<pre><code>type GreetOnly = {\n  greet1: \"hi\";\n  greet2: \"hello\";\n}\n</code></pre>\n<blockquote>\n<p>We can do it like this</p>\n</blockquote>\n<pre><code>type NewType = {\n  [K in keyof Attributes]: Attributes[K][0]\n}\n</code></pre>\n<blockquote>\n<p>Now imagine we have a type like this:</p>\n</blockquote>\n<pre><code>interface Example {\n  name: string;\n  age: number;\n  id: string;\n  organisationId: string;\n  groupId: string;\n}\n</code></pre>\n<blockquote>\n<p>And we want to extract a type from it which has such keys, which contain <code>id</code> in it. Resulting type should look like this:</p>\n</blockquote>\n<pre><code>type Result: {\n        id: string;\n        organisationId: string;\n        groupId: string;\n}\n</code></pre>\n<blockquote>\n<p>We will need conditional type, remapping and a generic</p>\n</blockquote>\n<pre><code>type OnlyIdKeys&#x3C;T> = {\n  [K in keyof T as `${K extends \"id\" | \"organisationId\" | \"groupId\"\n    ? K\n    : never}`]: T[K];\n};\n</code></pre>\n<blockquote>\n<p>Then we use this type like this:</p>\n</blockquote>\n<pre><code>type Result = OnlyIdKeys&#x3C;Example>;\n</code></pre>\n<blockquote>\n<p>Another even more generic and elegant way is to use template literals to search for an anything that contains id in it (WOW)</p>\n</blockquote>\n<pre><code>type OnlyIdKeys&#x3C;T> = {\n  [K in keyof T as K extends `${string}${\"id\" | \"Id\"}${string}`\n    ? K\n    : never]: T[K];\n};\n</code></pre>\n<blockquote>\n<p>Now assume we have a discriminated union like this:</p>\n</blockquote>\n<pre><code>type Route =\n  | {\n      route: \"/\";\n      search: {\n        page: string;\n        perPage: string;\n      };\n    }\n  | { route: \"/about\"; search: {} }\n  | { route: \"/admin\"; search: {} }\n  | { route: \"/admin/users\"; search: {} };\n</code></pre>\n<blockquote>\n<p>and we want to extract a type of it, which will look like this:</p>\n</blockquote>\n<pre><code>type Interesting = {\n        \"/\": {\n          page: string;\n          perPage: string;\n        };\n        \"/about\": {};\n        \"/admin\": {};\n        \"/admin/users\": {};\n      }\n</code></pre>\n<blockquote>\n<p>How can we do it? Tip: We will need mapped type, indexed access aaaaand an Extract.</p>\n</blockquote>\n<pre><code>type RoutesObject = {\n  [K in Route[\"route\"]]: Extract&#x3C;Route, { route: K }>[\"search\"];\n};\n</code></pre>\n<blockquote>\n<p>And a super elegant way to do it is:</p>\n</blockquote>\n<pre><code>type RoutesObject = {\n  [K in Route as Route[\"route\"]]: Route[\"search\"];\n};\n</code></pre>\n<blockquote>\n<p>We keep K as a Route and then we have access to the entire object including route and search. The key is then remapped to be Route[\"route\"] and value to Route[\"search\"]. Wow</p>\n</blockquote>\n<p><strong>Object to union</strong></p>\n<blockquote>\n<p>What if we have an object like this?</p>\n</blockquote>\n<pre><code>interface Values {\n  email: string;\n  firstName: string;\n  lastName: string;\n}\n</code></pre>\n<blockquote>\n<p>And from this we want to create a union o tuples:</p>\n</blockquote>\n<pre><code>type UN = [\"email\", string] | [\"firstName\", string] | [\"lastName\", string]\n</code></pre>\n<blockquote>\n<p>First we will create an intermediary type which looks like this:</p>\n</blockquote>\n<pre><code>type F = {\n  [K in keyof Values]: [K, Values[K]];\n};\n</code></pre>\n<blockquote>\n<p>Which will then look like this:</p>\n</blockquote>\n<pre><code>type F = {\n  email: [\"email\", string];\n  firstName: [\"firstName\", string];\n  lastName: [\"lastName\", string];\n}\n</code></pre>\n<blockquote>\n<p>And then the only thing we need to do it so simply extract value of object to a union type, which we did before:</p>\n</blockquote>\n<pre><code>type ImUnion = F[keyof F]\n</code></pre>\n<blockquote>\n<p>So the whole magic looks like this:</p>\n</blockquote>\n<pre><code>interface Values {\n  email: string;\n  firstName: string;\n  lastName: string;\n}\n\ntype F = {\n  [K in keyof Values]: [K, Values[K]];\n};\n\ntype ValuesAsUnionOfTuples = F[keyof F];\n</code></pre>\n<blockquote>\n<p>And to even make it nicer:</p>\n</blockquote>\n<pre><code>type ValuesAsUnionOfTuples = {\n  [K in keyof Values]: [K, Values[K]];\n}[keyof Values];\n</code></pre>\n<blockquote>\n<p>Similarly if we have such an object:</p>\n</blockquote>\n<pre><code>interface FruitMap {\n  apple: \"red\";\n  banana: \"yellow\";\n  orange: \"orange\";\n}\n</code></pre>\n<blockquote>\n<p>And we want a union type of it like this:</p>\n</blockquote>\n<pre><code>type MyBreakfast: \"apple:red\" | \"banana:yellow\" | \"orange:orange\"\n</code></pre>\n<blockquote>\n<p>We can do it like this:</p>\n</blockquote>\n<pre><code>type TransformedFruit = {\n  [K in keyof FruitMap]: `${K}:${FruitMap[K]}`;\n}[keyof FruitMap];\n</code></pre>\n<p><strong>Array to union / Tuple to union type</strong></p>\n<blockquote>\n<p>Imagine I have an array type like this:</p>\n</blockquote>\n<pre><code>type X = [ \"user\", \"id\", \"name\"]\n</code></pre>\n<blockquote>\n<p>What if I want a union type of it?</p>\n</blockquote>\n<pre><code>type Y = X[number] // \"user\" | \"id\" | \"name\"\n</code></pre>\n<p><strong>Generics in functions</strong></p>\n<blockquote>\n<p>How to type a function with generics to return what is passed in?</p>\n</blockquote>\n<pre><code>const returnWhatIPassIn = &#x3C;E>(t: E) => {\n  return t;\n};\n</code></pre>\n<blockquote>\n<p>We add <code>&#x3C;T></code> in front of the parameters parentheses. And we are creating a type helper out of this function</p>\n</blockquote>\n<blockquote>\n<p>The function then receives T and also returns T</p>\n</blockquote>\n<blockquote>\n<p>It is equivalent to creating such a type:</p>\n</blockquote>\n<pre><code>type ReturnWhatIPassIn&#x3C;T> = T\ntype One = ReturnWhatIPassIn&#x3C;1> // returns 1\ntype Two = ReturnWhatIPassIn&#x3C;2> // returns 2\n</code></pre>\n<blockquote>\n<p>We could also anotate the return type explicitely. But TS infers it correctly:</p>\n</blockquote>\n<pre><code>const returnWhatIPassIn = &#x3C;E>(t: E):E => {\n  return t;\n};\n</code></pre>\n<blockquote>\n<p>We can also restrict T to only accept strings, but still be inferred as what literal value what is passed in and not as a generic string</p>\n</blockquote>\n<pre><code>export const returnWhatIPassIn = &#x3C;T extends string>(t: T) => t;\n</code></pre>\n<blockquote>\n<p>What if we want to pass in 2 parameters?</p>\n</blockquote>\n<pre><code>const returnBothOfWhatIPassIn = &#x3C;T, U>(a: T, b: U) => {\n  return {\n    a,\n    b,\n  };\n};\n</code></pre>\n<blockquote>\n<p>Above syntax is same as</p>\n</blockquote>\n<pre><code>type Result&#x3C;A, B> = {\n  a: A,\n  b: B\n}\n</code></pre>\n<blockquote>\n<p>T will be infered as string and U as a number if we pass in values like this:</p>\n</blockquote>\n<pre><code>const result = returnBothOfWhatIPassIn(\"a\", 1);\n</code></pre>\n<blockquote>\n<p>If we want them to be literal, we can extend each</p>\n</blockquote>\n<pre><code>const returnBothOfWhatIPassIn = &#x3C;T extends string, U extends number>(a: T, b: U) => {\n  return {\n    a,\n    b,\n  };\n};\n</code></pre>\n<blockquote>\n<p>This is pretty important charcteristics of generics and how we can use literal values</p>\n</blockquote>\n<blockquote>\n<p>Similar example. What if we have a function like this which receives array of statuses and returns them? We dont want however the return type to be array of strings, we want it to be array of individual status (their literal values).</p>\n</blockquote>\n<pre><code>const makeStatus = &#x3C;TStatuses extends string[]>(\n  statuses: TStatuses\n) => {\n  return statuses;\n};\n\nconst statuses = makeStatus([\"INFO\", \"DEBUG\", \"ERROR\", \"WARNING\"]);\n</code></pre>\n<blockquote>\n<p>Solution:</p>\n</blockquote>\n<pre><code>const makeStatus = &#x3C;TStatuses extends string>(\n  statuses: Array&#x3C;TStatuses>\n): Array&#x3C;TStatuses> => {\n  return statuses;\n};\n\nconst statuses = makeStatus([\"INFO\", \"DEBUG\", \"ERROR\", \"WARNING\"]);\n</code></pre>\n<blockquote>\n<p>Important is that we can make in braces &#x3C;> whatever we want, it can be array of something or the something.</p>\n</blockquote>\n<p><strong>Generics and components</strong></p>\n<blockquote>\n<p>Imagine we have a component like this</p>\n</blockquote>\n<pre><code>export class Component{\n  private props: unknown;\n\n  constructor(props: unknown) {\n    this.props = props;\n  }\n\n  getProps = () => this.props;\n}\n\nconst component = new Component({ a: 1, b: 2, c: 3 });\n</code></pre>\n<blockquote>\n<p>And we want to make sure that whatever props we pass in, we will also infer the type from them</p>\n</blockquote>\n<blockquote>\n<p>Solution looks like this</p>\n</blockquote>\n<pre><code>export class Component&#x3C;TProps> {\n  private props: TProps;\n\n  constructor(props: TProps) {\n    this.props = props;\n  }\n\n  getProps = () => this.props;\n}\n\nconst component = new Component({ a: 1, b: 2, c: 3 });\n</code></pre>\n<blockquote>\n<p>Now what if we want our clone function to infer the props of the object we are passing in?</p>\n</blockquote>\n<pre><code>export class Component&#x3C;TProps> {\n  private props: TProps;\n  constructor(props: TProps) {\n    this.props = props;\n  }\n  getProps = () => this.props;\n}\n\nconst cloneComponent = (component) => {\n  return new Component(component.getProps());\n};\n</code></pre>\n<blockquote>\n<p>Solution</p>\n</blockquote>\n<pre><code>export class Component&#x3C;TProps> {\n  private props: TProps;\n  constructor(props: TProps) {\n    this.props = props;\n  }\n  getProps = () => this.props;\n}\n\nconst cloneComponent = &#x3C;TProps>(component: Component&#x3C;TProps>) => {\n  return new Component(component.getProps());\n};\n</code></pre>\n<p><strong>How to create generics with Sets</strong></p>\n<blockquote>\n<p>Set is just an array with unique values.</p>\n</blockquote>\n<blockquote>\n<p>Imagine we have a set like this:</p>\n</blockquote>\n<pre><code>export const createSet = ()=> {\n  return new Set();\n};\nconst stringSet = createSet&#x3C;string>();\nconst numberSet = createSet&#x3C;number>();\nconst unknownSet = createSet();\n</code></pre>\n<blockquote>\n<p>And we want this to be infered as set of strings for the first one, set of number for seconds one and set of unknown for third one. Here is how:</p>\n</blockquote>\n<pre><code>export const createSet = &#x3C;T>(): Set&#x3C;T> => {\n  return new Set();\n};\nconst stringSet = createSet&#x3C;string>();\nconst numberSet = createSet&#x3C;number>();\nconst unknownSet = createSet();\n</code></pre>\n<blockquote>\n<p>Another way ho to do it:</p>\n</blockquote>\n<pre><code>export const createSet = &#x3C;T>() => {\n  return new Set&#x3C;T>();\n};\nconst stringSet = createSet&#x3C;string>();\nconst numberSet = createSet&#x3C;number>();\nconst unknownSet = createSet();\n</code></pre>\n<blockquote>\n<p>We can create sets like this</p>\n</blockquote>\n<pre><code>contt mySet = new Set&#x3C;number>()\nmySet.add(123) // works\nmySet.add(\"hi\") // error\n</code></pre>\n<blockquote>\n<p>In above problem, how to set a default type if we dont pass anything? TS would infer unknown, but what if we want it to be string?</p>\n</blockquote>\n<pre><code>export const createSet = &#x3C;T = string>() => {\n  return new Set&#x3C;T>();\n};\nconst numberSet = createSet&#x3C;number>();\nconst stringSet = createSet&#x3C;string>();\nconst otherStringSet = createSet();\n</code></pre>\n<p><strong>Typing asynchronous functions with generics</strong></p>\n<blockquote>\n<p>How to type in a fetch function which should receive a type?</p>\n</blockquote>\n<pre><code>const fetchData = async &#x3C;T>(url: string): Promise&#x3C;T> => {\n  const data = await fetch(url).then((response) => response.json());\n  return data;\n};\n</code></pre>\n<blockquote>\n<p>Then when we call it we should prove its type:</p>\n</blockquote>\n<pre><code>async () => {\n  const data = await fetchData&#x3C;{ name: string }>(\n    \"https://swapi.dev/api/people/1\"\n  );\n</code></pre>\n<blockquote>\n<p>We could also do it like this:</p>\n</blockquote>\n<pre><code>const fetchData = async &#x3C;T>(url: string) => {\n  const data = await fetch(url).then((response) => response.json());\n  return data as T;\n};\n</code></pre>\n<blockquote>\n<p>But there is a better way:</p>\n</blockquote>\n<pre><code>const fetchData = async &#x3C;T>(url: string) => {\n  const data: T = await fetch(url).then((response) => response.json());\n  return data;\n};\n</code></pre>\n<blockquote>\n<p>Or even:</p>\n</blockquote>\n<pre><code>const fetchData = async &#x3C;T>(url: string) => {\n  const data: T = await fetch(url).then((response): Promise&#x3C;T> => response.json());\n  return data;\n};\n</code></pre>\n<blockquote>\n<p>Goal is to not let any sneaky any leave this line of code</p>\n</blockquote>\n<p><strong>Function overloading</strong></p>\n<blockquote>\n<p>Based on an amazing article from Dmitri Pavlutin:\n<a href=\"https://dmitripavlutin.com/typescript-function-overloading/#:~:text=Function%20overloading%20in%20TypeScript%20lets,the%20function%20should%20be%20invoked\">https://dmitripavlutin.com/typescript-function-overloading/#:~:text=Function%20overloading%20in%20TypeScript%20lets,the%20function%20should%20be%20invoked</a></p>\n</blockquote>\n<blockquote>\n<p>Most of the functions accept a fixed set of arguments. But some functions can accept a variable number of arguments, arguments of different types, and could even return different types depending on how you invoke the function. To annotate such function TypeScript offers the function overloading feature. Let's see how function overloading works.</p>\n</blockquote>\n<blockquote>\n<p>Let's consider a function that returns a welcome message to a particular person:</p>\n</blockquote>\n<pre><code>function greet(person: string): string {\n  return `Hello, ${person}!`;\n}\n</code></pre>\n<blockquote>\n<p>The function above accepts 1 argument of type string: the name of the person. Invoking the function is pretty simple:</p>\n</blockquote>\n<pre><code>greet('World'); // 'Hello, World!'\n</code></pre>\n<blockquote>\n<p>What if you'd like to make the greet() function more flexible? For example, make it additionally accept a list of persons to greet. Such a function would accept a string or an array of strings as an argument, as well as return a string or an array of strings.</p>\n</blockquote>\n<blockquote>\n<p>How to annotate such a function? There are 2 approaches.</p>\n</blockquote>\n<blockquote>\n<p>The first approach is straightforward and involves modifying the function signature directly by updating the parameter and return types.</p>\n</blockquote>\n<blockquote>\n<p>Here's how greet() looks after updating the parameter and return types:</p>\n</blockquote>\n<pre><code>function greet(person: string | string[]): string | string[] {\n  if (typeof person === 'string') {\n    return `Hello, ${person}!`;\n  } else if (Array.isArray(person)) {\n    return person.map(name => `Hello, ${name}!`);\n  }\n  throw new Error('Unable to greet');\n}\n</code></pre>\n<blockquote>\n<p>Now you can invoke greet() in 2 ways:</p>\n</blockquote>\n<pre><code>greet('World');          // 'Hello, World!'\ngreet(['Jane', 'Joe']); // ['Hello, Jane!', 'Hello, Joe!']\n</code></pre>\n<blockquote>\n<p>Updating the function signature directly to support the multiple ways of invocation is the usual and a good approach. However, there are situations when you might want to take an alternative approach and define separately all the ways your function can be invoked. This approach is called function overloading.</p>\n</blockquote>\n<blockquote>\n<p>The second approach is to use the <code>function overloading</code> feature. I recommend it when the function signature is relatively complex and has multiple types involved.</p>\n</blockquote>\n<blockquote>\n<p>Putting the function overloading in practice requires defining the so-called overload signatures and an implementation signature.</p>\n</blockquote>\n<blockquote>\n<p>The overload signature defines the parameter and return types of the function, and doesn't have a body. A function can have multiple overload signatures: corresponding to the different ways you can invoke the function.</p>\n</blockquote>\n<blockquote>\n<p>The implementation signature, on the other side, also has the parameter types and return type, but also a body that implements the function. There can be only one implementation signature.</p>\n</blockquote>\n<blockquote>\n<p>Let's transform the function greet() to use the function overloading:</p>\n</blockquote>\n<pre><code>// Overload signatures\nfunction greet(person: string): string;\nfunction greet(persons: string[]): string[];\n\n// Implementation signature\nfunction greet(person: unknown): unknown {\n  if (typeof person === 'string') {\n    return `Hello, ${person}!`;\n  } else if (Array.isArray(person)) {\n    return person.map(name => `Hello, ${name}!`);\n  }\n  throw new Error('Unable to greet');\n}\n</code></pre>\n<blockquote>\n<p>The greet() function has 2 overload signatures and one implementation signature.</p>\n</blockquote>\n<blockquote>\n<p>Each overload signature describes one way the function can be invoked. In the case of greet() function, you can call it 2 ways: with a string argument, or with an array of strings argument.</p>\n</blockquote>\n<blockquote>\n<p>The implementation signature function greet(person: unknown): unknown { ... } contains the proper logic how the function works.</p>\n</blockquote>\n<blockquote>\n<p>Now, as before, you can invoke greet() with the arguments of type string or array of strings:</p>\n</blockquote>\n<pre><code>greet('World');          // 'Hello, World!'\ngreet(['Jane', 'Joe']);  // ['Hello, Jane!', 'Hello, Joe!']\n</code></pre>\n<blockquote>\n<p>You should think carefully, because function overloads are at their best when you have a different return type based on something that you pass in. If you just have the same return type, no matter what happens, it's always going to return a string, then you should probably be using a union to express these parameters instead.</p>\n</blockquote>\n<p><strong>Casting</strong></p>\n<blockquote>\n<p>When we think we know better what this type is we can use <code>as</code> keyword which will say to typescript - I know what the type is so use it as I say. TYpescript will be: OK, Master.</p>\n</blockquote>\n<pre><code>sendEmail(\"abc\" as EmailAddress)\n</code></pre>\n<blockquote>\n<p>In general this is not a good idea in Typescript</p>\n</blockquote>\n<p><strong>Type aliases</strong></p>\n<blockquote>\n<p>When we create our own types with some random name:</p>\n</blockquote>\n<pre><code>type RandomWord = string\n</code></pre>\n<blockquote>\n<p>RandomWord is a type alias</p>\n</blockquote>\n<p><strong>Branded types</strong></p>\n<blockquote>\n<p>Also known as nominal types. These types are really interesting, because they let you specify logic on the type level.</p>\n</blockquote>\n<blockquote>\n<p>Imagine that throughout your application you will deal with emails. But to defined them as a string is too broad. You want to make sure they follow a pattern of an email address. We will use branded types for that</p>\n</blockquote>\n<blockquote>\n<p>Branded types allows us to create a type to which within normal rules of Typescript no value would be possible to bed assigned to them. They are so called illegal types.</p>\n</blockquote>\n<blockquote>\n<p>Example of illegal type is intersection between string and number:</p>\n</blockquote>\n<pre><code>type Illegal = string &#x26; number\n</code></pre>\n<blockquote>\n<p>This will result in never type because you cant have something that is both string and number. We cannotassign anything to never types.</p>\n</blockquote>\n<blockquote>\n<p>Branded type is created as a base type and then intersection with object, where we label the Brand as for example Email:</p>\n</blockquote>\n<pre><code>type Mail = string &#x26; { __brand: \"Email\" }\n</code></pre>\n<blockquote>\n<p>String cannot be intersected with an object but notice that this is now not typed as never! Assigning value to this type will now not be possible.</p>\n</blockquote>\n<pre><code>const a: Mail = \"abc\" //ERROR\n</code></pre>\n<blockquote>\n<p>What we are missing still is a rule which will detect if it is a valid email address, like contains @, etc.</p>\n</blockquote>\n<pre><code>const isEmail = (email: string): email is Mail => {\n  return email.includes(\"@gmail.com\")\n}\n</code></pre>\n<blockquote>\n<p>Notice that the output of the <code>email is Mail</code>. This is also called casting where we say to the typescript that we know better than Typescript what the return type is going to be. Such a statement now means that if the isEmail returns true, then we can safely assume that email is of a type Mail. Else it cannot be assumed it is of type Mail and it will only be a string</p>\n</blockquote>\n<blockquote>\n<p>We can then use our function like this:</p>\n</blockquote>\n<pre><code>type Mail = string &#x26; { __brand: \"Email\" }\n\nconst isEmail = (email: string): email is Mail => {\n  return email.includes(\"@gmail.com\")\n}\n\nconst sendWelcomeEmail = (email: Mail) => {\n  //\n}\n\nconst signUp = (email: string) => {\n  if (isEmail){\n     sendWelcomeEmail(email) // email will be correctly typed as Mail\n  }\n}\n</code></pre>\n<blockquote>\n<p>Another way to approach this topic is to use assert and then throw error if the condition for email address is not met:</p>\n</blockquote>\n<pre><code>type Mail = string &#x26; { __brand: \"Email\" }\n\nconst asserEmail = (email: string): asserts email is Mail => {\n  if (!email.includes(\"@gmail.com\")){\n    throw new Error(`Invalid argument: [${email}] is not a valid email`)\n  }\n}\n\nconst sendWelcomeEmail = (email: Mail) => {\n  //\n}\n\nconst signUp = (email: string) => {\n  assertEmail(email);\n  sendWelcomeEmail(email) // email will be correctly typed as Mail, cause we reached so far here without error\n}\n</code></pre>\n<p><strong>Global scope</strong></p>\n<blockquote>\n<p>howto declare and type in global scope</p>\n</blockquote>\n<pre><code>declare global {\n  function myFunc(): boolean;\n  var myVar: number;\n}\n\nglobalThis.myFunc = () => true;\nglobalThis.myVar = 1;\n</code></pre>\n<blockquote>\n<p>noteice that in global scope we can only declare and type. We cannot write the implementation or assignment</p>\n</blockquote>\n<blockquote>\n<p>Only vars work in global scope. No const or let.</p>\n</blockquote>\n<blockquote>\n<p>Cool thing about global scope is that it support ambient merging. I can declare a global in one file and the same global in other file and the result will be a merged global from both files:</p>\n</blockquote>\n<blockquote>\n<p>File 1</p>\n</blockquote>\n<pre><code>declare global {\n  interface DispatchableEvent {\n    LOG_IN: {\n      username: string;\n      password: string;\n    };\n  }\n}\n</code></pre>\n<blockquote>\n<p>File 2</p>\n</blockquote>\n<pre><code>declare global {\n  interface DispatchableEvent {\n    LOG_OUT: {};\n    UPDATE_USERNAME: {\n      username: string;\n    };\n  }\n}\n</code></pre>\n<blockquote>\n<p>Result:</p>\n</blockquote>\n<pre><code>interface DispatchableEvent {\n    LOG_IN: {\n      username: string;\n      password: string;\n    };\n    LOG_OUT: {};\n    UPDATE_USERNAME: {\n      username: string;\n    };\n  }\n</code></pre>\n<blockquote>\n<p>It's a combination of declaration merging and declaring global. Having this global interface that you can append to gives you a really nice solution for certain problems.</p>\n</blockquote>\n<blockquote>\n<p>With multiple files we're really solving the problem of colocation. We want a pattern that we can just copy and paste over several files in our application and make sure that we're declaring the types really close to where the implementation is. Of course, we could just declare this in a single interface and just import that to all the places that we need it. Then, of course, it's not colocated. Whereas when they're colocated together, even though you're putting it inside a global scope, it means that if you delete this entire file, then log out just disappears from the ether and it doesn't matter anymore. Weirdly, by using a global here, we're able to get a more modular approach to our types.</p>\n</blockquote>\n<p><strong>Process.env</strong></p>\n<blockquote>\n<p>In Node.js, process.env is a <code>global variable</code> injected during runtime. It is a view of the state of the system environment variables.</p>\n</blockquote>\n<p><strong>Type predicates</strong></p>\n<blockquote>\n<p>sometimes you want more direct control over how types change throughout your code.</p>\n</blockquote>\n<blockquote>\n<p>To define a user-defined type guard, we simply need to define a function whose return type is a type predicate:</p>\n</blockquote>\n<pre><code>function isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n</code></pre>\n<blockquote>\n<p><code>pet is Fish</code> is our type predicate in this example. A predicate takes the form <code>parameterName is Type</code>, where parameterName must be the name of a parameter from the current function signature.</p>\n</blockquote>\n<blockquote>\n<p>Any time isFish is called with some variable, TypeScript will narrow that variable to that specific type if the original type is compatible.</p>\n</blockquote>\n<blockquote>\n<p>Please note that we can need to return the Fish in this case.</p>\n</blockquote>\n<blockquote>\n<p>If we have a function which does not return anything (is void) and maybe only throws error,it would not be enough to use the predicate. We will need to use <code>asserts</code> keyword</p>\n</blockquote>\n<pre><code>interface User {\n  id: string;\n  name: string;\n}\n\ninterface AdminUser extends User {\n  role: \"admin\";\n  organisations: string[];\n}\n\ninterface NormalUser extends User {\n  role: \"normal\";\n}\n\nfunction assertUserIsAdmin(\n  user: NormalUser | AdminUser\n): asserts user is AdminUser {\n  if (user.role !== \"admin\") {\n    throw new Error(\"Not an admin user\");\n  }\n}\n</code></pre>\n<blockquote>\n<p>please note that asserts only works with function declaration and not with arrow functions. workaround is always to use function declaration or such a workaround:</p>\n</blockquote>\n<pre><code>const assertUserIsAdmin: (\n  user: NormalUser | AdminUser\n) => asserts user is AdminUser = (user) => {\n  if (user.role !== \"admin\") {\n    throw new Error(\"Not an admin user\");\n  }\n};\n</code></pre>\n<blockquote>\n<p>as per this comment: <a href=\"https://github.com/microsoft/TypeScript/issues/34523#issuecomment-700491122\">https://github.com/microsoft/TypeScript/issues/34523#issuecomment-700491122</a></p>\n</blockquote>\n<p><strong>CHATGPT</strong></p>\n<blockquote>\n<p>My very first chat with CHATGPT and it already solved my problem:</p>\n</blockquote>\n<blockquote>\n<p>Q: How do I use predicates with generics in typescript</p>\n</blockquote>\n<blockquote>\n<p>A: In TypeScript, you can use generics to create reusable components that work with different types. Predicates can be used to narrow down the type of a generic parameter based on some condition. Here is an example of how to use predicates with generics in TypeScript:</p>\n</blockquote>\n<pre><code>type FilterFunction&#x3C;T> = (item: T) => boolean;\n\nfunction filter&#x3C;T>(items: T[], predicate: FilterFunction&#x3C;T>): T[] {\n  return items.filter(predicate);\n}\n\nfunction isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\nconst numbers = [1, 2, 3, \"four\"];\nconst filteredNumbers = filter(numbers, isNumber);\n\nconsole.log(filteredNumbers); // [1, 2, 3]\n</code></pre>\n<blockquote>\n<p>In this example, we define a FilterFunction type that takes a generic parameter T and returns a boolean. We then define a filter function that takes an array of type T and a FilterFunction<T> predicate as arguments. The filter function returns a new array that contains only the items that match the predicate.</p>\n</blockquote>\n<blockquote>\n<p>We also define an isNumber function that takes an unknown value and returns a boolean. This function is used as the predicate in the filter function to filter out non-numeric values from the numbers array.</p>\n</blockquote>\n<blockquote>\n<p>Note that the isNumber function returns a type predicate value is number. This tells TypeScript that if the isNumber function returns true for a value, that value is of type number. This allows TypeScript to narrow down the type of the numbers array from Array&#x3C;number | string> to Array<number>.</p>\n</blockquote>\n<blockquote>\n<p>By using generics and predicates in TypeScript, you can write more reusable and type-safe code.</p>\n</blockquote>\n<blockquote>\n<p>Q: given the above explanation, how would you then turn isNode to a predicate in this piece of code?</p>\n</blockquote>\n<pre><code>interface DOMNodeExtractorConfig&#x3C;T, Result> {\n  isNode: (node: unknown) => boolean;\n  transform: (node: T) => Result;\n}\n</code></pre>\n<blockquote>\n<p>To turn isNode into a predicate, you need to change its return type to node is T. This tells TypeScript that if isNode returns true for a value, that value is of type T. Here's how you can update the DOMNodeExtractorConfig interface with a predicate type for isNode:</p>\n</blockquote>\n<pre><code>interface DOMNodeExtractorConfig&#x3C;T, Result> {\n  isNode: (node: unknown) => node is T;\n  transform: (node: T) => Result;\n}\n</code></pre>\n<blockquote>\n<p>Now, when you use DOMNodeExtractorConfig, TypeScript will know that isNode is a type predicate and can narrow down the type of node accordingly. For example, if T is HTMLDivElement, TypeScript will be able to determine if a value is an HTMLDivElement or not based on the return value of isNode.</p>\n</blockquote>\n<blockquote>\n<p>Here's an example of how you can use DOMNodeExtractorConfig with a predicate for isNode:</p>\n</blockquote>\n<pre><code>function extractNodes&#x3C;T, Result>(config: DOMNodeExtractorConfig&#x3C;T, Result>, nodes: unknown[]): Result[] {\n  return nodes.filter(config.isNode).map(config.transform);\n}\n\nconst divExtractor: DOMNodeExtractorConfig&#x3C;HTMLDivElement, string> = {\n  isNode: (node: unknown): node is HTMLDivElement => node instanceof HTMLDivElement,\n  transform: (div: HTMLDivElement) => div.textContent || \"\",\n};\n\nconst nodes: unknown[] = [document.createElement(\"div\"), document.createElement(\"p\")];\nconst divs = extractNodes(divExtractor, nodes);\n\nconsole.log(divs); // [ &#x3C;div>&#x3C;/div> ]\n</code></pre>\n<blockquote>\n<p>In this example, we define a divExtractor object with a predicate for isNode that checks if a value is an instance of HTMLDivElement. We then call extractNodes with the divExtractor and an array of unknown nodes. extractNodes uses the predicate to filter out non-div nodes and returns an array of transformed HTMLDivElement nodes.</p>\n</blockquote>\n<blockquote>\n<p>By using a predicate for isNode, TypeScript can ensure that only nodes of the correct type are passed to the transform function.</p>\n</blockquote>\n<blockquote>\n<p>Q: wow, you are amazing. thank you!\nA: You're welcome! I'm glad I could help. If you have any more questions, feel free to ask!</p>\n</blockquote>\n<p><strong>Typescript and Classes</strong></p>\n<blockquote>\n<p>We can actually use the name of the class as a type in Typescript. Classes have this funny property where they can actually cross boundaries a little bit and be used as either a type or a runtime value. Pretty cool!</p>\n</blockquote>\n<pre><code>class CustomError extends Error {\n  constructor(message: string, public code: number) {\n    super(message);\n    this.name = \"CustomError\";\n  }\n}\nconst handleCustomError = (error: CustomError) => {\n  console.error(error.code);\n};\n</code></pre>\n<p><strong>Builder patterns</strong></p>\n<blockquote>\n<p>The builder pattern is a design pattern used in software development to simplify the creation of complex objects. In TypeScript, the builder pattern involves creating a builder class that allows you to construct an object step by step.</p>\n</blockquote>\n<blockquote>\n<p>Here's an example to help illustrate how the builder pattern works in TypeScript:</p>\n</blockquote>\n<pre><code>class User {\n  constructor(\n    public readonly firstName: string,\n    public readonly lastName: string,\n    public readonly email: string,\n    public readonly age: number,\n    public readonly address?: string\n  ) {}\n}\n\nclass UserBuilder {\n  private firstName: string = '';\n  private lastName: string = '';\n  private email: string = '';\n  private age: number = 0;\n  private address?: string;\n\n  setFirstName(firstName: string): UserBuilder {\n    this.firstName = firstName;\n    return this;\n  }\n\n  setLastName(lastName: string): UserBuilder {\n    this.lastName = lastName;\n    return this;\n  }\n\n  setEmail(email: string): UserBuilder {\n    this.email = email;\n    return this;\n  }\n\n  setAge(age: number): UserBuilder {\n    this.age = age;\n    return this;\n  }\n\n  setAddress(address: string): UserBuilder {\n    this.address = address;\n    return this;\n  }\n\n  build(): User {\n    return new User(\n      this.firstName,\n      this.lastName,\n      this.email,\n      this.age,\n      this.address\n    );\n  }\n}\n</code></pre>\n<blockquote>\n<p>In the example above, we have a User class that represents a user with basic information such as their first name, last name, email, age, and address. We also have a UserBuilder class that allows us to construct a User object step by step.</p>\n</blockquote>\n<blockquote>\n<p>To create a User object using the builder pattern, you would first create a new UserBuilder object, set its properties using the builder's setXXX methods, and then call the build method to create the User object. Here's an example:</p>\n</blockquote>\n<pre><code>const user = new UserBuilder()\n  .setFirstName('John')\n  .setLastName('Doe')\n  .setEmail('john.doe@example.com')\n  .setAge(30)\n  .setAddress('123 Main St')\n  .build();\n</code></pre>\n<blockquote>\n<p>In the example above, we create a new User object with the UserBuilder class by setting its properties using the builder's setXXX methods and then calling the build method to create the User object.</p>\n</blockquote>\n<blockquote>\n<p>Using the builder pattern can make it easier to construct complex objects with many properties because it allows you to break down the construction process into smaller, more manageable steps.</p>\n</blockquote>\n<p><strong>Definitely typed</strong></p>\n<blockquote>\n<p>Definitely Typed is a repository that contains type definitions for lots and lots of libraries, which aren't built in TypeScript. <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">https://github.com/DefinitelyTyped/DefinitelyTyped</a></p>\n</blockquote>\n<p><strong>Overriding types from external libraries with d.ts file</strong></p>\n<blockquote>\n<p>What if we use a function from external library which is poorly typed and returns a string instead of union of:</p>\n</blockquote>\n<pre><code>export const getAnimatingState = (): string => {\n  if (Math.random() > 0.5) {\n    return \"before-animation\";\n  }\n\n  if (Math.random() > 0.5) {\n    return \"animating\";\n  }\n\n  return \"after-animation\";\n};\n</code></pre>\n<blockquote>\n<p>If we use this function, we will get return of string. Which is very loose:</p>\n</blockquote>\n<pre><code>import { getAnimatingState } from \"external-lib\";\n\nconst animatingState = getAnimatingState();\n</code></pre>\n<blockquote>\n<p>In order to override this, we will need to create a new file with d.ts extension: for example abc.d.ts</p>\n</blockquote>\n<blockquote>\n<p>In this file we will <code>declare module</code> and type our getAnimatingState properly</p>\n</blockquote>\n<pre><code>declare module \"fake-lib\" {\n  export type Mytype = \"before-animation\" | \"animating\" | \"after-animation\";\n  export function getAnimatingState(): Mytype;\n}\n</code></pre>\n<blockquote>\n<p>Then in file where we actually use the function we will import the getAnimatingState from our new d.ts file:</p>\n</blockquote>\n<pre><code>import { getAnimatingState } from \"fake-lib\";\n\nconst animatingState = getAnimatingState();\n</code></pre>\n<blockquote>\n<p>Our function now returns \"before-animation\" | \"animating\" | \"after-animation\" instead of string</p>\n</blockquote>\n<p><strong>Identity functions</strong></p>\n<blockquote>\n<p>identity function takes in a value and returns the same value.</p>\n</blockquote>\n<pre><code>const asConst = &#x3C;T>(t: T) => t;\n</code></pre>\n<blockquote>\n<p>If we call this function with array of object like this:</p>\n</blockquote>\n<pre><code>const fruits = asConst([\n  {\n    name: \"apple\",\n    price: 1,\n  },\n  {\n    name: \"banana\",\n    price: 2,\n  },\n]);\n</code></pre>\n<blockquote>\n<p>The infered return type of asConst function will be Array&#x3C;{name: string, price: number}></p>\n</blockquote>\n<blockquote>\n<p>But we want it to be literal values of it, not just tring or number. We want the concrete thing.</p>\n</blockquote>\n<blockquote>\n<p>How to solve this? We can use an external library ts-toolkit., It exports F and something called Narrow which will help us with the inference:</p>\n</blockquote>\n<pre><code>import { F } from \"ts-toolbelt\";\n\nexport const asConst = &#x3C;T>(t: F.Narrow&#x3C;T>) => t;\n</code></pre>\n<blockquote>\n<p>Now the inferred type will be:</p>\n</blockquote>\n<pre><code>[\n  {\n    name: \"apple\",\n    price: 1,\n  },\n  {\n    name: \"banana\",\n    price: 2,\n  },\n]\n</code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>"}},{"node":{"id":"edb91258-ba24-57fa-b1f7-37e99955bfd4","excerpt":"General information Markdown files use extension .md. They allow formatting text better then in the code itself between for example <p> tags…","rawMarkdownBody":"\r\n![](https://i.imgur.com/VIj56ca.jpg \"Photo by Spencer Selover from Pexels\")\r\n\r\n**General information**\r\n\r\nMarkdown files use extension <code>.md</code>. They allow formatting text better then in the code itself between for example <code>```<p>```</code> tags. Gatsby also can interpret each md file a sub-site and automate creation for example of blog posts, articles, etc.\r\n\r\nMD files usually start with some metadata, such as title, date, etc, which can be retreived and used to build components which will display the data:\r\n```\r\n---\r\ntitle: \"JS\"\r\ndate: \"2019-11-12\"\r\n---\r\n```\r\n\r\n**Basic styling in Markdown**\r\n> Bold\r\n```\r\n**I am BOLD**\r\n```\r\n> List\r\n```\r\n- List item1\r\n- List item2\r\n```\r\n\r\n>How to separate text which should not be formatted, such as our code?\r\n```\r\nuse ``` before and after the block code\r\n```\r\n\r\n>How to insert images to md files?\r\n```\r\n![image alt atribute](url_or_file_path image_title)\r\n```\r\n\r\n>Url to image can also be from file directory. Images should be saved under <code>/source/images/</code>\r\n```\r\n![image alt atribute](/images/path/to/folder/image.png)\r\n```\r\n\r\n>It can also be a link to online resource:\r\n```\r\n![image alt atribute](/images/path/to/folder/image.png)\r\n```\r\n\r\n>You can add text to image which will display when you <code>mouseOver</code> the image using Title\r\n```\r\n![image alt atribute](url \"Title\")\r\n```\r\n\r\n>Add caption to you image:\r\n```\r\n![Image description](/images/path/to/folder/image.png)*My caption*\r\n```\r\n\r\n>Add option to click on the image:\r\n```\r\n[![Image description](/images/path/to/folder/image.png \"Hello World\")*My caption*](about.gitlab.com)\r\n```\r\n\r\n**ICONS**\r\n\r\n>Very useful platform to access various interesting libraries:\r\n```\r\ncdnjs.com\r\n```\r\n>One of interesting libraries is <code>Font Awesome</code> which allows you to use icons in your .md files:\r\n```\r\nhttps://cdnjs.com/libraries/font-awesome\r\nhttps://fontawesome.com/\r\n```\r\n\r\n> To be able to have cool icons we need to install <code>Font Awesome</code> library. Go to:\r\n```\r\nhttps://fontawesome.com/how-to-use/on-the-web/setup/using-package-managers\r\n```\r\n\r\n> Install the package with command:\r\n```\r\nnpm install --save @fortawesome/fontawesome-free\r\n```\r\n\r\n>Go to your html file and past this there (please not that Gatsby is generating the html automatically and your links will NOT persist):\r\n```\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/fontawesome.min.css\" rel=\"stylesheet\"/>\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/brands.min.css\" rel=\"stylesheet\"/>\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/solid.min.css\" rel=\"stylesheet\"/>\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/regular.min.css\" rel=\"stylesheet\"/>\r\n```\r\n\r\n>Then you can use following in your .md file:\r\n```\r\n<i class=\"fas fa-puzzle-piece\"></i>\r\n<i class=\"fas fa-frog\"></i>\r\n```\r\nExample:\r\n\r\n<i class=\"fas fa-puzzle-piece\"></i>\r\n<i class=\"fas fa-frog\"></i>\r\n\r\n> Solid ones are used with word <code>fas</code>\r\n```\r\n<i class=\"fas fa-frog\"></i>\r\n<i class=\"fas fa-puzzle-piece\"></i>\r\n<i class=\"fas fa-jedi\"></i>\r\n\r\n```\r\n> Examples:\r\n\r\n<i class=\"fas fa-frog\"></i>\r\n<i class=\"fas fa-puzzle-piece\"></i>\r\n<i class=\"fas fa-jedi\"></i>\r\n\r\n> Brand ones are used with word <code>fab</code>\r\n```\r\n<i class=\"fab fa-facebook-square\"></i>\r\n<i class=\"fab fa-cc-visa\"></i>\r\n```\r\n> Examples:\r\n\r\n<i class=\"fab fa-facebook-square\"></i>\r\n<i class=\"fab fa-cc-visa\"></i>\r\n\r\n> You can change the colour of the icons:\r\n```\r\n<i class=\"fab fa-cc-visa\" style=\"color: green\"></i>\r\n```\r\n> Examples:\r\n\r\n<i class=\"fab fa-cc-visa\" style=\"color: green\"></i>\r\n\r\n\r\n**EMOJIS** \r\n\r\n> On this page we can copy black and white emojis: https://www.emojicopy.com/\r\n\r\n😈\r\n\r\n> In Gatsby there is extension for emojis\r\n```\r\nnpm install --save gatsby-remark-emojis\r\n```\r\n> This is how they work: TBD\r\n\r\n:baloon:\r\n{: baloon}\r\n\r\nNot working:\r\n```md\r\n:monkey:\r\n```\r\n\r\n:monkey:\r\n\r\n```md\r\n🐒\r\n\r\n🌠\r\n```\r\n\r\n**SHADOW TO IMAGE**\r\n\r\nTBC - not working\r\n\r\n![](https://i.imgur.com/VIj56ca.jpg \"Photo by Spencer Selover from Pexels\"){: .shadow}\r\n\r\n**GRAPHS**\r\n\r\n```plantuml\r\n!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v2.1.0\r\nskinparam defaultTextAlignment center\r\n!include ICONURL/common.puml\r\n!include ICONURL/font-awesome-5/gitlab.puml\r\n!include ICONURL/font-awesome-5/java.puml\r\n!include ICONURL/font-awesome-5/rocket.puml\r\n!include ICONURL/font-awesome/newspaper_o.puml\r\nFA_NEWSPAPER_O(news,good news!,node) #White {\r\nFA5_GITLAB(gitlab,GitLab.com,node) #White\r\nFA5_JAVA(java,PlantUML,node) #White\r\nFA5_ROCKET(rocket,Integrated,node) #White\r\n}\r\ngitlab ..> java\r\njava ..> rocket\r\n```","frontmatter":{"date":"2020-02-12","title":"Markdown","category":"knowledge-base"},"fields":{"slug":"/Markdown/"},"timeToRead":4,"html":"<p><img src=\"https://i.imgur.com/VIj56ca.jpg\" title=\"Photo by Spencer Selover from Pexels\"></p>\n<p><strong>General information</strong></p>\n<p>Markdown files use extension <code>.md</code>. They allow formatting text better then in the code itself between for example <code><code>&#x3C;p></code></code> tags. Gatsby also can interpret each md file a sub-site and automate creation for example of blog posts, articles, etc.</p>\n<p>MD files usually start with some metadata, such as title, date, etc, which can be retreived and used to build components which will display the data:</p>\n<pre><code>---\ntitle: \"JS\"\ndate: \"2019-11-12\"\n---\n</code></pre>\n<p><strong>Basic styling in Markdown</strong></p>\n<blockquote>\n<p>Bold</p>\n</blockquote>\n<pre><code>**I am BOLD**\n</code></pre>\n<blockquote>\n<p>List</p>\n</blockquote>\n<pre><code>- List item1\n- List item2\n</code></pre>\n<blockquote>\n<p>How to separate text which should not be formatted, such as our code?</p>\n</blockquote>\n<pre><code>use ``` before and after the block code\n</code></pre>\n<blockquote>\n<p>How to insert images to md files?</p>\n</blockquote>\n<pre><code>![image alt atribute](url_or_file_path image_title)\n</code></pre>\n<blockquote>\n<p>Url to image can also be from file directory. Images should be saved under <code>/source/images/</code></p>\n</blockquote>\n<pre><code>![image alt atribute](/images/path/to/folder/image.png)\n</code></pre>\n<blockquote>\n<p>It can also be a link to online resource:</p>\n</blockquote>\n<pre><code>![image alt atribute](/images/path/to/folder/image.png)\n</code></pre>\n<blockquote>\n<p>You can add text to image which will display when you <code>mouseOver</code> the image using Title</p>\n</blockquote>\n<pre><code>![image alt atribute](url \"Title\")\n</code></pre>\n<blockquote>\n<p>Add caption to you image:</p>\n</blockquote>\n<pre><code>![Image description](/images/path/to/folder/image.png)*My caption*\n</code></pre>\n<blockquote>\n<p>Add option to click on the image:</p>\n</blockquote>\n<pre><code>[![Image description](/images/path/to/folder/image.png \"Hello World\")*My caption*](about.gitlab.com)\n</code></pre>\n<p><strong>ICONS</strong></p>\n<blockquote>\n<p>Very useful platform to access various interesting libraries:</p>\n</blockquote>\n<pre><code>cdnjs.com\n</code></pre>\n<blockquote>\n<p>One of interesting libraries is <code>Font Awesome</code> which allows you to use icons in your .md files:</p>\n</blockquote>\n<pre><code>https://cdnjs.com/libraries/font-awesome\nhttps://fontawesome.com/\n</code></pre>\n<blockquote>\n<p>To be able to have cool icons we need to install <code>Font Awesome</code> library. Go to:</p>\n</blockquote>\n<pre><code>https://fontawesome.com/how-to-use/on-the-web/setup/using-package-managers\n</code></pre>\n<blockquote>\n<p>Install the package with command:</p>\n</blockquote>\n<pre><code>npm install --save @fortawesome/fontawesome-free\n</code></pre>\n<blockquote>\n<p>Go to your html file and past this there (please not that Gatsby is generating the html automatically and your links will NOT persist):</p>\n</blockquote>\n<pre><code>&#x3C;link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/fontawesome.min.css\" rel=\"stylesheet\"/>\n&#x3C;link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/brands.min.css\" rel=\"stylesheet\"/>\n&#x3C;link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/solid.min.css\" rel=\"stylesheet\"/>\n&#x3C;link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/regular.min.css\" rel=\"stylesheet\"/>\n</code></pre>\n<blockquote>\n<p>Then you can use following in your .md file:</p>\n</blockquote>\n<pre><code>&#x3C;i class=\"fas fa-puzzle-piece\">&#x3C;/i>\n&#x3C;i class=\"fas fa-frog\">&#x3C;/i>\n</code></pre>\n<p>Example:</p>\n<p><i class=\"fas fa-puzzle-piece\"></i>\n<i class=\"fas fa-frog\"></i></p>\n<blockquote>\n<p>Solid ones are used with word <code>fas</code></p>\n</blockquote>\n<pre><code>&#x3C;i class=\"fas fa-frog\">&#x3C;/i>\n&#x3C;i class=\"fas fa-puzzle-piece\">&#x3C;/i>\n&#x3C;i class=\"fas fa-jedi\">&#x3C;/i>\n</code></pre>\n<blockquote>\n<p>Examples:</p>\n</blockquote>\n<p><i class=\"fas fa-frog\"></i>\n<i class=\"fas fa-puzzle-piece\"></i>\n<i class=\"fas fa-jedi\"></i></p>\n<blockquote>\n<p>Brand ones are used with word <code>fab</code></p>\n</blockquote>\n<pre><code>&#x3C;i class=\"fab fa-facebook-square\">&#x3C;/i>\n&#x3C;i class=\"fab fa-cc-visa\">&#x3C;/i>\n</code></pre>\n<blockquote>\n<p>Examples:</p>\n</blockquote>\n<p><i class=\"fab fa-facebook-square\"></i>\n<i class=\"fab fa-cc-visa\"></i></p>\n<blockquote>\n<p>You can change the colour of the icons:</p>\n</blockquote>\n<pre><code>&#x3C;i class=\"fab fa-cc-visa\" style=\"color: green\">&#x3C;/i>\n</code></pre>\n<blockquote>\n<p>Examples:</p>\n</blockquote>\n<p><i class=\"fab fa-cc-visa\" style=\"color: green\"></i></p>\n<p><strong>EMOJIS</strong> </p>\n<blockquote>\n<p>On this page we can copy black and white emojis: <a href=\"https://www.emojicopy.com/\">https://www.emojicopy.com/</a></p>\n</blockquote>\n<p>😈</p>\n<blockquote>\n<p>In Gatsby there is extension for emojis</p>\n</blockquote>\n<pre><code>npm install --save gatsby-remark-emojis\n</code></pre>\n<blockquote>\n<p>This is how they work: TBD</p>\n</blockquote>\n<p>:baloon:\n{: baloon}</p>\n<p>Not working:</p>\n<pre><code class=\"language-md\">:monkey:\n</code></pre>\n<p>:monkey:</p>\n<pre><code class=\"language-md\">🐒\n\n🌠\n</code></pre>\n<p><strong>SHADOW TO IMAGE</strong></p>\n<p>TBC - not working</p>\n<p><img src=\"https://i.imgur.com/VIj56ca.jpg\" title=\"Photo by Spencer Selover from Pexels\">{: .shadow}</p>\n<p><strong>GRAPHS</strong></p>\n<pre><code class=\"language-plantuml\">!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v2.1.0\nskinparam defaultTextAlignment center\n!include ICONURL/common.puml\n!include ICONURL/font-awesome-5/gitlab.puml\n!include ICONURL/font-awesome-5/java.puml\n!include ICONURL/font-awesome-5/rocket.puml\n!include ICONURL/font-awesome/newspaper_o.puml\nFA_NEWSPAPER_O(news,good news!,node) #White {\nFA5_GITLAB(gitlab,GitLab.com,node) #White\nFA5_JAVA(java,PlantUML,node) #White\nFA5_ROCKET(rocket,Integrated,node) #White\n}\ngitlab ..> java\njava ..> rocket\n</code></pre>"}},{"node":{"id":"d8e584e1-66de-50b7-8ff8-42d54e0efd5b","excerpt":"Here we go! Finally the time has come to explore the opportunities of Gaming on Linux. I honestly didn't really think I might be able to get…","rawMarkdownBody":"\r\n![](https://i.imgur.com/jy1aFWj.jpg \"Photo by Lucie Liz from Pexels\")\r\n\r\nHere we go! Finally the time has come to explore the opportunities of Gaming on Linux. I honestly didn't really think I might be able to get it going, but somehow it turned out that Steam has some excellent initiative called Steam Play which allows Linux users to run some games which are originally only supported on Windows. \r\n\r\nLet's see what is necessary to do:\r\n\r\n> First of course you need to have a Steam account and you need to download Steam on your Linux. You can go to Ubuntu Software app and download Steam Installer.\r\n\r\n> Then install WineTricks via console:\r\n```\r\nsudo apt-get install wine winetricks\r\n```\r\n\r\n> Then go to Steam > Settings > Steam Play and check both boxes:\r\n\r\n**1//** Enable Steam Play for supported titles\r\n\r\n**2//** Enable Steam Play for all other titles\r\n\r\n> Then also select Proton 4.11-12 from the option: <code>Run other titles with</code>.\r\n\r\n> Click **OK**\r\n\r\n> Then download and install Age of Empires on your Steam and try to run it! Probably you will get an error but at least you will create a Proton file.\r\n\r\n> Then go to your terminal and paste this code:\r\n```\r\nWINEPREFIX=\"/home/YOUR_PROFILE/.steam/steam/steamapps/compatdata/105450/pfx/\" winetricks mfc42 l3codecx winxp\r\n```\r\n\r\nwhere YOUR_PROFILE is name of your profile on your Linux. In my case it is <code>addania</code>, so my final code is:\r\n```\r\nWINEPREFIX=\"/home/addania/.steam/steam/steamapps/compatdata/105450/pfx/\" winetricks mfc42 l3codecx winxp\r\n```\r\n\r\n> Then try to run Age of Empires again. It hopefully should work. <code>HAPPY GAMING</code> :) \r\n\r\n> Some useful articles:\r\n\r\nhttps://askubuntu.com/questions/306665/can-i-play-windows-steam-games-on-ubuntu\r\n\r\nhttps://itsfoss.com/steam-play/\r\n\r\nhttps://steamcommunity.com/app/105450/discussions/0/3220528325728647640/\r\n\r\nhttps://www.protondb.com/app/105450\r\n\r\n![](https://i.imgur.com/MK6LK5L.jpg \"Photo by John Petalcurin from Pexels\")","frontmatter":{"date":"2020-01-18","title":"Gaming on Linux","category":"knowledge-base"},"fields":{"slug":"/Gaming_On_Linux/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/jy1aFWj.jpg\" title=\"Photo by Lucie Liz from Pexels\"></p>\n<p>Here we go! Finally the time has come to explore the opportunities of Gaming on Linux. I honestly didn't really think I might be able to get it going, but somehow it turned out that Steam has some excellent initiative called Steam Play which allows Linux users to run some games which are originally only supported on Windows. </p>\n<p>Let's see what is necessary to do:</p>\n<blockquote>\n<p>First of course you need to have a Steam account and you need to download Steam on your Linux. You can go to Ubuntu Software app and download Steam Installer.</p>\n</blockquote>\n<blockquote>\n<p>Then install WineTricks via console:</p>\n</blockquote>\n<pre><code>sudo apt-get install wine winetricks\n</code></pre>\n<blockquote>\n<p>Then go to Steam > Settings > Steam Play and check both boxes:</p>\n</blockquote>\n<p><strong>1//</strong> Enable Steam Play for supported titles</p>\n<p><strong>2//</strong> Enable Steam Play for all other titles</p>\n<blockquote>\n<p>Then also select Proton 4.11-12 from the option: <code>Run other titles with</code>.</p>\n</blockquote>\n<blockquote>\n<p>Click <strong>OK</strong></p>\n</blockquote>\n<blockquote>\n<p>Then download and install Age of Empires on your Steam and try to run it! Probably you will get an error but at least you will create a Proton file.</p>\n</blockquote>\n<blockquote>\n<p>Then go to your terminal and paste this code:</p>\n</blockquote>\n<pre><code>WINEPREFIX=\"/home/YOUR_PROFILE/.steam/steam/steamapps/compatdata/105450/pfx/\" winetricks mfc42 l3codecx winxp\n</code></pre>\n<p>where YOUR_PROFILE is name of your profile on your Linux. In my case it is <code>addania</code>, so my final code is:</p>\n<pre><code>WINEPREFIX=\"/home/addania/.steam/steam/steamapps/compatdata/105450/pfx/\" winetricks mfc42 l3codecx winxp\n</code></pre>\n<blockquote>\n<p>Then try to run Age of Empires again. It hopefully should work. <code>HAPPY GAMING</code> :) </p>\n</blockquote>\n<blockquote>\n<p>Some useful articles:</p>\n</blockquote>\n<p><a href=\"https://askubuntu.com/questions/306665/can-i-play-windows-steam-games-on-ubuntu\">https://askubuntu.com/questions/306665/can-i-play-windows-steam-games-on-ubuntu</a></p>\n<p><a href=\"https://itsfoss.com/steam-play/\">https://itsfoss.com/steam-play/</a></p>\n<p><a href=\"https://steamcommunity.com/app/105450/discussions/0/3220528325728647640/\">https://steamcommunity.com/app/105450/discussions/0/3220528325728647640/</a></p>\n<p><a href=\"https://www.protondb.com/app/105450\">https://www.protondb.com/app/105450</a></p>\n<p><img src=\"https://i.imgur.com/MK6LK5L.jpg\" title=\"Photo by John Petalcurin from Pexels\"></p>"}},{"node":{"id":"30d0e79f-fcbd-546f-ab0e-c892d678ce34","excerpt":"Happy New Year and let's learn something right away. How about something cool, I don't know, maybe how to create and download txt file upon…","rawMarkdownBody":"\r\n![](https://i.imgur.com/o5VQqra.jpg \"Photo by Dominika Roseclay from Pexels\")\r\n\r\nHappy New Year and let's learn something right away. How about something cool, I don't know, maybe how to create and download txt file upon a button click :) \r\n\r\n> In order to do so, you will need a following function:\r\n```\r\nfunction download(data, filename, type) {\r\n    var file = new Blob([data], {type: type});\r\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\r\n        window.navigator.msSaveOrOpenBlob(file, filename);\r\n    else { // Others\r\n        var a = document.createElement(\"a\"),\r\n                url = URL.createObjectURL(file);\r\n        a.href = url;\r\n        a.download = filename;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        setTimeout(function() {\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(url);  \r\n        }, 0); \r\n    }\r\n}\r\n```\r\n\r\n> You can then call this function in you Component button-click-handler-function:\r\n```\r\ndownload(data, \"fileName.txt\", \"text/plain\")\r\n```\r\n> **Tip:** imagine your <code>data</code> is array of strings, such as:\r\n```\r\nconst input = [\".#.\",\"#.#\",\".#.\" ]\r\n```\r\n\r\n> If you just print out this file, it will concatenate the elements into one long string. \r\n```\r\n\".#.#.#.#.\"\r\n```\r\n\r\n>What if we wanted each element on a separate line, so that the result is:\r\n```\r\n\".#.\"\r\n\"#.#\"\r\n\".#.\"\r\n```\r\n>In order to do so we need to create a single string from array elements and this string will be sparated by NewLine character <code>\\n</code>\r\n\r\n>We can use a function to create such a string:\r\n```\r\nconst data=input.join(\"\\n\")\r\n```\r\n\r\nReference:\r\n\r\nhttps://stackoverflow.com/questions/13405129/javascript-create-and-save-file\r\n\r\n![](https://i.imgur.com/aF3EWOK.jpg \"Photo by picjumbo.com from Pexels\")","frontmatter":{"date":"2020-01-03","title":"Create and download file in Javascript","category":"knowledge-base"},"fields":{"slug":"/Create_and_Download_File_JS/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/o5VQqra.jpg\" title=\"Photo by Dominika Roseclay from Pexels\"></p>\n<p>Happy New Year and let's learn something right away. How about something cool, I don't know, maybe how to create and download txt file upon a button click :) </p>\n<blockquote>\n<p>In order to do so, you will need a following function:</p>\n</blockquote>\n<pre><code>function download(data, filename, type) {\n    var file = new Blob([data], {type: type});\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\n        window.navigator.msSaveOrOpenBlob(file, filename);\n    else { // Others\n        var a = document.createElement(\"a\"),\n                url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(function() {\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);  \n        }, 0); \n    }\n}\n</code></pre>\n<blockquote>\n<p>You can then call this function in you Component button-click-handler-function:</p>\n</blockquote>\n<pre><code>download(data, \"fileName.txt\", \"text/plain\")\n</code></pre>\n<blockquote>\n<p><strong>Tip:</strong> imagine your <code>data</code> is array of strings, such as:</p>\n</blockquote>\n<pre><code>const input = [\".#.\",\"#.#\",\".#.\" ]\n</code></pre>\n<blockquote>\n<p>If you just print out this file, it will concatenate the elements into one long string. </p>\n</blockquote>\n<pre><code>\".#.#.#.#.\"\n</code></pre>\n<blockquote>\n<p>What if we wanted each element on a separate line, so that the result is:</p>\n</blockquote>\n<pre><code>\".#.\"\n\"#.#\"\n\".#.\"\n</code></pre>\n<blockquote>\n<p>In order to do so we need to create a single string from array elements and this string will be sparated by NewLine character <code>\\n</code></p>\n</blockquote>\n<blockquote>\n<p>We can use a function to create such a string:</p>\n</blockquote>\n<pre><code>const data=input.join(\"\\n\")\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/13405129/javascript-create-and-save-file\">https://stackoverflow.com/questions/13405129/javascript-create-and-save-file</a></p>\n<p><img src=\"https://i.imgur.com/aF3EWOK.jpg\" title=\"Photo by picjumbo.com from Pexels\"></p>"}},{"node":{"id":"5893bdfd-336b-5c10-aef9-689fb4262515","excerpt":"Ubuntu does not have WinRar, as this is a Windows software. In order to be able to open .rar folders and unpack them correctly, we will need…","rawMarkdownBody":"\r\n![](https://i.imgur.com/qlTfidI.jpg \"Photo by Miray Bostancı from Pexels\")\r\n\r\nUbuntu does not have WinRar, as this is a Windows software. In order to be able to open <code>.rar</code> folders and unpack them correctly, we will need to do following 2 commands:\r\n```\r\nsudo apt-get install rar\r\n```\r\n\r\n```\r\nsudo apt-get install unrar\r\n```\r\n\r\nResources:\r\n\r\nhttps://askubuntu.com/questions/147258/winrar-installation-on-ubuntu/147262","frontmatter":{"date":"2019-12-29","title":"Install rar on Linux","category":"knowledge-base"},"fields":{"slug":"/Linux_Install_Rar/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/qlTfidI.jpg\" title=\"Photo by Miray Bostancı from Pexels\"></p>\n<p>Ubuntu does not have WinRar, as this is a Windows software. In order to be able to open <code>.rar</code> folders and unpack them correctly, we will need to do following 2 commands:</p>\n<pre><code>sudo apt-get install rar\n</code></pre>\n<pre><code>sudo apt-get install unrar\n</code></pre>\n<p>Resources:</p>\n<p><a href=\"https://askubuntu.com/questions/147258/winrar-installation-on-ubuntu/147262\">https://askubuntu.com/questions/147258/winrar-installation-on-ubuntu/147262</a></p>"}},{"node":{"id":"b01d31f4-bf87-53b1-97b6-a7c92451d5ed","excerpt":"In order to install Notepad++ we need a snap tool. To check if it is installed, we can type to command line: If it is not installed, we can…","rawMarkdownBody":"\r\n![](https://i.imgur.com/LVjRiAO.png \"Notepad++ logo\")\r\n\r\nIn order to install Notepad++ we need a snap tool. To check if it is installed, we can type to command line:\r\n```\r\nsudo apt list\r\n```\r\n\r\nIf it is not installed, we can install it with following command:\r\n\r\n```\r\nsudo apt-get install snapd snapd-xdg-open\r\n```\r\n\r\nAfterwards we can instal Notepad++ itself:\r\n```\r\nsudo snap install notepad-plus-plus\r\n```\r\n\r\nResources:\r\n\r\nhttps://vitux.com/how-to-install-notepad-on-ubuntu/","frontmatter":{"date":"2019-12-28","title":"Install Notepad++ on Linux","category":"knowledge-base"},"fields":{"slug":"/Linux_Install_Nodepad++/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/LVjRiAO.png\" title=\"Notepad++ logo\"></p>\n<p>In order to install Notepad++ we need a snap tool. To check if it is installed, we can type to command line:</p>\n<pre><code>sudo apt list\n</code></pre>\n<p>If it is not installed, we can install it with following command:</p>\n<pre><code>sudo apt-get install snapd snapd-xdg-open\n</code></pre>\n<p>Afterwards we can instal Notepad++ itself:</p>\n<pre><code>sudo snap install notepad-plus-plus\n</code></pre>\n<p>Resources:</p>\n<p><a href=\"https://vitux.com/how-to-install-notepad-on-ubuntu/\">https://vitux.com/how-to-install-notepad-on-ubuntu/</a></p>"}},{"node":{"id":"8d6eb1a0-7705-54ec-bc41-c0a335be36ca","excerpt":"Starter HTML document starts with  to tell the browser which html version we are using,rather then letting the browser pick one. By the…","rawMarkdownBody":"\r\n![](https://i.imgur.com/37IM7Po.jpg \"Photo by Miguel Á. Padriñán from Pexels\")\r\n\r\n**Starter**\r\n\r\nHTML document starts with <code><!doctype html></code> to tell the browser which html version we are using,rather then letting the browser pick one. By the following code we actually say we want the latest version:\r\n```\r\n<!doctype html>\r\n```\r\n\r\nAfterwards we use html tag and then head and body tags.\r\n```\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n```\r\n<code>head</code> tag includes information about the page itself. It can contain title which will display nam of the page in the tab. \r\n```\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n    <title>My website</title>\r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n```\r\n\r\nIt can contain style sheets imported to website via <code>link</code> tag or javascript imported via <code>script</code> tag:\r\n```\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n    <title>My website</title>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"theme.css\">\r\n    <script src=\"myscripts.js\"></script>\r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n```\r\n<code>body</code> tag includes content of the webpage\r\n\r\n**Empty tags**\r\n\r\nAn empty tag is a one which does not need a closing tag. Examples:\r\n\r\n**1//**\r\n<code>```<br>```</code> tag is a page break and is an empty tag\r\n\r\n```\r\n<br>\r\n```\r\n\r\n**2//**\r\n<code>```<img>```</code> tag to display images\r\n```\r\n<img src=\"myPhoto.jpg\" alt=\"photo\">\r\n```\r\n\r\n**3//**\r\n<code>```<link```</code> tag is an empty tag and allows to import different files to the HTML or create links to other URLs \r\n```\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"theme.css\">\r\n\r\n```\r\n\r\n**Including CSS in HTML**\r\n\r\nWe can use 3 different ways to add styles to our webpage:\r\n\r\n**1//** Add style to individual tag\r\n```\r\n<h1 style=\"color:blue;\">This is a Blue Heading</h1>\r\n```\r\n\r\n**2//**  Add style tags to <code>head</code> tag\r\n```\r\n<head>\r\n  <style>\r\n    p {\r\n\t  color: white;\r\n\t  background-color: black;\r\n    }\r\n  </style>\r\n</head>  \r\n```\r\n\r\n**3//** Include stylesheets in the HTML in the head tag using link tag \r\n```\r\n<link r⁠e⁠l⁠=⁠\"⁠s⁠t⁠y⁠l⁠e⁠s⁠h⁠e⁠e⁠t⁠” href=“style.css”>\r\n```\r\n\r\n<code>rel</code> says what kind of file we want to include\r\n<code>href</code> says the path or URL where the file exists\r\n\r\n**Nested lists**\r\n\r\nWe can create nested list. An example is here:\r\n```\r\nDrinks:\r\n<ul>\r\n  <li>Coffee</li>\r\n  <li>Tea\r\n    <ol>\r\n      <li>Herbal tea</li>\r\n      <li>Black tea</li>\r\n      <li>Green tea</li>\r\n      <li>White tea</li>\r\n    </ol>\r\n  </li>\r\n  <li>Milk</li>\r\n</ul>\r\n```\r\nResult will look like this:\r\n\r\nDrinks:\r\n<ul>\r\n  <li>Coffee</li>\r\n  <li>Tea\r\n    <ol>\r\n      <li>Herbal tea</li>\r\n      <li>Black tea</li>\r\n      <li>Green tea</li>\r\n      <li>White tea</li>\r\n    </ol>\r\n  </li>\r\n  <li>Milk</li>\r\n</ul>","frontmatter":{"date":"2019-12-27","title":"HTML","category":"knowledge-base"},"fields":{"slug":"/HTML/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/37IM7Po.jpg\" title=\"Photo by Miguel Á. Padriñán from Pexels\"></p>\n<p><strong>Starter</strong></p>\n<p>HTML document starts with <code><!doctype html></code> to tell the browser which html version we are using,rather then letting the browser pick one. By the following code we actually say we want the latest version:</p>\n<pre><code>&#x3C;!doctype html>\n</code></pre>\n<p>Afterwards we use html tag and then head and body tags.</p>\n<pre><code>&#x3C;!doctype html>\n&#x3C;html>\n  &#x3C;head>\n  &#x3C;/head>\n  &#x3C;body>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><code>head</code> tag includes information about the page itself. It can contain title which will display nam of the page in the tab. </p>\n<pre><code>&#x3C;!doctype html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;title>My website&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>It can contain style sheets imported to website via <code>link</code> tag or javascript imported via <code>script</code> tag:</p>\n<pre><code>&#x3C;!doctype html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;title>My website&#x3C;/title>\n    &#x3C;link rel=\"stylesheet\" type=\"text/css\" href=\"theme.css\">\n    &#x3C;script src=\"myscripts.js\">&#x3C;/script>\n  &#x3C;/head>\n  &#x3C;body>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><code>body</code> tag includes content of the webpage</p>\n<p><strong>Empty tags</strong></p>\n<p>An empty tag is a one which does not need a closing tag. Examples:</p>\n<p><strong>1//</strong>\n<code><code>&#x3C;br></code></code> tag is a page break and is an empty tag</p>\n<pre><code>&#x3C;br>\n</code></pre>\n<p><strong>2//</strong>\n<code><code>&#x3C;img></code></code> tag to display images</p>\n<pre><code>&#x3C;img src=\"myPhoto.jpg\" alt=\"photo\">\n</code></pre>\n<p><strong>3//</strong>\n<code><code>&#x3C;link</code></code> tag is an empty tag and allows to import different files to the HTML or create links to other URLs </p>\n<pre><code>&#x3C;link rel=\"stylesheet\" type=\"text/css\" href=\"theme.css\">\n</code></pre>\n<p><strong>Including CSS in HTML</strong></p>\n<p>We can use 3 different ways to add styles to our webpage:</p>\n<p><strong>1//</strong> Add style to individual tag</p>\n<pre><code>&#x3C;h1 style=\"color:blue;\">This is a Blue Heading&#x3C;/h1>\n</code></pre>\n<p><strong>2//</strong>  Add style tags to <code>head</code> tag</p>\n<pre><code>&#x3C;head>\n  &#x3C;style>\n    p {\n      color: white;\n      background-color: black;\n    }\n  &#x3C;/style>\n&#x3C;/head>  \n</code></pre>\n<p><strong>3//</strong> Include stylesheets in the HTML in the head tag using link tag </p>\n<pre><code>&#x3C;link r⁠e⁠l⁠=⁠\"⁠s⁠t⁠y⁠l⁠e⁠s⁠h⁠e⁠e⁠t⁠” href=“style.css”>\n</code></pre>\n<p><code>rel</code> says what kind of file we want to include\n<code>href</code> says the path or URL where the file exists</p>\n<p><strong>Nested lists</strong></p>\n<p>We can create nested list. An example is here:</p>\n<pre><code>Drinks:\n&#x3C;ul>\n  &#x3C;li>Coffee&#x3C;/li>\n  &#x3C;li>Tea\n    &#x3C;ol>\n      &#x3C;li>Herbal tea&#x3C;/li>\n      &#x3C;li>Black tea&#x3C;/li>\n      &#x3C;li>Green tea&#x3C;/li>\n      &#x3C;li>White tea&#x3C;/li>\n    &#x3C;/ol>\n  &#x3C;/li>\n  &#x3C;li>Milk&#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<p>Result will look like this:</p>\n<p>Drinks:</p>\n<ul>\n  <li>Coffee</li>\n  <li>Tea\n    <ol>\n      <li>Herbal tea</li>\n      <li>Black tea</li>\n      <li>Green tea</li>\n      <li>White tea</li>\n    </ol>\n  </li>\n  <li>Milk</li>\n</ul>"}},{"node":{"id":"2785c6f5-ee96-583c-928b-eaf8957da3fc","excerpt":"I will miss you! Trully. All the code adventures we have been through together. Those code advent loop incention craziness we did together…","rawMarkdownBody":"\r\n![](https://i.imgur.com/hw5qopR.jpg \"Photo by Helena Lopes from Pexels\")\r\n\r\nI will miss you! Trully. All the code adventures we have been through together. Those code advent loop incention craziness we did together :) I shall never forget you and we WILL meet again. But the new era of functional programming came and it is time to explore new possibilities of xmap, filter and reduce. They say it is more elegant, more sexy and more readable with map, filter and reduce. I would argue against it... but I also want to learn new concepts and hone my skills. So here we are, let's explore unknown together.\r\n\r\n**MAP**\r\n\r\nMap can be used on an array to iterate over EVERY SINGLE element of it. And here we go already, right from the start, drawback of map compared to for loops is that map cannot be broken out of, whereas in loops we can use simple <code>break;</code> to get out of it (just saying ;) )\r\n\r\nNevertheless, map will need an array to loop over and then a function. This function will be performed over every single element of the array and it will return A NEW array where each element will be whatever the function returns\r\n\r\nExample:\r\n```\r\nconst array1 = [1, 4, 9, 16];\r\n// pass a function to map\r\nconst map1 = array1.map(x => x * 2);\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\nThis code can be re-written to make it more clear:\r\n```\r\nconst array1 = [1, 4, 9, 16];\r\nconst myFunction = (x) => {\r\n  const double = x*2;\r\n  return double\r\n}\r\nconst map1 = array1.map(myFunction);\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\n\r\nYet another way how to write this code:\r\n```\r\nconst array1 = [1, 4, 9, 16];\r\n// pass a function to map\r\nconst map1 = array1.map(function(x){ return x * 2});\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\n\r\nCompare especially **EXPLICIT RETURN**:\r\n```\r\nconst map1 = array1.map(function(x){ return x * 2});\r\n```\r\nwith this **IMPLICIT RETURN**:\r\n```\r\nconst map1 = array1.map(x => x * 2);\r\n```\r\n\r\nHere we can see more clearly that map receives a FUNCTION as input. This function can be either declared somewhere else (second example) or it can be anonymous function directly in between of the .map brackets (first example).\r\n\r\nIt is also more clear that the body of the function can be literally anything, any calculation, but what matters is what is the return of that function. Because the return of the function will define what the new element of the new array will be.\r\n\r\nSome code re-factoring from for loops to using map:\r\n\r\nold:\r\n```\r\nfunction formatImpressions(input) {\r\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\r\n  for (let row = 0; row < input.length; row++) {\r\n    if (!input[row].Impressions) {\r\n      input[row].Impressions = 0;\r\n    }\r\n    if (!input[row].Clicks) {\r\n      input[row].Clicks = 0;\r\n    }\r\n  }\r\n  return input;\r\n}\r\n```\r\n\r\nnew:\r\n```\r\nexport const formatImpressions = input => {\r\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\r\n\r\n  const formatNumbers = row => {\r\n    if (!row.Impressions) {\r\n      row.Impressions = 0;\r\n    }\r\n    if (!row.Clicks) {\r\n      row.Clicks = 0;\r\n    }\r\n    return row;\r\n  };\r\n  const output = input.map(formatNumbers);\r\n  return output;\r\n};\r\n```\r\n\r\nold:\r\n```\r\nfunction extractDate(input) {\r\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\r\n  const dataWithDate = [];\r\n  for (let row = 0; row < input.length; row++) {\r\n    const entry = { ...input[row] };\r\n    const oldDate = input[row].Date;\r\n\r\n    const year = oldDate.slice(6, 10);\r\n    const month = oldDate.slice(3, 5);\r\n    const day = oldDate.slice(0, 2);\r\n    const newDate = year + \"-\" + month + \"-\" + day;\r\n    const dateFormatted = new Date(newDate);\r\n    entry.Date = dateFormatted;\r\n    dataWithDate.push(entry);\r\n  }\r\n  return dataWithDate;\r\n}\r\n```\r\n\r\nnew:\r\n```\r\nexport const extractDate = input => {\r\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\r\n  const convertDate = row => {\r\n    const entry = { ...row };\r\n    const oldDate = row.Date;\r\n    const year = oldDate.slice(6, 10);\r\n    const month = oldDate.slice(3, 5);\r\n    const day = oldDate.slice(0, 2);\r\n    const newDate = year + \"-\" + month + \"-\" + day;\r\n    const dateFormatted = new Date(newDate);\r\n    entry.Date = dateFormatted;\r\n    return entry;\r\n  };\r\n  const dataWithDate = input.map(convertDate);\r\n  return dataWithDate;\r\n};\r\n```\r\n\r\nold:\r\n```\r\nimport _ from \"lodash\";\r\nfunction getMetrics(inputData, inputColumns) {\r\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\r\n  // Outputs array of column names which holds numeric values.\r\n  const output = [];\r\n  for (let item = 0; item < inputColumns.length; item++) {\r\n    const col = inputColumns[item];\r\n    if (_.isNumber(inputData[col])) {\r\n      output.push(col);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n```\r\n\r\nnew:\r\n```\r\nexport const getMetrics = (inputData, inputColumns) => {\r\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\r\n  // Outputs array of column names which holds numeric values.\r\n  const output = inputColumns.filter(col => typeof inputData[col] === \"number\");\r\n  return output;\r\n};\r\n```\r\n\r\nold:\r\n```\r\nimport _ from \"lodash\";\r\nfunction getDimensions(inputData, inputColumns) {\r\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\r\n  // Outputs array of column names which holds string values (excluding date formats).\r\n  const output = [];\r\n  for (let item = 0; item < inputColumns.length; item++) {\r\n    const col = inputColumns[item];\r\n    if (_.isString(inputData[col])) {\r\n      output.push(col);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n```\r\n\r\nnew:\r\n```\r\nexport const getDimensions = (inputData, inputColumns) => {\r\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\r\n  // Outputs array of column names which holds string values (excluding date formats).\r\n  const output = inputColumns.filter(col => typeof inputData[col] === \"string\");\r\n  return output;\r\n};\r\n\r\n```\r\n\r\nold:\r\n```\r\nconst moment = require(\"moment\");\r\nfunction formatDate(input) {\r\n  // Receives an array of objects as input and formats date entries into a \"DD. MMM\" format. Outputs data as \"dataWithDate\".\r\n  const formattedDateArray = [];\r\n  for (let row = 0; row < input.length; row++) {\r\n    const entry = { ...input[row] };\r\n    const oldDate = input[row].Date;\r\n    const dateFormatted = moment(oldDate, \"DD.MM.YYYY\").format(\"DD. MMM\");\r\n    entry.Date = dateFormatted;\r\n    formattedDateArray.push(entry);\r\n  }\r\n  return formattedDateArray;\r\n}\r\n```\r\n\r\nnew\r\n```\r\nconst moment = require(\"moment\");\r\nexport const formatDate = input => {\r\n  // Receives an array of objects as input and formats date entries into a \"DD. MMM\" format. Outputs data as \"dataWithDate\".\r\n\r\n  const convertDate = row => {\r\n    const entry = { ...row };\r\n    const oldDate = row.Date;\r\n    const dateFormatted = moment(oldDate, \"DD.MM.YYYY\").format(\"DD. MMM\");\r\n    entry.Date = dateFormatted;\r\n    return entry;\r\n  };\r\n  const formattedDateArray = input.map(convertDate);\r\n  return formattedDateArray;\r\n};\r\n```\r\n\r\n**FOR EACH**\r\nFor each is very similar to map. It iterates through each item of and array and performs a function over it. BUT it DOES NOT returns a NEW array. The forEach() method doesn’t actually return anything (undefined). It simply calls a provided function on each element in your array. This callback is allowed to mutate the calling array.\r\n```\r\nconst books = [\"The Expanse\", \"Lord Of The Rings\", \"Harry Potter\"];\r\nbooks.forEach(function(book, i){\r\n    console.log(book);\r\n});\r\n\r\n//output in console.log:\r\nThe Expanse\r\nVM761:2 Lord Of The Rings\r\nVM761:2 Harry Potter\r\n```\r\n\r\nNotice how books.forEach is NOT assignd to ANY const.\r\n\r\nWe can use forEach also to create a new array, but we would need to create it MANUALLY\r\n\r\n```\r\nconst items = ['item1', 'item2', 'item3'];\r\nconst copy = [];\r\nitems.forEach(function(item){\r\n  copy.push(item);\r\n});\r\n```\r\n\r\n**FILTER**\r\n\r\nFilter iterates over each element of an array and ONLY returns those elements, which fulfill a condition which is given within the function.\r\n```\r\nconst words = ['react', 'javascript', 'html', 'css'];\r\nconst result = words.filter(word => word.length > 5);\r\n// result: [\"javascript\"]\r\n\r\nconst result2 = words.filter(word => word.length < 5);\r\n// result2: ['html', 'css'];\r\n```\r\n\r\nFilter can be re-factored in a way that we declare a function:\r\n```\r\nconst words = ['react', 'javascript', 'html', 'css'];\r\nconst isLonger = (word) => {\r\n  return word.length > 5;\r\n}\r\nconst result = words.filter(isLonger);\r\n// result: [\"javascript\"]\r\n```\r\n\r\n**REDUCE**\r\n\r\nReduce also iterates over every single element of an array and it also has an accumulator which is calculating for example SUM of all items. Result of reduce can be a single number (it can also be an array,  but for basic use it will return one value).\r\n\r\nReduce receives 2 parameters, one is a function which will be performed over each element and second (optional) parameter is the initial value from which we start calculating.\r\n\r\nReduce returns a new value as a result of calculations\r\n\r\n```\r\nconst array1 = [1, 2, 3, 4];\r\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n// 1 + 2 + 3 + 4\r\nconst result = array1.reduce(reducer));\r\n// result: 10\r\n\r\n// 5 + 1 + 2 + 3 + 4\r\nconst result = array1.reduce(reducer, 5));\r\n// result: 15\r\n```\r\n\r\nold:\r\n```\r\nimport _ from \"lodash\";\r\nfunction calculateAggregates(array) {\r\n  // Receives an array of data as input and outputs an array of data aggregated per date.\r\n  // First element of the output array is array of aggregated impressions.\r\n  // Second element of the output array is array of aggregated clicks.\r\n  // Third element of the output array is array of unique dates.\r\n  let groupByDate = _.groupBy(array, \"Date\");\r\n  let uniqueDates = _.keys(groupByDate);\r\n  let impressionsArray = [];\r\n  let clicksArray = [];\r\n\r\n  for (let dayEntry = 0; dayEntry < uniqueDates.length; dayEntry++) {\r\n    let totalImpressions = 0;\r\n    let totalClicks = 0;\r\n\r\n    for (\r\n      let dataRow = 0;\r\n      dataRow < groupByDate[uniqueDates[dayEntry]].length;\r\n      dataRow++\r\n    ) {\r\n      totalImpressions =\r\n        totalImpressions +\r\n        groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\r\n      totalClicks =\r\n        totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\r\n    }\r\n    impressionsArray.push(totalImpressions);\r\n    clicksArray.push(totalClicks);\r\n  }\r\n  return [impressionsArray, clicksArray, uniqueDates];\r\n}\r\n\r\n```\r\n\r\nnew\r\n```\r\nimport _ from \"lodash\";\r\n\r\nexport const calculateAggregates = array => {\r\n  // Receives an array of data as input and outputs an array of data aggregated per date.\r\n  // First element of the output array is array of aggregated impressions.\r\n  // Second element of the output array is array of aggregated clicks.\r\n  // Third element of the output array is array of unique dates.\r\n  const groupByDate = _.groupBy(array, \"Date\");\r\n  const uniqueDates = Object.keys(groupByDate);\r\n  const impressionsArray = uniqueDates.map(item => {\r\n    const sumImp = groupByDate[item].reduce((acc, obj) => {\r\n      return acc + obj.Impressions;\r\n    }, 0);\r\n    return sumImp;\r\n  });\r\n  const clicksArray = uniqueDates.map(item => {\r\n    const sumClick = groupByDate[item].reduce((acc, obj) => {\r\n      return acc + obj.Clicks;\r\n    }, 0);\r\n    return sumClick;\r\n  });\r\n  return [impressionsArray, clicksArray, uniqueDates];\r\n};\r\n\r\n```\r\n\r\n**FILTER AND MAP COMBO **\r\nPowerful way of combining filter and map to get for example a list of guys which are SINGLE :) :) :) very useful (muhahahahaaa)\r\n```\r\nconst guys = [\r\n  {name: 'Danny', single: true},\r\n  {name: 'Calvin', single: true},\r\n  {name: 'Mike', single: true},\r\n  {name: 'Jeff', single: false}\r\n];\r\n\r\nconst isSingle = person => person.single;\r\nconst getName = person => person.name;\r\nconst preys = guys.filter(isSingle).map(getName);\r\nconsole.log(preys) // [\"Danny\", \"Calvin\", \"Mike\"]\r\n\r\n```\r\n\r\nReference:\r\n\r\nhttps://www.codereadability.com/coding-without-loops/\r\n\r\nhttps://kuanhsuh.github.io/JS-functional-programming.html\r\n\r\n![](https://i.imgur.com/fIyDFmN.jpg \"Photo by Pixabay from Pexels\")","frontmatter":{"date":"2019-12-26","title":"Farewell my Good Old Best Buddies For Loops","category":"knowledge-base"},"fields":{"slug":"/Farewell_my_Good_Old_Best_Friends_For_Loops/"},"timeToRead":8,"html":"<p><img src=\"https://i.imgur.com/hw5qopR.jpg\" title=\"Photo by Helena Lopes from Pexels\"></p>\n<p>I will miss you! Trully. All the code adventures we have been through together. Those code advent loop incention craziness we did together :) I shall never forget you and we WILL meet again. But the new era of functional programming came and it is time to explore new possibilities of xmap, filter and reduce. They say it is more elegant, more sexy and more readable with map, filter and reduce. I would argue against it... but I also want to learn new concepts and hone my skills. So here we are, let's explore unknown together.</p>\n<p><strong>MAP</strong></p>\n<p>Map can be used on an array to iterate over EVERY SINGLE element of it. And here we go already, right from the start, drawback of map compared to for loops is that map cannot be broken out of, whereas in loops we can use simple <code>break;</code> to get out of it (just saying ;) )</p>\n<p>Nevertheless, map will need an array to loop over and then a function. This function will be performed over every single element of the array and it will return A NEW array where each element will be whatever the function returns</p>\n<p>Example:</p>\n<pre><code>const array1 = [1, 4, 9, 16];\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p>This code can be re-written to make it more clear:</p>\n<pre><code>const array1 = [1, 4, 9, 16];\nconst myFunction = (x) => {\n  const double = x*2;\n  return double\n}\nconst map1 = array1.map(myFunction);\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p>Yet another way how to write this code:</p>\n<pre><code>const array1 = [1, 4, 9, 16];\n// pass a function to map\nconst map1 = array1.map(function(x){ return x * 2});\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p>Compare especially <strong>EXPLICIT RETURN</strong>:</p>\n<pre><code>const map1 = array1.map(function(x){ return x * 2});\n</code></pre>\n<p>with this <strong>IMPLICIT RETURN</strong>:</p>\n<pre><code>const map1 = array1.map(x => x * 2);\n</code></pre>\n<p>Here we can see more clearly that map receives a FUNCTION as input. This function can be either declared somewhere else (second example) or it can be anonymous function directly in between of the .map brackets (first example).</p>\n<p>It is also more clear that the body of the function can be literally anything, any calculation, but what matters is what is the return of that function. Because the return of the function will define what the new element of the new array will be.</p>\n<p>Some code re-factoring from for loops to using map:</p>\n<p>old:</p>\n<pre><code>function formatImpressions(input) {\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\n  for (let row = 0; row &#x3C; input.length; row++) {\n    if (!input[row].Impressions) {\n      input[row].Impressions = 0;\n    }\n    if (!input[row].Clicks) {\n      input[row].Clicks = 0;\n    }\n  }\n  return input;\n}\n</code></pre>\n<p>new:</p>\n<pre><code>export const formatImpressions = input => {\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\n\n  const formatNumbers = row => {\n    if (!row.Impressions) {\n      row.Impressions = 0;\n    }\n    if (!row.Clicks) {\n      row.Clicks = 0;\n    }\n    return row;\n  };\n  const output = input.map(formatNumbers);\n  return output;\n};\n</code></pre>\n<p>old:</p>\n<pre><code>function extractDate(input) {\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\n  const dataWithDate = [];\n  for (let row = 0; row &#x3C; input.length; row++) {\n    const entry = { ...input[row] };\n    const oldDate = input[row].Date;\n\n    const year = oldDate.slice(6, 10);\n    const month = oldDate.slice(3, 5);\n    const day = oldDate.slice(0, 2);\n    const newDate = year + \"-\" + month + \"-\" + day;\n    const dateFormatted = new Date(newDate);\n    entry.Date = dateFormatted;\n    dataWithDate.push(entry);\n  }\n  return dataWithDate;\n}\n</code></pre>\n<p>new:</p>\n<pre><code>export const extractDate = input => {\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\n  const convertDate = row => {\n    const entry = { ...row };\n    const oldDate = row.Date;\n    const year = oldDate.slice(6, 10);\n    const month = oldDate.slice(3, 5);\n    const day = oldDate.slice(0, 2);\n    const newDate = year + \"-\" + month + \"-\" + day;\n    const dateFormatted = new Date(newDate);\n    entry.Date = dateFormatted;\n    return entry;\n  };\n  const dataWithDate = input.map(convertDate);\n  return dataWithDate;\n};\n</code></pre>\n<p>old:</p>\n<pre><code>import _ from \"lodash\";\nfunction getMetrics(inputData, inputColumns) {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds numeric values.\n  const output = [];\n  for (let item = 0; item &#x3C; inputColumns.length; item++) {\n    const col = inputColumns[item];\n    if (_.isNumber(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n</code></pre>\n<p>new:</p>\n<pre><code>export const getMetrics = (inputData, inputColumns) => {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds numeric values.\n  const output = inputColumns.filter(col => typeof inputData[col] === \"number\");\n  return output;\n};\n</code></pre>\n<p>old:</p>\n<pre><code>import _ from \"lodash\";\nfunction getDimensions(inputData, inputColumns) {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds string values (excluding date formats).\n  const output = [];\n  for (let item = 0; item &#x3C; inputColumns.length; item++) {\n    const col = inputColumns[item];\n    if (_.isString(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n</code></pre>\n<p>new:</p>\n<pre><code>export const getDimensions = (inputData, inputColumns) => {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds string values (excluding date formats).\n  const output = inputColumns.filter(col => typeof inputData[col] === \"string\");\n  return output;\n};\n</code></pre>\n<p>old:</p>\n<pre><code>const moment = require(\"moment\");\nfunction formatDate(input) {\n  // Receives an array of objects as input and formats date entries into a \"DD. MMM\" format. Outputs data as \"dataWithDate\".\n  const formattedDateArray = [];\n  for (let row = 0; row &#x3C; input.length; row++) {\n    const entry = { ...input[row] };\n    const oldDate = input[row].Date;\n    const dateFormatted = moment(oldDate, \"DD.MM.YYYY\").format(\"DD. MMM\");\n    entry.Date = dateFormatted;\n    formattedDateArray.push(entry);\n  }\n  return formattedDateArray;\n}\n</code></pre>\n<p>new</p>\n<pre><code>const moment = require(\"moment\");\nexport const formatDate = input => {\n  // Receives an array of objects as input and formats date entries into a \"DD. MMM\" format. Outputs data as \"dataWithDate\".\n\n  const convertDate = row => {\n    const entry = { ...row };\n    const oldDate = row.Date;\n    const dateFormatted = moment(oldDate, \"DD.MM.YYYY\").format(\"DD. MMM\");\n    entry.Date = dateFormatted;\n    return entry;\n  };\n  const formattedDateArray = input.map(convertDate);\n  return formattedDateArray;\n};\n</code></pre>\n<p><strong>FOR EACH</strong>\nFor each is very similar to map. It iterates through each item of and array and performs a function over it. BUT it DOES NOT returns a NEW array. The forEach() method doesn’t actually return anything (undefined). It simply calls a provided function on each element in your array. This callback is allowed to mutate the calling array.</p>\n<pre><code>const books = [\"The Expanse\", \"Lord Of The Rings\", \"Harry Potter\"];\nbooks.forEach(function(book, i){\n    console.log(book);\n});\n\n//output in console.log:\nThe Expanse\nVM761:2 Lord Of The Rings\nVM761:2 Harry Potter\n</code></pre>\n<p>Notice how books.forEach is NOT assignd to ANY const.</p>\n<p>We can use forEach also to create a new array, but we would need to create it MANUALLY</p>\n<pre><code>const items = ['item1', 'item2', 'item3'];\nconst copy = [];\nitems.forEach(function(item){\n  copy.push(item);\n});\n</code></pre>\n<p><strong>FILTER</strong></p>\n<p>Filter iterates over each element of an array and ONLY returns those elements, which fulfill a condition which is given within the function.</p>\n<pre><code>const words = ['react', 'javascript', 'html', 'css'];\nconst result = words.filter(word => word.length > 5);\n// result: [\"javascript\"]\n\nconst result2 = words.filter(word => word.length &#x3C; 5);\n// result2: ['html', 'css'];\n</code></pre>\n<p>Filter can be re-factored in a way that we declare a function:</p>\n<pre><code>const words = ['react', 'javascript', 'html', 'css'];\nconst isLonger = (word) => {\n  return word.length > 5;\n}\nconst result = words.filter(isLonger);\n// result: [\"javascript\"]\n</code></pre>\n<p><strong>REDUCE</strong></p>\n<p>Reduce also iterates over every single element of an array and it also has an accumulator which is calculating for example SUM of all items. Result of reduce can be a single number (it can also be an array,  but for basic use it will return one value).</p>\n<p>Reduce receives 2 parameters, one is a function which will be performed over each element and second (optional) parameter is the initial value from which we start calculating.</p>\n<p>Reduce returns a new value as a result of calculations</p>\n<pre><code>const array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n// 1 + 2 + 3 + 4\nconst result = array1.reduce(reducer));\n// result: 10\n\n// 5 + 1 + 2 + 3 + 4\nconst result = array1.reduce(reducer, 5));\n// result: 15\n</code></pre>\n<p>old:</p>\n<pre><code>import _ from \"lodash\";\nfunction calculateAggregates(array) {\n  // Receives an array of data as input and outputs an array of data aggregated per date.\n  // First element of the output array is array of aggregated impressions.\n  // Second element of the output array is array of aggregated clicks.\n  // Third element of the output array is array of unique dates.\n  let groupByDate = _.groupBy(array, \"Date\");\n  let uniqueDates = _.keys(groupByDate);\n  let impressionsArray = [];\n  let clicksArray = [];\n\n  for (let dayEntry = 0; dayEntry &#x3C; uniqueDates.length; dayEntry++) {\n    let totalImpressions = 0;\n    let totalClicks = 0;\n\n    for (\n      let dataRow = 0;\n      dataRow &#x3C; groupByDate[uniqueDates[dayEntry]].length;\n      dataRow++\n    ) {\n      totalImpressions =\n        totalImpressions +\n        groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\n      totalClicks =\n        totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\n    }\n    impressionsArray.push(totalImpressions);\n    clicksArray.push(totalClicks);\n  }\n  return [impressionsArray, clicksArray, uniqueDates];\n}\n</code></pre>\n<p>new</p>\n<pre><code>import _ from \"lodash\";\n\nexport const calculateAggregates = array => {\n  // Receives an array of data as input and outputs an array of data aggregated per date.\n  // First element of the output array is array of aggregated impressions.\n  // Second element of the output array is array of aggregated clicks.\n  // Third element of the output array is array of unique dates.\n  const groupByDate = _.groupBy(array, \"Date\");\n  const uniqueDates = Object.keys(groupByDate);\n  const impressionsArray = uniqueDates.map(item => {\n    const sumImp = groupByDate[item].reduce((acc, obj) => {\n      return acc + obj.Impressions;\n    }, 0);\n    return sumImp;\n  });\n  const clicksArray = uniqueDates.map(item => {\n    const sumClick = groupByDate[item].reduce((acc, obj) => {\n      return acc + obj.Clicks;\n    }, 0);\n    return sumClick;\n  });\n  return [impressionsArray, clicksArray, uniqueDates];\n};\n</code></pre>\n<p>**FILTER AND MAP COMBO **\nPowerful way of combining filter and map to get for example a list of guys which are SINGLE :) :) :) very useful (muhahahahaaa)</p>\n<pre><code>const guys = [\n  {name: 'Danny', single: true},\n  {name: 'Calvin', single: true},\n  {name: 'Mike', single: true},\n  {name: 'Jeff', single: false}\n];\n\nconst isSingle = person => person.single;\nconst getName = person => person.name;\nconst preys = guys.filter(isSingle).map(getName);\nconsole.log(preys) // [\"Danny\", \"Calvin\", \"Mike\"]\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://www.codereadability.com/coding-without-loops/\">https://www.codereadability.com/coding-without-loops/</a></p>\n<p><a href=\"https://kuanhsuh.github.io/JS-functional-programming.html\">https://kuanhsuh.github.io/JS-functional-programming.html</a></p>\n<p><img src=\"https://i.imgur.com/fIyDFmN.jpg\" title=\"Photo by Pixabay from Pexels\"></p>"}},{"node":{"id":"4de6df95-bcb0-5c7b-9392-bdb3c484c374","excerpt":"WORK IN PROGRESS The Problem JavaScript has two visually similar, yet very different, ways to test equality. You can test equality with…","rawMarkdownBody":"\r\n![](https://i.imgur.com/hPA457A.jpg \"Photo by Ivan Bertolazzi from Pexels\")\r\n\r\n\r\nWORK IN PROGRESS\r\n\r\nThe Problem\r\n\r\nJavaScript has two visually similar, yet very different, ways to test equality. You can test equality with == or ===. Here are the differences:\r\n\r\nTriple Equals\r\n\r\nWhen using triple equals === in JavaScript, we are testing for strict equality. This means both the type and the value we are comparing have to be the same.\r\nLets look at a couple examples of strict equality.\r\nIn this first example we’re comparing the number 5 with the number 5. As expected, true is returned. Both are numbers, and both share the same value of 5.\r\n5 === 5\r\n// true\r\nWith this in mind, we can look at two more examples that will return true:\r\n'hello world' === 'hello world'\r\n// true (Both Strings, equal values)\r\ntrue === true\r\n// true (Both Booleans, equal values)\r\nAwesome. Now lets take a look at some examples that will return false:\r\nIn this example we’ll compare the number 77 to the string value of 77. This means our operands will have the same value, but a different type. This will return false\r\n77 === '77'\r\n// false (Number v. String)\r\nHere are two additional examples:\r\n'cat' === 'dog'\r\n// false (Both are Strings, but have different values)\r\nfalse === 0\r\n// false (Different type and different value)\r\nAwesome! Again, the key takeaway for triple (strict) equality is that both the type and the value we are comparing have to be the same.\r\n\r\nDouble equals\r\n\r\nWhen using double equals in JavaScript we are testing for loose equality. Double equals also performs type coercion.\r\nType coercion means that two values are compared only after attempting to convert them into a common type.\r\nAn example will illustrate this. Recall earlier when we tested the following with strict equality:\r\n77 === '77'\r\n// false (Number v. String)\r\n77 does not strictly equal '77' because they have different types. However, if we were to test these values with loose equality…\r\n77 == '77'\r\n// true\r\nYou can see we get true. That because of type coercion. JavaScript will actually try to convert our values into a like type. In this case, it succeeds. The string value of '77' can easily be converted into the number value of 77. Since 77 equals 77, we get our answer of true.\r\nLets look at one more example.\r\nRecall earlier when we tested with strict equality if false equals 0:\r\nfalse === 0\r\n// false (Different type and different value)\r\nThis is obviously false. However, if we run the same equation with loose equality…\r\nfalse == 0\r\n// true\r\nWe get true? Why is this? It has to do with falsy values in JavaScript. We’ll explore this concept in the next section.\r\n\r\nFalsy Values\r\n\r\nOkay, so why does false == 0 in JavaScript? It’s complex, but it’s because in JavaScript 0 is a falsy value.\r\nType coercion will actually convert our zero into a false boolean, then false is equal to false.\r\nThere are only six falsy values in JavaScript you should be aware of:\r\nfalse — boolean false\r\n0 — number zero\r\n“” — empty string\r\nnull\r\nundefined\r\nNaN — Not A Number\r\nFalsy Value Comparison\r\nThe following you can consider to be ‘rules’ of falsy values. These are things you should ultimately memorize if you will be working with JavaScript often.\r\nfalse, 0, and \"\"\r\nWhen comparing any of our first three falsy values with loose equality, they will always be equal! That’s because these values will all coerce into a false boolean.\r\nfalse == 0\r\n// true\r\n0 == \"\"\r\n// true\r\n\"\" == false\r\n// true\r\n2. null and undefined\r\nWhen comparing null and undefined, they are only equal to themselves and each other:\r\nnull == null\r\n// true\r\nundefined == undefined\r\n// true\r\nnull == undefined\r\n// true\r\nIf you try to compare null to any other value, it will return false.\r\n3. NaN\r\nLastly, NaN is not equivalent to anything. Even cooler, it’s not even itself!\r\nNaN == null\r\n// false\r\nNaN == undefined\r\n// false\r\nNaN == NaN\r\n// false\r\n![](https://i.imgur.com/VsPEaKZ.jpg \"Photo by Dominika Roseclay from Pexels\")\r\n\r\nKey Takeaways\r\nAs you’ve seen, type coercion can get a bit crazy in JS. Unless you’re very familiar with JavaScript, loose equality can lead to more headaches than it’s worth. Memorizing the six falsy values and the rules associated with them can go a long way towards understanding loose equality.\r\nTriple Equals is superior to double equals. Whenever possible, you should use triple equals to test equality. By testing the type and value you can be sure that you are always executing a true equality test.\r\nReference:\r\n\r\nhttps://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a\r\n\r\n![](https://i.imgur.com/fIyDFmN.jpg \"Photo by Pixabay from Pexels\")","frontmatter":{"date":"2019-12-25","title":"Tripple vs Double Equality","category":"knowledge-base"},"fields":{"slug":"/Tripple_vs_Double_Equality/"},"timeToRead":3,"html":"<p><img src=\"https://i.imgur.com/hPA457A.jpg\" title=\"Photo by Ivan Bertolazzi from Pexels\"></p>\n<p>WORK IN PROGRESS</p>\n<p>The Problem</p>\n<p>JavaScript has two visually similar, yet very different, ways to test equality. You can test equality with == or ===. Here are the differences:</p>\n<p>Triple Equals</p>\n<p>When using triple equals === in JavaScript, we are testing for strict equality. This means both the type and the value we are comparing have to be the same.\nLets look at a couple examples of strict equality.\nIn this first example we’re comparing the number 5 with the number 5. As expected, true is returned. Both are numbers, and both share the same value of 5.\n5 === 5\n// true\nWith this in mind, we can look at two more examples that will return true:\n'hello world' === 'hello world'\n// true (Both Strings, equal values)\ntrue === true\n// true (Both Booleans, equal values)\nAwesome. Now lets take a look at some examples that will return false:\nIn this example we’ll compare the number 77 to the string value of 77. This means our operands will have the same value, but a different type. This will return false\n77 === '77'\n// false (Number v. String)\nHere are two additional examples:\n'cat' === 'dog'\n// false (Both are Strings, but have different values)\nfalse === 0\n// false (Different type and different value)\nAwesome! Again, the key takeaway for triple (strict) equality is that both the type and the value we are comparing have to be the same.</p>\n<p>Double equals</p>\n<p>When using double equals in JavaScript we are testing for loose equality. Double equals also performs type coercion.\nType coercion means that two values are compared only after attempting to convert them into a common type.\nAn example will illustrate this. Recall earlier when we tested the following with strict equality:\n77 === '77'\n// false (Number v. String)\n77 does not strictly equal '77' because they have different types. However, if we were to test these values with loose equality…\n77 == '77'\n// true\nYou can see we get true. That because of type coercion. JavaScript will actually try to convert our values into a like type. In this case, it succeeds. The string value of '77' can easily be converted into the number value of 77. Since 77 equals 77, we get our answer of true.\nLets look at one more example.\nRecall earlier when we tested with strict equality if false equals 0:\nfalse === 0\n// false (Different type and different value)\nThis is obviously false. However, if we run the same equation with loose equality…\nfalse == 0\n// true\nWe get true? Why is this? It has to do with falsy values in JavaScript. We’ll explore this concept in the next section.</p>\n<p>Falsy Values</p>\n<p>Okay, so why does false == 0 in JavaScript? It’s complex, but it’s because in JavaScript 0 is a falsy value.\nType coercion will actually convert our zero into a false boolean, then false is equal to false.\nThere are only six falsy values in JavaScript you should be aware of:\nfalse — boolean false\n0 — number zero\n“” — empty string\nnull\nundefined\nNaN — Not A Number\nFalsy Value Comparison\nThe following you can consider to be ‘rules’ of falsy values. These are things you should ultimately memorize if you will be working with JavaScript often.\nfalse, 0, and \"\"\nWhen comparing any of our first three falsy values with loose equality, they will always be equal! That’s because these values will all coerce into a false boolean.\nfalse == 0\n// true\n0 == \"\"\n// true\n\"\" == false\n// true</p>\n<ol start=\"2\">\n<li>null and undefined\nWhen comparing null and undefined, they are only equal to themselves and each other:\nnull == null\n// true\nundefined == undefined\n// true\nnull == undefined\n// true\nIf you try to compare null to any other value, it will return false.</li>\n<li>NaN\nLastly, NaN is not equivalent to anything. Even cooler, it’s not even itself!\nNaN == null\n// false\nNaN == undefined\n// false\nNaN == NaN\n// false\n<img src=\"https://i.imgur.com/VsPEaKZ.jpg\" title=\"Photo by Dominika Roseclay from Pexels\"></li>\n</ol>\n<p>Key Takeaways\nAs you’ve seen, type coercion can get a bit crazy in JS. Unless you’re very familiar with JavaScript, loose equality can lead to more headaches than it’s worth. Memorizing the six falsy values and the rules associated with them can go a long way towards understanding loose equality.\nTriple Equals is superior to double equals. Whenever possible, you should use triple equals to test equality. By testing the type and value you can be sure that you are always executing a true equality test.\nReference:</p>\n<p><a href=\"https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a\">https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a</a></p>\n<p><img src=\"https://i.imgur.com/fIyDFmN.jpg\" title=\"Photo by Pixabay from Pexels\"></p>"}},{"node":{"id":"755e6dea-eebd-5c41-9844-4a60aa749905","excerpt":"Semantic UI is a library of React components which are ready to be used. Let's take an example where we want to use a multiple selection…","rawMarkdownBody":"\r\n![](https://i.imgur.com/HkbIUiu.png \"Semantic UI React logo\")\r\n\r\nSemantic UI is a library of React components which are ready to be used. Let's take an example where we want to use a multiple selection Dropdown.\r\n\r\nFirst we visit the page of semantic ui:\r\n\r\nhttps://react.semantic-ui.com/modules/dropdown/\r\n\r\nWe can scroll to <code>Multiple Selection</code> and click to see the entire code in CodeSandbox:\r\n\r\nhttps://codesandbox.io/s/9h0ck?module=/example.js\r\n\r\nHere we can see entire code and how it can be integrated:\r\n\r\n```\r\nimport React from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\nconst options = [\r\n  { key: 'angular', text: 'Angular', value: 'angular' },\r\n  { key: 'css', text: 'CSS', value: 'css' },\r\n  { key: 'design', text: 'Graphic Design', value: 'design' },\r\n]\r\n\r\nconst DropdownExampleMultipleSelection = () => (\r\n  <Dropdown placeholder='Skills' fluid multiple selection options={options} />\r\n)\r\n\r\nexport default DropdownExampleMultipleSelection\r\n\r\n```\r\n\r\nThen we also need a component like App, which will display the component:\r\n```\r\n<DropdownExampleMultipleSelection />\r\n```\r\n\r\nSuch component can be for example App component\r\n\r\nPlease note we will also need to add STYLES to the semantic ui components, else theey will not generate correctly. There are two ways how to do it:\r\n\r\n**1//** got to public folder and find index.html and integrate link tag there like this:\r\n```\r\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\r\n```\r\n\r\nor\r\n\r\n**2//** you can use a small hack to add to your DropdownExampleMultipleSelection component:\r\n```\r\nconst styleLink = document.createElement(\"link\");\r\nstyleLink.rel = \"stylesheet\";\r\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\r\ndocument.head.appendChild(styleLink);\r\n```\r\n\r\nEntire code loos then like this:\r\n```\r\nimport React from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\nconst styleLink = document.createElement(\"link\");\r\nstyleLink.rel = \"stylesheet\";\r\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\r\ndocument.head.appendChild(styleLink);\r\n\r\nconst options = [\r\n  { key: 'angular', text: 'Angular', value: 'angular' },\r\n  { key: 'css', text: 'CSS', value: 'css' },\r\n  { key: 'design', text: 'Graphic Design', value: 'design' },\r\n]\r\n\r\nconst DropdownExampleMultipleSelection = () => (\r\n  <Dropdown placeholder='Skills' fluid multiple selection options={options} />\r\n)\r\n\r\nexport default DropdownExampleMultipleSelection\r\n\r\n```\r\n\r\nWhen using this dropdown, it is very importnat to generate options!!! These will be the values in the dropdown:\r\n```\r\nconst options = [\r\n  { key: 'angular', text: 'Angular', value: 'angular' },\r\n  { key: 'css', text: 'CSS', value: 'css' },\r\n  { key: 'design', text: 'Graphic Design', value: 'design' },\r\n]\r\n\r\n```\r\n\r\nThey are then passed into the Dropdown component as prop called options.\r\n\r\nMy real work integration of the dropdown was to create a filter component which would be based on Datasource and Campaign columns from my dataset. Original integration looked like this:\r\n```\r\nimport React from \"react\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\n\r\nexport function Filter({ styling, filterColumns, onChange, dataSet }) {\r\n  // Defines a filter which allows users to filter data displayed on graph\r\n  // by selecting certain datasources and/or campaigns.\r\n  const columns = [];\r\n  const styleLink = document.createElement(\"link\");\r\n  styleLink.rel = \"stylesheet\";\r\n  styleLink.href =\r\n    \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\r\n  document.head.appendChild(styleLink);\r\n\r\n  for (let item = 0; item < filterColumns.length; item++) {\r\n    const genOptions = generateOptions(filterColumns[item], dataSet);\r\n    columns.push(\r\n      <div key={item}>\r\n        <p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\r\n          {filterColumns[item]}\r\n        </p>\r\n        <Dropdown\r\n          key={item}\r\n          style={styleLink}\r\n          placeholder={filterColumns[item]}\r\n          fluid\r\n          multiple\r\n          selection\r\n          options={genOptions}\r\n          onChange={onChange}\r\n          style={{ marginTop: \"5px\" }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <h2 style={styling}>Filters</h2>\r\n      {columns}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction generateOptions(inputItem, inputDataSet) {\r\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\r\n  let uniqueValues = [];\r\n  for (let entry = 0; entry < inputDataSet.length; entry++) {\r\n    if (!uniqueValues.includes(inputDataSet[entry][inputItem])) {\r\n      uniqueValues.push(inputDataSet[entry][inputItem]);\r\n    }\r\n  }\r\n  let newOptions = [];\r\n  for (let optionItem = 0; optionItem < uniqueValues.length; optionItem++) {\r\n    let optionRow = {\r\n      key: uniqueValues[optionItem],\r\n      text: uniqueValues[optionItem],\r\n      value: uniqueValues[optionItem]\r\n    };\r\n    newOptions.push(optionRow);\r\n  }\r\n  return newOptions;\r\n}\r\n```\r\n\r\nThen a re-worked integration looked like this:\r\n\r\nfilter.js\r\n```\r\nimport React from \"react\";\r\nimport { filterHelperFunction } from \"../functions/filterHelperFunction\";\r\n\r\nexport const Filter = ({ styling, filterColumns, onChange, dataSet }) => {\r\n  // Defines a filter which allows users to filter data displayed on graph\r\n  // by selecting certain datasources and/or campaigns.\r\n  const columns = filterHelperFunction(filterColumns, onChange, dataSet);\r\n\r\n  return (\r\n    <div data-testid=\"filter\">\r\n      <h2 style={styling}>Filters</h2>\r\n      {columns}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nfilterHeelperFunction.js\r\n```\r\nimport React from \"react\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport { generateOptionsFilter } from \"./generateOptionsFilter\";\r\n\r\nexport const filterHelperFunction = (filterColumns, onChange, dataSet) => {\r\n  const getColumns = item => {\r\n    const genOptions = generateOptionsFilter(item, dataSet);\r\n    return (\r\n      <div key={item}>\r\n        <p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\r\n          {item}\r\n        </p>\r\n        <Dropdown\r\n          key={item}\r\n          placeholder={item}\r\n          fluid\r\n          multiple\r\n          selection\r\n          options={genOptions}\r\n          onChange={onChange}\r\n          style={{ marginTop: \"5px\" }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const columns = filterColumns.map(getColumns);\r\n  return columns;\r\n};\r\n```\r\n\r\ngenerateOptionsFilter.js\r\n```\r\nexport const generateOptionsFilter = (inputItem, inputDataSet) => {\r\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\r\n  const uniqueValues = [...new Set(inputDataSet.map(item => item[inputItem]))];\r\n  const newOptions = uniqueValues.map(item => {\r\n    return {\r\n      key: item,\r\n      text: item,\r\n      value: item\r\n    };\r\n  });\r\n  return newOptions;\r\n};\r\n```\r\n\r\nindex.html (notice the link integration for semantic ui)\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n    <meta name=\"theme-color\" content=\"#000000\" />\r\n    <meta\r\n      name=\"description\"\r\n      content=\"Web site created using create-react-app\"\r\n    />\r\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\r\n    <!--\r\n      manifest.json provides metadata used when your web app is installed on a\r\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\r\n    -->\r\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\r\n    <!--\r\n      Notice the use of %PUBLIC_URL% in the tags above.\r\n      It will be replaced with the URL of the `public` folder during the build.\r\n      Only files inside the `public` folder can be referenced from the HTML.\r\n\r\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\r\n      work correctly both with client-side routing and a non-root public URL.\r\n      Learn how to configure a non-root public URL by running `npm run build`.\r\n    -->\r\n    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\r\n    <title>React App</title>\r\n  </head>\r\n  <body>\r\n    <noscript>You need to enable JavaScript to run this app.</noscript>\r\n    <div id=\"root\"></div>\r\n    <!--\r\n      This HTML file is a template.\r\n      If you open it directly in the browser, you will see an empty page.\r\n\r\n      You can add webfonts, meta tags, or analytics to this file.\r\n      The build step will place the bundled scripts into the <body> tag.\r\n\r\n      To begin the development, run `npm start` or `yarn start`.\r\n      To create a production bundle, use `npm run build` or `yarn build`.\r\n    -->\r\n  </body>\r\n</html>\r\n\r\n```","frontmatter":{"date":"2019-12-24","title":"Semantic UI Dropdown","category":"knowledge-base"},"fields":{"slug":"/Using_Semantic_UI_Dropdown/"},"timeToRead":5,"html":"<p><img src=\"https://i.imgur.com/HkbIUiu.png\" title=\"Semantic UI React logo\"></p>\n<p>Semantic UI is a library of React components which are ready to be used. Let's take an example where we want to use a multiple selection Dropdown.</p>\n<p>First we visit the page of semantic ui:</p>\n<p><a href=\"https://react.semantic-ui.com/modules/dropdown/\">https://react.semantic-ui.com/modules/dropdown/</a></p>\n<p>We can scroll to <code>Multiple Selection</code> and click to see the entire code in CodeSandbox:</p>\n<p><a href=\"https://codesandbox.io/s/9h0ck?module=/example.js\">https://codesandbox.io/s/9h0ck?module=/example.js</a></p>\n<p>Here we can see entire code and how it can be integrated:</p>\n<pre><code>import React from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\nconst options = [\n  { key: 'angular', text: 'Angular', value: 'angular' },\n  { key: 'css', text: 'CSS', value: 'css' },\n  { key: 'design', text: 'Graphic Design', value: 'design' },\n]\n\nconst DropdownExampleMultipleSelection = () => (\n  &#x3C;Dropdown placeholder='Skills' fluid multiple selection options={options} />\n)\n\nexport default DropdownExampleMultipleSelection\n</code></pre>\n<p>Then we also need a component like App, which will display the component:</p>\n<pre><code>&#x3C;DropdownExampleMultipleSelection />\n</code></pre>\n<p>Such component can be for example App component</p>\n<p>Please note we will also need to add STYLES to the semantic ui components, else theey will not generate correctly. There are two ways how to do it:</p>\n<p><strong>1//</strong> got to public folder and find index.html and integrate link tag there like this:</p>\n<pre><code>&#x3C;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\n</code></pre>\n<p>or</p>\n<p><strong>2//</strong> you can use a small hack to add to your DropdownExampleMultipleSelection component:</p>\n<pre><code>const styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n</code></pre>\n<p>Entire code loos then like this:</p>\n<pre><code>import React from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nconst options = [\n  { key: 'angular', text: 'Angular', value: 'angular' },\n  { key: 'css', text: 'CSS', value: 'css' },\n  { key: 'design', text: 'Graphic Design', value: 'design' },\n]\n\nconst DropdownExampleMultipleSelection = () => (\n  &#x3C;Dropdown placeholder='Skills' fluid multiple selection options={options} />\n)\n\nexport default DropdownExampleMultipleSelection\n</code></pre>\n<p>When using this dropdown, it is very importnat to generate options!!! These will be the values in the dropdown:</p>\n<pre><code>const options = [\n  { key: 'angular', text: 'Angular', value: 'angular' },\n  { key: 'css', text: 'CSS', value: 'css' },\n  { key: 'design', text: 'Graphic Design', value: 'design' },\n]\n</code></pre>\n<p>They are then passed into the Dropdown component as prop called options.</p>\n<p>My real work integration of the dropdown was to create a filter component which would be based on Datasource and Campaign columns from my dataset. Original integration looked like this:</p>\n<pre><code>import React from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nexport function Filter({ styling, filterColumns, onChange, dataSet }) {\n  // Defines a filter which allows users to filter data displayed on graph\n  // by selecting certain datasources and/or campaigns.\n  const columns = [];\n  const styleLink = document.createElement(\"link\");\n  styleLink.rel = \"stylesheet\";\n  styleLink.href =\n    \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\n  document.head.appendChild(styleLink);\n\n  for (let item = 0; item &#x3C; filterColumns.length; item++) {\n    const genOptions = generateOptions(filterColumns[item], dataSet);\n    columns.push(\n      &#x3C;div key={item}>\n        &#x3C;p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\n          {filterColumns[item]}\n        &#x3C;/p>\n        &#x3C;Dropdown\n          key={item}\n          style={styleLink}\n          placeholder={filterColumns[item]}\n          fluid\n          multiple\n          selection\n          options={genOptions}\n          onChange={onChange}\n          style={{ marginTop: \"5px\" }}\n        />\n      &#x3C;/div>\n    );\n  }\n  return (\n    &#x3C;div>\n      &#x3C;h2 style={styling}>Filters&#x3C;/h2>\n      {columns}\n    &#x3C;/div>\n  );\n}\n\nfunction generateOptions(inputItem, inputDataSet) {\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\n  let uniqueValues = [];\n  for (let entry = 0; entry &#x3C; inputDataSet.length; entry++) {\n    if (!uniqueValues.includes(inputDataSet[entry][inputItem])) {\n      uniqueValues.push(inputDataSet[entry][inputItem]);\n    }\n  }\n  let newOptions = [];\n  for (let optionItem = 0; optionItem &#x3C; uniqueValues.length; optionItem++) {\n    let optionRow = {\n      key: uniqueValues[optionItem],\n      text: uniqueValues[optionItem],\n      value: uniqueValues[optionItem]\n    };\n    newOptions.push(optionRow);\n  }\n  return newOptions;\n}\n</code></pre>\n<p>Then a re-worked integration looked like this:</p>\n<p>filter.js</p>\n<pre><code>import React from \"react\";\nimport { filterHelperFunction } from \"../functions/filterHelperFunction\";\n\nexport const Filter = ({ styling, filterColumns, onChange, dataSet }) => {\n  // Defines a filter which allows users to filter data displayed on graph\n  // by selecting certain datasources and/or campaigns.\n  const columns = filterHelperFunction(filterColumns, onChange, dataSet);\n\n  return (\n    &#x3C;div data-testid=\"filter\">\n      &#x3C;h2 style={styling}>Filters&#x3C;/h2>\n      {columns}\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<p>filterHeelperFunction.js</p>\n<pre><code>import React from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\nimport { generateOptionsFilter } from \"./generateOptionsFilter\";\n\nexport const filterHelperFunction = (filterColumns, onChange, dataSet) => {\n  const getColumns = item => {\n    const genOptions = generateOptionsFilter(item, dataSet);\n    return (\n      &#x3C;div key={item}>\n        &#x3C;p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\n          {item}\n        &#x3C;/p>\n        &#x3C;Dropdown\n          key={item}\n          placeholder={item}\n          fluid\n          multiple\n          selection\n          options={genOptions}\n          onChange={onChange}\n          style={{ marginTop: \"5px\" }}\n        />\n      &#x3C;/div>\n    );\n  };\n  const columns = filterColumns.map(getColumns);\n  return columns;\n};\n</code></pre>\n<p>generateOptionsFilter.js</p>\n<pre><code>export const generateOptionsFilter = (inputItem, inputDataSet) => {\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\n  const uniqueValues = [...new Set(inputDataSet.map(item => item[inputItem]))];\n  const newOptions = uniqueValues.map(item => {\n    return {\n      key: item,\n      text: item,\n      value: item\n    };\n  });\n  return newOptions;\n};\n</code></pre>\n<p>index.html (notice the link integration for semantic ui)</p>\n<pre><code>&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;meta charset=\"utf-8\" />\n    &#x3C;link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    &#x3C;meta name=\"theme-color\" content=\"#000000\" />\n    &#x3C;meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    />\n    &#x3C;link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    &#x3C;!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    &#x3C;link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    &#x3C;!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    &#x3C;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\n    &#x3C;title>React App&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;noscript>You need to enable JavaScript to run this app.&#x3C;/noscript>\n    &#x3C;div id=\"root\">&#x3C;/div>\n    &#x3C;!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the &#x3C;body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>"}},{"node":{"id":"544104e6-d055-5b90-bd92-5eba28be04be","excerpt":"In order to get unique values from an array, we can use Set and map: In order to get unique values from an object, imagine we have an object…","rawMarkdownBody":"\r\n![](https://i.imgur.com/STxfgmb.jpg \"Photo by João Jesus from Pexels\")\r\n\r\nIn order to get unique values from an array, we can use <code>Set</code> and <code>map</code>:\r\n```\r\nconst uniqueValues = [...new Set([1,1,1,2,2,2,3,3,3,3,4,5].map(item => item))];\r\nconsole.log(uniqueValues);\r\n// result: [1,2,3,4,5]\r\n```\r\n\r\nIn order to get unique values from an object, imagine we have an object like this:\r\n```\r\nconst data = [\r\n{Datasource: \"FB\", Campaign: \"A\"},\r\n{Datasource: \"FB\", Campaign: \"B\"},\r\n{Datasource: \"Adwords\", Campaign: \"A\"},\r\n{Datasource: \"Adwords\", Campaign: \"C\"}]\r\n```\r\n\r\nNow we want to get and array of unique datasources:\r\n```\r\n[\"FB\", \"Adwords\"]\r\n```\r\nand an array of unique campaigns:\r\n```\r\n[\"A\", \"B\", \"C\"]\r\n```\r\n\r\nIn order to do it, we can use <code>Set</code> and <code>map</code> again:\r\n\r\nUnique datasources:\r\n```\r\nconst uniqueDatasources = [...new Set(data.map(item => item.Datasource))];\r\nconsole.log(\"uniqueDatasources\", uniqueDatasources);\r\n// result: [\"FB\", \"Adwords\"]\r\n```\r\n\r\nUnique campaigns:\r\n\r\n```\r\nconst uniqueCampaigns = [...new Set(data.map(item => item.Campaign))];\r\nconsole.log(\"uniqueCampaigns\", uniqueCampaigns);\r\n// result: [\"A\", \"B\", \"C\"]\r\n```\r\n\r\nResources: \r\n\r\nhttps://stackoverflow.com/questions/15125920/how-to-get-distinct-values-from-an-array-of-objects-in-javascript\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set","frontmatter":{"date":"2019-12-23","title":"How to generate Unique values from an object","category":"knowledge-base"},"fields":{"slug":"/How_to_Generate_Unique_Values_from_Object/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/STxfgmb.jpg\" title=\"Photo by João Jesus from Pexels\"></p>\n<p>In order to get unique values from an array, we can use <code>Set</code> and <code>map</code>:</p>\n<pre><code>const uniqueValues = [...new Set([1,1,1,2,2,2,3,3,3,3,4,5].map(item => item))];\nconsole.log(uniqueValues);\n// result: [1,2,3,4,5]\n</code></pre>\n<p>In order to get unique values from an object, imagine we have an object like this:</p>\n<pre><code>const data = [\n{Datasource: \"FB\", Campaign: \"A\"},\n{Datasource: \"FB\", Campaign: \"B\"},\n{Datasource: \"Adwords\", Campaign: \"A\"},\n{Datasource: \"Adwords\", Campaign: \"C\"}]\n</code></pre>\n<p>Now we want to get and array of unique datasources:</p>\n<pre><code>[\"FB\", \"Adwords\"]\n</code></pre>\n<p>and an array of unique campaigns:</p>\n<pre><code>[\"A\", \"B\", \"C\"]\n</code></pre>\n<p>In order to do it, we can use <code>Set</code> and <code>map</code> again:</p>\n<p>Unique datasources:</p>\n<pre><code>const uniqueDatasources = [...new Set(data.map(item => item.Datasource))];\nconsole.log(\"uniqueDatasources\", uniqueDatasources);\n// result: [\"FB\", \"Adwords\"]\n</code></pre>\n<p>Unique campaigns:</p>\n<pre><code>const uniqueCampaigns = [...new Set(data.map(item => item.Campaign))];\nconsole.log(\"uniqueCampaigns\", uniqueCampaigns);\n// result: [\"A\", \"B\", \"C\"]\n</code></pre>\n<p>Resources: </p>\n<p><a href=\"https://stackoverflow.com/questions/15125920/how-to-get-distinct-values-from-an-array-of-objects-in-javascript\">https://stackoverflow.com/questions/15125920/how-to-get-distinct-values-from-an-array-of-objects-in-javascript</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set</a></p>"}},{"node":{"id":"e6d829dd-7aae-5c7d-bdf1-5f2e20e67c5d","excerpt":"We can use 2 ways to check data types: ES6 native: Lodash:","rawMarkdownBody":"\r\n![](https://i.imgur.com/STxfgmb.jpg \"Photo by João Jesus from Pexels\")\r\n\r\nWe can use 2 ways to check data types:\r\n\r\nES6 native:\r\n```\r\nconst check = typeof \"hello\" === \"string\";\r\nconsole.log(check);\r\n//result: true\r\n```\r\n\r\nLodash:\r\n```\r\nimport _ from \"lodash\";\r\n\r\nconst check = _.isString(\"hello\");\r\nconsole.log(check);\r\n//result: true\r\n```","frontmatter":{"date":"2019-12-22","title":"How to check data types","category":"knowledge-base"},"fields":{"slug":"/Data_Types/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/STxfgmb.jpg\" title=\"Photo by João Jesus from Pexels\"></p>\n<p>We can use 2 ways to check data types:</p>\n<p>ES6 native:</p>\n<pre><code>const check = typeof \"hello\" === \"string\";\nconsole.log(check);\n//result: true\n</code></pre>\n<p>Lodash:</p>\n<pre><code>import _ from \"lodash\";\n\nconst check = _.isString(\"hello\");\nconsole.log(check);\n//result: true\n</code></pre>"}},{"node":{"id":"b440ae3d-ff86-5c38-8495-e5a6b219b6e0","excerpt":"Testing with Jest is relatively easy. When you create your project with create-react-app, it will come already with Jest installed and with…","rawMarkdownBody":"\r\n![](https://i.imgur.com/cbhYcg2.jpg \"Photo by Chokniti Khongchum from Pexels\")\r\n\r\nTesting with Jest is relatively easy. When you create your project with create-react-app, it will come already with Jest installed and with the <code>App.test.js</code> in the <code>src</code> folder.\r\n\r\nAnd immediatelly out of the box you can simply use following code to run your first test for App.js:\r\n```\r\nnpm run test\r\n```\r\nHow to proceed then?\r\n\r\nBy default Jest uses exporting which is different from the ES6 (used in React).\r\n\r\nReact uses either **NAMED EXPORT**:\r\n```\r\nexport const functionX = () => {\r\n\treturn 1;\r\n}\r\n```\r\nand **NAMED IMPORT**:\r\n```\r\nimport {functionX} from \"./functionX\"\r\n```\r\n\r\nor React uses **DEFAULT EXPORT**:\r\n```\r\nconst functionX = () => {\r\n\treturn 1;\r\n}\r\nexport default functionX;\r\n```\r\nand **DEFAULT IMPORT**:\r\n```\r\nimport functionX from \"./functionX\"\r\n```\r\n\r\n\r\nHowever, what Jest uses are <code>MODULE EXPORTS</code>. These are different and not fully compatible with React.\r\n\r\n**MODULE EXPORT**:\r\n```\r\nconst functionX = () => {\r\n\treturn 1;\r\n}\r\nmodule.exports = functionX;\r\n```\r\n\r\n**MODULE IMPORT**:\r\n```\r\nconst functionX = require(\"./functionX\");\r\n```\r\n\r\nReact way of importing is NOT compatible with Jest. If you use import or export in your function or in your test, you will get errors:\r\n```\r\nCannot use import statement outside a module\r\n```\r\n\r\nIn order to be able to use Jest tests and export them and import them according to ES6 (React standard way) you will also need to install following dependencies:\r\n```\r\nnpm install --dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\r\n```\r\n\r\nAfterwards you should easily be able to use import and export for your tests.\r\n\r\nExample function called <code>formatImpressions.js</code> which resides in <code>functions</code> folder:\r\n```\r\nexport function formatImpressions(input) {\r\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\r\n  for (let row = 0; row < input.length; row++) {\r\n    if (!input[row].Impressions) {\r\n      input[row].Impressions = 0;\r\n    }\r\n    if (!input[row].Clicks) {\r\n      input[row].Clicks = 0;\r\n    }\r\n  }\r\n  return input;\r\n}\r\n\r\n```\r\n\r\nExample test in <code>formatImpressions.test.js</code> which resides in <code>tests</code> folder:\r\n```\r\nimport { formatImpressions } from \"../functions/formatImpressions\";\r\n\r\ntest(\"format Impressions\", () => {\r\n  expect(\r\n    formatImpressions([\r\n      { Datasource: \"Facebook Ads\", Impressions: \"\", Clicks: \"\" }\r\n    ])\r\n  ).toStrictEqual([{ Datasource: \"Facebook Ads\", Impressions: 0, Clicks: 0 }]);\r\n  expect(\r\n    formatImpressions([\r\n      { Datasource: \"Facebook Ads\", Impressions: 123, Clicks: 50 }\r\n    ])\r\n  ).toStrictEqual([\r\n    { Datasource: \"Facebook Ads\", Impressions: 123, Clicks: 50 }\r\n  ]);\r\n});\r\n\r\n```\r\n\r\nIn the terminal we are now able to run the test\r\n```\r\nnpm run test\r\n```\r\n\r\nIt should open the <code>watch</code> view where you can see how many tests failed and how many passed. Pressing <code>A</code> button in this view will run ALL tests again (because sometimes only latest test will run). \r\n\r\nPressing <code>Q</code> will end this watch view and get you back to terminal.\r\n\r\n**TESTING REACT COMPONENTS**\r\n\r\nExample set of tests possible for React components, where components are in components folder and in this folder we also have a subfolder <code>__test__</code> and <code>__snapshots__</code>(the last one is created automatically when running snapshot tests):\r\n```\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Header } from \"../Header.js\";\r\nimport { render, cleanup } from \"@testing-library/react\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport renderer from \"react-test-renderer\";\r\n\r\nafterEach(cleanup);\r\n\r\nit(\"renders without crashing\", () => {\r\n  const div = document.createElement(\"div\");\r\n  ReactDOM.render(<Header></Header>, div);\r\n});\r\n\r\nit(\"renders header correctly\", () => {\r\n  render(<Header></Header>);\r\n});\r\n\r\nit(\"renders header correctly\", () => {\r\n  const { getByTestId } = render(<Header></Header>);\r\n  expect(getByTestId(\"header\")).toHaveTextContent(\r\n    \"Advertising Data ETL-V Challenge\"\r\n  );\r\n});\r\n\r\nit(\"matches snapshot\", () => {\r\n  const tree = renderer.create(<Header></Header>).toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n```\r\nPLEASE NOTE that the Header component needs to have a attribute <code>data-testid=\"header\"</code>:\r\n```\r\nimport React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport function Header() {\r\n  // Defines a header to be displayed as a title on the pages\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col sm={12}>\r\n          <h2\r\n            data-testid=\"header\"\r\n            style={{\r\n              margin: \"20px 0px\",\r\n              textAlign: \"left\",\r\n              color: \"#7F6A93\",\r\n              borderBottom: \"0.5px solid #E8E8EA\",\r\n              paddingBottom: \"20px\"\r\n            }}\r\n          >\r\n            Advertising Data ETL-V Challenge\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nAccording to official Higcharts forum https://www.highcharts.com/forum/viewtopic.php?t=42324 trying to use snapshot test with Highcharts will not work because:\r\n```\r\nIt seems that React Test Renderer works only on pure JavaScripts objects without depending on the DOM, while Highcharts needs integration with HTML structure (to find container where the chart will be rendered etc.) - more: https://reactjs.org/docs/test-renderer.html.\r\n```\r\n\r\nResources: \r\n\r\nhttps://jestjs.io/docs/en/tutorial-react\r\n","frontmatter":{"date":"2019-12-21","title":"Testing with Jest","category":"knowledge-base"},"fields":{"slug":"/Testing_With_Jest/"},"timeToRead":4,"html":"<p><img src=\"https://i.imgur.com/cbhYcg2.jpg\" title=\"Photo by Chokniti Khongchum from Pexels\"></p>\n<p>Testing with Jest is relatively easy. When you create your project with create-react-app, it will come already with Jest installed and with the <code>App.test.js</code> in the <code>src</code> folder.</p>\n<p>And immediatelly out of the box you can simply use following code to run your first test for App.js:</p>\n<pre><code>npm run test\n</code></pre>\n<p>How to proceed then?</p>\n<p>By default Jest uses exporting which is different from the ES6 (used in React).</p>\n<p>React uses either <strong>NAMED EXPORT</strong>:</p>\n<pre><code>export const functionX = () => {\n    return 1;\n}\n</code></pre>\n<p>and <strong>NAMED IMPORT</strong>:</p>\n<pre><code>import {functionX} from \"./functionX\"\n</code></pre>\n<p>or React uses <strong>DEFAULT EXPORT</strong>:</p>\n<pre><code>const functionX = () => {\n    return 1;\n}\nexport default functionX;\n</code></pre>\n<p>and <strong>DEFAULT IMPORT</strong>:</p>\n<pre><code>import functionX from \"./functionX\"\n</code></pre>\n<p>However, what Jest uses are <code>MODULE EXPORTS</code>. These are different and not fully compatible with React.</p>\n<p><strong>MODULE EXPORT</strong>:</p>\n<pre><code>const functionX = () => {\n    return 1;\n}\nmodule.exports = functionX;\n</code></pre>\n<p><strong>MODULE IMPORT</strong>:</p>\n<pre><code>const functionX = require(\"./functionX\");\n</code></pre>\n<p>React way of importing is NOT compatible with Jest. If you use import or export in your function or in your test, you will get errors:</p>\n<pre><code>Cannot use import statement outside a module\n</code></pre>\n<p>In order to be able to use Jest tests and export them and import them according to ES6 (React standard way) you will also need to install following dependencies:</p>\n<pre><code>npm install --dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n</code></pre>\n<p>Afterwards you should easily be able to use import and export for your tests.</p>\n<p>Example function called <code>formatImpressions.js</code> which resides in <code>functions</code> folder:</p>\n<pre><code>export function formatImpressions(input) {\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\n  for (let row = 0; row &#x3C; input.length; row++) {\n    if (!input[row].Impressions) {\n      input[row].Impressions = 0;\n    }\n    if (!input[row].Clicks) {\n      input[row].Clicks = 0;\n    }\n  }\n  return input;\n}\n</code></pre>\n<p>Example test in <code>formatImpressions.test.js</code> which resides in <code>tests</code> folder:</p>\n<pre><code>import { formatImpressions } from \"../functions/formatImpressions\";\n\ntest(\"format Impressions\", () => {\n  expect(\n    formatImpressions([\n      { Datasource: \"Facebook Ads\", Impressions: \"\", Clicks: \"\" }\n    ])\n  ).toStrictEqual([{ Datasource: \"Facebook Ads\", Impressions: 0, Clicks: 0 }]);\n  expect(\n    formatImpressions([\n      { Datasource: \"Facebook Ads\", Impressions: 123, Clicks: 50 }\n    ])\n  ).toStrictEqual([\n    { Datasource: \"Facebook Ads\", Impressions: 123, Clicks: 50 }\n  ]);\n});\n</code></pre>\n<p>In the terminal we are now able to run the test</p>\n<pre><code>npm run test\n</code></pre>\n<p>It should open the <code>watch</code> view where you can see how many tests failed and how many passed. Pressing <code>A</code> button in this view will run ALL tests again (because sometimes only latest test will run). </p>\n<p>Pressing <code>Q</code> will end this watch view and get you back to terminal.</p>\n<p><strong>TESTING REACT COMPONENTS</strong></p>\n<p>Example set of tests possible for React components, where components are in components folder and in this folder we also have a subfolder <code><strong>test</strong></code> and <code><strong>snapshots</strong></code>(the last one is created automatically when running snapshot tests):</p>\n<pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Header } from \"../Header.js\";\nimport { render, cleanup } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport renderer from \"react-test-renderer\";\n\nafterEach(cleanup);\n\nit(\"renders without crashing\", () => {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(&#x3C;Header>&#x3C;/Header>, div);\n});\n\nit(\"renders header correctly\", () => {\n  render(&#x3C;Header>&#x3C;/Header>);\n});\n\nit(\"renders header correctly\", () => {\n  const { getByTestId } = render(&#x3C;Header>&#x3C;/Header>);\n  expect(getByTestId(\"header\")).toHaveTextContent(\n    \"Advertising Data ETL-V Challenge\"\n  );\n});\n\nit(\"matches snapshot\", () => {\n  const tree = renderer.create(&#x3C;Header>&#x3C;/Header>).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n</code></pre>\n<p>PLEASE NOTE that the Header component needs to have a attribute <code>data-testid=\"header\"</code>:</p>\n<pre><code>import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport function Header() {\n  // Defines a header to be displayed as a title on the pages\n  return (\n    &#x3C;div>\n      &#x3C;Row>\n        &#x3C;Col sm={12}>\n          &#x3C;h2\n            data-testid=\"header\"\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#7F6A93\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            Advertising Data ETL-V Challenge\n          &#x3C;/h2>\n        &#x3C;/Col>\n      &#x3C;/Row>\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<p>According to official Higcharts forum <a href=\"https://www.highcharts.com/forum/viewtopic.php?t=42324\">https://www.highcharts.com/forum/viewtopic.php?t=42324</a> trying to use snapshot test with Highcharts will not work because:</p>\n<pre><code>It seems that React Test Renderer works only on pure JavaScripts objects without depending on the DOM, while Highcharts needs integration with HTML structure (to find container where the chart will be rendered etc.) - more: https://reactjs.org/docs/test-renderer.html.\n</code></pre>\n<p>Resources: </p>\n<p><a href=\"https://jestjs.io/docs/en/tutorial-react\">https://jestjs.io/docs/en/tutorial-react</a></p>"}},{"node":{"id":"9a3cfd88-a38a-5ad2-ac17-6f2bbf9b95b1","excerpt":"For example if we want to publish our project on Github pages, it is done over HTTPS (secure HTTP). However, if we fetch some data (or…","rawMarkdownBody":"\r\n![](https://i.imgur.com/ReyaN6N.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nFor example if we want to publish our project on Github pages, it is done over HTTPS (secure HTTP). However, if we fetch some data (or upload an image) on it from not-secured HTTP, we will get an error:\r\n```\r\nMixed Content: The page at \"https://...\" \r\nwas loaded over HTTPS, but requestd an \r\ninsecure image \"http://...\". This content \r\nshould be served over HTTPS.\r\n```\r\n\r\nHow to solve it? There is not much what we can do:\r\n\r\n**1)**Check if the insecure HTTP URL is available over HTTPS by changing it from http:// to https://.\r\n\r\nIf the resource displayed is the same over HTTP and HTTPS, everything is OK :)\r\n\r\n**2)**Change the resource and substitute with a secure one\r\n\r\n**3)**Delete the resource from your app completely\r\n\r\nReference:\r\n\r\nhttps://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content","frontmatter":{"date":"2019-12-13","title":"Mixed content error","category":"knowledge-base"},"fields":{"slug":"/Mixed_Content/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/ReyaN6N.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>For example if we want to publish our project on Github pages, it is done over HTTPS (secure HTTP). However, if we fetch some data (or upload an image) on it from not-secured HTTP, we will get an error:</p>\n<pre><code>Mixed Content: The page at \"https://...\" \nwas loaded over HTTPS, but requestd an \ninsecure image \"http://...\". This content \nshould be served over HTTPS.\n</code></pre>\n<p>How to solve it? There is not much what we can do:</p>\n<p><strong>1)</strong>Check if the insecure HTTP URL is available over HTTPS by changing it from http:// to https://.</p>\n<p>If the resource displayed is the same over HTTP and HTTPS, everything is OK :)</p>\n<p><strong>2)</strong>Change the resource and substitute with a secure one</p>\n<p><strong>3)</strong>Delete the resource from your app completely</p>\n<p>Reference:</p>\n<p><a href=\"https://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content\">https://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content</a></p>"}},{"node":{"id":"d0ce46d9-bfee-53ee-ad9d-57623a587370","excerpt":"CSV files will be interpretted as string. In order to convert them to a JSON object, we will need to parse them first. It is relatively easy…","rawMarkdownBody":"\r\n![](https://i.imgur.com/crZSR9A.jpg \"Photo by Mike from Pexels\")\r\n\r\nCSV files will be interpretted as <code>string</code>. In order to convert them to a JSON object, we will need to parse them first. It is relatively easy as they are comma separated. \r\n\r\nExample CSV parser is here:\r\n```\r\nfunction csvJSON(csv) {\r\n  // Receives a comma separated csv file as input. \r\n  Outputs array of objects as result.\r\n  var lines = csv.split(\"\\n\");\r\n  var result = [];\r\n  var headers = lines[0].split(\",\");\r\n  for (var i = 1; i < lines.length; i++) {\r\n    var obj = {};\r\n    var currentline = lines[i].split(\",\");\r\n    for (var j = 0; j < headers.length; j++) {\r\n      const columnValue = currentline[j];\r\n      if (j === 3 || j === 4) {\r\n        obj[headers[j]] = parseInt(columnValue);\r\n      } else {\r\n        obj[headers[j]] = columnValue;\r\n      }\r\n    }\r\n    result.push(obj);\r\n  }\r\n  let removeLast = result.pop();\r\n  return result;\r\n}\r\n```\r\n\r\nPlease note, that it can happen that there will be one redundant line at the very end of our JSON object. Which we remove by <code>.pop()</code>. function. If in your case there is an extra empty row, then zou can remove that line in two ways:\r\n\r\n**1//** NON-MUTATIONAL:\r\n```\r\nconst newArray = objectArray.slice(1, objectArray.length - 1);\r\nreeturn newArray\r\n```\r\n\r\n**2//** MUTATIONAL (not recommndede way):\r\n```\r\nlet removeLast = result.pop();\r\nreturn result\r\n```\r\n\r\n![](https://i.imgur.com/YY6Senp.jpg \"Photo by Mike from Pexels\")","frontmatter":{"date":"2019-12-12","title":"Parsing CSV","category":"knowledge-base"},"fields":{"slug":"/Parsing_CSV/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/crZSR9A.jpg\" title=\"Photo by Mike from Pexels\"></p>\n<p>CSV files will be interpretted as <code>string</code>. In order to convert them to a JSON object, we will need to parse them first. It is relatively easy as they are comma separated. </p>\n<p>Example CSV parser is here:</p>\n<pre><code>function csvJSON(csv) {\n  // Receives a comma separated csv file as input. \n  Outputs array of objects as result.\n  var lines = csv.split(\"\\n\");\n  var result = [];\n  var headers = lines[0].split(\",\");\n  for (var i = 1; i &#x3C; lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(\",\");\n    for (var j = 0; j &#x3C; headers.length; j++) {\n      const columnValue = currentline[j];\n      if (j === 3 || j === 4) {\n        obj[headers[j]] = parseInt(columnValue);\n      } else {\n        obj[headers[j]] = columnValue;\n      }\n    }\n    result.push(obj);\n  }\n  let removeLast = result.pop();\n  return result;\n}\n</code></pre>\n<p>Please note, that it can happen that there will be one redundant line at the very end of our JSON object. Which we remove by <code>.pop()</code>. function. If in your case there is an extra empty row, then zou can remove that line in two ways:</p>\n<p><strong>1//</strong> NON-MUTATIONAL:</p>\n<pre><code>const newArray = objectArray.slice(1, objectArray.length - 1);\nreeturn newArray\n</code></pre>\n<p><strong>2//</strong> MUTATIONAL (not recommndede way):</p>\n<pre><code>let removeLast = result.pop();\nreturn result\n</code></pre>\n<p><img src=\"https://i.imgur.com/YY6Senp.jpg\" title=\"Photo by Mike from Pexels\"></p>"}},{"node":{"id":"435adcaa-dc40-5f87-8f25-0b3dcb77a5c9","excerpt":"Fetching data in REACT from a url or an API is not as straightforward as it might seem. It also has some catches to it. In order to fetch…","rawMarkdownBody":"\r\n![](https://i.imgur.com/MqWLXcO.jpg \"Photo by Jozef Fehér from Pexels\")\r\n\r\nFetching data in REACT from a url or an API is not as straightforward as it might seem. It also has some catches to it.\r\n\r\nIn order to fetch data, the best place to fetch data is useEffect hook. It is similar to lifecycle methods of class components, so it will be triggered when the component mounts or when it re-renders. Plus it has an advantage of being able to define if it will only run once. So let's take a look at it.\r\n\r\nTo fetch data from this Amazon aws url: \r\n\r\n<code>\"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"</code> \r\n\r\nor its Github equivalent: \r\n\r\n<code>\"https://raw.githubusercontent.com/addania/challenge/master/src/data/source.csv?raw=true\"</code> \r\n\r\nwe can use following script:\r\n```\r\n1 useEffect(() => { \r\n2   async function fetchData() {\r\n3      const response = await fetch(\r\n4        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\r\n5      );\r\n6      const csvData = await response.text();\r\n7      const jsonData = csvJSON(csvData);\r\n8      const formattedImpressions = formatImpressions(jsonData);\r\n9      //...more functions which transform initial data\r\n      setState(formattedImpressions);      \r\n10    }\r\n11    fetchData();\r\n12  }, []);\r\n\r\n```\r\n\r\nLet's break it down. We already know some advantages why we should use useEffect for it. We also need to make sure we import the useEffect in the first place, so the entire code will look like this:\r\n```\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nfunction App() {\r\n  \r\nconst [data, setData] = useState([]);\r\n\r\nuseEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetch(\r\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\r\n      );\r\n      const csvData = await response.text();\r\n      const jsonData = csvJSON(csvData);\r\n      const formattedImpressions = formatImpressions(jsonData);\r\n      //...more functions which transform initial data\r\n      setState(formattedImpressions);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n return (\r\n    <div></div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nWhen we fetch data we most likely only want to do it once when the component mounts, and not every time when it re-renders. Why? Fetching data (and especially big files) is an expensive operation and it causes delays in when data are available. So we want to do it only once. In order to do it, we pass empty array to the useEffect function as second argument <code>[]</code> on the line number 12. This will tell useEffect to only render once when component mounts.\r\n\r\n\r\nThen the syntax for fetching is following (lines2-11):\r\n```\r\n async function fetchData() {\r\n      const response = await fetch(\r\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\r\n      );\r\n      const csvData = await response.text();\r\n      const jsonData = csvJSON(csvData);\r\n      const formattedImpressions = formatImpressions(jsonData);\r\n      //...more functions which transform initial data\r\n      setState(formattedImpressions);      \r\n    }\r\n    fetchData();\r\n```\r\n\r\nIt is important to understand that fetching is <code>asynchronous</code>. When we fetch data, we only get a promise, that we will get the data as soon as they are available (at some later point in time, can be even in 5 minutes). But they are NOT yet available in the moment when the trigger the fetch. Therefore, we cannot <code>console.log</code> them or work with them immediatelly afterwards. If we do, we will get errors, that our functions cannot run on <code>undefined</code>. This is the reason why we need to include <code>await</code> and then all the functions which need to run on our data will run AFTER the data are available and they need to run **INSIDE** of the useEffect. Then the very last step will be to setState with transformed data. \r\n\r\n<code>Await</code> will make sure that anything after it will first wait until data are available and only trigger it when data are there. If we put our functions **OUSIDE** of the useEffect, all functions will run before the data actually are available and fail.\r\n\r\nAnother way how we can fetch data:\r\n```\r\nimport React, { useState, useEffect } from \"react\";\r\nexport const FetchAPItest = () => {\r\n  const [person, setPerson] = useState(null);\r\n  useEffect(async () => {\r\n    const response = await fetch(\"https://api.randomuser.me/\");\r\n    const data = await response.json();\r\n    const [item]=data.results;\r\n    setPerson(item);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {person && <p>{person.name.first}</p>}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nPlease note: this will only work when you initially set the state to <code>null</code>!\r\n```\r\nconst [person, setPerson] = useState(null);\r\n```\r\n\r\nIf you set your state to empty:\r\n```\r\nconst [person, setPerson] = useState();\r\n```\r\n\r\nyou will get an error that undefined does not have property name.first\r\n\r\nPlease also note, that we render our component conditionally when the person is there:\r\n```\r\n{person && <p>{person.name.first}</p>}\r\n```\r\n\r\nIf we just do this:\r\n```\r\n<p>{person.name.first}</p>\r\n```\r\nwe will again have error.\r\n\r\nSame data, fetched by the first method:\r\n```\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nexport const FetchAPItest2 = () => {\r\n  const [person, setPerson] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData(){\r\n      \r\n    const response = await fetch(\"https://api.randomuser.me/\");\r\n    const data = await response.json();\r\n    const [item]=data.results;\r\n    setPerson(item);\r\n  }\r\n  fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {person && <p>{person.name.first}</p>}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/Sb31C68.jpg \"Photo by Jozef Fehér from Pexels\")","frontmatter":{"date":"2019-12-11","title":"Fetching Data in React","category":"knowledge-base"},"fields":{"slug":"/Fetching_Data/"},"timeToRead":4,"html":"<p><img src=\"https://i.imgur.com/MqWLXcO.jpg\" title=\"Photo by Jozef Fehér from Pexels\"></p>\n<p>Fetching data in REACT from a url or an API is not as straightforward as it might seem. It also has some catches to it.</p>\n<p>In order to fetch data, the best place to fetch data is useEffect hook. It is similar to lifecycle methods of class components, so it will be triggered when the component mounts or when it re-renders. Plus it has an advantage of being able to define if it will only run once. So let's take a look at it.</p>\n<p>To fetch data from this Amazon aws url: </p>\n<p><code>\"<a href=\"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv%22\">http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"</a></code> </p>\n<p>or its Github equivalent: </p>\n<p><code>\"<a href=\"https://raw.githubusercontent.com/addania/challenge/master/src/data/source.csv?raw=true%22\">https://raw.githubusercontent.com/addania/challenge/master/src/data/source.csv?raw=true\"</a></code> </p>\n<p>we can use following script:</p>\n<pre><code>1 useEffect(() => { \n2   async function fetchData() {\n3      const response = await fetch(\n4        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\n5      );\n6      const csvData = await response.text();\n7      const jsonData = csvJSON(csvData);\n8      const formattedImpressions = formatImpressions(jsonData);\n9      //...more functions which transform initial data\n      setState(formattedImpressions);      \n10    }\n11    fetchData();\n12  }, []);\n</code></pre>\n<p>Let's break it down. We already know some advantages why we should use useEffect for it. We also need to make sure we import the useEffect in the first place, so the entire code will look like this:</p>\n<pre><code>import React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  \nconst [data, setData] = useState([]);\n\nuseEffect(() => {\n    async function fetchData() {\n      const response = await fetch(\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\n      );\n      const csvData = await response.text();\n      const jsonData = csvJSON(csvData);\n      const formattedImpressions = formatImpressions(jsonData);\n      //...more functions which transform initial data\n      setState(formattedImpressions);\n    }\n    fetchData();\n  }, []);\n\n return (\n    &#x3C;div>&#x3C;/div>\n    )\n}\n\nexport default App;\n</code></pre>\n<p>When we fetch data we most likely only want to do it once when the component mounts, and not every time when it re-renders. Why? Fetching data (and especially big files) is an expensive operation and it causes delays in when data are available. So we want to do it only once. In order to do it, we pass empty array to the useEffect function as second argument <code>[]</code> on the line number 12. This will tell useEffect to only render once when component mounts.</p>\n<p>Then the syntax for fetching is following (lines2-11):</p>\n<pre><code> async function fetchData() {\n      const response = await fetch(\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\n      );\n      const csvData = await response.text();\n      const jsonData = csvJSON(csvData);\n      const formattedImpressions = formatImpressions(jsonData);\n      //...more functions which transform initial data\n      setState(formattedImpressions);      \n    }\n    fetchData();\n</code></pre>\n<p>It is important to understand that fetching is <code>asynchronous</code>. When we fetch data, we only get a promise, that we will get the data as soon as they are available (at some later point in time, can be even in 5 minutes). But they are NOT yet available in the moment when the trigger the fetch. Therefore, we cannot <code>console.log</code> them or work with them immediatelly afterwards. If we do, we will get errors, that our functions cannot run on <code>undefined</code>. This is the reason why we need to include <code>await</code> and then all the functions which need to run on our data will run AFTER the data are available and they need to run <strong>INSIDE</strong> of the useEffect. Then the very last step will be to setState with transformed data. </p>\n<p><code>Await</code> will make sure that anything after it will first wait until data are available and only trigger it when data are there. If we put our functions <strong>OUSIDE</strong> of the useEffect, all functions will run before the data actually are available and fail.</p>\n<p>Another way how we can fetch data:</p>\n<pre><code>import React, { useState, useEffect } from \"react\";\nexport const FetchAPItest = () => {\n  const [person, setPerson] = useState(null);\n  useEffect(async () => {\n    const response = await fetch(\"https://api.randomuser.me/\");\n    const data = await response.json();\n    const [item]=data.results;\n    setPerson(item);\n  }, []);\n  return (\n    &#x3C;div>\n      {person &#x26;&#x26; &#x3C;p>{person.name.first}&#x3C;/p>}\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Please note: this will only work when you initially set the state to <code>null</code>!</p>\n<pre><code>const [person, setPerson] = useState(null);\n</code></pre>\n<p>If you set your state to empty:</p>\n<pre><code>const [person, setPerson] = useState();\n</code></pre>\n<p>you will get an error that undefined does not have property name.first</p>\n<p>Please also note, that we render our component conditionally when the person is there:</p>\n<pre><code>{person &#x26;&#x26; &#x3C;p>{person.name.first}&#x3C;/p>}\n</code></pre>\n<p>If we just do this:</p>\n<pre><code>&#x3C;p>{person.name.first}&#x3C;/p>\n</code></pre>\n<p>we will again have error.</p>\n<p>Same data, fetched by the first method:</p>\n<pre><code>import React, { useState, useEffect } from \"react\";\n\nexport const FetchAPItest2 = () => {\n  const [person, setPerson] = useState(null);\n\n  useEffect(() => {\n    async function fetchData(){\n      \n    const response = await fetch(\"https://api.randomuser.me/\");\n    const data = await response.json();\n    const [item]=data.results;\n    setPerson(item);\n  }\n  fetchData();\n  }, []);\n\n  return (\n    &#x3C;div>\n      {person &#x26;&#x26; &#x3C;p>{person.name.first}&#x3C;/p>}\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/Sb31C68.jpg\" title=\"Photo by Jozef Fehér from Pexels\"></p>"}},{"node":{"id":"b6c2ca41-a4e2-593c-a753-fbafdc0f5b47","excerpt":"If you want to put a condition which verifies if the object is empty, you can use following: ECMA 7+: ECMA 5+: Pre-ECMA 5: Lodash Reference…","rawMarkdownBody":"\r\n![](https://i.imgur.com/6uOGygm.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nIf you want to put a condition which verifies if the object is empty, you can use following:\r\n\r\nECMA 7+:\r\n```\r\n// because Object.entries(new Date()).length === 0;\r\n// we have to do some additional check\r\nObject.entries(obj).length === 0 && obj.constructor === Object\r\n```\r\n\r\nECMA 5+:\r\n```\r\n// because Object.keys(new Date()).length === 0;\r\n// we have to do some additional check\r\nObject.keys(obj).length === 0 && obj.constructor === Object\r\n```\r\n\r\nPre-ECMA 5:\r\n```\r\nfunction isEmpty(obj) {\r\n  for(var prop in obj) {\r\n    if(obj.hasOwnProperty(prop)) {\r\n      return false;\r\n    }\r\n  }\r\n  return JSON.stringify(obj) === JSON.stringify({});\r\n}\r\n```\r\n\r\nLodash\r\n```\r\n_.isEmpty({}); // true\r\n```\r\n\r\nReference:\r\n\r\nhttps://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object\r\n\r\n![](https://i.imgur.com/v8eHezH.jpg \"Photo by Sebastian Palomino from Pexels\")\r\n\r\n","frontmatter":{"date":"2019-12-10","title":"How to check if object is empty","category":"knowledge-base"},"fields":{"slug":"/How_to_Check_if_Object_is_Empty/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/6uOGygm.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>If you want to put a condition which verifies if the object is empty, you can use following:</p>\n<p>ECMA 7+:</p>\n<pre><code>// because Object.entries(new Date()).length === 0;\n// we have to do some additional check\nObject.entries(obj).length === 0 &#x26;&#x26; obj.constructor === Object\n</code></pre>\n<p>ECMA 5+:</p>\n<pre><code>// because Object.keys(new Date()).length === 0;\n// we have to do some additional check\nObject.keys(obj).length === 0 &#x26;&#x26; obj.constructor === Object\n</code></pre>\n<p>Pre-ECMA 5:</p>\n<pre><code>function isEmpty(obj) {\n  for(var prop in obj) {\n    if(obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n  return JSON.stringify(obj) === JSON.stringify({});\n}\n</code></pre>\n<p>Lodash</p>\n<pre><code>_.isEmpty({}); // true\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object\">https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object</a></p>\n<p><img src=\"https://i.imgur.com/v8eHezH.jpg\" title=\"Photo by Sebastian Palomino from Pexels\"></p>"}},{"node":{"id":"9d0395a9-b63a-5f7b-9baa-0cd92fa1a184","excerpt":"It is possible to create multiple variables with a single var, let or const if we separate them with comma: Reference: https://www.youtube…","rawMarkdownBody":"\r\n![](https://i.imgur.com/elDgUVi.jpg \"Photo by Süleyman Şahan from Pexels\")\r\n\r\nIt is possible to create multiple variables with a single <code>var</code>, <code>let</code> or <code>const</code> if we separate them with comma:\r\n```\r\nvar myDate=new Date(), \r\n    date=myDate.getDate(), // shows number of day in MONTH (for example 24)\r\n    day=myDate.getDay(), // shows number of day in WEEK (for example 6)\r\n    month=myDate.getMonth()+1, // gives number of MONTH - starts from 0 for January - if you want 1 for January add +1\r\n    year=myDate.getYear(); // give YEAR\r\n\r\n```\r\n\r\nReference:\r\n\r\nhttps://www.youtube.com/watch?v=CnozSz4wbBQ","frontmatter":{"date":"2019-12-09","title":"How to create multiple variables","category":"knowledge-base"},"fields":{"slug":"/Creating_multiple_Variables/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/elDgUVi.jpg\" title=\"Photo by Süleyman Şahan from Pexels\"></p>\n<p>It is possible to create multiple variables with a single <code>var</code>, <code>let</code> or <code>const</code> if we separate them with comma:</p>\n<pre><code>var myDate=new Date(), \n    date=myDate.getDate(), // shows number of day in MONTH (for example 24)\n    day=myDate.getDay(), // shows number of day in WEEK (for example 6)\n    month=myDate.getMonth()+1, // gives number of MONTH - starts from 0 for January - if you want 1 for January add +1\n    year=myDate.getYear(); // give YEAR\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://www.youtube.com/watch?v=CnozSz4wbBQ\">https://www.youtube.com/watch?v=CnozSz4wbBQ</a></p>"}},{"node":{"id":"c7cca05f-1abf-5639-ba56-766cd9255e47","excerpt":"JSPrettier formats the code according to best practices. Install JSPrettier: Go to your folder where you want to run Prettier and check…","rawMarkdownBody":"\n![](https://i.imgur.com/GNpxcbc.jpg \"Photo by Anderson Guerra from Pexels\")\n\nJSPrettier formats the code according to best practices.\n\n> Install JSPrettier:\n```\nnpm install --global prettier\n```\n\n> Go to your folder where you want to run Prettier and check which files need to be formatted by following command\n```\nprettier src/** --check\n```\n> Let Prettier overwrite files\n```\nprettier src/** --write\n```\n>Do not forget to also run Prettier on subfolders such as <code>components</code>. For that you first need to navigate to the parent folder, such as <code>cd src</code> and then:\n```\nprettier components/** --write\n```\n\nTo run preettir for src AND subfoldrs:\n```\nprettier src/**/* --write\n```","frontmatter":{"date":"2019-12-08","title":"JSPrettier","category":"knowledge-base"},"fields":{"slug":"/JSPrettier/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/GNpxcbc.jpg\" title=\"Photo by Anderson Guerra from Pexels\"></p>\n<p>JSPrettier formats the code according to best practices.</p>\n<blockquote>\n<p>Install JSPrettier:</p>\n</blockquote>\n<pre><code>npm install --global prettier\n</code></pre>\n<blockquote>\n<p>Go to your folder where you want to run Prettier and check which files need to be formatted by following command</p>\n</blockquote>\n<pre><code>prettier src/** --check\n</code></pre>\n<blockquote>\n<p>Let Prettier overwrite files</p>\n</blockquote>\n<pre><code>prettier src/** --write\n</code></pre>\n<blockquote>\n<p>Do not forget to also run Prettier on subfolders such as <code>components</code>. For that you first need to navigate to the parent folder, such as <code>cd src</code> and then:</p>\n</blockquote>\n<pre><code>prettier components/** --write\n</code></pre>\n<p>To run preettir for src AND subfoldrs:</p>\n<pre><code>prettier src/**/* --write\n</code></pre>"}},{"node":{"id":"22a9f90f-4432-5bc7-9f17-fbb72457fe28","excerpt":"How to generate SSH key and add to SSH agent? First check if you have existing ssh keys by pasting this to command line: Also check in your…","rawMarkdownBody":"\r\n![](https://i.imgur.com/wOgHAU7.jpg \"Photo by Ylanite Koppens from Pexels\")\r\n\r\nHow to generate SSH key and add to SSH agent?\r\n\r\n> First check if you have existing ssh keys by pasting this to command line:\r\n```\r\nls -al ~/.ssh\r\n```\r\n\r\n> Also check in your folders to see if you already have a public SSH key. By default, the filenames of the public keys are one of the following:\r\n```\r\nid_rsa.pub\r\nid_ecdsa.pub\r\nid_ed25519.pub\r\n```\r\n\r\n> If you found no SSH keys, follow next steps:\r\n\r\n> Open command line and paste the following code. Please note that <code>your_email@example.com</code> is your email address :\r\n```\r\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\r\n```\r\n\r\n> You will be prompted following message, then just press **ENTER**:\r\n```\r\nEnter a file in which to save the key (/Home/.ssh/id_rsa):\r\n```\r\n\r\n> You will be asked to enter your passphrase:\r\n```\r\nEnter passphrase (empty for no passphrase):\r\n```\r\n\r\n> And to confirm it again:\r\n```\r\nEnter same passphrase again:\r\n```\r\n\r\n> Key has been generated now\r\n\r\n> We need to tell our computer we want to use this key\r\n\r\n> First we start our SSH agent\r\n```\r\neval $(ssh-agent -s)\r\n```\r\n\r\n> We will get agent pid\r\n\r\n> Now we need to add the key to our home folder (default location)\r\n```\r\nssh-add ~/.ssh/id_rsa\r\n```\r\n\r\n> Enter the pass phrase\r\n\r\n> The identity has been added\r\n\r\n> Now we need to copy the **PUBLIC** key to our clipboard, so that we can paste it into Github.\r\n\r\n> To do it, we can find the file and open it. It will be in the /Home/.ssh/id_rsa.pub and we can copy it\r\n\r\n> Alternatively you can use the command line to copy the ssh key to clipboard:\r\n```\r\nclip < ~/.ssh/id_rsa.pub\r\n```\r\n> Now it was copied to the clipboard\r\n\r\n> We can go to our Github\r\n\r\n> Click on Profile picture -> Settings -> SSH and GPG keys -> New SSH Key\r\n\r\n> Give it a title like: \"private pc\" or \"home desktop\" or anything\r\n\r\n> Paste the SSH key to the Key box\r\n\r\n> Click the button <code>Add SSH Key</code>\r\n\r\n> We are **DONE** :)\r\n\r\nReferences:\r\n\r\nhttps://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\r\nhttps://www.youtube.com/watch?v=WgZIv5HI44o\r\n\r\n![](https://i.imgur.com/LyXt5ub.jpg \"Photo by Pixabay from Pexels\")","frontmatter":{"date":"2019-12-06","title":"Generate SSH Key for GitHub","category":"knowledge-base"},"fields":{"slug":"/Generate_SSH_Key/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/wOgHAU7.jpg\" title=\"Photo by Ylanite Koppens from Pexels\"></p>\n<p>How to generate SSH key and add to SSH agent?</p>\n<blockquote>\n<p>First check if you have existing ssh keys by pasting this to command line:</p>\n</blockquote>\n<pre><code>ls -al ~/.ssh\n</code></pre>\n<blockquote>\n<p>Also check in your folders to see if you already have a public SSH key. By default, the filenames of the public keys are one of the following:</p>\n</blockquote>\n<pre><code>id_rsa.pub\nid_ecdsa.pub\nid_ed25519.pub\n</code></pre>\n<blockquote>\n<p>If you found no SSH keys, follow next steps:</p>\n</blockquote>\n<blockquote>\n<p>Open command line and paste the following code. Please note that <code>your_email@example.com</code> is your email address :</p>\n</blockquote>\n<pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre>\n<blockquote>\n<p>You will be prompted following message, then just press <strong>ENTER</strong>:</p>\n</blockquote>\n<pre><code>Enter a file in which to save the key (/Home/.ssh/id_rsa):\n</code></pre>\n<blockquote>\n<p>You will be asked to enter your passphrase:</p>\n</blockquote>\n<pre><code>Enter passphrase (empty for no passphrase):\n</code></pre>\n<blockquote>\n<p>And to confirm it again:</p>\n</blockquote>\n<pre><code>Enter same passphrase again:\n</code></pre>\n<blockquote>\n<p>Key has been generated now</p>\n</blockquote>\n<blockquote>\n<p>We need to tell our computer we want to use this key</p>\n</blockquote>\n<blockquote>\n<p>First we start our SSH agent</p>\n</blockquote>\n<pre><code>eval $(ssh-agent -s)\n</code></pre>\n<blockquote>\n<p>We will get agent pid</p>\n</blockquote>\n<blockquote>\n<p>Now we need to add the key to our home folder (default location)</p>\n</blockquote>\n<pre><code>ssh-add ~/.ssh/id_rsa\n</code></pre>\n<blockquote>\n<p>Enter the pass phrase</p>\n</blockquote>\n<blockquote>\n<p>The identity has been added</p>\n</blockquote>\n<blockquote>\n<p>Now we need to copy the <strong>PUBLIC</strong> key to our clipboard, so that we can paste it into Github.</p>\n</blockquote>\n<blockquote>\n<p>To do it, we can find the file and open it. It will be in the /Home/.ssh/id_rsa.pub and we can copy it</p>\n</blockquote>\n<blockquote>\n<p>Alternatively you can use the command line to copy the ssh key to clipboard:</p>\n</blockquote>\n<pre><code>clip &#x3C; ~/.ssh/id_rsa.pub\n</code></pre>\n<blockquote>\n<p>Now it was copied to the clipboard</p>\n</blockquote>\n<blockquote>\n<p>We can go to our Github</p>\n</blockquote>\n<blockquote>\n<p>Click on Profile picture -> Settings -> SSH and GPG keys -> New SSH Key</p>\n</blockquote>\n<blockquote>\n<p>Give it a title like: \"private pc\" or \"home desktop\" or anything</p>\n</blockquote>\n<blockquote>\n<p>Paste the SSH key to the Key box</p>\n</blockquote>\n<blockquote>\n<p>Click the button <code>Add SSH Key</code></p>\n</blockquote>\n<blockquote>\n<p>We are <strong>DONE</strong> :)</p>\n</blockquote>\n<p>References:</p>\n<p><a href=\"https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a>\n<a href=\"https://www.youtube.com/watch?v=WgZIv5HI44o\">https://www.youtube.com/watch?v=WgZIv5HI44o</a></p>\n<p><img src=\"https://i.imgur.com/LyXt5ub.jpg\" title=\"Photo by Pixabay from Pexels\"></p>"}},{"node":{"id":"1e337d41-2668-579b-a3c7-9c284ea42f50","excerpt":"Regular expressions allow to match certain patters. If we want to find char \"a\" in a string \"Today is a nice day\" and replace is with \"ha…","rawMarkdownBody":"\r\n![](https://i.imgur.com/8v0qmr4.jpg \"Photo by Medhat Ayad from Pexels\")\r\n\r\nRegular expressions allow to match certain patters.\r\n\r\nIf we want to find char <code>\"a\"</code> in a string <code>\"Today is a nice day\"</code> and replace is with <code>\"ha\"</code>:\r\n\r\n```\r\nlet sentence=\"Today is a nice day\".replace(\"a\", \"ha\");\r\nconsole.log(sentence);\r\n// output is: \"Todhay is a nice day\"\r\n```\r\n\r\nWhat happened here? Only the first occurence of the <code>\"a\"</code> was found. How can we replace all? We can use regular expressions with <code>g</code> flag.\r\n\r\n```\r\nlet sentence=\"Today is a nice day\".replace(/a/g, \"ha\");\r\nconsole.log(sentence);\r\n// output is: \"Todhay is ha nice dhay\"\r\n```\r\n\r\nHow can we use a variable? For example we want to replace first <code>\"a\"</code>, then <code>\"i\"</code>, etc.\r\n\r\n```\r\nvar replacedChar = \"a\";\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"ha\");\r\nconsole.log(sentence);\r\n// output is: \"Todhay is ha nice dhay\"\r\n\r\nvar replacedChar = \"i\";\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"I\");\r\nconsole.log(sentence);\r\n// output is: \"Today Is  nIce day\"\r\n```\r\n\r\nHow can we do it using variable?\r\n```\r\nvar char=\"d\";\r\nvar replacedChar = char;\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"D\");\r\nconsole.log(sentence);\r\n// output is: \"ToDay is a nice Day\"\r\n```\r\n\r\nHow can we make sure we replace one or another character?\r\n\r\n```\r\nvar char=\"d\";\r\nvar char2=\"a\";\r\nvar replacedChar = char+\"|\"+char2;\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"\");\r\nconsole.log(sentence);\r\n// output is: \"Toy is  nice y\"\r\n```\r\n\r\n\r\n![](https://i.imgur.com/E1iESVO.jpg \"Photo by Ann Lee from Pexels\")","frontmatter":{"date":"2019-12-05","title":"Replace all occurrencies of a string with RegEx","category":"knowledge-base"},"fields":{"slug":"/Replace_all_occurrencies_of_string_using_RegEx/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/8v0qmr4.jpg\" title=\"Photo by Medhat Ayad from Pexels\"></p>\n<p>Regular expressions allow to match certain patters.</p>\n<p>If we want to find char <code>\"a\"</code> in a string <code>\"Today is a nice day\"</code> and replace is with <code>\"ha\"</code>:</p>\n<pre><code>let sentence=\"Today is a nice day\".replace(\"a\", \"ha\");\nconsole.log(sentence);\n// output is: \"Todhay is a nice day\"\n</code></pre>\n<p>What happened here? Only the first occurence of the <code>\"a\"</code> was found. How can we replace all? We can use regular expressions with <code>g</code> flag.</p>\n<pre><code>let sentence=\"Today is a nice day\".replace(/a/g, \"ha\");\nconsole.log(sentence);\n// output is: \"Todhay is ha nice dhay\"\n</code></pre>\n<p>How can we use a variable? For example we want to replace first <code>\"a\"</code>, then <code>\"i\"</code>, etc.</p>\n<pre><code>var replacedChar = \"a\";\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"ha\");\nconsole.log(sentence);\n// output is: \"Todhay is ha nice dhay\"\n\nvar replacedChar = \"i\";\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"I\");\nconsole.log(sentence);\n// output is: \"Today Is  nIce day\"\n</code></pre>\n<p>How can we do it using variable?</p>\n<pre><code>var char=\"d\";\nvar replacedChar = char;\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"D\");\nconsole.log(sentence);\n// output is: \"ToDay is a nice Day\"\n</code></pre>\n<p>How can we make sure we replace one or another character?</p>\n<pre><code>var char=\"d\";\nvar char2=\"a\";\nvar replacedChar = char+\"|\"+char2;\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"\");\nconsole.log(sentence);\n// output is: \"Toy is  nice y\"\n</code></pre>\n<p><img src=\"https://i.imgur.com/E1iESVO.jpg\" title=\"Photo by Ann Lee from Pexels\"></p>"}},{"node":{"id":"e4eb5a76-5724-5c1a-a8fe-b7bb595a090d","excerpt":"How can we render an element under certain condition? Unfortunatlly, we cannot use if statements within JSX like: It is due to compiling…","rawMarkdownBody":"\r\n![](https://i.imgur.com/BRbkVil.jpg \"Photo by Aleksandar Pasaric from Pexels\")\r\n\r\nHow can we render an element under certain condition? Unfortunatlly, we cannot use <code>if</code> statements within JSX like:\r\n```\r\n(<h1>\r\n  {\r\n    if (purchase.complete) {\r\n      'Thank you for placing an order!'\r\n    }\r\n  }\r\n</h1>)\r\n```\r\nIt is due to compiling.\r\n\r\n**Alternative 1:**\r\n```\r\nlet message;\r\n\r\nif (user.age >= 18) {\r\n  meessage= (\r\n    <h1>\r\n      Let´s go out!\r\n    </h1>\r\n  );\r\n} else {\r\n  message = (\r\n    <h1>\r\n      Let´s study\r\n    </h1>\r\n  );\r\n}\r\n```\r\n\r\n**Alternative 2:**\r\n```\r\nconst headline = (\r\n  <h1>\r\n    { age >= 18 ? 'Let´s go out' : 'Let´s study' }\r\n  </h1>\r\n);\r\n```\r\n\r\n**Alternative 3:**\r\n```\r\nconst lunch = (\r\n  <ul>\r\n    <li>Foods</li>\r\n    { !baby && <li>Pizza</li> }\r\n    { age > 15 && <li>Salad</li> }\r\n    { age > 25 && <li>Veggies</li> }\r\n  </ul>\r\n);\r\n\r\n```\r\n\r\n![](https://i.imgur.com/4YCrCOR.jpg \"Photo by Mudassir Ali from Pexels\")","frontmatter":{"date":"2019-12-04","title":"Conditionally render a component","category":"knowledge-base"},"fields":{"slug":"/Conditionally_Render_Component/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/BRbkVil.jpg\" title=\"Photo by Aleksandar Pasaric from Pexels\"></p>\n<p>How can we render an element under certain condition? Unfortunatlly, we cannot use <code>if</code> statements within JSX like:</p>\n<pre><code>(&#x3C;h1>\n  {\n    if (purchase.complete) {\n      'Thank you for placing an order!'\n    }\n  }\n&#x3C;/h1>)\n</code></pre>\n<p>It is due to compiling.</p>\n<p><strong>Alternative 1:</strong></p>\n<pre><code>let message;\n\nif (user.age >= 18) {\n  meessage= (\n    &#x3C;h1>\n      Let´s go out!\n    &#x3C;/h1>\n  );\n} else {\n  message = (\n    &#x3C;h1>\n      Let´s study\n    &#x3C;/h1>\n  );\n}\n</code></pre>\n<p><strong>Alternative 2:</strong></p>\n<pre><code>const headline = (\n  &#x3C;h1>\n    { age >= 18 ? 'Let´s go out' : 'Let´s study' }\n  &#x3C;/h1>\n);\n</code></pre>\n<p><strong>Alternative 3:</strong></p>\n<pre><code>const lunch = (\n  &#x3C;ul>\n    &#x3C;li>Foods&#x3C;/li>\n    { !baby &#x26;&#x26; &#x3C;li>Pizza&#x3C;/li> }\n    { age > 15 &#x26;&#x26; &#x3C;li>Salad&#x3C;/li> }\n    { age > 25 &#x26;&#x26; &#x3C;li>Veggies&#x3C;/li> }\n  &#x3C;/ul>\n);\n</code></pre>\n<p><img src=\"https://i.imgur.com/4YCrCOR.jpg\" title=\"Photo by Mudassir Ali from Pexels\"></p>"}},{"node":{"id":"dfe6c592-811e-575b-aabd-348548aae6b4","excerpt":"If you run into an Please tell me who you are.error: You can solve it with following steps: Reference: https://stackoverflow.com/questions…","rawMarkdownBody":"\r\n![](https://i.imgur.com/J4QhoGt.jpg \"Photo by \r\nKristin De Soto from Pexels\")\r\n\r\nIf you run into an <code>Please tell me who you are.</code>error:\r\n```\r\n*** Please tell me who you are.\r\nRun\r\n  git config --global user.email \"you@example.com\"\r\n  git config --global user.name \"Your Name\"\r\nto set your account's default identity.\r\nOmit --global to set the identity only in this repository.\r\nfatal: unable to auto-detect email address (got 'addania@addania-Lenovo-IdeaPad-Z510.(none)')\r\n\r\n```\r\n\r\nYou can solve it with following steps:\r\n```\r\n1.git init\r\n2.git config user.name \"someone\"\r\n3.git config user.email \"someone@someplace.com\"\r\n4.git add *\r\n5.git commit -m \"some init msg\"\r\n```\r\n\r\nReference:\r\n\r\nhttps://stackoverflow.com/questions/11656761/git-please-tell-me-who-you-are-error","frontmatter":{"date":"2019-12-03","title":"Tell me who you are error","category":"knowledge-base"},"fields":{"slug":"/Tell_Me_Who_You_Are/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/J4QhoGt.jpg\" title=\"Photo by \nKristin De Soto from Pexels\"></p>\n<p>If you run into an <code>Please tell me who you are.</code>error:</p>\n<pre><code>*** Please tell me who you are.\nRun\n  git config --global user.email \"you@example.com\"\n  git config --global user.name \"Your Name\"\nto set your account's default identity.\nOmit --global to set the identity only in this repository.\nfatal: unable to auto-detect email address (got 'addania@addania-Lenovo-IdeaPad-Z510.(none)')\n</code></pre>\n<p>You can solve it with following steps:</p>\n<pre><code>1.git init\n2.git config user.name \"someone\"\n3.git config user.email \"someone@someplace.com\"\n4.git add *\n5.git commit -m \"some init msg\"\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/11656761/git-please-tell-me-who-you-are-error\">https://stackoverflow.com/questions/11656761/git-please-tell-me-who-you-are-error</a></p>"}},{"node":{"id":"fe459895-30b2-54b1-ba44-9bcc0503a213","excerpt":"Let's talk about exporting / importing / ... and ... smuggling :) There are 2 types of exports: default and named exports. And so are the…","rawMarkdownBody":"\r\n![](https://i.imgur.com/1S7qNP7.jpg \"Photo by Pixabay from Pexels\")\r\n\r\n\r\nLet's talk about exporting / importing / ... and ... smuggling :)\r\n\r\n\r\nThere are 2 types of exports: **default** and **named** exports. And so are the imports.\r\n\r\n\r\n**Named exports** are exported with a given name of the component. We can't change the name of the exported component.\r\n\r\n**Default exports** means we can change name of the exported component.\r\n\r\nExample of default export:\r\n```\r\nexport default App\r\n```\r\n\r\nThen import looks like this:\r\n```\r\nimport App from \"./app.js\";\r\n```\r\n\r\nBut we can also write\r\n```\r\nimport Unicorn from \"./app.js\";\r\n```\r\n\r\nNotice the lack of curly braces around the name.\r\n\r\nExample of named export:\r\n```\r\nexport class App extends React.Componenet(){\r\n}\r\n```\r\n\r\nImporting named export:\r\n```\r\nimport { App } from \"./app.js\"\r\n```\r\nNotice how we need to wrap the name of component into curly braces.\r\n\r\nIn the above example we cannot change the name, unless I write as:\r\n```\r\nimport { App as Unicorn } from \"./app.js\"\r\n```\r\n\r\nAlternative to named export is:\r\n```\r\nclass App extends React.Componenet(){\r\n...}\r\nexport {\r\n  App,\r\n  ..\r\n}\r\n```\r\n\r\nIn above example I can export more component at the same time:\r\n```\r\nexport {\r\n  App, \r\n  Something,\r\n  AnotherThing\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/FMsL26h.jpg \"Photo by Pixabay from Pexels\")\r\n","frontmatter":{"date":"2019-12-01","title":"Exports","category":"knowledge-base"},"fields":{"slug":"/Exports/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/1S7qNP7.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>Let's talk about exporting / importing / ... and ... smuggling :)</p>\n<p>There are 2 types of exports: <strong>default</strong> and <strong>named</strong> exports. And so are the imports.</p>\n<p><strong>Named exports</strong> are exported with a given name of the component. We can't change the name of the exported component.</p>\n<p><strong>Default exports</strong> means we can change name of the exported component.</p>\n<p>Example of default export:</p>\n<pre><code>export default App\n</code></pre>\n<p>Then import looks like this:</p>\n<pre><code>import App from \"./app.js\";\n</code></pre>\n<p>But we can also write</p>\n<pre><code>import Unicorn from \"./app.js\";\n</code></pre>\n<p>Notice the lack of curly braces around the name.</p>\n<p>Example of named export:</p>\n<pre><code>export class App extends React.Componenet(){\n}\n</code></pre>\n<p>Importing named export:</p>\n<pre><code>import { App } from \"./app.js\"\n</code></pre>\n<p>Notice how we need to wrap the name of component into curly braces.</p>\n<p>In the above example we cannot change the name, unless I write as:</p>\n<pre><code>import { App as Unicorn } from \"./app.js\"\n</code></pre>\n<p>Alternative to named export is:</p>\n<pre><code>class App extends React.Componenet(){\n...}\nexport {\n  App,\n  ..\n}\n</code></pre>\n<p>In above example I can export more component at the same time:</p>\n<pre><code>export {\n  App, \n  Something,\n  AnotherThing\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/FMsL26h.jpg\" title=\"Photo by Pixabay from Pexels\"></p>"}},{"node":{"id":"37b6b4af-8b1b-59d2-9a53-69259a583e6f","excerpt":"Let's talk about packages our app is depending on. These can be found in the package.json file. There 2 types of dependencies:…","rawMarkdownBody":"\r\n![](https://i.imgur.com/xa1x0Gq.jpg \"Photo by Kim Stiver from Pexels\")\r\n\r\nLet's talk about packages our app is depending on. These can be found in the package.json file. There 2 types of dependencies:\r\n\r\n1/dependencies\r\n2/devDependencies\r\n\r\n**devDependeencies** are not directly used by the app when it is building, testing, running. \r\n\r\nExample of devDependencies:\r\n```\r\ngh-pages\r\n```\r\n\r\n**dependencies** are packages which are necessary to build, run, test the APP. They are most of the time imported like: \r\n```\r\nimport React rom \"react\"\r\nimport Bootstrap ...\r\n```\r\n\r\nTo install dependecies, type this in command line:\r\n```\r\nnpm install\r\n```\r\n\r\n<code>npm install</code> installs all **devDependancies** and **dependeencies** which are specified in package.json!\r\n\r\n<code>npm install</code> **MUST** be triggered manually by user. I decide when and which dependency I want to install. It must be installed in the folder where package.json. If it is not where package.json, it will throw an error (*\"hey, bro you want me to install pckages?? But there is no packages definition, so what should I do??\"*)\r\n\r\nIf it is installed then I have a node_modules folder in my project folder.\r\n\r\n<code>npm install</code> is done once and for all for each package (it will install all packages if I don't provide name of package) :)\r\n\r\n> To install individual package, for example bootstrap\r\n```\r\nnpm install bootstrap\r\n```\r\n\r\n<code>npm start</code> will look into package.json in the script section under command <code>start</code>. It will execute whatever is in there. For applications created by create-react-app, there will be:\r\n```\r\n\"start\": \"react-scripts start\",\r\n```\r\n\r\n><code>react-scripts start</code> will start local host environment under port number: 3000\r\n\r\n> If I have gatsby project, I can also write\r\n```\r\nnpm start\r\n```\r\n\r\n> <code>npm run develop</code> will also execute whatever is in package.json, in scripts under <code>start</code>\r\n```\r\n\"npm run develop\",\r\n```\r\n\r\n> This is then equivalent to\r\n```\r\ngatsby develop\r\n```\r\n\r\n> When I have command:\r\n```\r\nnpm run develop\r\n```\r\n\r\n> <code>npm run</code> means it will look into package.json under scripts and select script called\r\n```\r\n\"develop\"\r\n```\r\n\r\n> Then under develop we have:\r\n```\r\n\"develop\": \"gatsby develop\",\r\n```\r\n\r\n> <code>\"gatsby develop\"</code> is the FINAL thing FINALLY\r\n```\r\nphew\r\n```\r\n\r\n> I should always use \r\n```\r\nnpm run ....\r\n```\r\n\r\n> For example:\r\n```\r\nnpm run start\r\n```\r\n\r\nor\r\n```\r\nnpm run develop\r\n```\r\n\r\nor \r\n```\r\nnpm run test\r\n```\r\n\r\n> But because start and test are such used and common, you can skip word <code>run</code> they can be abbreviated to\r\n```\r\nnpm start\r\n```\r\n\r\nor\r\n```\r\nnpm test\r\n```\r\n\r\n> However, you CANNOT abbreviate npm develop, it needs to include run\r\n```\r\nnpm run develop\r\n```\r\n\r\n![Package](https://i.imgur.com/G6XuINT.jpg \"Photo by Pixabay from Pexels\")\r\n\r\n**Dependencies Management**\r\n\r\n> When I work on a project and test out things, I will probably install a lot of dependencies in my project. It can happen that the final version of the project will not need all of them. For that reason it is a good idea to tidy up the dependencies when the project is final. In order to remove dependencies we do the following:\r\n\r\n> Open the <code>package.json</code> and remove those those dependencies which you don’t need. But... how do I know from all of them which ones are part of the final version of the project? We can use a tool called: <code>npm-check</code>, which will check which dependencies are part of the last  version of the project and which dependencies need updating. \r\n\r\n> In order to download the npm-check, write this to the terminal:\r\n```\r\nnpm install -g npm-check\r\n```\r\n\r\n> <code>-g</code> means that the package will be installed globally\r\n\r\n> Then to use the <code>npm-check</code>, navigate to your project folder and paste:\r\n```\r\nnpm-check\r\n```\r\n\r\n> You will see the list of dependencies in terminal which are not used by your project or which need updating.\r\n\r\n> Afterwards go to your <code>package.json</code> and delete unnecessary dependencies.\r\n\r\n> Afterwards we can remove/delete entire <code>node_modules</code> folder in the project folder. \r\n\r\n> Deleting <code>node_modules</code> from terminal, paste this:\r\n```\r\nrm -rf node_modules\r\n```\r\n> Above will delete entire <code>node_modules</code> folder\r\n\r\n> Alternatively you can also delete only a particular package by:\r\n```\r\nnpm prune [name of package]\r\n```\r\n\r\n> When everything we need is deleted, we can install only relevant dependencies which we left in <code>package.json</code>again by:\r\n```\r\nnpm install\r\n```\r\n\r\n> Your project is now dependent only on relevant packages and up-to-date! Yay! :)\r\n\r\n\r\n> How to install new version of npm\r\n```\r\nnpm install -g npm\r\n\r\n```\r\n\r\n>>> To change node version:\r\n```\r\nnvm use 8.10.0\r\n```\r\n\r\nReference:\r\n\r\nhttps://stackoverflow.com/questions/21122342/how-to-clean-node-modules-folder-of-packages-that-are-not-in-package-json\r\n\r\n![Package](https://i.imgur.com/Y5egUqF.jpg \"Photo by freestocks.org from Pexels\")","frontmatter":{"date":"2019-12-01","title":"NPM Packages","category":"knowledge-base"},"fields":{"slug":"/NPM_Packages/"},"timeToRead":4,"html":"<p><img src=\"https://i.imgur.com/xa1x0Gq.jpg\" title=\"Photo by Kim Stiver from Pexels\"></p>\n<p>Let's talk about packages our app is depending on. These can be found in the package.json file. There 2 types of dependencies:</p>\n<p>1/dependencies\n2/devDependencies</p>\n<p><strong>devDependeencies</strong> are not directly used by the app when it is building, testing, running. </p>\n<p>Example of devDependencies:</p>\n<pre><code>gh-pages\n</code></pre>\n<p><strong>dependencies</strong> are packages which are necessary to build, run, test the APP. They are most of the time imported like: </p>\n<pre><code>import React rom \"react\"\nimport Bootstrap ...\n</code></pre>\n<p>To install dependecies, type this in command line:</p>\n<pre><code>npm install\n</code></pre>\n<p><code>npm install</code> installs all <strong>devDependancies</strong> and <strong>dependeencies</strong> which are specified in package.json!</p>\n<p><code>npm install</code> <strong>MUST</strong> be triggered manually by user. I decide when and which dependency I want to install. It must be installed in the folder where package.json. If it is not where package.json, it will throw an error (<em>\"hey, bro you want me to install pckages?? But there is no packages definition, so what should I do??\"</em>)</p>\n<p>If it is installed then I have a node_modules folder in my project folder.</p>\n<p><code>npm install</code> is done once and for all for each package (it will install all packages if I don't provide name of package) :)</p>\n<blockquote>\n<p>To install individual package, for example bootstrap</p>\n</blockquote>\n<pre><code>npm install bootstrap\n</code></pre>\n<p><code>npm start</code> will look into package.json in the script section under command <code>start</code>. It will execute whatever is in there. For applications created by create-react-app, there will be:</p>\n<pre><code>\"start\": \"react-scripts start\",\n</code></pre>\n<blockquote>\n<p><code>react-scripts start</code> will start local host environment under port number: 3000</p>\n</blockquote>\n<blockquote>\n<p>If I have gatsby project, I can also write</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<blockquote>\n<p><code>npm run develop</code> will also execute whatever is in package.json, in scripts under <code>start</code></p>\n</blockquote>\n<pre><code>\"npm run develop\",\n</code></pre>\n<blockquote>\n<p>This is then equivalent to</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>When I have command:</p>\n</blockquote>\n<pre><code>npm run develop\n</code></pre>\n<blockquote>\n<p><code>npm run</code> means it will look into package.json under scripts and select script called</p>\n</blockquote>\n<pre><code>\"develop\"\n</code></pre>\n<blockquote>\n<p>Then under develop we have:</p>\n</blockquote>\n<pre><code>\"develop\": \"gatsby develop\",\n</code></pre>\n<blockquote>\n<p><code>\"gatsby develop\"</code> is the FINAL thing FINALLY</p>\n</blockquote>\n<pre><code>phew\n</code></pre>\n<blockquote>\n<p>I should always use </p>\n</blockquote>\n<pre><code>npm run ....\n</code></pre>\n<blockquote>\n<p>For example:</p>\n</blockquote>\n<pre><code>npm run start\n</code></pre>\n<p>or</p>\n<pre><code>npm run develop\n</code></pre>\n<p>or </p>\n<pre><code>npm run test\n</code></pre>\n<blockquote>\n<p>But because start and test are such used and common, you can skip word <code>run</code> they can be abbreviated to</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<p>or</p>\n<pre><code>npm test\n</code></pre>\n<blockquote>\n<p>However, you CANNOT abbreviate npm develop, it needs to include run</p>\n</blockquote>\n<pre><code>npm run develop\n</code></pre>\n<p><img src=\"https://i.imgur.com/G6XuINT.jpg\" alt=\"Package\" title=\"Photo by Pixabay from Pexels\"></p>\n<p><strong>Dependencies Management</strong></p>\n<blockquote>\n<p>When I work on a project and test out things, I will probably install a lot of dependencies in my project. It can happen that the final version of the project will not need all of them. For that reason it is a good idea to tidy up the dependencies when the project is final. In order to remove dependencies we do the following:</p>\n</blockquote>\n<blockquote>\n<p>Open the <code>package.json</code> and remove those those dependencies which you don’t need. But... how do I know from all of them which ones are part of the final version of the project? We can use a tool called: <code>npm-check</code>, which will check which dependencies are part of the last  version of the project and which dependencies need updating. </p>\n</blockquote>\n<blockquote>\n<p>In order to download the npm-check, write this to the terminal:</p>\n</blockquote>\n<pre><code>npm install -g npm-check\n</code></pre>\n<blockquote>\n<p><code>-g</code> means that the package will be installed globally</p>\n</blockquote>\n<blockquote>\n<p>Then to use the <code>npm-check</code>, navigate to your project folder and paste:</p>\n</blockquote>\n<pre><code>npm-check\n</code></pre>\n<blockquote>\n<p>You will see the list of dependencies in terminal which are not used by your project or which need updating.</p>\n</blockquote>\n<blockquote>\n<p>Afterwards go to your <code>package.json</code> and delete unnecessary dependencies.</p>\n</blockquote>\n<blockquote>\n<p>Afterwards we can remove/delete entire <code>node_modules</code> folder in the project folder. </p>\n</blockquote>\n<blockquote>\n<p>Deleting <code>node_modules</code> from terminal, paste this:</p>\n</blockquote>\n<pre><code>rm -rf node_modules\n</code></pre>\n<blockquote>\n<p>Above will delete entire <code>node_modules</code> folder</p>\n</blockquote>\n<blockquote>\n<p>Alternatively you can also delete only a particular package by:</p>\n</blockquote>\n<pre><code>npm prune [name of package]\n</code></pre>\n<blockquote>\n<p>When everything we need is deleted, we can install only relevant dependencies which we left in <code>package.json</code>again by:</p>\n</blockquote>\n<pre><code>npm install\n</code></pre>\n<blockquote>\n<p>Your project is now dependent only on relevant packages and up-to-date! Yay! :)</p>\n</blockquote>\n<blockquote>\n<p>How to install new version of npm</p>\n</blockquote>\n<pre><code>npm install -g npm\n</code></pre>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>To change node version:</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<pre><code>nvm use 8.10.0\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/21122342/how-to-clean-node-modules-folder-of-packages-that-are-not-in-package-json\">https://stackoverflow.com/questions/21122342/how-to-clean-node-modules-folder-of-packages-that-are-not-in-package-json</a></p>\n<p><img src=\"https://i.imgur.com/Y5egUqF.jpg\" alt=\"Package\" title=\"Photo by freestocks.org from Pexels\"></p>"}},{"node":{"id":"3a773df8-899d-5e51-b5cd-bc9ffffe92f2","excerpt":"This software allows us to switch between different versions of the node. Why to want to switch? Because some capabilities are not supported…","rawMarkdownBody":"\r\n![](https://i.imgur.com/GUDW6qM.jpg \"Photo by Vitaly Vlasov from Pexels\")\r\n\r\nThis software allows us to switch between different versions of the node. Why to want to switch? Because some capabilities are not supported in certain versions of Node. For example, you have a project which has some dependencies on different packages. If you want to <code>npm install</code> them, then you get errors. One of the reasons can be that you are using latest (not yet stable) version of node.\r\n\r\nNode in general is installed globally for all projects. To be able to change versions we need to de-install it and only use NVM from now on to switch between versions. Each project can have different node version then. It is used a lot in professional dev life.\r\n\r\n> Paste this to command line (it will be installed globally, no matter in which folder I currently am):\r\n```\r\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash \r\n```\r\n\r\n> Restart the terminal\r\n\r\n> Write this so that NVM uses previous (already installed) SYSTEM version of NODE:\r\n```\r\nnvm use system\r\n```\r\n\r\n>If I want to see all shortcuts for nvm\r\n```\r\nnvm\r\n```\r\n\r\n> If I want to see current version\r\n```\r\nnvm current\r\n```\r\n\r\n> To install a specific version of the node **GLOBALLY** to be able to use it later on in the project:\r\n```\r\nnvm install 10.0.0\r\n```\r\n\r\n> Then we will need to add the different version of node to a specific project. \r\n\r\n> Go to project directory\r\n\r\n> In the root location of the project (where package.json is) create a new file with touch command. File will be calle <code>.nvmrc</code>:\r\n```\r\ntouch .nvmrc\r\n```\r\n\r\n> Then you open that file and paste number of version in it\r\n```\r\n10.0\r\n```\r\n\r\nAlternatively you can combine the above two command in one:\r\n```\r\necho \"10.0\" > .nvmrc\r\n```","frontmatter":{"date":"2019-11-30","title":"Node Version Manager - NVM","category":"knowledge-base"},"fields":{"slug":"/NVM/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/GUDW6qM.jpg\" title=\"Photo by Vitaly Vlasov from Pexels\"></p>\n<p>This software allows us to switch between different versions of the node. Why to want to switch? Because some capabilities are not supported in certain versions of Node. For example, you have a project which has some dependencies on different packages. If you want to <code>npm install</code> them, then you get errors. One of the reasons can be that you are using latest (not yet stable) version of node.</p>\n<p>Node in general is installed globally for all projects. To be able to change versions we need to de-install it and only use NVM from now on to switch between versions. Each project can have different node version then. It is used a lot in professional dev life.</p>\n<blockquote>\n<p>Paste this to command line (it will be installed globally, no matter in which folder I currently am):</p>\n</blockquote>\n<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash \n</code></pre>\n<blockquote>\n<p>Restart the terminal</p>\n</blockquote>\n<blockquote>\n<p>Write this so that NVM uses previous (already installed) SYSTEM version of NODE:</p>\n</blockquote>\n<pre><code>nvm use system\n</code></pre>\n<blockquote>\n<p>If I want to see all shortcuts for nvm</p>\n</blockquote>\n<pre><code>nvm\n</code></pre>\n<blockquote>\n<p>If I want to see current version</p>\n</blockquote>\n<pre><code>nvm current\n</code></pre>\n<blockquote>\n<p>To install a specific version of the node <strong>GLOBALLY</strong> to be able to use it later on in the project:</p>\n</blockquote>\n<pre><code>nvm install 10.0.0\n</code></pre>\n<blockquote>\n<p>Then we will need to add the different version of node to a specific project. </p>\n</blockquote>\n<blockquote>\n<p>Go to project directory</p>\n</blockquote>\n<blockquote>\n<p>In the root location of the project (where package.json is) create a new file with touch command. File will be calle <code>.nvmrc</code>:</p>\n</blockquote>\n<pre><code>touch .nvmrc\n</code></pre>\n<blockquote>\n<p>Then you open that file and paste number of version in it</p>\n</blockquote>\n<pre><code>10.0\n</code></pre>\n<p>Alternatively you can combine the above two command in one:</p>\n<pre><code>echo \"10.0\" > .nvmrc\n</code></pre>"}},{"node":{"id":"ac813bd1-ff8d-5d34-b944-d4b2cf4d128d","excerpt":"Cloning Github repository means creating a copy of REMOTE repo locally to your machine. How to do it?  Go to repository root folder (top one…","rawMarkdownBody":"\r\n![](https://i.imgur.com/GmB70yE.jpg \"Photo by Trinity Kubassek from Pexels\")\r\n\r\nCloning Github repository means creating a copy of **REMOTE** repo locally to your machine. How to do it? \r\n\r\n> Go to repository root folder (top one)\r\n\r\n> Click the big GREEN (frog) button called:\r\n```\r\nClone of Download\r\n```\r\n\r\n> Copy the url:\r\n```\r\nhttps://github.com/nvm-sh/nvm.git\r\n```\r\n\r\n> Go to the project folder\r\n\r\n> Paste this to the command line:\r\n```\r\ngit clone https://github.com/nvm-sh/nvm.git\r\n```\r\n\r\nHow to clone repo from another branch (for example gh-pages)?\r\n\r\n> Go to repository and click on <code>clone/download</code> button (green)\r\n\r\n>Then copy the repo link. For example:\r\n```\r\ngit@github.com:addania/coding.git\r\n```\r\n\r\n>Then go to terminal and paste (where gh-pages is the name of the branch from where we want to clone):\r\n```\r\ngit clone git@github.com:addania/coding.git -b gh-pages\r\n```\r\n>Our repository was successfully cloned to **LOCAL**. Yay!\r\n\r\n> Then you must also install all dependncies which are in the package.json with:\r\n```\r\nnpm install\r\n```\r\n\r\n![](https://i.imgur.com/yA5ouqS.jpg \"Photo by Kat Jayne from Pexels\")","frontmatter":{"date":"2019-11-29","title":"Cloning Github Repository","category":"knowledge-base"},"fields":{"slug":"/Cloning_Github_Repository/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/GmB70yE.jpg\" title=\"Photo by Trinity Kubassek from Pexels\"></p>\n<p>Cloning Github repository means creating a copy of <strong>REMOTE</strong> repo locally to your machine. How to do it? </p>\n<blockquote>\n<p>Go to repository root folder (top one)</p>\n</blockquote>\n<blockquote>\n<p>Click the big GREEN (frog) button called:</p>\n</blockquote>\n<pre><code>Clone of Download\n</code></pre>\n<blockquote>\n<p>Copy the url:</p>\n</blockquote>\n<pre><code>https://github.com/nvm-sh/nvm.git\n</code></pre>\n<blockquote>\n<p>Go to the project folder</p>\n</blockquote>\n<blockquote>\n<p>Paste this to the command line:</p>\n</blockquote>\n<pre><code>git clone https://github.com/nvm-sh/nvm.git\n</code></pre>\n<p>How to clone repo from another branch (for example gh-pages)?</p>\n<blockquote>\n<p>Go to repository and click on <code>clone/download</code> button (green)</p>\n</blockquote>\n<blockquote>\n<p>Then copy the repo link. For example:</p>\n</blockquote>\n<pre><code>git@github.com:addania/coding.git\n</code></pre>\n<blockquote>\n<p>Then go to terminal and paste (where gh-pages is the name of the branch from where we want to clone):</p>\n</blockquote>\n<pre><code>git clone git@github.com:addania/coding.git -b gh-pages\n</code></pre>\n<blockquote>\n<p>Our repository was successfully cloned to <strong>LOCAL</strong>. Yay!</p>\n</blockquote>\n<blockquote>\n<p>Then you must also install all dependncies which are in the package.json with:</p>\n</blockquote>\n<pre><code>npm install\n</code></pre>\n<p><img src=\"https://i.imgur.com/yA5ouqS.jpg\" title=\"Photo by Kat Jayne from Pexels\"></p>"}},{"node":{"id":"71f65464-6d5a-5399-be53-e3b0636b583d","excerpt":"Step-By-Step Guide for Dummies on how to publish your create-react-app website on Github pages Create empty GitHub repository, for example…","rawMarkdownBody":"\r\n![](https://i.imgur.com/4tBPaPE.png \"React logo\")\r\n\r\nStep-By-Step Guide for Dummies on how to publish your create-react-app website on Github pages\r\n\r\n> Create empty GitHub repository, for example called monsterFactory. It should be a public repository and do NOT initialize this repository with README\r\n\r\n> Start Ubuntu Command line\r\n\r\n> Navigate to your projects folder\r\n```\r\ncd projects\r\n```\r\n\r\n> Create new project\r\n```\r\nnpx create-react-app monster_factory\r\n```\r\n> Go to your new project folder\r\n```\r\ncd monster_factory\r\n```\r\n\r\n> Open package.json and paste your github repository url to homepage\r\n```\r\n\"homepage\": \"https://addania.github.io/monsterFactory\",\r\n```\r\n\r\n> Install gh-pages:\r\n```\r\nnpm install --save gh-pages\r\n```\r\n> Open package.json and paste following code:\r\n```\r\n\"scripts\": {\r\n   \"predeploy\": \"npm run build\",\r\n   \"deploy\": \"gh-pages -d build\",\r\n   \"start\": \"react-scripts start\",\r\n   \"build\": \"react-scripts build\",\r\n```\r\n\r\n> Initiate git repository\r\n```\r\ngit init\r\n```\r\n> Add your username:\r\n```\r\ngit config user.name \"someone\"\r\n```\r\n\r\n>Add your email:\r\n```\r\ngit config user.email \"someone@someplace.com\"\r\n```\r\n\r\n> Create a **REMOTE** repository. Remote repository can be called anything, but convention is to call it origin\r\n```\r\ngit remote add origin git@github.com:addania/monsterFactory.git \r\n```\r\n\r\n> Then push our **PRODUCTION** files (compressed publish-ready files) to **REMOTE** by <code>npm run deploy</code> and publish it.\r\n```\r\nnpm run deploy\r\n```\r\n\r\nPlease note that we don't need to do <code>git add .</code> because now we only want to publish the site! <code>git add, commit, push</code>code>  is only if I want to upload my real source code to Github.\r\n\r\n> When I want to upload and backup my <code>precious</code> working code to Github, it has nothing to do with **PUBLISHING** production files by <code>npm run deploy</code>. \r\n\r\n> To upload and backup my files, I add my project files to **LOCAL** git\r\n```\r\ngit add .\r\n```\r\n> Then I commit my project files to **LOCAL** git\r\n```\r\ngit commit -m \"first commit\"\r\n```\r\n\r\n> Then I push it to **REMOTE** repository:\r\n```\r\ngit push origin master\r\n```\r\n\r\n> I will be asked for my passphrase\r\n\r\n> My <code>precious</code> is stored securely\r\n\r\nUseful sources:\r\n\r\nhttps://create-react-app.dev/docs/deployment/#github-pages\r\n","frontmatter":{"date":"2019-11-29","title":"Publish Create React App to Github Pages","category":"knowledge-base"},"fields":{"slug":"/Publish_Create_React_App_on_GithubPages/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/4tBPaPE.png\" title=\"React logo\"></p>\n<p>Step-By-Step Guide for Dummies on how to publish your create-react-app website on Github pages</p>\n<blockquote>\n<p>Create empty GitHub repository, for example called monsterFactory. It should be a public repository and do NOT initialize this repository with README</p>\n</blockquote>\n<blockquote>\n<p>Start Ubuntu Command line</p>\n</blockquote>\n<blockquote>\n<p>Navigate to your projects folder</p>\n</blockquote>\n<pre><code>cd projects\n</code></pre>\n<blockquote>\n<p>Create new project</p>\n</blockquote>\n<pre><code>npx create-react-app monster_factory\n</code></pre>\n<blockquote>\n<p>Go to your new project folder</p>\n</blockquote>\n<pre><code>cd monster_factory\n</code></pre>\n<blockquote>\n<p>Open package.json and paste your github repository url to homepage</p>\n</blockquote>\n<pre><code>\"homepage\": \"https://addania.github.io/monsterFactory\",\n</code></pre>\n<blockquote>\n<p>Install gh-pages:</p>\n</blockquote>\n<pre><code>npm install --save gh-pages\n</code></pre>\n<blockquote>\n<p>Open package.json and paste following code:</p>\n</blockquote>\n<pre><code>\"scripts\": {\n   \"predeploy\": \"npm run build\",\n   \"deploy\": \"gh-pages -d build\",\n   \"start\": \"react-scripts start\",\n   \"build\": \"react-scripts build\",\n</code></pre>\n<blockquote>\n<p>Initiate git repository</p>\n</blockquote>\n<pre><code>git init\n</code></pre>\n<blockquote>\n<p>Add your username:</p>\n</blockquote>\n<pre><code>git config user.name \"someone\"\n</code></pre>\n<blockquote>\n<p>Add your email:</p>\n</blockquote>\n<pre><code>git config user.email \"someone@someplace.com\"\n</code></pre>\n<blockquote>\n<p>Create a <strong>REMOTE</strong> repository. Remote repository can be called anything, but convention is to call it origin</p>\n</blockquote>\n<pre><code>git remote add origin git@github.com:addania/monsterFactory.git \n</code></pre>\n<blockquote>\n<p>Then push our <strong>PRODUCTION</strong> files (compressed publish-ready files) to <strong>REMOTE</strong> by <code>npm run deploy</code> and publish it.</p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<p>Please note that we don't need to do <code>git add .</code> because now we only want to publish the site! <code>git add, commit, push</code>code>  is only if I want to upload my real source code to Github.</p>\n<blockquote>\n<p>When I want to upload and backup my <code>precious</code> working code to Github, it has nothing to do with <strong>PUBLISHING</strong> production files by <code>npm run deploy</code>. </p>\n</blockquote>\n<blockquote>\n<p>To upload and backup my files, I add my project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Then I commit my project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git commit -m \"first commit\"\n</code></pre>\n<blockquote>\n<p>Then I push it to <strong>REMOTE</strong> repository:</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>I will be asked for my passphrase</p>\n</blockquote>\n<blockquote>\n<p>My <code>precious</code> is stored securely</p>\n</blockquote>\n<p>Useful sources:</p>\n<p><a href=\"https://create-react-app.dev/docs/deployment/#github-pages\">https://create-react-app.dev/docs/deployment/#github-pages</a></p>"}},{"node":{"id":"b7eff398-53af-581f-af8e-a523682b07a4","excerpt":"There are many loops in JS which we can use: for - looping through a block of code for a given number of times for/in - looping through…","rawMarkdownBody":"\r\n![](https://i.imgur.com/VhAOIMg.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nThere are many loops in JS which we can use:\r\n\r\n**for** - looping through a block of code for a given number of times\r\n\r\n**for/in** - looping through properties(values) of an <code>object</code>\r\n\r\n**for/of** - looping through values of an <code>array</code>\r\n\r\n**while** - looping through a block of code as long as a specified condition is true\r\n\r\n**do/while** - looping through a block of code once, and then repeating the loop as long as a specified condition is true\r\n\r\n**for**\r\n```\r\nlet array=[\"Hello\", \"universe\"]\r\nfor (let item =0; item < array.length; item++){\r\n  console.log (item);\r\n}\r\n// Output:\r\n//Hello\r\n//universe\r\n```\r\n\r\n**for/in**\r\n```\r\nfunction loop() {\r\n  var person = {firstName:\"Mia\", lastName:\"Schw\", age:32};\r\n  var text = \"\";\r\n  var item;\r\n  for (item in person) {\r\n    text += person[item] + \" \";\r\n  }\r\n}\r\nlet identity=loop();\r\n// result: Mia Schw 32\r\n```\r\n\r\n**for/of**\r\n```\r\nvar sports = ['skiing', 'surfing', 'dancing'];\r\nvar x;\r\nfor (x of cars) {\r\n  console.log(x + \"<br >\");\r\n}\r\n```\r\n\r\n**while**\r\n```\r\nlet check=true;\r\nwhile(check){\r\nconsole.log(\"Hi\");\r\n  check=false;\r\n}\r\n//Output: Hi\r\n```\r\n\r\n**do/while**\r\n```\r\nfunction worker() {\r\n  var text = \"\"\r\n  var i = 0;\r\n  do {\r\n    text += \"<br>The number is \" + i;\r\n    i++;\r\n  }\r\n  while (i < 2);\r\n  console.log(text);\r\n}\r\nworker();\r\n// The number is 0\r\n// The number is 1\r\n// The number is 2\r\n\r\n```\r\n\r\n![Loop](https://i.imgur.com/xM1q8Qz.jpg \"Photo by Stas Knop from Pexels\")","frontmatter":{"date":"2019-11-28","title":"Loops","category":"knowledge-base"},"fields":{"slug":"/Loops/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/VhAOIMg.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>There are many loops in JS which we can use:</p>\n<p><strong>for</strong> - looping through a block of code for a given number of times</p>\n<p><strong>for/in</strong> - looping through properties(values) of an <code>object</code></p>\n<p><strong>for/of</strong> - looping through values of an <code>array</code></p>\n<p><strong>while</strong> - looping through a block of code as long as a specified condition is true</p>\n<p><strong>do/while</strong> - looping through a block of code once, and then repeating the loop as long as a specified condition is true</p>\n<p><strong>for</strong></p>\n<pre><code>let array=[\"Hello\", \"universe\"]\nfor (let item =0; item &#x3C; array.length; item++){\n  console.log (item);\n}\n// Output:\n//Hello\n//universe\n</code></pre>\n<p><strong>for/in</strong></p>\n<pre><code>function loop() {\n  var person = {firstName:\"Mia\", lastName:\"Schw\", age:32};\n  var text = \"\";\n  var item;\n  for (item in person) {\n    text += person[item] + \" \";\n  }\n}\nlet identity=loop();\n// result: Mia Schw 32\n</code></pre>\n<p><strong>for/of</strong></p>\n<pre><code>var sports = ['skiing', 'surfing', 'dancing'];\nvar x;\nfor (x of cars) {\n  console.log(x + \"&#x3C;br >\");\n}\n</code></pre>\n<p><strong>while</strong></p>\n<pre><code>let check=true;\nwhile(check){\nconsole.log(\"Hi\");\n  check=false;\n}\n//Output: Hi\n</code></pre>\n<p><strong>do/while</strong></p>\n<pre><code>function worker() {\n  var text = \"\"\n  var i = 0;\n  do {\n    text += \"&#x3C;br>The number is \" + i;\n    i++;\n  }\n  while (i &#x3C; 2);\n  console.log(text);\n}\nworker();\n// The number is 0\n// The number is 1\n// The number is 2\n</code></pre>\n<p><img src=\"https://i.imgur.com/xM1q8Qz.jpg\" alt=\"Loop\" title=\"Photo by Stas Knop from Pexels\"></p>"}},{"node":{"id":"b4c6dc7d-98af-5324-9fd3-d5fb6c0bdf0c","excerpt":"Recusion is a function that calls itself. Example usage of recursive functions is to calculate factorial of a given number. Let's say we…","rawMarkdownBody":"\r\n![](https://i.imgur.com/kQUGRug.jpg \"Photo by P C from Pexels\")\r\n\r\nRecusion is a function that calls itself.\r\n\r\nExample usage of recursive functions is to calculate factorial of a given number. Let's say we want to calculate factorial of number <code>n</code>. If <code>n=3</code>, then factorial of <code>n</code> is <code>```3*2*1```=6</code>\r\n```\r\nfunction factorial(n){\r\n  if (n==1){\r\n    return 1\r\n  }\r\n  if (n>1){\r\n    return n*factorial(n-1);\r\n  }\r\n}\r\nlet number=factorial(3);\r\n// result: 3*2*1=6\r\n```\r\n\r\nExample usage of recursive functions is to calculate number to certain power. Imagine we want to calculate <code>3</code> to the power of <code>2</code>. We would need to multiply <code>```3*3=9```</code>. Let's define that <code>x</code> is our number and <code>n</code> is the power.\r\n```\r\nfunction power(x, n){\r\n  if (n==1){\r\n    return x\r\n  } else {\r\n    return x * power(x, n-1);\r\n  }\r\n}\r\npower(2,3);\r\n// returns 8\r\npower(3,2);\r\n// returns 9\r\n```\r\n\r\nExample usage is to sum the the numbers <code>1+2+3+...+ n</code>\r\n```\r\nfunction sumTo(n){\r\n  if (n==1){\r\n   return n\r\n  } else {\r\n  return n+ sumTo(n-1);\r\n  }\r\n}\r\nlet result=sumTo(3);\r\n// result is: 6\r\n```\r\n\r\nExample usage of recursive functions is to calculate salaries in a company in different departments or sub-departments. Imagine we have an object like this:\r\n```\r\nlet company={ \r\n  sales: [{name: \"Mia\", salary: 1000},{name: \"Sam\", salary: 1500}], \r\n  development: {\r\n    onsite: [{name: \"Peter\", salary: 500}, {name: \"Edita\", salary: 1200} ],\r\n    remote: [{name: \"Lubo\", salary: 3000}, {name: \"Peta\", salary: 800} ]\r\n    }\r\n}\r\n```\r\n\r\nThen we can use a recursive function to calculate the sum of salaries:\r\n```\r\nfunction salarySum(department){\r\n  if (Array.isArray(department)){\r\n\r\n    return department.reduce( (prev, current) => \r\n    prev + current, 0 )\r\n  } else {\r\n    let sum =0;\r\n    for (let subdep of Object.values(department)){\r\n     sum= sum + salarySum(subdep);\r\n    }\r\n    return sum,\r\n  }\r\n}\r\n```\r\n\r\nLet' s call the function and see the result:\r\n```\r\nlet result= salarySum(company);\r\n// result is: 8000\r\n```","frontmatter":{"date":"2019-11-27","title":"Recursion","category":"knowledge-base"},"fields":{"slug":"/Recursion/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/kQUGRug.jpg\" title=\"Photo by P C from Pexels\"></p>\n<p>Recusion is a function that calls itself.</p>\n<p>Example usage of recursive functions is to calculate factorial of a given number. Let's say we want to calculate factorial of number <code>n</code>. If <code>n=3</code>, then factorial of <code>n</code> is <code><code>3*2*1</code>=6</code></p>\n<pre><code>function factorial(n){\n  if (n==1){\n    return 1\n  }\n  if (n>1){\n    return n*factorial(n-1);\n  }\n}\nlet number=factorial(3);\n// result: 3*2*1=6\n</code></pre>\n<p>Example usage of recursive functions is to calculate number to certain power. Imagine we want to calculate <code>3</code> to the power of <code>2</code>. We would need to multiply <code><code>3*3=9</code></code>. Let's define that <code>x</code> is our number and <code>n</code> is the power.</p>\n<pre><code>function power(x, n){\n  if (n==1){\n    return x\n  } else {\n    return x * power(x, n-1);\n  }\n}\npower(2,3);\n// returns 8\npower(3,2);\n// returns 9\n</code></pre>\n<p>Example usage is to sum the the numbers <code>1+2+3+...+ n</code></p>\n<pre><code>function sumTo(n){\n  if (n==1){\n   return n\n  } else {\n  return n+ sumTo(n-1);\n  }\n}\nlet result=sumTo(3);\n// result is: 6\n</code></pre>\n<p>Example usage of recursive functions is to calculate salaries in a company in different departments or sub-departments. Imagine we have an object like this:</p>\n<pre><code>let company={ \n  sales: [{name: \"Mia\", salary: 1000},{name: \"Sam\", salary: 1500}], \n  development: {\n    onsite: [{name: \"Peter\", salary: 500}, {name: \"Edita\", salary: 1200} ],\n    remote: [{name: \"Lubo\", salary: 3000}, {name: \"Peta\", salary: 800} ]\n    }\n}\n</code></pre>\n<p>Then we can use a recursive function to calculate the sum of salaries:</p>\n<pre><code>function salarySum(department){\n  if (Array.isArray(department)){\n\n    return department.reduce( (prev, current) => \n    prev + current, 0 )\n  } else {\n    let sum =0;\n    for (let subdep of Object.values(department)){\n     sum= sum + salarySum(subdep);\n    }\n    return sum,\n  }\n}\n</code></pre>\n<p>Let' s call the function and see the result:</p>\n<pre><code>let result= salarySum(company);\n// result is: 8000\n</code></pre>"}},{"node":{"id":"888c7a5a-31fb-5553-985d-2d8df882a439","excerpt":"Installing Chrome on Ubuntu: Open terminal by: Download chrome: Install chrome: Type your user and password To start Chrome, you can type in…","rawMarkdownBody":"\r\n![](https://i.imgur.com/jX7rNIv.jpg \"Photo by PhotoMIX Ltd. from Pexels\")\r\n\r\nInstalling Chrome on Ubuntu:\r\n\r\n\r\n> Open terminal by:\r\n```\r\nCtrl+Alt+T\r\n```\r\n\r\n> Download chrome:\r\n```\r\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\r\n```\r\n\r\n> Install chrome:\r\n```\r\nsudo dpkg -i google-chrome-stable_current_amd64.deb\r\n```\r\n\r\n> Type your user and password\r\n\r\n> To start Chrome, you can type in terminal:\r\n```\r\ngoogle-chrome\r\n```\r\n\r\n> Or by clicking Activities -> Google Chrome\r\n\r\n\r\nReference:\r\n\r\nhttps://linuxize.com/post/how-to-install-google-chrome-web-browser-on-ubuntu-18-04/","frontmatter":{"date":"2019-11-21","title":"Install Chrome on Linux","category":"knowledge-base"},"fields":{"slug":"/Linux_Install_Chrome/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/jX7rNIv.jpg\" title=\"Photo by PhotoMIX Ltd. from Pexels\"></p>\n<p>Installing Chrome on Ubuntu:</p>\n<blockquote>\n<p>Open terminal by:</p>\n</blockquote>\n<pre><code>Ctrl+Alt+T\n</code></pre>\n<blockquote>\n<p>Download chrome:</p>\n</blockquote>\n<pre><code>wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n</code></pre>\n<blockquote>\n<p>Install chrome:</p>\n</blockquote>\n<pre><code>sudo dpkg -i google-chrome-stable_current_amd64.deb\n</code></pre>\n<blockquote>\n<p>Type your user and password</p>\n</blockquote>\n<blockquote>\n<p>To start Chrome, you can type in terminal:</p>\n</blockquote>\n<pre><code>google-chrome\n</code></pre>\n<blockquote>\n<p>Or by clicking Activities -> Google Chrome</p>\n</blockquote>\n<p>Reference:</p>\n<p><a href=\"https://linuxize.com/post/how-to-install-google-chrome-web-browser-on-ubuntu-18-04/\">https://linuxize.com/post/how-to-install-google-chrome-web-browser-on-ubuntu-18-04/</a></p>"}},{"node":{"id":"208b40e0-ed8e-5884-b886-63308bbeb596","excerpt":"How to install Sublime on Linux Sublime is a code editor. There are diffrent kinds of installs depending on Linux distributor: 1/ apt…","rawMarkdownBody":"\r\n![](https://i.imgur.com/13CjRhl.png \"Sublime logo\")\r\n\r\nHow to install Sublime on Linux\r\n\r\nSublime is a code editor.\r\n\r\nThere are diffrent kinds of installs depending on Linux distributor:\r\n\r\n**1/** apt - Ubuntu, Debian\r\n\r\n**2/** pacman - Arch\r\n\r\n**3/** yum - CentOS\r\n\r\n**4/** dnf - Fedora\r\n\r\n**5/** zypper - openSUSE\r\n\r\nHere we will check how apt works:\r\n\r\n> Install GPG key\r\n```\r\nwget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -\r\n```\r\n\r\n> Setup apt to work with http sources\r\n```\r\nsudo apt-get install apt-transport-https\r\n```\r\n\r\n> Select channel - we will choose stable channel\r\n```\r\necho \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list\r\n```\r\n\r\n> Update apt source\r\n```\r\nsudo apt-get update\r\n```\r\n\r\n> Install Sublime Text\r\n```\r\nsudo apt-get install sublime-text\r\n```\r\n\r\n> Start Sublime from the command line:\r\n```\r\nsubl .\r\n```\r\n\r\nReference:\r\n\r\nhttps://www.sublimetext.com/docs/3/linux_repositories.html\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-11-20","title":"Install Sublime on Linux","category":"knowledge-base"},"fields":{"slug":"/Linux_Install_Sublime/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/13CjRhl.png\" title=\"Sublime logo\"></p>\n<p>How to install Sublime on Linux</p>\n<p>Sublime is a code editor.</p>\n<p>There are diffrent kinds of installs depending on Linux distributor:</p>\n<p><strong>1/</strong> apt - Ubuntu, Debian</p>\n<p><strong>2/</strong> pacman - Arch</p>\n<p><strong>3/</strong> yum - CentOS</p>\n<p><strong>4/</strong> dnf - Fedora</p>\n<p><strong>5/</strong> zypper - openSUSE</p>\n<p>Here we will check how apt works:</p>\n<blockquote>\n<p>Install GPG key</p>\n</blockquote>\n<pre><code>wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -\n</code></pre>\n<blockquote>\n<p>Setup apt to work with http sources</p>\n</blockquote>\n<pre><code>sudo apt-get install apt-transport-https\n</code></pre>\n<blockquote>\n<p>Select channel - we will choose stable channel</p>\n</blockquote>\n<pre><code>echo \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list\n</code></pre>\n<blockquote>\n<p>Update apt source</p>\n</blockquote>\n<pre><code>sudo apt-get update\n</code></pre>\n<blockquote>\n<p>Install Sublime Text</p>\n</blockquote>\n<pre><code>sudo apt-get install sublime-text\n</code></pre>\n<blockquote>\n<p>Start Sublime from the command line:</p>\n</blockquote>\n<pre><code>subl .\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://www.sublimetext.com/docs/3/linux_repositories.html\">https://www.sublimetext.com/docs/3/linux_repositories.html</a></p>"}},{"node":{"id":"85bf4fdc-b80e-5dcc-b509-5acdab55f525","excerpt":"Open your terminal by:  Adding LibreOffice PPA repository Hit Enter to proceed Update system Install LibreOffice Press yes Reference:  https…","rawMarkdownBody":"\r\n![](https://i.imgur.com/t5FghyM.png \"Sublime logo\")\r\n\r\n> Open your terminal by: \r\n```\r\nCtrl+Alt+T\r\n```\r\n\r\n> Adding LibreOffice PPA repository\r\n```\r\nsudo add-apt-repository ppa:libreoffice/ppa\r\n```\r\n\r\n> Hit <code>Enter</code> to proceed\r\n\r\n> Update system\r\n```\r\nsudo apt update\r\n```\r\n\r\n> Install LibreOffice\r\n```\r\nsudo apt install libreoffice\r\n```\r\n\r\n> Press <code>yes</code>\r\n\r\n> Reference: \r\n\r\nhttps://www.liquidweb.com/kb/installing-libreoffice-on-ubuntu-16-04/\r\n\r\n\r\n> If your Libre Office is making problems and does not opent your files, try these steps:\r\n\r\n1//  Open your file manager and go to your <code>Home</code>\r\n\r\n2// Press <code>CTRL + H</code> to show hidden files\r\n\r\n3// Search for <code>.config</code> file and open it\r\n\r\n4// Look for a folder called <code>libreoffice</code> and remove it\r\n\r\n5// Log out and back in. \r\n\r\nReference:\r\n\r\nhttps://askubuntu.com/questions/643382/libre-office-wont-open\r\n\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-11-19","title":"Install LibreOffice on Linux","category":"knowledge-base"},"fields":{"slug":"/Linux_Install_LibreOffice/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/t5FghyM.png\" title=\"Sublime logo\"></p>\n<blockquote>\n<p>Open your terminal by: </p>\n</blockquote>\n<pre><code>Ctrl+Alt+T\n</code></pre>\n<blockquote>\n<p>Adding LibreOffice PPA repository</p>\n</blockquote>\n<pre><code>sudo add-apt-repository ppa:libreoffice/ppa\n</code></pre>\n<blockquote>\n<p>Hit <code>Enter</code> to proceed</p>\n</blockquote>\n<blockquote>\n<p>Update system</p>\n</blockquote>\n<pre><code>sudo apt update\n</code></pre>\n<blockquote>\n<p>Install LibreOffice</p>\n</blockquote>\n<pre><code>sudo apt install libreoffice\n</code></pre>\n<blockquote>\n<p>Press <code>yes</code></p>\n</blockquote>\n<blockquote>\n<p>Reference: </p>\n</blockquote>\n<p><a href=\"https://www.liquidweb.com/kb/installing-libreoffice-on-ubuntu-16-04/\">https://www.liquidweb.com/kb/installing-libreoffice-on-ubuntu-16-04/</a></p>\n<blockquote>\n<p>If your Libre Office is making problems and does not opent your files, try these steps:</p>\n</blockquote>\n<p>1//  Open your file manager and go to your <code>Home</code></p>\n<p>2// Press <code>CTRL + H</code> to show hidden files</p>\n<p>3// Search for <code>.config</code> file and open it</p>\n<p>4// Look for a folder called <code>libreoffice</code> and remove it</p>\n<p>5// Log out and back in. </p>\n<p>Reference:</p>\n<p><a href=\"https://askubuntu.com/questions/643382/libre-office-wont-open\">https://askubuntu.com/questions/643382/libre-office-wont-open</a></p>"}},{"node":{"id":"88c01eea-040e-5d56-a3ce-937923163573","excerpt":"Here you can find a small summary of the most useful array methods.d Creating an Array Creating new array (when we dont want to reference…","rawMarkdownBody":"\r\n![](https://i.imgur.com/qmUjmQg.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nHere you can find a small summary of the most useful array methods.d\r\n\r\n**Creating an Array**\r\n\r\nCreating new array (when we dont want to reference) of a given length of empty elements:\r\n```\r\nlet newArray = new Array(7);\r\n//creates array of 7 elements, each element is emtpy\r\n```\r\n\r\n\r\nCreating new array with one specific item in it:\r\n```\r\nlet newArray = new Array(\"7\");\r\n//creates array of 1 element, this element is string 7\r\n```\r\n\r\nCreating new array from another array using spread operator. Spread operator creates new object + copies other array:\r\n```\r\nvar array = [1,2,3]\r\nvar newArray = [...array]\r\n\r\n// newArray will be: [1,2,3]\r\n\r\n```\r\n\r\nCreating new array from another array using spread operator + adding more elements. Spread operator creates new object + copies other array:\r\n```\r\nvar array = [1,2,3]\r\nvar newArray = [...array, 4]\r\n\r\n// newArray will be: [1,2,3,4]\r\n\r\n```\r\n\r\n\r\nCreating new array filled with 0s using loop:\r\n```\r\nvar data = [];\r\nvar length = 5;\r\n\r\nfor(var i = 0; i < length; i++) {\r\n    data.push(0);\r\n}\r\n```\r\n\r\n**Array.map()**\r\n\r\n![Map](https://i.imgur.com/XM3VmyA.jpg \"Photo by Aaditya Arora from Pexels\")\r\n\r\n<code>array.map()</code> is going through each element of the array and allows to perform function on it and output NEW array\r\n\r\nIt requires a function after the brackets. Function takes argument for example called <code>string</code> (but name of argument can be called anything, for example: item, string, number, etc.) which means each item from the array through which we will iterate. \r\n\r\nIt returns the **NEW** array. New array will consist of items and each item will contain whatever is a return from the function, for example: ```<li>{string}</li>```\r\n```\r\nconst array1 = [1, 4, 9, 16];\r\n\r\n// pass a function to map\r\nconst map1 = array1.map(x => x * 2);\r\n\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\n\r\nCreating list of items using <code>array.map()</code>\r\n```\r\nconst strings = ['Home', 'Shop', 'About Me'];\r\nconst listItems = strings.map(string => <li>{string}</li>);\r\n<ul>{listItems}</ul>\r\n```\r\n\r\n**Adding items to Array using .concat or .push**\r\n\r\n![Add](https://i.imgur.com/PVgFfnd.jpg \"Photo by Geeorge Becker from Pexels\")\r\n\r\n**Array.concat()**\r\n\r\n<code>array.concat</code> creates A NEW array which concatenates original array with another array. Concat does **NOT** mutate origina array\r\n```\r\nlet array = [\"cat\",\"tiger\"]\r\nlet newArray = array.concat(\"monster\")\r\n\r\n// array is still [\"cat\",\"tiger\"]\r\n// newArray is [\"cat\",\"tiger\", \"monster\"]\r\n```\r\n\r\n**Array.push()**\r\n\r\n<code>array.push</code> **MUTATES** the existing array and adds new element!\r\n```\r\nlet array = [\"cat\",\"tiger\" ]\r\nlet length = array.push(\"monster\")\r\n// array is mutated [\"cat\",\"tiger\", \"monster\"]\r\n// length is 3\r\n```\r\n\r\n**Array.indexOf()**\r\n\r\n![Index](https://i.imgur.com/ue3MXf2.jpg \"Photo by Engin Akyurt from Pexels\")\r\n\r\n<code>array.indexOf()</code> finds element in the array, optional index means starting searching from position X\r\n\r\n```\r\nconst beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\r\n\r\nconsole.log(beasts.indexOf('bison'));\r\n// expected output: 1\r\n\r\n// start from index 2\r\nconsole.log(beasts.indexOf('bison', 2));\r\n// expected output: 4\r\n```\r\n\r\n**Cutting arrays using .slice or .splice**\r\n\r\n![Cut](https://i.imgur.com/s23i0Yr.jpg \"Photo by Photo Collections from Pexels\")\r\n\r\n**Array.slice()**\r\n\r\n<code>array.slice()</code> slices array from one index to another but it creates NEW array, it dos NOT mutate the original one\r\n```\r\n```\r\n\r\n**Array.splice()**\r\n<code>array.splice()</code> slices array from one index to another but it MUTATES existing array!\r\n```\r\n```\r\n\r\n**Array.reduce()**\r\n\r\n![Reduce](https://i.imgur.com/UOPhFMg.jpg \"Photo by Arun Thomas from Pexels\")\r\n\r\nReduce method is very powerful one which allows you to iterate through all elements in an array, perform certain calculations on it and then returns something: a single value, array, etc.\r\n\r\nLet's start with an array:\r\n```\r\nconst myArray = [1,4,2]\r\n```\r\nWe want to sum this up and return one value of the total sum which would be 7\r\n\r\nWe can call:\r\n```\r\nmyArray.reduce(reducer, initialValue);\r\n```\r\n**Reducer** is a function, which means that <code>.reduce</code> calls upon another function which we need to define. \r\n\r\n**InitialValue** is optional, we can kick it off with some starting value, but for the first simple example we will skip it.\r\n\r\nExample reducer function:\r\n```\r\n  const reducer = (accumulator, currentValue) => {\r\n        accumulator = (accumulator + currentValue)        \r\n        return (accumulator);\r\n    } \r\n```\r\nReducer takes in 2 arguments:\r\n\r\n**Accumulator** - value where we can store results of our calculations. Initial accumulator will equal the first element in array which will be 1 (unless we set initial value for it)\r\n\r\n**Current value** - value at which we are currently iterating, initially this will be value of second element in array which is number 4 (unless we set initial value, then the initial currentValue will be the first element)\r\n\r\nThere can be other arguments like currentIndex (index of currentValue where the iteration currently happens) but the most basic example is with above-mentioned two.\r\n\r\nEach iteration ( or function call ) will deliver a returning value! It means on each step return will be executed. This returning value is going to get passed into next step!\r\n\r\nExample to use it for the highest number:\r\n\r\n``` \r\nconst reducer = (accumulator, currentValue) => {\r\n        if (currentValue >= accumulator){\r\n            accumulator = currentValue;\r\n        }\r\n        return (accumulator);\r\n    } \r\n```\r\n\r\nExample to use it for average number:\r\n``` \r\nconst reducer = (accumulator, currentValue) => {\r\n        if (currentValue >= accumulator){\r\n            accumulator = currentValue;\r\n       }\r\n        return (accumulator);\r\n    } \r\n <p>Im a reducer and highest number is: {myArray.reduce(reducer)}</p>\r\n```\r\n\r\n~~ And that's it for the intro to most basic array methods. I hope you enjoyed it.~~\r\n\r\n![Array](https://i.imgur.com/ui07Dbb.jpg \"Photo by Genaro Servín from Pexels\")","frontmatter":{"date":"2019-11-18","title":"Arrays","category":"knowledge-base"},"fields":{"slug":"/Arrays/"},"timeToRead":4,"html":"<p><img src=\"https://i.imgur.com/qmUjmQg.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>Here you can find a small summary of the most useful array methods.d</p>\n<p><strong>Creating an Array</strong></p>\n<p>Creating new array (when we dont want to reference) of a given length of empty elements:</p>\n<pre><code>let newArray = new Array(7);\n//creates array of 7 elements, each element is emtpy\n</code></pre>\n<p>Creating new array with one specific item in it:</p>\n<pre><code>let newArray = new Array(\"7\");\n//creates array of 1 element, this element is string 7\n</code></pre>\n<p>Creating new array from another array using spread operator. Spread operator creates new object + copies other array:</p>\n<pre><code>var array = [1,2,3]\nvar newArray = [...array]\n\n// newArray will be: [1,2,3]\n</code></pre>\n<p>Creating new array from another array using spread operator + adding more elements. Spread operator creates new object + copies other array:</p>\n<pre><code>var array = [1,2,3]\nvar newArray = [...array, 4]\n\n// newArray will be: [1,2,3,4]\n</code></pre>\n<p>Creating new array filled with 0s using loop:</p>\n<pre><code>var data = [];\nvar length = 5;\n\nfor(var i = 0; i &#x3C; length; i++) {\n    data.push(0);\n}\n</code></pre>\n<p><strong>Array.map()</strong></p>\n<p><img src=\"https://i.imgur.com/XM3VmyA.jpg\" alt=\"Map\" title=\"Photo by Aaditya Arora from Pexels\"></p>\n<p><code>array.map()</code> is going through each element of the array and allows to perform function on it and output NEW array</p>\n<p>It requires a function after the brackets. Function takes argument for example called <code>string</code> (but name of argument can be called anything, for example: item, string, number, etc.) which means each item from the array through which we will iterate. </p>\n<p>It returns the <strong>NEW</strong> array. New array will consist of items and each item will contain whatever is a return from the function, for example: <code>&#x3C;li>{string}&#x3C;/li></code></p>\n<pre><code>const array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p>Creating list of items using <code>array.map()</code></p>\n<pre><code>const strings = ['Home', 'Shop', 'About Me'];\nconst listItems = strings.map(string => &#x3C;li>{string}&#x3C;/li>);\n&#x3C;ul>{listItems}&#x3C;/ul>\n</code></pre>\n<p><strong>Adding items to Array using .concat or .push</strong></p>\n<p><img src=\"https://i.imgur.com/PVgFfnd.jpg\" alt=\"Add\" title=\"Photo by Geeorge Becker from Pexels\"></p>\n<p><strong>Array.concat()</strong></p>\n<p><code>array.concat</code> creates A NEW array which concatenates original array with another array. Concat does <strong>NOT</strong> mutate origina array</p>\n<pre><code>let array = [\"cat\",\"tiger\"]\nlet newArray = array.concat(\"monster\")\n\n// array is still [\"cat\",\"tiger\"]\n// newArray is [\"cat\",\"tiger\", \"monster\"]\n</code></pre>\n<p><strong>Array.push()</strong></p>\n<p><code>array.push</code> <strong>MUTATES</strong> the existing array and adds new element!</p>\n<pre><code>let array = [\"cat\",\"tiger\" ]\nlet length = array.push(\"monster\")\n// array is mutated [\"cat\",\"tiger\", \"monster\"]\n// length is 3\n</code></pre>\n<p><strong>Array.indexOf()</strong></p>\n<p><img src=\"https://i.imgur.com/ue3MXf2.jpg\" alt=\"Index\" title=\"Photo by Engin Akyurt from Pexels\"></p>\n<p><code>array.indexOf()</code> finds element in the array, optional index means starting searching from position X</p>\n<pre><code>const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\n\nconsole.log(beasts.indexOf('bison'));\n// expected output: 1\n\n// start from index 2\nconsole.log(beasts.indexOf('bison', 2));\n// expected output: 4\n</code></pre>\n<p><strong>Cutting arrays using .slice or .splice</strong></p>\n<p><img src=\"https://i.imgur.com/s23i0Yr.jpg\" alt=\"Cut\" title=\"Photo by Photo Collections from Pexels\"></p>\n<p><strong>Array.slice()</strong></p>\n<p><code>array.slice()</code> slices array from one index to another but it creates NEW array, it dos NOT mutate the original one</p>\n<pre><code></code></pre>\n<p><strong>Array.splice()</strong>\n<code>array.splice()</code> slices array from one index to another but it MUTATES existing array!</p>\n<pre><code></code></pre>\n<p><strong>Array.reduce()</strong></p>\n<p><img src=\"https://i.imgur.com/UOPhFMg.jpg\" alt=\"Reduce\" title=\"Photo by Arun Thomas from Pexels\"></p>\n<p>Reduce method is very powerful one which allows you to iterate through all elements in an array, perform certain calculations on it and then returns something: a single value, array, etc.</p>\n<p>Let's start with an array:</p>\n<pre><code>const myArray = [1,4,2]\n</code></pre>\n<p>We want to sum this up and return one value of the total sum which would be 7</p>\n<p>We can call:</p>\n<pre><code>myArray.reduce(reducer, initialValue);\n</code></pre>\n<p><strong>Reducer</strong> is a function, which means that <code>.reduce</code> calls upon another function which we need to define. </p>\n<p><strong>InitialValue</strong> is optional, we can kick it off with some starting value, but for the first simple example we will skip it.</p>\n<p>Example reducer function:</p>\n<pre><code>  const reducer = (accumulator, currentValue) => {\n        accumulator = (accumulator + currentValue)        \n        return (accumulator);\n    } \n</code></pre>\n<p>Reducer takes in 2 arguments:</p>\n<p><strong>Accumulator</strong> - value where we can store results of our calculations. Initial accumulator will equal the first element in array which will be 1 (unless we set initial value for it)</p>\n<p><strong>Current value</strong> - value at which we are currently iterating, initially this will be value of second element in array which is number 4 (unless we set initial value, then the initial currentValue will be the first element)</p>\n<p>There can be other arguments like currentIndex (index of currentValue where the iteration currently happens) but the most basic example is with above-mentioned two.</p>\n<p>Each iteration ( or function call ) will deliver a returning value! It means on each step return will be executed. This returning value is going to get passed into next step!</p>\n<p>Example to use it for the highest number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n        }\n        return (accumulator);\n    } \n</code></pre>\n<p>Example to use it for average number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n       }\n        return (accumulator);\n    } \n &#x3C;p>Im a reducer and highest number is: {myArray.reduce(reducer)}&#x3C;/p>\n</code></pre>\n<p>~~ And that's it for the intro to most basic array methods. I hope you enjoyed it.~~</p>\n<p><img src=\"https://i.imgur.com/ui07Dbb.jpg\" alt=\"Array\" title=\"Photo by Genaro Servín from Pexels\"></p>"}},{"node":{"id":"330d9fd2-2aa3-5a84-84e0-8c1a2b142147","excerpt":"Disabled button:","rawMarkdownBody":"\r\n![](https://i.imgur.com/fxWHGwv.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nDisabled button:\r\n\r\n```\r\n<button type=\"button\" disabled>Click Me!</button>\r\n```","frontmatter":{"date":"2019-11-17","title":"Buttons","category":"knowledge-base"},"fields":{"slug":"/Buttons/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/fxWHGwv.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>Disabled button:</p>\n<pre><code>&#x3C;button type=\"button\" disabled>Click Me!&#x3C;/button>\n</code></pre>"}},{"node":{"id":"17a3d54f-196a-51c4-ae31-a37ea6e4daf9","excerpt":"To create a new variable with the CURRENT date, we use new Date() with empty brackets: Now our myDate is of a date type. We can extract…","rawMarkdownBody":"\r\n![](https://i.imgur.com/ooqUgWd.jpg \"Photo by Wolfgang from Pexels\")\r\n\r\n\r\nTo create a new variable with the CURRENT date, we use <code>new Date()</code> with empty brackets:\r\n```\r\nvar myDate = new Date();\r\n```\r\n\r\nNow our <code>myDate</code> is of a date type. We can extract different information from it like:\r\n\r\n- day of month, \r\n\r\n- day of week, \r\n\r\n- month, \r\n\r\n- year, etc.\r\n\r\nRetrieving info from the date:\r\n\r\nYear\r\n```\r\nvar year = myDate.getFullYear();\r\n//or\r\nvar year = myDate.getUTCFullYear();\r\n```\r\n\r\nMonth\r\n```\r\n ar monthIndex = myDate.getMonth();\r\n //or\r\nvar monthIndex = myDate.getUTCMonth();\r\n```\r\nMonth starts from 0 for January to 11 for December - if you want 1 for January add +1\r\n```\r\nvar myDate=new Date(); \r\nvar month=myDate.getMonth()+1\r\n```\r\n\r\nDay of month- which provides day of the month, such as 1, 24, 31, etc.\r\n```\r\nvar day = myDate.getDate();\r\n//or\r\nvar day = myDate.getUTCDate();\r\n```\r\n\r\nDay of week - which provides day of the week, such as 1, 6, etc.\r\n```\r\nvar day = myDate.getDate();\r\n//or\r\nvar day = myDate.getUTCDate();\r\n```\r\n\r\nHours\r\n```\r\nvar hours = myDate.getHours();\r\n//or\r\nvar hours = myDate.getUTCHours();\r\n```\r\nMinutes\r\n```\r\nvar minutes = myDate.getMinutes();\r\n//or\r\nvar minutes = myDate.getUTCMinutes();\r\n```\r\n\r\nSeconds\r\n```\r\nvar seconds = myDate.getSeconds();\r\n//or\r\nvar seconds = myDate.getITCSeconds();\r\n```\r\n\r\nIncrementing one day to a date\r\n```\r\nvar myDate = new Date();\r\n//add a day to the date\r\nmyDate.setDate(myDate.getDate() + 1);\r\n```\r\n\r\nCreating new variable event which will contain a given date:\r\n```\r\nvar event = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\r\n```\r\n\r\nFortmatting Date to nice string using <code>.toLocaleSting</code>\r\n```\r\nconsole.log(event.toLocaleString('en-GB', { timeZone: 'UTC' }));\r\n// expected output: 20/12/2012, 03:00:00\r\n```\r\n\r\nReference:\r\n\r\nhttps://www.youtube.com/watch?v=CnozSz4wbBQ\r\n\r\n\r\n**Moment JS**\r\n\r\n![Moment](https://i.imgur.com/o7K483F.jpg \"Photo by Matej from Pexels\")\r\n\r\nAnother cool package which allows us to get variety of formatting options with dates is called <code>MomentJS</code>. Plain Javascript does not have as many options as Moment JS.\r\n\r\nIn order to install it:\r\n```\r\nnpm install moment --save\r\n```\r\n\r\nIn order to add it to your React JS file, paste this **AFTER** all imports:\r\n```\r\nvar moment = require('moment');\r\n```\r\n\r\nThen you can use it and create a new date variable with the date of TODAY (now):\r\n```\r\nvar myDate=moment();\r\n```\r\n\r\n> An object will be returned with many properties.\r\n\r\n> We can also create a date variable from existing value if we know its formatting:\r\n```\r\nvar itIsADate=\"01.01.2020\"\r\nvar myDate=moment(itIsADate, \"DD.MM.YYYY\");\r\n\r\n```\r\n\r\n> We can then transform our date to any format:\r\n```\r\nvar newDate=moment(myDate).format(\"YYYY-MMM-DD\")\r\n//Result: 2016-Jan-01\r\n```\r\n\r\nReference:\r\n\r\nhttps://momentjs.com/docs\r\n\r\n![Dates](https://i.imgur.com/bNckChk.jpg \"Photo by Bich Tran from Pexels\")","frontmatter":{"date":"2019-11-16","title":"Playing with Dates in Javascript","category":"knowledge-base"},"fields":{"slug":"/Playing_with_Dates_in_Javascript/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/ooqUgWd.jpg\" title=\"Photo by Wolfgang from Pexels\"></p>\n<p>To create a new variable with the CURRENT date, we use <code>new Date()</code> with empty brackets:</p>\n<pre><code>var myDate = new Date();\n</code></pre>\n<p>Now our <code>myDate</code> is of a date type. We can extract different information from it like:</p>\n<ul>\n<li>day of month, </li>\n<li>day of week, </li>\n<li>month, </li>\n<li>year, etc.</li>\n</ul>\n<p>Retrieving info from the date:</p>\n<p>Year</p>\n<pre><code>var year = myDate.getFullYear();\n//or\nvar year = myDate.getUTCFullYear();\n</code></pre>\n<p>Month</p>\n<pre><code> ar monthIndex = myDate.getMonth();\n //or\nvar monthIndex = myDate.getUTCMonth();\n</code></pre>\n<p>Month starts from 0 for January to 11 for December - if you want 1 for January add +1</p>\n<pre><code>var myDate=new Date(); \nvar month=myDate.getMonth()+1\n</code></pre>\n<p>Day of month- which provides day of the month, such as 1, 24, 31, etc.</p>\n<pre><code>var day = myDate.getDate();\n//or\nvar day = myDate.getUTCDate();\n</code></pre>\n<p>Day of week - which provides day of the week, such as 1, 6, etc.</p>\n<pre><code>var day = myDate.getDate();\n//or\nvar day = myDate.getUTCDate();\n</code></pre>\n<p>Hours</p>\n<pre><code>var hours = myDate.getHours();\n//or\nvar hours = myDate.getUTCHours();\n</code></pre>\n<p>Minutes</p>\n<pre><code>var minutes = myDate.getMinutes();\n//or\nvar minutes = myDate.getUTCMinutes();\n</code></pre>\n<p>Seconds</p>\n<pre><code>var seconds = myDate.getSeconds();\n//or\nvar seconds = myDate.getITCSeconds();\n</code></pre>\n<p>Incrementing one day to a date</p>\n<pre><code>var myDate = new Date();\n//add a day to the date\nmyDate.setDate(myDate.getDate() + 1);\n</code></pre>\n<p>Creating new variable event which will contain a given date:</p>\n<pre><code>var event = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n</code></pre>\n<p>Fortmatting Date to nice string using <code>.toLocaleSting</code></p>\n<pre><code>console.log(event.toLocaleString('en-GB', { timeZone: 'UTC' }));\n// expected output: 20/12/2012, 03:00:00\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://www.youtube.com/watch?v=CnozSz4wbBQ\">https://www.youtube.com/watch?v=CnozSz4wbBQ</a></p>\n<p><strong>Moment JS</strong></p>\n<p><img src=\"https://i.imgur.com/o7K483F.jpg\" alt=\"Moment\" title=\"Photo by Matej from Pexels\"></p>\n<p>Another cool package which allows us to get variety of formatting options with dates is called <code>MomentJS</code>. Plain Javascript does not have as many options as Moment JS.</p>\n<p>In order to install it:</p>\n<pre><code>npm install moment --save\n</code></pre>\n<p>In order to add it to your React JS file, paste this <strong>AFTER</strong> all imports:</p>\n<pre><code>var moment = require('moment');\n</code></pre>\n<p>Then you can use it and create a new date variable with the date of TODAY (now):</p>\n<pre><code>var myDate=moment();\n</code></pre>\n<blockquote>\n<p>An object will be returned with many properties.</p>\n</blockquote>\n<blockquote>\n<p>We can also create a date variable from existing value if we know its formatting:</p>\n</blockquote>\n<pre><code>var itIsADate=\"01.01.2020\"\nvar myDate=moment(itIsADate, \"DD.MM.YYYY\");\n</code></pre>\n<blockquote>\n<p>We can then transform our date to any format:</p>\n</blockquote>\n<pre><code>var newDate=moment(myDate).format(\"YYYY-MMM-DD\")\n//Result: 2016-Jan-01\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://momentjs.com/docs\">https://momentjs.com/docs</a></p>\n<p><img src=\"https://i.imgur.com/bNckChk.jpg\" alt=\"Dates\" title=\"Photo by Bich Tran from Pexels\"></p>"}},{"node":{"id":"5bb08484-6e1e-5149-9bea-768473dcae30","excerpt":"First import your image: Then use it on your component style: or Alternative, create a className on your element And then style your CSS…","rawMarkdownBody":"\r\n![](https://i.imgur.com/M6Q6Fay.jpg \"Photo by Aneta Foubíková from Pexels\")\r\n\r\nFirst import your image:\r\n```\r\nimport Background from './advent.jpg';\r\n```\r\n\r\nThen use it on your component style:\r\n```\r\n<Col sm={12} style={{backgroundImage: `url(${Background})`}} />\r\n```\r\n\r\nor\r\n\r\n```\r\n<h2 style={{backgroundImage: `url(${Background})`}} >HI</h2>\r\n```\r\n\r\nAlternative, create a <code>className</code> on your element\r\n```\r\nclassName=\"background\"\r\n```\r\n\r\nAnd then style your CSS:\r\n```\r\n.background{\r\n  background-image: url(\"https://i.imgur.com/obmwHdn.jpg\");\r\n  width: 600px;\r\n}\r\n```\r\n\r\nFurther interesting resources:\r\n\r\nhttps://css-tricks.com/text-blocks-over-image/\r\n\r\n![NewZealand](https://i.imgur.com/GUSKq9U.jpg \"Photo by Tyler Lastovich from Pexels\")","frontmatter":{"date":"2019-11-15","title":"Background image in div","category":"knowledge-base"},"fields":{"slug":"/How_To_Add_Background_Image_To_Div/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/M6Q6Fay.jpg\" title=\"Photo by Aneta Foubíková from Pexels\"></p>\n<p>First import your image:</p>\n<pre><code>import Background from './advent.jpg';\n</code></pre>\n<p>Then use it on your component style:</p>\n<pre><code>&#x3C;Col sm={12} style={{backgroundImage: `url(${Background})`}} />\n</code></pre>\n<p>or</p>\n<pre><code>&#x3C;h2 style={{backgroundImage: `url(${Background})`}} >HI&#x3C;/h2>\n</code></pre>\n<p>Alternative, create a <code>className</code> on your element</p>\n<pre><code>className=\"background\"\n</code></pre>\n<p>And then style your CSS:</p>\n<pre><code>.background{\n  background-image: url(\"https://i.imgur.com/obmwHdn.jpg\");\n  width: 600px;\n}\n</code></pre>\n<p>Further interesting resources:</p>\n<p><a href=\"https://css-tricks.com/text-blocks-over-image/\">https://css-tricks.com/text-blocks-over-image/</a></p>\n<p><img src=\"https://i.imgur.com/GUSKq9U.jpg\" alt=\"NewZealand\" title=\"Photo by Tyler Lastovich from Pexels\"></p>"}},{"node":{"id":"e8298ed8-84af-5c11-8d6c-4bae4cd8dbfc","excerpt":"Imagine to have a while look in which you are updating state: Updating state within while loop risks running into infinite loop especially…","rawMarkdownBody":"\r\n![](https://i.imgur.com/8pjW3Uh.jpg \"Photo by Edwin Soto from Pexels\")\r\n\r\nImagine to have a <code>while</code> look in which you are updating state:\r\n```\r\nexport const CodeAdvent20180102 = () => {\r\n  const [frequencyChanges, setFrequencyChanges] = useState([\r\n    3,\r\n    -3,\r\n    -2,\r\n    5,\r\n    4,\r\n    0\r\n  ]);\r\n  const [frequencySum, setFrequencySum] = useState(0);\r\n  const [uniques, setUniques] = useState([0]);\r\n  const [reiterate, setReiterate] = useState(true);\r\n  const [duplicateFrequency, setDuplicateFrequency] = useState();\r\n\r\n  function handleClick() {\r\n    let result = 0;\r\n    let newArray = [...uniques];\r\n\r\n while (reiterate) {\r\n\r\n    frequencyChanges.map((item, index) => {\r\n      result = result + item;\r\n      console.log(\"Im here\");\r\n      if (uniques.includes(result) && reiterate) {\r\n        setReiterate(false);\r\n        debugger;\r\n        setDuplicateFrequency(result);\r\n      } else if (reiterate) {\r\n        newArray = newArray.concat(result);\r\n        setUniques(newArray);\r\n        setFrequencySum(result);\r\n      }\r\n    });\r\n   }\r\n  }\r\n\r\n```\r\n\r\nUpdating state within while loop risks running into infinite loop especially if the loop condition is based on the state.\r\n\r\nWhy??\r\n\r\nIt is beecause the way state works in the React. For performance reasons, when we update the state and use that state info immediatelly afterwards, it is not guaranteed that it will be updated. State updated asynchronously and sometimes state updates are batched (grouped) for performance reasons! \r\n\r\nSo dont rely on states too much!","frontmatter":{"date":"2019-11-15","title":"While Loop and React State","category":"knowledge-base"},"fields":{"slug":"/While_Loop_and_React_State/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/8pjW3Uh.jpg\" title=\"Photo by Edwin Soto from Pexels\"></p>\n<p>Imagine to have a <code>while</code> look in which you are updating state:</p>\n<pre><code>export const CodeAdvent20180102 = () => {\n  const [frequencyChanges, setFrequencyChanges] = useState([\n    3,\n    -3,\n    -2,\n    5,\n    4,\n    0\n  ]);\n  const [frequencySum, setFrequencySum] = useState(0);\n  const [uniques, setUniques] = useState([0]);\n  const [reiterate, setReiterate] = useState(true);\n  const [duplicateFrequency, setDuplicateFrequency] = useState();\n\n  function handleClick() {\n    let result = 0;\n    let newArray = [...uniques];\n\n while (reiterate) {\n\n    frequencyChanges.map((item, index) => {\n      result = result + item;\n      console.log(\"Im here\");\n      if (uniques.includes(result) &#x26;&#x26; reiterate) {\n        setReiterate(false);\n        debugger;\n        setDuplicateFrequency(result);\n      } else if (reiterate) {\n        newArray = newArray.concat(result);\n        setUniques(newArray);\n        setFrequencySum(result);\n      }\n    });\n   }\n  }\n</code></pre>\n<p>Updating state within while loop risks running into infinite loop especially if the loop condition is based on the state.</p>\n<p>Why??</p>\n<p>It is beecause the way state works in the React. For performance reasons, when we update the state and use that state info immediatelly afterwards, it is not guaranteed that it will be updated. State updated asynchronously and sometimes state updates are batched (grouped) for performance reasons! </p>\n<p>So dont rely on states too much!</p>"}},{"node":{"id":"157f9d38-d4ec-5317-9739-ff1cee6becd9","excerpt":"How to convert string to integer? Use parseInt: There is another way and in my opinion neater way to convert a string to a number","rawMarkdownBody":"\r\n![](https://i.imgur.com/6UBU54T.jpg \"Photo by Daria Shevtsova from Pexels\")\r\n\r\nHow to convert string to integer?\r\n\r\nUse parseInt:\r\n```\r\nlet integer = parseInt(\"1\");\r\n```\r\n\r\nThere is another way and in my opinion neater way to convert a string to a number\r\n```\r\nlet integer = +\"1\";\r\n```","frontmatter":{"date":"2019-11-14","title":"Convert string to integer","category":"knowledge-base"},"fields":{"slug":"/Convert_string_to_integer/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/6UBU54T.jpg\" title=\"Photo by Daria Shevtsova from Pexels\"></p>\n<p>How to convert string to integer?</p>\n<p>Use parseInt:</p>\n<pre><code>let integer = parseInt(\"1\");\n</code></pre>\n<p>There is another way and in my opinion neater way to convert a string to a number</p>\n<pre><code>let integer = +\"1\";\n</code></pre>"}},{"node":{"id":"6645abc9-8bae-5cf6-b689-381625e60d8c","excerpt":"How to update an array state in React? States in React are declared with const and therefore immutable. It means we cant (or rather shouldnt…","rawMarkdownBody":"\r\n![](https://i.imgur.com/OULUQRu.jpg \"Photo by Chokniti Khongchum from Pexels\")\r\n\r\nHow to update an array state in React?\r\n\r\nStates in React are declared with const and therefore immutable. It means we cant (or rather shouldnt) manipulate them directly.\r\n\r\nA quote from the official React documentation says:\r\n\r\n*\"Never mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.\"*\r\n\r\nWhat is direct manipulation?\r\n\r\nImagine we have this state:\r\n\r\n```\r\nconst [array, setArray] = useState([1,2,3])\r\n```\r\n\r\nThen we try to manipulate it directly:\r\n\r\n```\r\narray = [4]\r\n```\r\n\r\nState should also not be MUTATED. What is mutation? It can be an array method that will CHANGE the state directly. For example push (adding one more element to array).\r\n\r\n```\r\narray.push(4);\r\n```\r\n\r\nWhy mutation is bad? It has to do with how the memory works. \r\n\r\nWhen we create our state, for example:\r\n\r\n```\r\nconst [array, setArray] = useState([1,2,3])\r\n```\r\n\r\nThis variable will be created as an object in the memory on location lets say aaa and this object will be pointing to other memory locations for each of the elements in the array. Number 1 will have memory location xxx, Number 2 will have memory location yyy, etc). The ARRAY object in the memory location aaa only points to other memory locations. \r\n\r\nImagine we now MUTATE/change the existing array by:\r\n\r\n```\r\narray.push(4);\r\n```\r\n\r\nThis changes the EXISTING array, in memory however the memory location aaa of the WHOLE array object did NOT change (because it is not a NEW object, it is the SAME object, just mutated/slightly change). Only thing that changed is that ARRAY object on location aaa is now pointing also to number 4 located lets say on memory location qqq. If the memory location of the whole array did not change, the render of the whole component will not be triggered!!\r\n\r\nIn order to trigger the render, we need to create a NEW object in the memory! For example, creating a new array with new memory location which will be then set as the new state using <code>setArray(newArray)</code>.\r\n\r\nBest way to create a new array and concatenate the new value to it is:\r\n\r\n\r\n\r\nThere are two array methods which ave potential to be used:\r\n\r\n- array.push('new value')\r\n\r\n- array.concat('new value')\r\n\r\n<code>array.push('new value')</code> returns the **LENGHT** of the extended array, instead of the array itself! Moreover it MUTATES the array, so it should NOT be used.\r\n\r\n\r\n<code>array.concat('new value')</code> returns a new array which can be then set to OVERWRITE the state used useState hook.\r\n\r\n\r\n>Great source: \r\n\r\nhttps://blog.logrocket.com/immutability-in-react-ebe55253a1cc/\r\n\r\n\r\n> Even greater resource:\r\n\r\nhttps://www.samanthaming.com/tidbits/35-es6-way-to-clone-an-array\r\n","frontmatter":{"date":"2019-11-14","title":"React state immutability","category":"knowledge-base"},"fields":{"slug":"/React_State_Immutability/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/OULUQRu.jpg\" title=\"Photo by Chokniti Khongchum from Pexels\"></p>\n<p>How to update an array state in React?</p>\n<p>States in React are declared with const and therefore immutable. It means we cant (or rather shouldnt) manipulate them directly.</p>\n<p>A quote from the official React documentation says:</p>\n<p><em>\"Never mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.\"</em></p>\n<p>What is direct manipulation?</p>\n<p>Imagine we have this state:</p>\n<pre><code>const [array, setArray] = useState([1,2,3])\n</code></pre>\n<p>Then we try to manipulate it directly:</p>\n<pre><code>array = [4]\n</code></pre>\n<p>State should also not be MUTATED. What is mutation? It can be an array method that will CHANGE the state directly. For example push (adding one more element to array).</p>\n<pre><code>array.push(4);\n</code></pre>\n<p>Why mutation is bad? It has to do with how the memory works. </p>\n<p>When we create our state, for example:</p>\n<pre><code>const [array, setArray] = useState([1,2,3])\n</code></pre>\n<p>This variable will be created as an object in the memory on location lets say aaa and this object will be pointing to other memory locations for each of the elements in the array. Number 1 will have memory location xxx, Number 2 will have memory location yyy, etc). The ARRAY object in the memory location aaa only points to other memory locations. </p>\n<p>Imagine we now MUTATE/change the existing array by:</p>\n<pre><code>array.push(4);\n</code></pre>\n<p>This changes the EXISTING array, in memory however the memory location aaa of the WHOLE array object did NOT change (because it is not a NEW object, it is the SAME object, just mutated/slightly change). Only thing that changed is that ARRAY object on location aaa is now pointing also to number 4 located lets say on memory location qqq. If the memory location of the whole array did not change, the render of the whole component will not be triggered!!</p>\n<p>In order to trigger the render, we need to create a NEW object in the memory! For example, creating a new array with new memory location which will be then set as the new state using <code>setArray(newArray)</code>.</p>\n<p>Best way to create a new array and concatenate the new value to it is:</p>\n<p>There are two array methods which ave potential to be used:</p>\n<ul>\n<li>array.push('new value')</li>\n<li>array.concat('new value')</li>\n</ul>\n<p><code>array.push('new value')</code> returns the <strong>LENGHT</strong> of the extended array, instead of the array itself! Moreover it MUTATES the array, so it should NOT be used.</p>\n<p><code>array.concat('new value')</code> returns a new array which can be then set to OVERWRITE the state used useState hook.</p>\n<blockquote>\n<p>Great source: </p>\n</blockquote>\n<p><a href=\"https://blog.logrocket.com/immutability-in-react-ebe55253a1cc/\">https://blog.logrocket.com/immutability-in-react-ebe55253a1cc/</a></p>\n<blockquote>\n<p>Even greater resource:</p>\n</blockquote>\n<p><a href=\"https://www.samanthaming.com/tidbits/35-es6-way-to-clone-an-array\">https://www.samanthaming.com/tidbits/35-es6-way-to-clone-an-array</a></p>"}},{"node":{"id":"a71212c1-4dea-5284-96b7-da21daf63464","excerpt":"General definitions Paradigm is an universal approach to structuring code. Example of paradigms:  1/procedural programming 2/object-oriented…","rawMarkdownBody":"\r\n![](https://i.imgur.com/a6lhpyl.jpg \"Photo by Bich Tran from Pexels\")\r\n\r\n**General definitions**\r\n\r\n> Paradigm\r\n\r\nis an universal approach to structuring code. Example of paradigms: \r\n\r\n**1/**procedural programming\r\n\r\n**2/**object-oriented programming\r\n\r\n**3/**functional programming\r\n\r\nSome languages embrace one of them, other languages like JS are multi-paradigm languages.\r\n\r\n> Style\r\n\r\nindividual programmer's way of writing code\r\n\r\n> Framework\r\n\r\ntools and libraries used in program\r\n\r\n> ECMA\r\n\r\nEuropean Computer Manufacturers Association - is a standards organization for information and communication systems. Mission is to standardize computer systems in Europe. \r\n\r\n> Official name\r\n\r\nJavaScript (or in short JS) was in 2016 officially named as ECMAScriptXXXX where XXXX stands for revision year. For example now we have ECMAScript2019 which is abbreviated as ES2019. Therefor we can use Javascript, JS, ECMAScript or ES2019 to refer to the name of this language.\r\n\r\n> T39\r\n\r\nis a committee which works on new features/bugs, votes on proposals, etc. It contains 50-100 members of different companies like Google, Mozilla, etc\r\n\r\n> Birthday\r\n\r\nJS was created in 1995.\r\n\r\n> Compatibility\r\n\r\nJS is and will always be backwards compatible. Code written in 1995 will still run (on updated browsers) and won't break. JS however is NOT forward compatible. Latest JS will not run on OLD browsers!\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-11-10","title":"JS","category":"knowledge-base"},"fields":{"slug":"/JS/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/a6lhpyl.jpg\" title=\"Photo by Bich Tran from Pexels\"></p>\n<p><strong>General definitions</strong></p>\n<blockquote>\n<p>Paradigm</p>\n</blockquote>\n<p>is an universal approach to structuring code. Example of paradigms: </p>\n<p><strong>1/</strong>procedural programming</p>\n<p><strong>2/</strong>object-oriented programming</p>\n<p><strong>3/</strong>functional programming</p>\n<p>Some languages embrace one of them, other languages like JS are multi-paradigm languages.</p>\n<blockquote>\n<p>Style</p>\n</blockquote>\n<p>individual programmer's way of writing code</p>\n<blockquote>\n<p>Framework</p>\n</blockquote>\n<p>tools and libraries used in program</p>\n<blockquote>\n<p>ECMA</p>\n</blockquote>\n<p>European Computer Manufacturers Association - is a standards organization for information and communication systems. Mission is to standardize computer systems in Europe. </p>\n<blockquote>\n<p>Official name</p>\n</blockquote>\n<p>JavaScript (or in short JS) was in 2016 officially named as ECMAScriptXXXX where XXXX stands for revision year. For example now we have ECMAScript2019 which is abbreviated as ES2019. Therefor we can use Javascript, JS, ECMAScript or ES2019 to refer to the name of this language.</p>\n<blockquote>\n<p>T39</p>\n</blockquote>\n<p>is a committee which works on new features/bugs, votes on proposals, etc. It contains 50-100 members of different companies like Google, Mozilla, etc</p>\n<blockquote>\n<p>Birthday</p>\n</blockquote>\n<p>JS was created in 1995.</p>\n<blockquote>\n<p>Compatibility</p>\n</blockquote>\n<p>JS is and will always be backwards compatible. Code written in 1995 will still run (on updated browsers) and won't break. JS however is NOT forward compatible. Latest JS will not run on OLD browsers!</p>"}},{"node":{"id":"01cab728-b5ab-5d68-91f4-d2d0db339b1a","excerpt":"Are you also one of those perfectionists (like me..) who like their text to be nicely formatted in a BLOCK, rather than having each text…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Lm6vmDZ.jpg \"Photo by Suzy Hazelwood from Pexels\")\r\n\r\nAre you also one of those perfectionists (like me..) who like their text to be nicely formatted in a <code>BLOCK</code>, rather than having each text line of different length? If yes, then this article is for you!\r\n\r\nIn order to have each line of text of same length and left and right side of text nicely aligned, we can use following code:\r\n```\r\n<p style={{  textAlign: \"justify\" }}>\r\n```\r\n\r\nTry it out! It works like magic :) ","frontmatter":{"date":"2019-10-29","title":"Format Text to Block","category":"knowledge-base"},"fields":{"slug":"/Format_text_to_Block/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/Lm6vmDZ.jpg\" title=\"Photo by Suzy Hazelwood from Pexels\"></p>\n<p>Are you also one of those perfectionists (like me..) who like their text to be nicely formatted in a <code>BLOCK</code>, rather than having each text line of different length? If yes, then this article is for you!</p>\n<p>In order to have each line of text of same length and left and right side of text nicely aligned, we can use following code:</p>\n<pre><code>&#x3C;p style={{  textAlign: \"justify\" }}>\n</code></pre>\n<p>Try it out! It works like magic :) </p>"}},{"node":{"id":"6c9abba7-22db-54e0-8b4b-5b1da9836ac4","excerpt":"Only one advice here: :) Apart from that, imagine you want to display following text in a p tag : If you write the code like this: you will…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Xp2icU5.jpg \"Photo by Matthias Zomer from Pexels\")\r\n\r\nOnly one advice here:\r\n\r\n```\r\nRUUUUUUUUUUN\r\n```\r\n\r\n:)\r\n\r\nApart from that, imagine you want to display following text in a p tag :\r\n```\r\nThe way you use props is {props.name}\r\n```\r\nIf you write the code like this:\r\n```\r\n<p>The way you use props is {props.name}</p>\r\n```\r\nyou will get an error that props.name is not defined\r\n\r\nIt is because curly braces means injecting JS in JSX so the program expects for example a variable, not a plain text.\r\n\r\nSolution is to use {'{}'} like so:\r\n```\r\n<p>the way you use props is {'{props.name}'}</p>\r\n```","frontmatter":{"date":"2019-10-28","title":"Escaping curly brackets in JSX","category":"knowledge-base"},"fields":{"slug":"/Escaping_Brackets_in_JSX/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/Xp2icU5.jpg\" title=\"Photo by Matthias Zomer from Pexels\"></p>\n<p>Only one advice here:</p>\n<pre><code>RUUUUUUUUUUN\n</code></pre>\n<p>:)</p>\n<p>Apart from that, imagine you want to display following text in a p tag :</p>\n<pre><code>The way you use props is {props.name}\n</code></pre>\n<p>If you write the code like this:</p>\n<pre><code>&#x3C;p>The way you use props is {props.name}&#x3C;/p>\n</code></pre>\n<p>you will get an error that props.name is not defined</p>\n<p>It is because curly braces means injecting JS in JSX so the program expects for example a variable, not a plain text.</p>\n<p>Solution is to use {'{}'} like so:</p>\n<pre><code>&#x3C;p>the way you use props is {'{props.name}'}&#x3C;/p>\n</code></pre>"}},{"node":{"id":"79745d03-61b6-5ce0-8f80-1e13df4c5fff","excerpt":"What are higher order functions? According to Wikipedia: In mathematics and computer science, a higher-order function is a function that…","rawMarkdownBody":"\r\n![](https://i.imgur.com/o8RCUlW.jpg \"Photo by Cameron Casey from Pexels\")\r\n\r\n\r\nWhat are higher order functions? According to Wikipedia:\r\n\r\n> In mathematics and computer science, a higher-order function is a function that does at least one of the following:\r\n\r\n> **1/** takes one or more functions as arguments (i.e. procedural parameters)\r\n\r\n> **2/** returns a function as its result.\r\n\r\nFor example an array method <code>.reduce</code> is a higher order function because it takes a function called reducer as a parameter:\r\n\r\n\r\n```javascript\r\nconst [myArray, setMyArray] = useState([1, 4, 2]) \r\n<p>Im a reducer and SUM is: {myArray.reduce(reducer)}</p>\r\nconst reducer = (accumulator, currentValue, index) => {\r\n        accumulator = (accumulator + currentValue)        \r\n        return (accumulator);\r\n    } \r\n```   ","frontmatter":{"date":"2019-10-27","title":"Higher Order Functions","category":"knowledge-base"},"fields":{"slug":"/Higher_order_functions/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/o8RCUlW.jpg\" title=\"Photo by Cameron Casey from Pexels\"></p>\n<p>What are higher order functions? According to Wikipedia:</p>\n<blockquote>\n<p>In mathematics and computer science, a higher-order function is a function that does at least one of the following:</p>\n</blockquote>\n<blockquote>\n<p><strong>1/</strong> takes one or more functions as arguments (i.e. procedural parameters)</p>\n</blockquote>\n<blockquote>\n<p><strong>2/</strong> returns a function as its result.</p>\n</blockquote>\n<p>For example an array method <code>.reduce</code> is a higher order function because it takes a function called reducer as a parameter:</p>\n<pre><code class=\"language-javascript\">const [myArray, setMyArray] = useState([1, 4, 2]) \n&#x3C;p>Im a reducer and SUM is: {myArray.reduce(reducer)}&#x3C;/p>\nconst reducer = (accumulator, currentValue, index) => {\n        accumulator = (accumulator + currentValue)        \n        return (accumulator);\n    } \n</code></pre>"}},{"node":{"id":"b3781b5b-e2b5-5218-8a05-f4f8d6199a0e","excerpt":"There are two ways how to access props passed to a component. a) Using props as argument of the functional component and accessing them with…","rawMarkdownBody":"\r\n![](https://i.imgur.com/fEZTMxH.jpg \"Photo by Gnist Design from Pexels\")\r\n\r\nThere are two ways how to access props passed to a component.\r\n\r\n**a)** Using props as argument of the functional component and accessing them with <code>props.name</code>\r\n\r\n```\r\nconst Button = (props) => {\r\n  return (\r\n      <p>{props.name}</p>\r\n  )\r\n}\r\n```\r\n\r\n**b)** Passing name of prop inside curly brackets of the functional component and then accessing props with <code>name</code>\r\n```\r\nconst Button = ({name}) => {\r\n  return (\r\n      <p>{name}</p>\r\n  )\r\n}\r\n```\r\nAlternative b allows only passing specific props to the component, instead of passing ALL of them.\r\n\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-10-26","title":"Accessing Props","category":"knowledge-base"},"fields":{"slug":"/Accessing_Props/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/fEZTMxH.jpg\" title=\"Photo by Gnist Design from Pexels\"></p>\n<p>There are two ways how to access props passed to a component.</p>\n<p><strong>a)</strong> Using props as argument of the functional component and accessing them with <code>props.name</code></p>\n<pre><code>const Button = (props) => {\n  return (\n      &#x3C;p>{props.name}&#x3C;/p>\n  )\n}\n</code></pre>\n<p><strong>b)</strong> Passing name of prop inside curly brackets of the functional component and then accessing props with <code>name</code></p>\n<pre><code>const Button = ({name}) => {\n  return (\n      &#x3C;p>{name}&#x3C;/p>\n  )\n}\n</code></pre>\n<p>Alternative b allows only passing specific props to the component, instead of passing ALL of them.</p>"}},{"node":{"id":"039da72b-30dc-5e36-a87c-3cc74cb7f40a","excerpt":"Imagine we add to our code a line like this: Then we are able to execute code only up until this line.  You need to go to your website and…","rawMarkdownBody":"\r\n![](https://i.imgur.com/7vkvSLF.jpg \"Photo by Egor Kamelev from Pixabay\")\r\n\r\nImagine we add to our code a line like this:\r\n```\r\ndebugger;\r\n```\r\nThen we are able to execute code only up until this line. \r\n\r\nYou need to go to your website and open the <code>DEV TOOLS</code> (without opening the dev tools you won't be able to see the debugger stopping at the given place).\r\n\r\nAutomatical execution will stop and we will be able to use console to check for any value of our variable and hence check if all variables have correct values. \r\n\r\nFor example if we put debugger to <code>onClick</code> event handler, we can type in console:\r\n```\r\nevent\r\n```\r\nand we will see the whole event object.\r\n\r\nWe can put\r\n```\r\nevent.target\r\n```\r\n\r\nand see all the options we have that can be used as <code>event.target</code>. <code>Event.target</code> set is pre-defined and doesn't display any custom values, like prop names.\r\n\r\nTo read custom properties, we can use:\r\n```\r\nevent.target.attribute\r\n```\r\nFor example, if we gave our button attribute <code>user</code>, then we can access it by\r\n```\r\nevent.target.attribute.user\r\n```\r\nIf we wanted to access what is in between of the closing and ending tag of button we write\r\n```\r\nevent.target.innerHTML\r\n```\r\nPlease Note: React does not persist the events. Therefore many of those values might be empty. We can add this line to our code:\r\n```\r\nevent.persist();\r\n```","frontmatter":{"date":"2019-10-25","title":"Debugging","category":"knowledge-base"},"fields":{"slug":"/Debugging/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/7vkvSLF.jpg\" title=\"Photo by Egor Kamelev from Pixabay\"></p>\n<p>Imagine we add to our code a line like this:</p>\n<pre><code>debugger;\n</code></pre>\n<p>Then we are able to execute code only up until this line. </p>\n<p>You need to go to your website and open the <code>DEV TOOLS</code> (without opening the dev tools you won't be able to see the debugger stopping at the given place).</p>\n<p>Automatical execution will stop and we will be able to use console to check for any value of our variable and hence check if all variables have correct values. </p>\n<p>For example if we put debugger to <code>onClick</code> event handler, we can type in console:</p>\n<pre><code>event\n</code></pre>\n<p>and we will see the whole event object.</p>\n<p>We can put</p>\n<pre><code>event.target\n</code></pre>\n<p>and see all the options we have that can be used as <code>event.target</code>. <code>Event.target</code> set is pre-defined and doesn't display any custom values, like prop names.</p>\n<p>To read custom properties, we can use:</p>\n<pre><code>event.target.attribute\n</code></pre>\n<p>For example, if we gave our button attribute <code>user</code>, then we can access it by</p>\n<pre><code>event.target.attribute.user\n</code></pre>\n<p>If we wanted to access what is in between of the closing and ending tag of button we write</p>\n<pre><code>event.target.innerHTML\n</code></pre>\n<p>Please Note: React does not persist the events. Therefore many of those values might be empty. We can add this line to our code:</p>\n<pre><code>event.persist();\n</code></pre>"}},{"node":{"id":"3a121e1a-354a-5648-9ba5-84e170b653d4","excerpt":"Event handlers like onClick will by default pass in some metadata to the event handler function, which we can use afterwards. For example…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Ac14aft.jpg \"Photo by Wolfgang from Pexels\")\r\n\r\nEvent handlers like <code>onClick</code> will by default pass in some metadata to the event handler function, which we can use afterwards. For example: name and id of the element which triggered it or trigger type (onClick, onMouseOver, onChange, etc)\r\n\r\nWe access them by:\r\n```\r\nevent.target.name\r\nevent.target.id\r\n```\r\nThese names are predefined by default!\r\n\r\nBut we can also access all our custom properties by:\r\n```\r\nevent.target.attribute.XXX\r\n```\r\n\r\nwhere XXX is name of our custom property. Please note however, that this is not a reliable way to retreive data. This way uses DOM and DOM does not keep this data longer than the moment when the event was triggered. For that reason we might also need to include \r\n```\r\nevent.persist()\r\n```\r\n\r\nExample:\r\n```\r\nfunction handleClick(event) {\r\n    console.log(\"Event: \", event);\r\n    console.log(\"Event type: \", event.type);\r\n    console.log(\"Event name: \", event.target.name);\r\n    console.log(\"Event id: \", event.target.id);\r\n    console.log(\"Event custom property: \", event.target.attributes.custom);\r\n    console.log(\"Event innerHTML: \", event.target.attributes.innerHTML);\r\n  }\r\n<button onClick={handleClick} name={\"clicker\"} id={\"click01\"} custom=\"I am the best in clicking\">\r\n    Click ME!\r\n</button>\r\n```\r\n\r\n> PLEASE NOTE: <code>console.log(\"Event: \", event);</code> will return the whole event OBJECT (on which we can click and see all nodes). If we wrote <code>console.log(\"Event: \" + event);</code> event object would be stringyfied and we wont have opportunity to explore the OBJECT!!\r\n\r\n\r\nWe might need to get some info from the element which called our event handler. For example <code>onClick</code>. With the onClick, we can use the information provided in event object and retreeive data about our componenet which triggered the event from event object. But this approach is not good, becasue it retrieves data from the DOM. In React we dont want to rely on DOM because it is outside of the React world. \r\n\r\n``` \r\nfunction handleClick(event) {\r\n    setMyArray(\r\n      myArray.concat({\r\n        firstName: event.target.attributes.name,\r\n        lastName: event.target.attributes.last,\r\n        display: event.target.innerHTML,\r\n      })\r\n    );\r\n  }\r\n<button onClick={handleClick} name={\"pete\"} id={\"grey\"} last=\"IM HIDDEN\">\r\n        Add Pete\r\n      </button>\r\n```\r\n\r\nIt is better to use it in this way:\r\n``` \r\n<Button\r\n        onClickZ={(name, id) => {\r\n          console.log(name, id);\r\n        }}\r\n        name=\"I AM NAME\"\r\n        id=\"IM ID\"\r\n        children=\"We are the children\"\r\n        last=\"IM LAST NAME\"\r\n      />\r\nfunction Button({ onClickZ, name, last, children }) {\r\n  return <button onClick={() => onClickZ(name, last)}>{children}</button>;\r\n}\r\n```","frontmatter":{"date":"2019-10-24","title":"Event Handlers","category":"knowledge-base"},"fields":{"slug":"/Event_Handlers/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/Ac14aft.jpg\" title=\"Photo by Wolfgang from Pexels\"></p>\n<p>Event handlers like <code>onClick</code> will by default pass in some metadata to the event handler function, which we can use afterwards. For example: name and id of the element which triggered it or trigger type (onClick, onMouseOver, onChange, etc)</p>\n<p>We access them by:</p>\n<pre><code>event.target.name\nevent.target.id\n</code></pre>\n<p>These names are predefined by default!</p>\n<p>But we can also access all our custom properties by:</p>\n<pre><code>event.target.attribute.XXX\n</code></pre>\n<p>where XXX is name of our custom property. Please note however, that this is not a reliable way to retreive data. This way uses DOM and DOM does not keep this data longer than the moment when the event was triggered. For that reason we might also need to include </p>\n<pre><code>event.persist()\n</code></pre>\n<p>Example:</p>\n<pre><code>function handleClick(event) {\n    console.log(\"Event: \", event);\n    console.log(\"Event type: \", event.type);\n    console.log(\"Event name: \", event.target.name);\n    console.log(\"Event id: \", event.target.id);\n    console.log(\"Event custom property: \", event.target.attributes.custom);\n    console.log(\"Event innerHTML: \", event.target.attributes.innerHTML);\n  }\n&#x3C;button onClick={handleClick} name={\"clicker\"} id={\"click01\"} custom=\"I am the best in clicking\">\n    Click ME!\n&#x3C;/button>\n</code></pre>\n<blockquote>\n<p>PLEASE NOTE: <code>console.log(\"Event: \", event);</code> will return the whole event OBJECT (on which we can click and see all nodes). If we wrote <code>console.log(\"Event: \" + event);</code> event object would be stringyfied and we wont have opportunity to explore the OBJECT!!</p>\n</blockquote>\n<p>We might need to get some info from the element which called our event handler. For example <code>onClick</code>. With the onClick, we can use the information provided in event object and retreeive data about our componenet which triggered the event from event object. But this approach is not good, becasue it retrieves data from the DOM. In React we dont want to rely on DOM because it is outside of the React world. </p>\n<pre><code>function handleClick(event) {\n    setMyArray(\n      myArray.concat({\n        firstName: event.target.attributes.name,\n        lastName: event.target.attributes.last,\n        display: event.target.innerHTML,\n      })\n    );\n  }\n&#x3C;button onClick={handleClick} name={\"pete\"} id={\"grey\"} last=\"IM HIDDEN\">\n        Add Pete\n      &#x3C;/button>\n</code></pre>\n<p>It is better to use it in this way:</p>\n<pre><code>&#x3C;Button\n        onClickZ={(name, id) => {\n          console.log(name, id);\n        }}\n        name=\"I AM NAME\"\n        id=\"IM ID\"\n        children=\"We are the children\"\n        last=\"IM LAST NAME\"\n      />\nfunction Button({ onClickZ, name, last, children }) {\n  return &#x3C;button onClick={() => onClickZ(name, last)}>{children}&#x3C;/button>;\n}\n</code></pre>"}},{"node":{"id":"aec91bba-9aec-59ca-a7e2-fd10a2ee61c9","excerpt":"Ever wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a…","rawMarkdownBody":"\r\n![](https://i.imgur.com/YsPOiRH.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nEver wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a button:\r\n```\r\n<Button name=\"ABC\" color=\"green\">I AM CHILD</bButton>\r\n```\r\n\r\nThere are two ways how we can declare innerHTML\r\n\r\n**a) Writing text between opening and closing tag**:\r\n\r\n```\r\n<Button name=\"ABC\" color=\"green\">I AM CHILD</Button>\r\n``` \r\n\r\n**b) Writing children property**:\r\n\r\n\r\n``` \r\n<Button children=\"I AM A CHILD\" name=\"ABC\" color=\"green\"/>\r\n```\r\n\r\n> Please note: when using second option we need to have self closing tag, because if I have:\r\n```\r\n<Button children=\"Hello\"></Button>\r\n``` \r\n\r\nan empty space between opening and closing tag will overwrite my children property!\r\n\r\n>Please note: It is a good practice to write children between opening and closing tags (option A), rather than using it as property (option B)\r\n\r\nWhen we then define the button component, we can retrieve the children props like this\r\n\r\n**Alternative A**: Passing word children and then accessing it by word children\r\n\r\n```\r\nconst Button = ({children}) => {\r\n  return (\r\n      <button>{children}</button>\r\n  )\r\n}\r\n\r\n```\r\n**Alternative B**: Passing word props as arguments and then accessing props like so: props.children\r\n``` \r\nconst Button = (props) => {\r\n  return (\r\n      <button>{props.children}</button>\r\n  )\r\n}\r\n```\r\n\r\n","frontmatter":{"date":"2019-10-23","title":"Children - how to access inner HTML","category":"knowledge-base"},"fields":{"slug":"/Children-How_to_access_Inner_HTML/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/YsPOiRH.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>Ever wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a button:</p>\n<pre><code>&#x3C;Button name=\"ABC\" color=\"green\">I AM CHILD&#x3C;/bButton>\n</code></pre>\n<p>There are two ways how we can declare innerHTML</p>\n<p><strong>a) Writing text between opening and closing tag</strong>:</p>\n<pre><code>&#x3C;Button name=\"ABC\" color=\"green\">I AM CHILD&#x3C;/Button>\n</code></pre>\n<p><strong>b) Writing children property</strong>:</p>\n<pre><code>&#x3C;Button children=\"I AM A CHILD\" name=\"ABC\" color=\"green\"/>\n</code></pre>\n<blockquote>\n<p>Please note: when using second option we need to have self closing tag, because if I have:</p>\n</blockquote>\n<pre><code>&#x3C;Button children=\"Hello\">&#x3C;/Button>\n</code></pre>\n<p>an empty space between opening and closing tag will overwrite my children property!</p>\n<blockquote>\n<p>Please note: It is a good practice to write children between opening and closing tags (option A), rather than using it as property (option B)</p>\n</blockquote>\n<p>When we then define the button component, we can retrieve the children props like this</p>\n<p><strong>Alternative A</strong>: Passing word children and then accessing it by word children</p>\n<pre><code>const Button = ({children}) => {\n  return (\n      &#x3C;button>{children}&#x3C;/button>\n  )\n}\n</code></pre>\n<p><strong>Alternative B</strong>: Passing word props as arguments and then accessing props like so: props.children</p>\n<pre><code>const Button = (props) => {\n  return (\n      &#x3C;button>{props.children}&#x3C;/button>\n  )\n}\n</code></pre>"}},{"node":{"id":"74af5e5d-4bd2-5a94-bcac-a1d720287e6e","excerpt":"3 ways to define a function: or or Above functions would be called like this: Parenthesis mean call function immediately and output whatever…","rawMarkdownBody":"\r\n![](https://i.imgur.com/dGu7Oa8.jpg \"Photo by Rodolfo Clix from Pexels\")\r\n\r\n3 ways to define a function:\r\n```\r\nfunction bla() {\r\n  return null\r\n}\r\n```\r\nor\r\n```\r\nconst blo = () => {\r\n  return null\r\n}\r\n```\r\nor\r\n```\r\n() => onClickZ(name, last) {\r\n  return null\r\n}\r\n```\r\n\r\nAbove functions would be called like this:\r\n```\r\nbla()\r\nblo()\r\nonClickZ(name, last)\r\n```\r\nParenthesis mean call function immediately and output whatever is in the return.\r\n\r\nReferencing a function needs to be without parenthesis:\r\n```\r\nbla\r\nblo\r\nonClickZ\r\n```\r\nReferencing can be also done in event handlers like this\r\n```\r\nonChange={()=>onClickZ(name,last)}\r\n```\r\n\r\nAbove example is useful when we need to provide arguments to the function. But if we simply wrote\r\n``` \r\nonClickZ(name,last)\r\n```\r\nwe would actually CALL function, hence we need to use:\r\n```\r\n()=>onClickZ(name,last)\r\n```\r\nin order to reference a function and not to directly CALL it.\r\n","frontmatter":{"date":"2019-10-20","title":"Function declaration and call","category":"knowledge-base"},"fields":{"slug":"/Function_declaration_and_call/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/dGu7Oa8.jpg\" title=\"Photo by Rodolfo Clix from Pexels\"></p>\n<p>3 ways to define a function:</p>\n<pre><code>function bla() {\n  return null\n}\n</code></pre>\n<p>or</p>\n<pre><code>const blo = () => {\n  return null\n}\n</code></pre>\n<p>or</p>\n<pre><code>() => onClickZ(name, last) {\n  return null\n}\n</code></pre>\n<p>Above functions would be called like this:</p>\n<pre><code>bla()\nblo()\nonClickZ(name, last)\n</code></pre>\n<p>Parenthesis mean call function immediately and output whatever is in the return.</p>\n<p>Referencing a function needs to be without parenthesis:</p>\n<pre><code>bla\nblo\nonClickZ\n</code></pre>\n<p>Referencing can be also done in event handlers like this</p>\n<pre><code>onChange={()=>onClickZ(name,last)}\n</code></pre>\n<p>Above example is useful when we need to provide arguments to the function. But if we simply wrote</p>\n<pre><code>onClickZ(name,last)\n</code></pre>\n<p>we would actually CALL function, hence we need to use:</p>\n<pre><code>()=>onClickZ(name,last)\n</code></pre>\n<p>in order to reference a function and not to directly CALL it.</p>"}},{"node":{"id":"5ceea364-3786-507b-a8fa-46537cb75249","excerpt":"If we use function definition like this (using arrow functions): and this definition is AFTER code where it is called, it might still not be…","rawMarkdownBody":"\r\n![](https://i.imgur.com/WBmDMUv.jpg \"Photo by Susanne Jutzeler from Pexels\")\r\n\r\nIf we use function definition like this (using arrow functions):\r\n```\r\nconst Button = () => {\r\n}\r\n```\r\n\r\nand this definition is AFTER code where it is called, it might still not be defined.\r\n\r\nBut if we use:\r\n```\r\n function Button () {\r\n}\r\n```\r\n\r\nsuch function definition can be anywhere at the end of the file, but it will be **HOISTED**. \r\n\r\nHoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.\r\n\r\nInevitably, this means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local. \r\n\r\nThis allows you to  be able to call functions before you wrote them in your code.\r\n\r\n> Reference:\r\n\r\nhttps://scotch.io/tutorials/understanding-hoisting-in-javascript\r\n\r\n![](https://i.imgur.com/UyFD8zE.jpg \"Photo by Jens Johnsson from Pexels\")","frontmatter":{"date":"2019-10-18","title":"Function definition: Arrow vs Function, Hoising","category":"knowledge-base"},"fields":{"slug":"/Function_vs_Arrow_and_Hoisting/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/WBmDMUv.jpg\" title=\"Photo by Susanne Jutzeler from Pexels\"></p>\n<p>If we use function definition like this (using arrow functions):</p>\n<pre><code>const Button = () => {\n}\n</code></pre>\n<p>and this definition is AFTER code where it is called, it might still not be defined.</p>\n<p>But if we use:</p>\n<pre><code> function Button () {\n}\n</code></pre>\n<p>such function definition can be anywhere at the end of the file, but it will be <strong>HOISTED</strong>. </p>\n<p>Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.</p>\n<p>Inevitably, this means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local. </p>\n<p>This allows you to  be able to call functions before you wrote them in your code.</p>\n<blockquote>\n<p>Reference:</p>\n</blockquote>\n<p><a href=\"https://scotch.io/tutorials/understanding-hoisting-in-javascript\">https://scotch.io/tutorials/understanding-hoisting-in-javascript</a></p>\n<p><img src=\"https://i.imgur.com/UyFD8zE.jpg\" title=\"Photo by Jens Johnsson from Pexels\"></p>"}},{"node":{"id":"6503f079-62e0-5295-b708-85959e49e3de","excerpt":"Have you wondered how you can actually output an array in exactly the same form as you declare it? Say we have array: If you display it just…","rawMarkdownBody":"\r\n![](https://i.imgur.com/KX2u0f2.jpg \"Photo by Dominika Roseclay from Pexels\")\r\n\r\nHave you wondered how you can actually output an array in exactly the same form as you declare it?\r\n\r\n> Say we have array:\r\n```\r\nconst myArray = [1, 2, 4];\r\n```\r\n> If you display it just as myArray, you will get: My array is 124\r\n```\r\n<p>My array is {myArray}</p>\r\n```\r\n\r\n> If you want to display however: My array is [1,2,4] you need to use JSON.stringify\r\n```\r\n<p>My array is {JSON.stringify(myArray)}</p>\r\n```","frontmatter":{"date":"2019-10-17","title":"JSON.stringify","category":"knowledge-base"},"fields":{"slug":"/JSON.stringify/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/KX2u0f2.jpg\" title=\"Photo by Dominika Roseclay from Pexels\"></p>\n<p>Have you wondered how you can actually output an array in exactly the same form as you declare it?</p>\n<blockquote>\n<p>Say we have array:</p>\n</blockquote>\n<pre><code>const myArray = [1, 2, 4];\n</code></pre>\n<blockquote>\n<p>If you display it just as myArray, you will get: My array is 124</p>\n</blockquote>\n<pre><code>&#x3C;p>My array is {myArray}&#x3C;/p>\n</code></pre>\n<blockquote>\n<p>If you want to display however: My array is [1,2,4] you need to use JSON.stringify</p>\n</blockquote>\n<pre><code>&#x3C;p>My array is {JSON.stringify(myArray)}&#x3C;/p>\n</code></pre>"}},{"node":{"id":"5bf2bf56-aa30-5f06-954f-3b4e4248f800","excerpt":"Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a…","rawMarkdownBody":"\r\n![](https://i.imgur.com/uUsUaUJ.jpg \"Photo by Suraphat Nuea-on from Pexels\")\r\n\r\n> Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a better way how components can receive props. The way is called **context** and you can think of it as something like a global variable.\r\n\r\n> Imagine component structure:\r\nA -> D -> C\r\n\r\n> A is parent and only summons D component. Then D summons  C\r\n\r\n> A has prop for theme ( value: \"green\") which needs to be passed to C. But only to C. Other component like D doesnt care about this prop.\r\n\r\n> Top level component **PROVIDES** context and child component **CONSUMES** the context. \r\n\r\nProvider example: component A.  \r\n\r\nConsumer Example: componenet called D\r\n\r\n> A: provides theme\r\n\r\n> C: consumes theme\r\n\r\n> First we create the context itself:\r\n``` \r\n// src/ThemeContext.js\r\nimport React from 'react';\r\nconst ThemeContext = React.createContext(null);\r\nexport default ThemeContext;\r\n```\r\n> <code>React.createContext</code> will give us access to Provider and Consumer components.\r\n```\r\nThemeContext = React.createContext(null);\r\n```\r\n> Then we create component A which will be context provider\r\n```\r\n// src/ComponentA.js\r\nimport React from 'react';\r\nimport ThemeContext from './ThemeContext';\r\nconst A = () => (\r\n  <ThemeContext.Provider value=\"green\">\r\n    <D />\r\n  </ThemeContext.Provider>\r\n);\r\n```\r\n> We need to include new components called <code>ThemeContext.Provider</code>\r\n\r\n> A doesn't pass any props to D component. It makes value green available to all child components. A summons D component.\r\n\r\n> Let's look at C component. Now that A has made the value green available to all children, C can access that value:\r\n```\r\n// src/ComponentC.js\r\nimport React from 'react';\r\nimport ThemeContext from './ThemeContext';\r\nconst C = () => (\r\n  <ThemeContext.Consumer>\r\n    {value => (\r\n      <p style={{ color: value }}>\r\n        Hello World\r\n      </p>\r\n    )}\r\n  </ThemeContext.Consumer>\r\n);\r\n```\r\n\r\n> Complete example:\r\n``` \r\nimport React from \"react\";\r\nconst ColorContext = React.createContext(null);\r\nexport function SimpleContext(){\r\n    return (\r\n        <ColorContext.Provider value=\"green\">\r\n        <D />\r\n        </ColorContext.Provider>\r\n        )\r\n    }\r\nconst D = () => {\r\n    return (\r\n        <div>\r\n        <p>I am D component which is summoned by Parent component but I dont consume Context</p>\r\n        <C />\r\n        </div>\r\n    )\r\n}\r\nconst C = () => {\r\n    return (\r\n        <ColorContext.Consumer>\r\n        { value => (\r\n        <p style={{color: value}}>I am a C component summoned by D but I received beautiful green colour from my dear Parent</p>\r\n        )}\r\n        </ColorContext.Consumer>\r\n    )\r\n}\r\n```\r\n\r\n> With HOOKs we can make this even more elegant\r\n```\r\nimport React, { useContext } from \"react\";\r\nconst ColorContext = React.createContext(\r\n    { value: \"purple\"}\r\n);\r\nexport function SimpleContextUsewithHook(){\r\n    return (        \r\n        <D />        \r\n        )\r\n    }\r\nconst D = () => {\r\n    return (\r\n        <div>\r\n        <p>I am D component which is summoned by Parent component but I dont consume Context</p>\r\n        <C />\r\n        </div>\r\n    )\r\n}\r\nconst C = () => {\r\n    const context = useContext(ColorContext);\r\n    return (  \r\n        <p style={{color: context.value}}>I am a C component summoned by D but I received beautiful purple colour from my dear Parent</p> \r\n    )\r\n}\r\n```\r\n\r\n> Complex example with classes where we still use provider because we also want to be able to update the team\r\n```\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport './style.css';\r\nconst ProfileContext = React.createContext();\r\nclass ProfileProvider extends React.Component {\r\n  state = {\r\n    company: 'Progress',\r\n    companyImage: 'https://svgshare.com/i/9ir.svg',\r\n    url: 'https://www.telerik.com/kendo-react-ui/',\r\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\r\n    userName: 'Kendoka',\r\n    fullName: 'Kendō No Arikata',\r\n    team: 'KendoReact',\r\n    changeTeam: (team) => this.setState({\r\n      team: `Kendo${team}`\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <ProfileContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </ProfileContext.Provider>\r\n    )\r\n  }\r\n}\r\nconst App = () => (\r\n  <ProfileProvider>\r\n    <Profile />\r\n  </ProfileProvider>\r\n)\r\nconst Profile = () => (\r\n  <div className=\"profile\">\r\n    <ProfileContext.Consumer>\r\n      {context => <img src={context.companyImage} />}\r\n    </ProfileContext.Consumer>\r\n    <User />\r\n  </div>\r\n)\r\nconst User = () => (\r\n  <div className=\"user\">\r\n    <ProfileContext.Consumer>\r\n      {context =>\r\n        <React.Fragment>\r\n          <a href={context.url}>\r\n            <img src={context.userImage} width=\"138px\" />\r\n          </a>\r\n          <h1 className=\"profile-userName\">{context.userName}</h1>\r\n          <p className=\"profile-fullName\">({context.fullName})</p>\r\n          <Team />\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('Angular')}>Angular</button>\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('Vue')}>Vue</button>\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('React')}>React</button>\r\n        </React.Fragment>\r\n      }\r\n    </ProfileContext.Consumer>\r\n  </div>\r\n)\r\nconst Team = () => (\r\n  <ProfileContext.Consumer>\r\n    {context =>\r\n      <div className=\"team\">\r\n        <p className=\"profile-team\">{context.team}</p>\r\n      </div>\r\n    }\r\n  </ProfileContext.Consumer>\r\n)\r\nrender(<App />, document.getElementById('root'));\r\n``` \r\n\r\n> Same with hooks\r\n```\r\nimport React, { Component, useContext } from 'react';\r\nimport { render } from 'react-dom';\r\nimport './style.css';\r\nconst ProfileContext = React.createContext();\r\nclass ProfileProvider extends Component {\r\n  state = {\r\n    company: 'Progress',\r\n    companyImage: 'https://svgshare.com/i/9ir.svg',\r\n    url: 'https://www.telerik.com/kendo-react-ui/',\r\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\r\n    userName: 'Kendoken',\r\n    fullName: 'Kendoken No Michi',\r\n    team: 'KendoReact',\r\n    toggleTeam: (team) => this.setState({\r\n      team: `Kendo${team}`\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <ProfileContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </ProfileContext.Provider>\r\n    )\r\n  }\r\n}\r\nlet Profile = () => {\r\n  const context = useContext(ProfileContext);\r\n  return (\r\n    <div className=\"profile\">\r\n      <img src={context.companyImage} />\r\n      <User />\r\n    </div>\r\n  )\r\n}\r\nlet User = () => {\r\n  const context = useContext(ProfileContext);\r\n return (\r\n    <div className=\"user\">\r\n      <a href={context.url}>\r\n        <img src={context.userImage} width=\"138px\" />\r\n      </a>\r\n      <h1 className=\"profile-userName\">{context.userName}</h1>\r\n      <p className=\"profile-fullName\">({context.fullName})</p>\r\n      <Team />\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('Angular')}>Angular</button>\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('Vue')}>Vue</button>\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('React')}>React</button>\r\n    </div>\r\n  )\r\n}\r\nlet Team = () => {\r\n  const context = useContext(ProfileContext);\r\n  return (\r\n    <div className=\"team\">\r\n      <p className=\"profile-team\">{context.team}</p>\r\n    </div>\r\n  )\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <ProfileProvider>\r\n        <Profile />\r\n      </ProfileProvider>\r\n    );\r\n  }\r\n}\r\nrender(<App />, document.getElementById('root'));\r\n```\r\n> Resource: \r\n\r\nhttps://www.robinwieruch.de/react-context","frontmatter":{"date":"2019-10-16","title":"Context","category":"knowledge-base"},"fields":{"slug":"/Context/"},"timeToRead":5,"html":"<p><img src=\"https://i.imgur.com/uUsUaUJ.jpg\" title=\"Photo by Suraphat Nuea-on from Pexels\"></p>\n<blockquote>\n<p>Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a better way how components can receive props. The way is called <strong>context</strong> and you can think of it as something like a global variable.</p>\n</blockquote>\n<blockquote>\n<p>Imagine component structure:\nA -> D -> C</p>\n</blockquote>\n<blockquote>\n<p>A is parent and only summons D component. Then D summons  C</p>\n</blockquote>\n<blockquote>\n<p>A has prop for theme ( value: \"green\") which needs to be passed to C. But only to C. Other component like D doesnt care about this prop.</p>\n</blockquote>\n<blockquote>\n<p>Top level component <strong>PROVIDES</strong> context and child component <strong>CONSUMES</strong> the context. </p>\n</blockquote>\n<p>Provider example: component A.  </p>\n<p>Consumer Example: componenet called D</p>\n<blockquote>\n<p>A: provides theme</p>\n</blockquote>\n<blockquote>\n<p>C: consumes theme</p>\n</blockquote>\n<blockquote>\n<p>First we create the context itself:</p>\n</blockquote>\n<pre><code>// src/ThemeContext.js\nimport React from 'react';\nconst ThemeContext = React.createContext(null);\nexport default ThemeContext;\n</code></pre>\n<blockquote>\n<p><code>React.createContext</code> will give us access to Provider and Consumer components.</p>\n</blockquote>\n<pre><code>ThemeContext = React.createContext(null);\n</code></pre>\n<blockquote>\n<p>Then we create component A which will be context provider</p>\n</blockquote>\n<pre><code>// src/ComponentA.js\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nconst A = () => (\n  &#x3C;ThemeContext.Provider value=\"green\">\n    &#x3C;D />\n  &#x3C;/ThemeContext.Provider>\n);\n</code></pre>\n<blockquote>\n<p>We need to include new components called <code>ThemeContext.Provider</code></p>\n</blockquote>\n<blockquote>\n<p>A doesn't pass any props to D component. It makes value green available to all child components. A summons D component.</p>\n</blockquote>\n<blockquote>\n<p>Let's look at C component. Now that A has made the value green available to all children, C can access that value:</p>\n</blockquote>\n<pre><code>// src/ComponentC.js\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nconst C = () => (\n  &#x3C;ThemeContext.Consumer>\n    {value => (\n      &#x3C;p style={{ color: value }}>\n        Hello World\n      &#x3C;/p>\n    )}\n  &#x3C;/ThemeContext.Consumer>\n);\n</code></pre>\n<blockquote>\n<p>Complete example:</p>\n</blockquote>\n<pre><code>import React from \"react\";\nconst ColorContext = React.createContext(null);\nexport function SimpleContext(){\n    return (\n        &#x3C;ColorContext.Provider value=\"green\">\n        &#x3C;D />\n        &#x3C;/ColorContext.Provider>\n        )\n    }\nconst D = () => {\n    return (\n        &#x3C;div>\n        &#x3C;p>I am D component which is summoned by Parent component but I dont consume Context&#x3C;/p>\n        &#x3C;C />\n        &#x3C;/div>\n    )\n}\nconst C = () => {\n    return (\n        &#x3C;ColorContext.Consumer>\n        { value => (\n        &#x3C;p style={{color: value}}>I am a C component summoned by D but I received beautiful green colour from my dear Parent&#x3C;/p>\n        )}\n        &#x3C;/ColorContext.Consumer>\n    )\n}\n</code></pre>\n<blockquote>\n<p>With HOOKs we can make this even more elegant</p>\n</blockquote>\n<pre><code>import React, { useContext } from \"react\";\nconst ColorContext = React.createContext(\n    { value: \"purple\"}\n);\nexport function SimpleContextUsewithHook(){\n    return (        \n        &#x3C;D />        \n        )\n    }\nconst D = () => {\n    return (\n        &#x3C;div>\n        &#x3C;p>I am D component which is summoned by Parent component but I dont consume Context&#x3C;/p>\n        &#x3C;C />\n        &#x3C;/div>\n    )\n}\nconst C = () => {\n    const context = useContext(ColorContext);\n    return (  \n        &#x3C;p style={{color: context.value}}>I am a C component summoned by D but I received beautiful purple colour from my dear Parent&#x3C;/p> \n    )\n}\n</code></pre>\n<blockquote>\n<p>Complex example with classes where we still use provider because we also want to be able to update the team</p>\n</blockquote>\n<pre><code>import React from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\nconst ProfileContext = React.createContext();\nclass ProfileProvider extends React.Component {\n  state = {\n    company: 'Progress',\n    companyImage: 'https://svgshare.com/i/9ir.svg',\n    url: 'https://www.telerik.com/kendo-react-ui/',\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\n    userName: 'Kendoka',\n    fullName: 'Kendō No Arikata',\n    team: 'KendoReact',\n    changeTeam: (team) => this.setState({\n      team: `Kendo${team}`\n    })\n  }\n  render() {\n    return (\n      &#x3C;ProfileContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/ProfileContext.Provider>\n    )\n  }\n}\nconst App = () => (\n  &#x3C;ProfileProvider>\n    &#x3C;Profile />\n  &#x3C;/ProfileProvider>\n)\nconst Profile = () => (\n  &#x3C;div className=\"profile\">\n    &#x3C;ProfileContext.Consumer>\n      {context => &#x3C;img src={context.companyImage} />}\n    &#x3C;/ProfileContext.Consumer>\n    &#x3C;User />\n  &#x3C;/div>\n)\nconst User = () => (\n  &#x3C;div className=\"user\">\n    &#x3C;ProfileContext.Consumer>\n      {context =>\n        &#x3C;React.Fragment>\n          &#x3C;a href={context.url}>\n            &#x3C;img src={context.userImage} width=\"138px\" />\n          &#x3C;/a>\n          &#x3C;h1 className=\"profile-userName\">{context.userName}&#x3C;/h1>\n          &#x3C;p className=\"profile-fullName\">({context.fullName})&#x3C;/p>\n          &#x3C;Team />\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('Angular')}>Angular&#x3C;/button>\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('Vue')}>Vue&#x3C;/button>\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('React')}>React&#x3C;/button>\n        &#x3C;/React.Fragment>\n      }\n    &#x3C;/ProfileContext.Consumer>\n  &#x3C;/div>\n)\nconst Team = () => (\n  &#x3C;ProfileContext.Consumer>\n    {context =>\n      &#x3C;div className=\"team\">\n        &#x3C;p className=\"profile-team\">{context.team}&#x3C;/p>\n      &#x3C;/div>\n    }\n  &#x3C;/ProfileContext.Consumer>\n)\nrender(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<blockquote>\n<p>Same with hooks</p>\n</blockquote>\n<pre><code>import React, { Component, useContext } from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\nconst ProfileContext = React.createContext();\nclass ProfileProvider extends Component {\n  state = {\n    company: 'Progress',\n    companyImage: 'https://svgshare.com/i/9ir.svg',\n    url: 'https://www.telerik.com/kendo-react-ui/',\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\n    userName: 'Kendoken',\n    fullName: 'Kendoken No Michi',\n    team: 'KendoReact',\n    toggleTeam: (team) => this.setState({\n      team: `Kendo${team}`\n    })\n  }\n  render() {\n    return (\n      &#x3C;ProfileContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/ProfileContext.Provider>\n    )\n  }\n}\nlet Profile = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"profile\">\n      &#x3C;img src={context.companyImage} />\n      &#x3C;User />\n    &#x3C;/div>\n  )\n}\nlet User = () => {\n  const context = useContext(ProfileContext);\n return (\n    &#x3C;div className=\"user\">\n      &#x3C;a href={context.url}>\n        &#x3C;img src={context.userImage} width=\"138px\" />\n      &#x3C;/a>\n      &#x3C;h1 className=\"profile-userName\">{context.userName}&#x3C;/h1>\n      &#x3C;p className=\"profile-fullName\">({context.fullName})&#x3C;/p>\n      &#x3C;Team />\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('Angular')}>Angular&#x3C;/button>\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('Vue')}>Vue&#x3C;/button>\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('React')}>React&#x3C;/button>\n    &#x3C;/div>\n  )\n}\nlet Team = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"team\">\n      &#x3C;p className=\"profile-team\">{context.team}&#x3C;/p>\n    &#x3C;/div>\n  )\n}\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;ProfileProvider>\n        &#x3C;Profile />\n      &#x3C;/ProfileProvider>\n    );\n  }\n}\nrender(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<blockquote>\n<p>Resource: </p>\n</blockquote>\n<p><a href=\"https://www.robinwieruch.de/react-context\">https://www.robinwieruch.de/react-context</a></p>"}},{"node":{"id":"b5d5486b-46e4-575c-a90c-7015cd02d563","excerpt":"Sometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the…","rawMarkdownBody":"\r\n![](https://i.imgur.com/zMFVLde.jpg \"Photo by Dids from Pexels\")\r\n\r\nSometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the local storage is:\r\n```\r\nwindow.localStorage.setItem('myInput', value)\r\n```\r\nExample code:\r\n```\r\nimport React from \"react\";\r\n\r\nexport class LocalStorage1 extends React.Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state={value: \"\"}\r\n      this.handleChange=this.handleChange.bind(this)\r\n  }\r\n  handleChange(e){\r\n    this.setState({value: e.target.value});\r\n    window.localStorage.setItem('myInput', e.target.value)\r\n  }\r\nrender () {\r\n    return (\r\n        <div>\r\n            <p>{this.state.value}</p>\r\n            <input type=\"text\" name=\"stats\" onChange={this.handleChange}></input>\r\n        </div>\r\n    )\r\n}\r\n}\r\n```\r\n> In order to retreeive item from the local storage we use code\r\n```\r\nwindow.localStorage.getItem('myInput')\r\n```","frontmatter":{"date":"2019-10-15","title":"Local Storage","category":"knowledge-base"},"fields":{"slug":"/Local_Storage/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/zMFVLde.jpg\" title=\"Photo by Dids from Pexels\"></p>\n<p>Sometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the local storage is:</p>\n<pre><code>window.localStorage.setItem('myInput', value)\n</code></pre>\n<p>Example code:</p>\n<pre><code>import React from \"react\";\n\nexport class LocalStorage1 extends React.Component {\n  constructor(props){\n      super(props);\n      this.state={value: \"\"}\n      this.handleChange=this.handleChange.bind(this)\n  }\n  handleChange(e){\n    this.setState({value: e.target.value});\n    window.localStorage.setItem('myInput', e.target.value)\n  }\nrender () {\n    return (\n        &#x3C;div>\n            &#x3C;p>{this.state.value}&#x3C;/p>\n            &#x3C;input type=\"text\" name=\"stats\" onChange={this.handleChange}>&#x3C;/input>\n        &#x3C;/div>\n    )\n}\n}\n</code></pre>\n<blockquote>\n<p>In order to retreeive item from the local storage we use code</p>\n</blockquote>\n<pre><code>window.localStorage.getItem('myInput')\n</code></pre>"}},{"node":{"id":"cb49da28-8129-5f5a-b467-b45061901559","excerpt":"Template literal In JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be…","rawMarkdownBody":"\r\n![](https://i.imgur.com/wPtcgBh.jpg \"Photo by Elina Krima from Pexels\")\r\n\r\n**Template literal**\r\n\r\nIn JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be interpreted as a string\r\n\r\n```\r\n<p>You clicked {this.state.count} times</p>\r\n```\r\n\r\nWhen we are in JS land, we need to explicitly say that a variable should be interpreted as a string by adding $ in front of the curly bracket\r\n\r\n```\r\ncomponentDidMount() { document.title = `You clicked ${this.state.count} times`; }\r\n```","frontmatter":{"date":"2019-10-14","title":"Writing strings in JS and JSX","category":"knowledge-base"},"fields":{"slug":"/Writing_strings_in_JS_and_JSX/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/wPtcgBh.jpg\" title=\"Photo by Elina Krima from Pexels\"></p>\n<p><strong>Template literal</strong></p>\n<p>In JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be interpreted as a string</p>\n<pre><code>&#x3C;p>You clicked {this.state.count} times&#x3C;/p>\n</code></pre>\n<p>When we are in JS land, we need to explicitly say that a variable should be interpreted as a string by adding $ in front of the curly bracket</p>\n<pre><code>componentDidMount() { document.title = `You clicked ${this.state.count} times`; }\n</code></pre>"}},{"node":{"id":"f5ab6cc4-649d-56e4-9efe-cf58069b9eb9","excerpt":"We can,t comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this: It will not work. We need to…","rawMarkdownBody":"\r\n![](https://i.imgur.com/DnSKN89.jpg \"Photo by Cristian Dina from Pexels\")\r\n\r\nWe can,t comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this:\r\n``` \r\n/*<p>\r\n   <code>Welcome</code> to my page.\r\n  </p>*/\r\n\r\n ```\r\n\r\nIt will not work. We need to wrap the <code>```<p>```</code> tag in curly brackets.\r\n```\r\n{/*\r\n  <p>\r\n   <code>Welcome</code> to my page.\r\n  </p>*/}\r\n```\r\nNow we can finally comment out stuff :) Happy commenting! \r\nSPAM SPREE IS ON!","frontmatter":{"date":"2019-10-13","title":"Comment Me Out","category":"knowledge-base"},"fields":{"slug":"/Comment_Me_Out/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/DnSKN89.jpg\" title=\"Photo by Cristian Dina from Pexels\"></p>\n<p>We can,t comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this:</p>\n<pre><code>/*&#x3C;p>\n   &#x3C;code>Welcome&#x3C;/code> to my page.\n  &#x3C;/p>*/\n</code></pre>\n<p>It will not work. We need to wrap the <code><code>&#x3C;p></code></code> tag in curly brackets.</p>\n<pre><code>{/*\n  &#x3C;p>\n   &#x3C;code>Welcome&#x3C;/code> to my page.\n  &#x3C;/p>*/}\n</code></pre>\n<p>Now we can finally comment out stuff :) Happy commenting!\nSPAM SPREE IS ON!</p>"}},{"node":{"id":"dea0aefc-54d0-519d-a214-ae210684391b","excerpt":"At first let us take a look at what React Bootstrap is and how it differs from Bootstrap: React bootstrap provides components like Row, Col…","rawMarkdownBody":"\r\n![](https://i.imgur.com/YRAOVo0.jpg \"React Bootstrap Logo\")\r\n\r\nAt first let us take a look at what React Bootstrap is and how it differs from Bootstrap:\r\n\r\n**React bootstrap** provides components like Row, Col, etc. They are useful to create a grid layout.\r\n\r\n**Bootstrap** provides CSS for styling your data.\r\n\r\n> Open your command line\r\n\r\n> Go to your project directory and then install React Bootstrap (delivers COMPONENTS like Col, Row) and Bootstrap itself (CSS)\r\n```\r\nnpm install react-bootstrap bootstrap\r\n```\r\n\r\n> As React Bootstrap doesn't ship explicitly with CSS we need to import them to our index.js or app.js\r\n```\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n```","frontmatter":{"date":"2019-10-12","title":"React Bootstrap","category":"knowledge-base"},"fields":{"slug":"/ReactBootstrap/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/YRAOVo0.jpg\" title=\"React Bootstrap Logo\"></p>\n<p>At first let us take a look at what React Bootstrap is and how it differs from Bootstrap:</p>\n<p><strong>React bootstrap</strong> provides components like Row, Col, etc. They are useful to create a grid layout.</p>\n<p><strong>Bootstrap</strong> provides CSS for styling your data.</p>\n<blockquote>\n<p>Open your command line</p>\n</blockquote>\n<blockquote>\n<p>Go to your project directory and then install React Bootstrap (delivers COMPONENTS like Col, Row) and Bootstrap itself (CSS)</p>\n</blockquote>\n<pre><code>npm install react-bootstrap bootstrap\n</code></pre>\n<blockquote>\n<p>As React Bootstrap doesn't ship explicitly with CSS we need to import them to our index.js or app.js</p>\n</blockquote>\n<pre><code>import 'bootstrap/dist/css/bootstrap.min.css';\n</code></pre>"}},{"node":{"id":"1aeccf29-497e-5a42-8f03-f73bca63dfa4","excerpt":"Foreword This entire section are my personal notes from 2 amazing CSS courses: https://css-for-js.dev/ https://www.codecademy.com/courses…","rawMarkdownBody":"\r\n![](https://i.imgur.com/0v7juum.jpg \"Photo by Format from Pexels\")\r\n\r\n**Foreword**\r\n\r\n> This entire section are my personal notes from 2 amazing CSS courses:\r\n\r\n- https://css-for-js.dev/\r\n\r\n- https://www.codecademy.com/courses/learn-css/\r\n\r\n> All the credits go to [Josh Comeau](https://courses.joshwcomeau.com/) and [codecademy](https://www.codecademy.com/)\r\n\r\n**TERMINILOGY**\r\n\r\n> Imagine this snippet:\r\n\r\n```\r\n.apple {\r\n  color: purple;\r\n}\r\n```\r\n\r\n> `p` is a selector. A selector is a descriptor that lets you target specific elements on the page. In this case, we're selecting all nodes with the “apple” class.\r\n\r\n> `color` is a property. Properties in CSS are the attributes you can specify values for, like \"color\" and \"font-size\"\r\n\r\n> `purple` is a value (of a property)\r\n\r\n> Imagine this snippet:\r\n\r\n```\r\n.code-snippet {\r\n  padding: 32px;\r\n  white-space: pre-wrap;\r\n}\r\n```\r\n\r\n> Which part of it is the FIRST DECLARATION? Can you guess?\r\n\r\n> OK, a hint here, declaration is a combination of property and value.\r\n\r\n> So in our case it is - `padding: 32px;`\r\n\r\n> Now what is a rule here?\r\n\r\n```\r\np {\r\n  color: red;\r\n  font-family: sans-serif;\r\n}\r\n```\r\n\r\n> All of it! All the text above is a rule. A rule, also known as a style, is a collection of declarations, targeting one or more selectors. A stylesheet is made up of multiple rules.\r\n\r\n> Find a unit here:\r\n\r\n```\r\np {\r\n  padding-top: 24px;\r\n}\r\n```\r\n\r\n> It is the `px`. Some values have units, like px, %, or em. In this case, our padding-top has a value of 24px, which is measured in the \"px\" unit.\r\n\r\n**SELECTORS**\r\n\r\nSelectors enable to select certain HTML element(s) and apply CSS styles to it. Selectors are how we can select certain HTML elements. In CSS there are 3 ways how we can select elements\r\n\r\n**A) by tag name** - this scenario will style the teal colour to ALL <code>`<p>`</code> tags in the page\r\n\r\nHTML:\r\n\r\n```\r\n<p>Hello Universe</p>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\np {\r\n color: tile;\r\n}\r\n```\r\n\r\n**B) by class name** - In case of class names we need to add period in front of the class name. They are meant to be re-used over many elements.\r\n\r\nHTML:\r\n\r\n```\r\n<p class=\"title\">Hello Universe</p>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\n.title {\r\n font-family: Arial;\r\n}\r\n```\r\n\r\n<code>Please note:</code> in pure HTML we use word \"class\" to define for example a class called title which we can then style by .title in CSS. However, in REACT word \"class\" is reserved to create class components. Therefore, in order to create regular names of classes, we need to use word \"className\".\r\n\r\n**C) By id of an element** - ID is completely unique per site. We need to add hashtag. An ID is meant to style only one element.\r\n\r\nHTML:\r\n\r\n```\r\n<p id=\"large-title\">Hello Universe</p>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\n#large-title {\r\n font-size: 50px;\r\n}\r\n```\r\n\r\n> There is a universal selector `*` which selects all elements on the website\r\n\r\n```\r\n* {\r\n    font-size: 12px;\r\n}\r\n```\r\n\r\n> Precedence of selectors: General rule is that more specific selector will be applied compared to more generic selector. ID selector > Class selector > Tag selector. If we have example below, the red colour will be applied because .header (class selector) is more specific than tag selector. From the above 3 selectors, most specific selector is ID selector.\r\n\r\nHTML:\r\n\r\n```\r\n<h1 class=\"headere\">Hi</h1>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\nh1 {\r\ncolor: blue;\r\n}\r\n\r\n.header {\r\ncolor: red;\r\n}\r\n```\r\n\r\n> There is only one way how to over-ride ID selector and namely by <code>!important</code> syntax. This can override any CSS styling and should be only used as a last resort (because this one is very hard to override). In the example below, the colour of header will be blue.\r\n> HTML:\r\n\r\n```\r\n<h1 class=\"headere\">Hi</h1>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\nh1 {\r\n  color: blue !important;\r\n}\r\n\r\n.header {\r\n  color: red;\r\n}\r\n```\r\n\r\n> Chaining selectors: we are able to chain more selectors and make them even more specific.\r\n\r\n> In the example below, CSS style will be applied to <code>`<h1>`</code> tags but only those which have class name teal.\r\n> HTML:\r\n\r\n```\r\n<h1 class=\"teal\">Hello\r\n    <span class=\"purple\">stranger</span>\r\n</h1>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\nh1.teal {\r\n  color: teal;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/dDjN9MR.png \"Photo by Addania\")\r\n\r\n> Chaining selectors can be also with `space`, but it selects different thing. It selects all elements with class teal which are `descendents` of h1 tag. This kind of selector actually selects based on their location in the document. The below example selects for only those selectors which are nested in h1 tag. This is called `descendant combinator`\r\n> HTML:\r\n\r\n```\r\n<h1 class=\"teal\">Hello\r\n    <span class=\"purple\">stranger</span>\r\n</h1>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\nh1 .teal {\r\ncolor: teal;\r\n}\r\n\r\nh1 .purple {\r\n  color: purple;\r\n}\r\n\r\n```\r\n\r\n![](https://i.imgur.com/fgfKOTN.png \"Photo by Addania\")\r\n\r\n> There is an interesting piece of information about the descendant combinator. It will style every child/descendant of that parent!\r\n\r\n> HTML\r\n\r\n```\r\n<ul class=\"main-list\">\r\n  <li>Salt</li>\r\n  <li>Pepper</li>\r\n  <li>\r\n    Fruits & Veg:\r\n    <ul>\r\n      <li>Apple</li>\r\n      <li>Banana</li>\r\n      <li>Carrots</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n```\r\n\r\n> CSS\r\n\r\n```\r\n.main-list li {\r\n  border: 1px dotted;\r\n}\r\n```\r\n\r\n> In above example, every li which is a descendant of the class main-list will have border, so also Apple, Banana, etc.\r\n\r\n![](https://i.imgur.com/yvg2pla.png \"Photo by Addania\")\r\n\r\n> But what if we only wanted to style the DIRECT children? So directly beneath the main unordered list? So in our case only Salt, Pepper and Fruits?\r\n\r\n![](https://i.imgur.com/X19ODSi.png \"Photo by Addania\")\r\n\r\n> We would need to use `>`\r\n\r\n```\r\n.main-list > li {\r\n  border: 1px dotted;\r\n}\r\n```\r\n\r\n> How about we only wanted to put border around Apple, Banana and Carrots?\r\n\r\n![](https://i.imgur.com/UANLyFI.png \"Photo by Addania\")\r\n\r\n> One way to do it, is to target li which is a direct child of ul which is nested within class main-list:\r\n\r\n```\r\n.main-list ul > li {\r\n  border: 1px dotted;\r\n}\r\n\r\n```\r\n\r\n> Another selector based on the location in the document is called an `adjuscent sibling combinator`. It uses a plus sign (+) in oredr to select the next sibling on the same hierarchy. For example styling a pararaph which comes directly after the heading at the same hierarchy level in the HTML:\r\n\r\n```\r\nh1 + p {\r\n  font-size: 200%;\r\n}\r\n```\r\n\r\n> If we need to apply same style to multiple selectors, we can simply separate them by comma. Imagine html like this:\r\n\r\nHTML\r\n\r\n```\r\n<h1 class=\"teal\">Hello\r\n    <span class=\"purple\">stranger</span>\r\n</h1>\r\n\r\n<h3 class=\"plum\">Nice meeting you\r\n    <span class=\"steel\">out here</span>\r\n</h3>\r\n```\r\n\r\n> Which is styled like this:\r\n\r\nCSS\r\n\r\n```\r\nh1.teal {\r\n  color: teal;\r\n}\r\n\r\nh1 .purple {\r\n  color: purple;\r\n}\r\n\r\nh3.plum {\r\n  color:plum;\r\n}\r\n\r\nh3 .steel {\r\n  color: steelBlue;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/o7XWx5c.png \"Photo by Addania\")\r\n\r\n> Imagine you want to style `stranger` and `out here` with the same style. You can do it like this:\r\n> CSS\r\n\r\n```\r\nh1 .purple {\r\n  color: lightblue;\r\n}\r\n\r\nh3 .steel {\r\n  color: lightblue;\r\n}\r\n```\r\n\r\n> Or you can shorten it to:\r\n> CSS\r\n\r\n```\r\nh1 .purple, h3 .steel {\r\n  color: lightblue;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/WiFdSmL.png \"Photo by Addania\")\r\n\r\n> Be careful with applying same style to multiple elements. Unfortunately, the comma operator has one annoying pitfall: if any of the selectors are invalid, the rule won't be applied at all. entire rule will be thrown away.\r\n\r\n> Another way to style `stranger` and `out here` would be nesting selectors:\r\n> CSS\r\n\r\n```\r\nh1, h3 {\r\n    span {\r\n        color: deepSkyBlue;\r\n    }\r\n}\r\n\r\n```\r\n\r\n> Styling based on state is another way of styling html elements. For example styling `a` (anchor) tags. This has different states depending on whether it is visited, unvisited, being hovered over, focused via the keyboard or in the process of being clicked (activated). We can use CSS to target these states. The CSS below styles unvisited links pink and visited links green.\r\n\r\n```\r\na:link {\r\n  color: pink;\r\n}\r\n\r\na:visited {\r\n  color: green;\r\n}\r\n```\r\n\r\n> Following CSS will remove any text styling (such as underline) when user hovers over an anchor tag:\r\n\r\n```\r\na:hover {\r\n  text-decoration: none;\r\n}\r\n```\r\n\r\n> Just a wrap up - `combinators` such as space or + are a way to combine `selectors`.\r\n\r\n> We can use selectors and combinators in order to select for very specific elements.\r\n\r\n> Select any `<span>` that is inside a `<p>`, which is inside an `<article>`\r\n\r\n```\r\narticle p span { ... }\r\n```\r\n\r\n> Select any `<p>` that comes directly after a `<ul>`, which comes directly after an `<h1>`\r\n\r\n```\r\nh1 + ul + p { ... }\r\n```\r\n\r\n> Style any element with a class of special, which is inside a `<p>`, which comes just after an `<h1>`, which is inside a `<body>`. Phew!\r\n\r\n```\r\nbody h1 + p .special {...}\r\n```\r\n\r\n**Pseaudo-classes**\r\n\r\n> Let's have a button which changes color on hover. We might want to use a state for it and use `onMouseEnter` and `onMouseLeave` event listeners on that button. But it is possible do this entirely with CSS.\r\n\r\n> Syntax looks like this:\r\n\r\n```\r\nselector:pseudo-class {\r\n  property: value;\r\n}\r\n```\r\n\r\n> An exmaple is here:\r\n\r\n```\r\n<style>\r\n  button:hover {\r\n    color: blue;\r\n  }\r\n</style>\r\n<button>Hover over me!</button>\r\n```\r\n\r\n> `:hover` is a pseudo class. A pseudo-class is a `selector modifier`; it will apply its declarations when some sort of condition or state is met. In this case, it only applies the blue text when the selected element is being hovered over.\r\n\r\n> List of possible pseudo classes is here: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\r\n\r\n> Let's see some of them.\r\n\r\n> `focus` - in HTML, there is always an \"active element\". This is the element that is currently selected. When a button is clicked, focus moves to that button. When you press the \"Tab\" key, focus will move to the next interactive element on the page.\r\n\r\n> By default, the `body` tag is focused. When focus moves to an interactive element, like a form input or a link, that element gets an outline effect, to show the user which element has focus. Example is here:\r\n\r\n```\r\n<style>\r\n  button:focus {\r\n    border: 2px solid royalblue;\r\n    background: pink;\r\n    color: white;\r\n  }\r\n</style>\r\n<button>Hello</button>\r\n<button>world</button>\r\n<button>!</button>\r\n```\r\n\r\n> Click on the first button and press \"Tab\". Focus moves to the next button, and it gains the focus styles. You can press \"Shift Tab\" to go back to the first button.\r\n\r\n> Focus styles are important for folks who don't navigate with a pointer device (eg. a mouse, trackpad, or touch-screen). For a variety of reasons, some users exclusively use their keyboard to access the internet, and for them, the focus indicator helps them understand where they are on the page.\r\n\r\n> `checked` - The :checked pseudo-class only applies to checkboxes and radio buttons that are \"filled in\". Example:\r\n\r\n```\r\n<style>\r\n  input:checked {\r\n  width: 24px;\r\n  height: 24px;\r\n  }\r\n</style>\r\n<input type=\"checkbox\"/>check me\r\n```\r\n\r\n> We can also chain multiple pseudo-classes and apply them to mulitple elemts by separating them by comma:\r\n\r\n```\r\n.something:focus, .something:hover {\r\n  /* Shared styles! */\r\n}\r\n```\r\n\r\n**Pseaudo-elements**\r\n\r\n> Pseudo-elements are like pseudo-classes, but they don't target a specific state. Instead, they target \"sub-elements\" within an element. For example, we can style the placeholder text in a form input with ::placeholder\r\n\r\nHTML:\r\n\r\n```\r\n<input placeholder=\"enter text\"/>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\ninput::placeholder {\r\n  color: goldenrod;\r\n}\r\n```\r\n\r\n> Two of the most common pseudo-elements are ::before and ::after. These pseudo-elements are added inside the element, right before and after the element's content.\r\n\r\n```\r\n<style>\r\n  p::before {\r\n    content: '→ ';\r\n    color: deeppink;\r\n  }\r\n\r\n  p::after {\r\n    content: ' ←';\r\n    color: deeppink;\r\n  }\r\n</style>\r\n\r\n<p>\r\n  This paragraph has little arrows!\r\n</p>\r\n```\r\n\r\n![](https://i.imgur.com/u4pUZR9.png \"Photo by Addania\")\r\n\r\n> They are like secpret spans before and after that element. We could rewrite the above example like so:\r\n\r\n```\r\n<style>\r\n.pseudo-pseudo {\r\n  color: deeppink;\r\n}\r\n</style>\r\n\r\n<p>\r\n  <span class=\"pseudo-pseudo\">→ </span>\r\n  This paragraph has little arrows!\r\n  <span class=\"pseudo-pseudo\"> ←</span>\r\n</p>\r\n```\r\n\r\n**Media queries**\r\n\r\n> In order to accommodate screens of different shapes and sizes, CSS features media queries, which allow us to apply different CSS in different scenarios - on different screen sizes (desktop, mobile, tablet, etc). The CSS syntax is `@media`\r\n\r\n> Think about `@media` as `if` statements in javascript, followed by braces with a condition inside:\r\n\r\n```\r\n@media (condition) { ... styles which will be applied if the condition is met ... }\r\n```\r\n\r\n> Example style will be applied if the width of the screen is between = and 300px:\r\n\r\n```\r\n@media (max-width: 300px) {\r\n    .small-only {\r\n      color: red;\r\n    }\r\n  }\r\n```\r\n\r\n> Media queries are often used when we want to hide some content and display something else:\r\n\r\n```\r\n<style>\r\n  @media (max-width: 300px) {\r\n    .desktop-only {\r\n      display: none;\r\n    }\r\n  }\r\n  @media (min-width: 301px) {\r\n    .mobile-only {\r\n      display: none;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"desktop-only\">\r\n  I only show up on large screens.\r\n</div>\r\n<div class=\"mobile-only\">\r\n  Meanwhile, you'll only see me on small ones.\r\n</div>\r\n```\r\n\r\n> `display: none` is a declaration that removes an element from the rendering process; it's as if it doesn't exist\r\n\r\n> `max-width` adds styles on `small` screens\r\n\r\n> `min-width` adds styles on `larger` ones.\r\n\r\n**FONTS**\r\n\r\n> Font styles and families\r\n\r\nhttps://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html\r\n\r\nExamples:\r\n\r\n> Changing font family:\r\n\r\n```\r\nh1 {\r\nfont-family: Garamond;\r\n}\r\n```\r\n\r\n> Font families come in different styles. The 3 most popular:\r\n\r\n- Serif\r\n- Sans-serif\r\n- Monospace\r\n\r\nA “serif” is a little adornment at the edge of strokes. Serif fonts are very common in print media, but less so on the web (they tend to create a more sophisticated, aged look).\r\n\r\n![](https://i.imgur.com/wcCRuBJ.png \"Photo by Addania\")\r\n\r\n> General rules about font-families:\r\n\r\n> The font specified in a stylesheet must be installed on a user’s computer in order for that font to display when a user visits the web page. The default typeface for all HTML elements is Times New Roman. It’s a good practice to limit the number of fonts used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision. When the name of a font consists of more than one word, it’s a best practice to enclose the font’s name in quotes. Example:\r\n\r\n```\r\nh1 {\r\n  font-family: \"Courier New\";\r\n}\r\n```\r\n\r\n> We can find good font library by google: www.fonts.google.com. Where we can search for any font we like.\r\n\r\n> We need to then click on the font and select which variation we like to use (can be multiple) - green arrow. Then we can see which fonts we selected by clicking on the selected families icon - purple icon. There we can find how to integrate them to your application as link tag in html (blue arrow), or even how to import them directly (to a js file):\r\n\r\n![](https://i.imgur.com/Jzidzo4.png\"Photo by Addania\")\r\n\r\n> Example of importing fonts to your html so that they can be used in your application:\r\n\r\n```\r\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\r\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n```\r\n\r\n> Changing font size:\r\n\r\n```\r\np {\r\nfont-size: 18px;\r\n}\r\n```\r\n\r\n> Font size can also be expressed in rem which will then scale the font size based on the default font size user chose. The number given represents how much bigger the font will be based on the defaul user selected font.\r\n\r\n```\r\nfont-size: 1.2rem;\r\n```\r\n\r\n> Changing bold (thickness or narrowness of the font) using font-weight (it can hold values bold or normal):\r\n\r\n```\r\np {\r\nfont-weight: bold;\r\n}\r\n```\r\n\r\n**ALIGNING TEXT**\r\n\r\n> To align text horizontally (to right, left or center) we use text-align property. It also works on images.\r\n\r\n```\r\nh1 {\r\n  text-align: right;\r\n}\r\n```\r\n\r\n**COLORS**\r\n\r\n> Setting color of text can be done in two ways:\r\n\r\n**A) foreground colour** for example colour of the text itself, property to do this is called <code>color</code>\r\n\r\n**B) background colour** property using <code>background-color</code>\r\n\r\n```\r\nh1 {\r\n  color: red;\r\n  background-color: blue;\r\n}\r\n```\r\n\r\n> Change opacity of an element. Accepts values from 0 (0% opacity) to 1 (100% opacity)\r\n\r\n```\r\n.overlay {\r\n  opacity: 0.5;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/ZrJnm95.jpg \"Photo by Daniel Frese from Pexels\")\r\n\r\n> For setting colors you can use hex codes - but hex codes are not:\r\n\r\n```\r\ndiv {\r\n    background-color: #00bfff;\r\n    color: #ffffff;\r\n}\r\n```\r\n\r\n> But there is even a better way to represent colors and that is HSB / HSL: Hue Saturation Brightness or Hue Saturation Lightness\r\n\r\n```\r\n.colorful-thing {\r\n  color: hsl(200deg 100% 50%);\r\n  border-bottom: 3px solid hsl(100deg 75% 50%);\r\n}\r\n```\r\n\r\n> The best explanation of this concept is on the Photoshop color picker:\r\n\r\n![](https://i.imgur.com/CpQ6a4e.png \"Photo by Addania\")\r\n\r\n> `Hue` means the color itself / the pigment. It is measured in degrees starting at 0 till 360 degrees. Representing colors from red to ... hmm ...red again :) It is the vertical color stripe in the Photoshop color picker\r\n\r\n> `Saturation` and `Brightness` are represented on the two-dimensional grid\r\n\r\n> `Saturation` changes when moving from the lef to right. Right being the most saturated. Moving left colors become more pastelly and more washed away. When reaching far left, colors are just grey, with no hue. It is represented in percentage.\r\n\r\n> `Brightness` changes when you move vertically from top to down. Top being light colors eventually white and down being darker colors everntually black. It is represented in percentage.\r\n\r\n> Knowing this makes it pretty intuitive now how to use hsl in the CSS: Look again here:\r\n\r\n```\r\n.colorful-thing {\r\n  color: hsl(200deg 100% 50%);\r\n}\r\n```\r\n\r\n> This color has around 200 degrees of the hue, which is blue, 100% of saturation - so full color, no washing away, no greying, 50% of its brightness.\r\n\r\n> If you want your color to be semi-transparent, you can pass a fourth value for the `alpha` channel. This is a unitless number between 0 (fully transparent) and 1 (the default, fully opaque)\r\n\r\n```\r\n .first.box {\r\n    background-color: hsl(340deg 100% 50% / 1);\r\n  }\r\n  .second.box {\r\n    background-color: hsl(340deg 100% 50% / 0.75);\r\n  }\r\n```\r\n\r\n> A lower `alpha` number means that the pixels are transparent.\r\n\r\n> This \"version\" of HSL color is part of a 2016 revision to how colors work in CSS. It enjoys wide browser support, but will not work in Internet Explorer. If your project supports IE, you'll need to use a slightly different syntax:\r\n\r\n```\r\n.colorful-thing {\r\n  color: hsl(200deg, 100%, 50%);\r\n  background-color: hsla(200deg, 100%, 50%, 0.2);\r\n}\r\n```\r\n\r\n> Instead of being space-separated, the values inside the hsl() function are comma-separated. If you'd like the color to be transparent, you'll need to use the hsla() function instead of the hsl() function.\r\n\r\n> You can play online with hsl here: https://hslpicker.com/#0af\r\n\r\n**Units**\r\n\r\n> Some property values use units. There are couple of units:\r\n\r\n- pixels\r\n- ems\r\n- rems\r\n- percetages\r\n\r\n> Most popular unit is a `pixel` for anything size-related:\r\n\r\n```\r\n.box {\r\n  width: 1000px;\r\n  margin-top: 32px;\r\n  padding: 8px;\r\n  font-size: 16px;\r\n}\r\n```\r\n\r\n> `Em` is a relative unit, equal to the font size of the current element. If a heading has a font-size of 24px, and we give it a bottom padding of 2em, we can expect that the element will have 48px of cushion underneath it (2 × 24px)\r\n\r\n```\r\np {\r\n  font-size: 12px;\r\n  padding-bottom: 2em;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/ywjiFBY.png \"Photo by Addania\")\r\n\r\n> Using em means that a component's UI will change depending on the font size of the container it's placed within. This can be useful, but more often than not, it's a nuisance.\r\n\r\n> `Rems` are more useful. The `rem` unit is quite a lot like the `em` unit, with one crucial difference: it's always relative to the root element, the `html` tag.\r\n\r\n> All of the `rems` in your app will be taking their cues from that root HTML tag. By default, the HTML tag has a font size of 16px, so 1rem will be equal to 16px.\r\n\r\n```\r\nhtml {\r\n  font-size: 16px;\r\n}\r\nh1 {\r\n  font-size: 2rem;\r\n  margin: 0;\r\n}\r\nh2 {\r\n  font-size: 1.25rem;\r\n  margin-bottom: 1.5rem;\r\n  color: gray;\r\n}\r\np {\r\n  font-size: 1rem;\r\n}\r\n```\r\n\r\n> Changing all the text scales accordingly, when you change the root font size? That's why people like the rem unit. No matter where an element is in the DOM tree, the rem is consistent. It behaves consistently and predictably, like pixels, but it respects user preferences when it comes to increasing/decreasing default font sizes.\r\n\r\n> Here is the comparison of the text between html tag having font size 16px and when it has 12px:\r\n\r\n```\r\nhtml {\r\n  font-size: 12px;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/cPxpZVI.png \"Photo by Addania\")\r\n\r\n> But in real application we DO NOT want to set pixel size for the html tag becasue it would override user default setting. So DO NOT set html tag font size.\r\n\r\n> The `percentage` unit is often used with width/height, as a way to consume a portion of the available space.\r\n\r\n```\r\n<div class=\"box\">\r\n  <div class=\"child\"></div>\r\n</div>\r\n\r\n.box {\r\n  width: 250px;\r\n  height: 250px;\r\n  background-color: pink;\r\n}\r\n.child {\r\n  width: 50%;\r\n  height: 75%;\r\n  background-color: black;\r\n}\r\n```\r\n\r\n> How to use units - best practises:\r\n\r\n- For typography, use rem, because it has important accessibility benefits.\r\n- When it comes to properties that relate to the box model — padding, border, margin — use pixels. It's more intuitive than rem, and there isn't a clear accessibility win.\r\n- For width/height, it'll depend on whether we want the element to be a fixed size, or a relative size. We might want one div to always be 250px wide, while another one should be 50% of the available space.\r\n- For color, it is good to use hsl.\r\n- Use em for the rare cases when you want one property to scale directly with font size.\r\n\r\n**IMAGES**\r\n\r\n> Adding image as a background to an element. URL can be link to exterenal site or file path within the project folder\r\n\r\n```\r\n.main-banner {\r\n  background-image: url(\"https://www.example.com/image.jpg\");\r\n}\r\n\r\n.main-banner {\r\n  background-image: url(\"images/mountains.jpg\");\r\n}\r\n```\r\n\r\n**TEXT TRANSFORMATIONS**\r\n\r\n> Transforming whole text to uppercase\r\n\r\n```\r\nh1{\r\ntext-transform: uppercase;\r\n}\r\n```\r\n\r\n> Transforming first leter to uppercase\r\n\r\n```\r\nh3 {\r\ntext-transform: capitalize;\r\n}\r\n```\r\n\r\n> Text cursive. Note, this does not mean italics. Cursive only emulates hand-writing\r\n\r\n```\r\n.cursive {\r\nfont-family: cursive;\r\n}\r\n```\r\n\r\n**TEXT SPACING**\r\n\r\n> We can tweak the horizontal gap between characters using the letter-spacing property.\r\n\r\n```\r\nh3 {\r\n  letter-spacing: 3px;\r\n}\r\n```\r\n\r\n> We can tweak the vertical distance between lines using the `line-height` property. `line-height` is a bit of an odd duck because it takes a unitless value. This works as a ratio: `line-height: 2` means that the lines should be twice as tall as a different element with line-height: 1 - for example often with respect to our font size.\r\n\r\n```\r\nh3 {\r\n  line-height: 2;\r\n}\r\n```\r\n\r\n**BOX MODEL**\r\n\r\n> The Box model includes the content area’s size (width and height) and the element’s padding, border, and margin. The properties include:\r\n\r\n**Width and height** — specifies the width and height of the content area.\r\n\r\n**Padding** — specifies the amount of space between the content area and the border.\r\n\r\n**Border** — specifies the thickness and style of the border surrounding the content area and padding.\r\n\r\n**Margin** — specifies the amount of space between the border and the outside edge of the element.\r\n\r\n**WIDTH AND HEIGHT**\r\n\r\n> To set specific width and height of an element. It can be set in pixels or in percentages:\r\n\r\n```\r\np {\r\n  height: 80px;\r\n  width: 240px;\r\n}\r\n```\r\n\r\n> Minimum width is minimum width the element will shrink to\r\n\r\n```\r\nmin-width: 50px;\r\n```\r\n\r\n> Maximum width is maximum width the element will expand to\r\n\r\n```\r\nmax-width: 50px;\r\n```\r\n\r\n> Minimum heigth is minimum heigth the element will shrink to\r\n\r\n```\r\nmin-heigth: 30px;\r\n```\r\n\r\n> Maximum heigth is maximum heigth the element will expand to\r\n\r\n```\r\n>max-heigth: 30px;\r\n```\r\n\r\n**BORDER**\r\n\r\n> A border is a line what surrounds an element, like a frame around a painting. Borders can be set with a specific width, style, and color.\r\n\r\n**border-width** — The thickness of the border. A border’s thickness can be set in pixels, ems, rems or with one of the following keywords: thin, medium, or thick.\r\n\r\n**border-style** — The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, dashed, double, groove, ridge, inset, outset, mixed and solid.\r\n\r\n![](https://i.imgur.com/posMCos.png \"Photo by Addania\")\r\n\r\n**border-color** — The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.\r\n\r\n> All these properties can be written as a shorthand:\r\n\r\n```\r\np {\r\n  border: 3px solid coral;\r\n}\r\n```\r\n\r\n> Only `border-style` filed is required in the above shorthand:\r\n\r\n```\r\n.good {\r\n  border: solid;\r\n}\r\n```\r\n\r\n> This will produce a black, 3px-thick border\r\n\r\n> Following code is invalid. It will not work because it lacks style:\r\n\r\n```\r\n.not-good {\r\n  border: 2px pink;\r\n}\r\n```\r\n\r\n> If we don't specify a border color, it'll use the font's color by default. By font-color property `color` is meant.\r\n\r\n> If you want to specify this behaviour explicitly, it can be done with the special `currentColor` keyword. `currentColor` is always a reference to the element's derived text color (whether set explicitly or inherited), and it can be used anywhere a color might be used:\r\n\r\n```\r\n.box {\r\n  color: hotpink;\r\n  border: 1px solid currentColor;\r\n  box-shadow: 2px 2px 2px currentColor;\r\n}\r\n```\r\n\r\n> As we saw we can defined mixed border-styles:\r\n\r\n```\r\nborder-style: dashed dotted;\r\n```\r\n\r\n![](https://i.imgur.com/MBNlZ0G.png \"Photo by Addania\")\r\n\r\n**Border radius**\r\n\r\n> The CSS Working Group has published a list of mistakes they've made with the CSS language. One of these mistakes is listed: \"border-radius should have been corner-radius\"\r\n\r\n> It's not hard to understand why. The border-radius property rounds an element (content) even if it has no border!\r\n\r\n![](https://i.imgur.com/c2rGi84.png \"Photo by Addania\")\r\n\r\n> Border with rounded corners\r\n\r\n```\r\ndiv.container {\r\n  border: 3px solid rgb(22, 77, 100);\r\n  border-radius: 5px;\r\n}\r\n```\r\n\r\n> Perfect circle border - set the radius equal to height of the box or 50%\r\n\r\n```\r\ndiv.container {\r\n  height: 60px;\r\n  width: 60px;\r\n  border: 3px solid rgb(22, 77, 100);\r\n  border-radius: 60px;\r\n}\r\n```\r\n\r\nor equivalently:\r\n\r\n```\r\ndiv.container {\r\n  height: 60px;\r\n  width: 60px;\r\n  border: 3px solid rgb(22, 77, 100);\r\n  border-radius: 50%;\r\n}\r\n```\r\n\r\n> Border radius can be also defind by 4 values. The first one is the top left corner, the second value is top right corner, the third is the bottom right corner and finally the fourth value is the bottom left corner:\r\n\r\n```\r\nborder-radius: 10px 10px 10px 10px;\r\n```\r\n\r\n> We can decide to only set 3 or less of the values for creative shapes:\r\n\r\n**Teardrop shape**\r\n\r\n```\r\nborder-radius: 0px 10px 10px 10px;\r\n```\r\n\r\n**Palm leaf shape** where width of image is 100px\r\n\r\n```\r\nborder-radius: 100px 0px 100px 0px;\r\n```\r\n\r\n**Quarter circle** where width and height of the image is 100px:\r\n\r\n```\r\nborder-radius: 100px 0px 0px 0px;\r\n```\r\n\r\n**D-shape**\r\n\r\n```\r\nborder-radius: 10px 40px 40px 10px;\r\n```\r\n\r\n> All these 4 values have their individual properties:\r\n\r\n```\r\nborder-top-left-radius: 8px;\r\nborder-top-right-radius: 16px;\r\nborder-bottom-right-radius: 32px;\r\nborder-bottom-left-radius: 64px;\r\n```\r\n\r\n**OUTLINE**\r\n\r\n> What is difference between border and outline? In some aspects, they're similar! They both add a visual edge to a given element.\r\n\r\n> The core difference is that outline doesn't affect layout. Outline is kinda more like box-shadow; it's a cosmetic effect draped over an element, without nudging it around, or changing its size.\r\n\r\n> It has similar properties like border:\r\n\r\n```\r\noutline-width\r\noutline-color\r\noutline-style\r\n```\r\n\r\n> Outline is stacked outside of the border and can be used as second border for visual effect.\r\n\r\n```\r\nborder: 4px solid darkviolet;\r\noutline: 4px solid deeppink;\r\n```\r\n\r\n> There is no outline-radius! (Only in Firefox)\r\n\r\n> Outlines have a special `outline-offset` property. It allows you to add a bit of a gap between the element and its outline.\r\n\r\n```\r\noutline-offset: 4px;\r\n```\r\n\r\n> We should not set:\r\n\r\n```\r\nbutton {\r\n  outline: none;\r\n}\r\n```\r\n\r\n> This would break navigation for keyboard users; that ring is required for them to know which element is currently focused!\r\n\r\n> The only exception is if we provide a suitable alternative. For example:\r\n\r\n```\r\nbutton {\r\n  outline: none;\r\n}\r\nbutton:focus {\r\n  background: navy;\r\n  color: white;\r\n}\r\n```\r\n\r\n**PADDING**\r\n\r\n> Padding: space between content and border. It is an inner space.\r\n\r\n> If we have some element with padding, and we set its background to red, also padding will have red background\r\n\r\n```\r\n.someElement {\r\n  padding: 48px;\r\n  background-color: \"tomato\";\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/2BKHRCL.png \"Photo by Addania\")\r\n\r\n> Padding can have properties:\r\n\r\n```\r\npadding-top: 30px;\r\npadding-right: 15px;\r\npadding-bottom: 30px;\r\npadding-left: 15px;\r\n```\r\n\r\n> The same as obve can be re-written using logical properties (which are applicable to also languages which are written right to left, or vertically)\r\n\r\n```\r\n  padding-block-start: 20px;\r\n  padding-block-end: 40px;\r\n  padding-inline-start: 60px;\r\n  padding-inline-end: 80px;\r\n```\r\n\r\n> Block means vertically on top of each other and inline horizontally next to each other\r\n\r\n> Padding, like other properties of box model, can be expressed in px, em or rem. Pixels are the most common. Using percantages is possible but not recommended because it yields unexpected results.\r\n\r\n> Padding: In order to have same padding on all four sides use:\r\n\r\n```\r\npadding: 10px;\r\n```\r\n\r\n> Padding: In order to specify exactly how much padding there should be on each side of the content in a single declaration. The values go in clock-wise direction: padding on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.\r\n\r\n```\r\npadding: 10px 15px 20px 30px;\r\n```\r\n\r\n> Padding: If the top and bottom values for padding will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut. First value defines padding top and bottom to be 10px, padding left and right to be 15px.\r\n\r\n```\r\npadding: 10px 15px;\r\n```\r\n\r\n> Padding: Top and Bottom paddings (vertical paddings) **DO NOT** collapse!\r\n\r\n> Padding: Left and Right paddings (horizontal paddings) **DO NOT** collapse! And are always added together.\r\n\r\n> If we want a padding of 48px everywhere except for the bottom, we can write it in 2 ways:\r\n\r\n```\r\n.box {\r\n  padding: 48px 48px 0 48px;\r\n}\r\n```\r\n\r\n> Or\r\n\r\n```\r\n.box {\r\n  padding: 48px;\r\n  padding-bottom: 0;\r\n}\r\n```\r\n\r\n> `padding-bottom` overwrites `padding` because if comes second in the css file\r\n\r\n**MARGIN**\r\n\r\n> Margin increases the space around an element, giving it some breathing room. As we saw earlier, margin is \"personal space\". Margin is the space outside of the border.\r\n\r\n> Margin is mysterious. It can do wacky things, like pull an element outside a parent, or center itself within its container.\r\n\r\n> It has following values:\r\n\r\n```\r\nmargin-top: 10px;\r\nmargin-right: 15px;\r\nmargin-bottom: 10px;\r\nmargin-left: 30px;\r\n```\r\n\r\n> Also here are logical equivalents for languages which are not left to right:\r\n\r\n```\r\n  margin-block-start: 20px;\r\n  margin-block-end: 40px;\r\n  margin-inline-start: 60px;\r\n  margin-inline-end: 80px;\r\n```\r\n\r\n> If you want to have same margin on all four sides use:\r\n\r\n```\r\nmargin: 10px;\r\n```\r\n\r\n> In order to specify exactly how much margin there should be on each side of the content in a single declaration. The values go in clock-wise direction: margin on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.\r\n\r\n```\r\nmargin: 10px 15px 20px 30px;\r\n```\r\n\r\n> If the top and bottom values for margin will equal each other, and the left and right values for margin will also equal each other, you can use the following shortcut. First value defines margin top and bottom to be 10px, margin left and right to be 15px.\r\n\r\n```\r\nmargin: 10px 15px;\r\n```\r\n\r\n> Padding and border only allow positive numbers including 0. But margins can be negative!! Negative margins can pull element outside of the parent.\r\n\r\nHTML\r\n\r\n```\r\n<main>\r\n  <div class=\"pink-box\"></div>\r\n</main>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\nmain {\r\n  width: 200px;\r\n  height: 200px;\r\n  border: 3px solid;\r\n}\r\n\r\n.pink-box {\r\n  width: 50%;\r\n  height: 50%;\r\n  border: 3px solid deeppink;\r\n  background: white;\r\n  margin-top: -32px;\r\n  margin-left: -32px;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/uQIeFSP.png \"Photo by Addania\")\r\n\r\n> What if we wanted to do something super cool? Like a heading which peeks out of its container? Like this:\r\n\r\n![](https://i.imgur.com/GL1kzFM.png \"Photo by Addania\")\r\n\r\n> This is how you could achieve it.\r\n\r\nHTML:\r\n\r\n```\r\n <body>\r\n    <div class=\"card\">\r\n      <div class=\"header\">HEADER PEEKING OUT</div>\r\n      <p>\r\n        Otters have long, slim bodies and relatively short limbs. Their most\r\n        striking anatomical features are the powerful webbed feet used to swim,\r\n        and their seal-like abilities holding breath underwater.\r\n      </p>\r\n    </div>\r\n  </body>\r\n```\r\n\r\nCSS\r\n\r\n```\r\nbody {\r\n  background-color: #222;\r\n  box-sizing: border-box;\r\n  margin: 50px;\r\n}\r\n\r\n.card {\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  padding: 25px;\r\n}\r\n\r\n.header {\r\n  background-color: deeppink;\r\n  font-size: 30px;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  border-radius: 10px;\r\n  margin-top: -40px;\r\n  padding: 25px;\r\n}\r\n```\r\n\r\n> Please note, that in case this is not working for you, and instead of re-positioning the header, you decrease the margin of entire card - try to add some padding to the container where the header is positioned. Alternative increase the negative margin (it needs to be more than for example padding of the card)\r\n\r\n> Negative margin can also pull a sibling closer:\r\n\r\nHTML:\r\n\r\n```\r\n<main>\r\n  <div class=\"pink-box\"></div>\r\n  <div class=\"neighbor\"></div>\r\n</main>\r\n```\r\n\r\nCSS\r\n\r\n```\r\nmain {\r\n  width: 200px;\r\n  height: 200px;\r\n  border: 3px solid;\r\n}\r\n\r\n.pink-box {\r\n  width: 50%;\r\n  height: 50%;\r\n  border: 3px solid deeppink;\r\n  background: white;\r\n  margin-bottom: -32px;\r\n}\r\n\r\n.neighbor {\r\n  width: 50%;\r\n  height: 50%;\r\n  background: silver;\r\n  margin-left: 16px;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/1ziZlPf.png \"Photo by Addania\")\r\n\r\n> If we apply negative margin to the first box, it will influence all its siblings position!!!\r\n\r\nHTML:\r\n\r\n```\r\n<main>\r\n  <div class=\"box one\"></div>\r\n  <div class=\"box two\"></div>\r\n  <div class=\"box three\"></div>\r\n</main>\r\n```\r\n\r\nCSS\r\n\r\n```\r\nmain {\r\n  width: 200px;\r\n  height: 200px;\r\n  border: 3px solid silver;\r\n}\r\n\r\n.box {\r\n  width: 25%;\r\n  height: 25%;\r\n  border: 3px solid;\r\n  background: white;\r\n}\r\n\r\n.box.one {\r\n  border-color: deeppink;\r\n  margin-top: -24px;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/NHHpHPI.png \"Photo by Addania\")\r\n\r\n> The interesting thing is those two black boxes: they \"follow\" the deep pink box up. When we use margin to tweak an element's position, we might also be tweaking every subsequent element as well. This is different from other methods of shifting an element's position, like using `transform: translate`\r\n\r\n> There is one last trick a negative margin can do. Imagine you have a card which has a padding. So everything inside of it (all its children) will have this padding.\r\n\r\n![](https://i.imgur.com/BAKi7AA.png \"Photo by Addania\")\r\n\r\n> What if we wanted to create one exception for the image which will ignore the padding and will extend from one edge to the other of the card? Something like this?\r\n\r\n![](https://i.imgur.com/esazm7o.png \"Photo by Addania\")\r\n\r\n> We can achieving it by wrapping the image in a wrapper and applying negative margin to the right and left both!! Please note: images are \"replaced elements\". They do not reside in the DOM, they are imported. FOr that reason, any manipulation and layouting with images should be done using wrappers around them. Not with images directly.\r\n\r\nHTML\r\n\r\n```\r\n<div class=\"card\">\r\n  <p>\r\n    Otters have long, slim bodies and relatively short limbs. Their most striking anatomical features are the powerful webbed feet used to swim, and their seal-like abilities holding breath underwater.\r\n  </p>\r\n  <div class=\"wrapper\">\r\n  <img alt=\"A cute otter in water\" src=\"/course-materials/otter.jpg\" />\r\n  </div>\r\n  <p>\r\n    More importantly, otters are glorious water dogs, playful and curious. The otter, no other, is the best animal.\r\n  </p>\r\n</div>\r\n```\r\n\r\nCSS\r\n\r\n```\r\nbody {\r\n  background: #222;\r\n  padding: 32px;\r\n}\r\n\r\n.card {\r\n  background-color: white;\r\n  padding: 32px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.wrapper {\r\n  margin-left: -32px;\r\n  margin-right: -32px;\r\n}\r\n\r\nimg {\r\n  display: block;\r\n  width: 100%;\r\n\r\n}\r\n\r\np, img {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n```\r\n\r\n> Nice article about negative margins is here: https://www.quirksmode.org/blog/archives/2020/02/negative_margin.html\r\n\r\n> Margin is really about changing the gap between elements.\r\n\r\n> Margin property also allows to position an element in the center of a parent element. There are 2 requirements in order to do it:\r\n\r\n**1/** top and bottom margin is defined and then followed by word auto, meaning right and left margin will be done automatically based on the maximum available horizontal space of the element and the container in which we want to center it\r\n\r\n**2/** width of the element needs to be defined and needs to be smaller than the width of the container where the element resides. Why? Block elements will naturally grow to fill the available horizontal space, so we need to give our element a width in order to center it.\r\n\r\n```\r\ndiv {\r\nwidth: 200px\r\nmargin: 0px auto;\r\n}\r\n```\r\n\r\n> Another example:\r\n\r\nHTML:\r\n\r\n```\r\n<main>\r\n  <section class=\"content\">\r\n    Hello World\r\n  </section>\r\n</main>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\n.content {\r\n  width: 50%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  background: palevioletred;\r\n  padding: 16px;\r\n}\r\n\r\nmain {\r\n  width: 100%;\r\n  height: 200px;\r\n  border: 3px solid silver;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/IsCaFWd.png \"Photo by Addania\")\r\n\r\n> This only works for horizontal margin. Setting top/bottom margin to auto is equivalent to setting it to 0px.\r\n\r\n> There are other ways how to center items in a container with modern layout rendering modes like Flexbox or Grid.\r\n\r\n> Important difference is that margin auto is used on the single child element selectively!\r\n\r\n> Flexbox and Grid are both powerful tools for managing layout. But their properties are applied to a container, and affect all children.\r\n\r\n> Margin: Top and Bottom margin is also called: **Vertical margin**. Left and Right margin is called **Horizontal Margin**\r\n\r\n> Margin: Top and Bottom margin (vertical margins) **COLLAPSE**! The larger of the two vertical margins sets the distance between adjacent elements. For example: if top element has margin bottom of 20px and bottom element margin top of 30px, then the effective distance between these 2 elements is 30px.\r\n\r\n```\r\n#img-one {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n#img-two {\r\n  margin-top: 20px;\r\n}\r\n```\r\n\r\n> Margin: Left and Right margins (horizontal margins) **DO NOT** collapse! And are always added together. If left element has margin right of 10px and right element marin left of 10 px. Then the effective distance of the elements is 20px.\r\n\r\n```\r\n#img-one {\r\n  margin-right: 10px;\r\n}\r\n\r\n#img-two {\r\n  margin-left: 10px;\r\n}\r\n```\r\n\r\n**OVERFLOW**\r\n\r\n> The overflow property controls what happens to content which is larger than its container (box). In order words content that spills, or overflows, outside its box. The parent container can be set to:\r\n\r\n- hidden - any content that overflows will be hidden from view\r\n- scroll - a scrollbar is added to the element’s box so that the rest of the content can be viewed by scrolling.\r\n- visible - the overflow content will be displayed outside of the containing element. This is the default value.\r\n\r\n**LAYOUTS**\r\n\r\n> In CSS we have different layouting modes. Here are examples: Flow, Flexible Box (FlexBox), Positioned layout, Grid (CSS Grid), etc.\r\n\r\n> The default one is FLOW. Plain HTML document without CSS uses FLOW exclusively.\r\n\r\n**FLOW LAYOUT**\r\n\r\n> In Flow layout, every element will use a display value of either `inline`, `block`, or `inline-block`. This value governs how the Flow layout algorithm will place the element. The default value depends on the tag; `div`, `section`, `nav`, `header`, `footer`, `article`, `paragraph`, `heading`, `form`, `blockquote` are block by default, while `spans` , `strong`, `a` are inline.\r\n\r\n> In flow layout, block elements stack in the block direction, and inline elements stack in the inline direction.\r\n\r\n**Greedy block elements**\r\n\r\n> When you place a block element to the page, its content box consumes hungrily all available horizontal space!\r\n\r\n> A heading might only need 150px to contain its letters, but if you put it in an 800px container, it will consume 800px of width for its content.\r\n\r\n![](https://i.imgur.com/TZFFgjG.png \"Photo by Addania\")\r\n\r\n> Even if we shrink its content, so that it only uses so much space that it needs with width: fit-content, it will still not share its inline space with another element - instead margin will fill out the remaining horizontal space:\r\n> HTML:\r\n\r\n```\r\n<h2>\r\n  Hello World\r\n</h2>\r\n<div class=\"red-box\"></div>\r\n<h2>\r\n  Hello World\r\n</h2>\r\n<div class=\"red-box\"></div>\r\n```\r\n\r\nCSS\r\n\r\n```\r\nh2 {\r\n  width: -moz-fit-content;\r\n  width: fit-content;\r\n  border: 2px dotted;\r\n}\r\n\r\n.red-box {\r\n  width: 50px;\r\n  height: 25px;\r\n  background: red;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/RbTY7cp.png \"Photo by Addania\")\r\n\r\n**Polite inline elements**\r\n\r\n> These are polite guys who do not want to make a fuss. They go with the flow. They are rendered where they are. Lots of CSS properties do not work with inline elemets: adjust the positioning or changing its size. FOllowing will not have any effect:\r\n\r\n```\r\nstrong {\r\n  height: 2em;\r\n  width: 300px;\r\n  margin-top: 300px;\r\n  margin-bottom: 300px;\r\n}\r\n```\r\n\r\n> Inline elements are like `go-with-the-flow-type` folks. They don't want to inconvenience anyone by pushing any boundaries. You can shift things in the inline direction with margin-left and margin-right, but you can't change its width or height.\r\n\r\n> The exception are `replaced` elements also called `foreign` objects:\r\n\r\n- `<img />`\r\n- `<video />`\r\n- `<canvas />`\r\n\r\n> These replaced elements are technically inline but they are special :) They can affect block layout. We can set explicit dimensions or add some magin-top.\r\n\r\n> How to reconcile this? There is a trick. Try to pretend that it's a foreign object within an inline wrapper. When you pass it a width or height, you're applying those properties to the foreign object. The inline wrapper still goes with the flow.\r\n\r\n> Another exception is a `button` tag. They are technically inline, but can be given be given width and height.\r\n\r\n**Magic space around inline elements**\r\n\r\n> Imagine you have an image in a div:\r\n\r\nHTML\r\n\r\n```\r\n<div>\r\n    <img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\">\r\n</div>\r\n```\r\n\r\nCSS\r\n\r\n```\r\nimg {\r\n  width: 300px;\r\n}\r\n```\r\n\r\n> When you inpect the height of the image it will be: 132 px\r\n\r\n![](https://i.imgur.com/aTBTWuu.png \"Photo by Addania\")\r\n\r\n> When you inpect the height of the image it will be: 136.13 px\r\n\r\n![](https://i.imgur.com/guqtUjm.png \"Photo by Addania\")\r\n\r\n> Why is that? Why is there 6px difference in height? It's neither a padding, border or a margin. Reason is that the inline elements are treated like typography and there is some space reserved between lines, because we usually do not want text to be cramped at each other.\r\n\r\n> We can fix it with setting `display: block` to the image or add `line-height: 0` to the wrapping div.\r\n\r\n> Now let's place 3 images nex to each other - they are all inline, so shoudl be placed next to each other.\r\n\r\nHTML\r\n\r\n```\r\n    <div>\r\n      <img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\r\n      <img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\r\n      <img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\r\n    </div>\r\n```\r\n\r\n> You will notice there is space between them. 😮\r\n\r\n![](https://i.imgur.com/b1qAoCs.png \"Photo by Addania\")\r\n\r\n> This is a whitespace between elements! Surprisingly, if we squish our HTML so that there are no newlines or whitespace characters between images, this problem goes away:\r\n\r\nHTML\r\n\r\n```<div>\r\n      <img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" /><img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" /><img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\r\n    </div>\r\n\r\n```\r\n\r\n![](https://i.imgur.com/5qE2UiS.png \"Photo by Addania\")\r\n\r\n> This happens because HTML is `space-sensitive`, at least to an extent. The browser can't tell the difference between whitespace added to separate words in a paragraph, and whitespace added to indent our HTML and keep it readable.\r\n\r\n> How do we solve this problem? There are some ideas on CSS Tricks: https://css-tricks.com/fighting-the-space-between-inline-block-elements/. But this doesn't come up a ton these days. In most realistic scenarios, we'd use flexbox or floats, and neither of those rendering modes suffer from this problem.\r\n\r\n**Inline elements can wrap**\r\n\r\n> Inline elements can wrap. Which is also one of their trick - compared to block elements.\r\n\r\n> Therefore they can create other shapes than rectangles:\r\n\r\n```\r\n<p>\r\n  This is a paragraph with <strong>some very bolded words in it</strong>.\r\n</p>\r\n```\r\n\r\n![](https://i.imgur.com/3oBAWqY.png \"Photo by Addania\")\r\n\r\n> It's worth noting that it's still considered \"one shape\". If we add a border:\r\n\r\n```\r\nstrong {\r\n  border: 2px solid;\r\n}\r\n```\r\n\r\n> ...we can see that we don't get 2 discrete rectangles, but rather a single rectangle cut in half and repositioned:\r\n\r\n> This is also a reason why some preperties do not work on them. Like vertical margins.\r\n\r\n> Other properties like horizontal padding leads to unexpected results. Let's add some padding left and right to the wrapped text in the paragraph.\r\n\r\nHTML:\r\n\r\n```\r\n<p>\r\n  <strong>\r\n    These words are broken up across many lines.\r\n  </strong>\r\n</p>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\nstrong {\r\n  padding-left: 8px;\r\n  padding-right: 8px;\r\n  background: peachpuff;\r\n}\r\n\r\np {\r\n  max-width: 125px;\r\n}\r\n```\r\n\r\n> Result is unexpected. Padding is only applied to the tips - very beginning of the text and at the very end (last line - end of the text)\r\n\r\n![](https://i.imgur.com/RrMA6bu.png \"Photo by Addania\")\r\n\r\n> If we want to change this behaviour and applie this padding to each individual line, then we can do a black magic trick:\r\n\r\n```\r\n-webkit-box-decoration-break: clone;\r\nbox-decoration-break: clone;\r\n```\r\n\r\n![](https://i.imgur.com/aOMZsoJ.png \"Photo by Addania\")\r\n\r\n> `box-decoration-break` accepts two values: `slice` (default)and `clone`.\r\n\r\n> `slice` acts like a sushi roll being chopped. It's not a bunch of individual boxes, it's 1 long box, sliced into bits.\r\n\r\n> `clone` is interesting: it allows us to treat each segment as its own box, and copy the styles to each one. Instead of 1 long box, we have 4 boxes, each with the same styles.\r\n\r\n**Mutant inline-block**\r\n\r\n> `display: inline-block` is a weird fella. It is a combination of block and inline display.\r\n\r\n> Essentially, inline-block allows you to drop a block element into an inline context. It's a block in inline's clothing. it's an element that internally acts like a block element, but externally acts like an inline element. The parent container will treat it as an inline element, since it's external. But the element itself can be styled like a block.\r\n\r\n> This means that inline-block elements will go with the flow, but we will be able to apply block properties on it: like width, height, vertical margins, on hover events etc.\r\n\r\n> Cute example is:\r\n\r\nHTML\r\n\r\n```\r\n<p>\r\n  <strong>Warning:</strong> Alpaca may bite.\r\n</p>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\nstrong {\r\n  display: inline-block;\r\n  color: white;\r\n  background-color: red;\r\n  width: 100px;\r\n  text-align: center;\r\n}\r\n\r\nstrong:hover {\r\n  transform: scale(1.2);\r\n}\r\n```\r\n\r\n> We've effectively turned our strong element into a block element, as far as its own CSS declarations are concerned. Everything between the four corners of the element is block in nature. But from the paragraph's perspective, it's an inline element. It lays it out as an inline element, in the inline direction beside the text.\r\n\r\n> Disadvantage of inline-block elements is that they do not wrap 😥\r\n\r\n**WIDTH ALGORITHMS**\r\n\r\n> Block elements have default width of `auto`. They grow to consume (100% of parent content width - child margins)\r\n\r\nHTML:\r\n\r\n```\r\n<body>\r\n <h1>\r\n  Hello World\r\n </h1>\r\n</body>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\nh1 {\r\n  margin: 0 16px;\r\n  background-color: chartreuse;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/tN9jXMu.png \"Photo by Addania\")\r\n\r\n> If we set the width of a block element to 100% the result is surprising. It will grow outside of the frame because of the 2\\*16px margin\r\n\r\n> Reason is that 100% with means 100% of the parent content tag under all circumstances. If body is 400px wide, then also h1 will be 400px wide. But because we have 32px margin, it will grow out of the frame.\r\n\r\n![](https://i.imgur.com/6ZM3s85.png \"Photo by Addania\")\r\n\r\n> Therefore again, block elements have default with `auto` and not `100%`. It's a subtle but important distinction: by default, block elements have dynamic sizing. They're context-aware.\r\n\r\n> Broadly speaking, there are two kinds of values we can specify for width:\r\n\r\n- Measurements (100%, 200px, 5rem)\r\n- Keywords (auto, fit-content)\r\n\r\n> Measurement-based values are either completely explicit (eg. 200px), or relative to the parent's available space (eg. 50%).\r\n\r\n> Keywords, on the other hand, let us specify different sorts of behaviours depending on the context.\r\n\r\n> Some of the keywords:\r\n\r\n> `auto` - allow to consume as much space as available given contraints (parent content size, margins, etc)\r\n\r\n> `min-content` - is an intrinsic value - it chooses the smallest available space **based on the element itself / elements' children**! It is different from `auto` or `measurements` which are **extrinsic** and **based on the parent** container. min-content will shrink the width to the minimum, so that each line contains at least one word. Whenever it encounters whitespace or a hyphenated word, it'll break it onto a new line.\r\n\r\nHTML:\r\n\r\n```\r\n<h1>\r\n  I am shrinking and shrinking, slowly fading away.\r\n</h1>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\nh1 {\r\n  width: min-content;\r\n  background-color: deeppink;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/W94uNQa.png \"Photo by Addania\")\r\n\r\n> `max-content` - it never adds any line-breaks. The element's width will be the smallest value that contains the content, without breaking it up. If the content is too big, it will create a vertical scroll bar. It pays no attention to the constraints set by the parent. It will size the element based purely on the length of its unbroken children. `max-content` is based also on children.\r\n\r\n![](https://i.imgur.com/oFSQXtP.png \"Photo by Addania\")\r\n\r\n> How could this be useful? Only for those test which are short and we dont want to break them. It has an advantage that its size is only around the letter, it does not consume all 100% of available space as for auto. So adding a background-color would only color the background behind letters, not whole line:\r\n\r\nCSS\r\n\r\n```\r\nh1 {\r\n  width: max-content;\r\n  background-color: mediumspringgreen;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/dj8l4md.png \"Photo by Addania\")\r\n\r\n> With width: auto\r\n\r\nCSS\r\n\r\n```\r\nh1 {\r\n  width: auto;\r\n  background-color: mediumspringgreen;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/KIMNK39.png \"Photo by Addania\")\r\n\r\n> `fit-content` - its width is also based on the children. But it is the middle ground between min and max content. If that width can fit within the parent container, it behaves just like max-content, not adding any line-breaks. If the content is too wide to fit in the parent, however, it adds line-breaks as-needed to ensure it never exceeds the available space.\r\n\r\nHTML\r\n\r\n```\r\n<h2>Short</h2>\r\n<h2>A mid-length heading</h2>\r\n<h2>The longest heading you've ever seen in your life, will it ever end, ahhhhh ohmigod 😬😬😬😬😬😬😬</h2>\r\n```\r\n\r\nCSS\r\n\r\n```\r\nh2 {\r\n  width: -moz-fit-content;\r\n  width: fit-content;\r\n  background-color: peachpuff;\r\n  margin-bottom: 16px;\r\n  padding: 8px;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/XJqAhip.png \"Photo by Addania\")\r\n\r\n> `fit-content` behaves just like `width: auto`. But it does not extend to the 100% width of the parent like auto down in the piture bellow. Which makes it better to use background color.\r\n\r\n![](https://i.imgur.com/w7BsFSn.png \"Photo by Addania\")\r\n\r\n> If we dont want to or cant use fit-content but want to replicate its behaviour, we can use 2 workarounds:\r\n\r\nCSS\r\n\r\n```\r\nh2 {\r\n  max-width: max-content;\r\n}\r\n```\r\n\r\n> Why does it work? Because we haven't changed the width property, the default block-level behavior will continue; the h2 will grow to fill the available horizontal space.\r\n\r\n> Let's suppose we have a 600px container, and our h2 only has a few characters. The max-content size might be 100px. Because 100px is smaller than 600px, max-width will constrain the width.\r\n\r\n> What if the h2 has a bunch of characters? Maybe max-content would be 1000px. This value is larger than the container size of 600px, and so max-width has no effect.\r\n\r\n> Another solution is:\r\n\r\nCSS\r\n\r\n```\r\nh2 {\r\n  display: table;\r\n}\r\n```\r\n\r\n> display: table causes elements to render using Table layout. This is the layout mode used by the <table> HTML tag. It's an alternative algorithm to flow layout or positioned layout.\r\n\r\n> By default, tables will shrink to hold their contents, but are still block-level elements. This is exactly what we want in this case, though it is a bit of a hack; a table element expects to have table rows as children, not text.\r\n\r\n> We can add constraints to an element's size using `min-width` and `max-width`. This is useful to account of possibly idfferent screen sizes. The particularly exciting thing about min-width and max-width is that they let us mix units. We can specify constraints in pixels, but set a percentage width.\r\n\r\n> **DEFAULT VALUES**\r\n\r\n> Each browser has its own default styles. It is in case we do not define styles for a certain element. These browser styles are called: `user agent styles`. User agent means browser.\r\n\r\n> Among default browser styles are margin and padding. In order to reset the completely and start with clean slate, we can set:\r\n\r\n```\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n```\r\n\r\n**VISIBILITY**\r\n\r\n> Visibility is a property which decides if an element is `hidden` or `visible`.\r\n\r\n- hidden - element with not be visible\r\n- visible - element will be visible\r\n\r\n> Even if we set element to hidden, the website will still reserve space for it. So we are only hiding element, but the space where is will be generated will be visible.\r\n\r\nHTML:\r\n\r\n```\r\n<ul>\r\n  <li>LOOK AT ME</li>\r\n  <li class=\"incognito\">YOU CANNOT SEE ME :)</li>\r\n  <li>I AM HERE</li>\r\n<ul>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\n.incognito {\r\n  visibility: hidden;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/h28WH9G.png \"Photo by Addania\")\r\n\r\n> If we want to hide an element completely, we set:\r\n\r\nCSS:\r\n\r\n```\r\n.incognito {\r\n  display:none;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/jxNsMVj.png \"Photo by Addania\")\r\n\r\n**BOX MODEL**\r\n\r\n> The way width is calculated is based on the `box-sizing` property. It can hold 2 values: default `content-box` or `border-box`\r\n\r\n> By default it has value of `content-box`\r\n\r\n> Imagine code like this where section is 500px:\r\n\r\n```\r\n<style>\r\n  section {\r\n    width: 500px;\r\n  }\r\n  .box {\r\n    width: 100%;\r\n    padding: 20px;\r\n    border: 4px solid;\r\n  }\r\n</style>\r\n<section>\r\n  <div class=\"box\"></div>\r\n</section>\r\n```\r\n\r\n> What will be the width of the box? It will actually be 548px.\r\n\r\n```\r\n500px of content + 2*20px of padding + 2*4px of border\r\n```\r\n\r\n![](https://i.imgur.com/6Kh7jZx.png \"Photo by Addania\")\r\n\r\n> What will be the height? Height will be 48px\r\n\r\n```\r\n0px of content because we did not specify it + 2*20px padding +2*4px of border\r\n```\r\n\r\n> But this is not what we want. We probably want that the content + padding + border is of the width of 500px. For that it is better to use `border-box` value for the `box-sizing` property\r\n\r\n![](https://i.imgur.com/axhzVsH.png\"Photo by Addania\")\r\n\r\n> Border-box will then calculate the width of the box based on its content, padding and the border\r\n\r\n> Often in applications you would reset the box-sizing for whole document to global styles. In order to do so, copy this snippet any time you start a new project. It is way easier and intuitive to work with border-box then with the content-box:\r\n\r\n```\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n}\r\n```\r\n\r\n**POSITIONINIG**\r\n\r\n> HTML pages are rendered from left to right, from top to bottom.\r\n\r\n> Following attributes define positioning of these elements:\r\n\r\n- position\r\n- display\r\n- z-index\r\n- float\r\n- clear\r\n\r\n> Let`s create 2 divs within another div and color them:\r\n> HTML:\r\n\r\n```\r\n<div class=\"parent-block\">\r\n    <div class=\"box1\"></div>\r\n    <div class=\"box2\"></div>\r\n</div>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\n.parent-block {\r\n    width: 400px;\r\n    height: 400px;\r\n    background-color: rgba(173, 27, 218, 0.2)\r\n}\r\n.box1{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: purple ;\r\n}\r\n.box2{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: orchid;\r\n}\r\n```\r\n\r\n> By browser default, they will be displayed as block:\r\n\r\n![](https://i.imgur.com/ESLu9iC.png \"Photo by Addania\")\r\n\r\n> User agent styles means browser default. Box will look like this:\r\n\r\n![](https://i.imgur.com/K0Ponuc.png \"Photo by Addania\")\r\n\r\n> Child divs are generated beneath each other. Each child div takes up whole width of the parent container.\r\n\r\n> If we wanted to position the boxes next to each other, we would need to apply display: inline-block to the boxes:\r\n\r\n```\r\n.box1{\r\n    display: inline-block;\r\n}\r\n.box2{\r\n    display: inline-block;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/kLgULXj.png \"Photo by Addania\")\r\n\r\n**POSITION**\r\n\r\n> Postion is a property that positions an element.\r\n\r\n> Possible values:\r\n\r\n- static- default value, elements render in order, as they appear in the document flow\r\n- absolute- the element is positioned relative to its first positioned (not static) ancestor element\r\n- fixed - the element is positioned relative to the browser viewport (visible screen)\r\n- relative - the element is positioned relative to its normal (static) position, so \"left:20px\" adds 20 pixels to the element's LEFT position\r\n- sticky- the element is positioned based on the user's scroll position\r\n- initial- sets this property to its default value. Read about initial\r\n- inherit - inherits this property from its parent element\r\n\r\n> If not specified, position will be static. It does not need to be written explicitly.\r\n\r\n> With position we can also define four offset properties:\r\n\r\n- top - moves the element down.\r\n- bottom - moves the element up.\r\n- left - moves the element right.\r\n- right - moves the element left.\r\n\r\n**POSITION RELATIVE**\r\n\r\n> Our starting positioning of elements will be `display: block` and will look like this:\r\n\r\nHTML:\r\n\r\n```\r\n<div class=\"parent-block\">\r\n    <div class=\"box1\"></div>\r\n    <div class=\"box2\"></div>\r\n</div>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\n.parent-block {\r\n    width: 400px;\r\n    height: 400px;\r\n    background-color: rgba(173, 27, 218, 0.2);\r\n}\r\n.box1{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: purple ;\r\n    display: block;\r\n}\r\n.box2{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: orchid;\r\n    display: block;\r\n}\r\n\r\n```\r\n\r\n![](https://i.imgur.com/K0Ponuc.png \"Photo by Addania\")\r\n\r\n> Please note we do not need to specify `display: block` explicitly, because it is browser default (user agent styles), but we can. Notice that the box 2 is rendered beneath box 1.\r\n\r\n> We can then position our box 2 with `position: relative`. Relative means in this case relative to its `position: static` which is the default where browser would render it. Considering we use `display: block` then `position: static` means beneath the box 1.\r\n\r\n> There will be no visible change to our starting point unless we add some offset positioning. For example offset 10px from top and offset of 30px from right:\r\n\r\n```\r\n.box2{\r\n    display: block;\r\n    position: relative;\r\n    top: 10px;\r\n    left: 30px;\r\n}\r\n```\r\n\r\n> Resulting change will look like this.\r\n\r\n![](https://i.imgur.com/s3PQ6ES.png \"Photo by Addania\")\r\n\r\n**POSITION FIXED**\r\n\r\n> Our starting positioning of elements will be `display: block` and will look like this:\r\n\r\nHTML:\r\n\r\n```\r\n<div class=\"header\"></div>\r\n<div class=\"parent-block\">\r\n    <div class=\"box1\"></div>\r\n    <div class=\"box2\"></div>\r\n</div>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\n.header {\r\n    width: 400px;\r\n    height: 120px;\r\n    background-color: turquoise;\r\n}\r\n.parent-block {\r\n    width: 400px;\r\n    height: 400px;\r\n    background-color: rgba(173, 27, 218, 0.2);\r\n}\r\n.box1{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: purple ;\r\n    display: block;\r\n}\r\n.box2{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: orchid;\r\n    display: block;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/RNCpJBn.png \"Photo by Addania\")\r\n\r\n> Please note we do not need to specify `display: block` explicitly, because it is browser default (user agent styles), but we can. Notice that the box 2 is rendered beneath box 1.\r\n\r\n> We can then position our box 2 with `position: fixed`. Fixed means in this case relative to to the viewport (visible browser window).\r\n\r\n> There will be no visible change to our starting point unless we add some offset positioning. For example offset 0px from top and offset of 60px from right:\r\n\r\n```\r\n.box2{\r\n    display: block;\r\n    position: fixed;\r\n    top: 0px;\r\n    left: 60px;\r\n}\r\n```\r\n\r\n> Resulting change will look like this.\r\n\r\n![](https://i.imgur.com/79Z8GSK.png \"Photo by Addania\")\r\n\r\n> Worth pointing out is also how elements with fixed position behave while scrolling. They would not be scrolled away from the viewport. They will remain in the visible screen.\r\n\r\n![](https://i.imgur.com/bMA0qDA.gif \"Photo by Addania\")\r\n\r\n> Navigation bars are often set with the position fixed and then the next element below them is set to relative with offset top: xx px.\r\n\r\n**POSITION ABSOLUTE**\r\n\r\n> Our starting positioning of elements will be `display: block` and will look like this:\r\n\r\nHTML:\r\n\r\n```\r\n<div class=\"header\"></div>\r\n<div class=\"parent-block\">\r\n    <div class=\"box1\"></div>\r\n    <div class=\"box2\"></div>\r\n</div>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\n.header {\r\n    width: 400px;\r\n    height: 120px;\r\n    background-color: turquoise;\r\n}\r\n.parent-block {\r\n    width: 400px;\r\n    height: 400px;\r\n    background-color: rgba(173, 27, 218, 0.2);\r\n    position: absolute;\r\n}\r\n.box1{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: purple ;\r\n    display: block;\r\n}\r\n.box2{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: orchid;\r\n    display: block;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/RNCpJBn.png \"Photo by Addania\")\r\n\r\n> Please note we do not need to specify `display: block` explicitly, because it is browser default (user agent styles), but we can. Notice that the box 2 is rendered beneath box 1.\r\n\r\n> We can then position our box 2 with `position: absolute`. Absolute means in this case relative to to the `next parent which has either position: relative or position: absolute`.\r\n\r\n> There will be no visible change to our starting point unless we add some offset positioning. For example offset 10px from top and offset of 30px from right:\r\n\r\n```\r\n.box2{\r\n    display: block;\r\n    position: absolute;\r\n    top: 5px;\r\n    left:60px;\r\n}\r\n```\r\n\r\n> Resulting change will look like this.\r\n\r\n![](https://i.imgur.com/vHZBhRW.png \"Photo by Addania\")\r\n\r\n> Please note, that it is critical, that the next parent component (in our case `.parent-block`) has `position: absolute` or `position: relative`. If it didn`t, it would find next parent component with such position. In our case the only next parent would be the html tag itself. So it would be position in respect to it.\r\n> CSS:\r\n\r\n```\r\n.header {\r\n    width: 400px;\r\n    height: 120px;\r\n    background-color: turquoise;\r\n}\r\n.parent-block {\r\n    width: 400px;\r\n    height: 400px;\r\n    background-color: rgba(173, 27, 218, 0.2);\r\n}\r\n.box1{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: purple ;\r\n    display: block;\r\n}\r\n.box2{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: orchid;\r\n    display: block;\r\n    position: absolute;\r\n    top: 5px;\r\n    left:60px;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/4r6W7ZQ.png \"Photo by Addania\")\r\n\r\n> Important about position: absolute is that when an element’s position is set to absolute all other elements on the page will ignore the element and act like it is not present on the page.\r\n\r\nHTML:\r\n\r\n```\r\n<div class=\"header\"></div>\r\n<div class=\"parent-block\">\r\n    <div class=\"box1\"></div>\r\n    <div class=\"box2\"></div>\r\n    <div class=\"box3\"></div>\r\n</div>\r\n```\r\n\r\nCSS:\r\n\r\n```\r\n.header {\r\n    width: 400px;\r\n    height: 120px;\r\n    background-color: turquoise;\r\n    display: block;\r\n}\r\n\r\n.parent-block {\r\n    width: 400px;\r\n    height: 400px;\r\n    background-color: rgba(173, 27, 218, 0.2);\r\n    position: relative;\r\n}\r\n\r\n.box1{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: purple ;\r\n    display: block;\r\n}\r\n\r\n.box2{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: orchid;\r\n    display: block;\r\n    position: absolute;\r\n    top: 5px;\r\n    left:60px;\r\n}\r\n\r\n.box3{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: blueviolet;\r\n    display: block;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/QLxSgFG.png \"Photo by Addania\")\r\n\r\n> Notice how new box 3 (violet) completely ignores the box2 and is positioned directly beneath the box 1\r\n\r\n> Worth pointing out is also how elements with absolute position behave while scrolling. They would be scrolled away from the viewport\r\n\r\n![](https://i.imgur.com/sNPRZZX.gif \"Photo by Addania\")\r\n\r\n**Z INDEX**\r\n\r\n> When there are multiple elements on page which overlap we can control with Z index which element is infront or behind another. The z-index property controls how far “back” or how far “forward” an element should appear on the web page when elements overlap. This can be thought of the depth of elements, with deeper elements appearing behind shallower elements. The higher the z index, the more in front element is. So element with z index 2 will be in front of element with z index 1\r\n\r\n> Imagine code like this:\r\n> HTML\r\n\r\n```\r\n<div class=\"header\"></div>\r\n<div class=\"parent-block\">\r\n    <div class=\"box1\"></div>\r\n    <div class=\"box2\"></div>\r\n    <div class=\"box3\"></div>\r\n</div>\r\n```\r\n\r\nCSS\r\n\r\n```\r\n.header {\r\n    width: 400px;\r\n    height: 120px;\r\n    background-color: turquoise;\r\n    display: block;\r\n}\r\n\r\n.parent-block {\r\n    width: 400px;\r\n    height: 400px;\r\n    background-color: rgba(173, 27, 218, 0.2);\r\n    position: relative;\r\n}\r\n\r\n.box1{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: purple ;\r\n    display: block;\r\n}\r\n\r\n.box2{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: orchid;\r\n    display: block;\r\n    position: absolute;\r\n    top: 20px;\r\n    left:40px;\r\n}\r\n\r\n.box3{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: blueviolet;\r\n    display: block;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/HJIzgk1.png \"Photo by Addania\")\r\n\r\n> What if we want the second box appear behind the box 1 and 3? We can set their z-indices\r\n> CSS\r\n\r\n```\r\n.box1{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: purple ;\r\n    display: block;\r\n    position: relative;\r\n    z-index: 2;\r\n}\r\n\r\n.box2{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: orchid;\r\n    display: block;\r\n    position: absolute;\r\n    top: 20px;\r\n    left:40px;\r\n    z-index: 1;\r\n}\r\n\r\n.box3{\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: blueviolet;\r\n    display: block;\r\n    position: relative;\r\n    z-index: 2;\r\n}\r\n```\r\n\r\n> Please not it is super important that we st box 1 and 3 to position: relative, because z index does not work on static objects (position:static is default if we do not set any position). Result will look like this\r\n\r\n![](https://i.imgur.com/5VM9sZV.png \"Photo by Addania\")\r\n\r\n**DISPLAY**\r\n\r\n> Each HTML element has a default display value that determines if it can share horizontal space with other elements or not. Some elements fill the entire browser width from left to right regardless of the size of their content. But other elements only take up as much horizontal space as their content needs and can be directly next to other elements.\r\n\r\n**INLINE DISPLAY**\r\n\r\n> Default display of some tags, for example `<em>`, `<strong>`, `<button>` or `<a>`, is called `inline`. Inline elements have a box that wraps tightly around their content, only taking up amount of space which is necessary to display their content and not requiring a new line after every new element.\r\n\r\n> Height and width of such elements cannot be specified in the CSS document. For example, the text of `<a>` tag will, by default, be displayed on the same line as the surrounding text, and it will only be as wide as necessary to contain its content.\r\n\r\n> Inline elements cannot be altered in size with height or width CSS properties.\r\n\r\nHTML:\r\n\r\n```\r\n<button>Click me!</button><button>Me too, please?</button>\r\n```\r\n\r\n![](https://i.imgur.com/NKk2d26.png \"Photo by Addania\")\r\n\r\n> Some elements by default have property display: block, which renderes them beneath each other. For example heading tags or divs\r\n> HTML:\r\n\r\n```\r\n<button>Click me!</button><button>Me too, please?</button>\r\n<h3>Hello</h3>\r\n<h3> Universe!</h3>\r\n```\r\n\r\n![](https://i.imgur.com/ybaY2aS.png \"Photo by Addania\")\r\n\r\n> Display property provides the ability to make any element an inline element, also elements that are not inline by default such as paragraphs, divs or headings.\r\n> CSS:\r\n\r\n```\r\nh3 {\r\n  display: inline;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/gIVa8dd.png\"Photo by Addania\")\r\n\r\nThe CSS in the example above will change the display of all `<h1>` elements to inline. The browser will render `<h1>` elements on the same line as other inline elements immediately before or after them (if there are any).\r\n\r\n**ROTATION**\r\n\r\n> The <code>t⁠r⁠a⁠n⁠s⁠f⁠o⁠r⁠m</code> property can rotate images and other elements. It accepts functions as values. To add a function that rotates an image, we type in <code>r⁠o⁠t⁠a⁠t⁠e⁠(⁠)</code>. We enter there number of degrees we want to rotate image.90deg means 90 degrees clickwise\r\n\r\n```\r\nimg {\r\ntransform: rotate(90deg);\r\n}\r\n```\r\n\r\n> To rotate an image anti-clockwise we add minus sign -45deg\r\n\r\n```\r\nimg {\r\ntransform: rotate(-45deg);\r\n}\r\n```\r\n\r\n> We can rotate other elements, not only images. For example buttons\r\n\r\n```\r\nbutton {\r\ntransform: rotate(-90deg);\r\n}\r\n```\r\n\r\n**Media queries**\r\n\r\n> Media queries are very useful when we want to have diffrent styling based on the different screen sizes, for example large, medium or small (which is usually a mobile).\r\n> In a project we usually start developing the layout how it should look on the mobile phone and defining styles for the mobile first with for example defning the widths:\r\n\r\n```es6\r\n.Burger {\r\n  width: 100%;\r\n  height: 250px;\r\n}\r\n```\r\n\r\n> Then maybe on medium screen sizes we define the width of\r\n\r\n```es6\r\n@media (min-width: 500px) and (min-height: 401px) {\r\n  .Burger {\r\n    width: 450px;\r\n    height: 400px;\r\n  }\r\n}\r\n```\r\n\r\n> Then on the large screen we want to use a different size.\r\n\r\n```es6\r\n@media (min-width: 1000px) and (min-height: 700px) {\r\n  .Burger {\r\n    width: 700px;\r\n    height: 600px;\r\n  }\r\n}\r\n```\r\n\r\n> References:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/Getting_started\r\n\r\nAmazing CSS courses for beginners:\r\n\r\nhttps://css-for-js.dev/\r\n\r\nhttps://www.codecademy.com/courses/learn-css/\r\n\r\n![](https://i.imgur.com/Y25H36n.jpg \"Photo by Lisa Fotios from Pexels\")\r\n","frontmatter":{"date":"2019-10-11","title":"CSS","category":"knowledge-base"},"fields":{"slug":"/CSS/"},"timeToRead":54,"html":"<p><img src=\"https://i.imgur.com/0v7juum.jpg\" title=\"Photo by Format from Pexels\"></p>\n<p><strong>Foreword</strong></p>\n<blockquote>\n<p>This entire section are my personal notes from 2 amazing CSS courses:</p>\n</blockquote>\n<ul>\n<li><a href=\"https://css-for-js.dev/\">https://css-for-js.dev/</a></li>\n<li><a href=\"https://www.codecademy.com/courses/learn-css/\">https://www.codecademy.com/courses/learn-css/</a></li>\n</ul>\n<blockquote>\n<p>All the credits go to <a href=\"https://courses.joshwcomeau.com/\">Josh Comeau</a> and <a href=\"https://www.codecademy.com/\">codecademy</a></p>\n</blockquote>\n<p><strong>TERMINILOGY</strong></p>\n<blockquote>\n<p>Imagine this snippet:</p>\n</blockquote>\n<pre><code>.apple {\n  color: purple;\n}\n</code></pre>\n<blockquote>\n<p><code>p</code> is a selector. A selector is a descriptor that lets you target specific elements on the page. In this case, we're selecting all nodes with the “apple” class.</p>\n</blockquote>\n<blockquote>\n<p><code>color</code> is a property. Properties in CSS are the attributes you can specify values for, like \"color\" and \"font-size\"</p>\n</blockquote>\n<blockquote>\n<p><code>purple</code> is a value (of a property)</p>\n</blockquote>\n<blockquote>\n<p>Imagine this snippet:</p>\n</blockquote>\n<pre><code>.code-snippet {\n  padding: 32px;\n  white-space: pre-wrap;\n}\n</code></pre>\n<blockquote>\n<p>Which part of it is the FIRST DECLARATION? Can you guess?</p>\n</blockquote>\n<blockquote>\n<p>OK, a hint here, declaration is a combination of property and value.</p>\n</blockquote>\n<blockquote>\n<p>So in our case it is - <code>padding: 32px;</code></p>\n</blockquote>\n<blockquote>\n<p>Now what is a rule here?</p>\n</blockquote>\n<pre><code>p {\n  color: red;\n  font-family: sans-serif;\n}\n</code></pre>\n<blockquote>\n<p>All of it! All the text above is a rule. A rule, also known as a style, is a collection of declarations, targeting one or more selectors. A stylesheet is made up of multiple rules.</p>\n</blockquote>\n<blockquote>\n<p>Find a unit here:</p>\n</blockquote>\n<pre><code>p {\n  padding-top: 24px;\n}\n</code></pre>\n<blockquote>\n<p>It is the <code>px</code>. Some values have units, like px, %, or em. In this case, our padding-top has a value of 24px, which is measured in the \"px\" unit.</p>\n</blockquote>\n<p><strong>SELECTORS</strong></p>\n<p>Selectors enable to select certain HTML element(s) and apply CSS styles to it. Selectors are how we can select certain HTML elements. In CSS there are 3 ways how we can select elements</p>\n<p><strong>A) by tag name</strong> - this scenario will style the teal colour to ALL <code><code>&#x3C;p></code></code> tags in the page</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p>Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>p {\n color: tile;\n}\n</code></pre>\n<p><strong>B) by class name</strong> - In case of class names we need to add period in front of the class name. They are meant to be re-used over many elements.</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p class=\"title\">Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.title {\n font-family: Arial;\n}\n</code></pre>\n<p><code>Please note:</code> in pure HTML we use word \"class\" to define for example a class called title which we can then style by .title in CSS. However, in REACT word \"class\" is reserved to create class components. Therefore, in order to create regular names of classes, we need to use word \"className\".</p>\n<p><strong>C) By id of an element</strong> - ID is completely unique per site. We need to add hashtag. An ID is meant to style only one element.</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p id=\"large-title\">Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>#large-title {\n font-size: 50px;\n}\n</code></pre>\n<blockquote>\n<p>There is a universal selector <code>*</code> which selects all elements on the website</p>\n</blockquote>\n<pre><code>* {\n    font-size: 12px;\n}\n</code></pre>\n<blockquote>\n<p>Precedence of selectors: General rule is that more specific selector will be applied compared to more generic selector. ID selector > Class selector > Tag selector. If we have example below, the red colour will be applied because .header (class selector) is more specific than tag selector. From the above 3 selectors, most specific selector is ID selector.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;h1 class=\"headere\">Hi&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\ncolor: blue;\n}\n\n.header {\ncolor: red;\n}\n</code></pre>\n<blockquote>\n<p>There is only one way how to over-ride ID selector and namely by <code>!important</code> syntax. This can override any CSS styling and should be only used as a last resort (because this one is very hard to override). In the example below, the colour of header will be blue.\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;h1 class=\"headere\">Hi&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\n  color: blue !important;\n}\n\n.header {\n  color: red;\n}\n</code></pre>\n<blockquote>\n<p>Chaining selectors: we are able to chain more selectors and make them even more specific.</p>\n</blockquote>\n<blockquote>\n<p>In the example below, CSS style will be applied to <code><code>&#x3C;h1></code></code> tags but only those which have class name teal.\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;h1 class=\"teal\">Hello\n    &#x3C;span class=\"purple\">stranger&#x3C;/span>\n&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1.teal {\n  color: teal;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/dDjN9MR.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Chaining selectors can be also with <code>space</code>, but it selects different thing. It selects all elements with class teal which are <code>descendents</code> of h1 tag. This kind of selector actually selects based on their location in the document. The below example selects for only those selectors which are nested in h1 tag. This is called <code>descendant combinator</code>\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;h1 class=\"teal\">Hello\n    &#x3C;span class=\"purple\">stranger&#x3C;/span>\n&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 .teal {\ncolor: teal;\n}\n\nh1 .purple {\n  color: purple;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/fgfKOTN.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>There is an interesting piece of information about the descendant combinator. It will style every child/descendant of that parent!</p>\n</blockquote>\n<blockquote>\n<p>HTML</p>\n</blockquote>\n<pre><code>&#x3C;ul class=\"main-list\">\n  &#x3C;li>Salt&#x3C;/li>\n  &#x3C;li>Pepper&#x3C;/li>\n  &#x3C;li>\n    Fruits &#x26; Veg:\n    &#x3C;ul>\n      &#x3C;li>Apple&#x3C;/li>\n      &#x3C;li>Banana&#x3C;/li>\n      &#x3C;li>Carrots&#x3C;/li>\n    &#x3C;/ul>\n  &#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<blockquote>\n<p>CSS</p>\n</blockquote>\n<pre><code>.main-list li {\n  border: 1px dotted;\n}\n</code></pre>\n<blockquote>\n<p>In above example, every li which is a descendant of the class main-list will have border, so also Apple, Banana, etc.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/yvg2pla.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>But what if we only wanted to style the DIRECT children? So directly beneath the main unordered list? So in our case only Salt, Pepper and Fruits?</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/X19ODSi.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>We would need to use <code>></code></p>\n</blockquote>\n<pre><code>.main-list > li {\n  border: 1px dotted;\n}\n</code></pre>\n<blockquote>\n<p>How about we only wanted to put border around Apple, Banana and Carrots?</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/UANLyFI.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>One way to do it, is to target li which is a direct child of ul which is nested within class main-list:</p>\n</blockquote>\n<pre><code>.main-list ul > li {\n  border: 1px dotted;\n}\n</code></pre>\n<blockquote>\n<p>Another selector based on the location in the document is called an <code>adjuscent sibling combinator</code>. It uses a plus sign (+) in oredr to select the next sibling on the same hierarchy. For example styling a pararaph which comes directly after the heading at the same hierarchy level in the HTML:</p>\n</blockquote>\n<pre><code>h1 + p {\n  font-size: 200%;\n}\n</code></pre>\n<blockquote>\n<p>If we need to apply same style to multiple selectors, we can simply separate them by comma. Imagine html like this:</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;h1 class=\"teal\">Hello\n    &#x3C;span class=\"purple\">stranger&#x3C;/span>\n&#x3C;/h1>\n\n&#x3C;h3 class=\"plum\">Nice meeting you\n    &#x3C;span class=\"steel\">out here&#x3C;/span>\n&#x3C;/h3>\n</code></pre>\n<blockquote>\n<p>Which is styled like this:</p>\n</blockquote>\n<p>CSS</p>\n<pre><code>h1.teal {\n  color: teal;\n}\n\nh1 .purple {\n  color: purple;\n}\n\nh3.plum {\n  color:plum;\n}\n\nh3 .steel {\n  color: steelBlue;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/o7XWx5c.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Imagine you want to style <code>stranger</code> and <code>out here</code> with the same style. You can do it like this:\nCSS</p>\n</blockquote>\n<pre><code>h1 .purple {\n  color: lightblue;\n}\n\nh3 .steel {\n  color: lightblue;\n}\n</code></pre>\n<blockquote>\n<p>Or you can shorten it to:\nCSS</p>\n</blockquote>\n<pre><code>h1 .purple, h3 .steel {\n  color: lightblue;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/WiFdSmL.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Be careful with applying same style to multiple elements. Unfortunately, the comma operator has one annoying pitfall: if any of the selectors are invalid, the rule won't be applied at all. entire rule will be thrown away.</p>\n</blockquote>\n<blockquote>\n<p>Another way to style <code>stranger</code> and <code>out here</code> would be nesting selectors:\nCSS</p>\n</blockquote>\n<pre><code>h1, h3 {\n    span {\n        color: deepSkyBlue;\n    }\n}\n</code></pre>\n<blockquote>\n<p>Styling based on state is another way of styling html elements. For example styling <code>a</code> (anchor) tags. This has different states depending on whether it is visited, unvisited, being hovered over, focused via the keyboard or in the process of being clicked (activated). We can use CSS to target these states. The CSS below styles unvisited links pink and visited links green.</p>\n</blockquote>\n<pre><code>a:link {\n  color: pink;\n}\n\na:visited {\n  color: green;\n}\n</code></pre>\n<blockquote>\n<p>Following CSS will remove any text styling (such as underline) when user hovers over an anchor tag:</p>\n</blockquote>\n<pre><code>a:hover {\n  text-decoration: none;\n}\n</code></pre>\n<blockquote>\n<p>Just a wrap up - <code>combinators</code> such as space or + are a way to combine <code>selectors</code>.</p>\n</blockquote>\n<blockquote>\n<p>We can use selectors and combinators in order to select for very specific elements.</p>\n</blockquote>\n<blockquote>\n<p>Select any <code>&#x3C;span></code> that is inside a <code>&#x3C;p></code>, which is inside an <code>&#x3C;article></code></p>\n</blockquote>\n<pre><code>article p span { ... }\n</code></pre>\n<blockquote>\n<p>Select any <code>&#x3C;p></code> that comes directly after a <code>&#x3C;ul></code>, which comes directly after an <code>&#x3C;h1></code></p>\n</blockquote>\n<pre><code>h1 + ul + p { ... }\n</code></pre>\n<blockquote>\n<p>Style any element with a class of special, which is inside a <code>&#x3C;p></code>, which comes just after an <code>&#x3C;h1></code>, which is inside a <code>&#x3C;body></code>. Phew!</p>\n</blockquote>\n<pre><code>body h1 + p .special {...}\n</code></pre>\n<p><strong>Pseaudo-classes</strong></p>\n<blockquote>\n<p>Let's have a button which changes color on hover. We might want to use a state for it and use <code>onMouseEnter</code> and <code>onMouseLeave</code> event listeners on that button. But it is possible do this entirely with CSS.</p>\n</blockquote>\n<blockquote>\n<p>Syntax looks like this:</p>\n</blockquote>\n<pre><code>selector:pseudo-class {\n  property: value;\n}\n</code></pre>\n<blockquote>\n<p>An exmaple is here:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  button:hover {\n    color: blue;\n  }\n&#x3C;/style>\n&#x3C;button>Hover over me!&#x3C;/button>\n</code></pre>\n<blockquote>\n<p><code>:hover</code> is a pseudo class. A pseudo-class is a <code>selector modifier</code>; it will apply its declarations when some sort of condition or state is met. In this case, it only applies the blue text when the selected element is being hovered over.</p>\n</blockquote>\n<blockquote>\n<p>List of possible pseudo classes is here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\">https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes</a></p>\n</blockquote>\n<blockquote>\n<p>Let's see some of them.</p>\n</blockquote>\n<blockquote>\n<p><code>focus</code> - in HTML, there is always an \"active element\". This is the element that is currently selected. When a button is clicked, focus moves to that button. When you press the \"Tab\" key, focus will move to the next interactive element on the page.</p>\n</blockquote>\n<blockquote>\n<p>By default, the <code>body</code> tag is focused. When focus moves to an interactive element, like a form input or a link, that element gets an outline effect, to show the user which element has focus. Example is here:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  button:focus {\n    border: 2px solid royalblue;\n    background: pink;\n    color: white;\n  }\n&#x3C;/style>\n&#x3C;button>Hello&#x3C;/button>\n&#x3C;button>world&#x3C;/button>\n&#x3C;button>!&#x3C;/button>\n</code></pre>\n<blockquote>\n<p>Click on the first button and press \"Tab\". Focus moves to the next button, and it gains the focus styles. You can press \"Shift Tab\" to go back to the first button.</p>\n</blockquote>\n<blockquote>\n<p>Focus styles are important for folks who don't navigate with a pointer device (eg. a mouse, trackpad, or touch-screen). For a variety of reasons, some users exclusively use their keyboard to access the internet, and for them, the focus indicator helps them understand where they are on the page.</p>\n</blockquote>\n<blockquote>\n<p><code>checked</code> - The :checked pseudo-class only applies to checkboxes and radio buttons that are \"filled in\". Example:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  input:checked {\n  width: 24px;\n  height: 24px;\n  }\n&#x3C;/style>\n&#x3C;input type=\"checkbox\"/>check me\n</code></pre>\n<blockquote>\n<p>We can also chain multiple pseudo-classes and apply them to mulitple elemts by separating them by comma:</p>\n</blockquote>\n<pre><code>.something:focus, .something:hover {\n  /* Shared styles! */\n}\n</code></pre>\n<p><strong>Pseaudo-elements</strong></p>\n<blockquote>\n<p>Pseudo-elements are like pseudo-classes, but they don't target a specific state. Instead, they target \"sub-elements\" within an element. For example, we can style the placeholder text in a form input with ::placeholder</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;input placeholder=\"enter text\"/>\n</code></pre>\n<p>CSS:</p>\n<pre><code>input::placeholder {\n  color: goldenrod;\n}\n</code></pre>\n<blockquote>\n<p>Two of the most common pseudo-elements are ::before and ::after. These pseudo-elements are added inside the element, right before and after the element's content.</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  p::before {\n    content: '→ ';\n    color: deeppink;\n  }\n\n  p::after {\n    content: ' ←';\n    color: deeppink;\n  }\n&#x3C;/style>\n\n&#x3C;p>\n  This paragraph has little arrows!\n&#x3C;/p>\n</code></pre>\n<p><img src=\"https://i.imgur.com/u4pUZR9.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>They are like secpret spans before and after that element. We could rewrite the above example like so:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n.pseudo-pseudo {\n  color: deeppink;\n}\n&#x3C;/style>\n\n&#x3C;p>\n  &#x3C;span class=\"pseudo-pseudo\">→ &#x3C;/span>\n  This paragraph has little arrows!\n  &#x3C;span class=\"pseudo-pseudo\"> ←&#x3C;/span>\n&#x3C;/p>\n</code></pre>\n<p><strong>Media queries</strong></p>\n<blockquote>\n<p>In order to accommodate screens of different shapes and sizes, CSS features media queries, which allow us to apply different CSS in different scenarios - on different screen sizes (desktop, mobile, tablet, etc). The CSS syntax is <code>@media</code></p>\n</blockquote>\n<blockquote>\n<p>Think about <code>@media</code> as <code>if</code> statements in javascript, followed by braces with a condition inside:</p>\n</blockquote>\n<pre><code>@media (condition) { ... styles which will be applied if the condition is met ... }\n</code></pre>\n<blockquote>\n<p>Example style will be applied if the width of the screen is between = and 300px:</p>\n</blockquote>\n<pre><code>@media (max-width: 300px) {\n    .small-only {\n      color: red;\n    }\n  }\n</code></pre>\n<blockquote>\n<p>Media queries are often used when we want to hide some content and display something else:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  @media (max-width: 300px) {\n    .desktop-only {\n      display: none;\n    }\n  }\n  @media (min-width: 301px) {\n    .mobile-only {\n      display: none;\n    }\n  }\n&#x3C;/style>\n\n&#x3C;div class=\"desktop-only\">\n  I only show up on large screens.\n&#x3C;/div>\n&#x3C;div class=\"mobile-only\">\n  Meanwhile, you'll only see me on small ones.\n&#x3C;/div>\n</code></pre>\n<blockquote>\n<p><code>display: none</code> is a declaration that removes an element from the rendering process; it's as if it doesn't exist</p>\n</blockquote>\n<blockquote>\n<p><code>max-width</code> adds styles on <code>small</code> screens</p>\n</blockquote>\n<blockquote>\n<p><code>min-width</code> adds styles on <code>larger</code> ones.</p>\n</blockquote>\n<p><strong>FONTS</strong></p>\n<blockquote>\n<p>Font styles and families</p>\n</blockquote>\n<p><a href=\"https://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html\">https://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html</a></p>\n<p>Examples:</p>\n<blockquote>\n<p>Changing font family:</p>\n</blockquote>\n<pre><code>h1 {\nfont-family: Garamond;\n}\n</code></pre>\n<blockquote>\n<p>Font families come in different styles. The 3 most popular:</p>\n</blockquote>\n<ul>\n<li>Serif</li>\n<li>Sans-serif</li>\n<li>Monospace</li>\n</ul>\n<p>A “serif” is a little adornment at the edge of strokes. Serif fonts are very common in print media, but less so on the web (they tend to create a more sophisticated, aged look).</p>\n<p><img src=\"https://i.imgur.com/wcCRuBJ.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>General rules about font-families:</p>\n</blockquote>\n<blockquote>\n<p>The font specified in a stylesheet must be installed on a user’s computer in order for that font to display when a user visits the web page. The default typeface for all HTML elements is Times New Roman. It’s a good practice to limit the number of fonts used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision. When the name of a font consists of more than one word, it’s a best practice to enclose the font’s name in quotes. Example:</p>\n</blockquote>\n<pre><code>h1 {\n  font-family: \"Courier New\";\n}\n</code></pre>\n<blockquote>\n<p>We can find good font library by google: www.fonts.google.com. Where we can search for any font we like.</p>\n</blockquote>\n<blockquote>\n<p>We need to then click on the font and select which variation we like to use (can be multiple) - green arrow. Then we can see which fonts we selected by clicking on the selected families icon - purple icon. There we can find how to integrate them to your application as link tag in html (blue arrow), or even how to import them directly (to a js file):</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/Jzidzo4.png%22Photo%20by%20Addania%22\"></p>\n<blockquote>\n<p>Example of importing fonts to your html so that they can be used in your application:</p>\n</blockquote>\n<pre><code>&#x3C;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\n&#x3C;link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&#x26;display=swap\" rel=\"stylesheet\">\n</code></pre>\n<blockquote>\n<p>Changing font size:</p>\n</blockquote>\n<pre><code>p {\nfont-size: 18px;\n}\n</code></pre>\n<blockquote>\n<p>Font size can also be expressed in rem which will then scale the font size based on the default font size user chose. The number given represents how much bigger the font will be based on the defaul user selected font.</p>\n</blockquote>\n<pre><code>font-size: 1.2rem;\n</code></pre>\n<blockquote>\n<p>Changing bold (thickness or narrowness of the font) using font-weight (it can hold values bold or normal):</p>\n</blockquote>\n<pre><code>p {\nfont-weight: bold;\n}\n</code></pre>\n<p><strong>ALIGNING TEXT</strong></p>\n<blockquote>\n<p>To align text horizontally (to right, left or center) we use text-align property. It also works on images.</p>\n</blockquote>\n<pre><code>h1 {\n  text-align: right;\n}\n</code></pre>\n<p><strong>COLORS</strong></p>\n<blockquote>\n<p>Setting color of text can be done in two ways:</p>\n</blockquote>\n<p><strong>A) foreground colour</strong> for example colour of the text itself, property to do this is called <code>color</code></p>\n<p><strong>B) background colour</strong> property using <code>background-color</code></p>\n<pre><code>h1 {\n  color: red;\n  background-color: blue;\n}\n</code></pre>\n<blockquote>\n<p>Change opacity of an element. Accepts values from 0 (0% opacity) to 1 (100% opacity)</p>\n</blockquote>\n<pre><code>.overlay {\n  opacity: 0.5;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/ZrJnm95.jpg\" title=\"Photo by Daniel Frese from Pexels\"></p>\n<blockquote>\n<p>For setting colors you can use hex codes - but hex codes are not:</p>\n</blockquote>\n<pre><code>div {\n    background-color: #00bfff;\n    color: #ffffff;\n}\n</code></pre>\n<blockquote>\n<p>But there is even a better way to represent colors and that is HSB / HSL: Hue Saturation Brightness or Hue Saturation Lightness</p>\n</blockquote>\n<pre><code>.colorful-thing {\n  color: hsl(200deg 100% 50%);\n  border-bottom: 3px solid hsl(100deg 75% 50%);\n}\n</code></pre>\n<blockquote>\n<p>The best explanation of this concept is on the Photoshop color picker:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/CpQ6a4e.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p><code>Hue</code> means the color itself / the pigment. It is measured in degrees starting at 0 till 360 degrees. Representing colors from red to ... hmm ...red again :) It is the vertical color stripe in the Photoshop color picker</p>\n</blockquote>\n<blockquote>\n<p><code>Saturation</code> and <code>Brightness</code> are represented on the two-dimensional grid</p>\n</blockquote>\n<blockquote>\n<p><code>Saturation</code> changes when moving from the lef to right. Right being the most saturated. Moving left colors become more pastelly and more washed away. When reaching far left, colors are just grey, with no hue. It is represented in percentage.</p>\n</blockquote>\n<blockquote>\n<p><code>Brightness</code> changes when you move vertically from top to down. Top being light colors eventually white and down being darker colors everntually black. It is represented in percentage.</p>\n</blockquote>\n<blockquote>\n<p>Knowing this makes it pretty intuitive now how to use hsl in the CSS: Look again here:</p>\n</blockquote>\n<pre><code>.colorful-thing {\n  color: hsl(200deg 100% 50%);\n}\n</code></pre>\n<blockquote>\n<p>This color has around 200 degrees of the hue, which is blue, 100% of saturation - so full color, no washing away, no greying, 50% of its brightness.</p>\n</blockquote>\n<blockquote>\n<p>If you want your color to be semi-transparent, you can pass a fourth value for the <code>alpha</code> channel. This is a unitless number between 0 (fully transparent) and 1 (the default, fully opaque)</p>\n</blockquote>\n<pre><code> .first.box {\n    background-color: hsl(340deg 100% 50% / 1);\n  }\n  .second.box {\n    background-color: hsl(340deg 100% 50% / 0.75);\n  }\n</code></pre>\n<blockquote>\n<p>A lower <code>alpha</code> number means that the pixels are transparent.</p>\n</blockquote>\n<blockquote>\n<p>This \"version\" of HSL color is part of a 2016 revision to how colors work in CSS. It enjoys wide browser support, but will not work in Internet Explorer. If your project supports IE, you'll need to use a slightly different syntax:</p>\n</blockquote>\n<pre><code>.colorful-thing {\n  color: hsl(200deg, 100%, 50%);\n  background-color: hsla(200deg, 100%, 50%, 0.2);\n}\n</code></pre>\n<blockquote>\n<p>Instead of being space-separated, the values inside the hsl() function are comma-separated. If you'd like the color to be transparent, you'll need to use the hsla() function instead of the hsl() function.</p>\n</blockquote>\n<blockquote>\n<p>You can play online with hsl here: <a href=\"https://hslpicker.com/#0af\">https://hslpicker.com/#0af</a></p>\n</blockquote>\n<p><strong>Units</strong></p>\n<blockquote>\n<p>Some property values use units. There are couple of units:</p>\n</blockquote>\n<ul>\n<li>pixels</li>\n<li>ems</li>\n<li>rems</li>\n<li>percetages</li>\n</ul>\n<blockquote>\n<p>Most popular unit is a <code>pixel</code> for anything size-related:</p>\n</blockquote>\n<pre><code>.box {\n  width: 1000px;\n  margin-top: 32px;\n  padding: 8px;\n  font-size: 16px;\n}\n</code></pre>\n<blockquote>\n<p><code>Em</code> is a relative unit, equal to the font size of the current element. If a heading has a font-size of 24px, and we give it a bottom padding of 2em, we can expect that the element will have 48px of cushion underneath it (2 × 24px)</p>\n</blockquote>\n<pre><code>p {\n  font-size: 12px;\n  padding-bottom: 2em;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/ywjiFBY.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Using em means that a component's UI will change depending on the font size of the container it's placed within. This can be useful, but more often than not, it's a nuisance.</p>\n</blockquote>\n<blockquote>\n<p><code>Rems</code> are more useful. The <code>rem</code> unit is quite a lot like the <code>em</code> unit, with one crucial difference: it's always relative to the root element, the <code>html</code> tag.</p>\n</blockquote>\n<blockquote>\n<p>All of the <code>rems</code> in your app will be taking their cues from that root HTML tag. By default, the HTML tag has a font size of 16px, so 1rem will be equal to 16px.</p>\n</blockquote>\n<pre><code>html {\n  font-size: 16px;\n}\nh1 {\n  font-size: 2rem;\n  margin: 0;\n}\nh2 {\n  font-size: 1.25rem;\n  margin-bottom: 1.5rem;\n  color: gray;\n}\np {\n  font-size: 1rem;\n}\n</code></pre>\n<blockquote>\n<p>Changing all the text scales accordingly, when you change the root font size? That's why people like the rem unit. No matter where an element is in the DOM tree, the rem is consistent. It behaves consistently and predictably, like pixels, but it respects user preferences when it comes to increasing/decreasing default font sizes.</p>\n</blockquote>\n<blockquote>\n<p>Here is the comparison of the text between html tag having font size 16px and when it has 12px:</p>\n</blockquote>\n<pre><code>html {\n  font-size: 12px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/cPxpZVI.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>But in real application we DO NOT want to set pixel size for the html tag becasue it would override user default setting. So DO NOT set html tag font size.</p>\n</blockquote>\n<blockquote>\n<p>The <code>percentage</code> unit is often used with width/height, as a way to consume a portion of the available space.</p>\n</blockquote>\n<pre><code>&#x3C;div class=\"box\">\n  &#x3C;div class=\"child\">&#x3C;/div>\n&#x3C;/div>\n\n.box {\n  width: 250px;\n  height: 250px;\n  background-color: pink;\n}\n.child {\n  width: 50%;\n  height: 75%;\n  background-color: black;\n}\n</code></pre>\n<blockquote>\n<p>How to use units - best practises:</p>\n</blockquote>\n<ul>\n<li>For typography, use rem, because it has important accessibility benefits.</li>\n<li>When it comes to properties that relate to the box model — padding, border, margin — use pixels. It's more intuitive than rem, and there isn't a clear accessibility win.</li>\n<li>For width/height, it'll depend on whether we want the element to be a fixed size, or a relative size. We might want one div to always be 250px wide, while another one should be 50% of the available space.</li>\n<li>For color, it is good to use hsl.</li>\n<li>Use em for the rare cases when you want one property to scale directly with font size.</li>\n</ul>\n<p><strong>IMAGES</strong></p>\n<blockquote>\n<p>Adding image as a background to an element. URL can be link to exterenal site or file path within the project folder</p>\n</blockquote>\n<pre><code>.main-banner {\n  background-image: url(\"https://www.example.com/image.jpg\");\n}\n\n.main-banner {\n  background-image: url(\"images/mountains.jpg\");\n}\n</code></pre>\n<p><strong>TEXT TRANSFORMATIONS</strong></p>\n<blockquote>\n<p>Transforming whole text to uppercase</p>\n</blockquote>\n<pre><code>h1{\ntext-transform: uppercase;\n}\n</code></pre>\n<blockquote>\n<p>Transforming first leter to uppercase</p>\n</blockquote>\n<pre><code>h3 {\ntext-transform: capitalize;\n}\n</code></pre>\n<blockquote>\n<p>Text cursive. Note, this does not mean italics. Cursive only emulates hand-writing</p>\n</blockquote>\n<pre><code>.cursive {\nfont-family: cursive;\n}\n</code></pre>\n<p><strong>TEXT SPACING</strong></p>\n<blockquote>\n<p>We can tweak the horizontal gap between characters using the letter-spacing property.</p>\n</blockquote>\n<pre><code>h3 {\n  letter-spacing: 3px;\n}\n</code></pre>\n<blockquote>\n<p>We can tweak the vertical distance between lines using the <code>line-height</code> property. <code>line-height</code> is a bit of an odd duck because it takes a unitless value. This works as a ratio: <code>line-height: 2</code> means that the lines should be twice as tall as a different element with line-height: 1 - for example often with respect to our font size.</p>\n</blockquote>\n<pre><code>h3 {\n  line-height: 2;\n}\n</code></pre>\n<p><strong>BOX MODEL</strong></p>\n<blockquote>\n<p>The Box model includes the content area’s size (width and height) and the element’s padding, border, and margin. The properties include:</p>\n</blockquote>\n<p><strong>Width and height</strong> — specifies the width and height of the content area.</p>\n<p><strong>Padding</strong> — specifies the amount of space between the content area and the border.</p>\n<p><strong>Border</strong> — specifies the thickness and style of the border surrounding the content area and padding.</p>\n<p><strong>Margin</strong> — specifies the amount of space between the border and the outside edge of the element.</p>\n<p><strong>WIDTH AND HEIGHT</strong></p>\n<blockquote>\n<p>To set specific width and height of an element. It can be set in pixels or in percentages:</p>\n</blockquote>\n<pre><code>p {\n  height: 80px;\n  width: 240px;\n}\n</code></pre>\n<blockquote>\n<p>Minimum width is minimum width the element will shrink to</p>\n</blockquote>\n<pre><code>min-width: 50px;\n</code></pre>\n<blockquote>\n<p>Maximum width is maximum width the element will expand to</p>\n</blockquote>\n<pre><code>max-width: 50px;\n</code></pre>\n<blockquote>\n<p>Minimum heigth is minimum heigth the element will shrink to</p>\n</blockquote>\n<pre><code>min-heigth: 30px;\n</code></pre>\n<blockquote>\n<p>Maximum heigth is maximum heigth the element will expand to</p>\n</blockquote>\n<pre><code>>max-heigth: 30px;\n</code></pre>\n<p><strong>BORDER</strong></p>\n<blockquote>\n<p>A border is a line what surrounds an element, like a frame around a painting. Borders can be set with a specific width, style, and color.</p>\n</blockquote>\n<p><strong>border-width</strong> — The thickness of the border. A border’s thickness can be set in pixels, ems, rems or with one of the following keywords: thin, medium, or thick.</p>\n<p><strong>border-style</strong> — The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, dashed, double, groove, ridge, inset, outset, mixed and solid.</p>\n<p><img src=\"https://i.imgur.com/posMCos.png\" title=\"Photo by Addania\"></p>\n<p><strong>border-color</strong> — The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.</p>\n<blockquote>\n<p>All these properties can be written as a shorthand:</p>\n</blockquote>\n<pre><code>p {\n  border: 3px solid coral;\n}\n</code></pre>\n<blockquote>\n<p>Only <code>border-style</code> filed is required in the above shorthand:</p>\n</blockquote>\n<pre><code>.good {\n  border: solid;\n}\n</code></pre>\n<blockquote>\n<p>This will produce a black, 3px-thick border</p>\n</blockquote>\n<blockquote>\n<p>Following code is invalid. It will not work because it lacks style:</p>\n</blockquote>\n<pre><code>.not-good {\n  border: 2px pink;\n}\n</code></pre>\n<blockquote>\n<p>If we don't specify a border color, it'll use the font's color by default. By font-color property <code>color</code> is meant.</p>\n</blockquote>\n<blockquote>\n<p>If you want to specify this behaviour explicitly, it can be done with the special <code>currentColor</code> keyword. <code>currentColor</code> is always a reference to the element's derived text color (whether set explicitly or inherited), and it can be used anywhere a color might be used:</p>\n</blockquote>\n<pre><code>.box {\n  color: hotpink;\n  border: 1px solid currentColor;\n  box-shadow: 2px 2px 2px currentColor;\n}\n</code></pre>\n<blockquote>\n<p>As we saw we can defined mixed border-styles:</p>\n</blockquote>\n<pre><code>border-style: dashed dotted;\n</code></pre>\n<p><img src=\"https://i.imgur.com/MBNlZ0G.png\" title=\"Photo by Addania\"></p>\n<p><strong>Border radius</strong></p>\n<blockquote>\n<p>The CSS Working Group has published a list of mistakes they've made with the CSS language. One of these mistakes is listed: \"border-radius should have been corner-radius\"</p>\n</blockquote>\n<blockquote>\n<p>It's not hard to understand why. The border-radius property rounds an element (content) even if it has no border!</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/c2rGi84.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Border with rounded corners</p>\n</blockquote>\n<pre><code>div.container {\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 5px;\n}\n</code></pre>\n<blockquote>\n<p>Perfect circle border - set the radius equal to height of the box or 50%</p>\n</blockquote>\n<pre><code>div.container {\n  height: 60px;\n  width: 60px;\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 60px;\n}\n</code></pre>\n<p>or equivalently:</p>\n<pre><code>div.container {\n  height: 60px;\n  width: 60px;\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 50%;\n}\n</code></pre>\n<blockquote>\n<p>Border radius can be also defind by 4 values. The first one is the top left corner, the second value is top right corner, the third is the bottom right corner and finally the fourth value is the bottom left corner:</p>\n</blockquote>\n<pre><code>border-radius: 10px 10px 10px 10px;\n</code></pre>\n<blockquote>\n<p>We can decide to only set 3 or less of the values for creative shapes:</p>\n</blockquote>\n<p><strong>Teardrop shape</strong></p>\n<pre><code>border-radius: 0px 10px 10px 10px;\n</code></pre>\n<p><strong>Palm leaf shape</strong> where width of image is 100px</p>\n<pre><code>border-radius: 100px 0px 100px 0px;\n</code></pre>\n<p><strong>Quarter circle</strong> where width and height of the image is 100px:</p>\n<pre><code>border-radius: 100px 0px 0px 0px;\n</code></pre>\n<p><strong>D-shape</strong></p>\n<pre><code>border-radius: 10px 40px 40px 10px;\n</code></pre>\n<blockquote>\n<p>All these 4 values have their individual properties:</p>\n</blockquote>\n<pre><code>border-top-left-radius: 8px;\nborder-top-right-radius: 16px;\nborder-bottom-right-radius: 32px;\nborder-bottom-left-radius: 64px;\n</code></pre>\n<p><strong>OUTLINE</strong></p>\n<blockquote>\n<p>What is difference between border and outline? In some aspects, they're similar! They both add a visual edge to a given element.</p>\n</blockquote>\n<blockquote>\n<p>The core difference is that outline doesn't affect layout. Outline is kinda more like box-shadow; it's a cosmetic effect draped over an element, without nudging it around, or changing its size.</p>\n</blockquote>\n<blockquote>\n<p>It has similar properties like border:</p>\n</blockquote>\n<pre><code>outline-width\noutline-color\noutline-style\n</code></pre>\n<blockquote>\n<p>Outline is stacked outside of the border and can be used as second border for visual effect.</p>\n</blockquote>\n<pre><code>border: 4px solid darkviolet;\noutline: 4px solid deeppink;\n</code></pre>\n<blockquote>\n<p>There is no outline-radius! (Only in Firefox)</p>\n</blockquote>\n<blockquote>\n<p>Outlines have a special <code>outline-offset</code> property. It allows you to add a bit of a gap between the element and its outline.</p>\n</blockquote>\n<pre><code>outline-offset: 4px;\n</code></pre>\n<blockquote>\n<p>We should not set:</p>\n</blockquote>\n<pre><code>button {\n  outline: none;\n}\n</code></pre>\n<blockquote>\n<p>This would break navigation for keyboard users; that ring is required for them to know which element is currently focused!</p>\n</blockquote>\n<blockquote>\n<p>The only exception is if we provide a suitable alternative. For example:</p>\n</blockquote>\n<pre><code>button {\n  outline: none;\n}\nbutton:focus {\n  background: navy;\n  color: white;\n}\n</code></pre>\n<p><strong>PADDING</strong></p>\n<blockquote>\n<p>Padding: space between content and border. It is an inner space.</p>\n</blockquote>\n<blockquote>\n<p>If we have some element with padding, and we set its background to red, also padding will have red background</p>\n</blockquote>\n<pre><code>.someElement {\n  padding: 48px;\n  background-color: \"tomato\";\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/2BKHRCL.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Padding can have properties:</p>\n</blockquote>\n<pre><code>padding-top: 30px;\npadding-right: 15px;\npadding-bottom: 30px;\npadding-left: 15px;\n</code></pre>\n<blockquote>\n<p>The same as obve can be re-written using logical properties (which are applicable to also languages which are written right to left, or vertically)</p>\n</blockquote>\n<pre><code>  padding-block-start: 20px;\n  padding-block-end: 40px;\n  padding-inline-start: 60px;\n  padding-inline-end: 80px;\n</code></pre>\n<blockquote>\n<p>Block means vertically on top of each other and inline horizontally next to each other</p>\n</blockquote>\n<blockquote>\n<p>Padding, like other properties of box model, can be expressed in px, em or rem. Pixels are the most common. Using percantages is possible but not recommended because it yields unexpected results.</p>\n</blockquote>\n<blockquote>\n<p>Padding: In order to have same padding on all four sides use:</p>\n</blockquote>\n<pre><code>padding: 10px;\n</code></pre>\n<blockquote>\n<p>Padding: In order to specify exactly how much padding there should be on each side of the content in a single declaration. The values go in clock-wise direction: padding on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.</p>\n</blockquote>\n<pre><code>padding: 10px 15px 20px 30px;\n</code></pre>\n<blockquote>\n<p>Padding: If the top and bottom values for padding will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut. First value defines padding top and bottom to be 10px, padding left and right to be 15px.</p>\n</blockquote>\n<pre><code>padding: 10px 15px;\n</code></pre>\n<blockquote>\n<p>Padding: Top and Bottom paddings (vertical paddings) <strong>DO NOT</strong> collapse!</p>\n</blockquote>\n<blockquote>\n<p>Padding: Left and Right paddings (horizontal paddings) <strong>DO NOT</strong> collapse! And are always added together.</p>\n</blockquote>\n<blockquote>\n<p>If we want a padding of 48px everywhere except for the bottom, we can write it in 2 ways:</p>\n</blockquote>\n<pre><code>.box {\n  padding: 48px 48px 0 48px;\n}\n</code></pre>\n<blockquote>\n<p>Or</p>\n</blockquote>\n<pre><code>.box {\n  padding: 48px;\n  padding-bottom: 0;\n}\n</code></pre>\n<blockquote>\n<p><code>padding-bottom</code> overwrites <code>padding</code> because if comes second in the css file</p>\n</blockquote>\n<p><strong>MARGIN</strong></p>\n<blockquote>\n<p>Margin increases the space around an element, giving it some breathing room. As we saw earlier, margin is \"personal space\". Margin is the space outside of the border.</p>\n</blockquote>\n<blockquote>\n<p>Margin is mysterious. It can do wacky things, like pull an element outside a parent, or center itself within its container.</p>\n</blockquote>\n<blockquote>\n<p>It has following values:</p>\n</blockquote>\n<pre><code>margin-top: 10px;\nmargin-right: 15px;\nmargin-bottom: 10px;\nmargin-left: 30px;\n</code></pre>\n<blockquote>\n<p>Also here are logical equivalents for languages which are not left to right:</p>\n</blockquote>\n<pre><code>  margin-block-start: 20px;\n  margin-block-end: 40px;\n  margin-inline-start: 60px;\n  margin-inline-end: 80px;\n</code></pre>\n<blockquote>\n<p>If you want to have same margin on all four sides use:</p>\n</blockquote>\n<pre><code>margin: 10px;\n</code></pre>\n<blockquote>\n<p>In order to specify exactly how much margin there should be on each side of the content in a single declaration. The values go in clock-wise direction: margin on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.</p>\n</blockquote>\n<pre><code>margin: 10px 15px 20px 30px;\n</code></pre>\n<blockquote>\n<p>If the top and bottom values for margin will equal each other, and the left and right values for margin will also equal each other, you can use the following shortcut. First value defines margin top and bottom to be 10px, margin left and right to be 15px.</p>\n</blockquote>\n<pre><code>margin: 10px 15px;\n</code></pre>\n<blockquote>\n<p>Padding and border only allow positive numbers including 0. But margins can be negative!! Negative margins can pull element outside of the parent.</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;main>\n  &#x3C;div class=\"pink-box\">&#x3C;/div>\n&#x3C;/main>\n</code></pre>\n<p>CSS:</p>\n<pre><code>main {\n  width: 200px;\n  height: 200px;\n  border: 3px solid;\n}\n\n.pink-box {\n  width: 50%;\n  height: 50%;\n  border: 3px solid deeppink;\n  background: white;\n  margin-top: -32px;\n  margin-left: -32px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/uQIeFSP.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>What if we wanted to do something super cool? Like a heading which peeks out of its container? Like this:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/GL1kzFM.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>This is how you could achieve it.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code> &#x3C;body>\n    &#x3C;div class=\"card\">\n      &#x3C;div class=\"header\">HEADER PEEKING OUT&#x3C;/div>\n      &#x3C;p>\n        Otters have long, slim bodies and relatively short limbs. Their most\n        striking anatomical features are the powerful webbed feet used to swim,\n        and their seal-like abilities holding breath underwater.\n      &#x3C;/p>\n    &#x3C;/div>\n  &#x3C;/body>\n</code></pre>\n<p>CSS</p>\n<pre><code>body {\n  background-color: #222;\n  box-sizing: border-box;\n  margin: 50px;\n}\n\n.card {\n  background-color: white;\n  border-radius: 10px;\n  padding: 25px;\n}\n\n.header {\n  background-color: deeppink;\n  font-size: 30px;\n  text-align: center;\n  font-weight: bold;\n  border-radius: 10px;\n  margin-top: -40px;\n  padding: 25px;\n}\n</code></pre>\n<blockquote>\n<p>Please note, that in case this is not working for you, and instead of re-positioning the header, you decrease the margin of entire card - try to add some padding to the container where the header is positioned. Alternative increase the negative margin (it needs to be more than for example padding of the card)</p>\n</blockquote>\n<blockquote>\n<p>Negative margin can also pull a sibling closer:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;main>\n  &#x3C;div class=\"pink-box\">&#x3C;/div>\n  &#x3C;div class=\"neighbor\">&#x3C;/div>\n&#x3C;/main>\n</code></pre>\n<p>CSS</p>\n<pre><code>main {\n  width: 200px;\n  height: 200px;\n  border: 3px solid;\n}\n\n.pink-box {\n  width: 50%;\n  height: 50%;\n  border: 3px solid deeppink;\n  background: white;\n  margin-bottom: -32px;\n}\n\n.neighbor {\n  width: 50%;\n  height: 50%;\n  background: silver;\n  margin-left: 16px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/1ziZlPf.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>If we apply negative margin to the first box, it will influence all its siblings position!!!</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;main>\n  &#x3C;div class=\"box one\">&#x3C;/div>\n  &#x3C;div class=\"box two\">&#x3C;/div>\n  &#x3C;div class=\"box three\">&#x3C;/div>\n&#x3C;/main>\n</code></pre>\n<p>CSS</p>\n<pre><code>main {\n  width: 200px;\n  height: 200px;\n  border: 3px solid silver;\n}\n\n.box {\n  width: 25%;\n  height: 25%;\n  border: 3px solid;\n  background: white;\n}\n\n.box.one {\n  border-color: deeppink;\n  margin-top: -24px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/NHHpHPI.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>The interesting thing is those two black boxes: they \"follow\" the deep pink box up. When we use margin to tweak an element's position, we might also be tweaking every subsequent element as well. This is different from other methods of shifting an element's position, like using <code>transform: translate</code></p>\n</blockquote>\n<blockquote>\n<p>There is one last trick a negative margin can do. Imagine you have a card which has a padding. So everything inside of it (all its children) will have this padding.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/BAKi7AA.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>What if we wanted to create one exception for the image which will ignore the padding and will extend from one edge to the other of the card? Something like this?</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/esazm7o.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>We can achieving it by wrapping the image in a wrapper and applying negative margin to the right and left both!! Please note: images are \"replaced elements\". They do not reside in the DOM, they are imported. FOr that reason, any manipulation and layouting with images should be done using wrappers around them. Not with images directly.</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;div class=\"card\">\n  &#x3C;p>\n    Otters have long, slim bodies and relatively short limbs. Their most striking anatomical features are the powerful webbed feet used to swim, and their seal-like abilities holding breath underwater.\n  &#x3C;/p>\n  &#x3C;div class=\"wrapper\">\n  &#x3C;img alt=\"A cute otter in water\" src=\"/course-materials/otter.jpg\" />\n  &#x3C;/div>\n  &#x3C;p>\n    More importantly, otters are glorious water dogs, playful and curious. The otter, no other, is the best animal.\n  &#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<p>CSS</p>\n<pre><code>body {\n  background: #222;\n  padding: 32px;\n}\n\n.card {\n  background-color: white;\n  padding: 32px;\n  border-radius: 8px;\n}\n\n.wrapper {\n  margin-left: -32px;\n  margin-right: -32px;\n}\n\nimg {\n  display: block;\n  width: 100%;\n\n}\n\np, img {\n  margin-bottom: 16px;\n}\n</code></pre>\n<blockquote>\n<p>Nice article about negative margins is here: <a href=\"https://www.quirksmode.org/blog/archives/2020/02/negative_margin.html\">https://www.quirksmode.org/blog/archives/2020/02/negative_margin.html</a></p>\n</blockquote>\n<blockquote>\n<p>Margin is really about changing the gap between elements.</p>\n</blockquote>\n<blockquote>\n<p>Margin property also allows to position an element in the center of a parent element. There are 2 requirements in order to do it:</p>\n</blockquote>\n<p><strong>1/</strong> top and bottom margin is defined and then followed by word auto, meaning right and left margin will be done automatically based on the maximum available horizontal space of the element and the container in which we want to center it</p>\n<p><strong>2/</strong> width of the element needs to be defined and needs to be smaller than the width of the container where the element resides. Why? Block elements will naturally grow to fill the available horizontal space, so we need to give our element a width in order to center it.</p>\n<pre><code>div {\nwidth: 200px\nmargin: 0px auto;\n}\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;main>\n  &#x3C;section class=\"content\">\n    Hello World\n  &#x3C;/section>\n&#x3C;/main>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.content {\n  width: 50%;\n  margin-left: auto;\n  margin-right: auto;\n  background: palevioletred;\n  padding: 16px;\n}\n\nmain {\n  width: 100%;\n  height: 200px;\n  border: 3px solid silver;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/IsCaFWd.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>This only works for horizontal margin. Setting top/bottom margin to auto is equivalent to setting it to 0px.</p>\n</blockquote>\n<blockquote>\n<p>There are other ways how to center items in a container with modern layout rendering modes like Flexbox or Grid.</p>\n</blockquote>\n<blockquote>\n<p>Important difference is that margin auto is used on the single child element selectively!</p>\n</blockquote>\n<blockquote>\n<p>Flexbox and Grid are both powerful tools for managing layout. But their properties are applied to a container, and affect all children.</p>\n</blockquote>\n<blockquote>\n<p>Margin: Top and Bottom margin is also called: <strong>Vertical margin</strong>. Left and Right margin is called <strong>Horizontal Margin</strong></p>\n</blockquote>\n<blockquote>\n<p>Margin: Top and Bottom margin (vertical margins) <strong>COLLAPSE</strong>! The larger of the two vertical margins sets the distance between adjacent elements. For example: if top element has margin bottom of 20px and bottom element margin top of 30px, then the effective distance between these 2 elements is 30px.</p>\n</blockquote>\n<pre><code>#img-one {\n  margin-bottom: 30px;\n}\n\n#img-two {\n  margin-top: 20px;\n}\n</code></pre>\n<blockquote>\n<p>Margin: Left and Right margins (horizontal margins) <strong>DO NOT</strong> collapse! And are always added together. If left element has margin right of 10px and right element marin left of 10 px. Then the effective distance of the elements is 20px.</p>\n</blockquote>\n<pre><code>#img-one {\n  margin-right: 10px;\n}\n\n#img-two {\n  margin-left: 10px;\n}\n</code></pre>\n<p><strong>OVERFLOW</strong></p>\n<blockquote>\n<p>The overflow property controls what happens to content which is larger than its container (box). In order words content that spills, or overflows, outside its box. The parent container can be set to:</p>\n</blockquote>\n<ul>\n<li>hidden - any content that overflows will be hidden from view</li>\n<li>scroll - a scrollbar is added to the element’s box so that the rest of the content can be viewed by scrolling.</li>\n<li>visible - the overflow content will be displayed outside of the containing element. This is the default value.</li>\n</ul>\n<p><strong>LAYOUTS</strong></p>\n<blockquote>\n<p>In CSS we have different layouting modes. Here are examples: Flow, Flexible Box (FlexBox), Positioned layout, Grid (CSS Grid), etc.</p>\n</blockquote>\n<blockquote>\n<p>The default one is FLOW. Plain HTML document without CSS uses FLOW exclusively.</p>\n</blockquote>\n<p><strong>FLOW LAYOUT</strong></p>\n<blockquote>\n<p>In Flow layout, every element will use a display value of either <code>inline</code>, <code>block</code>, or <code>inline-block</code>. This value governs how the Flow layout algorithm will place the element. The default value depends on the tag; <code>div</code>, <code>section</code>, <code>nav</code>, <code>header</code>, <code>footer</code>, <code>article</code>, <code>paragraph</code>, <code>heading</code>, <code>form</code>, <code>blockquote</code> are block by default, while <code>spans</code> , <code>strong</code>, <code>a</code> are inline.</p>\n</blockquote>\n<blockquote>\n<p>In flow layout, block elements stack in the block direction, and inline elements stack in the inline direction.</p>\n</blockquote>\n<p><strong>Greedy block elements</strong></p>\n<blockquote>\n<p>When you place a block element to the page, its content box consumes hungrily all available horizontal space!</p>\n</blockquote>\n<blockquote>\n<p>A heading might only need 150px to contain its letters, but if you put it in an 800px container, it will consume 800px of width for its content.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/TZFFgjG.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Even if we shrink its content, so that it only uses so much space that it needs with width: fit-content, it will still not share its inline space with another element - instead margin will fill out the remaining horizontal space:\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;h2>\n  Hello World\n&#x3C;/h2>\n&#x3C;div class=\"red-box\">&#x3C;/div>\n&#x3C;h2>\n  Hello World\n&#x3C;/h2>\n&#x3C;div class=\"red-box\">&#x3C;/div>\n</code></pre>\n<p>CSS</p>\n<pre><code>h2 {\n  width: -moz-fit-content;\n  width: fit-content;\n  border: 2px dotted;\n}\n\n.red-box {\n  width: 50px;\n  height: 25px;\n  background: red;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/RbTY7cp.png\" title=\"Photo by Addania\"></p>\n<p><strong>Polite inline elements</strong></p>\n<blockquote>\n<p>These are polite guys who do not want to make a fuss. They go with the flow. They are rendered where they are. Lots of CSS properties do not work with inline elemets: adjust the positioning or changing its size. FOllowing will not have any effect:</p>\n</blockquote>\n<pre><code>strong {\n  height: 2em;\n  width: 300px;\n  margin-top: 300px;\n  margin-bottom: 300px;\n}\n</code></pre>\n<blockquote>\n<p>Inline elements are like <code>go-with-the-flow-type</code> folks. They don't want to inconvenience anyone by pushing any boundaries. You can shift things in the inline direction with margin-left and margin-right, but you can't change its width or height.</p>\n</blockquote>\n<blockquote>\n<p>The exception are <code>replaced</code> elements also called <code>foreign</code> objects:</p>\n</blockquote>\n<ul>\n<li><code>&#x3C;img /></code></li>\n<li><code>&#x3C;video /></code></li>\n<li><code>&#x3C;canvas /></code></li>\n</ul>\n<blockquote>\n<p>These replaced elements are technically inline but they are special :) They can affect block layout. We can set explicit dimensions or add some magin-top.</p>\n</blockquote>\n<blockquote>\n<p>How to reconcile this? There is a trick. Try to pretend that it's a foreign object within an inline wrapper. When you pass it a width or height, you're applying those properties to the foreign object. The inline wrapper still goes with the flow.</p>\n</blockquote>\n<blockquote>\n<p>Another exception is a <code>button</code> tag. They are technically inline, but can be given be given width and height.</p>\n</blockquote>\n<p><strong>Magic space around inline elements</strong></p>\n<blockquote>\n<p>Imagine you have an image in a div:</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;div>\n    &#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\">\n&#x3C;/div>\n</code></pre>\n<p>CSS</p>\n<pre><code>img {\n  width: 300px;\n}\n</code></pre>\n<blockquote>\n<p>When you inpect the height of the image it will be: 132 px</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/aTBTWuu.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>When you inpect the height of the image it will be: 136.13 px</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/guqtUjm.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Why is that? Why is there 6px difference in height? It's neither a padding, border or a margin. Reason is that the inline elements are treated like typography and there is some space reserved between lines, because we usually do not want text to be cramped at each other.</p>\n</blockquote>\n<blockquote>\n<p>We can fix it with setting <code>display: block</code> to the image or add <code>line-height: 0</code> to the wrapping div.</p>\n</blockquote>\n<blockquote>\n<p>Now let's place 3 images nex to each other - they are all inline, so shoudl be placed next to each other.</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>    &#x3C;div>\n      &#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\n      &#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\n      &#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\n    &#x3C;/div>\n</code></pre>\n<blockquote>\n<p>You will notice there is space between them. 😮</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/b1qAoCs.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>This is a whitespace between elements! Surprisingly, if we squish our HTML so that there are no newlines or whitespace characters between images, this problem goes away:</p>\n</blockquote>\n<p>HTML</p>\n<pre><code class=\"language-<div>\">      &#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />&#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />&#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\n    &#x3C;/div>\n</code></pre>\n<p><img src=\"https://i.imgur.com/5qE2UiS.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>This happens because HTML is <code>space-sensitive</code>, at least to an extent. The browser can't tell the difference between whitespace added to separate words in a paragraph, and whitespace added to indent our HTML and keep it readable.</p>\n</blockquote>\n<blockquote>\n<p>How do we solve this problem? There are some ideas on CSS Tricks: <a href=\"https://css-tricks.com/fighting-the-space-between-inline-block-elements/\">https://css-tricks.com/fighting-the-space-between-inline-block-elements/</a>. But this doesn't come up a ton these days. In most realistic scenarios, we'd use flexbox or floats, and neither of those rendering modes suffer from this problem.</p>\n</blockquote>\n<p><strong>Inline elements can wrap</strong></p>\n<blockquote>\n<p>Inline elements can wrap. Which is also one of their trick - compared to block elements.</p>\n</blockquote>\n<blockquote>\n<p>Therefore they can create other shapes than rectangles:</p>\n</blockquote>\n<pre><code>&#x3C;p>\n  This is a paragraph with &#x3C;strong>some very bolded words in it&#x3C;/strong>.\n&#x3C;/p>\n</code></pre>\n<p><img src=\"https://i.imgur.com/3oBAWqY.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>It's worth noting that it's still considered \"one shape\". If we add a border:</p>\n</blockquote>\n<pre><code>strong {\n  border: 2px solid;\n}\n</code></pre>\n<blockquote>\n<p>...we can see that we don't get 2 discrete rectangles, but rather a single rectangle cut in half and repositioned:</p>\n</blockquote>\n<blockquote>\n<p>This is also a reason why some preperties do not work on them. Like vertical margins.</p>\n</blockquote>\n<blockquote>\n<p>Other properties like horizontal padding leads to unexpected results. Let's add some padding left and right to the wrapped text in the paragraph.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;p>\n  &#x3C;strong>\n    These words are broken up across many lines.\n  &#x3C;/strong>\n&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>strong {\n  padding-left: 8px;\n  padding-right: 8px;\n  background: peachpuff;\n}\n\np {\n  max-width: 125px;\n}\n</code></pre>\n<blockquote>\n<p>Result is unexpected. Padding is only applied to the tips - very beginning of the text and at the very end (last line - end of the text)</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/RrMA6bu.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>If we want to change this behaviour and applie this padding to each individual line, then we can do a black magic trick:</p>\n</blockquote>\n<pre><code>-webkit-box-decoration-break: clone;\nbox-decoration-break: clone;\n</code></pre>\n<p><img src=\"https://i.imgur.com/aOMZsoJ.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p><code>box-decoration-break</code> accepts two values: <code>slice</code> (default)and <code>clone</code>.</p>\n</blockquote>\n<blockquote>\n<p><code>slice</code> acts like a sushi roll being chopped. It's not a bunch of individual boxes, it's 1 long box, sliced into bits.</p>\n</blockquote>\n<blockquote>\n<p><code>clone</code> is interesting: it allows us to treat each segment as its own box, and copy the styles to each one. Instead of 1 long box, we have 4 boxes, each with the same styles.</p>\n</blockquote>\n<p><strong>Mutant inline-block</strong></p>\n<blockquote>\n<p><code>display: inline-block</code> is a weird fella. It is a combination of block and inline display.</p>\n</blockquote>\n<blockquote>\n<p>Essentially, inline-block allows you to drop a block element into an inline context. It's a block in inline's clothing. it's an element that internally acts like a block element, but externally acts like an inline element. The parent container will treat it as an inline element, since it's external. But the element itself can be styled like a block.</p>\n</blockquote>\n<blockquote>\n<p>This means that inline-block elements will go with the flow, but we will be able to apply block properties on it: like width, height, vertical margins, on hover events etc.</p>\n</blockquote>\n<blockquote>\n<p>Cute example is:</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;p>\n  &#x3C;strong>Warning:&#x3C;/strong> Alpaca may bite.\n&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>strong {\n  display: inline-block;\n  color: white;\n  background-color: red;\n  width: 100px;\n  text-align: center;\n}\n\nstrong:hover {\n  transform: scale(1.2);\n}\n</code></pre>\n<blockquote>\n<p>We've effectively turned our strong element into a block element, as far as its own CSS declarations are concerned. Everything between the four corners of the element is block in nature. But from the paragraph's perspective, it's an inline element. It lays it out as an inline element, in the inline direction beside the text.</p>\n</blockquote>\n<blockquote>\n<p>Disadvantage of inline-block elements is that they do not wrap 😥</p>\n</blockquote>\n<p><strong>WIDTH ALGORITHMS</strong></p>\n<blockquote>\n<p>Block elements have default width of <code>auto</code>. They grow to consume (100% of parent content width - child margins)</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;body>\n &#x3C;h1>\n  Hello World\n &#x3C;/h1>\n&#x3C;/body>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\n  margin: 0 16px;\n  background-color: chartreuse;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/tN9jXMu.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>If we set the width of a block element to 100% the result is surprising. It will grow outside of the frame because of the 2*16px margin</p>\n</blockquote>\n<blockquote>\n<p>Reason is that 100% with means 100% of the parent content tag under all circumstances. If body is 400px wide, then also h1 will be 400px wide. But because we have 32px margin, it will grow out of the frame.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/6ZM3s85.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Therefore again, block elements have default with <code>auto</code> and not <code>100%</code>. It's a subtle but important distinction: by default, block elements have dynamic sizing. They're context-aware.</p>\n</blockquote>\n<blockquote>\n<p>Broadly speaking, there are two kinds of values we can specify for width:</p>\n</blockquote>\n<ul>\n<li>Measurements (100%, 200px, 5rem)</li>\n<li>Keywords (auto, fit-content)</li>\n</ul>\n<blockquote>\n<p>Measurement-based values are either completely explicit (eg. 200px), or relative to the parent's available space (eg. 50%).</p>\n</blockquote>\n<blockquote>\n<p>Keywords, on the other hand, let us specify different sorts of behaviours depending on the context.</p>\n</blockquote>\n<blockquote>\n<p>Some of the keywords:</p>\n</blockquote>\n<blockquote>\n<p><code>auto</code> - allow to consume as much space as available given contraints (parent content size, margins, etc)</p>\n</blockquote>\n<blockquote>\n<p><code>min-content</code> - is an intrinsic value - it chooses the smallest available space <strong>based on the element itself / elements' children</strong>! It is different from <code>auto</code> or <code>measurements</code> which are <strong>extrinsic</strong> and <strong>based on the parent</strong> container. min-content will shrink the width to the minimum, so that each line contains at least one word. Whenever it encounters whitespace or a hyphenated word, it'll break it onto a new line.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;h1>\n  I am shrinking and shrinking, slowly fading away.\n&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\n  width: min-content;\n  background-color: deeppink;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/W94uNQa.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p><code>max-content</code> - it never adds any line-breaks. The element's width will be the smallest value that contains the content, without breaking it up. If the content is too big, it will create a vertical scroll bar. It pays no attention to the constraints set by the parent. It will size the element based purely on the length of its unbroken children. <code>max-content</code> is based also on children.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/oFSQXtP.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>How could this be useful? Only for those test which are short and we dont want to break them. It has an advantage that its size is only around the letter, it does not consume all 100% of available space as for auto. So adding a background-color would only color the background behind letters, not whole line:</p>\n</blockquote>\n<p>CSS</p>\n<pre><code>h1 {\n  width: max-content;\n  background-color: mediumspringgreen;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/dj8l4md.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>With width: auto</p>\n</blockquote>\n<p>CSS</p>\n<pre><code>h1 {\n  width: auto;\n  background-color: mediumspringgreen;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/KIMNK39.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p><code>fit-content</code> - its width is also based on the children. But it is the middle ground between min and max content. If that width can fit within the parent container, it behaves just like max-content, not adding any line-breaks. If the content is too wide to fit in the parent, however, it adds line-breaks as-needed to ensure it never exceeds the available space.</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;h2>Short&#x3C;/h2>\n&#x3C;h2>A mid-length heading&#x3C;/h2>\n&#x3C;h2>The longest heading you've ever seen in your life, will it ever end, ahhhhh ohmigod 😬😬😬😬😬😬😬&#x3C;/h2>\n</code></pre>\n<p>CSS</p>\n<pre><code>h2 {\n  width: -moz-fit-content;\n  width: fit-content;\n  background-color: peachpuff;\n  margin-bottom: 16px;\n  padding: 8px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/XJqAhip.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p><code>fit-content</code> behaves just like <code>width: auto</code>. But it does not extend to the 100% width of the parent like auto down in the piture bellow. Which makes it better to use background color.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/w7BsFSn.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>If we dont want to or cant use fit-content but want to replicate its behaviour, we can use 2 workarounds:</p>\n</blockquote>\n<p>CSS</p>\n<pre><code>h2 {\n  max-width: max-content;\n}\n</code></pre>\n<blockquote>\n<p>Why does it work? Because we haven't changed the width property, the default block-level behavior will continue; the h2 will grow to fill the available horizontal space.</p>\n</blockquote>\n<blockquote>\n<p>Let's suppose we have a 600px container, and our h2 only has a few characters. The max-content size might be 100px. Because 100px is smaller than 600px, max-width will constrain the width.</p>\n</blockquote>\n<blockquote>\n<p>What if the h2 has a bunch of characters? Maybe max-content would be 1000px. This value is larger than the container size of 600px, and so max-width has no effect.</p>\n</blockquote>\n<blockquote>\n<p>Another solution is:</p>\n</blockquote>\n<p>CSS</p>\n<pre><code>h2 {\n  display: table;\n}\n</code></pre>\n<blockquote>\n<p>display: table causes elements to render using Table layout. This is the layout mode used by the <table> HTML tag. It's an alternative algorithm to flow layout or positioned layout.</p>\n</blockquote>\n<blockquote>\n<p>By default, tables will shrink to hold their contents, but are still block-level elements. This is exactly what we want in this case, though it is a bit of a hack; a table element expects to have table rows as children, not text.</p>\n</blockquote>\n<blockquote>\n<p>We can add constraints to an element's size using <code>min-width</code> and <code>max-width</code>. This is useful to account of possibly idfferent screen sizes. The particularly exciting thing about min-width and max-width is that they let us mix units. We can specify constraints in pixels, but set a percentage width.</p>\n</blockquote>\n<blockquote>\n<p><strong>DEFAULT VALUES</strong></p>\n</blockquote>\n<blockquote>\n<p>Each browser has its own default styles. It is in case we do not define styles for a certain element. These browser styles are called: <code>user agent styles</code>. User agent means browser.</p>\n</blockquote>\n<blockquote>\n<p>Among default browser styles are margin and padding. In order to reset the completely and start with clean slate, we can set:</p>\n</blockquote>\n<pre><code>* {\n  margin: 0;\n  padding: 0;\n}\n</code></pre>\n<p><strong>VISIBILITY</strong></p>\n<blockquote>\n<p>Visibility is a property which decides if an element is <code>hidden</code> or <code>visible</code>.</p>\n</blockquote>\n<ul>\n<li>hidden - element with not be visible</li>\n<li>visible - element will be visible</li>\n</ul>\n<blockquote>\n<p>Even if we set element to hidden, the website will still reserve space for it. So we are only hiding element, but the space where is will be generated will be visible.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;ul>\n  &#x3C;li>LOOK AT ME&#x3C;/li>\n  &#x3C;li class=\"incognito\">YOU CANNOT SEE ME :)&#x3C;/li>\n  &#x3C;li>I AM HERE&#x3C;/li>\n&#x3C;ul>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.incognito {\n  visibility: hidden;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/h28WH9G.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>If we want to hide an element completely, we set:</p>\n</blockquote>\n<p>CSS:</p>\n<pre><code>.incognito {\n  display:none;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/jxNsMVj.png\" title=\"Photo by Addania\"></p>\n<p><strong>BOX MODEL</strong></p>\n<blockquote>\n<p>The way width is calculated is based on the <code>box-sizing</code> property. It can hold 2 values: default <code>content-box</code> or <code>border-box</code></p>\n</blockquote>\n<blockquote>\n<p>By default it has value of <code>content-box</code></p>\n</blockquote>\n<blockquote>\n<p>Imagine code like this where section is 500px:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  section {\n    width: 500px;\n  }\n  .box {\n    width: 100%;\n    padding: 20px;\n    border: 4px solid;\n  }\n&#x3C;/style>\n&#x3C;section>\n  &#x3C;div class=\"box\">&#x3C;/div>\n&#x3C;/section>\n</code></pre>\n<blockquote>\n<p>What will be the width of the box? It will actually be 548px.</p>\n</blockquote>\n<pre><code>500px of content + 2*20px of padding + 2*4px of border\n</code></pre>\n<p><img src=\"https://i.imgur.com/6Kh7jZx.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>What will be the height? Height will be 48px</p>\n</blockquote>\n<pre><code>0px of content because we did not specify it + 2*20px padding +2*4px of border\n</code></pre>\n<blockquote>\n<p>But this is not what we want. We probably want that the content + padding + border is of the width of 500px. For that it is better to use <code>border-box</code> value for the <code>box-sizing</code> property</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/axhzVsH.png%22Photo%20by%20Addania%22\"></p>\n<blockquote>\n<p>Border-box will then calculate the width of the box based on its content, padding and the border</p>\n</blockquote>\n<blockquote>\n<p>Often in applications you would reset the box-sizing for whole document to global styles. In order to do so, copy this snippet any time you start a new project. It is way easier and intuitive to work with border-box then with the content-box:</p>\n</blockquote>\n<pre><code>*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n</code></pre>\n<p><strong>POSITIONINIG</strong></p>\n<blockquote>\n<p>HTML pages are rendered from left to right, from top to bottom.</p>\n</blockquote>\n<blockquote>\n<p>Following attributes define positioning of these elements:</p>\n</blockquote>\n<ul>\n<li>position</li>\n<li>display</li>\n<li>z-index</li>\n<li>float</li>\n<li>clear</li>\n</ul>\n<blockquote>\n<p>Let`s create 2 divs within another div and color them:\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2)\n}\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n}\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n}\n</code></pre>\n<blockquote>\n<p>By browser default, they will be displayed as block:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/ESLu9iC.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>User agent styles means browser default. Box will look like this:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/K0Ponuc.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Child divs are generated beneath each other. Each child div takes up whole width of the parent container.</p>\n</blockquote>\n<blockquote>\n<p>If we wanted to position the boxes next to each other, we would need to apply display: inline-block to the boxes:</p>\n</blockquote>\n<pre><code>.box1{\n    display: inline-block;\n}\n.box2{\n    display: inline-block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/kLgULXj.png\" title=\"Photo by Addania\"></p>\n<p><strong>POSITION</strong></p>\n<blockquote>\n<p>Postion is a property that positions an element.</p>\n</blockquote>\n<blockquote>\n<p>Possible values:</p>\n</blockquote>\n<ul>\n<li>static- default value, elements render in order, as they appear in the document flow</li>\n<li>absolute- the element is positioned relative to its first positioned (not static) ancestor element</li>\n<li>fixed - the element is positioned relative to the browser viewport (visible screen)</li>\n<li>relative - the element is positioned relative to its normal (static) position, so \"left:20px\" adds 20 pixels to the element's LEFT position</li>\n<li>sticky- the element is positioned based on the user's scroll position</li>\n<li>initial- sets this property to its default value. Read about initial</li>\n<li>inherit - inherits this property from its parent element</li>\n</ul>\n<blockquote>\n<p>If not specified, position will be static. It does not need to be written explicitly.</p>\n</blockquote>\n<blockquote>\n<p>With position we can also define four offset properties:</p>\n</blockquote>\n<ul>\n<li>top - moves the element down.</li>\n<li>bottom - moves the element up.</li>\n<li>left - moves the element right.</li>\n<li>right - moves the element left.</li>\n</ul>\n<p><strong>POSITION RELATIVE</strong></p>\n<blockquote>\n<p>Our starting positioning of elements will be <code>display: block</code> and will look like this:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n}\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/K0Ponuc.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Please note we do not need to specify <code>display: block</code> explicitly, because it is browser default (user agent styles), but we can. Notice that the box 2 is rendered beneath box 1.</p>\n</blockquote>\n<blockquote>\n<p>We can then position our box 2 with <code>position: relative</code>. Relative means in this case relative to its <code>position: static</code> which is the default where browser would render it. Considering we use <code>display: block</code> then <code>position: static</code> means beneath the box 1.</p>\n</blockquote>\n<blockquote>\n<p>There will be no visible change to our starting point unless we add some offset positioning. For example offset 10px from top and offset of 30px from right:</p>\n</blockquote>\n<pre><code>.box2{\n    display: block;\n    position: relative;\n    top: 10px;\n    left: 30px;\n}\n</code></pre>\n<blockquote>\n<p>Resulting change will look like this.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/s3PQ6ES.png\" title=\"Photo by Addania\"></p>\n<p><strong>POSITION FIXED</strong></p>\n<blockquote>\n<p>Our starting positioning of elements will be <code>display: block</code> and will look like this:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;div class=\"header\">&#x3C;/div>\n&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.header {\n    width: 400px;\n    height: 120px;\n    background-color: turquoise;\n}\n.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n}\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/RNCpJBn.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Please note we do not need to specify <code>display: block</code> explicitly, because it is browser default (user agent styles), but we can. Notice that the box 2 is rendered beneath box 1.</p>\n</blockquote>\n<blockquote>\n<p>We can then position our box 2 with <code>position: fixed</code>. Fixed means in this case relative to to the viewport (visible browser window).</p>\n</blockquote>\n<blockquote>\n<p>There will be no visible change to our starting point unless we add some offset positioning. For example offset 0px from top and offset of 60px from right:</p>\n</blockquote>\n<pre><code>.box2{\n    display: block;\n    position: fixed;\n    top: 0px;\n    left: 60px;\n}\n</code></pre>\n<blockquote>\n<p>Resulting change will look like this.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/79Z8GSK.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Worth pointing out is also how elements with fixed position behave while scrolling. They would not be scrolled away from the viewport. They will remain in the visible screen.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/bMA0qDA.gif\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Navigation bars are often set with the position fixed and then the next element below them is set to relative with offset top: xx px.</p>\n</blockquote>\n<p><strong>POSITION ABSOLUTE</strong></p>\n<blockquote>\n<p>Our starting positioning of elements will be <code>display: block</code> and will look like this:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;div class=\"header\">&#x3C;/div>\n&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.header {\n    width: 400px;\n    height: 120px;\n    background-color: turquoise;\n}\n.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n    position: absolute;\n}\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/RNCpJBn.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Please note we do not need to specify <code>display: block</code> explicitly, because it is browser default (user agent styles), but we can. Notice that the box 2 is rendered beneath box 1.</p>\n</blockquote>\n<blockquote>\n<p>We can then position our box 2 with <code>position: absolute</code>. Absolute means in this case relative to to the <code>next parent which has either position: relative or position: absolute</code>.</p>\n</blockquote>\n<blockquote>\n<p>There will be no visible change to our starting point unless we add some offset positioning. For example offset 10px from top and offset of 30px from right:</p>\n</blockquote>\n<pre><code>.box2{\n    display: block;\n    position: absolute;\n    top: 5px;\n    left:60px;\n}\n</code></pre>\n<blockquote>\n<p>Resulting change will look like this.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/vHZBhRW.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Please note, that it is critical, that the next parent component (in our case <code>.parent-block</code>) has <code>position: absolute</code> or <code>position: relative</code>. If it didn`t, it would find next parent component with such position. In our case the only next parent would be the html tag itself. So it would be position in respect to it.\nCSS:</p>\n</blockquote>\n<pre><code>.header {\n    width: 400px;\n    height: 120px;\n    background-color: turquoise;\n}\n.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n}\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n    position: absolute;\n    top: 5px;\n    left:60px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/4r6W7ZQ.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Important about position: absolute is that when an element’s position is set to absolute all other elements on the page will ignore the element and act like it is not present on the page.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;div class=\"header\">&#x3C;/div>\n&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n    &#x3C;div class=\"box3\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.header {\n    width: 400px;\n    height: 120px;\n    background-color: turquoise;\n    display: block;\n}\n\n.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n    position: relative;\n}\n\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n    position: absolute;\n    top: 5px;\n    left:60px;\n}\n\n.box3{\n    width: 100px;\n    height: 100px;\n    background-color: blueviolet;\n    display: block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/QLxSgFG.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Notice how new box 3 (violet) completely ignores the box2 and is positioned directly beneath the box 1</p>\n</blockquote>\n<blockquote>\n<p>Worth pointing out is also how elements with absolute position behave while scrolling. They would be scrolled away from the viewport</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/sNPRZZX.gif\" title=\"Photo by Addania\"></p>\n<p><strong>Z INDEX</strong></p>\n<blockquote>\n<p>When there are multiple elements on page which overlap we can control with Z index which element is infront or behind another. The z-index property controls how far “back” or how far “forward” an element should appear on the web page when elements overlap. This can be thought of the depth of elements, with deeper elements appearing behind shallower elements. The higher the z index, the more in front element is. So element with z index 2 will be in front of element with z index 1</p>\n</blockquote>\n<blockquote>\n<p>Imagine code like this:\nHTML</p>\n</blockquote>\n<pre><code>&#x3C;div class=\"header\">&#x3C;/div>\n&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n    &#x3C;div class=\"box3\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS</p>\n<pre><code>.header {\n    width: 400px;\n    height: 120px;\n    background-color: turquoise;\n    display: block;\n}\n\n.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n    position: relative;\n}\n\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n    position: absolute;\n    top: 20px;\n    left:40px;\n}\n\n.box3{\n    width: 100px;\n    height: 100px;\n    background-color: blueviolet;\n    display: block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/HJIzgk1.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>What if we want the second box appear behind the box 1 and 3? We can set their z-indices\nCSS</p>\n</blockquote>\n<pre><code>.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n    position: relative;\n    z-index: 2;\n}\n\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n    position: absolute;\n    top: 20px;\n    left:40px;\n    z-index: 1;\n}\n\n.box3{\n    width: 100px;\n    height: 100px;\n    background-color: blueviolet;\n    display: block;\n    position: relative;\n    z-index: 2;\n}\n</code></pre>\n<blockquote>\n<p>Please not it is super important that we st box 1 and 3 to position: relative, because z index does not work on static objects (position:static is default if we do not set any position). Result will look like this</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/5VM9sZV.png\" title=\"Photo by Addania\"></p>\n<p><strong>DISPLAY</strong></p>\n<blockquote>\n<p>Each HTML element has a default display value that determines if it can share horizontal space with other elements or not. Some elements fill the entire browser width from left to right regardless of the size of their content. But other elements only take up as much horizontal space as their content needs and can be directly next to other elements.</p>\n</blockquote>\n<p><strong>INLINE DISPLAY</strong></p>\n<blockquote>\n<p>Default display of some tags, for example <code>&#x3C;em></code>, <code>&#x3C;strong></code>, <code>&#x3C;button></code> or <code>&#x3C;a></code>, is called <code>inline</code>. Inline elements have a box that wraps tightly around their content, only taking up amount of space which is necessary to display their content and not requiring a new line after every new element.</p>\n</blockquote>\n<blockquote>\n<p>Height and width of such elements cannot be specified in the CSS document. For example, the text of <code>&#x3C;a></code> tag will, by default, be displayed on the same line as the surrounding text, and it will only be as wide as necessary to contain its content.</p>\n</blockquote>\n<blockquote>\n<p>Inline elements cannot be altered in size with height or width CSS properties.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;button>Click me!&#x3C;/button>&#x3C;button>Me too, please?&#x3C;/button>\n</code></pre>\n<p><img src=\"https://i.imgur.com/NKk2d26.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Some elements by default have property display: block, which renderes them beneath each other. For example heading tags or divs\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;button>Click me!&#x3C;/button>&#x3C;button>Me too, please?&#x3C;/button>\n&#x3C;h3>Hello&#x3C;/h3>\n&#x3C;h3> Universe!&#x3C;/h3>\n</code></pre>\n<p><img src=\"https://i.imgur.com/ybaY2aS.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Display property provides the ability to make any element an inline element, also elements that are not inline by default such as paragraphs, divs or headings.\nCSS:</p>\n</blockquote>\n<pre><code>h3 {\n  display: inline;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/gIVa8dd.png%22Photo%20by%20Addania%22\"></p>\n<p>The CSS in the example above will change the display of all <code>&#x3C;h1></code> elements to inline. The browser will render <code>&#x3C;h1></code> elements on the same line as other inline elements immediately before or after them (if there are any).</p>\n<p><strong>ROTATION</strong></p>\n<blockquote>\n<p>The <code>t⁠r⁠a⁠n⁠s⁠f⁠o⁠r⁠m</code> property can rotate images and other elements. It accepts functions as values. To add a function that rotates an image, we type in <code>r⁠o⁠t⁠a⁠t⁠e⁠(⁠)</code>. We enter there number of degrees we want to rotate image.90deg means 90 degrees clickwise</p>\n</blockquote>\n<pre><code>img {\ntransform: rotate(90deg);\n}\n</code></pre>\n<blockquote>\n<p>To rotate an image anti-clockwise we add minus sign -45deg</p>\n</blockquote>\n<pre><code>img {\ntransform: rotate(-45deg);\n}\n</code></pre>\n<blockquote>\n<p>We can rotate other elements, not only images. For example buttons</p>\n</blockquote>\n<pre><code>button {\ntransform: rotate(-90deg);\n}\n</code></pre>\n<p><strong>Media queries</strong></p>\n<blockquote>\n<p>Media queries are very useful when we want to have diffrent styling based on the different screen sizes, for example large, medium or small (which is usually a mobile).\nIn a project we usually start developing the layout how it should look on the mobile phone and defining styles for the mobile first with for example defning the widths:</p>\n</blockquote>\n<pre><code class=\"language-es6\">.Burger {\n  width: 100%;\n  height: 250px;\n}\n</code></pre>\n<blockquote>\n<p>Then maybe on medium screen sizes we define the width of</p>\n</blockquote>\n<pre><code class=\"language-es6\">@media (min-width: 500px) and (min-height: 401px) {\n  .Burger {\n    width: 450px;\n    height: 400px;\n  }\n}\n</code></pre>\n<blockquote>\n<p>Then on the large screen we want to use a different size.</p>\n</blockquote>\n<pre><code class=\"language-es6\">@media (min-width: 1000px) and (min-height: 700px) {\n  .Burger {\n    width: 700px;\n    height: 600px;\n  }\n}\n</code></pre>\n<blockquote>\n<p>References:</p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/Getting_started\">https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/Getting_started</a></p>\n<p>Amazing CSS courses for beginners:</p>\n<p><a href=\"https://css-for-js.dev/\">https://css-for-js.dev/</a></p>\n<p><a href=\"https://www.codecademy.com/courses/learn-css/\">https://www.codecademy.com/courses/learn-css/</a></p>\n<p><img src=\"https://i.imgur.com/Y25H36n.jpg\" title=\"Photo by Lisa Fotios from Pexels\"></p>"}},{"node":{"id":"951d42c9-f325-5773-89a9-510b9f0c42e9","excerpt":"We can query images, or content of the website (text) from files in our project folder. Firstly, open your command line in Ubuntu and…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Ms2Wa14.jpg \"Photo by Logan Kirschner from Pexels\")\r\n\r\n> We can query images, or content of the website (text) from files in our project folder.\r\n\r\n> Firstly, open your command line in Ubuntu and install the Gatsby package called source **filesystem** plugin. The filesystem source plugin lets you query data**ABOUT** files (note: but it does NOT allow you to query data inside files, for that we have another plugin called transform)\r\n```\r\nnpm install --save gatsby-source-filesystem\r\n```\r\n> Secondly open the <code>gatsby-config.js</code> and add this plugin there:\r\n```\r\nplugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n```\r\n> Save and restart Gatsby development environment\r\n```\r\ngatsby develop\r\n```\r\n> Two new elements will be added there: files and allFile\r\n```\r\nhttp://localhost:8000/___graphql\r\n```\r\n> Select some items for our query. For example <code>base</code> is the name of the file, <code>prettySize</code> is the size of the file, <code>relativeDirectory</code> is a folder in which file resides, etc\r\n\r\n> Let's use this data and print it to console:\r\n```\r\nimport React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nexport default ({ data }) => {\r\n  console.log(data)\r\n  return (\r\n    <Layout>\r\n      <div>Hello world</div>\r\n    </Layout>\r\n  )\r\n}\r\nexport const query = graphql`\r\n  query {\r\n    allFile {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          prettySize\r\n          extension\r\n          birthTime(fromNow: true)\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n```\r\n\r\n> Let's make our data beautiful in a table:\r\n```\r\nimport React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nexport default ({ data }) => {\r\n  console.log(data)\r\n  return (\r\n    <Layout>\r\n      <div>\r\n        <h1>My Site's Files</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>relativePath</th>\r\n              <th>prettySize</th>\r\n              <th>extension</th>\r\n              <th>birthTime</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.allFile.edges.map(({ node }, index) => (\r\n              <tr key={index}>\r\n                <td>{node.relativePath}</td>\r\n                <td>{node.prettySize}</td>\r\n                <td>{node.extension}</td>\r\n                <td>{node.birthTime}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\nexport const query = graphql`\r\n  query {\r\n    allFile {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          prettySize\r\n          extension\r\n          birthTime(fromNow: true)\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n```\r\n> ```<table>``` tag creates a table\r\n\r\n\r\n> ```<thread>``` tag is used to group header content in an HTML table. The ```<thead>``` element is used in conjunction with the ```<tbody>``` and ```<tfoot>``` elements to specify each part of a table (header, body, footer). Browsers can use these elements to enable scrolling of the table body independently of the header and footer. Also, when printing a large table that spans multiple pages, these elements can enable the table header and footer to be printed at the top and bottom of each page. The ```<thead>``` tag must be used in the following context: As a child of a ```<table>``` element, after any ```<caption>```, and ```<colgroup>``` elements, and before any ```<tbody>```, ```<tfoot>```, and ```<tr>``` elements.\r\n\r\n> ```<tr>``` tag means table row\r\n\r\n> ```<th>``` tag means one column in a table header\r\n\r\n> ```<td>``` tag means one column in the table data\r\n\r\n> for each tr we will take all available data into columns\r\n\r\n> How does this part of the code work?\r\n```\r\n{data.allFile.edges.map(({ node }, index) => (\r\n              <tr key={index}>\r\n                <td>{node.base}</td>\r\n                <td>{node.prettySize}</td>\r\n                <td>{node.relativeDirectory}</td>\r\n                <td>{node.name}</td>\r\n              </tr>\r\n            ))}\r\n```\r\n> <code>Map</code> is a method which can be called on an array. When we query data, you can see on the right column on GraphiQL how our data will look like: For example:\r\n```\r\n{\r\n  \"data\": {\r\n    \"allFile\": {\r\n      \"edges\": [\r\n        {\r\n          \"node\": {\r\n            \"id\": \"3d02d57a-a1ff-58a6-a75b-41d2d1f5de2f\",\r\n            \"base\": \"container.js\",\r\n            \"prettySize\": \"177 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"container\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"bfd68830-b23b-5750-9e97-fb73e577ebc8\",\r\n            \"base\": \"header.js\",\r\n            \"prettySize\": \"141 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"header\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"5110e7f0-f000-5a81-b65f-2d655e4937b4\",\r\n            \"base\": \"container.module.css\",\r\n            \"prettySize\": \"55 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"container.module\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"09ae19a0-accc-5c2a-9caa-ea806602b54f\",\r\n            \"base\": \"layout.js\",\r\n            \"prettySize\": \"1.25 kB\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"layout\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"e0c2ac65-ada6-5773-a74d-6129e1de7f7b\",\r\n            \"base\": \"about-css-modules.js\",\r\n            \"prettySize\": \"1.03 kB\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about-css-modules\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"95b910e6-a707-512e-b6cd-09e0f60fd8cb\",\r\n            \"base\": \"about-css-modules.module.css\",\r\n            \"prettySize\": \"334 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about-css-modules.module\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"d0e66873-11b2-5ecf-9971-c397b39412a8\",\r\n            \"base\": \"about.js\",\r\n            \"prettySize\": \"484 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"391e78c8-e96e-5412-a4c4-02d3074c2bc1\",\r\n            \"base\": \"contact.js\",\r\n            \"prettySize\": \"232 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"contact\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"689eea2c-7d70-53e6-8078-26e28cd337ce\",\r\n            \"base\": \"index.js\",\r\n            \"prettySize\": \"358 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"index\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"318cd83a-3107-5cbb-b65e-b2eb0fb3a428\",\r\n            \"base\": \"global.css\",\r\n            \"prettySize\": \"49 B\",\r\n            \"relativeDirectory\": \"styles\",\r\n            \"name\": \"global\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"34912156-9592-5c52-aac4-7e851d124baa\",\r\n            \"base\": \"typography.js\",\r\n            \"prettySize\": \"226 B\",\r\n            \"relativeDirectory\": \"utils\",\r\n            \"name\": \"typography\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\nNotice how <code>data.allFile.edges</code> returns an ARRAY of OBJECTS! Which means we can use array method called map on it. Map works in a way that it iterated through every single element of the array and performs a certain function in it. It doesn't change original array, but creates a new array on which the function is performed.  One small example is here:\r\n```\r\nvar array1 = [1, 4, 9, 16];\r\n// pass a function to map\r\nconst map1 = array1.map(x => x * 2);\r\n\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\n> x is an element of the array which we currently iterate through\r\n\r\n> Documentation of Map is here: \r\n\r\n```\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\r\n```\r\n> Notice how the syntax looks:\r\n```\r\nvar new_array = arr.map(function callback(currentValue[, index[, array]]) {\r\n    // Return element for new_array\r\n}[, thisArg])\r\n```\r\n> This means that when using <code>.map</code> method we can use the current object we are on, but also its index! Which mean index 0,1,2, etc\r\n\r\n> In our <code>.map</code> method we have a function which takes 2 arguments:\r\n```\r\n({ node }, index)\r\n```\r\n<code>{ node }</code> is an actual object which resides under <code>data.allFile.edges</code>\r\n\r\nIt should actually be called node, otherwise we will have an error.\r\n\r\nIndex is the index of the element in our array on which we are currently itterating.\r\n\r\n> For each element in our array, we will create a ```<tr>``` tag which will have a unique property key which will be equal to the index of that element in the array\r\n```<tr key={index}>\r\n...\r\n</tr> \r\n```\r\n> Then this table row (tr) will create 4 columns ```<td>``` Each of ```<td>``` tags will access the element of array, which is in fact an object, where we retrieve values for example: <code>node.base</code>\r\n\r\n\r\n> In React each array element over which we will iterate needs a unique key property. \r\n\r\n> Each time you iterate over an array you have to set the key prop to each of the resulting DOM element as React needs it to optimize the re-rendering.\r\n\r\n> React for example will detect duplicates and only renders the first node with this key. Without <code>key={index}</code> there will be an error in console that each child in the list should have a unique key property. More reading:\r\n```\r\nhttps://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js\r\nhttps://stackoverflow.com/questions/37651660/react-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop?rq=1\r\n```\r\n> The filesystem source plugin lets you query data ABOUT files but what if you want to query data INSIDE files? To make this possible, Gatsby supports transformer plugins which take raw content from source plugins and transform it into something more usable. Example: markdown files <code>.md</code>\r\n\r\n> Create a new markdow file under your pages folder\r\n```\r\nblog_post.md\r\n```\r\n\r\n> Look at the GrphiQL and refresh the query, you will see the new <code>.md</code> file in there\r\n\r\n\r\n> First install transformer plugin\r\n```\r\nnpm install --save gatsby-transformer-remark\r\n```\r\n\r\n> Add plugin to Gatsby config\r\n```\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: `Pandas Eating Lots`,\r\n  },\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n    `gatsby-transformer-remark`,\r\n    `gatsby-plugin-emotion`,\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n> Restart your development environment with\r\n```\r\ngatsby develop\r\n```\r\n> In GraphiQL we will see the new item <code>allMarkdownRemark</code>","frontmatter":{"date":"2019-10-10","title":"Querying data from project files","category":"knowledge-base"},"fields":{"slug":"/Querying_data_from_project_files/"},"timeToRead":7,"html":"<p><img src=\"https://i.imgur.com/Ms2Wa14.jpg\" title=\"Photo by Logan Kirschner from Pexels\"></p>\n<blockquote>\n<p>We can query images, or content of the website (text) from files in our project folder.</p>\n</blockquote>\n<blockquote>\n<p>Firstly, open your command line in Ubuntu and install the Gatsby package called source <strong>filesystem</strong> plugin. The filesystem source plugin lets you query data<strong>ABOUT</strong> files (note: but it does NOT allow you to query data inside files, for that we have another plugin called transform)</p>\n</blockquote>\n<pre><code>npm install --save gatsby-source-filesystem\n</code></pre>\n<blockquote>\n<p>Secondly open the <code>gatsby-config.js</code> and add this plugin there:</p>\n</blockquote>\n<pre><code>plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n</code></pre>\n<blockquote>\n<p>Save and restart Gatsby development environment</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>Two new elements will be added there: files and allFile</p>\n</blockquote>\n<pre><code>http://localhost:8000/___graphql\n</code></pre>\n<blockquote>\n<p>Select some items for our query. For example <code>base</code> is the name of the file, <code>prettySize</code> is the size of the file, <code>relativeDirectory</code> is a folder in which file resides, etc</p>\n</blockquote>\n<blockquote>\n<p>Let's use this data and print it to console:</p>\n</blockquote>\n<pre><code>import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nexport default ({ data }) => {\n  console.log(data)\n  return (\n    &#x3C;Layout>\n      &#x3C;div>Hello world&#x3C;/div>\n    &#x3C;/Layout>\n  )\n}\nexport const query = graphql`\n  query {\n    allFile {\n      edges {\n        node {\n          relativePath\n          prettySize\n          extension\n          birthTime(fromNow: true)\n        }\n      }\n    }\n  }\n`\n</code></pre>\n<blockquote>\n<p>Let's make our data beautiful in a table:</p>\n</blockquote>\n<pre><code>import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nexport default ({ data }) => {\n  console.log(data)\n  return (\n    &#x3C;Layout>\n      &#x3C;div>\n        &#x3C;h1>My Site's Files&#x3C;/h1>\n        &#x3C;table>\n          &#x3C;thead>\n            &#x3C;tr>\n              &#x3C;th>relativePath&#x3C;/th>\n              &#x3C;th>prettySize&#x3C;/th>\n              &#x3C;th>extension&#x3C;/th>\n              &#x3C;th>birthTime&#x3C;/th>\n            &#x3C;/tr>\n          &#x3C;/thead>\n          &#x3C;tbody>\n            {data.allFile.edges.map(({ node }, index) => (\n              &#x3C;tr key={index}>\n                &#x3C;td>{node.relativePath}&#x3C;/td>\n                &#x3C;td>{node.prettySize}&#x3C;/td>\n                &#x3C;td>{node.extension}&#x3C;/td>\n                &#x3C;td>{node.birthTime}&#x3C;/td>\n              &#x3C;/tr>\n            ))}\n          &#x3C;/tbody>\n        &#x3C;/table>\n      &#x3C;/div>\n    &#x3C;/Layout>\n  )\n}\nexport const query = graphql`\n  query {\n    allFile {\n      edges {\n        node {\n          relativePath\n          prettySize\n          extension\n          birthTime(fromNow: true)\n        }\n      }\n    }\n  }\n`\n</code></pre>\n<blockquote>\n<p><code>&#x3C;table></code> tag creates a table</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;thread></code> tag is used to group header content in an HTML table. The <code>&#x3C;thead></code> element is used in conjunction with the <code>&#x3C;tbody></code> and <code>&#x3C;tfoot></code> elements to specify each part of a table (header, body, footer). Browsers can use these elements to enable scrolling of the table body independently of the header and footer. Also, when printing a large table that spans multiple pages, these elements can enable the table header and footer to be printed at the top and bottom of each page. The <code>&#x3C;thead></code> tag must be used in the following context: As a child of a <code>&#x3C;table></code> element, after any <code>&#x3C;caption></code>, and <code>&#x3C;colgroup></code> elements, and before any <code>&#x3C;tbody></code>, <code>&#x3C;tfoot></code>, and <code>&#x3C;tr></code> elements.</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;tr></code> tag means table row</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;th></code> tag means one column in a table header</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;td></code> tag means one column in the table data</p>\n</blockquote>\n<blockquote>\n<p>for each tr we will take all available data into columns</p>\n</blockquote>\n<blockquote>\n<p>How does this part of the code work?</p>\n</blockquote>\n<pre><code>{data.allFile.edges.map(({ node }, index) => (\n              &#x3C;tr key={index}>\n                &#x3C;td>{node.base}&#x3C;/td>\n                &#x3C;td>{node.prettySize}&#x3C;/td>\n                &#x3C;td>{node.relativeDirectory}&#x3C;/td>\n                &#x3C;td>{node.name}&#x3C;/td>\n              &#x3C;/tr>\n            ))}\n</code></pre>\n<blockquote>\n<p><code>Map</code> is a method which can be called on an array. When we query data, you can see on the right column on GraphiQL how our data will look like: For example:</p>\n</blockquote>\n<pre><code>{\n  \"data\": {\n    \"allFile\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"3d02d57a-a1ff-58a6-a75b-41d2d1f5de2f\",\n            \"base\": \"container.js\",\n            \"prettySize\": \"177 B\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"container\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"bfd68830-b23b-5750-9e97-fb73e577ebc8\",\n            \"base\": \"header.js\",\n            \"prettySize\": \"141 B\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"header\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"5110e7f0-f000-5a81-b65f-2d655e4937b4\",\n            \"base\": \"container.module.css\",\n            \"prettySize\": \"55 B\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"container.module\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"09ae19a0-accc-5c2a-9caa-ea806602b54f\",\n            \"base\": \"layout.js\",\n            \"prettySize\": \"1.25 kB\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"layout\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"e0c2ac65-ada6-5773-a74d-6129e1de7f7b\",\n            \"base\": \"about-css-modules.js\",\n            \"prettySize\": \"1.03 kB\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"about-css-modules\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"95b910e6-a707-512e-b6cd-09e0f60fd8cb\",\n            \"base\": \"about-css-modules.module.css\",\n            \"prettySize\": \"334 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"about-css-modules.module\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"d0e66873-11b2-5ecf-9971-c397b39412a8\",\n            \"base\": \"about.js\",\n            \"prettySize\": \"484 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"about\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"391e78c8-e96e-5412-a4c4-02d3074c2bc1\",\n            \"base\": \"contact.js\",\n            \"prettySize\": \"232 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"contact\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"689eea2c-7d70-53e6-8078-26e28cd337ce\",\n            \"base\": \"index.js\",\n            \"prettySize\": \"358 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"index\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"318cd83a-3107-5cbb-b65e-b2eb0fb3a428\",\n            \"base\": \"global.css\",\n            \"prettySize\": \"49 B\",\n            \"relativeDirectory\": \"styles\",\n            \"name\": \"global\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"34912156-9592-5c52-aac4-7e851d124baa\",\n            \"base\": \"typography.js\",\n            \"prettySize\": \"226 B\",\n            \"relativeDirectory\": \"utils\",\n            \"name\": \"typography\"\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<p>Notice how <code>data.allFile.edges</code> returns an ARRAY of OBJECTS! Which means we can use array method called map on it. Map works in a way that it iterated through every single element of the array and performs a certain function in it. It doesn't change original array, but creates a new array on which the function is performed.  One small example is here:</p>\n<pre><code>var array1 = [1, 4, 9, 16];\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<blockquote>\n<p>x is an element of the array which we currently iterate through</p>\n</blockquote>\n<blockquote>\n<p>Documentation of Map is here: </p>\n</blockquote>\n<pre><code>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n</code></pre>\n<blockquote>\n<p>Notice how the syntax looks:</p>\n</blockquote>\n<pre><code>var new_array = arr.map(function callback(currentValue[, index[, array]]) {\n    // Return element for new_array\n}[, thisArg])\n</code></pre>\n<blockquote>\n<p>This means that when using <code>.map</code> method we can use the current object we are on, but also its index! Which mean index 0,1,2, etc</p>\n</blockquote>\n<blockquote>\n<p>In our <code>.map</code> method we have a function which takes 2 arguments:</p>\n</blockquote>\n<pre><code>({ node }, index)\n</code></pre>\n<p><code>{ node }</code> is an actual object which resides under <code>data.allFile.edges</code></p>\n<p>It should actually be called node, otherwise we will have an error.</p>\n<p>Index is the index of the element in our array on which we are currently itterating.</p>\n<blockquote>\n<p>For each element in our array, we will create a <code>&#x3C;tr></code> tag which will have a unique property key which will be equal to the index of that element in the array</p>\n</blockquote>\n<pre><code class=\"language-<tr\" data-meta=\"key={index}>\">...\n&#x3C;/tr> \n</code></pre>\n<blockquote>\n<p>Then this table row (tr) will create 4 columns <code>&#x3C;td></code> Each of <code>&#x3C;td></code> tags will access the element of array, which is in fact an object, where we retrieve values for example: <code>node.base</code></p>\n</blockquote>\n<blockquote>\n<p>In React each array element over which we will iterate needs a unique key property. </p>\n</blockquote>\n<blockquote>\n<p>Each time you iterate over an array you have to set the key prop to each of the resulting DOM element as React needs it to optimize the re-rendering.</p>\n</blockquote>\n<blockquote>\n<p>React for example will detect duplicates and only renders the first node with this key. Without <code>key={index}</code> there will be an error in console that each child in the list should have a unique key property. More reading:</p>\n</blockquote>\n<pre><code>https://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js\nhttps://stackoverflow.com/questions/37651660/react-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop?rq=1\n</code></pre>\n<blockquote>\n<p>The filesystem source plugin lets you query data ABOUT files but what if you want to query data INSIDE files? To make this possible, Gatsby supports transformer plugins which take raw content from source plugins and transform it into something more usable. Example: markdown files <code>.md</code></p>\n</blockquote>\n<blockquote>\n<p>Create a new markdow file under your pages folder</p>\n</blockquote>\n<pre><code>blog_post.md\n</code></pre>\n<blockquote>\n<p>Look at the GrphiQL and refresh the query, you will see the new <code>.md</code> file in there</p>\n</blockquote>\n<blockquote>\n<p>First install transformer plugin</p>\n</blockquote>\n<pre><code>npm install --save gatsby-transformer-remark\n</code></pre>\n<blockquote>\n<p>Add plugin to Gatsby config</p>\n</blockquote>\n<pre><code>module.exports = {\n  siteMetadata: {\n    title: `Pandas Eating Lots`,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n    `gatsby-transformer-remark`,\n    `gatsby-plugin-emotion`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n}\n</code></pre>\n<blockquote>\n<p>Restart your development environment with</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>In GraphiQL we will see the new item <code>allMarkdownRemark</code></p>\n</blockquote>"}},{"node":{"id":"14e87390-dc28-5611-94ba-6e81b3d31199","excerpt":"GraphQL is a technology for querying data and was developed by Facebook to allow React commponents to query data. QL means query language…","rawMarkdownBody":"\r\n![](https://i.imgur.com/vfl9kPh.jpg \"Photo by Vitaly Vlasov from Pexels\")\r\n\r\nGraphQL is a technology for querying data and was developed by Facebook to allow React commponents to query data. QL means query language and is similar to SQL.\r\n\r\nWhy do we prefer to query data anyway? Imagine you have yout site title (\"My page\") on various subpages, let's say on 20 subpages. Imagine you realize that this title is rather lame and you want to change it to somethis cooler (\"Welcome to my awesome page!\"). Then you have to go through all your code, every single page and change the hard typed title 20 times. However, it would be better if we could store our great title in some safe place from where each subpage would retreive it. Then you would only need to change the title of the page once and everything would be updated automatically. Isn't it totally cool? Automation, saving time, error-prone. Let's use awesome technologies and their potential to make our lives easier.\r\n\r\nThere are several GraphQL query types:\r\n\r\n> **A)** Page queries, which can only be done my PAGES (not by standalone components)\r\n\r\n> **B)** Non-pages components queries (such as layout.js)\r\n\r\n**PAGE QUERIES:**\r\n\r\n> One way to query data is to use page queries from site Metadata. This option is only available for pages (it is not available for non-page components like <code>layout.js</code>). In order to do so, open the gatsby-config file and paste this into it:\r\n\r\n```\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: \"Coding Addventures with Addania\",\r\n  },\r\n```\r\n\r\n> Then go to you About page and add following code:\r\n\r\n```\r\nimport React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nexport default ( {data}) => (\r\n    <h1>About {data.site.siteMetadata.title}</h1>\r\n    <p>Such wow. Very React.</p>\r\n)\r\nexport const query = graphql`\r\nquery {\r\n  site {\r\n    siteMetadata{\r\n      title\r\n    }\r\n  }\r\n}\r\n`\r\n```\r\n\r\n> Please note that a constant query is outside of the component and by convention at the end of the file.\r\n\r\n**NON-PAGE COMPONENT QUERIES**\r\n\r\n> For standalone components like Header, Layout which are not pages, there is another way how to query data. We will use a hook called useStatisQuery. This hook was introduced to Gatsby that allow non-pages components also to retrieve data\r\n\r\n> Navigate to <code>layout.js</code> file\r\n\r\n> Import useStaticQuery and GraphQL from Gatsy\r\n\r\n```\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\n```\r\n\r\n> Function component needs to have {} brackets after =>\r\n\r\n```\r\nexport default ({ children }) => {\r\n...\r\n}\r\n```\r\n\r\n> Create a function component which will have this constant before return function\r\n\r\n```\r\nconst data = useStaticQuery (\r\n  graphql`\r\n  query {\r\n    site {\r\n      siteMetadata{\r\n        title\r\n      }\r\n    }\r\n  }\r\n  `\r\n)\r\n```\r\n\r\n> Use query inside of the return function\r\n\r\n```\r\n<h3>{data.site.siteMetadata.title}</h3>\r\n```\r\n\r\n> Entire example <code>layout.js</code> is here:\r\n\r\n```\r\nimport React from \"react\";\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\n\r\nconst ListLink = props => (\r\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\r\n    <Link to={props.to}>{props.children}</Link>\r\n  </li>\r\n)\r\n\r\nexport default ({ children }) => {\r\nconst data = useStaticQuery (\r\n  graphql`\r\n  query {\r\n    site {\r\n      siteMetadata{\r\n        title\r\n      }\r\n    }\r\n  }\r\n  `\r\n)\r\nreturn (\r\n  <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\r\n    <header style={{ marginBottom: `1.5rem` }}>\r\n      <Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\r\n        <h3 style={{ display: `inline` }}>Addania</h3>\r\n      </Link>\r\n      <ul style={{ listStyle: `none`, float: `right` }}>\r\n        <ListLink to=\"/\">Home</ListLink>\r\n        <ListLink to=\"/about/\">About</ListLink>\r\n        <ListLink to=\"/contact/\">Contact</ListLink>\r\n      </ul>\r\n      <hr />\r\n    </header>\r\n    {children}\r\n    <h3>{data.site.siteMetadata.title}</h3>\r\n    <hr />\r\n    <footer style={{ marginBottom: `1.5rem` }}>\r\n        <p style={{ display: `inline`, align: \"right\" }}>2021 Design and Development by Addania</p>\r\n    </footer>\r\n  </div>\r\n)\r\n}\r\n```\r\n\r\n> In order to make sure to write the queries correctly we use tool called GraphiQL. It is available by default when our local development is running (gastby develop) and is accessible here:\r\n\r\n```\r\nhttp://localhost:8000/___graphql\r\n```\r\n","frontmatter":{"date":"2019-10-09","title":"Querying data with GraphQL","category":"knowledge-base"},"fields":{"slug":"/Querying_data_with_GraphQL/"},"timeToRead":3,"html":"<p><img src=\"https://i.imgur.com/vfl9kPh.jpg\" title=\"Photo by Vitaly Vlasov from Pexels\"></p>\n<p>GraphQL is a technology for querying data and was developed by Facebook to allow React commponents to query data. QL means query language and is similar to SQL.</p>\n<p>Why do we prefer to query data anyway? Imagine you have yout site title (\"My page\") on various subpages, let's say on 20 subpages. Imagine you realize that this title is rather lame and you want to change it to somethis cooler (\"Welcome to my awesome page!\"). Then you have to go through all your code, every single page and change the hard typed title 20 times. However, it would be better if we could store our great title in some safe place from where each subpage would retreive it. Then you would only need to change the title of the page once and everything would be updated automatically. Isn't it totally cool? Automation, saving time, error-prone. Let's use awesome technologies and their potential to make our lives easier.</p>\n<p>There are several GraphQL query types:</p>\n<blockquote>\n<p><strong>A)</strong> Page queries, which can only be done my PAGES (not by standalone components)</p>\n</blockquote>\n<blockquote>\n<p><strong>B)</strong> Non-pages components queries (such as layout.js)</p>\n</blockquote>\n<p><strong>PAGE QUERIES:</strong></p>\n<blockquote>\n<p>One way to query data is to use page queries from site Metadata. This option is only available for pages (it is not available for non-page components like <code>layout.js</code>). In order to do so, open the gatsby-config file and paste this into it:</p>\n</blockquote>\n<pre><code>module.exports = {\n  siteMetadata: {\n    title: \"Coding Addventures with Addania\",\n  },\n</code></pre>\n<blockquote>\n<p>Then go to you About page and add following code:</p>\n</blockquote>\n<pre><code>import React from \"react\";\nimport { graphql } from \"gatsby\";\nexport default ( {data}) => (\n    &#x3C;h1>About {data.site.siteMetadata.title}&#x3C;/h1>\n    &#x3C;p>Such wow. Very React.&#x3C;/p>\n)\nexport const query = graphql`\nquery {\n  site {\n    siteMetadata{\n      title\n    }\n  }\n}\n`\n</code></pre>\n<blockquote>\n<p>Please note that a constant query is outside of the component and by convention at the end of the file.</p>\n</blockquote>\n<p><strong>NON-PAGE COMPONENT QUERIES</strong></p>\n<blockquote>\n<p>For standalone components like Header, Layout which are not pages, there is another way how to query data. We will use a hook called useStatisQuery. This hook was introduced to Gatsby that allow non-pages components also to retrieve data</p>\n</blockquote>\n<blockquote>\n<p>Navigate to <code>layout.js</code> file</p>\n</blockquote>\n<blockquote>\n<p>Import useStaticQuery and GraphQL from Gatsy</p>\n</blockquote>\n<pre><code>import { Link, useStaticQuery, graphql } from \"gatsby\";\n</code></pre>\n<blockquote>\n<p>Function component needs to have {} brackets after =></p>\n</blockquote>\n<pre><code>export default ({ children }) => {\n...\n}\n</code></pre>\n<blockquote>\n<p>Create a function component which will have this constant before return function</p>\n</blockquote>\n<pre><code>const data = useStaticQuery (\n  graphql`\n  query {\n    site {\n      siteMetadata{\n        title\n      }\n    }\n  }\n  `\n)\n</code></pre>\n<blockquote>\n<p>Use query inside of the return function</p>\n</blockquote>\n<pre><code>&#x3C;h3>{data.site.siteMetadata.title}&#x3C;/h3>\n</code></pre>\n<blockquote>\n<p>Entire example <code>layout.js</code> is here:</p>\n</blockquote>\n<pre><code>import React from \"react\";\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\n\nconst ListLink = props => (\n  &#x3C;li style={{ display: `inline-block`, marginRight: `1rem` }}>\n    &#x3C;Link to={props.to}>{props.children}&#x3C;/Link>\n  &#x3C;/li>\n)\n\nexport default ({ children }) => {\nconst data = useStaticQuery (\n  graphql`\n  query {\n    site {\n      siteMetadata{\n        title\n      }\n    }\n  }\n  `\n)\nreturn (\n  &#x3C;div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\n    &#x3C;header style={{ marginBottom: `1.5rem` }}>\n      &#x3C;Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\n        &#x3C;h3 style={{ display: `inline` }}>Addania&#x3C;/h3>\n      &#x3C;/Link>\n      &#x3C;ul style={{ listStyle: `none`, float: `right` }}>\n        &#x3C;ListLink to=\"/\">Home&#x3C;/ListLink>\n        &#x3C;ListLink to=\"/about/\">About&#x3C;/ListLink>\n        &#x3C;ListLink to=\"/contact/\">Contact&#x3C;/ListLink>\n      &#x3C;/ul>\n      &#x3C;hr />\n    &#x3C;/header>\n    {children}\n    &#x3C;h3>{data.site.siteMetadata.title}&#x3C;/h3>\n    &#x3C;hr />\n    &#x3C;footer style={{ marginBottom: `1.5rem` }}>\n        &#x3C;p style={{ display: `inline`, align: \"right\" }}>2021 Design and Development by Addania&#x3C;/p>\n    &#x3C;/footer>\n  &#x3C;/div>\n)\n}\n</code></pre>\n<blockquote>\n<p>In order to make sure to write the queries correctly we use tool called GraphiQL. It is available by default when our local development is running (gastby develop) and is accessible here:</p>\n</blockquote>\n<pre><code>http://localhost:8000/___graphql\n</code></pre>"}},{"node":{"id":"77a4e77b-0e9c-53af-b7c4-dd1bca302b47","excerpt":"In order to use custom fonts you need to install a package (plug in) and then restart the local host Then you need to open gatsby-config.js…","rawMarkdownBody":"\r\n![](https://i.imgur.com/BvSXI40.jpg \"PPhoto by Dominika Roseclay from Pexels\")\r\n\r\n> In order to use custom fonts you need to install a package (plug in) and then restart the local host\r\n```\r\nnpm install --save gatsby-plugin-typography react-typography typography typography-theme-fairy-gates\r\n```\r\n> Then you need to open gatsby-config.js file. This is the file where we need to add plugins or site configuration. In order to use typography plugin we need to change this:\r\n```\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\n> Create new folder under src called \"utils\"\r\n\r\n> Add a new js file called: <code>typography.js</code>\r\n\r\n> Add this code to the file:\r\n```\r\nimport Typography from \"typography\"\r\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\r\nconst typography = new Typography(fairyGateTheme)\r\nexport const { scale, rhythm, options } = typography\r\nexport default typography\r\n```\r\n\r\n> Start development server\r\n```\r\ngatsby develop\r\n```\r\n\r\n","frontmatter":{"date":"2019-10-08","title":"Gatsby fonts","category":"knowledge-base"},"fields":{"slug":"/Gatsby_fonts/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/BvSXI40.jpg\" title=\"PPhoto by Dominika Roseclay from Pexels\"></p>\n<blockquote>\n<p>In order to use custom fonts you need to install a package (plug in) and then restart the local host</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-typography react-typography typography typography-theme-fairy-gates\n</code></pre>\n<blockquote>\n<p>Then you need to open gatsby-config.js file. This is the file where we need to add plugins or site configuration. In order to use typography plugin we need to change this:</p>\n</blockquote>\n<pre><code>module.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n}\n</code></pre>\n<blockquote>\n<p>Create new folder under src called \"utils\"</p>\n</blockquote>\n<blockquote>\n<p>Add a new js file called: <code>typography.js</code></p>\n</blockquote>\n<blockquote>\n<p>Add this code to the file:</p>\n</blockquote>\n<pre><code>import Typography from \"typography\"\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\nconst typography = new Typography(fairyGateTheme)\nexport const { scale, rhythm, options } = typography\nexport default typography\n</code></pre>\n<blockquote>\n<p>Start development server</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>"}},{"node":{"id":"6a52fbe3-1fa1-5718-8ed1-6160be379236","excerpt":"Description Hooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function…","rawMarkdownBody":"\r\n![](https://i.imgur.com/4KvXTki.jpg \"Photo by Johannes Plenio from Pexels\")\r\n\r\n>Description\r\n\r\nHooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function components with hooks rather than classes with state. Class components might be deprecated in future. Advantage of hooks is that we can create our own hooks and logic behind them. \r\n\r\n>Examples of hooks:\r\n\r\n**useState** - allows function component to have state\r\n\r\n**useEffect** - allows function component to use a certain function any time component renders, it is equivalent to lifecycles of class components\r\n\r\n> Importing\r\n\r\nEach hook needs to be imported from react.\r\n\r\nExample 1:\r\n```\r\nimport React from \"react\";\r\nimport {useState} from \"react\";\r\n```\r\n\r\nExample 2:\r\n```\r\nimport React, {useState} from \"react\";\r\n```\r\n","frontmatter":{"date":"2019-10-07","title":"Hooks","category":"knowledge-base"},"fields":{"slug":"/Hooks/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/4KvXTki.jpg\" title=\"Photo by Johannes Plenio from Pexels\"></p>\n<blockquote>\n<p>Description</p>\n</blockquote>\n<p>Hooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function components with hooks rather than classes with state. Class components might be deprecated in future. Advantage of hooks is that we can create our own hooks and logic behind them. </p>\n<blockquote>\n<p>Examples of hooks:</p>\n</blockquote>\n<p><strong>useState</strong> - allows function component to have state</p>\n<p><strong>useEffect</strong> - allows function component to use a certain function any time component renders, it is equivalent to lifecycles of class components</p>\n<blockquote>\n<p>Importing</p>\n</blockquote>\n<p>Each hook needs to be imported from react.</p>\n<p>Example 1:</p>\n<pre><code>import React from \"react\";\nimport {useState} from \"react\";\n</code></pre>\n<p>Example 2:</p>\n<pre><code>import React, {useState} from \"react\";\n</code></pre>"}},{"node":{"id":"8373ceef-1108-5e44-9d2f-b7d742e82faa","excerpt":"There are basically 2 ways to style the React: 1) importing a standard CSS file for example index.css, which can reside side by side next to…","rawMarkdownBody":"\r\n![](https://i.imgur.com/cLbxIHe.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nThere are basically 2 ways to style the React:\r\n\r\n**1)** importing a standard CSS file for example <code>index.css</code>, which can reside side by side next to your main file, for example <code>index.js</code>. \r\n\r\n> On Ubuntu console, create the css file\r\n```\r\ntouch index.css\r\n```\r\n> Add some styling to your css file, which follows standard CSS rules, for example in this case we will center the video asset which has class name called player:\r\n```\r\n.player {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: block;\r\n}\r\n```\r\n> <code>index.js</code> will look like this:\r\n``` \r\n<video controls className=\"player\">\r\n  <source src=\"/video.mp4\" type=\"video/mp4\">\r\n  </source>\r\n</video>\r\n```\r\n\r\n> Open your <code>index.js</code> file and import your CSS to your JS file:\r\n```\r\nimport \"/index.css\";\r\n```\r\n\r\n**2)** Use styling inline in JS file. \r\n\r\n> Open your <code>index.js</code> file. In the tag where you want to apply your styles write <code>```style={{}}```</code> and add your style in between of the brackets. First pair of brackets means we are injecting JSX to the HTML, second pair of brackets means that what we are inputting there is in fact an object. Multiple styles needs to be separated by comma (just like in any other object). Please make sure you do not type styles (plural) instead of style (singular). Correct is style (singular). Please make sure that everything that in CSS uses minus (example: margin-left) must be inline without the minus and camelCased (example: marginLeft). Plus there must always be quotation marks even if in the CSS there wouldn't be. Full example:\r\n```\r\n<video  style={{width:\"500px\", display: \"block\", marginLeft: \"auto\", marginRight:\"auto\"}} controls>\r\n```","frontmatter":{"date":"2019-10-06","title":"Adding CSS to React","category":"knowledge-base"},"fields":{"slug":"/Adding_CSS_to_React/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/cLbxIHe.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>There are basically 2 ways to style the React:</p>\n<p><strong>1)</strong> importing a standard CSS file for example <code>index.css</code>, which can reside side by side next to your main file, for example <code>index.js</code>. </p>\n<blockquote>\n<p>On Ubuntu console, create the css file</p>\n</blockquote>\n<pre><code>touch index.css\n</code></pre>\n<blockquote>\n<p>Add some styling to your css file, which follows standard CSS rules, for example in this case we will center the video asset which has class name called player:</p>\n</blockquote>\n<pre><code>.player {\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n</code></pre>\n<blockquote>\n<p><code>index.js</code> will look like this:</p>\n</blockquote>\n<pre><code>&#x3C;video controls className=\"player\">\n  &#x3C;source src=\"/video.mp4\" type=\"video/mp4\">\n  &#x3C;/source>\n&#x3C;/video>\n</code></pre>\n<blockquote>\n<p>Open your <code>index.js</code> file and import your CSS to your JS file:</p>\n</blockquote>\n<pre><code>import \"/index.css\";\n</code></pre>\n<p><strong>2)</strong> Use styling inline in JS file. </p>\n<blockquote>\n<p>Open your <code>index.js</code> file. In the tag where you want to apply your styles write <code><code>style={{}}</code></code> and add your style in between of the brackets. First pair of brackets means we are injecting JSX to the HTML, second pair of brackets means that what we are inputting there is in fact an object. Multiple styles needs to be separated by comma (just like in any other object). Please make sure you do not type styles (plural) instead of style (singular). Correct is style (singular). Please make sure that everything that in CSS uses minus (example: margin-left) must be inline without the minus and camelCased (example: marginLeft). Plus there must always be quotation marks even if in the CSS there wouldn't be. Full example:</p>\n</blockquote>\n<pre><code>&#x3C;video  style={{width:\"500px\", display: \"block\", marginLeft: \"auto\", marginRight:\"auto\"}} controls>\n</code></pre>"}},{"node":{"id":"7bd29285-1164-576b-9397-2c8dc9a0631c","excerpt":"How to view the source code in browser? Go to Chrome Navigate to your Page -> More tools -> Developer tool -> press Control   Paste this in…","rawMarkdownBody":"\r\n![](https://i.imgur.com/3qgZSlV.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nHow to view the source code in browser?\r\n\r\n> Go to Chrome\r\n\r\n> Navigate to your Page -> More tools -> Developer tool -> press Control  \r\n\r\n> Paste this in front of your https\r\n```\r\nview-source:\r\n```\r\n\r\nExample:\r\n```\r\nview-source:https://addania.github.io/MyProject/\r\n```","frontmatter":{"date":"2019-10-05","title":"View Source","category":"knowledge-base"},"fields":{"slug":"/View_source/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/3qgZSlV.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>How to view the source code in browser?</p>\n<blockquote>\n<p>Go to Chrome</p>\n</blockquote>\n<blockquote>\n<p>Navigate to your Page -> More tools -> Developer tool -> press Control  </p>\n</blockquote>\n<blockquote>\n<p>Paste this in front of your https</p>\n</blockquote>\n<pre><code>view-source:\n</code></pre>\n<p>Example:</p>\n<pre><code>view-source:https://addania.github.io/MyProject/\n</code></pre>"}},{"node":{"id":"ae087928-8fa2-559e-8e79-867739c7d9e3","excerpt":"Just admit it, carousels are simply cool!  :) Sooo, how to make one? Example code to create carousel component with 3 images slideshow is…","rawMarkdownBody":"\r\n![](https://i.imgur.com/qlBACx0.jpg \"Photo by Brett Sayles from Pexels\")\r\n\r\n\r\nJust admit it, carousels are simply cool!  :) Sooo, how to make one? Example code to create carousel component with 3 images slideshow is provided below. \r\n\r\n``` \r\nimport React from \"react\"\r\nimport \"./index.css\";\r\n\r\nexport class Carousel extends React.Component {\r\n  constructor (props){\r\n    super (props);\r\n    this.state = {\r\n      picsForCarousel: [\r\n        \"./img/car1.jpg\",\r\n        \"./img/car2.jpg\",\r\n        \"./img/car3.jpg\"\r\n      ],\r\n      picSelector: 0,\r\n    }\r\n  }\r\n\r\ncomponentDidMount(){\r\n  setTimeout(\r\n    ()=>{\r\n      const number=this.state.picSelector+1;\r\n      this.setState({picSelector: number})},5000)\r\n    }\r\n\r\n  componentDidUpdate(){\r\n      setTimeout(\r\n        ()=>{\r\n          const number=this.state.picSelector+1\r\n          this.setState({picSelector: number})},5000)\r\n        }\r\n\r\n  render (){\r\n    return (\r\n      <div>\r\n      <img src={this.state.picsForCarousel[this.state.picSelector]} style={{\r\n        display: \"block\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        width: \"40%\"\r\n      }} alt=\"\" />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n```\r\n\r\nDid it work? I hope yes. Have fun!","frontmatter":{"date":"2019-10-04","title":"Carousel in React","category":"knowledge-base"},"fields":{"slug":"/Carousel_in_React/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/qlBACx0.jpg\" title=\"Photo by Brett Sayles from Pexels\"></p>\n<p>Just admit it, carousels are simply cool!  :) Sooo, how to make one? Example code to create carousel component with 3 images slideshow is provided below. </p>\n<pre><code>import React from \"react\"\nimport \"./index.css\";\n\nexport class Carousel extends React.Component {\n  constructor (props){\n    super (props);\n    this.state = {\n      picsForCarousel: [\n        \"./img/car1.jpg\",\n        \"./img/car2.jpg\",\n        \"./img/car3.jpg\"\n      ],\n      picSelector: 0,\n    }\n  }\n\ncomponentDidMount(){\n  setTimeout(\n    ()=>{\n      const number=this.state.picSelector+1;\n      this.setState({picSelector: number})},5000)\n    }\n\n  componentDidUpdate(){\n      setTimeout(\n        ()=>{\n          const number=this.state.picSelector+1\n          this.setState({picSelector: number})},5000)\n        }\n\n  render (){\n    return (\n      &#x3C;div>\n      &#x3C;img src={this.state.picsForCarousel[this.state.picSelector]} style={{\n        display: \"block\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        width: \"40%\"\n      }} alt=\"\" />\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<p>Did it work? I hope yes. Have fun!</p>"}},{"node":{"id":"404fda32-86c4-5382-9d92-a266b51a028b","excerpt":"It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Iy5iZXG.jpg \"Photo by Nathan Cowley from Pexels\")\r\n\r\n> It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an easy way how to position image or video tag directly\r\n```\r\nimg{\r\n  display: block;\r\n  margin-right: auto;\r\n  width: 50%\r\n}\r\n```\r\n```\r\nvideo {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: block\r\n}\r\n```\r\n\r\n> Another option is to use margin auto and width. This approach will center an element within its container (relative to the container). Some pre-requisites: \r\n\r\n**1//** Element must be have width smaller than its container. \r\n\r\n**2//** Width of the element must be set\r\n\r\n**3//** Margin should have top and bottom (first value in code below) to be set, for example to 0 or XX pixels\r\n\r\n**4//** Margin for right and left (second value in the code below) should be set to auto (where auto means horizontal margin will be set automatically in order to center the element within its container depending on the width of element and the container)\r\n\r\n```\r\ndiv {\r\n  width: 300px:\r\n  margin: 0px auto;\r\n}\r\n```","frontmatter":{"date":"2019-10-03","title":"How to center an image","category":"knowledge-base"},"fields":{"slug":"/How_to_center_image/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/Iy5iZXG.jpg\" title=\"Photo by Nathan Cowley from Pexels\"></p>\n<blockquote>\n<p>It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an easy way how to position image or video tag directly</p>\n</blockquote>\n<pre><code>img{\n  display: block;\n  margin-right: auto;\n  width: 50%\n}\n</code></pre>\n<pre><code>video {\n  margin-left: auto;\n  margin-right: auto;\n  display: block\n}\n</code></pre>\n<blockquote>\n<p>Another option is to use margin auto and width. This approach will center an element within its container (relative to the container). Some pre-requisites: </p>\n</blockquote>\n<p><strong>1//</strong> Element must be have width smaller than its container. </p>\n<p><strong>2//</strong> Width of the element must be set</p>\n<p><strong>3//</strong> Margin should have top and bottom (first value in code below) to be set, for example to 0 or XX pixels</p>\n<p><strong>4//</strong> Margin for right and left (second value in the code below) should be set to auto (where auto means horizontal margin will be set automatically in order to center the element within its container depending on the width of element and the container)</p>\n<pre><code>div {\n  width: 300px:\n  margin: 0px auto;\n}\n</code></pre>"}},{"node":{"id":"ade4db96-bfff-5e93-b56e-2b2fb16f7b60","excerpt":"Being able to display videos in your website is very cool. Here is how you can easily do it in React apps. Go to pages folder and create vid…","rawMarkdownBody":"\r\n![](https://i.imgur.com/WSj6CoM.jpg \"Photo by Donald Tong from Pexels\")\r\n\r\nBeing able to display videos in your website is very cool. Here is how you can easily do it in React apps.\r\n\r\n> Go to pages folder and create vid subfolder\r\n\r\n> Upload your video there for example called <code>myVideo.mp4</code>\r\n\r\n> Open your <code>index.js</code> files and import your video\r\n\r\n```\r\nimport vid from \"./vid/myVideo.mp4\";\r\n```\r\n\r\n> Create a video tag with source tag. In video tag write controls if you want to display controls like play and pause. In source tag write the src either as a URL where your video is hosted or file path to your imported video. Also add type, in this case video/mp4\r\n\r\n```\r\n<video  controls>\r\n    <source src={vid} type=\"video/mp4\">\r\n    </source>\r\n</video>\r\n```\r\n\r\n> Now how about Gatsby? Gatsby is tricky cause it uses markdown files. Let's see if their official documentation and plug-ins work: https://www.gatsbyjs.com/plugins/gatsby-remark-embed-video/?=video\r\n\r\n> First install this plug-in from the terminal:\r\n\r\n```\r\nnpm i gatsby-remark-embed-video\r\n```\r\n\r\n> Then go to `gatsby-config.js` and add following code:\r\n\r\n```\r\n    {\r\n      resolve: \"gatsby-transformer-remark\",\r\n      options: {\r\n        plugins: [\r\n          {\r\n            resolve: \"gatsby-remark-embed-video\",\r\n            options: {\r\n              width: 800,\r\n              ratio: 1.77, // Optional: Defaults to 16/9 = 1.77\r\n              height: 400, // Optional: Overrides optional.ratio\r\n              related: false, //Optional: Will remove related videos from the end of an embedded YouTube video.\r\n              noIframeBorder: true, //Optional: Disable insertion of <style> border: 0\r\n              loadingStrategy: 'lazy', //Optional: Enable support for lazy-load offscreen iframes. Default is disabled.\r\n              urlOverrides: [\r\n                {\r\n                  id: \"youtube\",\r\n                  embedURL: videoId =>\r\n                    `https://www.youtube-nocookie.com/embed/${videoId}`,\r\n                },\r\n              ], //Optional: Override URL of a service provider, e.g to enable youtube-nocookie support\r\n              containerClass: \"embedVideo-container\", //Optional: Custom CSS class for iframe container, for multiple classes separate them by space\r\n              iframeId: false, //Optional: if true, iframe's id will be set to what is provided after 'video:' (YouTube IFrame player API requires iframe id)\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n```\r\n\r\n> to the module.exports plugins:\r\n\r\n```\r\nmodule.exports = {\r\n  plugins: [\r\n    ...\r\n  ]\r\n}\r\n```\r\n\r\n> then your config file could look something like this:\r\n\r\n```\r\nmodule.exports = {\r\n  /* Your site config here */\r\n  siteMetadata: {\r\n    title: \"Coding Adventures\",\r\n    author: \"Addania\",\r\n    description: `Coding experience blog`,\r\n  },\r\n  pathPrefix: \"/coding\",\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n    `gatsby-transformer-remark`,\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n    `gatsby-plugin-offline`,\r\n    `gatsby-plugin-react-helmet`,\r\n    {\r\n      resolve: \"gatsby-transformer-remark\",\r\n      options: {\r\n        plugins: [\r\n          {\r\n            resolve: \"gatsby-remark-embed-video\",\r\n            options: {\r\n              width: 800,\r\n              ratio: 1.77, // Optional: Defaults to 16/9 = 1.77\r\n              height: 400, // Optional: Overrides optional.ratio\r\n              related: false, //Optional: Will remove related videos from the end of an embedded YouTube video.\r\n              noIframeBorder: true, //Optional: Disable insertion of <style> border: 0\r\n              loadingStrategy: \"lazy\", //Optional: Enable support for lazy-load offscreen iframes. Default is disabled.\r\n              urlOverrides: [\r\n                {\r\n                  id: \"youtube\",\r\n                  embedURL: videoId =>\r\n                    `https://www.youtube-nocookie.com/embed/${videoId}`,\r\n                },\r\n              ], //Optional: Override URL of a service provider, e.g to enable youtube-nocookie support\r\n              containerClass: \"embedVideo-container\", //Optional: Custom CSS class for iframe container, for multiple classes separate them by space\r\n              iframeId: false, //Optional: if true, iframe's id will be set to what is provided after 'video:' (YouTube IFrame player API requires iframe id)\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\n> Great! Now restart your gatsby-app\r\n\r\n> Find your mark down file and add your video (for example from youtube) like this:\r\n\r\n```\r\n`video: https://www.youtube.com/embed/2Xc9gXyf2G4`\r\n`youtube: https://www.youtube.com/watch?v=2Xc9gXyf2G4`\r\n`youtube: 2Xc9gXyf2G4`\r\n`vimeo: https://vimeo.com/5299404`\r\n`vimeo: 5299404`\r\n`videoPress: https://videopress.com/v/kUJmAcSf`\r\n`videoPress: kUJmAcSf`\r\n`twitch: https://player.twitch.tv/?channel=dakotaz`\r\n`twitch: https://player.twitch.tv/?autoplay=false&video=v273436948`\r\n`twitch: 273436948`\r\n`twitchLive: dakotaz`\r\nvideo: [VideoTitle](https://www.youtube.com/embed/2Xc9gXyf2G4) youtube: [Cool Youtube Video](https://www.youtube.com/watch?v=2Xc9gXyf2G4)\r\n```\r\n\r\n> Let's test this here:\r\n\r\n`video: https://www.youtube.com/watch?v=ZfZrHWklJdI&ab_channel=BestofMovies%26TV`\r\n","frontmatter":{"date":"2019-10-02","title":"Add video assets to React","category":"knowledge-base"},"fields":{"slug":"/Video_assets_in_React_and_Gatsby/"},"timeToRead":3,"html":"<p><img src=\"https://i.imgur.com/WSj6CoM.jpg\" title=\"Photo by Donald Tong from Pexels\"></p>\n<p>Being able to display videos in your website is very cool. Here is how you can easily do it in React apps.</p>\n<blockquote>\n<p>Go to pages folder and create vid subfolder</p>\n</blockquote>\n<blockquote>\n<p>Upload your video there for example called <code>myVideo.mp4</code></p>\n</blockquote>\n<blockquote>\n<p>Open your <code>index.js</code> files and import your video</p>\n</blockquote>\n<pre><code>import vid from \"./vid/myVideo.mp4\";\n</code></pre>\n<blockquote>\n<p>Create a video tag with source tag. In video tag write controls if you want to display controls like play and pause. In source tag write the src either as a URL where your video is hosted or file path to your imported video. Also add type, in this case video/mp4</p>\n</blockquote>\n<pre><code>&#x3C;video  controls>\n    &#x3C;source src={vid} type=\"video/mp4\">\n    &#x3C;/source>\n&#x3C;/video>\n</code></pre>\n<blockquote>\n<p>Now how about Gatsby? Gatsby is tricky cause it uses markdown files. Let's see if their official documentation and plug-ins work: <a href=\"https://www.gatsbyjs.com/plugins/gatsby-remark-embed-video/?=video\">https://www.gatsbyjs.com/plugins/gatsby-remark-embed-video/?=video</a></p>\n</blockquote>\n<blockquote>\n<p>First install this plug-in from the terminal:</p>\n</blockquote>\n<pre><code>npm i gatsby-remark-embed-video\n</code></pre>\n<blockquote>\n<p>Then go to <code>gatsby-config.js</code> and add following code:</p>\n</blockquote>\n<pre><code>    {\n      resolve: \"gatsby-transformer-remark\",\n      options: {\n        plugins: [\n          {\n            resolve: \"gatsby-remark-embed-video\",\n            options: {\n              width: 800,\n              ratio: 1.77, // Optional: Defaults to 16/9 = 1.77\n              height: 400, // Optional: Overrides optional.ratio\n              related: false, //Optional: Will remove related videos from the end of an embedded YouTube video.\n              noIframeBorder: true, //Optional: Disable insertion of &#x3C;style> border: 0\n              loadingStrategy: 'lazy', //Optional: Enable support for lazy-load offscreen iframes. Default is disabled.\n              urlOverrides: [\n                {\n                  id: \"youtube\",\n                  embedURL: videoId =>\n                    `https://www.youtube-nocookie.com/embed/${videoId}`,\n                },\n              ], //Optional: Override URL of a service provider, e.g to enable youtube-nocookie support\n              containerClass: \"embedVideo-container\", //Optional: Custom CSS class for iframe container, for multiple classes separate them by space\n              iframeId: false, //Optional: if true, iframe's id will be set to what is provided after 'video:' (YouTube IFrame player API requires iframe id)\n            },\n          },\n        ],\n      },\n    },\n</code></pre>\n<blockquote>\n<p>to the module.exports plugins:</p>\n</blockquote>\n<pre><code>module.exports = {\n  plugins: [\n    ...\n  ]\n}\n</code></pre>\n<blockquote>\n<p>then your config file could look something like this:</p>\n</blockquote>\n<pre><code>module.exports = {\n  /* Your site config here */\n  siteMetadata: {\n    title: \"Coding Adventures\",\n    author: \"Addania\",\n    description: `Coding experience blog`,\n  },\n  pathPrefix: \"/coding\",\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n    `gatsby-transformer-remark`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n    `gatsby-plugin-offline`,\n    `gatsby-plugin-react-helmet`,\n    {\n      resolve: \"gatsby-transformer-remark\",\n      options: {\n        plugins: [\n          {\n            resolve: \"gatsby-remark-embed-video\",\n            options: {\n              width: 800,\n              ratio: 1.77, // Optional: Defaults to 16/9 = 1.77\n              height: 400, // Optional: Overrides optional.ratio\n              related: false, //Optional: Will remove related videos from the end of an embedded YouTube video.\n              noIframeBorder: true, //Optional: Disable insertion of &#x3C;style> border: 0\n              loadingStrategy: \"lazy\", //Optional: Enable support for lazy-load offscreen iframes. Default is disabled.\n              urlOverrides: [\n                {\n                  id: \"youtube\",\n                  embedURL: videoId =>\n                    `https://www.youtube-nocookie.com/embed/${videoId}`,\n                },\n              ], //Optional: Override URL of a service provider, e.g to enable youtube-nocookie support\n              containerClass: \"embedVideo-container\", //Optional: Custom CSS class for iframe container, for multiple classes separate them by space\n              iframeId: false, //Optional: if true, iframe's id will be set to what is provided after 'video:' (YouTube IFrame player API requires iframe id)\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n</code></pre>\n<blockquote>\n<p>Great! Now restart your gatsby-app</p>\n</blockquote>\n<blockquote>\n<p>Find your mark down file and add your video (for example from youtube) like this:</p>\n</blockquote>\n<pre><code>`video: https://www.youtube.com/embed/2Xc9gXyf2G4`\n`youtube: https://www.youtube.com/watch?v=2Xc9gXyf2G4`\n`youtube: 2Xc9gXyf2G4`\n`vimeo: https://vimeo.com/5299404`\n`vimeo: 5299404`\n`videoPress: https://videopress.com/v/kUJmAcSf`\n`videoPress: kUJmAcSf`\n`twitch: https://player.twitch.tv/?channel=dakotaz`\n`twitch: https://player.twitch.tv/?autoplay=false&#x26;video=v273436948`\n`twitch: 273436948`\n`twitchLive: dakotaz`\nvideo: [VideoTitle](https://www.youtube.com/embed/2Xc9gXyf2G4) youtube: [Cool Youtube Video](https://www.youtube.com/watch?v=2Xc9gXyf2G4)\n</code></pre>\n<blockquote>\n<p>Let's test this here:</p>\n</blockquote>\n<p>\n        <div class=\"embedVideo-container\">\n            <iframe\n              title=\"\"\n              width=\"800\"\n              height=\"400\"\n              src=\"https://www.youtube-nocookie.com/embed/ZfZrHWklJdI?rel=0\"\n              class=\"embedVideo-iframe\"\n              style=\"border:0\"\n              \n              \n              loading=\"lazy\"\n              allowfullscreen\n\t      sandbox=\"allow-same-origin allow-scripts allow-popups\"\n            ></iframe>\n        </div></p>"}},{"node":{"id":"ea0868fe-452f-5d5a-8627-d6269c28e86b","excerpt":"And here is how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools Go to: Find your favourite…","rawMarkdownBody":"\r\n![](https://i.imgur.com/W5e4AEm.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nAnd here is how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools\r\n\r\n> Go to:\r\n```\r\nhttps://www.w3schools.com/howto/howto_google_fonts.asp\r\n```\r\n> Find your favourite font, for example Mansalva\r\n\r\n> Click on button try it\r\n\r\n> Find URL in the HTML document: https://fonts.googleapis.com/css?family=Mansalva\r\n\r\n> Create a new CSS file for example <code>index.css</code>\r\n\r\n> Populate the file with this code\r\n```\r\n@import url('https://fonts.googleapis.com/css?family=Mansalva');\r\n```\r\n> Add the styling for a body tag\r\n```\r\nbody {\r\n  font-family: 'Mansalva';\r\n}\r\n```\r\n> Alternatively use <code>className</code> to define a style\r\n```\r\n.fonts {\r\n  font-family: 'Mansalva';\r\n}\r\n```\r\n> Go to your <code>index.js</code>\r\n\r\n> Import your index.css please note that <code>index.js</code> and <code>index.css</code> need to be in the same folder\r\n```\r\nimport \"./index.css\"\r\n```\r\n> Add the className fonts to your tag where you want to apply the style, for example:\r\n```\r\n<div className=\"fonts\">\r\n```","frontmatter":{"date":"2019-10-01","title":"Google Fonts in React","category":"knowledge-base"},"fields":{"slug":"/Google_fonts_in_React/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/W5e4AEm.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>And here is how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools</p>\n<blockquote>\n<p>Go to:</p>\n</blockquote>\n<pre><code>https://www.w3schools.com/howto/howto_google_fonts.asp\n</code></pre>\n<blockquote>\n<p>Find your favourite font, for example Mansalva</p>\n</blockquote>\n<blockquote>\n<p>Click on button try it</p>\n</blockquote>\n<blockquote>\n<p>Find URL in the HTML document: <a href=\"https://fonts.googleapis.com/css?family=Mansalva\">https://fonts.googleapis.com/css?family=Mansalva</a></p>\n</blockquote>\n<blockquote>\n<p>Create a new CSS file for example <code>index.css</code></p>\n</blockquote>\n<blockquote>\n<p>Populate the file with this code</p>\n</blockquote>\n<pre><code>@import url('https://fonts.googleapis.com/css?family=Mansalva');\n</code></pre>\n<blockquote>\n<p>Add the styling for a body tag</p>\n</blockquote>\n<pre><code>body {\n  font-family: 'Mansalva';\n}\n</code></pre>\n<blockquote>\n<p>Alternatively use <code>className</code> to define a style</p>\n</blockquote>\n<pre><code>.fonts {\n  font-family: 'Mansalva';\n}\n</code></pre>\n<blockquote>\n<p>Go to your <code>index.js</code></p>\n</blockquote>\n<blockquote>\n<p>Import your index.css please note that <code>index.js</code> and <code>index.css</code> need to be in the same folder</p>\n</blockquote>\n<pre><code>import \"./index.css\"\n</code></pre>\n<blockquote>\n<p>Add the className fonts to your tag where you want to apply the style, for example:</p>\n</blockquote>\n<pre><code>&#x3C;div className=\"fonts\">\n</code></pre>"}},{"node":{"id":"fc271ffb-c7f4-5d2a-8e65-b4ad2e65bcb7","excerpt":"Step-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages Create empty GitHub repository, for example called test…","rawMarkdownBody":"\r\n![](https://i.imgur.com/NAMuzl3.jpg \"Photo by Designecologist from Pexels\")\r\n\r\nStep-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages\r\n\r\n> Create empty GitHub repository, for example called test2. It should be a public repository and do NOT initialize this repository with README\r\n\r\n> Start Ubuntu Command line\r\n\r\n> Navigate to your projects folder\r\n```\r\ncd projects\r\n```\r\n\r\n> Create new project\r\n```\r\ngatsby new test2 https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n```\r\n> Go to your new project folder\r\n```\r\ncd test2\r\n```\r\n> Install gh-pages. You need to do it for each single project. Don't get fooled like me that I thought I installed this package before. You need to be in your project folder and install it there. If the installation is successful you should get a message something like this \"added 17 packages from 6 contributors and audited 19803 packages in 18.616s found 0 vulnerabilities\"\r\n```\r\nnpm install gh-pages --save-dev\r\n```\r\n> Add your project files to **LOCAL** git\r\n```\r\ngit add .\r\n```\r\n\r\n> If above command fails, then you first need to initialize empty git repository with:\r\n```\r\ngit init\r\n```\r\n\r\n> Then try again:\r\n```\r\ngit add .\r\n```\r\n\r\n> Commit your project files to **LOCAL** git\r\n```\r\ngit commit -m \"first commit\"\r\n```\r\n> If this commit fails because of \"tell me who you are\", then proceed here: https://addania.github.io/coding/Tell_Me_Who_You_Are/\r\n\r\n> Afer above steps, try again:\r\n```\r\ngit commit -m \"first commit\"\r\n```\r\n\r\n> Create a **REMOTE** repository\r\n```\r\ngit remote add origin git@github.com:addania/test2.git \r\n```\r\n> Push to **REMOTE** repository (you will be asked for you passphrase)\r\n```\r\ngit push origin master\r\n```\r\n\r\n> If you are publishing to your account URL, for example: https://addania.github.io without any prefix, then skip this step. But if on GitHub pages your URL will have a prefix, we also need to add this prefix to the Gatsby files. For example, Github pages which use repository name as prefix:\r\n```\r\nhttps://addania.github.io/test2\r\n```\r\ntest2 is name of repository and it comes AFTER  https://addania.github.io, therefore /test2 is a prefix and Gatsby needs to build files, so that they add the prefix. If this is the case you also need to do next 2 steps:\r\n\r\n> 1/ Open <code>gatsby-config.js</code> and paste following (don't forget about the slash):\r\n```\r\nmodule.exports = {\r\npathPrefix: \"/test2\",\r\n}\r\n```\r\n> 2/ Open <code>package.json</code> file and add --prefix-paths like so:\r\n```\r\n\"build\": \"gatsby build --prefix-paths\",\r\n```\r\n\r\n```\r\n\"deploy\": \"gatsby build --prefix-paths && gh-pages -d public -b master\",\r\n```\r\n\r\n> Add your project files to **LOCAL** git\r\n```\r\ngit add .\r\n```\r\n> Commit your project files to **LOCAL** git\r\n```\r\ngit commit -m \"second commit\"\r\n```\r\n> Push to **REMOTE** repository (you will be asked for you passphrase)\r\n```\r\ngit push origin master\r\n```\r\n\r\n> Create gh-pages branch\r\n```\r\ngit checkout -b gh-pages\r\n```\r\n\r\n> Run the <code>npm deploy</code> command. You will need to add your passphrase (twice). It should result in success and last word should be \"Published\"\r\n```\r\nnpm run deploy\r\n```\r\n> Go to your Github repository -> Settings\r\n\r\n> Scroll down to Github pages and change Source to gh-pages branch.\r\n\r\n> Click on your Github pages link: in my case: https://addania.github.io/test2/. You should see your website. Please note that sometimes you need to wait for couple of minutes (around 5 minutes) to see your website, most likely you will only see Gatsby welcome page\r\n\r\n> PLEASE NOTE\r\n\r\nWe will use gh-pages branch to publish the website and we will use master branch to upload / download our code\r\n\r\n> If you want to make changes to your code then you need to push it to the master branch. This will upload new version of your code to master branch but it will still not be however reflected in your published page\r\n```\r\ngit push origin master\r\n```\r\n> To make changes to be reflected on your published page you need to run npm again\r\n```\r\nnpm run deploy\r\n```\r\n> PLEASE NOTE\r\n\r\nIn the Project folder called Pages you can only store pages to your website, if you put there some components which you import to your index.js it will break the <code>npm run deploy</code> with the error that for example <code>header.js</code> must be a valid React component. How to fix it? Remove all your components from pages folder and create a folder called components in the <code>src</code> folder. Put all your components there. Then import your header.js to your <code>index.js</code> by \r\n```\r\nimport { Header } from \"../components/header.js\"\r\n```\r\nThen you are able to run:\r\n```\r\nnpm run deploy\r\n```\r\n\r\n> PLEASE NOTE\r\n\r\nALWAYS commit code to the repository and then nmp run deploy!! You will avoid lots of problems!! If push and <code>npm run deploy</code> are not in synch you probably will have lots of problems with the page.\r\n\r\n> PLEASE NOTE\r\n\r\nThe good practise is to use master branch for pushing your code and to use gh-pages branch for publishing.\r\n\r\n**Additionally:**\r\n\r\n> Brose your typography in typography.js here:\r\nhttps://kyleamathews.github.io/typography.js/\r\n\r\n> Choose the one you like\r\n\r\n> Install your typography:\r\n```\r\nnpm install --save gatsby-plugin-typography typography react-typography typography-theme-fairy-gates gatsby-plugin-emotion @emotion/core\r\n```\r\n\r\n> Another example:\r\n```\r\nnpm install --save gatsby-plugin-typography typography react-typography typography-theme-moraga gatsby-plugin-emotion @emotion/core\r\n```\r\n\r\n> Add typography to your <code>package.json</code>\r\n```\r\nmodule.exports = {\r\n  plugins: [\r\n    `gatsby-plugin-emotion`,\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\n> Under folder <code>src</code> create a new folder utils\r\n\r\n> In <code>src/utils</code> folder create a new <code>typography.js</code> file\r\n\r\n> Input this code into the <code>typography.js</code>\r\n```\r\nimport Typography from \"typography\"\r\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\r\nconst typography = new Typography(fairyGateTheme)\r\nexport const { scale, rhythm, options } = typography\r\nexport default typography\r\n```\r\n\r\n> Another example:\r\n```\r\nimport Typography from \"typography\"\r\nimport moragaTheme from \"typography-theme-moraga\"\r\nconst typography = new Typography(moragaTheme)\r\nexport const { scale, rhythm, options } = typography\r\nexport default typography\r\n```\r\n\r\n> Install source filesystem\r\n```\r\nnpm install --save gatsby-source-filesystem\r\n```\r\n\r\n> Add following code to <code>gatsby-config.js</code>\r\n```\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n```\r\n\r\n> Add transformer remark to be able to work with markdown files:\r\n```\r\nnpm install --save gatsby-transformer-remark\r\n```\r\n\r\n> Add this code to gatsby-config to module exports plugins:\r\n```\r\n`gatsby-transformer-remark`,\r\n```\r\n> Create <code>gatbsy-node.js</code> file in the same folder as <code>gatsby-config</code>\r\n\r\n> Add this code to gatsby node:\r\n```\r\nconst path= require(`path`)\r\nconst { createFilePath } = require(`gatsby-source-filesystem`)\r\nexports.onCreateNode = ({ node, getNode, actions }) => {\r\n  const { createNodeField } = actions\r\n  if (node.internal.type === `MarkdownRemark`) {\r\n    const slug = createFilePath({ node, getNode, basePath: `pages` })\r\n    createNodeField({\r\n      node,\r\n      name: `slug`,\r\n      value: slug,\r\n    })\r\n  }\r\n}\r\nexports.createPages = async ({ graphql, actions }) => {\r\n   \r\nconst {createPage} = actions\r\n    const result = await graphql(`\r\n      query {\r\n        allMarkdownRemark {\r\n          edges {\r\n            node {\r\n              fields {\r\n                slug\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `)\r\n    result.data.allMarkdownRemark.edges.forEach(({node}) =>{\r\n       createPage({\r\n           path: node.fields.slug,\r\n           component: path.resolve(`./src/templates/blog-post.js`),\r\n           context: {\r\n             slug: node.fields.slug,\r\n           },\r\n       })\r\n\r\n    })\r\n  }\r\n```\r\n\r\n> Install manifest (if it throws error, then skip):\r\n```\r\nnpm install --save gatsby-plugin-manifest\r\n```\r\n\r\n> Add manifest plugin to <code>gatsby-config.js</code> (this can throw error, then skip)\r\n```\r\nCopygatsby-config.js: copy code to clipboard\r\n{\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-manifest`,\r\n      options: {\r\n        name: `GatsbyJS`,\r\n        short_name: `GatsbyJS`,\r\n        start_url: `/`,\r\n        background_color: `#6b37bf`,\r\n        theme_color: `#6b37bf`,\r\n        // Enables \"Add to Homescreen\" prompt and disables browser UI (including back button)\r\n        // see https://developers.google.com/web/fundamentals/web-app-manifest/#display\r\n        display: `standalone`,\r\n        icon: `src/images/icon.png`, // This path is relative to the root of the site.\r\n      },\r\n    },\r\n  ]\r\n}\r\n```\r\n\r\n> Add offline support by installing:\r\n```\r\nnpm install --save gatsby-plugin-offline\r\n```\r\n\r\n> Add offline support to <code>gatsby-config</code> to module export plugins:\r\n```\r\n`gatsby-plugin-offline`,\r\n```\r\n\r\n> Add react helmet by installing:\r\n```\r\nnpm install --save gatsby-plugin-react-helmet react-helmet\r\n```\r\n\r\n> Add react helmet to <code>gatsby-config</code>:\r\n\r\n```\r\n`gatsby-plugin-react-helmet`,\r\n```\r\n\r\n> Plus site metadata should have author and description:\r\n```\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: `Pandas Eating Lots`,\r\n    description: `A simple description about pandas eating lots...`,\r\n    author: `gatsbyjs`,\r\n  },\r\n```\r\n\r\n> Install React Bootstrap and Bootstrap:\r\n```\r\nnpm install react-bootstrap bootstrap\r\n```\r\n\r\n\r\n>Useful Sources:\r\n\r\nhttps://iolivia.me/posts/7-gatsby-deploy-github/\r\n\r\nhttps://www.gatsbyjs.org/tutorial/part-four/\r\n\r\n","frontmatter":{"date":"2019-09-30","title":"Publish your Gatsby website to Github Pages","category":"knowledge-base"},"fields":{"slug":"/Publish_your_Gatsby_site_to_GitHubpages/"},"timeToRead":7,"html":"<p><img src=\"https://i.imgur.com/NAMuzl3.jpg\" title=\"Photo by Designecologist from Pexels\"></p>\n<p>Step-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages</p>\n<blockquote>\n<p>Create empty GitHub repository, for example called test2. It should be a public repository and do NOT initialize this repository with README</p>\n</blockquote>\n<blockquote>\n<p>Start Ubuntu Command line</p>\n</blockquote>\n<blockquote>\n<p>Navigate to your projects folder</p>\n</blockquote>\n<pre><code>cd projects\n</code></pre>\n<blockquote>\n<p>Create new project</p>\n</blockquote>\n<pre><code>gatsby new test2 https://github.com/gatsbyjs/gatsby-starter-hello-world\n</code></pre>\n<blockquote>\n<p>Go to your new project folder</p>\n</blockquote>\n<pre><code>cd test2\n</code></pre>\n<blockquote>\n<p>Install gh-pages. You need to do it for each single project. Don't get fooled like me that I thought I installed this package before. You need to be in your project folder and install it there. If the installation is successful you should get a message something like this \"added 17 packages from 6 contributors and audited 19803 packages in 18.616s found 0 vulnerabilities\"</p>\n</blockquote>\n<pre><code>npm install gh-pages --save-dev\n</code></pre>\n<blockquote>\n<p>Add your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>If above command fails, then you first need to initialize empty git repository with:</p>\n</blockquote>\n<pre><code>git init\n</code></pre>\n<blockquote>\n<p>Then try again:</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Commit your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git commit -m \"first commit\"\n</code></pre>\n<blockquote>\n<p>If this commit fails because of \"tell me who you are\", then proceed here: <a href=\"https://addania.github.io/coding/Tell_Me_Who_You_Are/\">https://addania.github.io/coding/Tell_Me_Who_You_Are/</a></p>\n</blockquote>\n<blockquote>\n<p>Afer above steps, try again:</p>\n</blockquote>\n<pre><code>git commit -m \"first commit\"\n</code></pre>\n<blockquote>\n<p>Create a <strong>REMOTE</strong> repository</p>\n</blockquote>\n<pre><code>git remote add origin git@github.com:addania/test2.git \n</code></pre>\n<blockquote>\n<p>Push to <strong>REMOTE</strong> repository (you will be asked for you passphrase)</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>If you are publishing to your account URL, for example: <a href=\"https://addania.github.io\">https://addania.github.io</a> without any prefix, then skip this step. But if on GitHub pages your URL will have a prefix, we also need to add this prefix to the Gatsby files. For example, Github pages which use repository name as prefix:</p>\n</blockquote>\n<pre><code>https://addania.github.io/test2\n</code></pre>\n<p>test2 is name of repository and it comes AFTER  <a href=\"https://addania.github.io\">https://addania.github.io</a>, therefore /test2 is a prefix and Gatsby needs to build files, so that they add the prefix. If this is the case you also need to do next 2 steps:</p>\n<blockquote>\n<p>1/ Open <code>gatsby-config.js</code> and paste following (don't forget about the slash):</p>\n</blockquote>\n<pre><code>module.exports = {\npathPrefix: \"/test2\",\n}\n</code></pre>\n<blockquote>\n<p>2/ Open <code>package.json</code> file and add --prefix-paths like so:</p>\n</blockquote>\n<pre><code>\"build\": \"gatsby build --prefix-paths\",\n</code></pre>\n<pre><code>\"deploy\": \"gatsby build --prefix-paths &#x26;&#x26; gh-pages -d public -b master\",\n</code></pre>\n<blockquote>\n<p>Add your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Commit your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git commit -m \"second commit\"\n</code></pre>\n<blockquote>\n<p>Push to <strong>REMOTE</strong> repository (you will be asked for you passphrase)</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>Create gh-pages branch</p>\n</blockquote>\n<pre><code>git checkout -b gh-pages\n</code></pre>\n<blockquote>\n<p>Run the <code>npm deploy</code> command. You will need to add your passphrase (twice). It should result in success and last word should be \"Published\"</p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>Go to your Github repository -> Settings</p>\n</blockquote>\n<blockquote>\n<p>Scroll down to Github pages and change Source to gh-pages branch.</p>\n</blockquote>\n<blockquote>\n<p>Click on your Github pages link: in my case: <a href=\"https://addania.github.io/test2/\">https://addania.github.io/test2/</a>. You should see your website. Please note that sometimes you need to wait for couple of minutes (around 5 minutes) to see your website, most likely you will only see Gatsby welcome page</p>\n</blockquote>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>We will use gh-pages branch to publish the website and we will use master branch to upload / download our code</p>\n<blockquote>\n<p>If you want to make changes to your code then you need to push it to the master branch. This will upload new version of your code to master branch but it will still not be however reflected in your published page</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>To make changes to be reflected on your published page you need to run npm again</p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>In the Project folder called Pages you can only store pages to your website, if you put there some components which you import to your index.js it will break the <code>npm run deploy</code> with the error that for example <code>header.js</code> must be a valid React component. How to fix it? Remove all your components from pages folder and create a folder called components in the <code>src</code> folder. Put all your components there. Then import your header.js to your <code>index.js</code> by </p>\n<pre><code>import { Header } from \"../components/header.js\"\n</code></pre>\n<p>Then you are able to run:</p>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>ALWAYS commit code to the repository and then nmp run deploy!! You will avoid lots of problems!! If push and <code>npm run deploy</code> are not in synch you probably will have lots of problems with the page.</p>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>The good practise is to use master branch for pushing your code and to use gh-pages branch for publishing.</p>\n<p><strong>Additionally:</strong></p>\n<blockquote>\n<p>Brose your typography in typography.js here:\n<a href=\"https://kyleamathews.github.io/typography.js/\">https://kyleamathews.github.io/typography.js/</a></p>\n</blockquote>\n<blockquote>\n<p>Choose the one you like</p>\n</blockquote>\n<blockquote>\n<p>Install your typography:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-typography typography react-typography typography-theme-fairy-gates gatsby-plugin-emotion @emotion/core\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-typography typography react-typography typography-theme-moraga gatsby-plugin-emotion @emotion/core\n</code></pre>\n<blockquote>\n<p>Add typography to your <code>package.json</code></p>\n</blockquote>\n<pre><code>module.exports = {\n  plugins: [\n    `gatsby-plugin-emotion`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n}\n</code></pre>\n<blockquote>\n<p>Under folder <code>src</code> create a new folder utils</p>\n</blockquote>\n<blockquote>\n<p>In <code>src/utils</code> folder create a new <code>typography.js</code> file</p>\n</blockquote>\n<blockquote>\n<p>Input this code into the <code>typography.js</code></p>\n</blockquote>\n<pre><code>import Typography from \"typography\"\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\nconst typography = new Typography(fairyGateTheme)\nexport const { scale, rhythm, options } = typography\nexport default typography\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>import Typography from \"typography\"\nimport moragaTheme from \"typography-theme-moraga\"\nconst typography = new Typography(moragaTheme)\nexport const { scale, rhythm, options } = typography\nexport default typography\n</code></pre>\n<blockquote>\n<p>Install source filesystem</p>\n</blockquote>\n<pre><code>npm install --save gatsby-source-filesystem\n</code></pre>\n<blockquote>\n<p>Add following code to <code>gatsby-config.js</code></p>\n</blockquote>\n<pre><code>  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n</code></pre>\n<blockquote>\n<p>Add transformer remark to be able to work with markdown files:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-transformer-remark\n</code></pre>\n<blockquote>\n<p>Add this code to gatsby-config to module exports plugins:</p>\n</blockquote>\n<pre><code>`gatsby-transformer-remark`,\n</code></pre>\n<blockquote>\n<p>Create <code>gatbsy-node.js</code> file in the same folder as <code>gatsby-config</code></p>\n</blockquote>\n<blockquote>\n<p>Add this code to gatsby node:</p>\n</blockquote>\n<pre><code>const path= require(`path`)\nconst { createFilePath } = require(`gatsby-source-filesystem`)\nexports.onCreateNode = ({ node, getNode, actions }) => {\n  const { createNodeField } = actions\n  if (node.internal.type === `MarkdownRemark`) {\n    const slug = createFilePath({ node, getNode, basePath: `pages` })\n    createNodeField({\n      node,\n      name: `slug`,\n      value: slug,\n    })\n  }\n}\nexports.createPages = async ({ graphql, actions }) => {\n   \nconst {createPage} = actions\n    const result = await graphql(`\n      query {\n        allMarkdownRemark {\n          edges {\n            node {\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    `)\n    result.data.allMarkdownRemark.edges.forEach(({node}) =>{\n       createPage({\n           path: node.fields.slug,\n           component: path.resolve(`./src/templates/blog-post.js`),\n           context: {\n             slug: node.fields.slug,\n           },\n       })\n\n    })\n  }\n</code></pre>\n<blockquote>\n<p>Install manifest (if it throws error, then skip):</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-manifest\n</code></pre>\n<blockquote>\n<p>Add manifest plugin to <code>gatsby-config.js</code> (this can throw error, then skip)</p>\n</blockquote>\n<pre><code>Copygatsby-config.js: copy code to clipboard\n{\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `GatsbyJS`,\n        short_name: `GatsbyJS`,\n        start_url: `/`,\n        background_color: `#6b37bf`,\n        theme_color: `#6b37bf`,\n        // Enables \"Add to Homescreen\" prompt and disables browser UI (including back button)\n        // see https://developers.google.com/web/fundamentals/web-app-manifest/#display\n        display: `standalone`,\n        icon: `src/images/icon.png`, // This path is relative to the root of the site.\n      },\n    },\n  ]\n}\n</code></pre>\n<blockquote>\n<p>Add offline support by installing:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-offline\n</code></pre>\n<blockquote>\n<p>Add offline support to <code>gatsby-config</code> to module export plugins:</p>\n</blockquote>\n<pre><code>`gatsby-plugin-offline`,\n</code></pre>\n<blockquote>\n<p>Add react helmet by installing:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-react-helmet react-helmet\n</code></pre>\n<blockquote>\n<p>Add react helmet to <code>gatsby-config</code>:</p>\n</blockquote>\n<pre><code>`gatsby-plugin-react-helmet`,\n</code></pre>\n<blockquote>\n<p>Plus site metadata should have author and description:</p>\n</blockquote>\n<pre><code>module.exports = {\n  siteMetadata: {\n    title: `Pandas Eating Lots`,\n    description: `A simple description about pandas eating lots...`,\n    author: `gatsbyjs`,\n  },\n</code></pre>\n<blockquote>\n<p>Install React Bootstrap and Bootstrap:</p>\n</blockquote>\n<pre><code>npm install react-bootstrap bootstrap\n</code></pre>\n<blockquote>\n<p>Useful Sources:</p>\n</blockquote>\n<p><a href=\"https://iolivia.me/posts/7-gatsby-deploy-github/\">https://iolivia.me/posts/7-gatsby-deploy-github/</a></p>\n<p><a href=\"https://www.gatsbyjs.org/tutorial/part-four/\">https://www.gatsbyjs.org/tutorial/part-four/</a></p>"}},{"node":{"id":"a3bbe3d6-cbbf-5cd0-ad72-2fe3a8190467","excerpt":"Advantages of Node.js 1/ Creates Runtime Environments (local webserver) Node.js is a JavaScript runtime environment. It allows JavaScript to…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Y2H1vQk.png \"NodeJS logo\")\r\n\r\nAdvantages of Node.js\r\n\r\n**1/** Creates Runtime Environments (local webserver)\r\n\r\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.\r\n\r\n**2/** Enables to install cool packages(=libraries=modules)\r\n\r\nNode.js comes automatically with NPM (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configurating, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. NPM I can only install packages which run in browser. Example of packages: \r\n\r\n> **react** - allows access to all React modules/features like <code>React.Component</code>\r\n\r\n> **reactDOM** - allows to generate React in the browser (unless I want to use script tags in html), for example: <code>ReactDOM.render()</code>\r\n\r\n> **create-react-app** - enables to setup initial React files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes React and ReactDOM packages\r\n\r\n> **gatsby** - allows to build websites with multiple pages easier. It ALSO automatically includes React and ReactDOM packages\r\n\r\nEach package needs to be installed by NPM individually.\r\n\r\n2 ways how to download a package/any other software:\r\n\r\n**A)** Go to webside -> click download -> run installer and install the software\r\n\r\nor\r\n\r\n**B)** Use package managers - package manager MUST be run in command line\r\n\r\nCommands:\r\n\r\n> To install your favourite package\r\n```\r\nnpm install react\r\nnpm install reactDOM\r\nnpm install create-react-app\r\nnpm install gatsby\r\n```\r\n> In order to see which packages=libraries=modules my project is using I search for file called <code>package.json</code>. In the file there will be an object called dependencies \r\n```\r\n  \"dependencies\": {\r\n    \"gatsby\": \"^2.15.28\",\r\n    \"react\": \"^16.10.0\",\r\n    \"react-dom\": \"^16.10.0\"    \r\n  },\r\n```\r\n\r\n> To read a manual of NPM\r\n```\r\nman npm\r\n```\r\n> To read the help of NPM\r\n```\r\nnpm help\r\n```\r\n","frontmatter":{"date":"2019-09-29","title":"Intro to NodeJS","category":"knowledge-base"},"fields":{"slug":"/Intro_to_NodeJS/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/Y2H1vQk.png\" title=\"NodeJS logo\"></p>\n<p>Advantages of Node.js</p>\n<p><strong>1/</strong> Creates Runtime Environments (local webserver)</p>\n<p>Node.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.</p>\n<p><strong>2/</strong> Enables to install cool packages(=libraries=modules)</p>\n<p>Node.js comes automatically with NPM (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configurating, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. NPM I can only install packages which run in browser. Example of packages: </p>\n<blockquote>\n<p><strong>react</strong> - allows access to all React modules/features like <code>React.Component</code></p>\n</blockquote>\n<blockquote>\n<p><strong>reactDOM</strong> - allows to generate React in the browser (unless I want to use script tags in html), for example: <code>ReactDOM.render()</code></p>\n</blockquote>\n<blockquote>\n<p><strong>create-react-app</strong> - enables to setup initial React files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes React and ReactDOM packages</p>\n</blockquote>\n<blockquote>\n<p><strong>gatsby</strong> - allows to build websites with multiple pages easier. It ALSO automatically includes React and ReactDOM packages</p>\n</blockquote>\n<p>Each package needs to be installed by NPM individually.</p>\n<p>2 ways how to download a package/any other software:</p>\n<p><strong>A)</strong> Go to webside -> click download -> run installer and install the software</p>\n<p>or</p>\n<p><strong>B)</strong> Use package managers - package manager MUST be run in command line</p>\n<p>Commands:</p>\n<blockquote>\n<p>To install your favourite package</p>\n</blockquote>\n<pre><code>npm install react\nnpm install reactDOM\nnpm install create-react-app\nnpm install gatsby\n</code></pre>\n<blockquote>\n<p>In order to see which packages=libraries=modules my project is using I search for file called <code>package.json</code>. In the file there will be an object called dependencies </p>\n</blockquote>\n<pre><code>  \"dependencies\": {\n    \"gatsby\": \"^2.15.28\",\n    \"react\": \"^16.10.0\",\n    \"react-dom\": \"^16.10.0\"    \n  },\n</code></pre>\n<blockquote>\n<p>To read a manual of NPM</p>\n</blockquote>\n<pre><code>man npm\n</code></pre>\n<blockquote>\n<p>To read the help of NPM</p>\n</blockquote>\n<pre><code>npm help\n</code></pre>"}},{"node":{"id":"7e62d8ed-53eb-56ba-b818-08c2f8f6ecfd","excerpt":"React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing…","rawMarkdownBody":"\r\n![](https://i.imgur.com/4tBPaPE.png \"React logo\")\r\n\r\nReact is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having HTML, CSS and Javascript in one file. \r\n\r\nReact is a closed environmnet and can be run in browser, on your local machine (your PC) or on phones (such as Android, etc).\r\n\r\nWhen I am developing a website in React I need to be able to see what I am building. I can do these:\r\n\r\n**A/** doubleclick on my html file (index.html) and open it in browser. However, it won't really work. Other pages will not load, because I am only openineg filepath in browser.\r\n\r\n**B/** run a web server locally on my machine (pc)\r\n\r\nIn order to run a web server on my machine, I need to install <code>node.js</code>.\r\n\r\nIn order to be able to use React in a **BROWSER** I need a package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:\r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n```\r\n> More on this in official documentation here:\r\n\r\nhttps://reactjs.org/docs/add-react-to-a-website.html\r\n\r\nThese script tags in html are equivalent to a file in my project called <code>package.json</code> which is automatically provided by Gatsby:\r\n```\r\n\"dependencies\": {\r\n    \"gatsby\": \"^2.15.28\",\r\n    \"react\": \"^16.10.0\",\r\n    \"react-dom\": \"^16.10.0\"\r\n},\r\n```\r\n\r\n> There are 2 ways how I can import React. \r\n\r\n**A)** I need to  import React:\r\n```\r\nimport React from \"react\";\r\n```\r\n>Then I'm using:\r\n```\r\nclass MyClass extends React.Component(){\r\n\r\n}\r\n```\r\n\r\n**B)** I can only import { Component } from \"react\"\r\n```\r\nimport { Component } from \"react\";\r\n```\r\n\r\n>Then Im using:\r\n```\r\nclass MyClass extends Component(){\r\n\r\n}\r\n```\r\n\r\n> I can import ReactDOM in 2 ways. \r\n\r\n**A)** We import everything that is in ReactDOM, all their methods. On of their methods is called render:\r\n``` \r\nimport ReactDOM from \"react-dom\";\r\n```\r\n\r\n> Then I am using this render method:\r\n```\r\nReactDOM.render(<p>Hi</p>, document.getElementById(\"app\"));\r\n```\r\n**B)** In this way we are only cherry-picking to import one specific method from reactDOM and this method is called render:\r\n```\r\nimport { render } from\"react-dom\";\r\n``` \r\n> Then I am using this render method:\r\n```\r\nrender(<p>Hi</p>, document.getElementById(\"app\"));\r\n```\r\n\r\n> In render method we have 2 possibilities to generate our component in a specific DOM element:\r\n\r\n**A)** One way is to use document.getElementById\r\n```\r\nrender(<p>Hi</p>, document.getElementById(\"app\"));\r\n```\r\n\r\n**B** Another way is to use document.querySelector:\r\n```\r\nrender(<p>Hi</p>, document.querySelctor(\"#app\"));\r\n```\r\n\r\n> Within React return statement I can only add parent component:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <p>Hello</p>\r\n    )\r\n  }\r\n}\r\n```\r\n> I cannot write this:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <p>Hello</p>\r\n        <p>World</p>\r\n    )\r\n  }\r\n}\r\n```\r\n> To solve to have paralell tags, we can wrap them in div:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <div>\r\n          <p>Hello</p>\r\n          <p>World</p>\r\n        </div>  \r\n    )\r\n  }\r\n}\r\n```\r\n\r\n> Alternatively if we dont want to wrapt them in divs, we can wrap them in React.Fragment:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <React.Fragment>\r\n          <p>Hello</p>\r\n          <p>World</p>\r\n        </React.Fragment>  \r\n    )\r\n  }\r\n}\r\n```\r\n\r\n**HTML scripts equivalent to React**\r\n\r\nCreate a new file with .html extention. For example: site.html\r\n\r\nYou can open this file in the browser (simply double-clicking on the file). Browser will open up a completely blank page.\r\n\r\nNow we can open it in editor (for example note++, etc) and add a <code>div</code> tag in it id of root:\r\n```\r\n<div id=\"root\">Hi</div>\r\n\r\n```\r\n\r\nRefresh the browser and you wil see <code>Hi</code> displayed. But let's remove hard coded <code>Hi</code> and we will play around how we can place other elements within the root div.\r\n\r\nIn HTML in between of script tags, we can write regular Javascript\r\n```\r\n<div id=\"root\"></div>\r\n<script type=\"text/javascript\">\r\n</script>\r\n```\r\n\r\nIn between script tags we will now write a script that will add a new element to the div root\r\n.\r\n\r\nTo target a div with id root, we write <code>document.getElementById</code>\r\n```\r\nconst rootElement = document.getElementById(\"root\");\r\n```\r\n\r\n\r\nTo create a new element we use <code>document.createElement</code>\r\n```\r\nconst element = document.createElement(\"div\");\r\n```\r\n\r\nTo add attributes to our new div, we use following syntax:\r\n```\r\nelement.textContent = \"Hello World!\";\r\nelement.className = \"container\";\r\n```\r\n\r\nIt is equivalent and will eventually  look like:\r\n```\r\n<div className=\"container\">Hello World!</div>\r\n```\r\n\r\nNow we need to add this element to our root div by syntax:\r\n```\r\nrootElement.appendChild(element);\r\n```\r\n\r\nEntire code will look like this:\r\n```\r\n<div id=\"root\"></div>\r\n<script type=\"text/javascript\">\r\nconst rootElement = document.getElementById(\"root\");\r\nconst element = document.createElement(\"div\");\r\nelement.textContent = \"Hello World!\";\r\nelement.className = \"container\";\r\nrootElement.appendChild(element);\r\n</script>\r\n```\r\n\r\nNow we will do the same with REACT.\r\n\r\nFirst we need to import react to our HTML using script tags. Add following to your HTML file:\r\n```\r\n<!-- Load React. -->\r\n<!-- Note: when deploying, replace \"development.js\" with \"production.min.js\". -->\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n```\r\n\r\nNow we will use react to create our elements.\r\n```\r\n<div id=\"root\"></div>\r\n<script type=\"text/javascript\">\r\nconst rootElement = document.getElementById(\"root\");\r\n</script>\r\n```\r\n\r\nIn order to create new element we will use React.createElement which has 3 paramenters:\r\n\r\n**1/** which element it is - div\r\n\r\n**2/** are ther eany atributes - className\r\n\r\n**3/** and the text itself\r\n```\r\nconst element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\");\r\n```\r\n\r\nIn <code>React.createElement</code>, we can have any number of childeren like \"Yuhuu\" there:\r\n```\r\nconst element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\", \"Cool\", \"Hell yeah\");\r\n```\r\n\r\nThe above ones will be an array of children in the backend.\r\n\r\nAnother way to generate children is to use className called children and add the array of children there:\r\n```\r\nconst element = React.createElement(\"div\", {className: \"container\", children: [\"Yuhuu\", \"Cool\", \"Hell yeah\"]});\r\n```\r\n\r\nThen we will render this element:\r\n```\r\nReactDOM.render(element, rootElement);\r\n```\r\n\r\nEntire code looks like this:\r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n<div id=\"root\"></div>\r\n<script type=\"text/javascript\">\r\nconst rootElement = document.getElementById(\"root\");\r\nconst element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\");\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nWriting entire app with <code>React.createElement</code> is possible but not practical. It would be better if we could use regular html tags in the html. For example:\r\n``` const element = <div>Hello world</div>```\r\n\r\nWe can do it like this:\r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n<div id=\"root\"></div>\r\n<script type=\"text/javascript\">\r\nconst rootElement = document.getElementById(\"root\");\r\nconst element = <div>Hello world</div>\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nBut if we run this, we will get a syntax error, where <code><</code> is not a valid syntax.\r\n\r\nSuch construct like <code>```<div>Hello world</div>```</code> is called JSX. And in order to be interpretted as <code>React.createElement</code>, it needs to be TRANSPILED and we can use Babbel to do it - Babbel is a transpiler, which takes JSX and converts it to regular Javascript.\r\n\r\nIn order to use Babbel to transpile our JSX code to pure Javascript code, we need to import Babbel standalone using script\r\n```\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n```\r\nAnd we need to change <code>text/javascript</code> to <code>text/babel</code>\r\n```\r\n<script type=\"text/javascript\">\r\n```\r\n\r\nEntire code: \r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script><div id=\"root\"></div>\r\n<div id=\"root\"></div>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\");\r\nconst element = <div className=\"container\">Yuhuu</div>;\r\nReactDOM.render(element, rootElement);\r\n</script>\r\n```\r\n\r\nDifferences between HTML and JSX:\r\n\r\nIn HTML you write <code>class</code> in JSX <code>className</code>\r\n\r\nOur children in the div tag can be EXTERNALIZED which means made as a variable by:\r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script><div id=\"root\"></div>\r\n<div id=\"root\"></div>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\");\r\nconst greeting=\"HOLA!\"\r\nconst element = <div className=\"container\">{greeting}</div>;\r\nReactDOM.render(element, rootElement);\r\n</script>\r\n```\r\n\r\n<code>{greeting}</code> with curly brackets is called interpolation! Interpolation is injecting pure JS into the JSX. Interpolation is denoted by curly brackets.  Interpolation allows us to dive in land of Javascript from the land of JSX.\r\n\r\nIn the interpolation, we can use anything that evaluates to an expression. It can as well be an anonymous function:\r\n```\r\nconst element = <div className=\"container\">{( ()=> greeting ) () ) }</div>;\r\n```\r\n\r\nWe can do interpolation within the properties:\r\n\r\n```\r\nconst greeting=\"HOLA!\";\r\nconst myClassName = \"container\";\r\nconst element = <div className={myClassName + \"__hi-there\"}>{greeting}</div>;\r\n```\r\n\r\nAnother way how to give component props is:\r\n```\r\nconst props = {\r\nclassName: \"container\",\r\nchildren: \"Hello there\",\r\n};\r\nconst element = (\r\n<div {...props} />\r\n)\r\n\r\n```\r\n\r\nOr these props can be stored in a function:\r\n```\r\nconst message= props => <div>{props.msg}</div>\r\nconst element =(\r\n<div className=\"container\">\r\n  {message({msg: \"ahoj\"})}\r\n  {message({msg: \"hi\"})}\r\n</div>\r\n)\r\n\r\n```\r\n\r\nBut this will unfortunatelly NOT run. Babbel will interpret message as undefined variable. We need to capitalize message. Capitalization tells DOM that this is not a regular variable, rather it is a DOM element.\r\n\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nconst Message= props => <div>{props.msg}</div>\r\nconst element =(\r\n<div className=\"container\">\r\n  <Message msg=\"ahoj\" />\r\n  <Message msg=\"hi\" />\r\n</div>)\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n\r\n```\r\n\r\nThis is our first react element. It is defined as a functional element and it is passed a prop called <code>msg</code> to it, which is then displayed in between of div tag.\r\n\r\nDefinition of the component is here:\r\n```\r\nconst Message= props => <div>{props.msg}</div>\r\n```\r\n\r\nIt can also be defined like this:\r\n```\r\nfunction Message (props){\r\n return <div>{props.msg}</div>\r\n}\r\n```\r\n\r\nWhen we want to pass props to components we should make sure we will get correct types (string, number, etc). In order to do so, we will be using <code>propTypes</code>.\r\n\r\nLets see how this is done:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nfunction SayHello (props){ \r\n  return (\r\n    <div> Hello {props.firstName} {props.lastName}</div>\r\n  )\r\n}\r\n\r\nconst PropTypes= {\r\n  string(props, propName, componentName){\r\n    if (typeof props[propName] !== \"string\"){\r\n     return new Error (\r\n       \"you should pass a strin for ${propName} in ${componenetName} but you provided ${typeof props[propName]}\"\r\n       )\r\n    }\r\n  }\r\n}\r\n\r\nSayHello.propTypes ={\r\n  firstName: PropTypes.string,\r\n  lastName: PropTypes.string,\r\n}\r\n\r\nconst element= (\r\n  <div>\r\n   <SayHello firstName={true} lastName=\"S\" />\r\n  </div>\r\n  )\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nAbove is our own implementation of prop types. In console we should get error, because we are passing incorrect type. We pass <code>boolean</code> instead of <code>string</code>.\r\n\r\nAlternatively we can use prop types provided by React:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nfunction SayHello (props){ \r\n  return (\r\n    <div> Hello {props.firstName} {props.lastName}</div>\r\n  )\r\n}\r\n\r\nSayHello.propTypes ={\r\n  firstName: PropTypes.string,\r\n  lastName: PropTypes.string,\r\n}\r\n\r\nconst element= (\r\n  <div>\r\n   <SayHello firstName={true} lastName=\"S\" />\r\n  </div>\r\n  )\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nAgain we should get an error. But we only get one, even though we should get two errors.\r\nReason is that properties are optional, therefore we need to add <code>.isRequired</code>:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nfunction SayHello (props){ \r\n  return (\r\n    <div> Hello {props.firstName} {props.lastName}</div>\r\n  )\r\n}\r\n\r\nSayHello.propTypes ={\r\n  firstName: PropTypes.string.isRequired,\r\n  lastName: PropTypes.string.isRequired,\r\n}\r\n\r\nconst element= (\r\n  <div>\r\n   <SayHello firstName={true} lastName=\"S\" />\r\n  </div>\r\n  )\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nAbove usage is for function components. For class components we use static property:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nclass SayHello extends React.Component{ \r\nstatic propTypes ={\r\n  firstName: PropTypes.string.isRequired,\r\n  lastName: PropTypes.string.isRequired,\r\n}\r\n  render () {\r\n  const {firstName, lastName} = this.props\r\n  return (\r\n    <div> Hello {firstName} {lastName}</div>\r\n  )\r\n  }\r\n}\r\n\r\nSayHello.propTypes ={\r\n  firstName: PropTypes.string.isRequired,\r\n  lastName: PropTypes.string.isRequired,\r\n}\r\n\r\nconst element= (\r\n  <div>\r\n   <SayHello firstName={true} lastName={false} />\r\n  </div>\r\n  )\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nHow to render a message <code>\"No Message\"</code> when we don't provide message to the component:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\n\r\nfunction Message ({message}){\r\n  if (!message){\r\n  return <div>No message</div>\r\n  }\r\n  return <div>{message}</div>\r\n}\r\n\r\nReactDOM.render( <Message message={null} />, rootElement)\r\n </script>\r\n```\r\n\r\nThe same thing using ternary:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\n\r\nfunction Message ({message}){\r\n  \r\n  return ( message ? <div>{message}</div> : <div>No message</div>)\r\n}\r\n\r\nReactDOM.render( <Message message={null} />, rootElement)\r\n </script>\r\n```\r\n\r\nIf we want to wrap everything in a <code>div</code> component we will need to do interpolation:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\n\r\nfunction Message ({message}){\r\n  \r\n  return ( \r\n  <div>\r\n  {message ? <div>{message}</div> : <div>No message</div>}\r\n  </div>\r\n  )\r\n}\r\n\r\nReactDOM.render( <Message message={null} />, rootElement)\r\n </script>\r\n```\r\n\r\nRe-render the component - building a current time displaying component.\r\n\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\n\r\nfunction tick (){\r\n  const time = new Date().toLocaleTimeString()\r\n  const element = <div> It is {time} </div>\r\n  ReactDOM.render(element, rootElement)\r\n}\r\n\r\ntick()\r\nsetInterval(tick, 1000)\r\n </script>\r\n```\r\n\r\nSpreading properties on an element. \r\n\r\nClassical way to add properties is this:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n\r\n<style>\r\n.box{\r\n  border-style: solid;\r\n}\r\n\r\n.box--small{\r\n  width: 60px;\r\n  height: 60px;\r\n}\r\n</style>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\n\r\nconst element = (<div>\r\n                  <div className=\"box box--small\" style= {{paddingLeft: \"20px\"}}>box</div>\r\n        </div>)\r\n\r\nReactDOM.render(element, rootElement)\r\n\r\n </script>\r\n```\r\n\r\nBut we can also spread properties:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n\r\n<style>\r\n.box{\r\n  border-style: solid;\r\n}\r\n\r\n.box--small{\r\n  width: 60px;\r\n  height: 60px;\r\n}\r\n</style>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nconst props ={\r\n  className:\"box box--small\",\r\n  style: {paddingLeft: \"20px\"},\r\n}\r\nconst element = (<div>\r\n                  <div {...props }>box</div>\r\n        </div>)\r\nReactDOM.render(element, rootElement)\r\n </script>\r\n```\r\n\r\nWe can also store <code>className</code> in a variable:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n\r\n<style>\r\n.box{\r\n  border-style: solid;\r\n}\r\n\r\n.box--small{\r\n  width: 60px;\r\n  height: 60px;\r\n}\r\n</style>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nconst className = \"box box--small\"\r\nconst props ={\r\n  className,\r\n  style: {paddingLeft: \"20px\"},\r\n}\r\nconst element = (<div>\r\n                  <div {...props }>box</div>\r\n        </div>)\r\nReactDOM.render(element, rootElement)\r\n </script>\r\n```\r\n\r\nHow we can manually set the state in React:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nconst state ={eventCount: 0, username: ''}\r\n\r\nfunction App(){\r\n  return (\r\n    <div>\r\n      <p>There have been {state.eventCount}</p>\r\n    <p><button>Click Me</button></p>\r\n    <p>You typed: {state.username} </p>\r\n    <p><input /></p>\r\n  </div>\r\n   )\r\n}\r\n\r\nsetState({eventCount: 10})\r\nsetState({username: \"mia\"})\r\n\r\nfunction setState(newState){\r\n  Object.assign(state, newState)\r\n  renderApp()\r\n}\r\n\r\nfunction renderApp(){\r\n  ReactDOM.render(\r\n  <App />, \r\n  rootElement\r\n  )\r\n}\r\nrenderApp()\r\n </script>\r\n```","frontmatter":{"date":"2019-09-28","title":"Intro to React","category":"knowledge-base"},"fields":{"slug":"/Intro_to_React/"},"timeToRead":18,"html":"<p><img src=\"https://i.imgur.com/4tBPaPE.png\" title=\"React logo\"></p>\n<p>React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having HTML, CSS and Javascript in one file. </p>\n<p>React is a closed environmnet and can be run in browser, on your local machine (your PC) or on phones (such as Android, etc).</p>\n<p>When I am developing a website in React I need to be able to see what I am building. I can do these:</p>\n<p><strong>A/</strong> doubleclick on my html file (index.html) and open it in browser. However, it won't really work. Other pages will not load, because I am only openineg filepath in browser.</p>\n<p><strong>B/</strong> run a web server locally on my machine (pc)</p>\n<p>In order to run a web server on my machine, I need to install <code>node.js</code>.</p>\n<p>In order to be able to use React in a <strong>BROWSER</strong> I need a package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n</code></pre>\n<blockquote>\n<p>More on this in official documentation here:</p>\n</blockquote>\n<p><a href=\"https://reactjs.org/docs/add-react-to-a-website.html\">https://reactjs.org/docs/add-react-to-a-website.html</a></p>\n<p>These script tags in html are equivalent to a file in my project called <code>package.json</code> which is automatically provided by Gatsby:</p>\n<pre><code>\"dependencies\": {\n    \"gatsby\": \"^2.15.28\",\n    \"react\": \"^16.10.0\",\n    \"react-dom\": \"^16.10.0\"\n},\n</code></pre>\n<blockquote>\n<p>There are 2 ways how I can import React. </p>\n</blockquote>\n<p><strong>A)</strong> I need to  import React:</p>\n<pre><code>import React from \"react\";\n</code></pre>\n<blockquote>\n<p>Then I'm using:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\n\n}\n</code></pre>\n<p><strong>B)</strong> I can only import { Component } from \"react\"</p>\n<pre><code>import { Component } from \"react\";\n</code></pre>\n<blockquote>\n<p>Then Im using:</p>\n</blockquote>\n<pre><code>class MyClass extends Component(){\n\n}\n</code></pre>\n<blockquote>\n<p>I can import ReactDOM in 2 ways. </p>\n</blockquote>\n<p><strong>A)</strong> We import everything that is in ReactDOM, all their methods. On of their methods is called render:</p>\n<pre><code>import ReactDOM from \"react-dom\";\n</code></pre>\n<blockquote>\n<p>Then I am using this render method:</p>\n</blockquote>\n<pre><code>ReactDOM.render(&#x3C;p>Hi&#x3C;/p>, document.getElementById(\"app\"));\n</code></pre>\n<p><strong>B)</strong> In this way we are only cherry-picking to import one specific method from reactDOM and this method is called render:</p>\n<pre><code>import { render } from\"react-dom\";\n</code></pre>\n<blockquote>\n<p>Then I am using this render method:</p>\n</blockquote>\n<pre><code>render(&#x3C;p>Hi&#x3C;/p>, document.getElementById(\"app\"));\n</code></pre>\n<blockquote>\n<p>In render method we have 2 possibilities to generate our component in a specific DOM element:</p>\n</blockquote>\n<p><strong>A)</strong> One way is to use document.getElementById</p>\n<pre><code>render(&#x3C;p>Hi&#x3C;/p>, document.getElementById(\"app\"));\n</code></pre>\n<p><strong>B</strong> Another way is to use document.querySelector:</p>\n<pre><code>render(&#x3C;p>Hi&#x3C;/p>, document.querySelctor(\"#app\"));\n</code></pre>\n<blockquote>\n<p>Within React return statement I can only add parent component:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;p>Hello&#x3C;/p>\n    )\n  }\n}\n</code></pre>\n<blockquote>\n<p>I cannot write this:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;p>Hello&#x3C;/p>\n        &#x3C;p>World&#x3C;/p>\n    )\n  }\n}\n</code></pre>\n<blockquote>\n<p>To solve to have paralell tags, we can wrap them in div:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;div>\n          &#x3C;p>Hello&#x3C;/p>\n          &#x3C;p>World&#x3C;/p>\n        &#x3C;/div>  \n    )\n  }\n}\n</code></pre>\n<blockquote>\n<p>Alternatively if we dont want to wrapt them in divs, we can wrap them in React.Fragment:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;React.Fragment>\n          &#x3C;p>Hello&#x3C;/p>\n          &#x3C;p>World&#x3C;/p>\n        &#x3C;/React.Fragment>  \n    )\n  }\n}\n</code></pre>\n<p><strong>HTML scripts equivalent to React</strong></p>\n<p>Create a new file with .html extention. For example: site.html</p>\n<p>You can open this file in the browser (simply double-clicking on the file). Browser will open up a completely blank page.</p>\n<p>Now we can open it in editor (for example note++, etc) and add a <code>div</code> tag in it id of root:</p>\n<pre><code>&#x3C;div id=\"root\">Hi&#x3C;/div>\n</code></pre>\n<p>Refresh the browser and you wil see <code>Hi</code> displayed. But let's remove hard coded <code>Hi</code> and we will play around how we can place other elements within the root div.</p>\n<p>In HTML in between of script tags, we can write regular Javascript</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/javascript\">\n&#x3C;/script>\n</code></pre>\n<p>In between script tags we will now write a script that will add a new element to the div root\n.</p>\n<p>To target a div with id root, we write <code>document.getElementById</code></p>\n<pre><code>const rootElement = document.getElementById(\"root\");\n</code></pre>\n<p>To create a new element we use <code>document.createElement</code></p>\n<pre><code>const element = document.createElement(\"div\");\n</code></pre>\n<p>To add attributes to our new div, we use following syntax:</p>\n<pre><code>element.textContent = \"Hello World!\";\nelement.className = \"container\";\n</code></pre>\n<p>It is equivalent and will eventually  look like:</p>\n<pre><code>&#x3C;div className=\"container\">Hello World!&#x3C;/div>\n</code></pre>\n<p>Now we need to add this element to our root div by syntax:</p>\n<pre><code>rootElement.appendChild(element);\n</code></pre>\n<p>Entire code will look like this:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/javascript\">\nconst rootElement = document.getElementById(\"root\");\nconst element = document.createElement(\"div\");\nelement.textContent = \"Hello World!\";\nelement.className = \"container\";\nrootElement.appendChild(element);\n&#x3C;/script>\n</code></pre>\n<p>Now we will do the same with REACT.</p>\n<p>First we need to import react to our HTML using script tags. Add following to your HTML file:</p>\n<pre><code>&#x3C;!-- Load React. -->\n&#x3C;!-- Note: when deploying, replace \"development.js\" with \"production.min.js\". -->\n&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n</code></pre>\n<p>Now we will use react to create our elements.</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/javascript\">\nconst rootElement = document.getElementById(\"root\");\n&#x3C;/script>\n</code></pre>\n<p>In order to create new element we will use React.createElement which has 3 paramenters:</p>\n<p><strong>1/</strong> which element it is - div</p>\n<p><strong>2/</strong> are ther eany atributes - className</p>\n<p><strong>3/</strong> and the text itself</p>\n<pre><code>const element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\");\n</code></pre>\n<p>In <code>React.createElement</code>, we can have any number of childeren like \"Yuhuu\" there:</p>\n<pre><code>const element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\", \"Cool\", \"Hell yeah\");\n</code></pre>\n<p>The above ones will be an array of children in the backend.</p>\n<p>Another way to generate children is to use className called children and add the array of children there:</p>\n<pre><code>const element = React.createElement(\"div\", {className: \"container\", children: [\"Yuhuu\", \"Cool\", \"Hell yeah\"]});\n</code></pre>\n<p>Then we will render this element:</p>\n<pre><code>ReactDOM.render(element, rootElement);\n</code></pre>\n<p>Entire code looks like this:</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/javascript\">\nconst rootElement = document.getElementById(\"root\");\nconst element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\");\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>Writing entire app with <code>React.createElement</code> is possible but not practical. It would be better if we could use regular html tags in the html. For example:\n<code>const element = &#x3C;div>Hello world&#x3C;/div></code></p>\n<p>We can do it like this:</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/javascript\">\nconst rootElement = document.getElementById(\"root\");\nconst element = &#x3C;div>Hello world&#x3C;/div>\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>But if we run this, we will get a syntax error, where <code>&#x3C;</code> is not a valid syntax.</p>\n<p>Such construct like <code><code>&#x3C;div>Hello world&#x3C;/div></code></code> is called JSX. And in order to be interpretted as <code>React.createElement</code>, it needs to be TRANSPILED and we can use Babbel to do it - Babbel is a transpiler, which takes JSX and converts it to regular Javascript.</p>\n<p>In order to use Babbel to transpile our JSX code to pure Javascript code, we need to import Babbel standalone using script</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n</code></pre>\n<p>And we need to change <code>text/javascript</code> to <code>text/babel</code></p>\n<pre><code>&#x3C;script type=\"text/javascript\">\n</code></pre>\n<p>Entire code: </p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\");\nconst element = &#x3C;div className=\"container\">Yuhuu&#x3C;/div>;\nReactDOM.render(element, rootElement);\n&#x3C;/script>\n</code></pre>\n<p>Differences between HTML and JSX:</p>\n<p>In HTML you write <code>class</code> in JSX <code>className</code></p>\n<p>Our children in the div tag can be EXTERNALIZED which means made as a variable by:</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\");\nconst greeting=\"HOLA!\"\nconst element = &#x3C;div className=\"container\">{greeting}&#x3C;/div>;\nReactDOM.render(element, rootElement);\n&#x3C;/script>\n</code></pre>\n<p><code>{greeting}</code> with curly brackets is called interpolation! Interpolation is injecting pure JS into the JSX. Interpolation is denoted by curly brackets.  Interpolation allows us to dive in land of Javascript from the land of JSX.</p>\n<p>In the interpolation, we can use anything that evaluates to an expression. It can as well be an anonymous function:</p>\n<pre><code>const element = &#x3C;div className=\"container\">{( ()=> greeting ) () ) }&#x3C;/div>;\n</code></pre>\n<p>We can do interpolation within the properties:</p>\n<pre><code>const greeting=\"HOLA!\";\nconst myClassName = \"container\";\nconst element = &#x3C;div className={myClassName + \"__hi-there\"}>{greeting}&#x3C;/div>;\n</code></pre>\n<p>Another way how to give component props is:</p>\n<pre><code>const props = {\nclassName: \"container\",\nchildren: \"Hello there\",\n};\nconst element = (\n&#x3C;div {...props} />\n)\n</code></pre>\n<p>Or these props can be stored in a function:</p>\n<pre><code>const message= props => &#x3C;div>{props.msg}&#x3C;/div>\nconst element =(\n&#x3C;div className=\"container\">\n  {message({msg: \"ahoj\"})}\n  {message({msg: \"hi\"})}\n&#x3C;/div>\n)\n</code></pre>\n<p>But this will unfortunatelly NOT run. Babbel will interpret message as undefined variable. We need to capitalize message. Capitalization tells DOM that this is not a regular variable, rather it is a DOM element.</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nconst Message= props => &#x3C;div>{props.msg}&#x3C;/div>\nconst element =(\n&#x3C;div className=\"container\">\n  &#x3C;Message msg=\"ahoj\" />\n  &#x3C;Message msg=\"hi\" />\n&#x3C;/div>)\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>This is our first react element. It is defined as a functional element and it is passed a prop called <code>msg</code> to it, which is then displayed in between of div tag.</p>\n<p>Definition of the component is here:</p>\n<pre><code>const Message= props => &#x3C;div>{props.msg}&#x3C;/div>\n</code></pre>\n<p>It can also be defined like this:</p>\n<pre><code>function Message (props){\n return &#x3C;div>{props.msg}&#x3C;/div>\n}\n</code></pre>\n<p>When we want to pass props to components we should make sure we will get correct types (string, number, etc). In order to do so, we will be using <code>propTypes</code>.</p>\n<p>Lets see how this is done:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nfunction SayHello (props){ \n  return (\n    &#x3C;div> Hello {props.firstName} {props.lastName}&#x3C;/div>\n  )\n}\n\nconst PropTypes= {\n  string(props, propName, componentName){\n    if (typeof props[propName] !== \"string\"){\n     return new Error (\n       \"you should pass a strin for ${propName} in ${componenetName} but you provided ${typeof props[propName]}\"\n       )\n    }\n  }\n}\n\nSayHello.propTypes ={\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n}\n\nconst element= (\n  &#x3C;div>\n   &#x3C;SayHello firstName={true} lastName=\"S\" />\n  &#x3C;/div>\n  )\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>Above is our own implementation of prop types. In console we should get error, because we are passing incorrect type. We pass <code>boolean</code> instead of <code>string</code>.</p>\n<p>Alternatively we can use prop types provided by React:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nfunction SayHello (props){ \n  return (\n    &#x3C;div> Hello {props.firstName} {props.lastName}&#x3C;/div>\n  )\n}\n\nSayHello.propTypes ={\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n}\n\nconst element= (\n  &#x3C;div>\n   &#x3C;SayHello firstName={true} lastName=\"S\" />\n  &#x3C;/div>\n  )\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>Again we should get an error. But we only get one, even though we should get two errors.\nReason is that properties are optional, therefore we need to add <code>.isRequired</code>:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nfunction SayHello (props){ \n  return (\n    &#x3C;div> Hello {props.firstName} {props.lastName}&#x3C;/div>\n  )\n}\n\nSayHello.propTypes ={\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n}\n\nconst element= (\n  &#x3C;div>\n   &#x3C;SayHello firstName={true} lastName=\"S\" />\n  &#x3C;/div>\n  )\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>Above usage is for function components. For class components we use static property:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nclass SayHello extends React.Component{ \nstatic propTypes ={\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n}\n  render () {\n  const {firstName, lastName} = this.props\n  return (\n    &#x3C;div> Hello {firstName} {lastName}&#x3C;/div>\n  )\n  }\n}\n\nSayHello.propTypes ={\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n}\n\nconst element= (\n  &#x3C;div>\n   &#x3C;SayHello firstName={true} lastName={false} />\n  &#x3C;/div>\n  )\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>How to render a message <code>\"No Message\"</code> when we don't provide message to the component:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\n\nfunction Message ({message}){\n  if (!message){\n  return &#x3C;div>No message&#x3C;/div>\n  }\n  return &#x3C;div>{message}&#x3C;/div>\n}\n\nReactDOM.render( &#x3C;Message message={null} />, rootElement)\n &#x3C;/script>\n</code></pre>\n<p>The same thing using ternary:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\n\nfunction Message ({message}){\n  \n  return ( message ? &#x3C;div>{message}&#x3C;/div> : &#x3C;div>No message&#x3C;/div>)\n}\n\nReactDOM.render( &#x3C;Message message={null} />, rootElement)\n &#x3C;/script>\n</code></pre>\n<p>If we want to wrap everything in a <code>div</code> component we will need to do interpolation:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\n\nfunction Message ({message}){\n  \n  return ( \n  &#x3C;div>\n  {message ? &#x3C;div>{message}&#x3C;/div> : &#x3C;div>No message&#x3C;/div>}\n  &#x3C;/div>\n  )\n}\n\nReactDOM.render( &#x3C;Message message={null} />, rootElement)\n &#x3C;/script>\n</code></pre>\n<p>Re-render the component - building a current time displaying component.</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\n\nfunction tick (){\n  const time = new Date().toLocaleTimeString()\n  const element = &#x3C;div> It is {time} &#x3C;/div>\n  ReactDOM.render(element, rootElement)\n}\n\ntick()\nsetInterval(tick, 1000)\n &#x3C;/script>\n</code></pre>\n<p>Spreading properties on an element. </p>\n<p>Classical way to add properties is this:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n\n&#x3C;style>\n.box{\n  border-style: solid;\n}\n\n.box--small{\n  width: 60px;\n  height: 60px;\n}\n&#x3C;/style>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\n\nconst element = (&#x3C;div>\n                  &#x3C;div className=\"box box--small\" style= {{paddingLeft: \"20px\"}}>box&#x3C;/div>\n        &#x3C;/div>)\n\nReactDOM.render(element, rootElement)\n\n &#x3C;/script>\n</code></pre>\n<p>But we can also spread properties:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n\n&#x3C;style>\n.box{\n  border-style: solid;\n}\n\n.box--small{\n  width: 60px;\n  height: 60px;\n}\n&#x3C;/style>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nconst props ={\n  className:\"box box--small\",\n  style: {paddingLeft: \"20px\"},\n}\nconst element = (&#x3C;div>\n                  &#x3C;div {...props }>box&#x3C;/div>\n        &#x3C;/div>)\nReactDOM.render(element, rootElement)\n &#x3C;/script>\n</code></pre>\n<p>We can also store <code>className</code> in a variable:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n\n&#x3C;style>\n.box{\n  border-style: solid;\n}\n\n.box--small{\n  width: 60px;\n  height: 60px;\n}\n&#x3C;/style>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nconst className = \"box box--small\"\nconst props ={\n  className,\n  style: {paddingLeft: \"20px\"},\n}\nconst element = (&#x3C;div>\n                  &#x3C;div {...props }>box&#x3C;/div>\n        &#x3C;/div>)\nReactDOM.render(element, rootElement)\n &#x3C;/script>\n</code></pre>\n<p>How we can manually set the state in React:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nconst state ={eventCount: 0, username: ''}\n\nfunction App(){\n  return (\n    &#x3C;div>\n      &#x3C;p>There have been {state.eventCount}&#x3C;/p>\n    &#x3C;p>&#x3C;button>Click Me&#x3C;/button>&#x3C;/p>\n    &#x3C;p>You typed: {state.username} &#x3C;/p>\n    &#x3C;p>&#x3C;input />&#x3C;/p>\n  &#x3C;/div>\n   )\n}\n\nsetState({eventCount: 10})\nsetState({username: \"mia\"})\n\nfunction setState(newState){\n  Object.assign(state, newState)\n  renderApp()\n}\n\nfunction renderApp(){\n  ReactDOM.render(\n  &#x3C;App />, \n  rootElement\n  )\n}\nrenderApp()\n &#x3C;/script>\n</code></pre>"}},{"node":{"id":"898cf635-40a2-5471-bd8c-cb3009c8227a","excerpt":"Deploying Website to Github Pages: Install Github pages to Gatsby Build website to github page, for example: https://addania.github.io…","rawMarkdownBody":"\r\n![](https://i.imgur.com/gUJE7Eu.png \"Github Logo\")\r\n\r\nDeploying Website to Github Pages:\r\n\r\n> Install Github pages to Gatsby\r\n```\r\nnpm install gh-pages --save-dev\r\n```\r\n> Build website to github page, for example: https://addania.github.io/\r\n```\r\nnpm run deploy\r\n```\r\n> References: \r\n\r\nhttps://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/","frontmatter":{"date":"2019-09-27","title":"Intro to Github Pages","category":"knowledge-base"},"fields":{"slug":"/Intro_to_Github_pages/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/gUJE7Eu.png\" title=\"Github Logo\"></p>\n<p>Deploying Website to Github Pages:</p>\n<blockquote>\n<p>Install Github pages to Gatsby</p>\n</blockquote>\n<pre><code>npm install gh-pages --save-dev\n</code></pre>\n<blockquote>\n<p>Build website to github page, for example: <a href=\"https://addania.github.io/\">https://addania.github.io/</a></p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>References: </p>\n</blockquote>\n<p><a href=\"https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\">https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/</a></p>"}},{"node":{"id":"107c5660-93ba-50ab-903d-0018d66a540e","excerpt":"Software to help create static website using React. They provide starter templates, ability to create multiple pages in their pages folder…","rawMarkdownBody":"\r\n![](https://i.imgur.com/rqXXcAi.png \"Gatsby Logo\")\r\n\r\n> Software to help create static website using React. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically\r\n\r\n> To start with gatsby follow their documentation:\r\n\r\n```\r\nhttps://www.gatsbyjs.com/docs/tutorial/part-0/\r\n```\r\n\r\n> To install Gatsby\r\n\r\n```\r\nnpm install -g gatsby-cli\r\n```\r\n\r\n> You will need also git: https://www.atlassian.com/git/tutorials/install-git#linux\r\n\r\n> You will need node.js:\r\n\r\n```\r\nsudo apt update\r\nsudo apt -y upgrade\r\nsudo apt-get install curl\r\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\r\nnvm --version\r\n```\r\n\r\n> On node 18 it was not working for me. I was getting this error: `Error: error:0308010C:digital envelope routines::unsupported`. So I needed to downgrade to version 16:\r\n\r\n```\r\nnvm install 16.13.0\r\n```\r\n\r\n> I was getting this error: `node_modules/gatsby-recipes/dist/graphql-server/server.js:52 var remarkMdx = require('remark-mdx')`\r\n\r\n> So needed to fix remark-mdx in package.json to this version:\r\n\r\n```\r\n\"remark-mdx\": \"2.0.0-next.9\"\r\n```\r\n\r\n> Or alternatively use this code in terminal:\r\n\r\n```\r\nnpm install remark-mdx@2.0.0-next.9 --save-dev\r\n```\r\n\r\n> I was also getting this error: `node_modules/yoga-layout-prebuilt/yoga-layout/build/Release/nbind.js:53 throw ex;`. So I needed to remove package-lock.json and node modules and `npm install` them again.\r\n\r\n> To remove node modules, you can also use this:\r\n\r\n```\r\nrm -rf node_modules\r\n```\r\n\r\n> To display basic commands in gatsby\r\n\r\n```\r\ngatsby --help\r\n```\r\n\r\n> To create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)\r\n\r\n```\r\ngatsby new addania.com https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n```\r\n\r\n> To start Gatsby react development environment for my new project I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop\r\n\r\n```\r\ngatsby develop\r\n```\r\n","frontmatter":{"date":"2019-09-26","title":"Intro to Gatsby","category":"knowledge-base"},"fields":{"slug":"/Intro_to_Gatsby/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/rqXXcAi.png\" title=\"Gatsby Logo\"></p>\n<blockquote>\n<p>Software to help create static website using React. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically</p>\n</blockquote>\n<blockquote>\n<p>To start with gatsby follow their documentation:</p>\n</blockquote>\n<pre><code>https://www.gatsbyjs.com/docs/tutorial/part-0/\n</code></pre>\n<blockquote>\n<p>To install Gatsby</p>\n</blockquote>\n<pre><code>npm install -g gatsby-cli\n</code></pre>\n<blockquote>\n<p>You will need also git: <a href=\"https://www.atlassian.com/git/tutorials/install-git#linux\">https://www.atlassian.com/git/tutorials/install-git#linux</a></p>\n</blockquote>\n<blockquote>\n<p>You will need node.js:</p>\n</blockquote>\n<pre><code>sudo apt update\nsudo apt -y upgrade\nsudo apt-get install curl\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\nnvm --version\n</code></pre>\n<blockquote>\n<p>On node 18 it was not working for me. I was getting this error: <code>Error: error:0308010C:digital envelope routines::unsupported</code>. So I needed to downgrade to version 16:</p>\n</blockquote>\n<pre><code>nvm install 16.13.0\n</code></pre>\n<blockquote>\n<p>I was getting this error: <code>node_modules/gatsby-recipes/dist/graphql-server/server.js:52 var remarkMdx = require('remark-mdx')</code></p>\n</blockquote>\n<blockquote>\n<p>So needed to fix remark-mdx in package.json to this version:</p>\n</blockquote>\n<pre><code>\"remark-mdx\": \"2.0.0-next.9\"\n</code></pre>\n<blockquote>\n<p>Or alternatively use this code in terminal:</p>\n</blockquote>\n<pre><code>npm install remark-mdx@2.0.0-next.9 --save-dev\n</code></pre>\n<blockquote>\n<p>I was also getting this error: <code>node_modules/yoga-layout-prebuilt/yoga-layout/build/Release/nbind.js:53 throw ex;</code>. So I needed to remove package-lock.json and node modules and <code>npm install</code> them again.</p>\n</blockquote>\n<blockquote>\n<p>To remove node modules, you can also use this:</p>\n</blockquote>\n<pre><code>rm -rf node_modules\n</code></pre>\n<blockquote>\n<p>To display basic commands in gatsby</p>\n</blockquote>\n<pre><code>gatsby --help\n</code></pre>\n<blockquote>\n<p>To create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)</p>\n</blockquote>\n<pre><code>gatsby new addania.com https://github.com/gatsbyjs/gatsby-starter-hello-world\n</code></pre>\n<blockquote>\n<p>To start Gatsby react development environment for my new project I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>"}},{"node":{"id":"aca8e8e5-e328-5bc8-b019-91b46a611933","excerpt":"GETTING STARTED Git is a file versioning system (or in other words version control system). In order to install Git we need to have apt-get…","rawMarkdownBody":"\r\n![](https://i.imgur.com/ZVeInG0.png \"Git Logo\")\r\n\r\n**GETTING STARTED**\r\n\r\nGit is a file versioning system (or in other words version control system).\r\n\r\n> In order to install Git we need to have apt-get updated. To update apt-get\r\n```\r\nsudo apt-get update\r\n```\r\n> To install Git\r\n```\r\nsudo apt-get install git\r\n```\r\n> To check version of Git\r\n```\r\ngit --version\r\n```\r\n> To set up username and email\r\n```\r\ngit config --global user.name \"addania\"\r\ngit config --global user.email \"mirka.schw@gmail.com\"\r\n```\r\n\r\n**DEFINITIONS**\r\n\r\n![](https://i.imgur.com/ba3JFiY.jpg \"Photo by Pixabay from Pexels\")\r\n\r\n**Local**\r\n>When we talk about LOCAL we mean anything that is stored locally on your computer hard drive.\r\n\r\n**Remote**\r\n>When we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.\r\n\r\n\r\n**GIT WORKFLOW**:\r\n\r\n![](https://i.imgur.com/cHDGtUJ.jpg \"Photo by Startup Stock Photos from Pexels\")\r\n\r\nFirst we need to link our LOCAL and REMOTE repositories using SSH Key.\r\n\r\nWe need to generate our LOCAL SSH key which we then paste to REMORE GitHub.\r\n\r\n\r\nImagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\r\n\r\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing <code>git init</code> command which will create a subfolder git in my current project folder.\r\n\r\n```\r\ngit init\r\n```\r\n\r\nThen I work on my project files and make changes to my website. Firstly, I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\r\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:\r\n```\r\ngit add .\r\ngit commit -m \"message goes here\"\r\n```\r\nWhen our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.\r\n\r\nThen we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\r\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention): <code>git remote add origin remoteRepositoryURL</code>\r\n\r\nFor example:\r\n```\r\ngit remote add origin git@github.com:addania/addania.com.git \r\n```\r\nTo verify if our new remote was added we can check the:\r\n```\r\ngit remote -v \r\n```\r\n\r\nThen we are ready to push our LOCAL git repository to the REMOTE Github repository:\r\n```\r\ngit push origin master\r\n```\r\n\r\n>To check status of my Git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:\r\n```\r\ngit status\r\n```\r\n> To see history of commits\r\n```\r\ngit log\r\n```\r\n> The git init command creates a new Git repository. Executing <code>git init</code> creates a <code>.git</code> subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:\r\n```\r\ngit init\r\n```\r\n> In order to commit anything, we first need to add files to staging area by using following command (dot means all files):\r\n```\r\ngit add . \r\n```\r\n> To commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. Git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:\r\n```\r\ngit commit\r\n```\r\n> To commit files to LOCAL git repository with a message already included in the command:\r\n```\r\ngit commit -m \"message goes here\"\r\n```\r\n> To see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):\r\n```\r\ngit remote -v\r\n```\r\n> To add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository\r\n```\r\ngit remote add origin git@github.com:addania/addania.com.git\r\n```\r\n\r\n> To rename origin with new url if I need to change my repository name:\r\n```\r\ngit remote set-url origin git@github.com:addania/addania.github.io.git\r\n```\r\n\r\n> To check how many branches I have in my repository, if there is only one, the main one will be called usually master:\r\n```\r\ngit branch\r\n```\r\n> To push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the branch in the project, main branch is called master:\r\n```\r\ngit push origin master\r\n```\r\n> If I don't want to write always <code>git push origin master -force</code> I can create upstream and link local to remote git by <code>-u</code>. After this command then I can use only git push to upload files\r\n```\r\ngit push -u origin master -f\r\n```\r\n> To overwrite anything on the REMOTE repository in master branch we can <code>force</code> push:\r\n```\r\ngit push origin master --force \r\n```\r\n> Pulling down files from REMOTE Git to local Git, where origin is name of my REMOTE Git and master is name of my branch:\r\n```\r\ngit pull origin master\r\n```\r\n\r\n>To create new branch on the LOCAL machine:\r\n```\r\ngit checkout -b [name_of_your_new_branch]\r\n```\r\n\r\n>For example, where convention is that 1 is number of issue on Github:\r\n```\r\ngit checkout -b Github1AddDay05Task02\r\n```\r\n\r\n>To create a new branch taking MASTER as a base for the code (it could be any other name of the branch):\r\n```\r\ngit checkout -b Github1AddDay05Task02 master\r\n```\r\n\r\n>To create a new branch taking Github2AddDay06 as a base for the code (it could be any othr name of the branch):\r\n```\r\ngit checkout -b Github1AddDay05Task02 Github2AddDay06\r\n```\r\n\r\n>This will switch from your current branch to the new branch.\r\n\r\n> You can always use <code>git status</code> to check on which branch you currently work.\r\n```\r\ngit status\r\n```\r\n\r\n> Push the branch <code>gh-pages</code> to Github :\r\n```\r\ngit push origin gh-pages\r\n```\r\n\r\n> To see Git log (historical commits):\r\n```\r\ngit log\r\n```\r\n\r\n> It only shows one page by default:\r\n\r\n>In order to see new line press <code>ENTER</code>.\r\n\r\n>In order to see new page press <code>SPACE</code>.\r\n\r\n>In order to see new page press <code>Q</code>.\r\n\r\n> Here is an example log of latest commit:\r\n```\r\ncommit 29d6a97075b71993ca66b67a04ed9e038f4330ed (HEAD -> Github1AddDay05Task02, origin/gh-pages, gh-pages)\r\nAuthor: addania <mirka.schw@gmail.com>\r\nDate:   Sat Dec 14 17:10:03 2019 +0100\r\nadding day 4 tast 2\r\n```\r\n\r\n> Commit ID is <code>29d6a97075b71993ca66b67a04ed9e038f4330ed</code>\r\n\r\n> <code>HEAD</code> means that this is the commit on which I currently work, this is the latest commit which I did\r\n\r\n> After <code>-></code> we have all branches which are on this commit, they are also called tags (or marks).\r\n\r\n>It means my commit 29d6a97075b71993ca66b67a04ed9e038f4330ed is on branch <code>Github1AddDay05Task02</code>, <code>origin/gh-pages</code> and <code>gh-pages</code>.\r\n\r\n1// **gh-pages** is my LOCAL version of the branch\r\n\r\n2// **origin/gh-pages** is my REMOTE version of the branch\r\n\r\n3// **Github1AddDay05Task02** is my new branch which I created with <code>git checkout -b Github1AddDay05Task02</code>\r\n\r\n> As soon as I create a new branch with <code>git checkout -b Github1AddDay05Task02</code> my latest commit will be on that branch.\r\n\r\n> Then I need to push my LOCAL branch to the REMOTE:\r\n```\r\ngit push origin Github1AddDay05Task02\r\n```\r\n\r\n> I can now go to Github and check if new branch was created.\r\n\r\n> How to switch branches to master branch:\r\n```\r\ngit checkout master\r\n```\r\n\r\n> How to switch branches to gh-pages branch:\r\n```\r\ngit checkout gh-pages\r\n```\r\n\r\n> How to switch branches to Github1AddDay05Task02 branch - how to change branch:\r\n```\r\ngit checkout Github1AddDay05Task02\r\n```\r\n\r\n> Then if I have couple of branches I always need to pay attention which branch I am on and from which branch I do <code>npm start</code> and which files I am then working on.\r\n\r\n> I can check on which branch I currently am by:\r\n```\r\ngit status\r\n```\r\n\r\n> Then when I am on correct branch then I can start my local development:\r\n```\r\nnpm start\r\n```\r\n\r\n> Then I can make changes to code on my new branch Github1AddDay05Task02\r\n\r\n> Afterwards I add the changes to local git:\r\n```\r\ngit add .\r\n```\r\n\r\n> Then I commit those changes:\r\n```\r\ngit commit -m \"fixing issue Github1\"\r\n```\r\n\r\n> And now I can push those changes to my REMOTE branch:\r\n```\r\ngit push origin Github1AddDay05Task02\r\n```\r\n> You can go to Github and see that our latest commit is present on branch: Github1AddDay05Task02 but is not present on other branches like the gh-pages branch.\r\n\r\n**MERGE**\r\n\r\n![](https://i.imgur.com/cZzbzhC.jpg \"Photo by Pixabay from Pexels\")\r\n\r\n> In order to merge this branch with the branch on which you have your main code (usually master, but in my case gh-pages branch), we can go to -> Pull Requests and click on <code>Create a new Pull Request</code>\r\n\r\n> Then it will show the <code>Compare changes</code> page\r\n\r\n1// <code>Base</code> is the main branch TO WHICH I want to merge my code to. In my case gh-pages (but usually will be master)\r\n\r\n2// <code>Compare</code> is the branch FROM WHICH I want to put data to the base. In my case Github1AddDay05Task02\r\n\r\n> Here I can see all changes that were made.\r\n\r\n> Next I can click <code>Create Pull Request</code>\r\n\r\n> I will be redirected to <code>Open Pull Request</code> page where I add title and description of the pull request. \r\n\r\n> I can assign someone, add reviewers, labels and projects to this Pull Request.\r\n\r\n> Then click <code>Create Pull Request</code>\r\n\r\n> Then someone will comment on the code, review changes, request change of the code or approve changes.\r\n\r\n> If it is approved I can click on <code>Merge pull request</code>.\r\n\r\n> Then click <code>Confirm Merge</code>.\r\n\r\n> I should get the message:\r\n```\r\nPull request successfully merged and closed\r\n```\r\n> Now gh-pages branch on the REMOTE has CHANGED!!! We need to now download those latest changes to my LOCAL!!! We can use <code>git pull</code> or <code>git fetch</code>:\r\n```\r\ngit fetch\r\n```\r\n\r\n```\r\ngit pull\r\n```\r\n\r\n> <code>Git pull</code> will make <code>git fetch</code> plus it will also merge REMOTE changes with my LOCAL changes (which I made meanwhile but did not put on REMOTE). <code>Git fetch</code> will only fetch data, and will not merge in case I did some changes meanwhile on LOCAL which were not on REMOTE. Fetch will always work. Pull can fail if changes on my LOCAL are not compatible with changes on REMOTE.\r\n\r\n> It does not matter on which branch I make the pull or fetch, it will take all the data from all branches. However, you might get an error:\r\n```\r\nThere is no tracking information for the current branch.\r\n```\r\n\r\nIt means that Git is not able to match LOCAL and REMOTE branch names automatically. Therefore you might need to use pull for a specific branch instead, to get all the updates:\r\n```\r\ngit pull origin master\r\n```\r\n\r\nor\r\n\r\n```\r\ngit pull origin master Github1AddDay05Task02\r\n```\r\n\r\n> My branch Github1AddDay05Task02 still exists. If we want to delete this branch I can do following:\r\n\r\n1// go to the pull request from where we merged it and at the end there will be button: <code>Delete branch</code>\r\n\r\nor\r\n\r\n2// I can go to <code>Branches</code> and click on the trash icon to delete it\r\n\r\n> To delete this branch on REMOTE from terminal:\r\n```\r\ngit push <remote_name> --delete <branch_name>\r\n```\r\n\r\n> In our case the code will be:\r\n```\r\ngit push origin --delete Github1AddDay05Task02\r\n```\r\n\r\n>To delete this branch on LOCAL you first need to switch to a different branch:\r\n```\r\ngit checkout master\r\n```\r\n\r\n> Then you can delete your branch for example: Github1AddDay05Task02. You can do it by these 2 commands:\r\n```\r\ngit branch -d branch_name\r\ngit branch -D branch_name\r\n```\r\nOne is with <code>‘d’</code> and one with <code>‘D’</code>.\r\n\r\n1// The <code>-d</code> option stands for --delete, which would delete the local branch, only if you have already pushed and merged it with your remote branches.\r\n\r\n2// The <code>-D</code> option stands for --delete --force, which deletes the branch regardless of its push and merge status, so careful with this one!\r\n\r\n> If you have the case that you delete a branch on your REMOTE, you delete it on your local and your local still remembers it even after <code>git pull origin</code> or <code>git fetch origin</code>, and your deleted branch still shows in your list of remote branches: <code>git branch -a</code>, you can then use prune:\r\n```\r\ngit remote update origin --prune\r\n```\r\n\r\n> We can merge branch into another one also in terminal. For example I want to merge my PR1 branch into master branch. First we run <code>git checkout master</code> to change the active branch back to master. \r\n```\r\ngit checkout master\r\n```\r\n> Then we run the command <code>git merge PR1</code> to merge the new feature into the master branch.\r\n```\r\ngit merge PR1\r\n```\r\n> Note that <code>git merge</code> merges the specified branch into the <code>currently active</code> branch. So we need to be on the branch that we are merging into.\r\n\r\n> Note also that this only merged the branches LOCALLY. We still need to push changes to REMOTE.\r\n```\r\ngit push origin master\r\n```\r\n\r\n> Performing this might not necessarily automatically close the PR on Github (if the PRs base was NOT master) but it can close it automatically (if the PRs base was master). Weird stuff, kinda.\r\n\r\n**RESOLVING CONFLICTS**\r\n\r\n![](https://i.imgur.com/EN9pOyE.jpg \"Photo by Steve Johnson from Pexels\")\r\n\r\n> Imagine you want to merge branch PR2 to your master branch. However, you notice on Github, that there are some conflicts and automatic merge cannot happen. In such cases you need to manually resolve the conflicts. How to do it? Basically we will first merge master to our PR2 branch (yes, exactly, it is vise versa of what you might have thought.. or was it just me? :) ). Then we resolve the conflicts on our PR2 branch, then we commit changes to PR2 and we are ready to merge PR2 to master. Detailled steps are described below:\r\n\r\n> First we go to our terminal.\r\n\r\n> We go to our PR2 branch using checkout command:\r\n```\r\ngit checkout PR2\r\n```\r\n\r\n> As we are now on PR2 branch we can merge master to our PR2 by <code>git merge</code>.\r\n```\r\ngit merge master\r\n```\r\n\r\n>Above command will merge master to our PR2 branch (our currently active branch on which we are now).\r\n\r\n> As you do the merge you will most likely get an error, that merge could not be done manually and you will get a conflicted file. Please note, that we are still on our PR2 branch, but partially it was merged already with code from master, except for the conflicts. Let's assume that conflicting file is <code>App.js</code>.\r\n\r\n> We need to go to the <code>App.js</code> and this file will contain weird characters, HEAD and master:\r\n```\r\n<<<<<<< HEAD\r\ncode1\r\n=======\r\ncode2\r\n>>>>>>> master\r\n```\r\n\r\n> This basically points you to what exactly the conflict is. \r\n\r\n> <code>HEAD</code> means what is on your current branch (in our case branch PR2). This is basically **code1**, which is between\r\n```\r\n<<<<<<< HEAD\r\n```\r\n\r\nand \r\n```\r\n=======\r\n```\r\n\r\n> Above **code1** is in conflict with its equivalnt **code2** on master branch. In file it will be code between:\r\n```\r\n=======\r\n```\r\nand \r\n```\r\n>>>>>>> master\r\n```\r\n\r\n> At this point you need to decide if **code1** or **code2** is the correct one that should be kept.\r\n\r\n> In our case let's assume that **code1** is the correct one. Therefore, we will remove everything except for **code1**:\r\n```\r\ncode1\r\n```\r\n> **code1** stays in our file\r\n\r\n> We need to remove everything else. Also HEAD and master and all other characters:\r\n\r\n```\r\n<<<<<<< HEAD\r\n=======\r\ncode2\r\n>>>>>>> master\r\n```\r\n\r\n> Here I would recommend to double-check if our code is still working! Run your local server:\r\n```\r\nnpm start\r\n```\r\n\r\n>and check if merge and conflict resolution was correct and your app is still working. In my case for example, there was an error that one function which should be deleted was still imported in my file. Therefore, I can assume it is always necessary to check the app and run your tests after merge:\r\n```\r\nnpm run test\r\n```\r\n\r\n> Now it is time to commit and push the changes on PR2 branch from our LOCAL to REMOTE:\r\n```\r\ngit add .\r\n```\r\n\r\n```\r\ngit commit -m \"merging master to PR2, resolving conflicts\"\r\n```\r\n\r\n```\r\ngit push origin PR2\r\n```\r\n\r\n> We can check Github now. PR2 should now contain all code from master and its updates (additions) to master. We should be good to go and merge PR2 to master without conflicts. Yay :)\r\n\r\n**UNDO CHANGES**\r\n\r\n> To undo changes in a specific file without staging them use git <code>checkout</code> and a file path to the file which we want to revert changes done:\r\n```\r\ngit checkout src/functions/myFunction.js\r\n```\r\n**CODE STATISTICS**\r\n\r\n![](https://i.imgur.com/ydhaIIE.jpg \"Photo by Timur Saglambilek from Pexels\")\r\n\r\n> Display number of rows of code for each file - code statistics:\r\n```\r\ngit ls-files | xargs wc -l\r\n```\r\n\r\n> It will result in something like this:\r\n```\r\n38 src/App.css\r\n99 src/App.js\r\n36 src/components/Button.css\r\n23 src/components/Button.js\r\n24 src/components/Chart.js\r\n14 src/components/Filter.js\r\n27 src/components/Header.js\r\n```\r\n\r\n> Get statistics about users, number of changed files, how many insertions, how many deletions and net:\r\n```\r\ngit log --shortstat --pretty=\"%cE\" | sed 's/\\(.*\\)@.*/\\1/' | grep -v \"^$\" | awk 'BEGIN { line=\"\"; } !/^ / { if (line==\"\" || !match(line, $0)) {line = $0 \",\" line }} /^ / { print line \" # \" $0; line=\"\"}' | sort | sed -E 's/# //;s/ files? changed,//;s/([0-9]+) ([0-9]+ deletion)/\\1 0 insertions\\(+\\), \\2/;s/\\(\\+\\)$/\\(\\+\\), 0 deletions\\(-\\)/;s/insertions?\\(\\+\\), //;s/ deletions?\\(-\\)//' | awk 'BEGIN {name=\"\"; files=0; insertions=0; deletions=0;} {if ($1 != name && name != \"\") { print name \": \" files \" files changed, \" insertions \" insertions(+), \" deletions \" deletions(-), \" insertions-deletions \" net\"; files=0; insertions=0; deletions=0; name=$1; } name=$1; files+=$2; insertions+=$3; deletions+=$4} END {print name \": \" files \" files changed, \" insertions \" insertions(+), \" deletions \" deletions(-), \" insertions-deletions \" net\";}'\r\n```\r\n> It will result it something like this:\r\n```\r\nmirka.schw,: 311 files changed, 370168 insertions(+), 99040 deletions(-), 271128 net\r\n```\r\n\r\n> How to install new version of npm \r\n```\r\nnpm install -g npm\r\n```\r\n\r\n> Search content of all your commit messages:\r\n```\r\ngit log --grep=´xxxx´\r\n```\r\n\r\n> Search content of all your code changes:\r\n```\r\ngit log -S ´xxxx´\r\n```\r\n\r\n> Search where each line of code was last changed\r\n```\r\ngit blame\r\n```\r\n\r\n> See status of commits\r\n```\r\ngit log --shortstat\r\n```\r\n\r\n> See all commit titles nicely as a one-liners\r\n```\r\ngit log --pretty=oneline\r\n```\r\n\r\n> To move or delete files:\r\n```\r\ngit mv\r\n```\r\n\r\n> Good practice is to first rename or move file, then commit! Only then do more changes to the file. Reason is, that if you rename or move file AND make changes to it, in the change history it will be shown as if entire file was removed and new on was added. You will not be able to track and compare changes within the file.\r\n\r\n```\r\ngit mv oldfile newfile\r\ngit commit -m \"moved oldfile to newfile\"\r\n```\r\n\r\n> To remove, reorder, edit, merge and split commits. You should review the development history and tell meaningful stories from it, rather than having a scatterplot of all commits\r\n```\r\ngit rebase --interactive\r\n```\r\n\r\n> To rename a branch, first go to that branch:\r\n```\r\ngit checkout <old_name>\r\n```\r\n\r\n> and then rename the branch\r\n```\r\ngit branch -m <new_name>\r\n```\r\n> Example:\r\n```\r\ngit checkout 20-colocation\r\ngit branch -m 20p-colocation\r\n```\r\n> To change node version:\r\n```\r\nnvm use 8.10.0\r\n```\r\n\r\n> To install Typscript you need to have node.js installed:\r\n```\r\nnodejs.org/en/\r\n```\r\n\r\n> Node.js will also install NPM tool (node package Manager) which will allow us to intall Typsscript globally with <code>npm install</code> command\r\n\r\n> To install Typescript:\r\n```\r\nnpm install -g typescript\r\n\r\n```\r\n\r\n> Maybe you need to add <code>sudo</code> in front of it:\r\n```\r\nsudo npm install -g typescript\r\n\r\n```\r\n\r\n> How to get all the history of your commands in terminal? Navigate to home/addania/ and there you will find a file called `.bash_history`\r\n\r\n>If you want to rename branch on your local only while pointed to any branch, do:\r\n```\r\ngit branch -m <oldname> <newname>\r\n```\r\n\r\n>If you want to locally rename branch on which you are currently at, you can do:\r\n```\r\ngit branch -m <newname>\r\n```\r\n\r\n>Renaming locally and remotely some branch, refer to [StackOverflow](https://stackoverflow.com/questions/1526794/rename-master-branch-for-both-local-and-remote-git-repositories?answertab=votes#tab-top)\r\n\r\n> To see history of all your commits (or if you need to see commit hash):\r\n```\r\ngit log\r\n```\r\n>Then if you need to see the code what you did in one specific commit, to see it historically, you can visit that commit with:\r\n```\r\ngit checkout 30acb3ba5ca523928e8c349f7b3303e24c\r\n```\r\n\r\n> Where 30acb3ba5ca523928e8c349f7b3303e24c is your commit hash\r\n\r\n> Please note that if you do this, you will detach the HEAD - which means a pointer where you currently are. So in order to go back to your branch and your latest commit, then you simply do:\r\n```\r\ngit checkout feature/name-of-my-branch\r\n```\r\n\r\n> Then if you want to see what you did exactly in a speciffic commit, you can do:\r\n\r\n```\r\ngit checkout \r\n```\r\n\r\n**VISUALS**\r\n\r\n![](https://i.imgur.com/qvRNfBN.png  \"Smart Git logo\")\r\n> Good visual Git software is called Smart Git(it is paid however):\r\n```\r\nSmart Git\r\n```","frontmatter":{"date":"2019-09-25","title":"Intro to Git","category":"knowledge-base"},"fields":{"slug":"/Intro_to_Git/"},"timeToRead":18,"html":"<p><img src=\"https://i.imgur.com/ZVeInG0.png\" title=\"Git Logo\"></p>\n<p><strong>GETTING STARTED</strong></p>\n<p>Git is a file versioning system (or in other words version control system).</p>\n<blockquote>\n<p>In order to install Git we need to have apt-get updated. To update apt-get</p>\n</blockquote>\n<pre><code>sudo apt-get update\n</code></pre>\n<blockquote>\n<p>To install Git</p>\n</blockquote>\n<pre><code>sudo apt-get install git\n</code></pre>\n<blockquote>\n<p>To check version of Git</p>\n</blockquote>\n<pre><code>git --version\n</code></pre>\n<blockquote>\n<p>To set up username and email</p>\n</blockquote>\n<pre><code>git config --global user.name \"addania\"\ngit config --global user.email \"mirka.schw@gmail.com\"\n</code></pre>\n<p><strong>DEFINITIONS</strong></p>\n<p><img src=\"https://i.imgur.com/ba3JFiY.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p><strong>Local</strong></p>\n<blockquote>\n<p>When we talk about LOCAL we mean anything that is stored locally on your computer hard drive.</p>\n</blockquote>\n<p><strong>Remote</strong></p>\n<blockquote>\n<p>When we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.</p>\n</blockquote>\n<p><strong>GIT WORKFLOW</strong>:</p>\n<p><img src=\"https://i.imgur.com/cHDGtUJ.jpg\" title=\"Photo by Startup Stock Photos from Pexels\"></p>\n<p>First we need to link our LOCAL and REMOTE repositories using SSH Key.</p>\n<p>We need to generate our LOCAL SSH key which we then paste to REMORE GitHub.</p>\n<p>Imagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.</p>\n<p>Some softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing <code>git init</code> command which will create a subfolder git in my current project folder.</p>\n<pre><code>git init\n</code></pre>\n<p>Then I work on my project files and make changes to my website. Firstly, I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:</p>\n<pre><code>git add .\ngit commit -m \"message goes here\"\n</code></pre>\n<p>When our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.</p>\n<p>Then we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention): <code>git remote add origin remoteRepositoryURL</code></p>\n<p>For example:</p>\n<pre><code>git remote add origin git@github.com:addania/addania.com.git \n</code></pre>\n<p>To verify if our new remote was added we can check the:</p>\n<pre><code>git remote -v \n</code></pre>\n<p>Then we are ready to push our LOCAL git repository to the REMOTE Github repository:</p>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>To check status of my Git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:</p>\n</blockquote>\n<pre><code>git status\n</code></pre>\n<blockquote>\n<p>To see history of commits</p>\n</blockquote>\n<pre><code>git log\n</code></pre>\n<blockquote>\n<p>The git init command creates a new Git repository. Executing <code>git init</code> creates a <code>.git</code> subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:</p>\n</blockquote>\n<pre><code>git init\n</code></pre>\n<blockquote>\n<p>In order to commit anything, we first need to add files to staging area by using following command (dot means all files):</p>\n</blockquote>\n<pre><code>git add . \n</code></pre>\n<blockquote>\n<p>To commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. Git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:</p>\n</blockquote>\n<pre><code>git commit\n</code></pre>\n<blockquote>\n<p>To commit files to LOCAL git repository with a message already included in the command:</p>\n</blockquote>\n<pre><code>git commit -m \"message goes here\"\n</code></pre>\n<blockquote>\n<p>To see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):</p>\n</blockquote>\n<pre><code>git remote -v\n</code></pre>\n<blockquote>\n<p>To add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository</p>\n</blockquote>\n<pre><code>git remote add origin git@github.com:addania/addania.com.git\n</code></pre>\n<blockquote>\n<p>To rename origin with new url if I need to change my repository name:</p>\n</blockquote>\n<pre><code>git remote set-url origin git@github.com:addania/addania.github.io.git\n</code></pre>\n<blockquote>\n<p>To check how many branches I have in my repository, if there is only one, the main one will be called usually master:</p>\n</blockquote>\n<pre><code>git branch\n</code></pre>\n<blockquote>\n<p>To push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the branch in the project, main branch is called master:</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>If I don't want to write always <code>git push origin master -force</code> I can create upstream and link local to remote git by <code>-u</code>. After this command then I can use only git push to upload files</p>\n</blockquote>\n<pre><code>git push -u origin master -f\n</code></pre>\n<blockquote>\n<p>To overwrite anything on the REMOTE repository in master branch we can <code>force</code> push:</p>\n</blockquote>\n<pre><code>git push origin master --force \n</code></pre>\n<blockquote>\n<p>Pulling down files from REMOTE Git to local Git, where origin is name of my REMOTE Git and master is name of my branch:</p>\n</blockquote>\n<pre><code>git pull origin master\n</code></pre>\n<blockquote>\n<p>To create new branch on the LOCAL machine:</p>\n</blockquote>\n<pre><code>git checkout -b [name_of_your_new_branch]\n</code></pre>\n<blockquote>\n<p>For example, where convention is that 1 is number of issue on Github:</p>\n</blockquote>\n<pre><code>git checkout -b Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>To create a new branch taking MASTER as a base for the code (it could be any other name of the branch):</p>\n</blockquote>\n<pre><code>git checkout -b Github1AddDay05Task02 master\n</code></pre>\n<blockquote>\n<p>To create a new branch taking Github2AddDay06 as a base for the code (it could be any othr name of the branch):</p>\n</blockquote>\n<pre><code>git checkout -b Github1AddDay05Task02 Github2AddDay06\n</code></pre>\n<blockquote>\n<p>This will switch from your current branch to the new branch.</p>\n</blockquote>\n<blockquote>\n<p>You can always use <code>git status</code> to check on which branch you currently work.</p>\n</blockquote>\n<pre><code>git status\n</code></pre>\n<blockquote>\n<p>Push the branch <code>gh-pages</code> to Github :</p>\n</blockquote>\n<pre><code>git push origin gh-pages\n</code></pre>\n<blockquote>\n<p>To see Git log (historical commits):</p>\n</blockquote>\n<pre><code>git log\n</code></pre>\n<blockquote>\n<p>It only shows one page by default:</p>\n</blockquote>\n<blockquote>\n<p>In order to see new line press <code>ENTER</code>.</p>\n</blockquote>\n<blockquote>\n<p>In order to see new page press <code>SPACE</code>.</p>\n</blockquote>\n<blockquote>\n<p>In order to see new page press <code>Q</code>.</p>\n</blockquote>\n<blockquote>\n<p>Here is an example log of latest commit:</p>\n</blockquote>\n<pre><code>commit 29d6a97075b71993ca66b67a04ed9e038f4330ed (HEAD -> Github1AddDay05Task02, origin/gh-pages, gh-pages)\nAuthor: addania &#x3C;mirka.schw@gmail.com>\nDate:   Sat Dec 14 17:10:03 2019 +0100\nadding day 4 tast 2\n</code></pre>\n<blockquote>\n<p>Commit ID is <code>29d6a97075b71993ca66b67a04ed9e038f4330ed</code></p>\n</blockquote>\n<blockquote>\n<p><code>HEAD</code> means that this is the commit on which I currently work, this is the latest commit which I did</p>\n</blockquote>\n<blockquote>\n<p>After <code>-></code> we have all branches which are on this commit, they are also called tags (or marks).</p>\n</blockquote>\n<blockquote>\n<p>It means my commit 29d6a97075b71993ca66b67a04ed9e038f4330ed is on branch <code>Github1AddDay05Task02</code>, <code>origin/gh-pages</code> and <code>gh-pages</code>.</p>\n</blockquote>\n<p>1// <strong>gh-pages</strong> is my LOCAL version of the branch</p>\n<p>2// <strong>origin/gh-pages</strong> is my REMOTE version of the branch</p>\n<p>3// <strong>Github1AddDay05Task02</strong> is my new branch which I created with <code>git checkout -b Github1AddDay05Task02</code></p>\n<blockquote>\n<p>As soon as I create a new branch with <code>git checkout -b Github1AddDay05Task02</code> my latest commit will be on that branch.</p>\n</blockquote>\n<blockquote>\n<p>Then I need to push my LOCAL branch to the REMOTE:</p>\n</blockquote>\n<pre><code>git push origin Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>I can now go to Github and check if new branch was created.</p>\n</blockquote>\n<blockquote>\n<p>How to switch branches to master branch:</p>\n</blockquote>\n<pre><code>git checkout master\n</code></pre>\n<blockquote>\n<p>How to switch branches to gh-pages branch:</p>\n</blockquote>\n<pre><code>git checkout gh-pages\n</code></pre>\n<blockquote>\n<p>How to switch branches to Github1AddDay05Task02 branch - how to change branch:</p>\n</blockquote>\n<pre><code>git checkout Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>Then if I have couple of branches I always need to pay attention which branch I am on and from which branch I do <code>npm start</code> and which files I am then working on.</p>\n</blockquote>\n<blockquote>\n<p>I can check on which branch I currently am by:</p>\n</blockquote>\n<pre><code>git status\n</code></pre>\n<blockquote>\n<p>Then when I am on correct branch then I can start my local development:</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<blockquote>\n<p>Then I can make changes to code on my new branch Github1AddDay05Task02</p>\n</blockquote>\n<blockquote>\n<p>Afterwards I add the changes to local git:</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Then I commit those changes:</p>\n</blockquote>\n<pre><code>git commit -m \"fixing issue Github1\"\n</code></pre>\n<blockquote>\n<p>And now I can push those changes to my REMOTE branch:</p>\n</blockquote>\n<pre><code>git push origin Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>You can go to Github and see that our latest commit is present on branch: Github1AddDay05Task02 but is not present on other branches like the gh-pages branch.</p>\n</blockquote>\n<p><strong>MERGE</strong></p>\n<p><img src=\"https://i.imgur.com/cZzbzhC.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<blockquote>\n<p>In order to merge this branch with the branch on which you have your main code (usually master, but in my case gh-pages branch), we can go to -> Pull Requests and click on <code>Create a new Pull Request</code></p>\n</blockquote>\n<blockquote>\n<p>Then it will show the <code>Compare changes</code> page</p>\n</blockquote>\n<p>1// <code>Base</code> is the main branch TO WHICH I want to merge my code to. In my case gh-pages (but usually will be master)</p>\n<p>2// <code>Compare</code> is the branch FROM WHICH I want to put data to the base. In my case Github1AddDay05Task02</p>\n<blockquote>\n<p>Here I can see all changes that were made.</p>\n</blockquote>\n<blockquote>\n<p>Next I can click <code>Create Pull Request</code></p>\n</blockquote>\n<blockquote>\n<p>I will be redirected to <code>Open Pull Request</code> page where I add title and description of the pull request. </p>\n</blockquote>\n<blockquote>\n<p>I can assign someone, add reviewers, labels and projects to this Pull Request.</p>\n</blockquote>\n<blockquote>\n<p>Then click <code>Create Pull Request</code></p>\n</blockquote>\n<blockquote>\n<p>Then someone will comment on the code, review changes, request change of the code or approve changes.</p>\n</blockquote>\n<blockquote>\n<p>If it is approved I can click on <code>Merge pull request</code>.</p>\n</blockquote>\n<blockquote>\n<p>Then click <code>Confirm Merge</code>.</p>\n</blockquote>\n<blockquote>\n<p>I should get the message:</p>\n</blockquote>\n<pre><code>Pull request successfully merged and closed\n</code></pre>\n<blockquote>\n<p>Now gh-pages branch on the REMOTE has CHANGED!!! We need to now download those latest changes to my LOCAL!!! We can use <code>git pull</code> or <code>git fetch</code>:</p>\n</blockquote>\n<pre><code>git fetch\n</code></pre>\n<pre><code>git pull\n</code></pre>\n<blockquote>\n<p><code>Git pull</code> will make <code>git fetch</code> plus it will also merge REMOTE changes with my LOCAL changes (which I made meanwhile but did not put on REMOTE). <code>Git fetch</code> will only fetch data, and will not merge in case I did some changes meanwhile on LOCAL which were not on REMOTE. Fetch will always work. Pull can fail if changes on my LOCAL are not compatible with changes on REMOTE.</p>\n</blockquote>\n<blockquote>\n<p>It does not matter on which branch I make the pull or fetch, it will take all the data from all branches. However, you might get an error:</p>\n</blockquote>\n<pre><code>There is no tracking information for the current branch.\n</code></pre>\n<p>It means that Git is not able to match LOCAL and REMOTE branch names automatically. Therefore you might need to use pull for a specific branch instead, to get all the updates:</p>\n<pre><code>git pull origin master\n</code></pre>\n<p>or</p>\n<pre><code>git pull origin master Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>My branch Github1AddDay05Task02 still exists. If we want to delete this branch I can do following:</p>\n</blockquote>\n<p>1// go to the pull request from where we merged it and at the end there will be button: <code>Delete branch</code></p>\n<p>or</p>\n<p>2// I can go to <code>Branches</code> and click on the trash icon to delete it</p>\n<blockquote>\n<p>To delete this branch on REMOTE from terminal:</p>\n</blockquote>\n<pre><code>git push &#x3C;remote_name> --delete &#x3C;branch_name>\n</code></pre>\n<blockquote>\n<p>In our case the code will be:</p>\n</blockquote>\n<pre><code>git push origin --delete Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>To delete this branch on LOCAL you first need to switch to a different branch:</p>\n</blockquote>\n<pre><code>git checkout master\n</code></pre>\n<blockquote>\n<p>Then you can delete your branch for example: Github1AddDay05Task02. You can do it by these 2 commands:</p>\n</blockquote>\n<pre><code>git branch -d branch_name\ngit branch -D branch_name\n</code></pre>\n<p>One is with <code>‘d’</code> and one with <code>‘D’</code>.</p>\n<p>1// The <code>-d</code> option stands for --delete, which would delete the local branch, only if you have already pushed and merged it with your remote branches.</p>\n<p>2// The <code>-D</code> option stands for --delete --force, which deletes the branch regardless of its push and merge status, so careful with this one!</p>\n<blockquote>\n<p>If you have the case that you delete a branch on your REMOTE, you delete it on your local and your local still remembers it even after <code>git pull origin</code> or <code>git fetch origin</code>, and your deleted branch still shows in your list of remote branches: <code>git branch -a</code>, you can then use prune:</p>\n</blockquote>\n<pre><code>git remote update origin --prune\n</code></pre>\n<blockquote>\n<p>We can merge branch into another one also in terminal. For example I want to merge my PR1 branch into master branch. First we run <code>git checkout master</code> to change the active branch back to master. </p>\n</blockquote>\n<pre><code>git checkout master\n</code></pre>\n<blockquote>\n<p>Then we run the command <code>git merge PR1</code> to merge the new feature into the master branch.</p>\n</blockquote>\n<pre><code>git merge PR1\n</code></pre>\n<blockquote>\n<p>Note that <code>git merge</code> merges the specified branch into the <code>currently active</code> branch. So we need to be on the branch that we are merging into.</p>\n</blockquote>\n<blockquote>\n<p>Note also that this only merged the branches LOCALLY. We still need to push changes to REMOTE.</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>Performing this might not necessarily automatically close the PR on Github (if the PRs base was NOT master) but it can close it automatically (if the PRs base was master). Weird stuff, kinda.</p>\n</blockquote>\n<p><strong>RESOLVING CONFLICTS</strong></p>\n<p><img src=\"https://i.imgur.com/EN9pOyE.jpg\" title=\"Photo by Steve Johnson from Pexels\"></p>\n<blockquote>\n<p>Imagine you want to merge branch PR2 to your master branch. However, you notice on Github, that there are some conflicts and automatic merge cannot happen. In such cases you need to manually resolve the conflicts. How to do it? Basically we will first merge master to our PR2 branch (yes, exactly, it is vise versa of what you might have thought.. or was it just me? :) ). Then we resolve the conflicts on our PR2 branch, then we commit changes to PR2 and we are ready to merge PR2 to master. Detailled steps are described below:</p>\n</blockquote>\n<blockquote>\n<p>First we go to our terminal.</p>\n</blockquote>\n<blockquote>\n<p>We go to our PR2 branch using checkout command:</p>\n</blockquote>\n<pre><code>git checkout PR2\n</code></pre>\n<blockquote>\n<p>As we are now on PR2 branch we can merge master to our PR2 by <code>git merge</code>.</p>\n</blockquote>\n<pre><code>git merge master\n</code></pre>\n<blockquote>\n<p>Above command will merge master to our PR2 branch (our currently active branch on which we are now).</p>\n</blockquote>\n<blockquote>\n<p>As you do the merge you will most likely get an error, that merge could not be done manually and you will get a conflicted file. Please note, that we are still on our PR2 branch, but partially it was merged already with code from master, except for the conflicts. Let's assume that conflicting file is <code>App.js</code>.</p>\n</blockquote>\n<blockquote>\n<p>We need to go to the <code>App.js</code> and this file will contain weird characters, HEAD and master:</p>\n</blockquote>\n<pre><code>&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\ncode1\n=======\ncode2\n>>>>>>> master\n</code></pre>\n<blockquote>\n<p>This basically points you to what exactly the conflict is. </p>\n</blockquote>\n<blockquote>\n<p><code>HEAD</code> means what is on your current branch (in our case branch PR2). This is basically <strong>code1</strong>, which is between</p>\n</blockquote>\n<pre><code>&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\n</code></pre>\n<p>and </p>\n<pre><code>=======\n</code></pre>\n<blockquote>\n<p>Above <strong>code1</strong> is in conflict with its equivalnt <strong>code2</strong> on master branch. In file it will be code between:</p>\n</blockquote>\n<pre><code>=======\n</code></pre>\n<p>and </p>\n<pre><code>>>>>>>> master\n</code></pre>\n<blockquote>\n<p>At this point you need to decide if <strong>code1</strong> or <strong>code2</strong> is the correct one that should be kept.</p>\n</blockquote>\n<blockquote>\n<p>In our case let's assume that <strong>code1</strong> is the correct one. Therefore, we will remove everything except for <strong>code1</strong>:</p>\n</blockquote>\n<pre><code>code1\n</code></pre>\n<blockquote>\n<p><strong>code1</strong> stays in our file</p>\n</blockquote>\n<blockquote>\n<p>We need to remove everything else. Also HEAD and master and all other characters:</p>\n</blockquote>\n<pre><code>&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\n=======\ncode2\n>>>>>>> master\n</code></pre>\n<blockquote>\n<p>Here I would recommend to double-check if our code is still working! Run your local server:</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<blockquote>\n<p>and check if merge and conflict resolution was correct and your app is still working. In my case for example, there was an error that one function which should be deleted was still imported in my file. Therefore, I can assume it is always necessary to check the app and run your tests after merge:</p>\n</blockquote>\n<pre><code>npm run test\n</code></pre>\n<blockquote>\n<p>Now it is time to commit and push the changes on PR2 branch from our LOCAL to REMOTE:</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<pre><code>git commit -m \"merging master to PR2, resolving conflicts\"\n</code></pre>\n<pre><code>git push origin PR2\n</code></pre>\n<blockquote>\n<p>We can check Github now. PR2 should now contain all code from master and its updates (additions) to master. We should be good to go and merge PR2 to master without conflicts. Yay :)</p>\n</blockquote>\n<p><strong>UNDO CHANGES</strong></p>\n<blockquote>\n<p>To undo changes in a specific file without staging them use git <code>checkout</code> and a file path to the file which we want to revert changes done:</p>\n</blockquote>\n<pre><code>git checkout src/functions/myFunction.js\n</code></pre>\n<p><strong>CODE STATISTICS</strong></p>\n<p><img src=\"https://i.imgur.com/ydhaIIE.jpg\" title=\"Photo by Timur Saglambilek from Pexels\"></p>\n<blockquote>\n<p>Display number of rows of code for each file - code statistics:</p>\n</blockquote>\n<pre><code>git ls-files | xargs wc -l\n</code></pre>\n<blockquote>\n<p>It will result in something like this:</p>\n</blockquote>\n<pre><code>38 src/App.css\n99 src/App.js\n36 src/components/Button.css\n23 src/components/Button.js\n24 src/components/Chart.js\n14 src/components/Filter.js\n27 src/components/Header.js\n</code></pre>\n<blockquote>\n<p>Get statistics about users, number of changed files, how many insertions, how many deletions and net:</p>\n</blockquote>\n<pre><code>git log --shortstat --pretty=\"%cE\" | sed 's/\\(.*\\)@.*/\\1/' | grep -v \"^$\" | awk 'BEGIN { line=\"\"; } !/^ / { if (line==\"\" || !match(line, $0)) {line = $0 \",\" line }} /^ / { print line \" # \" $0; line=\"\"}' | sort | sed -E 's/# //;s/ files? changed,//;s/([0-9]+) ([0-9]+ deletion)/\\1 0 insertions\\(+\\), \\2/;s/\\(\\+\\)$/\\(\\+\\), 0 deletions\\(-\\)/;s/insertions?\\(\\+\\), //;s/ deletions?\\(-\\)//' | awk 'BEGIN {name=\"\"; files=0; insertions=0; deletions=0;} {if ($1 != name &#x26;&#x26; name != \"\") { print name \": \" files \" files changed, \" insertions \" insertions(+), \" deletions \" deletions(-), \" insertions-deletions \" net\"; files=0; insertions=0; deletions=0; name=$1; } name=$1; files+=$2; insertions+=$3; deletions+=$4} END {print name \": \" files \" files changed, \" insertions \" insertions(+), \" deletions \" deletions(-), \" insertions-deletions \" net\";}'\n</code></pre>\n<blockquote>\n<p>It will result it something like this:</p>\n</blockquote>\n<pre><code>mirka.schw,: 311 files changed, 370168 insertions(+), 99040 deletions(-), 271128 net\n</code></pre>\n<blockquote>\n<p>How to install new version of npm </p>\n</blockquote>\n<pre><code>npm install -g npm\n</code></pre>\n<blockquote>\n<p>Search content of all your commit messages:</p>\n</blockquote>\n<pre><code>git log --grep=´xxxx´\n</code></pre>\n<blockquote>\n<p>Search content of all your code changes:</p>\n</blockquote>\n<pre><code>git log -S ´xxxx´\n</code></pre>\n<blockquote>\n<p>Search where each line of code was last changed</p>\n</blockquote>\n<pre><code>git blame\n</code></pre>\n<blockquote>\n<p>See status of commits</p>\n</blockquote>\n<pre><code>git log --shortstat\n</code></pre>\n<blockquote>\n<p>See all commit titles nicely as a one-liners</p>\n</blockquote>\n<pre><code>git log --pretty=oneline\n</code></pre>\n<blockquote>\n<p>To move or delete files:</p>\n</blockquote>\n<pre><code>git mv\n</code></pre>\n<blockquote>\n<p>Good practice is to first rename or move file, then commit! Only then do more changes to the file. Reason is, that if you rename or move file AND make changes to it, in the change history it will be shown as if entire file was removed and new on was added. You will not be able to track and compare changes within the file.</p>\n</blockquote>\n<pre><code>git mv oldfile newfile\ngit commit -m \"moved oldfile to newfile\"\n</code></pre>\n<blockquote>\n<p>To remove, reorder, edit, merge and split commits. You should review the development history and tell meaningful stories from it, rather than having a scatterplot of all commits</p>\n</blockquote>\n<pre><code>git rebase --interactive\n</code></pre>\n<blockquote>\n<p>To rename a branch, first go to that branch:</p>\n</blockquote>\n<pre><code>git checkout &#x3C;old_name>\n</code></pre>\n<blockquote>\n<p>and then rename the branch</p>\n</blockquote>\n<pre><code>git branch -m &#x3C;new_name>\n</code></pre>\n<blockquote>\n<p>Example:</p>\n</blockquote>\n<pre><code>git checkout 20-colocation\ngit branch -m 20p-colocation\n</code></pre>\n<blockquote>\n<p>To change node version:</p>\n</blockquote>\n<pre><code>nvm use 8.10.0\n</code></pre>\n<blockquote>\n<p>To install Typscript you need to have node.js installed:</p>\n</blockquote>\n<pre><code>nodejs.org/en/\n</code></pre>\n<blockquote>\n<p>Node.js will also install NPM tool (node package Manager) which will allow us to intall Typsscript globally with <code>npm install</code> command</p>\n</blockquote>\n<blockquote>\n<p>To install Typescript:</p>\n</blockquote>\n<pre><code>npm install -g typescript\n</code></pre>\n<blockquote>\n<p>Maybe you need to add <code>sudo</code> in front of it:</p>\n</blockquote>\n<pre><code>sudo npm install -g typescript\n</code></pre>\n<blockquote>\n<p>How to get all the history of your commands in terminal? Navigate to home/addania/ and there you will find a file called <code>.bash_history</code></p>\n</blockquote>\n<blockquote>\n<p>If you want to rename branch on your local only while pointed to any branch, do:</p>\n</blockquote>\n<pre><code>git branch -m &#x3C;oldname> &#x3C;newname>\n</code></pre>\n<blockquote>\n<p>If you want to locally rename branch on which you are currently at, you can do:</p>\n</blockquote>\n<pre><code>git branch -m &#x3C;newname>\n</code></pre>\n<blockquote>\n<p>Renaming locally and remotely some branch, refer to <a href=\"https://stackoverflow.com/questions/1526794/rename-master-branch-for-both-local-and-remote-git-repositories?answertab=votes#tab-top\">StackOverflow</a></p>\n</blockquote>\n<blockquote>\n<p>To see history of all your commits (or if you need to see commit hash):</p>\n</blockquote>\n<pre><code>git log\n</code></pre>\n<blockquote>\n<p>Then if you need to see the code what you did in one specific commit, to see it historically, you can visit that commit with:</p>\n</blockquote>\n<pre><code>git checkout 30acb3ba5ca523928e8c349f7b3303e24c\n</code></pre>\n<blockquote>\n<p>Where 30acb3ba5ca523928e8c349f7b3303e24c is your commit hash</p>\n</blockquote>\n<blockquote>\n<p>Please note that if you do this, you will detach the HEAD - which means a pointer where you currently are. So in order to go back to your branch and your latest commit, then you simply do:</p>\n</blockquote>\n<pre><code>git checkout feature/name-of-my-branch\n</code></pre>\n<blockquote>\n<p>Then if you want to see what you did exactly in a speciffic commit, you can do:</p>\n</blockquote>\n<pre><code>git checkout \n</code></pre>\n<p><strong>VISUALS</strong></p>\n<p><img src=\"https://i.imgur.com/qvRNfBN.png\" title=\"Smart Git logo\"></p>\n<blockquote>\n<p>Good visual Git software is called Smart Git(it is paid however):</p>\n</blockquote>\n<pre><code>Smart Git\n</code></pre>"}},{"node":{"id":"b80b2fb2-d477-5401-8ea0-3a8bb6146f66","excerpt":"HomeBrew helps to install softwares. See current version of homebrew Update brew Install software hello Install node Checking version of…","rawMarkdownBody":"\r\n![](https://i.imgur.com/omFnC3A.png \"Homebrew Logo\")\r\n\r\nHomeBrew helps to install softwares.\r\n\r\n> See current version of homebrew\r\n```\r\nbrew -v\r\n```\r\n> Update brew\r\n```\r\nbrew update\r\n```\r\n> Install software hello\r\n```\r\nbrew install hello\r\n```\r\n> Install node\r\n```\r\nbrew install node\r\n```\r\n> Checking version of node\r\n```\r\nnode --version\r\n```","frontmatter":{"date":"2019-09-24","title":"Intro to HomeBrew","category":"knowledge-base"},"fields":{"slug":"/Intro_to_HomeBrew/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/omFnC3A.png\" title=\"Homebrew Logo\"></p>\n<p>HomeBrew helps to install softwares.</p>\n<blockquote>\n<p>See current version of homebrew</p>\n</blockquote>\n<pre><code>brew -v\n</code></pre>\n<blockquote>\n<p>Update brew</p>\n</blockquote>\n<pre><code>brew update\n</code></pre>\n<blockquote>\n<p>Install software hello</p>\n</blockquote>\n<pre><code>brew install hello\n</code></pre>\n<blockquote>\n<p>Install node</p>\n</blockquote>\n<pre><code>brew install node\n</code></pre>\n<blockquote>\n<p>Checking version of node</p>\n</blockquote>\n<pre><code>node --version\n</code></pre>"}},{"node":{"id":"a207bae8-41a5-5b91-9744-10291309b5e0","excerpt":"General: It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a…","rawMarkdownBody":"\r\n![](https://i.imgur.com/9fMfBav.png \"Ubuntu Logo\")\r\n\r\n**General**:\r\n\r\nIt is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github.\r\n\r\nPlease note, upon first installation of Ubuntu subsystem, it is a completely blank software. It won't have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.\r\n\r\nUbuntu directory on PC:\r\n\r\n```\r\n\\\\wsl$\\Ubuntu-18.04\\home\\addania\r\n```\r\n\r\n**Controls**:\r\n\r\nCopy/Paste works differently in Ubuntu:\r\n\r\n<code>ctrl+shift+c</code> for copy,\r\n\r\n<code>crtl+shift+v</code> for paste\r\n\r\nSome commands will start with sudo which means to run as administrator\r\n\r\n<code>j</code> and <code>k</code> keys allows navigate up and down\r\n\r\n<code>h</code> and <code>l</code> allow to navigate left and right\r\n\r\n**Commands**:\r\n\r\n> To show which directory I am currently in we use command pwd (print working directory)\r\n\r\n```\r\npwd\r\n```\r\n\r\n> To display list of all files in a current directory\r\n\r\n```\r\nls\r\n```\r\n\r\n> To display list of all files in a current directory including hidden files (those with ., ex: .git)\r\n\r\n```\r\nls -a\r\n```\r\n\r\n> If you are in the file manager, you can use the keyboard shortcut <code>Ctrl+H</code> to display all the files including the hidden ones. Pressing Ctrl+H again will hide the files.\r\n\r\n```\r\nCTRL+H\r\n```\r\n\r\n> Change directory cd + name of the directory (ex: cd src will go to folder called src in your current folder), this is to go one directory down the tree\r\n\r\n```\r\ncd src\r\n```\r\n\r\n> To go one directory up the tree\r\n\r\n```\r\ncd ..\r\n```\r\n\r\n> To create a new folder\r\n\r\n```\r\nmkdir\r\n```\r\n\r\n> To create a new folder called <code>myNewFolder</code>\r\n\r\n```\r\nmkdir myNewFolder\r\n```\r\n\r\n> To create a new file called global.css\r\n\r\n```\r\ntouch global.css\r\n```\r\n\r\n> Navigate to root directory:\r\n\r\n```\r\ncd\r\n```\r\n\r\nor\r\n\r\n```\r\ncd ~\r\n```\r\n\r\n> To cancel something running in the command line:\r\n\r\n```\r\ncontrol-C\r\n```\r\n\r\n> To delete a specific file, type <code>rm</code> for remove and then file name\r\n\r\n```\r\nrm unnecessaryFile.js\r\n```\r\n\r\n> Command line, how to delete a specific folder, type <code>rm</code> for remove, <code>-r</code> for recursive, then folder name\r\n\r\n```\r\nrm -r unnecessaryFile.js\r\n```\r\n\r\n> How to kill or stop a process, for example Chrome?\r\n\r\n```\r\nkillall chrome\r\n```\r\n\r\n> How to see kill manual\r\n\r\n```\r\nman kill\r\n```\r\n\r\n> How to clear terminal? Simply type <code>clear</code>\r\n\r\n```\r\nclear\r\n```\r\n\r\n> How to check your current Ubuntu version:\r\n\r\n```\r\nlsb_release -a\r\n```\r\n\r\n> Output should be something like:\r\n\r\n```\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 19.10\r\nRelease:\t19.10\r\nCodename:\teoan\r\n```\r\n\r\n> How to find a file which contains certain substring in the file name? In our case we will be searching for a substring <code>devil</code>\r\n\r\n```\r\nsudo find . -name \"*devil*\"\r\n```\r\n\r\n> Result should be something like where we see location and name of the file:\r\n\r\n```\r\n./Downloads/devil.png\r\n```\r\n\r\n> How to see history of all commands? Simply type in:\r\n\r\n```\r\nhistory\r\n```\r\n\r\n> You can also search history for a specific substring. Maybe I want to make sure I installed something and I dont remember, then I can use this command:\r\n\r\n```\r\nhistory | grep \"sudo\"\r\n```\r\n\r\n> Another way how to search history for specific substring is by hitting:\r\n\r\n```\r\n CTRL + R\r\n```\r\n> Delete file / Remove file. First navigate to the folder which contains it with `cd` and then execute:\r\n```\r\nrm daemon.json\r\n```\r\n\r\n> Use sudo if you dont have enough permissions for deleting file or removing file:#```\r\n```\r\nsudo rm daemon.json\r\n```\r\n\r\n> Delete folder / Remove folder. First navigate to the folder which contains folder you want to remove with `cd` and then execute:\r\n```\r\nrm -rf docker_data/\r\n```\r\n\r\n> Use sudo if you dont have enough permissions for deleting folder or removing folder:\r\n```\r\nsudo rm -rf docker_data/\r\n```\r\n> Check disc space. Df == disk free. It goes through all devices and partitions and prints out the overall disc usage of the device. a partition is kind of device and you have a lot of virtual devices, this is why the list is that long and -h means humanize, so you don't get the output in bytes but in MB or GB or what ever makes sense from the size of the device/directory:\r\n```\r\ndf -h\r\n```\r\n> Check disc usage of directory \"/\" and its subdirectories and the subdirectories of the subdirectories (thats the max-depth=2)and the -x means that it only goes through the partition of \"/\" and skips all other partitions\r\n```\r\nsudo du -x -h --max-depth=2 /\r\n```\r\n> Remove cache:\r\n```\r\nsudo apt-get clean\r\n```\r\n","frontmatter":{"date":"2019-09-23","title":"Intro to Ubuntu","category":"knowledge-base"},"fields":{"slug":"/Intro_to_Ubuntu/"},"timeToRead":4,"html":"<p><img src=\"https://i.imgur.com/9fMfBav.png\" title=\"Ubuntu Logo\"></p>\n<p><strong>General</strong>:</p>\n<p>It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github.</p>\n<p>Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It won't have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.</p>\n<p>Ubuntu directory on PC:</p>\n<pre><code>\\\\wsl$\\Ubuntu-18.04\\home\\addania\n</code></pre>\n<p><strong>Controls</strong>:</p>\n<p>Copy/Paste works differently in Ubuntu:</p>\n<p><code>ctrl+shift+c</code> for copy,</p>\n<p><code>crtl+shift+v</code> for paste</p>\n<p>Some commands will start with sudo which means to run as administrator</p>\n<p><code>j</code> and <code>k</code> keys allows navigate up and down</p>\n<p><code>h</code> and <code>l</code> allow to navigate left and right</p>\n<p><strong>Commands</strong>:</p>\n<blockquote>\n<p>To show which directory I am currently in we use command pwd (print working directory)</p>\n</blockquote>\n<pre><code>pwd\n</code></pre>\n<blockquote>\n<p>To display list of all files in a current directory</p>\n</blockquote>\n<pre><code>ls\n</code></pre>\n<blockquote>\n<p>To display list of all files in a current directory including hidden files (those with ., ex: .git)</p>\n</blockquote>\n<pre><code>ls -a\n</code></pre>\n<blockquote>\n<p>If you are in the file manager, you can use the keyboard shortcut <code>Ctrl+H</code> to display all the files including the hidden ones. Pressing Ctrl+H again will hide the files.</p>\n</blockquote>\n<pre><code>CTRL+H\n</code></pre>\n<blockquote>\n<p>Change directory cd + name of the directory (ex: cd src will go to folder called src in your current folder), this is to go one directory down the tree</p>\n</blockquote>\n<pre><code>cd src\n</code></pre>\n<blockquote>\n<p>To go one directory up the tree</p>\n</blockquote>\n<pre><code>cd ..\n</code></pre>\n<blockquote>\n<p>To create a new folder</p>\n</blockquote>\n<pre><code>mkdir\n</code></pre>\n<blockquote>\n<p>To create a new folder called <code>myNewFolder</code></p>\n</blockquote>\n<pre><code>mkdir myNewFolder\n</code></pre>\n<blockquote>\n<p>To create a new file called global.css</p>\n</blockquote>\n<pre><code>touch global.css\n</code></pre>\n<blockquote>\n<p>Navigate to root directory:</p>\n</blockquote>\n<pre><code>cd\n</code></pre>\n<p>or</p>\n<pre><code>cd ~\n</code></pre>\n<blockquote>\n<p>To cancel something running in the command line:</p>\n</blockquote>\n<pre><code>control-C\n</code></pre>\n<blockquote>\n<p>To delete a specific file, type <code>rm</code> for remove and then file name</p>\n</blockquote>\n<pre><code>rm unnecessaryFile.js\n</code></pre>\n<blockquote>\n<p>Command line, how to delete a specific folder, type <code>rm</code> for remove, <code>-r</code> for recursive, then folder name</p>\n</blockquote>\n<pre><code>rm -r unnecessaryFile.js\n</code></pre>\n<blockquote>\n<p>How to kill or stop a process, for example Chrome?</p>\n</blockquote>\n<pre><code>killall chrome\n</code></pre>\n<blockquote>\n<p>How to see kill manual</p>\n</blockquote>\n<pre><code>man kill\n</code></pre>\n<blockquote>\n<p>How to clear terminal? Simply type <code>clear</code></p>\n</blockquote>\n<pre><code>clear\n</code></pre>\n<blockquote>\n<p>How to check your current Ubuntu version:</p>\n</blockquote>\n<pre><code>lsb_release -a\n</code></pre>\n<blockquote>\n<p>Output should be something like:</p>\n</blockquote>\n<pre><code>No LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 19.10\nRelease:    19.10\nCodename:   eoan\n</code></pre>\n<blockquote>\n<p>How to find a file which contains certain substring in the file name? In our case we will be searching for a substring <code>devil</code></p>\n</blockquote>\n<pre><code>sudo find . -name \"*devil*\"\n</code></pre>\n<blockquote>\n<p>Result should be something like where we see location and name of the file:</p>\n</blockquote>\n<pre><code>./Downloads/devil.png\n</code></pre>\n<blockquote>\n<p>How to see history of all commands? Simply type in:</p>\n</blockquote>\n<pre><code>history\n</code></pre>\n<blockquote>\n<p>You can also search history for a specific substring. Maybe I want to make sure I installed something and I dont remember, then I can use this command:</p>\n</blockquote>\n<pre><code>history | grep \"sudo\"\n</code></pre>\n<blockquote>\n<p>Another way how to search history for specific substring is by hitting:</p>\n</blockquote>\n<pre><code> CTRL + R\n</code></pre>\n<blockquote>\n<p>Delete file / Remove file. First navigate to the folder which contains it with <code>cd</code> and then execute:</p>\n</blockquote>\n<pre><code>rm daemon.json\n</code></pre>\n<blockquote>\n<p>Use sudo if you dont have enough permissions for deleting file or removing file:#`<code></code></p>\n</blockquote>\n<pre><code>sudo rm daemon.json\n</code></pre>\n<blockquote>\n<p>Delete folder / Remove folder. First navigate to the folder which contains folder you want to remove with <code>cd</code> and then execute:</p>\n</blockquote>\n<pre><code>rm -rf docker_data/\n</code></pre>\n<blockquote>\n<p>Use sudo if you dont have enough permissions for deleting folder or removing folder:</p>\n</blockquote>\n<pre><code>sudo rm -rf docker_data/\n</code></pre>\n<blockquote>\n<p>Check disc space. Df == disk free. It goes through all devices and partitions and prints out the overall disc usage of the device. a partition is kind of device and you have a lot of virtual devices, this is why the list is that long and -h means humanize, so you don't get the output in bytes but in MB or GB or what ever makes sense from the size of the device/directory:</p>\n</blockquote>\n<pre><code>df -h\n</code></pre>\n<blockquote>\n<p>Check disc usage of directory \"/\" and its subdirectories and the subdirectories of the subdirectories (thats the max-depth=2)and the -x means that it only goes through the partition of \"/\" and skips all other partitions</p>\n</blockquote>\n<pre><code>sudo du -x -h --max-depth=2 /\n</code></pre>\n<blockquote>\n<p>Remove cache:</p>\n</blockquote>\n<pre><code>sudo apt-get clean\n</code></pre>"}}],"totalCount":115}},"pageContext":{}},"staticQueryHashes":["2199005656","63159454"]}