{"componentChunkName":"component---src-templates-blog-post-js","path":"/Children/","webpackCompilationHash":"e26d21c98e2ac220d89f","result":{"data":{"markdownRemark":{"html":"<p>There are two ways how we can declare innerHTML</p>\n<p>a) Passing word props as arguments and then accessing props like so: props.name</p>\n<pre><code>&#x3C;Button name=\"ABC\" color=\"green\">I AM CHILD&#x3C;/Button>\n</code></pre>\n<p>or</p>\n<pre><code>&#x3C;Button children=\"I AM A CHILD\" name=\"ABC\" color=\"green\"/>\n</code></pre>\n<p>Please note: when using second option I need to have self closing tag, because if I have <Button></Button> an empty stace between opening and closing tag will overwrite my children property!</p>\n<p>Please note: It is a good practice to write children betwee opening and closing tags (option A), rather than using it as property (option B)</p>\n<p>When we then define the button component, we can retrieve the children props like this</p>\n<p>Alternative A:</p>\n<pre><code>const Button = ({children}) => {\n  return (\n      &#x3C;button>{children}&#x3C;/button>\n  )\n}\n</code></pre>\n<p>Alternative B:</p>\n<pre><code>const Button = (props) => {\n  return (\n      &#x3C;button>{props.children}&#x3C;/button>\n  )\n}\n</code></pre>","frontmatter":{"title":"Children"},"excerpt":"There are two ways how we can declare innerHTML a) Passing word props as arguments and then accessing props like so: props.name or Pleaseâ€¦"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Children/"}}}