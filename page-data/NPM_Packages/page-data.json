{"componentChunkName":"component---src-templates-blog-post-js","path":"/NPM_Packages/","webpackCompilationHash":"e46be3b34cdcaabaf8a8","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://i.imgur.com/xa1x0Gq.jpg\" title=\"Photo by Kim Stiver from Pexels\"></p>\n<p>Let's talk about packages our app is depending on. These can be found in the package.json file. There 2 types of dependencies:</p>\n<p>1/dependencies\n2/devDependencies</p>\n<p><strong>devDependeencies</strong> are not directly used by the app when it is building, testing, running. </p>\n<p>Example of devDependencies:</p>\n<pre><code>gh-pages\n</code></pre>\n<p><strong>dependencies</strong> are packages which are necessary to build, run, test the APP. They are most of the time imported like: </p>\n<pre><code>import React rom \"react\"\nimport Bootstrap ...\n</code></pre>\n<p>To install dependecies, type this in command line:</p>\n<pre><code>npm install\n</code></pre>\n<p><code>npm install</code> installs all <strong>devDependancies</strong> and <strong>dependeencies</strong> which are specified in package.json!</p>\n<p><code>npm install</code> <strong>MUST</strong> be triggered manually by user. I decide when and which dependency I want to install. It must be installed in the folder where package.json. If it is not where package.json, it will throw an error (<em>\"hey, bro you want me to install pckages?? But there is no packages definition, so what should I do??\"</em>)</p>\n<p>If it is installed then I have a node_modules folder in my project folder.</p>\n<p><code>npm install</code> is done once and for all for each package (it will install all packages if I don't provide name of package) :)</p>\n<blockquote>\n<p>To install individual package, for example bootstrap</p>\n</blockquote>\n<pre><code>npm install bootstrap\n</code></pre>\n<p><code>npm start</code> will look into package.json in the script section under command <code>start</code>. It will execute whatever is in there. For applications created by create-react-app, there will be:</p>\n<pre><code>\"start\": \"react-scripts start\",\n</code></pre>\n<blockquote>\n<p><code>react-scripts start</code> will start local host environment under port number: 3000</p>\n</blockquote>\n<blockquote>\n<p>If I have gatsby project, I can also write</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<blockquote>\n<p><code>npm run develop</code> will also execute whatever is in package.json, in scripts under <code>start</code></p>\n</blockquote>\n<pre><code>\"npm run develop\",\n</code></pre>\n<blockquote>\n<p>This is then equivalent to</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>When I have command:</p>\n</blockquote>\n<pre><code>npm run develop\n</code></pre>\n<blockquote>\n<p><code>npm run</code> means it will look into package.json under scripts and select script called</p>\n</blockquote>\n<pre><code>\"develop\"\n</code></pre>\n<blockquote>\n<p>Then under develop we have:</p>\n</blockquote>\n<pre><code>\"develop\": \"gatsby develop\",\n</code></pre>\n<blockquote>\n<p><code>\"gatsby develop\"</code> is the FINAL thing FINALLY</p>\n</blockquote>\n<pre><code>phew\n</code></pre>\n<blockquote>\n<p>I should always use </p>\n</blockquote>\n<pre><code>npm run ....\n</code></pre>\n<blockquote>\n<p>For example:</p>\n</blockquote>\n<pre><code>npm run start\n</code></pre>\n<p>or</p>\n<pre><code>npm run develop\n</code></pre>\n<p>or </p>\n<pre><code>npm run test\n</code></pre>\n<blockquote>\n<p>But because start and test are such used and common, you can skip word <code>run</code> they can be abbreviated to</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<p>or</p>\n<pre><code>npm test\n</code></pre>\n<blockquote>\n<p>However, you CANNOT abbreviate npm develop, it needs to include run</p>\n</blockquote>\n<pre><code>npm run develop\n</code></pre>\n<p><img src=\"https://i.imgur.com/G6XuINT.jpg\" alt=\"Package\" title=\"Photo by Pixabay from Pexels\"></p>\n<p><strong>Dependencies Management</strong></p>\n<blockquote>\n<p>When I work on a project and test out things, I will probably install a lot of dependencies in my project. It can happen that the final version of the project will not need all of them. For that reason it is a good idea to tidy up the dependencies when the project is final. In order to remove dependencies we do the following:</p>\n</blockquote>\n<blockquote>\n<p>Open the <code>package.json</code> and remove those those dependencies which you don’t need. But... how do I know from all of them which ones are part of the final version of the project? We can use a tool called: <code>npm-check</code>, which will check which dependencies are part of the last  version of the project and which dependencies need updating. </p>\n</blockquote>\n<blockquote>\n<p>In order to download the npm-check, write this to the terminal:</p>\n</blockquote>\n<pre><code>npm install -g npm-check\n</code></pre>\n<blockquote>\n<p><code>-g</code> means that the package will be installed globally</p>\n</blockquote>\n<blockquote>\n<p>Then to use the <code>npm-check</code>, navigate to your project folder and paste:</p>\n</blockquote>\n<pre><code>npm-check\n</code></pre>\n<blockquote>\n<p>You will see the list of dependencies in terminal which are not used by your project or which need updating.</p>\n</blockquote>\n<blockquote>\n<p>Afterwards go to your <code>package.json</code> and delete unnecessary dependencies.</p>\n</blockquote>\n<blockquote>\n<p>Afterwards we can remove/delete entire <code>node_modules</code> folder in the project folder. </p>\n</blockquote>\n<blockquote>\n<p>Deleting <code>node_modules</code> from terminal, paste this:</p>\n</blockquote>\n<pre><code>rm -rf node_modules\n</code></pre>\n<blockquote>\n<p>Above will delete entire <code>node_modules</code> folder</p>\n</blockquote>\n<blockquote>\n<p>Alternatively you can also delete only a particular package by:</p>\n</blockquote>\n<pre><code>npm prune [name of package]\n</code></pre>\n<blockquote>\n<p>When everything we need is deleted, we can install only relevant dependencies which we left in <code>package.json</code>again by:</p>\n</blockquote>\n<pre><code>npm install\n</code></pre>\n<blockquote>\n<p>Your project is now dependent only on relevant packages and up-to-date! Yay! :)</p>\n</blockquote>\n<blockquote>\n<p>How to install new version of npm</p>\n</blockquote>\n<pre><code>npm install -g npm\n</code></pre>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>To change node version:</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<pre><code>nvm use 8.10.0\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/21122342/how-to-clean-node-modules-folder-of-packages-that-are-not-in-package-json\">https://stackoverflow.com/questions/21122342/how-to-clean-node-modules-folder-of-packages-that-are-not-in-package-json</a></p>\n<p><img src=\"https://i.imgur.com/Y5egUqF.jpg\" alt=\"Package\" title=\"Photo by freestocks.org from Pexels\"></p>","frontmatter":{"title":"NPM Packages"},"excerpt":"Let's talk about packages our app is depending on. These can be found in the package.json file. There 2 types of dependencies:…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/NPM_Packages/"}}}