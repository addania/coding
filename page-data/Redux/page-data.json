{"componentChunkName":"component---src-templates-blog-post-js","path":"/Redux/","webpackCompilationHash":"ba58c01ec983d32939c6","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://i.imgur.com/DzveM7R.png\" title=\"Photo by Traversy Media\n from https://www.youtube.com/watch?v=93p3LxR9xfM\"></p>\n<p>Redux is a global state manager. It is a predictable state container for JavaScript (apps.redux.js.org). Redux helps write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.</p>\n<p>We use Redux when we want to <code>share state</code> between components.</p>\n<p>Instead of individual <code>Component level state</code> you will have <code>Application level state</code>.</p>\n<p>Redux concept incorporates some teminilogy:</p>\n<blockquote>\n<p><code>View</code> - your components</p>\n</blockquote>\n<blockquote>\n<p><code>Store</code> - your state (it sends the state <strong>to</strong> components)</p>\n</blockquote>\n<blockquote>\n<p><code>Action creator</code> - one of components might be a button which when clicked will create an <strong>action</strong> - therefore it is called <strong>action creator</strong>. It will dispatch the action to the store.</p>\n</blockquote>\n<blockquote>\n<p><code>Reducers</code> - pure functions which define how application state changes, in response to that <strong>action</strong>. They receive old state and action and respond with the new state. This new state is sent to component and component will react to this new state</p>\n</blockquote>\n<p>Reference:</p>\n<p><a href=\"https://www.youtube.com/watch?v=93p3LxR9xfM\">https://www.youtube.com/watch?v=93p3LxR9xfM</a></p>","frontmatter":{"title":"Redux"},"excerpt":"Redux is a global state manager. It is a predictable state container for JavaScript (apps.redux.js.org). Redux helps write applications thatâ€¦"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Redux/"}}}