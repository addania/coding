{"componentChunkName":"component---src-templates-blog-post-js","path":"/Postgres_In_Docker/","result":{"data":{"markdownRemark":{"html":"<p><strong>Running Postgres database in Docker</strong></p>\n<blockquote>\n<p>If you build a t3app from: <a href=\"https://create.t3.gg/\">https://create.t3.gg/</a> with this command:</p>\n</blockquote>\n<pre><code>npm create t3-app@latest\n</code></pre>\n<blockquote>\n<p>it will automatically come with the sqlite database</p>\n</blockquote>\n<blockquote>\n<p>What if we want to run postgreSQL locally using docker? This would be only a development database and will not polute our production database</p>\n</blockquote>\n<blockquote>\n<p>Now how to do it?</p>\n</blockquote>\n<p><strong>Step 1: Install Docker</strong></p>\n<blockquote>\n<p>To install Docker, follow the instructions for your operating system on the Docker website:\n<a href=\"https://docs.docker.com/get-docker/\">https://docs.docker.com/get-docker/</a></p>\n</blockquote>\n<p><strong>Step 2: Create a Docker Compose file</strong></p>\n<blockquote>\n<p>Create a new file in the root directory of your project called docker-compose.yml with the following contents:</p>\n</blockquote>\n<pre><code>version: '3'\n\nservices:\n  db:\n    image: postgres\n    restart: always\n    environment:\n      POSTGRES_USER: &#x3C;your_postgres_user>\n      POSTGRES_PASSWORD: &#x3C;your_postgres_password>\n      POSTGRES_DB: &#x3C;your_postgres_database_name>\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - db_data:/var/lib/postgresql/data\n\nvolumes:\n  db_data:\n</code></pre>\n<blockquote>\n<p>Replace &#x3C;your<em>postgres</em>user>, &#x3C;your<em>postgres</em>password>, and &#x3C;your<em>postgres</em>database_name> with your own values.</p>\n</blockquote>\n<blockquote>\n<p>This file defines a Docker service called db which uses the official PostgreSQL image, exposes the PostgreSQL port (5432) on your host machine, and mounts a named volume to persist the data.</p>\n</blockquote>\n<p><strong>Step 3: Modify schema.prisma</strong></p>\n<blockquote>\n<p>Modify your <code>schema.prisma</code> file to use the PostgreSQL datasource. Replace the datasource block with the following:</p>\n</blockquote>\n<pre><code>datasource db {\n  provider = \"postgresql\"\n  url = \"postgresql://&#x3C;your_postgres_user>:&#x3C;your_postgres_password>@localhost:5432/&#x3C;your_postgres_database_name>?schema=public\"\n}\n</code></pre>\n<blockquote>\n<p>Replace &#x3C;your<em>postgres</em>user>, &#x3C;your<em>postgres</em>password>, and &#x3C;your<em>postgres</em>database_name> with your own values.</p>\n</blockquote>\n<p><strong>Step 4: Stop the current t3app</strong></p>\n<blockquote>\n<p>Stop the current t3app instance by pressing Ctrl+C in the terminal where it's running.</p>\n</blockquote>\n<p><strong>Step 5: Start the Docker container</strong></p>\n<blockquote>\n<p>Start the PostgreSQL Docker container by running the following command in your project root directory:</p>\n</blockquote>\n<pre><code>docker-compose up -d\n</code></pre>\n<blockquote>\n<p>This will start the PostgreSQL container in the background.</p>\n</blockquote>\n<p><strong>Step 6: Generate Prisma client</strong></p>\n<blockquote>\n<p>Generate a new Prisma client to reflect the changes in your schema and datasource. Run the following command in your project root directory:</p>\n</blockquote>\n<pre><code>npx prisma generate\n</code></pre>\n<blockquote>\n<p>This will regenerate your Prisma client with the updated schema.</p>\n</blockquote>\n<p><strong>Step 7: Verify the new database connection</strong></p>\n<blockquote>\n<p>Verify that the new database connection is working correctly by running the following command in your project root directory:</p>\n</blockquote>\n<pre><code>npx prisma studio\n</code></pre>\n<blockquote>\n<p>This will open Prisma Studio, a web-based tool to view and edit your data. Verify that you can see your data and that you can make changes.</p>\n</blockquote>\n<blockquote>\n<p>That's it! You've successfully switched your SQLite database to PostgreSQL and set it up in a Docker container. You can now start your t3app as usual and it will use the new database.</p>\n</blockquote>\n<p><strong>Troubleshooting</strong></p>\n<blockquote>\n<p>If you already had some migration in the sqlite and then switched to new database, in our case Postgres, make sure to delete the whole migrations folder.\nThen run new migrations:</p>\n</blockquote>\n<pre><code>npx prisma migrate dev\n</code></pre>\n<blockquote>\n<p>And then restart the prisma studio</p>\n</blockquote>\n<pre><code>npx prisma studio\n</code></pre>","frontmatter":{"title":"Running Postgres database in Docker"},"excerpt":"Running Postgres database in Docker If you build a t3app from: https://create.t3.gg/ with this command: it will automatically come with theâ€¦"}},"pageContext":{"slug":"/Postgres_In_Docker/"}},"staticQueryHashes":["2199005656","63159454"]}