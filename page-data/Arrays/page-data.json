{"componentChunkName":"component---src-templates-blog-post-js","path":"/Arrays/","webpackCompilationHash":"d38eae3b13248b5574e1","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://i.imgur.com/qmUjmQg.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>Here you can find a small summary of the most useful array methods.d</p>\n<p><strong>Creating an Array</strong></p>\n<p>Creating new array (when we dont want to reference) of a given length of empty elements:</p>\n<pre><code>let newArray = new Array(7);\n//creates array of 7 elements, each element is emtpy\n</code></pre>\n<p>Creating new array with one specific item in it:</p>\n<pre><code>let newArray = new Array(\"7\");\n//creates array of 1 element, this element is string 7\n</code></pre>\n<p>Creating new array from another array using spread operator. Spread operator creates new object + copies other array:</p>\n<pre><code>var array = [1,2,3]\nvar newArray = [...array]\n\n// newArray will be: [1,2,3]\n</code></pre>\n<p>Creating new array from another array using spread operator + adding more elements. Spread operator creates new object + copies other array:</p>\n<pre><code>var array = [1,2,3]\nvar newArray = [...array, 4]\n\n// newArray will be: [1,2,3,4]\n</code></pre>\n<p>Creating new array filled with 0s using loop:</p>\n<pre><code>var data = [];\nvar length = 5;\n\nfor(var i = 0; i &#x3C; length; i++) {\n    data.push(0);\n}\n</code></pre>\n<p><strong>Array.map()</strong></p>\n<p><img src=\"https://i.imgur.com/XM3VmyA.jpg\" alt=\"Map\" title=\"Photo by Aaditya Arora from Pexels\"></p>\n<p><code>array.map()</code> is going through each element of the array and allows to perform function on it and output NEW array</p>\n<p>It requires a function after the brackets. Function takes argument for example called <code>string</code> (but name of argument can be called anything, for example: item, string, number, etc.) which means each item from the array through which we will iterate. </p>\n<p>It returns the <strong>NEW</strong> array. New array will consist of items and each item will contain whatever is a return from the function, for example: <code>&#x3C;li>{string}&#x3C;/li></code></p>\n<pre><code>const array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p>Creating list of items using <code>array.map()</code></p>\n<pre><code>const strings = ['Home', 'Shop', 'About Me'];\nconst listItems = strings.map(string => &#x3C;li>{string}&#x3C;/li>);\n&#x3C;ul>{listItems}&#x3C;/ul>\n</code></pre>\n<p><strong>Adding items to Array using .concat or .push</strong></p>\n<p><img src=\"https://i.imgur.com/PVgFfnd.jpg\" alt=\"Add\" title=\"Photo by Geeorge Becker from Pexels\"></p>\n<p><strong>Array.concat()</strong></p>\n<p><code>array.concat</code> creates A NEW array which concatenates original array with another array. Concat does <strong>NOT</strong> mutate origina array</p>\n<pre><code>let array = [\"cat\",\"tiger\"]\nlet newArray = array.concat(\"monster\")\n\n// array is still [\"cat\",\"tiger\"]\n// newArray is [\"cat\",\"tiger\", \"monster\"]\n</code></pre>\n<p><strong>Array.push()</strong></p>\n<p><code>array.push</code> <strong>MUTATES</strong> the existing array and adds new element!</p>\n<pre><code>let array = [\"cat\",\"tiger\" ]\nlet length = array.push(\"monster\")\n// array is mutated [\"cat\",\"tiger\", \"monster\"]\n// length is 3\n</code></pre>\n<p><strong>Array.indexOf()</strong></p>\n<p><img src=\"https://i.imgur.com/ue3MXf2.jpg\" alt=\"Index\" title=\"Photo by Engin Akyurt from Pexels\"></p>\n<p><code>array.indexOf()</code> finds element in the array, optional index means starting searching from position X</p>\n<pre><code>const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\n\nconsole.log(beasts.indexOf('bison'));\n// expected output: 1\n\n// start from index 2\nconsole.log(beasts.indexOf('bison', 2));\n// expected output: 4\n</code></pre>\n<p><strong>Cutting arrays using .slice or .splice</strong></p>\n<p><img src=\"https://i.imgur.com/s23i0Yr.jpg\" alt=\"Cut\" title=\"Photo by Photo Collections from Pexels\"></p>\n<p><strong>Array.slice()</strong></p>\n<p><code>array.slice()</code> slices array from one index to another but it creates NEW array, it dos NOT mutate the original one</p>\n<pre><code></code></pre>\n<p><strong>Array.splice()</strong>\n<code>array.splice()</code> slices array from one index to another but it MUTATES existing array!</p>\n<pre><code></code></pre>\n<p><strong>Array.reduce()</strong></p>\n<p><img src=\"https://i.imgur.com/UOPhFMg.jpg\" alt=\"Reduce\" title=\"Photo by Arun Thomas from Pexels\"></p>\n<p>Reduce method is very powerful one which allows you to iterate through all elements in an array, perform certain calculations on it and then returns something: a single value, array, etc.</p>\n<p>Let's start with an array:</p>\n<pre><code>const myArray = [1,4,2]\n</code></pre>\n<p>We want to sum this up and return one value of the total sum which would be 7</p>\n<p>We can call:</p>\n<pre><code>myArray.reduce(reducer, initialValue);\n</code></pre>\n<p><strong>Reducer</strong> is a function, which means that <code>.reduce</code> calls upon another function which we need to define. </p>\n<p><strong>InitialValue</strong> is optional, we can kick it off with some starting value, but for the first simple example we will skip it.</p>\n<p>Example reducer function:</p>\n<pre><code>  const reducer = (accumulator, currentValue) => {\n        accumulator = (accumulator + currentValue)        \n        return (accumulator);\n    } \n</code></pre>\n<p>Reducer takes in 2 arguments:</p>\n<p><strong>Accumulator</strong> - value where we can store results of our calculations. Initial accumulator will equal the first element in array which will be 1 (unless we set initial value for it)</p>\n<p><strong>Current value</strong> - value at which we are currently iterating, initially this will be value of second element in array which is number 4 (unless we set initial value, then the initial currentValue will be the first element)</p>\n<p>There can be other arguments like currentIndex (index of currentValue where the iteration currently happens) but the most basic example is with above-mentioned two.</p>\n<p>Each iteration ( or function call ) will deliver a returning value! It means on each step return will be executed. This returning value is going to get passed into next step!</p>\n<p>Example to use it for the highest number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n        }\n        return (accumulator);\n    } \n</code></pre>\n<p>Example to use it for average number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n       }\n        return (accumulator);\n    } \n &#x3C;p>Im a reducer and highest number is: {myArray.reduce(reducer)}&#x3C;/p>\n</code></pre>\n<p>~~ And that's it for the intro to most basic array methods. I hope you enjoyed it.~~</p>\n<p><img src=\"https://i.imgur.com/ui07Dbb.jpg\" alt=\"Array\" title=\"Photo by Genaro Servín from Pexels\"></p>","frontmatter":{"title":"Arrays"},"excerpt":"Here you can find a small summary of the most useful array methods.d Creating an Array Creating new array (when we dont want to reference…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Arrays/"}}}