{"componentChunkName":"component---src-templates-blog-post-js","path":"/Arrays/","webpackCompilationHash":"52a009713053b0e1255d","result":{"data":{"markdownRemark":{"html":"<p>Summary of useful array methods</p>\n<p>Creating new array (when we dont want to reference) of a given length of empty elements:</p>\n<pre><code>let newArray = new Array(7);\n//creates array of 7 elements, each element is emtpy\n</code></pre>\n<p>Creating new array with one specific item in it:</p>\n<pre><code>let newArray = new Array(\"7\");\n//creates array of 1 element, this element is string 7\n</code></pre>\n<p>Creating new array from another array using spread operator. Spread operator creates new object + copies other array:</p>\n<pre><code>var array = [1,2,3]\nvar newArray = [...array]\n\n// newArray will be: [1,2,3]\n</code></pre>\n<p>Creating new array from another array using spread operator + adding more elements. Spread operator creates new object + copies other array:</p>\n<pre><code>var array = [1,2,3]\nvar newArray = [...array, 4]\n\n// newArray will be: [1,2,3,4]\n</code></pre>\n<p>Creating new array filled with 0s using loop:</p>\n<pre><code>var data = [];\nvar length = 5;\n\nfor(var i = 0; i &#x3C; length; i++) {\n    data.push(0);\n}\n</code></pre>\n<p><code>array.map()</code> is going through each element of the array and allows to perform function on it and output NEW array</p>\n<pre><code>const array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p><code>array.concat</code> createes A NEW array which concatenates original array with another array. concat does NOT mutate origina array</p>\n<pre><code>let array = [\"cat\",\"tiger\"]\nlet newArray = array.concat(\"monster\")\n\n// array is still [\"cat\",\"tiger\"]\n// newArray is [\"cat\",\"tiger\", \"monster\"]\n</code></pre>\n<p><code>array.push</code> MUTATES the existing array and adds new element!</p>\n<pre><code>let array = [\"cat\",\"tiger\" ]\nlet length = array.push(\"monster\")\n// array is mutated [\"cat\",\"tiger\", \"monster\"]\n// length is 3\n</code></pre>\n<p><code>array.indexOf()</code> finds element in the array, optional index means starting searching from position X</p>\n<pre><code>const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\n\nconsole.log(beasts.indexOf('bison'));\n// expected output: 1\n\n// start from index 2\nconsole.log(beasts.indexOf('bison', 2));\n// expected output: 4\n</code></pre>\n<p><code>array.slice()</code> slices array from one index to another but it creates NEW array, it dos NOT mutate the original one</p>\n<pre><code></code></pre>\n<p><code>array.splice()</code> slices array from one index to another but it MUTATES existing array!</p>\n<pre><code></code></pre>","frontmatter":{"title":"Arrays"},"excerpt":"Summary of useful array methods Creating new array (when we dont want to reference) of a given length of empty elements: Creating new arrayâ€¦"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Arrays/"}}}