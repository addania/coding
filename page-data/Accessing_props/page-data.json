{"componentChunkName":"component---src-templates-blog-post-js","path":"/Accessing_props/","webpackCompilationHash":"668a9473bbb49ee10c1b","result":{"data":{"markdownRemark":{"html":"<p>There are two ways to access props. </p>\n<p>a) Using props as argument of the functional component and accessing them like: props.onClick</p>\n<pre><code>const Button = (props) => {\n}\n</code></pre>\n<p>b) or alternatively passing name of prop inside curly brackets of the functional component and then accessing props like: onClick</p>\n<pre><code>const Button = ({onClick}) => {\n}\n</code></pre>\n<p>Alternative b) allows only passing specific props to the component.</p>\n<pre><code>&#x3C;button onClick={handleClick} name={\"pete\"} id={\"schw\"}>\n        Add Pete to array\n      &#x3C;/button>\n</code></pre>\n<p>or </p>\n<pre><code>&#x3C;button onClick={handleClick} name={\"lubo\"} id={\"kost\"} children=\"Add Lubo to array\" />\n</code></pre>\n<p>But then I need to have self closing tag, because if I have </button> empty stace before closing and opening tag will overwrite my children property\n</p>","frontmatter":{"title":"Accessing Props"},"excerpt":"There are two ways to access props.  a) Using props as argument of the functional component and accessing them like: props.onClick b) orâ€¦"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Accessing_props/"}}}