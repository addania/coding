{"componentChunkName":"component---src-templates-blog-post-js","path":"/Recursion/","webpackCompilationHash":"8ad3c842d8d772758f9e","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://i.imgur.com/kQUGRug.jpg\" title=\"Photo by P C from Pexels\"></p>\n<p>Recusion is a function that calls itself.</p>\n<p>Example usage of recursive functions is to calculate factorial of a given number. Let's say we want to calculate factorial of number <code>n</code>. If <code>n=3</code>, then factorial of <code>n</code> is <code><code>3*2*1</code>=6</code></p>\n<pre><code>function factorial(n){\n  if (n==1){\n    return 1\n  }\n  if (n>1){\n    return n*factorial(n-1);\n  }\n}\nlet number=factorial(3);\n// result: 3*2*1=6\n</code></pre>\n<p>Example usage of recursive functions is to calculate number to certain power. Imagine we want to calculate <code>3</code> to the power of <code>2</code>. We would need to multiply <code><code>3*3=9</code></code>. Let's define that <code>x</code> is our number and <code>n</code> is the power.</p>\n<pre><code>function power(x, n){\n  if (n==1){\n    return x\n  } else {\n    return x * power(x, n-1);\n  }\n}\npower(2,3);\n// returns 8\npower(3,2);\n// returns 9\n</code></pre>\n<p>Example usage is to sum the the numbers <code>1+2+3+...+ n</code></p>\n<pre><code>function sumTo(n){\n  if (n==1){\n   return n\n  } else {\n  return n+ sumTo(n-1);\n  }\n}\nlet result=sumTo(3);\n// result is: 6\n</code></pre>\n<p>Example usage of recursive functions is to calculate salaries in a company in different departments or sub-departments. Imagine we have an object like this:</p>\n<pre><code>let company={ \n  sales: [{name: \"Mia\", salary: 1000},{name: \"Sam\", salary: 1500}], \n  development: {\n    onsite: [{name: \"Peter\", salary: 500}, {name: \"Edita\", salary: 1200} ],\n    remote: [{name: \"Lubo\", salary: 3000}, {name: \"Peta\", salary: 800} ]\n    }\n}\n</code></pre>\n<p>Then we can use a recursive function to calculate the sum of salaries:</p>\n<pre><code>function salarySum(department){\n  if (Array.isArray(department)){\n\n    return department.reduce( (prev, current) => \n    prev + current, 0 )\n  } else {\n    let sum =0;\n    for (let subdep of Object.values(department)){\n     sum= sum + salarySum(subdep);\n    }\n    return sum,\n  }\n}\n</code></pre>\n<p>Let' s call the function and see the result:</p>\n<pre><code>let result= salarySum(company);\n// result is: 8000\n</code></pre>","frontmatter":{"title":"Recursion"},"excerpt":"Recusion is a function that calls itself. Example usage of recursive functions is to calculate factorial of a given number. Let's say weâ€¦"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Recursion/"}}}