{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"462320ee5939177d9d2a","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"fff993ea-e53c-5d28-a6f9-a0cb3ac46303","excerpt":"Exports/Imports There are 2 types of exports: default and named exports. Deufalt exports means we can change name of the exported component…","rawMarkdownBody":"\r\nExports/Imports\r\n\r\n\r\nThere are 2 types of exports: default and named exports.\r\n\r\n\r\n**Deufalt exports** means we can change name of the exported component,\r\n\r\n**Named exports** we cant change the name of the exported component, \r\n\r\nExample of default export:\r\n```\r\nexport default App\r\n```\r\n\r\nThen Import looks like this:\r\n```\r\nimport App from \"./app.js\";\r\n```\r\n\r\nBut we can also write\r\n```\r\nimport Unicorn from \"./app.js\";\r\n```\r\n\r\nNamed export example:\r\n```\r\nexport class App extends React.Componenet(){\r\n...\r\n}\r\n```\r\n\r\nImporting named export:\r\n```\r\nimport { App } from \"./app.js\"\r\n```\r\n\r\nAbove I cant change the name, unless I write as:\r\n```\r\nimport { App as Unicorn } from \"./app.js\"\r\n```\r\n\r\nAlternative to named export is:\r\n```\r\nclass App extends React.Componenet(){\r\n...\r\n}\r\n\r\nexport {\r\n  App,\r\n  ..\r\n}\r\n```\r\n\r\nIn above example I can export more component at the same time:\r\n```\r\nexport {\r\n  App, \r\n  Something,\r\n  AnotherThing\r\n}\r\n```\r\n","frontmatter":{"date":"2019-12-01","title":"Exports"},"fields":{"slug":"/Exports/"},"timeToRead":1,"html":"<p>Exports/Imports</p>\n<p>There are 2 types of exports: default and named exports.</p>\n<p><strong>Deufalt exports</strong> means we can change name of the exported component,</p>\n<p><strong>Named exports</strong> we cant change the name of the exported component, </p>\n<p>Example of default export:</p>\n<pre><code>export default App\n</code></pre>\n<p>Then Import looks like this:</p>\n<pre><code>import App from \"./app.js\";\n</code></pre>\n<p>But we can also write</p>\n<pre><code>import Unicorn from \"./app.js\";\n</code></pre>\n<p>Named export example:</p>\n<pre><code>export class App extends React.Componenet(){\n...\n}\n</code></pre>\n<p>Importing named export:</p>\n<pre><code>import { App } from \"./app.js\"\n</code></pre>\n<p>Above I cant change the name, unless I write as:</p>\n<pre><code>import { App as Unicorn } from \"./app.js\"\n</code></pre>\n<p>Alternative to named export is:</p>\n<pre><code>class App extends React.Componenet(){\n...\n}\n\nexport {\n  App,\n  ..\n}\n</code></pre>\n<p>In above example I can export more component at the same time:</p>\n<pre><code>export {\n  App, \n  Something,\n  AnotherThing\n}\n</code></pre>"}},{"node":{"id":"08941288-89f4-5d54-a5c0-8ddc2b58d582","excerpt":"devDependeencies are not directly used by the app when it is buidling, testing, running, for example: gh-pages dependencies are packages…","rawMarkdownBody":"\r\ndevDependeencies are not directly used by the app when it is buidling, testing, running, for example: gh-pages\r\n\r\ndependencies are packages which are necessary to build, run, test the APP, they are most of the time imported like: ```\r\nimport React rom \"react\"\r\nimport Bootstrap ...\r\n```\r\n\r\nnpm install INSTALLS all devDependancies and Deependeencies which are specified in package.json!!\r\nnpm install MUST be triggered manually by USER. I decide when and which dependency I want to install. It must be installed in the folder where package.json / if it is not where package.json, it will throw an error (hey, bro you want me to install pckages,?? but there is no packages definition, so what shoyld I do???)!!! \r\n\r\nIf it is installed then I have a node_modules folder in my project folder.\r\n\r\nnpm install is done once and for all for eeach package (for all packages if I dont provide name of package) :)\r\n\r\n> To instal individual package, for example bootstrap\r\n```\r\nnpm install bootstrap\r\n```\r\n\r\n> Command line, how to delete a specific file, type rm for remove and then file name\r\n```\r\nrm unnecessaryFile.js\r\n```\r\n\r\n\r\n> Command line, how to delete a specific folder, type rm for remove, -r for recursive, then folder name\r\n```\r\nrm -r unnecessaryFile.js\r\n```\r\n","frontmatter":{"date":"2019-12-01","title":"Packages"},"fields":{"slug":"/Packages/"},"timeToRead":1,"html":"<p>devDependeencies are not directly used by the app when it is buidling, testing, running, for example: gh-pages</p>\n<p>dependencies are packages which are necessary to build, run, test the APP, they are most of the time imported like: `<code></code>\nimport React rom \"react\"\nimport Bootstrap ...</p>\n<pre><code>npm install INSTALLS all devDependancies and Deependeencies which are specified in package.json!!\nnpm install MUST be triggered manually by USER. I decide when and which dependency I want to install. It must be installed in the folder where package.json / if it is not where package.json, it will throw an error (hey, bro you want me to install pckages,?? but there is no packages definition, so what shoyld I do???)!!! \n\nIf it is installed then I have a node_modules folder in my project folder.\n\nnpm install is done once and for all for eeach package (for all packages if I dont provide name of package) :)\n\n> To instal individual package, for example bootstrap\n</code></pre>\n<p>npm install bootstrap</p>\n<pre><code>> Command line, how to delete a specific file, type rm for remove and then file name\n</code></pre>\n<p>rm unnecessaryFile.js</p>\n<pre><code>> Command line, how to delete a specific folder, type rm for remove, -r for recursive, then folder name\n</code></pre>\n<p>rm -r unnecessaryFile.js</p>\n<pre><code></code></pre>"}},{"node":{"id":"d91cb236-5bad-5e53-b3f9-3d71d9290007","excerpt":"Node version manager This software allows us to switch between different versions of the node. Why to want to switch? Because some…","rawMarkdownBody":"Node version manager\r\n\r\nThis software allows us to switch between different versions of the node. Why to want to switch? Because some capabilities are not supported in certain versions of node. For example, you have a project which has some dependencies on different packages. If you want to <code>npm install</code> them, then you get errors. One of the reasons can be that you are using latest (not yet stable) version of node.\r\n\r\nNode in general is installed globally for all projects. To be able to change versions we need to de/install it and only use NVM from now on to switch between versions. Each project can have different node version then. Is used a lot in professional dev life.\r\n\r\n> Paste this to command line (it will be installed globally, no matter in which folder I currently am):\r\n```\r\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash \r\n```\r\n\r\n> Restart the terminal\r\n\r\n> Write this so that nvm uses previous (already installed) SYSTEM version of NODE:\r\n```\r\nnvm use system\r\n```\r\n\r\n>If I want to see all shortcuts for nvm\r\n```\r\nnvm\r\n```\r\n\r\n> If I want to see current version\r\n```\r\nnvm current\r\n```\r\n\r\n> To install a specific version of the node GLOBALLY to be able to use it later on in the project:\r\n```\r\nnvm install 10.0.0\r\n```\r\n\r\n> Then we will need to add the different version of node to a specific project. \r\n\r\n> Go to project directory\r\n\r\n> In the root location of the project (where package.json is) create a new file with touch command. File will be calle <code>.nvmrc</code>:\r\n```\r\ntouch .nvmrc\r\n```\r\n\r\n> Then you open that file and paste umber of version in it\r\n```\r\n10.0\r\n```\r\n\r\nAlternatively you can combine the above two command in one:\r\n```\r\necho \"10.0\" > .nvmrc\r\n```\r\n","frontmatter":{"date":"2019-11-30","title":"NVM"},"fields":{"slug":"/nvm/"},"timeToRead":1,"html":"<p>Node version manager</p>\n<p>This software allows us to switch between different versions of the node. Why to want to switch? Because some capabilities are not supported in certain versions of node. For example, you have a project which has some dependencies on different packages. If you want to <code>npm install</code> them, then you get errors. One of the reasons can be that you are using latest (not yet stable) version of node.</p>\n<p>Node in general is installed globally for all projects. To be able to change versions we need to de/install it and only use NVM from now on to switch between versions. Each project can have different node version then. Is used a lot in professional dev life.</p>\n<blockquote>\n<p>Paste this to command line (it will be installed globally, no matter in which folder I currently am):</p>\n</blockquote>\n<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash \n</code></pre>\n<blockquote>\n<p>Restart the terminal</p>\n</blockquote>\n<blockquote>\n<p>Write this so that nvm uses previous (already installed) SYSTEM version of NODE:</p>\n</blockquote>\n<pre><code>nvm use system\n</code></pre>\n<blockquote>\n<p>If I want to see all shortcuts for nvm</p>\n</blockquote>\n<pre><code>nvm\n</code></pre>\n<blockquote>\n<p>If I want to see current version</p>\n</blockquote>\n<pre><code>nvm current\n</code></pre>\n<blockquote>\n<p>To install a specific version of the node GLOBALLY to be able to use it later on in the project:</p>\n</blockquote>\n<pre><code>nvm install 10.0.0\n</code></pre>\n<blockquote>\n<p>Then we will need to add the different version of node to a specific project. </p>\n</blockquote>\n<blockquote>\n<p>Go to project directory</p>\n</blockquote>\n<blockquote>\n<p>In the root location of the project (where package.json is) create a new file with touch command. File will be calle <code>.nvmrc</code>:</p>\n</blockquote>\n<pre><code>touch .nvmrc\n</code></pre>\n<blockquote>\n<p>Then you open that file and paste umber of version in it</p>\n</blockquote>\n<pre><code>10.0\n</code></pre>\n<p>Alternatively you can combine the above two command in one:</p>\n<pre><code>echo \"10.0\" > .nvmrc\n</code></pre>"}},{"node":{"id":"ddc805ac-173c-5a50-afe0-ced44956ce55","excerpt":"Step-By-Step Guide for Dummies on how to publish your create-react-app website on Github pages Create empty GitHub repository, for example…","rawMarkdownBody":"\r\nStep-By-Step Guide for Dummies on how to publish your create-react-app website on Github pages\r\n\r\n> Create empty GitHub repository, for example called monsteerFactory. It should be a public repository and do NOT initialize this repository with README\r\n\r\n> Start Ubuntu Command line\r\n\r\n> Navigate to your projects folder\r\n```\r\ncd projects\r\n```\r\n\r\n> Create new project\r\n```\r\nnpx create-react-app monster_factory\r\n```\r\n> Go to your new project folder\r\n```\r\ncd monster_factory\r\n```\r\n\r\n> Open package.json and paste your github repository url to homepage\r\n```\r\n\"homepage\": \"https://addania.github.io/monsterFactory\",\r\n```\r\n\r\n> Install gh-pages:\r\n```\r\nnpm install --save gh-pages\r\n```\r\n> Open packagee.json and paste following code:\r\n```\r\n\"scripts\": {\r\n   \"predeploy\": \"npm run build\",\r\n   \"deploy\": \"gh-pages -d build\",\r\n   \"start\": \"react-scripts start\",\r\n   \"build\": \"react-scripts build\",\r\n```\r\n\r\n> Create a **REMOTE** repository. Remote repository can be called anything, but convention is to call it origin\r\n```\r\ngit remote add origin git@github.com:addania/monsterFactory.git \r\n```\r\n\r\n> Then push our PRODUCTION files (compresseed publish-ready files) to remote by npm run deploy and publish it!! (We dont need to do git add . cause now we only want to publish the site!!! git add, commit, push is only if I want to upload my real code to github. )\r\n```\r\nnpm run deploy\r\n```\r\n\r\n> When I want to upload my working code to github (has nothing to do with publishing production files by npm run deploy), I can add your project files to **LOCAL** git\r\n```\r\ngit add .\r\n```\r\n> Commit your project files to **LOCAL** git\r\n```\r\ngit commit -m \"first commit\"\r\n```\r\n\r\n> Push to **REMOTE** repository (you will be asked for you passphrase)\r\n```\r\ngit push origin master\r\n```\r\n\r\n\r\n>Useful Sources:\r\n\r\nhttps://create-react-app.dev/docs/deployment/#github-pages\r\n","frontmatter":{"date":"2019-11-29","title":"Publish Create React App to Github Pages"},"fields":{"slug":"/Publish_Create_React_App_on_GithubPages/"},"timeToRead":2,"html":"<p>Step-By-Step Guide for Dummies on how to publish your create-react-app website on Github pages</p>\n<blockquote>\n<p>Create empty GitHub repository, for example called monsteerFactory. It should be a public repository and do NOT initialize this repository with README</p>\n</blockquote>\n<blockquote>\n<p>Start Ubuntu Command line</p>\n</blockquote>\n<blockquote>\n<p>Navigate to your projects folder</p>\n</blockquote>\n<pre><code>cd projects\n</code></pre>\n<blockquote>\n<p>Create new project</p>\n</blockquote>\n<pre><code>npx create-react-app monster_factory\n</code></pre>\n<blockquote>\n<p>Go to your new project folder</p>\n</blockquote>\n<pre><code>cd monster_factory\n</code></pre>\n<blockquote>\n<p>Open package.json and paste your github repository url to homepage</p>\n</blockquote>\n<pre><code>\"homepage\": \"https://addania.github.io/monsterFactory\",\n</code></pre>\n<blockquote>\n<p>Install gh-pages:</p>\n</blockquote>\n<pre><code>npm install --save gh-pages\n</code></pre>\n<blockquote>\n<p>Open packagee.json and paste following code:</p>\n</blockquote>\n<pre><code>\"scripts\": {\n   \"predeploy\": \"npm run build\",\n   \"deploy\": \"gh-pages -d build\",\n   \"start\": \"react-scripts start\",\n   \"build\": \"react-scripts build\",\n</code></pre>\n<blockquote>\n<p>Create a <strong>REMOTE</strong> repository. Remote repository can be called anything, but convention is to call it origin</p>\n</blockquote>\n<pre><code>git remote add origin git@github.com:addania/monsterFactory.git \n</code></pre>\n<blockquote>\n<p>Then push our PRODUCTION files (compresseed publish-ready files) to remote by npm run deploy and publish it!! (We dont need to do git add . cause now we only want to publish the site!!! git add, commit, push is only if I want to upload my real code to github. )</p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>When I want to upload my working code to github (has nothing to do with publishing production files by npm run deploy), I can add your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Commit your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git commit -m \"first commit\"\n</code></pre>\n<blockquote>\n<p>Push to <strong>REMOTE</strong> repository (you will be asked for you passphrase)</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>Useful Sources:</p>\n</blockquote>\n<p><a href=\"https://create-react-app.dev/docs/deployment/#github-pages\">https://create-react-app.dev/docs/deployment/#github-pages</a></p>"}},{"node":{"id":"9736bc4d-9867-53dd-b8da-479f44716cf3","excerpt":"Cloning Github repository means creating a copy of REMOTE repo locally to your machine. How to do it?  Go to repository root folder (top one…","rawMarkdownBody":"\r\nCloning Github repository means creating a copy of REMOTE repo locally to your machine. How to do it? \r\n\r\n> Go to repository root folder (top one)\r\n\r\n> click the big GREEN (frog) button called:\r\n```\r\nClone of Download\r\n```\r\n\r\n> Copy the url:\r\n```\r\nhttps://github.com/nvm-sh/nvm.git\r\n```\r\n\r\n> Go to the project folder\r\n\r\n> Paste this to the command line:\r\n```\r\ngit clone https://github.com/nvm-sh/nvm.git\r\n```","frontmatter":{"date":"2019-11-29","title":"Cloning Github Repository"},"fields":{"slug":"/cloningGithubRepository/"},"timeToRead":1,"html":"<p>Cloning Github repository means creating a copy of REMOTE repo locally to your machine. How to do it? </p>\n<blockquote>\n<p>Go to repository root folder (top one)</p>\n</blockquote>\n<blockquote>\n<p>click the big GREEN (frog) button called:</p>\n</blockquote>\n<pre><code>Clone of Download\n</code></pre>\n<blockquote>\n<p>Copy the url:</p>\n</blockquote>\n<pre><code>https://github.com/nvm-sh/nvm.git\n</code></pre>\n<blockquote>\n<p>Go to the project folder</p>\n</blockquote>\n<blockquote>\n<p>Paste this to the command line:</p>\n</blockquote>\n<pre><code>git clone https://github.com/nvm-sh/nvm.git\n</code></pre>"}},{"node":{"id":"8fd97ba8-580f-571f-9b53-5f14057dcb31","excerpt":"Loops in JS There are many loops in JS which we can use: for - looping through a block of code for a given number of times for/in - looping…","rawMarkdownBody":"\r\nLoops in JS\r\n\r\nThere are many loops in JS which we can use:\r\n\r\n**for** - looping through a block of code for a given number of times\r\n\r\n**for/in** - looping through properties(values) of an <code>object</code>\r\n\r\n**for/of** - looping through values of an <code>array</code>\r\n\r\n**while** - looping through a block of code as long as a specified condition is true\r\n\r\n**do/while** - looping through a block of code once, and then repeating the loop as long as a specified condition is true\r\n\r\n**for**\r\n```\r\nlet array=[\"hello\", \"universe\", \"!\"]\r\nfor (let item =0; item < array.length; item++){\r\n  console.log (item);\r\n}\r\n\r\n// Output:\r\n//Hello\r\n//universe\r\n//!\r\n```\r\n\r\n**for/in**\r\n```\r\nfunction loop() {\r\nvar person = {firstName:\"Mia\", lastName:\"Schw\", age:32};\r\n\r\nvar text = \"\";\r\nvar item;\r\nfor (item in person) {\r\n  text += person[item] + \" \";\r\n}\r\n}\r\nlet identity=loop();\r\n// result: Mia Schw 32\r\n```\r\n\r\n**for/of**\r\n```\r\nvar sports = ['skiing', 'surfing', 'dancing'];\r\nvar x;\r\n\r\nfor (x of cars) {\r\n  console.log(x + \"<br >\");\r\n}\r\n```\r\n\r\n**while**\r\n```\r\nlet check=true;\r\n\r\nwhile(check){\r\nconsole.log(\"Hi\");\r\n  check=false;\r\n  \r\n}\r\n//Output: Hi\r\n```\r\n\r\n**do/while**\r\n```\r\nfunction worker() {\r\n  var text = \"\"\r\n  var i = 0;\r\n  do {\r\n    text += \"<br>The number is \" + i;\r\n    i++;\r\n  }\r\n  while (i < 2);\r\n  console.log(text);\r\n}\r\nworker();\r\n\r\n// The number is 0\r\n// The number is 1\r\n// The number is 2\r\n\r\n```","frontmatter":{"date":"2019-11-28","title":"Loops"},"fields":{"slug":"/Loops/"},"timeToRead":1,"html":"<p>Loops in JS</p>\n<p>There are many loops in JS which we can use:</p>\n<p><strong>for</strong> - looping through a block of code for a given number of times</p>\n<p><strong>for/in</strong> - looping through properties(values) of an <code>object</code></p>\n<p><strong>for/of</strong> - looping through values of an <code>array</code></p>\n<p><strong>while</strong> - looping through a block of code as long as a specified condition is true</p>\n<p><strong>do/while</strong> - looping through a block of code once, and then repeating the loop as long as a specified condition is true</p>\n<p><strong>for</strong></p>\n<pre><code>let array=[\"hello\", \"universe\", \"!\"]\nfor (let item =0; item &#x3C; array.length; item++){\n  console.log (item);\n}\n\n// Output:\n//Hello\n//universe\n//!\n</code></pre>\n<p><strong>for/in</strong></p>\n<pre><code>function loop() {\nvar person = {firstName:\"Mia\", lastName:\"Schw\", age:32};\n\nvar text = \"\";\nvar item;\nfor (item in person) {\n  text += person[item] + \" \";\n}\n}\nlet identity=loop();\n// result: Mia Schw 32\n</code></pre>\n<p><strong>for/of</strong></p>\n<pre><code>var sports = ['skiing', 'surfing', 'dancing'];\nvar x;\n\nfor (x of cars) {\n  console.log(x + \"&#x3C;br >\");\n}\n</code></pre>\n<p><strong>while</strong></p>\n<pre><code>let check=true;\n\nwhile(check){\nconsole.log(\"Hi\");\n  check=false;\n  \n}\n//Output: Hi\n</code></pre>\n<p><strong>do/while</strong></p>\n<pre><code>function worker() {\n  var text = \"\"\n  var i = 0;\n  do {\n    text += \"&#x3C;br>The number is \" + i;\n    i++;\n  }\n  while (i &#x3C; 2);\n  console.log(text);\n}\nworker();\n\n// The number is 0\n// The number is 1\n// The number is 2\n</code></pre>"}},{"node":{"id":"d2a6f634-af8c-5890-ba06-41e1fc69dd4e","excerpt":"Recusion is a function that calls itself. Example usage of recursive functions to calculate factorial. lets say we want to calculate…","rawMarkdownBody":"\r\n\r\nRecusion is a function that calls itself.\r\n\r\nExample usage of recursive functions to calculate factorial. lets say we want to calculate factorial of number <code>n</code>. If <code>n=3</code>, then factorial of <code>n</code> is <code>```3*2*1```=6</code>\r\n```\r\nfunction factorial(n){\r\n  if (n==1){\r\n    return 1\r\n  }\r\n  if (n>1){\r\n    return n*factorial(n-1);\r\n  }\r\n}\r\n\r\nlet number=factorial(3);\r\n// result: 3*2*1=6\r\n```\r\n\r\nExample usage of recursive functions to calculate number to certain power. Imagine we want to calculate </ode>3</code> to the power of <code>2</code>. We would need to multiply <code>3*3=9</code>. Lets define that <code>x</code> is our number and <code>n</code> is the power.\r\n```\r\nfunction power(x, n){\r\n  if (n==1){\r\n    return x\r\n  }else {\r\n    return x* power(x, n-1);\r\n  }\r\n}\r\n\r\npower(2,3);\r\n// returns 8\r\n\r\npower(3,2);\r\n// returns 9\r\n```\r\n\r\nExample usage of recursive functions to calculate salaries in a company in different departments or sub-departments. Imagine we have an object like this:\r\n```\r\nlet company={ \r\n  sales: [{name: \"Mia\", plat: 1000},{name: \"Sam\", plat: 1500}], \r\n  development: {\r\n    onsite: [{name: \"Peter\", plat: 500}, {name: \"Edita\", plat: 1200} ],\r\n    remote: [{name: \"Lubo\", plat: 3000}, {name: \"Peta\", plat: 800} ]\r\n\r\n    }\r\n}\r\n```\r\n\r\nExample usage to sum the the numbers <code>1+2+3+...+ n</code>\r\n```\r\nfunction sumTo(n){\r\n  if (n==1){\r\n   return n\r\n  } else {\r\n  return n+ sumTo(n-1);\r\n  }\r\n\r\n}\r\n\r\nlet result=sumTo(3);\r\n// result is: 6\r\n```\r\n\r\nThen we can use a recursive function to calculate the sum of salaries:\r\n```\r\nfunction salarySum(department){\r\n  if (Array.isArray(department)){\r\n\r\n    return department.reduce( (prev, current) => \r\n    prev + current, 0 )\r\n  } else {\r\n    let sum =0;\r\n    for (let subdep of Object.values(department)){\r\n     sum= sum + salarySum(subdep);\r\n    }\r\n    return sum,\r\n  }\r\n\r\n}\r\n```\r\n\r\nLets call the function and see the result:\r\n```\r\nlet result= salarySum(company);\r\n// result is: 8000\r\n```","frontmatter":{"date":"2019-11-27","title":"Recursion"},"fields":{"slug":"/Recursion/"},"timeToRead":1,"html":"<p>Recusion is a function that calls itself.</p>\n<p>Example usage of recursive functions to calculate factorial. lets say we want to calculate factorial of number <code>n</code>. If <code>n=3</code>, then factorial of <code>n</code> is <code><code>3*2*1</code>=6</code></p>\n<pre><code>function factorial(n){\n  if (n==1){\n    return 1\n  }\n  if (n>1){\n    return n*factorial(n-1);\n  }\n}\n\nlet number=factorial(3);\n// result: 3*2*1=6\n</code></pre>\n<p>Example usage of recursive functions to calculate number to certain power. Imagine we want to calculate </ode>3</code> to the power of <code>2</code>. We would need to multiply <code>3*3=9</code>. Lets define that <code>x</code> is our number and <code>n</code> is the power.</p>\n<pre><code>function power(x, n){\n  if (n==1){\n    return x\n  }else {\n    return x* power(x, n-1);\n  }\n}\n\npower(2,3);\n// returns 8\n\npower(3,2);\n// returns 9\n</code></pre>\n<p>Example usage of recursive functions to calculate salaries in a company in different departments or sub-departments. Imagine we have an object like this:</p>\n<pre><code>let company={ \n  sales: [{name: \"Mia\", plat: 1000},{name: \"Sam\", plat: 1500}], \n  development: {\n    onsite: [{name: \"Peter\", plat: 500}, {name: \"Edita\", plat: 1200} ],\n    remote: [{name: \"Lubo\", plat: 3000}, {name: \"Peta\", plat: 800} ]\n\n    }\n}\n</code></pre>\n<p>Example usage to sum the the numbers <code>1+2+3+...+ n</code></p>\n<pre><code>function sumTo(n){\n  if (n==1){\n   return n\n  } else {\n  return n+ sumTo(n-1);\n  }\n\n}\n\nlet result=sumTo(3);\n// result is: 6\n</code></pre>\n<p>Then we can use a recursive function to calculate the sum of salaries:</p>\n<pre><code>function salarySum(department){\n  if (Array.isArray(department)){\n\n    return department.reduce( (prev, current) => \n    prev + current, 0 )\n  } else {\n    let sum =0;\n    for (let subdep of Object.values(department)){\n     sum= sum + salarySum(subdep);\n    }\n    return sum,\n  }\n\n}\n</code></pre>\n<p>Lets call the function and see the result:</p>\n<pre><code>let result= salarySum(company);\n// result is: 8000\n</code></pre>"}},{"node":{"id":"c3e3d136-4c13-51b2-8a72-64c2fdb9bd7b","excerpt":"npm start will look into package.json in the script section under command START. and it will execute whatever is there. FOr applications…","rawMarkdownBody":"\r\nnpm start will look into package.json in the script section under command START. and it will execute whatever is there. FOr applications created by create react app, there will be:\r\n```\r\n\"start\": \"react-scripts start\",\r\n```\r\n\r\n> <code>react-scripts start</code> will start local host environment under port number: 3000\r\n\r\n> If I have gatsby project, I can also write\r\n```\r\nnpm start\r\n```\r\n\r\n> This will also execute whatever is in package.json, in scripts under <code>start</code>\r\n```\r\n\"npm run develop\",\r\n```\r\n\r\n> This is then equivalent to\r\n```\r\ngatsby develop\r\n```\r\n\r\n> When I have command:\r\n```\r\nnpm run develop\r\n```\r\n\r\n> <code>npm run</code> means it will look into package.json under scripts and select script called\r\n```\r\n\"develop\"\r\n```\r\n\r\n> Then under develop we have:\r\n```\r\n\"develop\": \"gatsby develop\",\r\n```\r\n\r\n> <code>\"gatsby develop\"</code> is the FINAL thing FINALLY\r\n```\r\nphew\r\n```\r\n\r\n> I should always use \r\n```\r\nnpm run ....\r\n```\r\n\r\n> For example:\r\n```\r\nnpm run start\r\n```\r\n\r\nor\r\n```\r\nnpm run develop\r\n```\r\n\r\nor \r\n```\r\nnpm run test\r\n```\r\n\r\n> But because start and test are such used and common, you can skip word <code>run</code> they can be abbreviated to\r\n```\r\nnpm start\r\n```\r\n\r\nor\r\n```\r\nnpm test\r\n```\r\n\r\n> However, you CANNOT abbreviate npm develop, it needs to include run\r\n```\r\nnpm run develop\r\n```\r\n","frontmatter":{"date":"2019-11-26","title":"Npm"},"fields":{"slug":"/Npm/"},"timeToRead":1,"html":"<p>npm start will look into package.json in the script section under command START. and it will execute whatever is there. FOr applications created by create react app, there will be:</p>\n<pre><code>\"start\": \"react-scripts start\",\n</code></pre>\n<blockquote>\n<p><code>react-scripts start</code> will start local host environment under port number: 3000</p>\n</blockquote>\n<blockquote>\n<p>If I have gatsby project, I can also write</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<blockquote>\n<p>This will also execute whatever is in package.json, in scripts under <code>start</code></p>\n</blockquote>\n<pre><code>\"npm run develop\",\n</code></pre>\n<blockquote>\n<p>This is then equivalent to</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>When I have command:</p>\n</blockquote>\n<pre><code>npm run develop\n</code></pre>\n<blockquote>\n<p><code>npm run</code> means it will look into package.json under scripts and select script called</p>\n</blockquote>\n<pre><code>\"develop\"\n</code></pre>\n<blockquote>\n<p>Then under develop we have:</p>\n</blockquote>\n<pre><code>\"develop\": \"gatsby develop\",\n</code></pre>\n<blockquote>\n<p><code>\"gatsby develop\"</code> is the FINAL thing FINALLY</p>\n</blockquote>\n<pre><code>phew\n</code></pre>\n<blockquote>\n<p>I should always use </p>\n</blockquote>\n<pre><code>npm run ....\n</code></pre>\n<blockquote>\n<p>For example:</p>\n</blockquote>\n<pre><code>npm run start\n</code></pre>\n<p>or</p>\n<pre><code>npm run develop\n</code></pre>\n<p>or </p>\n<pre><code>npm run test\n</code></pre>\n<blockquote>\n<p>But because start and test are such used and common, you can skip word <code>run</code> they can be abbreviated to</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<p>or</p>\n<pre><code>npm test\n</code></pre>\n<blockquote>\n<p>However, you CANNOT abbreviate npm develop, it needs to include run</p>\n</blockquote>\n<pre><code>npm run develop\n</code></pre>"}},{"node":{"id":"172d4067-3e4b-5f79-ad66-336c50f22f96","excerpt":"Regular expressions allow to match certain patters. If we want to find char \"a\" in a string \"Today is a nice day\" and replace is with \"ha…","rawMarkdownBody":"\r\nRegular expressions allow to match certain patters.\r\n\r\nIf we want to find char <code>\"a\"</code> in a string <code>\"Today is a nice day\"</code> and replace is with <code>\"ha\"</code>:\r\n\r\n```\r\nlet sentence=\"Today is a nice day\".replace(\"a\", \"ha\");\r\nconsole.log(sentence);\r\n// output is: \"Todhay is a nice day\"\r\n```\r\n\r\nWhat happened here? Only the first occurance of the <code>\"a\"</code> was found. How can we replace all? We can usee regular expressions with <code>g</code> flag.\r\n\r\n```\r\nlet sentence=\"Today is a nice day\".replace(/a/g, \"ha\");\r\nconsole.log(sentence);\r\n// output is: \"Todhay is ha nice dhay\"\r\n```\r\n\r\nHow can we use a variable? For example we want to replace first <code>\"a\"</code>, then <code>\"i\"</code>, etc.\r\n\r\n```\r\nvar replacedChar = \"a\";\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"ha\");\r\nconsole.log(sentence);\r\n// output is: \"Todhay is ha nice dhay\"\r\n\r\nvar replacedChar = \"i\";\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"I\");\r\nconsole.log(sentence);\r\n// output is: \"Today Is  nIce day\"\r\n```\r\n\r\nHow can we do it using variable?\r\n```\r\nvar char=\"d\";\r\nvar replacedChar = char;\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"D\");\r\nconsole.log(sentence);\r\n// output is: \"ToDay is a nice Day\"\r\n```\r\n\r\nHow can we make sure we replace one or another character?\r\n\r\n```\r\nvar char=\"d\";\r\nvar char2=\"a\";\r\nvar replacedChar = char+\"|\"+char2;\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"\");\r\nconsole.log(sentence);\r\n// output is: \"Toy is  nice y\"\r\n```\r\n","frontmatter":{"date":"2019-11-24","title":"Replace all occureencies of a string with RegEx"},"fields":{"slug":"/Replace_all_ocurencies_of_string_using_RegEx/"},"timeToRead":1,"html":"<p>Regular expressions allow to match certain patters.</p>\n<p>If we want to find char <code>\"a\"</code> in a string <code>\"Today is a nice day\"</code> and replace is with <code>\"ha\"</code>:</p>\n<pre><code>let sentence=\"Today is a nice day\".replace(\"a\", \"ha\");\nconsole.log(sentence);\n// output is: \"Todhay is a nice day\"\n</code></pre>\n<p>What happened here? Only the first occurance of the <code>\"a\"</code> was found. How can we replace all? We can usee regular expressions with <code>g</code> flag.</p>\n<pre><code>let sentence=\"Today is a nice day\".replace(/a/g, \"ha\");\nconsole.log(sentence);\n// output is: \"Todhay is ha nice dhay\"\n</code></pre>\n<p>How can we use a variable? For example we want to replace first <code>\"a\"</code>, then <code>\"i\"</code>, etc.</p>\n<pre><code>var replacedChar = \"a\";\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"ha\");\nconsole.log(sentence);\n// output is: \"Todhay is ha nice dhay\"\n\nvar replacedChar = \"i\";\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"I\");\nconsole.log(sentence);\n// output is: \"Today Is  nIce day\"\n</code></pre>\n<p>How can we do it using variable?</p>\n<pre><code>var char=\"d\";\nvar replacedChar = char;\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"D\");\nconsole.log(sentence);\n// output is: \"ToDay is a nice Day\"\n</code></pre>\n<p>How can we make sure we replace one or another character?</p>\n<pre><code>var char=\"d\";\nvar char2=\"a\";\nvar replacedChar = char+\"|\"+char2;\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"\");\nconsole.log(sentence);\n// output is: \"Toy is  nice y\"\n</code></pre>"}},{"node":{"id":"1ed194fe-a836-5bbd-a57e-6467946997d4","excerpt":"Summary of useful array methods Creating new array (when we dont want to reference) of a given length of empty elements: Creating new array…","rawMarkdownBody":"\r\nSummary of useful array methods\r\n\r\nCreating new array (when we dont want to reference) of a given length of empty elements:\r\n```\r\nlet newArray = new Array(7);\r\n//creates array of 7 elements, each element is emtpy\r\n```\r\n\r\n\r\nCreating new array with one specific item in it:\r\n```\r\nlet newArray = new Array(\"7\");\r\n//creates array of 1 element, this element is string 7\r\n```\r\n\r\nCreating new array from another array using spread operator. Spread operator creates new object + copies other array:\r\n```\r\nvar array = [1,2,3]\r\nvar newArray = [...array]\r\n\r\n// newArray will be: [1,2,3]\r\n\r\n```\r\n\r\nCreating new array from another array using spread operator + adding more elements. Spread operator creates new object + copies other array:\r\n```\r\nvar array = [1,2,3]\r\nvar newArray = [...array, 4]\r\n\r\n// newArray will be: [1,2,3,4]\r\n\r\n```\r\n\r\n\r\nCreating new array filled with 0s using loop:\r\n```\r\nvar data = [];\r\nvar length = 5;\r\n\r\nfor(var i = 0; i < length; i++) {\r\n    data.push(0);\r\n}\r\n```\r\n\r\n<code>array.map()</code> is going through each element of the array and allows to perform function on it and output NEW array\r\n```\r\nconst array1 = [1, 4, 9, 16];\r\n\r\n// pass a function to map\r\nconst map1 = array1.map(x => x * 2);\r\n\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\n\r\n<code>array.concat</code> createes A NEW array which concatenates original array with another array. concat does NOT mutate origina array\r\n```\r\nlet array = [\"cat\",\"tiger\"]\r\nlet newArray = array.concat(\"monster\")\r\n\r\n// array is still [\"cat\",\"tiger\"]\r\n// newArray is [\"cat\",\"tiger\", \"monster\"]\r\n```\r\n\r\n<code>array.push</code> MUTATES the existing array and adds new element!\r\n```\r\nlet array = [\"cat\",\"tiger\" ]\r\nlet length = array.push(\"monster\")\r\n// array is mutated [\"cat\",\"tiger\", \"monster\"]\r\n// length is 3\r\n```\r\n\r\n<code>array.indexOf()</code> finds element in the array, optional index means starting searching from position X\r\n\r\n```\r\nconst beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\r\n\r\nconsole.log(beasts.indexOf('bison'));\r\n// expected output: 1\r\n\r\n// start from index 2\r\nconsole.log(beasts.indexOf('bison', 2));\r\n// expected output: 4\r\n```\r\n\r\n<code>array.slice()</code> slices array from one index to another but it creates NEW array, it dos NOT mutate the original one\r\n```\r\n```\r\n\r\n<code>array.splice()</code> slices array from one index to another but it MUTATES existing array!\r\n```\r\n```\r\n\r\n","frontmatter":{"date":"2019-11-18","title":"Arrays"},"fields":{"slug":"/Arrays/"},"timeToRead":2,"html":"<p>Summary of useful array methods</p>\n<p>Creating new array (when we dont want to reference) of a given length of empty elements:</p>\n<pre><code>let newArray = new Array(7);\n//creates array of 7 elements, each element is emtpy\n</code></pre>\n<p>Creating new array with one specific item in it:</p>\n<pre><code>let newArray = new Array(\"7\");\n//creates array of 1 element, this element is string 7\n</code></pre>\n<p>Creating new array from another array using spread operator. Spread operator creates new object + copies other array:</p>\n<pre><code>var array = [1,2,3]\nvar newArray = [...array]\n\n// newArray will be: [1,2,3]\n</code></pre>\n<p>Creating new array from another array using spread operator + adding more elements. Spread operator creates new object + copies other array:</p>\n<pre><code>var array = [1,2,3]\nvar newArray = [...array, 4]\n\n// newArray will be: [1,2,3,4]\n</code></pre>\n<p>Creating new array filled with 0s using loop:</p>\n<pre><code>var data = [];\nvar length = 5;\n\nfor(var i = 0; i &#x3C; length; i++) {\n    data.push(0);\n}\n</code></pre>\n<p><code>array.map()</code> is going through each element of the array and allows to perform function on it and output NEW array</p>\n<pre><code>const array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p><code>array.concat</code> createes A NEW array which concatenates original array with another array. concat does NOT mutate origina array</p>\n<pre><code>let array = [\"cat\",\"tiger\"]\nlet newArray = array.concat(\"monster\")\n\n// array is still [\"cat\",\"tiger\"]\n// newArray is [\"cat\",\"tiger\", \"monster\"]\n</code></pre>\n<p><code>array.push</code> MUTATES the existing array and adds new element!</p>\n<pre><code>let array = [\"cat\",\"tiger\" ]\nlet length = array.push(\"monster\")\n// array is mutated [\"cat\",\"tiger\", \"monster\"]\n// length is 3\n</code></pre>\n<p><code>array.indexOf()</code> finds element in the array, optional index means starting searching from position X</p>\n<pre><code>const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\n\nconsole.log(beasts.indexOf('bison'));\n// expected output: 1\n\n// start from index 2\nconsole.log(beasts.indexOf('bison', 2));\n// expected output: 4\n</code></pre>\n<p><code>array.slice()</code> slices array from one index to another but it creates NEW array, it dos NOT mutate the original one</p>\n<pre><code></code></pre>\n<p><code>array.splice()</code> slices array from one index to another but it MUTATES existing array!</p>\n<pre><code></code></pre>"}},{"node":{"id":"1a274b55-19e1-50f7-982c-f8ad9db58738","excerpt":"Disabled button:","rawMarkdownBody":"\r\nDisabled button:\r\n\r\n```\r\n<button type=\"button\" disabled>Click Me!</button>\r\n```","frontmatter":{"date":"2019-11-17","title":"Buttons"},"fields":{"slug":"/Buttons/"},"timeToRead":1,"html":"<p>Disabled button:</p>\n<pre><code>&#x3C;button type=\"button\" disabled>Click Me!&#x3C;/button>\n</code></pre>"}},{"node":{"id":"2c6502b1-d5f4-50f0-84f9-92917d34777c","excerpt":"Creating new variable with CURRENT date: Creating new variable event which will contain a given date: Fortmatting Date to nice string using…","rawMarkdownBody":"\r\nCreating new variable with CURRENT date:\r\n```\r\nvar myDate = new Date();\r\n```\r\n\r\nCreating new variable event which will contain a given date:\r\n```\r\nvar event = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\r\n```\r\n\r\nFortmatting Date to nice string using <code>.toLocaleSting</code>\r\n```\r\nconsole.log(event.toLocaleString('en-GB', { timeZone: 'UTC' }));\r\n// expected output: 20/12/2012, 03:00:00\r\n```\r\n\r\nRetrieving info from the date:\r\n\r\nYear\r\n```\r\nvar year = date.getFullYear();\r\n//or\r\nvar year = date.getUTCFullYear();\r\n```\r\n\r\nMonth\r\n```\r\n var monthIndex = date.getMonth();\r\n //or\r\nvar monthIndex = date.getUTCMonth();\r\n```\r\n\r\nDay\r\n```\r\nvar day = date.getDate();\r\n//or\r\nvar day = date.getUTCDate();\r\n```\r\n\r\nHours\r\n```\r\nvar hours = date.getHours();\r\n//or\r\nvar hours = date.getUTCHours();\r\n```\r\nMinutes\r\n```\r\nvar minutes = date.getMinutes();\r\n//or\r\nvar minutes = date.getUTCMinutes();\r\n```\r\n\r\nSeconds\r\n```\r\nvar seconds = date.getSeconds();\r\n//or\r\nvar seconds = date.getITCSeconds();\r\n```\r\n\r\nIncrementing one day to a date\r\n```\r\nvar myDate = new Date();\r\n\r\n//add a day to the date\r\nmyDate.setDate(myDate.getDate() + 1);\r\n```\r\n","frontmatter":{"date":"2019-11-16","title":"Date Manipulations"},"fields":{"slug":"/Date_Manipulations/"},"timeToRead":1,"html":"<p>Creating new variable with CURRENT date:</p>\n<pre><code>var myDate = new Date();\n</code></pre>\n<p>Creating new variable event which will contain a given date:</p>\n<pre><code>var event = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n</code></pre>\n<p>Fortmatting Date to nice string using <code>.toLocaleSting</code></p>\n<pre><code>console.log(event.toLocaleString('en-GB', { timeZone: 'UTC' }));\n// expected output: 20/12/2012, 03:00:00\n</code></pre>\n<p>Retrieving info from the date:</p>\n<p>Year</p>\n<pre><code>var year = date.getFullYear();\n//or\nvar year = date.getUTCFullYear();\n</code></pre>\n<p>Month</p>\n<pre><code> var monthIndex = date.getMonth();\n //or\nvar monthIndex = date.getUTCMonth();\n</code></pre>\n<p>Day</p>\n<pre><code>var day = date.getDate();\n//or\nvar day = date.getUTCDate();\n</code></pre>\n<p>Hours</p>\n<pre><code>var hours = date.getHours();\n//or\nvar hours = date.getUTCHours();\n</code></pre>\n<p>Minutes</p>\n<pre><code>var minutes = date.getMinutes();\n//or\nvar minutes = date.getUTCMinutes();\n</code></pre>\n<p>Seconds</p>\n<pre><code>var seconds = date.getSeconds();\n//or\nvar seconds = date.getITCSeconds();\n</code></pre>\n<p>Incrementing one day to a date</p>\n<pre><code>var myDate = new Date();\n\n//add a day to the date\nmyDate.setDate(myDate.getDate() + 1);\n</code></pre>"}},{"node":{"id":"bcbc4cfd-5f06-58ab-ba2f-e8f32a3a0890","excerpt":"Imagine have a while look in which you are updating state: Updating state within while loop risks running into infinite loop especially if…","rawMarkdownBody":"\r\nImagine have a while look in which you are updating state:\r\n```\r\nexport const CodeAdvent20180102 = () => {\r\n  const [frequencyChanges, setFrequencyChanges] = useState([\r\n    3,\r\n    -3,\r\n    -2,\r\n    5,\r\n    4,\r\n    0\r\n  ]);\r\n  const [frequencySum, setFrequencySum] = useState(0);\r\n  const [uniques, setUniques] = useState([0]);\r\n  const [reiterate, setReiterate] = useState(true);\r\n  const [duplicateFrequency, setDuplicateFrequency] = useState();\r\n\r\n  function handleClick() {\r\n    let result = 0;\r\n    let newArray = [...uniques];\r\n\r\n while (reiterate) {\r\n\r\n    frequencyChanges.map((item, index) => {\r\n      result = result + item;\r\n      console.log(\"Im here\");\r\n      if (uniques.includes(result) && reiterate) {\r\n        setReiterate(false);\r\n        debugger;\r\n        setDuplicateFrequency(result);\r\n      } else if (reiterate) {\r\n        newArray = newArray.concat(result);\r\n        setUniques(newArray);\r\n        setFrequencySum(result);\r\n      }\r\n    });\r\n   }\r\n  }\r\n\r\n```\r\n\r\nUpdating state within while loop risks running into infinite loop especially if the loop condition is based on the state.\r\n\r\nWhy??? \r\n\r\nIt is bcause the way state works in the React. For performance reasons, when we update thee state and use that state info immeediateellz afterwards, it is not guaranteed that it will be updated. State updated asznchronously and sometimes state updates are batched (groupeed) for performance reasons! \r\n\r\nSo dont rely on states too much!","frontmatter":{"date":"2019-11-15","title":"While Loop and React State"},"fields":{"slug":"/WhileLoopAndReactState/"},"timeToRead":1,"html":"<p>Imagine have a while look in which you are updating state:</p>\n<pre><code>export const CodeAdvent20180102 = () => {\n  const [frequencyChanges, setFrequencyChanges] = useState([\n    3,\n    -3,\n    -2,\n    5,\n    4,\n    0\n  ]);\n  const [frequencySum, setFrequencySum] = useState(0);\n  const [uniques, setUniques] = useState([0]);\n  const [reiterate, setReiterate] = useState(true);\n  const [duplicateFrequency, setDuplicateFrequency] = useState();\n\n  function handleClick() {\n    let result = 0;\n    let newArray = [...uniques];\n\n while (reiterate) {\n\n    frequencyChanges.map((item, index) => {\n      result = result + item;\n      console.log(\"Im here\");\n      if (uniques.includes(result) &#x26;&#x26; reiterate) {\n        setReiterate(false);\n        debugger;\n        setDuplicateFrequency(result);\n      } else if (reiterate) {\n        newArray = newArray.concat(result);\n        setUniques(newArray);\n        setFrequencySum(result);\n      }\n    });\n   }\n  }\n</code></pre>\n<p>Updating state within while loop risks running into infinite loop especially if the loop condition is based on the state.</p>\n<p>Why??? </p>\n<p>It is bcause the way state works in the React. For performance reasons, when we update thee state and use that state info immeediateellz afterwards, it is not guaranteed that it will be updated. State updated asznchronously and sometimes state updates are batched (groupeed) for performance reasons! </p>\n<p>So dont rely on states too much!</p>"}},{"node":{"id":"695e6233-53a4-5245-be67-ae2bb1b58d1d","excerpt":"First import your image: Then use it on your component style: or Alternative, create a className on your element And then style your css:","rawMarkdownBody":"\r\nFirst import your image:\r\n```\r\nimport Background from './advent.jpg';\r\n```\r\n\r\nThen use it on your component style:\r\n```\r\n<Col sm={12} style={{backgroundImage: `url(${Background})`}} />\r\n```\r\n\r\nor\r\n\r\n```\r\n<h2 style={{backgroundImage: `url(${Background})`}} >HI</h2>\r\n```\r\n\r\nAlternative, create a className on your element\r\n```\r\nclassName=\"background\"\r\n```\r\n\r\nAnd then style your css:\r\n```\r\n.background{\r\n  background-image: url(\"https://i.imgur.com/obmwHdn.jpg\");\r\n  width: 600px;\r\n}\r\n```","frontmatter":{"date":"2019-11-15","title":"Background image in div"},"fields":{"slug":"/HowToAddBackgroundImageToDiv/"},"timeToRead":1,"html":"<p>First import your image:</p>\n<pre><code>import Background from './advent.jpg';\n</code></pre>\n<p>Then use it on your component style:</p>\n<pre><code>&#x3C;Col sm={12} style={{backgroundImage: `url(${Background})`}} />\n</code></pre>\n<p>or</p>\n<pre><code>&#x3C;h2 style={{backgroundImage: `url(${Background})`}} >HI&#x3C;/h2>\n</code></pre>\n<p>Alternative, create a className on your element</p>\n<pre><code>className=\"background\"\n</code></pre>\n<p>And then style your css:</p>\n<pre><code>.background{\n  background-image: url(\"https://i.imgur.com/obmwHdn.jpg\");\n  width: 600px;\n}\n</code></pre>"}},{"node":{"id":"d564ac38-b7e0-5935-938d-57f57c38eef1","excerpt":"How to update an array state in React? States in React are declared with const and therefore immutable. It means we cant (or rather shouldnt…","rawMarkdownBody":"\r\nHow to update an array state in React?\r\n\r\nStates in React are declared with const and therefore immutable. It means we cant (or rather shouldnt) manipulate them directly.\r\n\r\nA quote from the official React documentation says:\r\n\r\n*\"Never mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.\"*\r\n\r\nWhat is direct manipulation?\r\n\r\nImagine we have this state:\r\n\r\n```\r\nconst [array, setArray] = useState([1,2,3])\r\n```\r\n\r\nThen we try to manipulate it directly:\r\n\r\n```\r\narray = [4]\r\n```\r\n\r\nState should also not be MUTATED. What is mutation? It can be an array method that will CHANGE the state directly. For example push (adding one more element to array).\r\n\r\n```\r\narray.push(4);\r\n```\r\n\r\nWhy mutation is bad? It has to do with how the memory works. \r\n\r\nWhen we create our state, for example:\r\n\r\n```\r\nconst [array, setArray] = useState([1,2,3])\r\n```\r\n\r\nThis variable will be created as an object in the memory on location lets say aaa and this object will be pointing to other memory locations for each of the elements in the array. Number 1 will have memory location xxx, Number 2 will have memory location yyy, etc). The ARRAY object in the memory location aaa only points to other memory locations. \r\n\r\nImagine we now MUTATE/change the existing array by:\r\n\r\n```\r\narray.push(4);\r\n```\r\n\r\nThis changes the EXISTING array, in memory however the memory location aaa of the WHOLE array object did NOT change (because it is not a NEW object, it is the SAME object, just mutated/slightly change). Only thing that changed is that ARRAY object on location aaa is now pointing also to number 4 located lets say on memory location qqq. If the memory location of the whole array did not change, the render of the whole component will not be triggered!!\r\n\r\nIn order to trigger the render, we need to create a NEW object in the memory! For example, creating a new array with new memory location which will be then set as the new state using <code>setArray(newArray)</code>.\r\n\r\nBest way to create a new array and concatenate the new value to it is:\r\n\r\n\r\n\r\nThere are two array methods which ave potential to be used:\r\n\r\n- array.push('new value')\r\n\r\n- array.concat('new value')\r\n\r\n<code>array.push('new value')</code> returns the **LENGHT** of the extended array, instead of the array itself! Moreover it MUTATES the array, so it should NOT be used.\r\n\r\n\r\n<code>array.concat('new value')</code> returns a new array which can be then set to OVERWRITE the state used useState hook.\r\n\r\n\r\n>Great source: \r\n\r\nhttps://blog.logrocket.com/immutability-in-react-ebe55253a1cc/\r\n\r\n\r\n> Even greater resource:\r\n\r\nhttps://www.samanthaming.com/tidbits/35-es6-way-to-clone-an-array\r\n","frontmatter":{"date":"2019-11-14","title":"React state immutability"},"fields":{"slug":"/ReactStateImmutability/"},"timeToRead":2,"html":"<p>How to update an array state in React?</p>\n<p>States in React are declared with const and therefore immutable. It means we cant (or rather shouldnt) manipulate them directly.</p>\n<p>A quote from the official React documentation says:</p>\n<p><em>\"Never mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.\"</em></p>\n<p>What is direct manipulation?</p>\n<p>Imagine we have this state:</p>\n<pre><code>const [array, setArray] = useState([1,2,3])\n</code></pre>\n<p>Then we try to manipulate it directly:</p>\n<pre><code>array = [4]\n</code></pre>\n<p>State should also not be MUTATED. What is mutation? It can be an array method that will CHANGE the state directly. For example push (adding one more element to array).</p>\n<pre><code>array.push(4);\n</code></pre>\n<p>Why mutation is bad? It has to do with how the memory works. </p>\n<p>When we create our state, for example:</p>\n<pre><code>const [array, setArray] = useState([1,2,3])\n</code></pre>\n<p>This variable will be created as an object in the memory on location lets say aaa and this object will be pointing to other memory locations for each of the elements in the array. Number 1 will have memory location xxx, Number 2 will have memory location yyy, etc). The ARRAY object in the memory location aaa only points to other memory locations. </p>\n<p>Imagine we now MUTATE/change the existing array by:</p>\n<pre><code>array.push(4);\n</code></pre>\n<p>This changes the EXISTING array, in memory however the memory location aaa of the WHOLE array object did NOT change (because it is not a NEW object, it is the SAME object, just mutated/slightly change). Only thing that changed is that ARRAY object on location aaa is now pointing also to number 4 located lets say on memory location qqq. If the memory location of the whole array did not change, the render of the whole component will not be triggered!!</p>\n<p>In order to trigger the render, we need to create a NEW object in the memory! For example, creating a new array with new memory location which will be then set as the new state using <code>setArray(newArray)</code>.</p>\n<p>Best way to create a new array and concatenate the new value to it is:</p>\n<p>There are two array methods which ave potential to be used:</p>\n<ul>\n<li>array.push('new value')</li>\n<li>array.concat('new value')</li>\n</ul>\n<p><code>array.push('new value')</code> returns the <strong>LENGHT</strong> of the extended array, instead of the array itself! Moreover it MUTATES the array, so it should NOT be used.</p>\n<p><code>array.concat('new value')</code> returns a new array which can be then set to OVERWRITE the state used useState hook.</p>\n<blockquote>\n<p>Great source: </p>\n</blockquote>\n<p><a href=\"https://blog.logrocket.com/immutability-in-react-ebe55253a1cc/\">https://blog.logrocket.com/immutability-in-react-ebe55253a1cc/</a></p>\n<blockquote>\n<p>Even greater resource:</p>\n</blockquote>\n<p><a href=\"https://www.samanthaming.com/tidbits/35-es6-way-to-clone-an-array\">https://www.samanthaming.com/tidbits/35-es6-way-to-clone-an-array</a></p>"}},{"node":{"id":"a6e7baee-d781-57fb-8d2f-051619d50a9f","excerpt":"How to convert string to integer? Use parseInt:","rawMarkdownBody":"\r\nHow to convert string to integer?\r\n\r\nUse parseInt:\r\n```\r\nlet integer = parseInt(\"1\");\r\n```","frontmatter":{"date":"2019-11-14","title":"React state immutability"},"fields":{"slug":"/Convert_string_to_integer/"},"timeToRead":1,"html":"<p>How to convert string to integer?</p>\n<p>Use parseInt:</p>\n<pre><code>let integer = parseInt(\"1\");\n</code></pre>"}},{"node":{"id":"4153decd-7235-53e7-aac0-6c6f49d71fc4","excerpt":"General information Markdown files use extension .md They allow formatting text betteer then in the code itself between for example p tags…","rawMarkdownBody":"\r\n**General information**\r\n\r\nMarkdown files use extension .md They allow formatting text betteer then in the code itself between for example p tags. Gatsby also can interpret eeach md file a a sub-site and automate creation for example of blog posts, articles, etc.\r\n\r\nMD files usually start with some metadata, such as title, date, etc, which can be retrieved and used to build the component which will display thee data:\r\n```\r\n---\r\ntitle: \"JS\"\r\ndate: \"2019-11-12\"\r\n---\r\n```\r\n\r\n**Basic styling in Markdown**\r\n> Bold\r\n```\r\n**I am BOLD**\r\n```\r\n> List\r\n```\r\n- List item1\r\n- List item2\r\n```\r\n\r\n>How to separate text which should not be formatted, such as our code?\r\n```\r\nuse ``` before and after the block code\r\n```\r\n\r\n>How to insert images to md files?\r\n```\r\n![image alt atribute](image url or file path)\r\n```\r\n\r\n>You can add text to image which will display when you mouseOver the image using Title\r\n```\r\n![image alt atribute](url \"Title\")\r\n```","frontmatter":{"date":"2019-11-12","title":"Markdown"},"fields":{"slug":"/Markdown/"},"timeToRead":1,"html":"<p><strong>General information</strong></p>\n<p>Markdown files use extension .md They allow formatting text betteer then in the code itself between for example p tags. Gatsby also can interpret eeach md file a a sub-site and automate creation for example of blog posts, articles, etc.</p>\n<p>MD files usually start with some metadata, such as title, date, etc, which can be retrieved and used to build the component which will display thee data:</p>\n<pre><code>---\ntitle: \"JS\"\ndate: \"2019-11-12\"\n---\n</code></pre>\n<p><strong>Basic styling in Markdown</strong></p>\n<blockquote>\n<p>Bold</p>\n</blockquote>\n<pre><code>**I am BOLD**\n</code></pre>\n<blockquote>\n<p>List</p>\n</blockquote>\n<pre><code>- List item1\n- List item2\n</code></pre>\n<blockquote>\n<p>How to separate text which should not be formatted, such as our code?</p>\n</blockquote>\n<pre><code>use ``` before and after the block code\n</code></pre>\n<blockquote>\n<p>How to insert images to md files?</p>\n</blockquote>\n<pre><code>![image alt atribute](image url or file path)\n</code></pre>\n<blockquote>\n<p>You can add text to image which will display when you mouseOver the image using Title</p>\n</blockquote>\n<pre><code>![image alt atribute](url \"Title\")\n</code></pre>"}},{"node":{"id":"be83f1bd-ac41-5726-9854-ebc9e44c0d52","excerpt":"General definitions Paradigm\nis an universal approach to structuring code. Example of paradigms:  1/procedural programming 2/object-oriented…","rawMarkdownBody":"\r\n**General definitions**\r\n\r\n> Paradigm\r\nis an universal approach to structuring code. Example of paradigms: \r\n\r\n**1/**procedural programming\r\n\r\n**2/**object-oriented programming\r\n\r\n**3/**functional programming\r\n\r\nSome languages embrace one of them, other languages like JS are multi-paradigm languages.\r\n\r\n> Style\r\nindividual programmer's way of writing code\r\n\r\n> Framework\r\ntools and libraries used in program\r\n\r\n> ECMA\r\nEuropean Computer Manufacturers Association - is a standards organization for information and communication systems. Mission is to standardize computer systems in Europe. \r\n\r\n> Official name\r\nJavaScript (or in short JS) was in 2016 officially named as ECMAScriptXXXX where XXXX stands for revision year. For example now we have ECMAScript2019 which is abbreviated as ES2019. Therefor we can use Javascript, JS, ECMAScript or ES2019 to refer to the name of this language.\r\n\r\n> T39\r\nis a committee which works on new features/bugs, votes on proposals, etc. It contains 50-100 members of different companies like Google, Mozilla, etc\r\n\r\n> Birthday\r\nJS was creeated in 1995\r\n\r\n> Compatibility\r\nJS is and will always be backwards compatible. Code written in 1995 will still run (on updated browsers) and won't break. JS however is NOT forward compatible. Latest JS will not run on OLD browsers!\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-11-10","title":"JS"},"fields":{"slug":"/JS/"},"timeToRead":1,"html":"<p><strong>General definitions</strong></p>\n<blockquote>\n<p>Paradigm\nis an universal approach to structuring code. Example of paradigms: </p>\n</blockquote>\n<p><strong>1/</strong>procedural programming</p>\n<p><strong>2/</strong>object-oriented programming</p>\n<p><strong>3/</strong>functional programming</p>\n<p>Some languages embrace one of them, other languages like JS are multi-paradigm languages.</p>\n<blockquote>\n<p>Style\nindividual programmer's way of writing code</p>\n</blockquote>\n<blockquote>\n<p>Framework\ntools and libraries used in program</p>\n</blockquote>\n<blockquote>\n<p>ECMA\nEuropean Computer Manufacturers Association - is a standards organization for information and communication systems. Mission is to standardize computer systems in Europe. </p>\n</blockquote>\n<blockquote>\n<p>Official name\nJavaScript (or in short JS) was in 2016 officially named as ECMAScriptXXXX where XXXX stands for revision year. For example now we have ECMAScript2019 which is abbreviated as ES2019. Therefor we can use Javascript, JS, ECMAScript or ES2019 to refer to the name of this language.</p>\n</blockquote>\n<blockquote>\n<p>T39\nis a committee which works on new features/bugs, votes on proposals, etc. It contains 50-100 members of different companies like Google, Mozilla, etc</p>\n</blockquote>\n<blockquote>\n<p>Birthday\nJS was creeated in 1995</p>\n</blockquote>\n<blockquote>\n<p>Compatibility\nJS is and will always be backwards compatible. Code written in 1995 will still run (on updated browsers) and won't break. JS however is NOT forward compatible. Latest JS will not run on OLD browsers!</p>\n</blockquote>"}},{"node":{"id":"820d089f-038d-5129-bfd4-a2566b8a3970","excerpt":"Are you also one of those perfectionists (like me..) who like their text to be nicely formatted in a BLOCK, rather than having each text…","rawMarkdownBody":"\r\nAre you also one of those perfectionists (like me..) who like their text to be nicely formatted in a <code>BLOCK</code>, rather than having each text line of different length? If yes, then this article is for you!\r\n\r\nIn order to have each line of text of same length and left and right side of text nicely aligned, we can use following code:\r\n```\r\n<p style={{  textAlign: \"justify\" }}>\r\n```\r\n\r\nTry it out! It works like magic :) ","frontmatter":{"date":"2019-10-29","title":"Format Text to Block"},"fields":{"slug":"/Format_text_to_Block/"},"timeToRead":1,"html":"<p>Are you also one of those perfectionists (like me..) who like their text to be nicely formatted in a <code>BLOCK</code>, rather than having each text line of different length? If yes, then this article is for you!</p>\n<p>In order to have each line of text of same length and left and right side of text nicely aligned, we can use following code:</p>\n<pre><code>&#x3C;p style={{  textAlign: \"justify\" }}>\n</code></pre>\n<p>Try it out! It works like magic :) </p>"}},{"node":{"id":"612c83c0-0cb5-5622-b787-025f02ed5586","excerpt":"Only one advice here: :) Apart from that, imagine you want to display following text in a p tag : If you write the code like this: you will…","rawMarkdownBody":"Only one advice here:\r\n\r\n```\r\nRUUUUUUUUUUN\r\n```\r\n\r\n:)\r\n\r\nApart from that, imagine you want to display following text in a p tag :\r\n```\r\nthe way you use props is {props.name}\r\n```\r\nIf you write the code like this:\r\n```\r\n<p>the way you use props is {props.name}</p>\r\n```\r\nyou will get an error that props.name is not defined\r\n\r\nIt is because curly braces means injecting JS in JSX so the program expects for example a variable, not a plain text.\r\n\r\nSolution is to use {'{}'} like so:\r\n```\r\n<p>the way you use props is {'{props.name}'}</p>\r\n```","frontmatter":{"date":"2019-10-28","title":"Escaping curly brackets in JSX"},"fields":{"slug":"/Escaping_Brackets_in_JSX/"},"timeToRead":1,"html":"<p>Only one advice here:</p>\n<pre><code>RUUUUUUUUUUN\n</code></pre>\n<p>:)</p>\n<p>Apart from that, imagine you want to display following text in a p tag :</p>\n<pre><code>the way you use props is {props.name}\n</code></pre>\n<p>If you write the code like this:</p>\n<pre><code>&#x3C;p>the way you use props is {props.name}&#x3C;/p>\n</code></pre>\n<p>you will get an error that props.name is not defined</p>\n<p>It is because curly braces means injecting JS in JSX so the program expects for example a variable, not a plain text.</p>\n<p>Solution is to use {'{}'} like so:</p>\n<pre><code>&#x3C;p>the way you use props is {'{props.name}'}&#x3C;/p>\n</code></pre>"}},{"node":{"id":"6869d44a-7cf1-5416-85fd-c4304c424623","excerpt":"What are higher order functions? According to Wikipedia: In mathematics and computer science, a higher-order function is a function that…","rawMarkdownBody":"\r\nWhat are higher order functions? According to Wikipedia:\r\n\r\n> In mathematics and computer science, a higher-order function is a function that does at least one of the following:\r\n\r\n> 1/ takes one or more functions as arguments (i.e. procedural parameters)\r\n\r\n> 2/ returns a function as its result.\r\n\r\nFor example an array method .reduce is a higher order function because it takes a function called reducer as a parameter:\r\n\r\n\r\n```javascript\r\nconst [myArray, setMyArray] = useState([1, 4, 2]) \r\n<p>Im a reducer and SUM is: {myArray.reduce(reducer)}</p>\r\nconst reducer = (accumulator, currentValue, index) => {\r\n        accumulator = (accumulator + currentValue)        \r\n        return (accumulator);\r\n    } \r\n```   ","frontmatter":{"date":"2019-10-27","title":"Higher Order Functions"},"fields":{"slug":"/Higher_order_functions/"},"timeToRead":1,"html":"<p>What are higher order functions? According to Wikipedia:</p>\n<blockquote>\n<p>In mathematics and computer science, a higher-order function is a function that does at least one of the following:</p>\n</blockquote>\n<blockquote>\n<p>1/ takes one or more functions as arguments (i.e. procedural parameters)</p>\n</blockquote>\n<blockquote>\n<p>2/ returns a function as its result.</p>\n</blockquote>\n<p>For example an array method .reduce is a higher order function because it takes a function called reducer as a parameter:</p>\n<pre><code class=\"language-javascript\">const [myArray, setMyArray] = useState([1, 4, 2]) \n&#x3C;p>Im a reducer and SUM is: {myArray.reduce(reducer)}&#x3C;/p>\nconst reducer = (accumulator, currentValue, index) => {\n        accumulator = (accumulator + currentValue)        \n        return (accumulator);\n    } \n</code></pre>"}},{"node":{"id":"f316a34a-e925-5967-a916-7c85f8f6cab6","excerpt":"There are two ways how to access props passed to a component. a) Using props as argument of the functional component and accessing them with…","rawMarkdownBody":"\r\nThere are two ways how to access props passed to a component.\r\n\r\n**a)** Using props as argument of the functional component and accessing them with <code>props.name</code>\r\n\r\n```\r\nconst Button = (props) => {\r\n  return (\r\n      <p>{props.name}</p>\r\n  )\r\n}\r\n```\r\n\r\n**b)** or alternatively passing name of prop inside curly brackets of the functional component and then accessing props like: <code>name</code>\r\n```\r\nconst Button = ({name}) => {\r\n  return (\r\n      <p>{name}</p>\r\n  )\r\n}\r\n```\r\nAlternative b allows only passing specific props to the component, instead of pass ALL of them.\r\n\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-10-26","title":"Accessing Props"},"fields":{"slug":"/Accessing_Props/"},"timeToRead":1,"html":"<p>There are two ways how to access props passed to a component.</p>\n<p><strong>a)</strong> Using props as argument of the functional component and accessing them with <code>props.name</code></p>\n<pre><code>const Button = (props) => {\n  return (\n      &#x3C;p>{props.name}&#x3C;/p>\n  )\n}\n</code></pre>\n<p><strong>b)</strong> or alternatively passing name of prop inside curly brackets of the functional component and then accessing props like: <code>name</code></p>\n<pre><code>const Button = ({name}) => {\n  return (\n      &#x3C;p>{name}&#x3C;/p>\n  )\n}\n</code></pre>\n<p>Alternative b allows only passing specific props to the component, instead of pass ALL of them.</p>"}},{"node":{"id":"7a0e48f9-355f-540a-b84b-22036c4b235f","excerpt":"Imagine we add to our code a line like this: Then we are able to execute code only up until this line.  You need to go to your website and…","rawMarkdownBody":"\r\nImagine we add to our code a line like this:\r\n```\r\ndebugger;\r\n```\r\nThen we are able to execute code only up until this line. \r\n\r\nYou need to go to your website and open the DEV TOOLS (without opening the dev tools you won't be able to see the debugger stopping at the given place).\r\n\r\nAutomatical execution will stop and we will be able to use console to check for any value of our variable and hence check if all variables have correct values. \r\n\r\nFor example if we put debugger to onClick event handler, we can type in console:\r\n```\r\nevent\r\n```\r\nand we will see the whole event object.\r\n\r\nWe can put\r\n```\r\nevent.target\r\n```\r\n\r\nand see all the options we have that can be used as event.target. Target.event set is pre-defined and doesn't display any custom values, like prop names.\r\n\r\nTo read custom properties, we can use:\r\n```\r\nevent.target.attribute\r\n```\r\nFor example if we gave our button attribute <code>user</code>, then we can access it by\r\n```\r\nevent.target.attribute.user\r\n```\r\nIf we wanted to access what is in between of the closing and ending tag of button we write\r\n```\r\nevent.target.innerHTML\r\n```\r\nPlease Note: React does not persist the events. Therefore many of those values might be empty. We can add this line to our code:\r\n```\r\nevent.persist();\r\n```","frontmatter":{"date":"2019-10-25","title":"Debugging"},"fields":{"slug":"/Debugging/"},"timeToRead":1,"html":"<p>Imagine we add to our code a line like this:</p>\n<pre><code>debugger;\n</code></pre>\n<p>Then we are able to execute code only up until this line. </p>\n<p>You need to go to your website and open the DEV TOOLS (without opening the dev tools you won't be able to see the debugger stopping at the given place).</p>\n<p>Automatical execution will stop and we will be able to use console to check for any value of our variable and hence check if all variables have correct values. </p>\n<p>For example if we put debugger to onClick event handler, we can type in console:</p>\n<pre><code>event\n</code></pre>\n<p>and we will see the whole event object.</p>\n<p>We can put</p>\n<pre><code>event.target\n</code></pre>\n<p>and see all the options we have that can be used as event.target. Target.event set is pre-defined and doesn't display any custom values, like prop names.</p>\n<p>To read custom properties, we can use:</p>\n<pre><code>event.target.attribute\n</code></pre>\n<p>For example if we gave our button attribute <code>user</code>, then we can access it by</p>\n<pre><code>event.target.attribute.user\n</code></pre>\n<p>If we wanted to access what is in between of the closing and ending tag of button we write</p>\n<pre><code>event.target.innerHTML\n</code></pre>\n<p>Please Note: React does not persist the events. Therefore many of those values might be empty. We can add this line to our code:</p>\n<pre><code>event.persist();\n</code></pre>"}},{"node":{"id":"196baa7b-b9d1-5924-8eda-45686fc2a465","excerpt":"Event handlers like onClick will by default pass in some metadata, which we can use afterwards. For example: name and id of the element…","rawMarkdownBody":"\r\nEvent handlers like onClick will by default pass in some metadata, which we can use afterwards. For example: name and id of the element which triggered it or trigger type (onClick, onMouseOver, onChange, etc)\r\n\r\nWe access them by:\r\n```\r\nevent.target.name\r\nevent.target.id\r\n```\r\nThese names are predefined by default!\r\n\r\nBut we can also access all our custom properties by:\r\n```\r\nevent.target.attribute.XXX\r\n```\r\n\r\nwhere XXX is name of our custom property. Please note however, that this is not a reliable way to retrieve data. This way uses DOM and DOM does not keep this data longer than the moment when the event triggered. For that reason we might also need to include \r\n```\r\nevent.persist()\r\n```\r\n\r\nExample:\r\n```\r\nfunction handleClick(event) {\r\n    console.log(\"Event: \", event);\r\n    console.log(\"Event type: \", event.type);\r\n    console.log(\"Event name: \", event.target.name);\r\n    console.log(\"Event id: \", event.target.id);\r\n    console.log(\"Event custom property: \", event.target.attributes.custom);\r\n    console.log(\"Event innerHTML: \", event.target.attributes.innerHTML);\r\n  }\r\n<button onClick={handleClick} name={\"clicker\"} id={\"click01\"} custom=\"I am the best in clicking\">\r\n    Click ME!\r\n</button>\r\n```\r\n\r\n> PLEASE NOTE: console.log(\"Event: \", event); will return the whole event OBJECT (on which we can click and see all nodes). If we wrote console.log(\"Event: \" + event); event object would be stringyfied and we wont have opportunity to explore the OBJECT!!\r\n\r\n\r\nWe might need to get some info from the element which called our event handler. For example onClick. With the onClick, we can use the information provided in event object and retrieve data about our componenet which triggered the event from event object. But this approach is not good, becasue it retrieves data from the DOM. In React we dont want to rely on DOM because it is outside of the React world. \r\n\r\n``` \r\nfunction handleClick(event) {\r\n    setMyArray(\r\n      myArray.concat({\r\n        firstName: event.target.attributes.name,\r\n        lastName: event.target.attributes.last,\r\n        display: event.target.innerHTML,\r\n      })\r\n    );\r\n  }\r\n<button onClick={handleClick} name={\"pete\"} id={\"grey\"} last=\"IM HIDDEN\">\r\n        Add Pete\r\n      </button>\r\n```\r\n\r\nIt is better to use it in this way:\r\n``` \r\n<Button\r\n        onClickZ={(name, id) => {\r\n          console.log(name, id);\r\n        }}\r\n        name=\"I AM NAME\"\r\n        id=\"IM ID\"\r\n        children=\"We are the children\"\r\n        last=\"IM LAST NAME\"\r\n      />\r\nfunction Button({ onClickZ, name, last, children }) {\r\n  return <button onClick={() => onClickZ(name, last)}>{children}</button>;\r\n}\r\n```","frontmatter":{"date":"2019-10-24","title":"Event Handlers"},"fields":{"slug":"/EventHandlers/"},"timeToRead":2,"html":"<p>Event handlers like onClick will by default pass in some metadata, which we can use afterwards. For example: name and id of the element which triggered it or trigger type (onClick, onMouseOver, onChange, etc)</p>\n<p>We access them by:</p>\n<pre><code>event.target.name\nevent.target.id\n</code></pre>\n<p>These names are predefined by default!</p>\n<p>But we can also access all our custom properties by:</p>\n<pre><code>event.target.attribute.XXX\n</code></pre>\n<p>where XXX is name of our custom property. Please note however, that this is not a reliable way to retrieve data. This way uses DOM and DOM does not keep this data longer than the moment when the event triggered. For that reason we might also need to include </p>\n<pre><code>event.persist()\n</code></pre>\n<p>Example:</p>\n<pre><code>function handleClick(event) {\n    console.log(\"Event: \", event);\n    console.log(\"Event type: \", event.type);\n    console.log(\"Event name: \", event.target.name);\n    console.log(\"Event id: \", event.target.id);\n    console.log(\"Event custom property: \", event.target.attributes.custom);\n    console.log(\"Event innerHTML: \", event.target.attributes.innerHTML);\n  }\n&#x3C;button onClick={handleClick} name={\"clicker\"} id={\"click01\"} custom=\"I am the best in clicking\">\n    Click ME!\n&#x3C;/button>\n</code></pre>\n<blockquote>\n<p>PLEASE NOTE: console.log(\"Event: \", event); will return the whole event OBJECT (on which we can click and see all nodes). If we wrote console.log(\"Event: \" + event); event object would be stringyfied and we wont have opportunity to explore the OBJECT!!</p>\n</blockquote>\n<p>We might need to get some info from the element which called our event handler. For example onClick. With the onClick, we can use the information provided in event object and retrieve data about our componenet which triggered the event from event object. But this approach is not good, becasue it retrieves data from the DOM. In React we dont want to rely on DOM because it is outside of the React world. </p>\n<pre><code>function handleClick(event) {\n    setMyArray(\n      myArray.concat({\n        firstName: event.target.attributes.name,\n        lastName: event.target.attributes.last,\n        display: event.target.innerHTML,\n      })\n    );\n  }\n&#x3C;button onClick={handleClick} name={\"pete\"} id={\"grey\"} last=\"IM HIDDEN\">\n        Add Pete\n      &#x3C;/button>\n</code></pre>\n<p>It is better to use it in this way:</p>\n<pre><code>&#x3C;Button\n        onClickZ={(name, id) => {\n          console.log(name, id);\n        }}\n        name=\"I AM NAME\"\n        id=\"IM ID\"\n        children=\"We are the children\"\n        last=\"IM LAST NAME\"\n      />\nfunction Button({ onClickZ, name, last, children }) {\n  return &#x3C;button onClick={() => onClickZ(name, last)}>{children}&#x3C;/button>;\n}\n</code></pre>"}},{"node":{"id":"8d1c4f39-e144-5dc1-979c-9737b922799a","excerpt":"There are two ways how we can declare innerHTML a) Writing text between opening and closing tag: b) Writing children property: Please note…","rawMarkdownBody":"\r\nThere are two ways how we can declare innerHTML\r\n\r\n**a) Writing text between opening and closing tag**:\r\n\r\n```\r\n<Button name=\"ABC\" color=\"green\">I AM CHILD</Button>\r\n``` \r\n\r\n**b) Writing children property**:\r\n\r\n\r\n``` \r\n<Button children=\"I AM A CHILD\" name=\"ABC\" color=\"green\"/>\r\n```\r\n\r\n> Please note: when using second option I need to have self closing tag, because if I have ```<Button></Button>``` an empty stace between opening and closing tag will overwrite my children property!\r\n\r\n>Please note: It is a good practice to write children between opening and closing tags (option A), rather than using it as property (option B)\r\n\r\nWhen we then define the button component, we can retrieve the children props like this\r\n\r\n**Alternative A**: Passing word children and then accessing it by word children\r\n\r\n```\r\nconst Button = ({children}) => {\r\n  return (\r\n      <button>{children}</button>\r\n  )\r\n}\r\n\r\n```\r\n**Alternative B**: Passing word props as arguments and then accessing props like so: props.children\r\n``` \r\nconst Button = (props) => {\r\n  return (\r\n      <button>{props.children}</button>\r\n  )\r\n}\r\n```\r\n\r\n","frontmatter":{"date":"2019-10-23","title":"Children"},"fields":{"slug":"/Children/"},"timeToRead":1,"html":"<p>There are two ways how we can declare innerHTML</p>\n<p><strong>a) Writing text between opening and closing tag</strong>:</p>\n<pre><code>&#x3C;Button name=\"ABC\" color=\"green\">I AM CHILD&#x3C;/Button>\n</code></pre>\n<p><strong>b) Writing children property</strong>:</p>\n<pre><code>&#x3C;Button children=\"I AM A CHILD\" name=\"ABC\" color=\"green\"/>\n</code></pre>\n<blockquote>\n<p>Please note: when using second option I need to have self closing tag, because if I have <code>&#x3C;Button>&#x3C;/Button></code> an empty stace between opening and closing tag will overwrite my children property!</p>\n</blockquote>\n<blockquote>\n<p>Please note: It is a good practice to write children between opening and closing tags (option A), rather than using it as property (option B)</p>\n</blockquote>\n<p>When we then define the button component, we can retrieve the children props like this</p>\n<p><strong>Alternative A</strong>: Passing word children and then accessing it by word children</p>\n<pre><code>const Button = ({children}) => {\n  return (\n      &#x3C;button>{children}&#x3C;/button>\n  )\n}\n</code></pre>\n<p><strong>Alternative B</strong>: Passing word props as arguments and then accessing props like so: props.children</p>\n<pre><code>const Button = (props) => {\n  return (\n      &#x3C;button>{props.children}&#x3C;/button>\n  )\n}\n</code></pre>"}},{"node":{"id":"7e772fa5-993c-55a8-84e8-5b26924d7468","excerpt":"Reduce method is very powerful one which allows you to iterate through all elements in an array, perform certain calculations on it and then…","rawMarkdownBody":"\r\nReduce method is very powerful one which allows you to iterate through all elements in an array, perform certain calculations on it and then returns something: a single value, array, etc.\r\n\r\nLet's start with an array:\r\n```\r\nconst myArray = [1,4,2]\r\n```\r\nWe want to sum this up and return one value of the total sum which would be 7\r\n\r\nWe can call:\r\n```\r\nmyArray.reduce(reducer, initialValue);\r\n```\r\n**reducer** is a function, which means that .reduce calls upon another function which we need to define. \r\n\r\n**initialValue** is optional, we can kick it off with some starting value, but for the first simple example we will skip it.\r\n\r\nExample reducer function:\r\n```\r\n  const reducer = (accumulator, currentValue) => {\r\n        accumulator = (accumulator + currentValue)        \r\n        return (accumulator);\r\n    } \r\n```\r\nreducer takes in 2 arguments:\r\n\r\n**accumulator** - value where we can store results of our calculations. Initial accumulator will equal the first element in array which will be 1 (unless we set initial value for it)\r\n\r\n**current value** - value at which we are currently iterating, initially this will be value of second element in array which is number 4 (unless we set initial value, then the initial currentValue will be the first element)\r\n\r\nThere can be other arguments like currentIndex (index of currentValue where the iteration currently happens) but the most basic example is with above-mentioned two.\r\n\r\nEach iteration ( or function call ) will deliver a returning value! It means on each step return will be executed. This returning value is going to get passed into next step!\r\n\r\nExample to use it for the highest number:\r\n\r\n``` \r\nconst reducer = (accumulator, currentValue) => {\r\n        if (currentValue >= accumulator){\r\n            accumulator = currentValue;\r\n        }\r\n        return (accumulator);\r\n    } \r\n```\r\n\r\nExample to usee it for average number:\r\n``` \r\nconst reducer = (accumulator, currentValue) => {\r\n        if (currentValue >= accumulator){\r\n            accumulator = currentValue;\r\n       }\r\n        return (accumulator);\r\n    } \r\n <p>Im a reducer and highest number is: {myArray.reduce(reducer)}</p>\r\n```","frontmatter":{"date":"2019-10-22","title":"Array Methods .reduce"},"fields":{"slug":"/Array_Methods_Reduce/"},"timeToRead":1,"html":"<p>Reduce method is very powerful one which allows you to iterate through all elements in an array, perform certain calculations on it and then returns something: a single value, array, etc.</p>\n<p>Let's start with an array:</p>\n<pre><code>const myArray = [1,4,2]\n</code></pre>\n<p>We want to sum this up and return one value of the total sum which would be 7</p>\n<p>We can call:</p>\n<pre><code>myArray.reduce(reducer, initialValue);\n</code></pre>\n<p><strong>reducer</strong> is a function, which means that .reduce calls upon another function which we need to define. </p>\n<p><strong>initialValue</strong> is optional, we can kick it off with some starting value, but for the first simple example we will skip it.</p>\n<p>Example reducer function:</p>\n<pre><code>  const reducer = (accumulator, currentValue) => {\n        accumulator = (accumulator + currentValue)        \n        return (accumulator);\n    } \n</code></pre>\n<p>reducer takes in 2 arguments:</p>\n<p><strong>accumulator</strong> - value where we can store results of our calculations. Initial accumulator will equal the first element in array which will be 1 (unless we set initial value for it)</p>\n<p><strong>current value</strong> - value at which we are currently iterating, initially this will be value of second element in array which is number 4 (unless we set initial value, then the initial currentValue will be the first element)</p>\n<p>There can be other arguments like currentIndex (index of currentValue where the iteration currently happens) but the most basic example is with above-mentioned two.</p>\n<p>Each iteration ( or function call ) will deliver a returning value! It means on each step return will be executed. This returning value is going to get passed into next step!</p>\n<p>Example to use it for the highest number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n        }\n        return (accumulator);\n    } \n</code></pre>\n<p>Example to usee it for average number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n       }\n        return (accumulator);\n    } \n &#x3C;p>Im a reducer and highest number is: {myArray.reduce(reducer)}&#x3C;/p>\n</code></pre>"}},{"node":{"id":"8a6ca7ba-bc7d-5c7a-b3be-ce9bcba04d05","excerpt":"Ever wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a…","rawMarkdownBody":"\r\nEver wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a button:\r\n``` \r\n<button>Hello</button>\r\n```\r\nThis is how we can access it: \r\n```\r\nprops.children\r\n```\r\nIn fact we can also rewrite the whole tag:\r\n```\r\n<button children=\"Hello\" />\r\n```\r\nBe careful not to do this:\r\n```\r\n<button children=\"Hello\"></button>\r\n```\r\nHere property children will be overwritten by blank space between opening and closing tag","frontmatter":{"date":"2019-10-21","title":"How to access inner HTML"},"fields":{"slug":"/How_to_access_innerHTML/"},"timeToRead":1,"html":"<p>Ever wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a button:</p>\n<pre><code>&#x3C;button>Hello&#x3C;/button>\n</code></pre>\n<p>This is how we can access it: </p>\n<pre><code>props.children\n</code></pre>\n<p>In fact we can also rewrite the whole tag:</p>\n<pre><code>&#x3C;button children=\"Hello\" />\n</code></pre>\n<p>Be careful not to do this:</p>\n<pre><code>&#x3C;button children=\"Hello\">&#x3C;/button>\n</code></pre>\n<p>Here property children will be overwritten by blank space between opening and closing tag</p>"}},{"node":{"id":"c46d3ef8-6652-54c5-b3c4-b848bea2ee2a","excerpt":"3 ways to define a function: or or Above functions would be called like this: Parenthesis mean call function immediately and output whatever…","rawMarkdownBody":"\r\n3 ways to define a function:\r\n```\r\nfunction bla() {\r\n  return null\r\n}\r\n```\r\nor\r\n```\r\nconst blo = () => {\r\n  return null\r\n}\r\n```\r\nor\r\n```\r\n() => onClickZ(name, last) {\r\n  return null\r\n}\r\n```\r\n\r\nAbove functions would be called like this:\r\n```\r\nbla()\r\nblo()\r\nonClickZ(name, last)\r\n```\r\nParenthesis mean call function immediately and output whatever is in the return.\r\n\r\nReferencing a function needs to be without parenthesis:\r\n```\r\nbla\r\nblo\r\nonClickZ\r\n```\r\nReferencing can be also done in event handlers like this\r\n```\r\nonChange={()=>onClickZ(name,last)}\r\n```\r\n\r\nAbove example is useful when we need to provide arguments to the function. But if we simply wrote\r\n``` \r\nonClickZ(name,last)\r\n```\r\nwe would actually CALL function, hence we need to use:\r\n```\r\n()=>onClickZ(name,last)\r\n```\r\nin order to reference a function and not to directly CALL it.\r\n","frontmatter":{"date":"2019-10-20","title":"Function declaration and call"},"fields":{"slug":"/Function_declaration_and_call/"},"timeToRead":1,"html":"<p>3 ways to define a function:</p>\n<pre><code>function bla() {\n  return null\n}\n</code></pre>\n<p>or</p>\n<pre><code>const blo = () => {\n  return null\n}\n</code></pre>\n<p>or</p>\n<pre><code>() => onClickZ(name, last) {\n  return null\n}\n</code></pre>\n<p>Above functions would be called like this:</p>\n<pre><code>bla()\nblo()\nonClickZ(name, last)\n</code></pre>\n<p>Parenthesis mean call function immediately and output whatever is in the return.</p>\n<p>Referencing a function needs to be without parenthesis:</p>\n<pre><code>bla\nblo\nonClickZ\n</code></pre>\n<p>Referencing can be also done in event handlers like this</p>\n<pre><code>onChange={()=>onClickZ(name,last)}\n</code></pre>\n<p>Above example is useful when we need to provide arguments to the function. But if we simply wrote</p>\n<pre><code>onClickZ(name,last)\n</code></pre>\n<p>we would actually CALL function, hence we need to use:</p>\n<pre><code>()=>onClickZ(name,last)\n</code></pre>\n<p>in order to reference a function and not to directly CALL it.</p>"}},{"node":{"id":"d74d0d9d-44cf-55e7-9121-7c750e781ce0","excerpt":"If we use function definition like this (using arrow functions): and this definition is AFTER code where it is called, it might still not be…","rawMarkdownBody":"\r\nIf we use function definition like this (using arrow functions):\r\n```\r\nconst Button = () => {\r\n}\r\n```\r\n\r\nand this definition is AFTER code where it is called, it might still not be defined.\r\n\r\nBut if we use:\r\n```\r\n function Button () {\r\n}\r\n```\r\n\r\nsuch function definition can be anywhere at the end of the file, but it will be **HOISTED**. \r\n\r\nHoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.\r\n\r\nInevitably, this means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local. \r\n\r\nThis allows you to  be able to call functions before you wrote them in your code.\r\n\r\n> Reference:\r\n\r\nhttps://scotch.io/tutorials/understanding-hoisting-in-javascript","frontmatter":{"date":"2019-10-18","title":"Function definition: Arrow vs Function, Hoising"},"fields":{"slug":"/Function_vs_Arrow_and_Hoisting/"},"timeToRead":1,"html":"<p>If we use function definition like this (using arrow functions):</p>\n<pre><code>const Button = () => {\n}\n</code></pre>\n<p>and this definition is AFTER code where it is called, it might still not be defined.</p>\n<p>But if we use:</p>\n<pre><code> function Button () {\n}\n</code></pre>\n<p>such function definition can be anywhere at the end of the file, but it will be <strong>HOISTED</strong>. </p>\n<p>Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.</p>\n<p>Inevitably, this means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local. </p>\n<p>This allows you to  be able to call functions before you wrote them in your code.</p>\n<blockquote>\n<p>Reference:</p>\n</blockquote>\n<p><a href=\"https://scotch.io/tutorials/understanding-hoisting-in-javascript\">https://scotch.io/tutorials/understanding-hoisting-in-javascript</a></p>"}},{"node":{"id":"bb32f881-e1ba-5d67-b8d5-d447d0732b95","excerpt":"Have you wondered how you can actually output an array in exactly the same form as you declare it? Say we have array: If you display it just…","rawMarkdownBody":"Have you wondered how you can actually output an array in exactly the same form as you declare it?\r\n\r\n> Say we have array:\r\n```\r\nconst myArray = [1, 2, 4];\r\n```\r\n> If you display it just as myArray, you will get: My array is 124\r\n```\r\n<p>My array is {myArray}</p>\r\n```\r\n\r\n> If you want to diplay however: My array is [1,2,4] you need to use JSON.stringify\r\n```\r\n<p>My array is {JSON.stringify(myArray)}</p>\r\n```","frontmatter":{"date":"2019-10-17","title":"JSON.stringify"},"fields":{"slug":"/JSON.stringify/"},"timeToRead":1,"html":"<p>Have you wondered how you can actually output an array in exactly the same form as you declare it?</p>\n<blockquote>\n<p>Say we have array:</p>\n</blockquote>\n<pre><code>const myArray = [1, 2, 4];\n</code></pre>\n<blockquote>\n<p>If you display it just as myArray, you will get: My array is 124</p>\n</blockquote>\n<pre><code>&#x3C;p>My array is {myArray}&#x3C;/p>\n</code></pre>\n<blockquote>\n<p>If you want to diplay however: My array is [1,2,4] you need to use JSON.stringify</p>\n</blockquote>\n<pre><code>&#x3C;p>My array is {JSON.stringify(myArray)}&#x3C;/p>\n</code></pre>"}},{"node":{"id":"bf3eb494-3f89-59b9-af22-e499e6ecc112","excerpt":"Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a…","rawMarkdownBody":"\r\n> Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a better way how components can receive props. The way is called **context** and you can think of it as something like a global variable.\r\n\r\n> Imagine component structure:\r\nA -> D -> C\r\n\r\n> A is parent and only summons D component. Then D summons  C\r\n\r\n> A has prop for theme ( value: \"green\") which needs to be passed to C. But only to C. Other component like D doesnt care about this prop.\r\n\r\n> Top level component PROVIDES context and child component CONSUMES the context. \r\n\r\nProvider example: component A.  \r\n\r\nConsumer Example: componenet called D\r\n\r\n> A: provides theme\r\n\r\n> C: consumes theme\r\n\r\n> First we create the cotext itself\r\n\r\n``` \r\n// src/ThemeContext.js\r\nimport React from 'react';\r\nconst ThemeContext = React.createContext(null);\r\nexport default ThemeContext;\r\n```\r\n> React.createContext will give us access to Provider and Consumer components.\r\n```\r\nThemeContext = React.createContext(null);\r\n```\r\n> Then we create component A which will be context provider\r\n```\r\n// src/ComponentA.js\r\nimport React from 'react';\r\nimport ThemeContext from './ThemeContext';\r\nconst A = () => (\r\n  <ThemeContext.Provider value=\"green\">\r\n    <D />\r\n  </ThemeContext.Provider>\r\n);\r\n```\r\n> We need to include new components called ThemeContext.Provider\r\n\r\n> A doesnt pass any props to D component. It makes value green available to all child components. A summons D component.\r\n\r\n> Lets look at C component. Now that A has made the value green available to all children, C can access that value:\r\n\r\n\r\n```\r\n// src/ComponentC.js\r\nimport React from 'react';\r\nimport ThemeContext from './ThemeContext';\r\nconst C = () => (\r\n  <ThemeContext.Consumer>\r\n    {value => (\r\n      <p style={{ color: value }}>\r\n        Hello World\r\n      </p>\r\n    )}\r\n  </ThemeContext.Consumer>\r\n);\r\n```\r\n\r\n> Complete example:\r\n``` \r\nimport React from \"react\";\r\nconst ColorContext = React.createContext(null);\r\nexport function SimpleContext(){\r\n    return (\r\n        <ColorContext.Provider value=\"green\">\r\n        <D />\r\n        </ColorContext.Provider>\r\n        )\r\n    }\r\nconst D = () => {\r\n    return (\r\n        <div>\r\n        <p>I am D component which is summoned by Parent component but I dont consume Context</p>\r\n        <C />\r\n        </div>\r\n    )\r\n}\r\nconst C = () => {\r\n    return (\r\n        <ColorContext.Consumer>\r\n        { value => (\r\n        <p style={{color: value}}>I am a C component summoned by D but I received beautiful green colour from my dear Parent</p>\r\n        )}\r\n        </ColorContext.Consumer>\r\n    )\r\n}\r\n```\r\n\r\n> With HOOKs we can make this even more elegant\r\n```\r\nimport React, { useContext } from \"react\";\r\nconst ColorContext = React.createContext(\r\n    { value: \"purple\"}\r\n);\r\nexport function SimpleContextUsewithHook(){\r\n    return (        \r\n        <D />        \r\n        )\r\n    }\r\nconst D = () => {\r\n    return (\r\n        <div>\r\n        <p>I am D component which is summoned by Parent component but I dont consume Context</p>\r\n        <C />\r\n        </div>\r\n    )\r\n}\r\nconst C = () => {\r\n    const context = useContext(ColorContext);\r\n    return (  \r\n        <p style={{color: context.value}}>I am a C component summoned by D but I received beautiful purple colour from my dear Parent</p> \r\n    )\r\n}\r\n```\r\n\r\n> Complex example with classes where we still use provider because we also want to be able to update the team\r\n\r\n```\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport './style.css';\r\nconst ProfileContext = React.createContext();\r\nclass ProfileProvider extends React.Component {\r\n  state = {\r\n    company: 'Progress',\r\n    companyImage: 'https://svgshare.com/i/9ir.svg',\r\n    url: 'https://www.telerik.com/kendo-react-ui/',\r\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\r\n    userName: 'Kendoka',\r\n    fullName: 'Kendō No Arikata',\r\n    team: 'KendoReact',\r\n    changeTeam: (team) => this.setState({\r\n      team: `Kendo${team}`\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <ProfileContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </ProfileContext.Provider>\r\n    )\r\n  }\r\n}\r\nconst App = () => (\r\n  <ProfileProvider>\r\n    <Profile />\r\n  </ProfileProvider>\r\n)\r\nconst Profile = () => (\r\n  <div className=\"profile\">\r\n    <ProfileContext.Consumer>\r\n      {context => <img src={context.companyImage} />}\r\n    </ProfileContext.Consumer>\r\n    <User />\r\n  </div>\r\n)\r\nconst User = () => (\r\n  <div className=\"user\">\r\n    <ProfileContext.Consumer>\r\n      {context =>\r\n        <React.Fragment>\r\n          <a href={context.url}>\r\n            <img src={context.userImage} width=\"138px\" />\r\n          </a>\r\n          <h1 className=\"profile-userName\">{context.userName}</h1>\r\n          <p className=\"profile-fullName\">({context.fullName})</p>\r\n          <Team />\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('Angular')}>Angular</button>\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('Vue')}>Vue</button>\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('React')}>React</button>\r\n        </React.Fragment>\r\n      }\r\n    </ProfileContext.Consumer>\r\n  </div>\r\n)\r\nconst Team = () => (\r\n  <ProfileContext.Consumer>\r\n    {context =>\r\n      <div className=\"team\">\r\n        <p className=\"profile-team\">{context.team}</p>\r\n      </div>\r\n    }\r\n  </ProfileContext.Consumer>\r\n)\r\nrender(<App />, document.getElementById('root'));\r\n``` \r\n\r\n> Same with hooks\r\n```\r\nimport React, { Component, useContext } from 'react';\r\nimport { render } from 'react-dom';\r\nimport './style.css';\r\nconst ProfileContext = React.createContext();\r\nclass ProfileProvider extends Component {\r\n  state = {\r\n    company: 'Progress',\r\n    companyImage: 'https://svgshare.com/i/9ir.svg',\r\n    url: 'https://www.telerik.com/kendo-react-ui/',\r\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\r\n    userName: 'Kendoken',\r\n    fullName: 'Kendoken No Michi',\r\n    team: 'KendoReact',\r\n    toggleTeam: (team) => this.setState({\r\n      team: `Kendo${team}`\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <ProfileContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </ProfileContext.Provider>\r\n    )\r\n  }\r\n}\r\nlet Profile = () => {\r\n  const context = useContext(ProfileContext);\r\n  return (\r\n    <div className=\"profile\">\r\n      <img src={context.companyImage} />\r\n      <User />\r\n    </div>\r\n  )\r\n}\r\nlet User = () => {\r\n  const context = useContext(ProfileContext);\r\n return (\r\n    <div className=\"user\">\r\n      <a href={context.url}>\r\n        <img src={context.userImage} width=\"138px\" />\r\n      </a>\r\n      <h1 className=\"profile-userName\">{context.userName}</h1>\r\n      <p className=\"profile-fullName\">({context.fullName})</p>\r\n      <Team />\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('Angular')}>Angular</button>\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('Vue')}>Vue</button>\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('React')}>React</button>\r\n    </div>\r\n  )\r\n}\r\nlet Team = () => {\r\n  const context = useContext(ProfileContext);\r\n  return (\r\n    <div className=\"team\">\r\n      <p className=\"profile-team\">{context.team}</p>\r\n    </div>\r\n  )\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <ProfileProvider>\r\n        <Profile />\r\n      </ProfileProvider>\r\n    );\r\n  }\r\n}\r\nrender(<App />, document.getElementById('root'));\r\n```\r\n> Resource: \r\n\r\nhttps://www.robinwieruch.de/react-context","frontmatter":{"date":"2019-10-16","title":"Context"},"fields":{"slug":"/Context/"},"timeToRead":5,"html":"<blockquote>\n<p>Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a better way how components can receive props. The way is called <strong>context</strong> and you can think of it as something like a global variable.</p>\n</blockquote>\n<blockquote>\n<p>Imagine component structure:\nA -> D -> C</p>\n</blockquote>\n<blockquote>\n<p>A is parent and only summons D component. Then D summons  C</p>\n</blockquote>\n<blockquote>\n<p>A has prop for theme ( value: \"green\") which needs to be passed to C. But only to C. Other component like D doesnt care about this prop.</p>\n</blockquote>\n<blockquote>\n<p>Top level component PROVIDES context and child component CONSUMES the context. </p>\n</blockquote>\n<p>Provider example: component A.  </p>\n<p>Consumer Example: componenet called D</p>\n<blockquote>\n<p>A: provides theme</p>\n</blockquote>\n<blockquote>\n<p>C: consumes theme</p>\n</blockquote>\n<blockquote>\n<p>First we create the cotext itself</p>\n</blockquote>\n<pre><code>// src/ThemeContext.js\nimport React from 'react';\nconst ThemeContext = React.createContext(null);\nexport default ThemeContext;\n</code></pre>\n<blockquote>\n<p>React.createContext will give us access to Provider and Consumer components.</p>\n</blockquote>\n<pre><code>ThemeContext = React.createContext(null);\n</code></pre>\n<blockquote>\n<p>Then we create component A which will be context provider</p>\n</blockquote>\n<pre><code>// src/ComponentA.js\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nconst A = () => (\n  &#x3C;ThemeContext.Provider value=\"green\">\n    &#x3C;D />\n  &#x3C;/ThemeContext.Provider>\n);\n</code></pre>\n<blockquote>\n<p>We need to include new components called ThemeContext.Provider</p>\n</blockquote>\n<blockquote>\n<p>A doesnt pass any props to D component. It makes value green available to all child components. A summons D component.</p>\n</blockquote>\n<blockquote>\n<p>Lets look at C component. Now that A has made the value green available to all children, C can access that value:</p>\n</blockquote>\n<pre><code>// src/ComponentC.js\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nconst C = () => (\n  &#x3C;ThemeContext.Consumer>\n    {value => (\n      &#x3C;p style={{ color: value }}>\n        Hello World\n      &#x3C;/p>\n    )}\n  &#x3C;/ThemeContext.Consumer>\n);\n</code></pre>\n<blockquote>\n<p>Complete example:</p>\n</blockquote>\n<pre><code>import React from \"react\";\nconst ColorContext = React.createContext(null);\nexport function SimpleContext(){\n    return (\n        &#x3C;ColorContext.Provider value=\"green\">\n        &#x3C;D />\n        &#x3C;/ColorContext.Provider>\n        )\n    }\nconst D = () => {\n    return (\n        &#x3C;div>\n        &#x3C;p>I am D component which is summoned by Parent component but I dont consume Context&#x3C;/p>\n        &#x3C;C />\n        &#x3C;/div>\n    )\n}\nconst C = () => {\n    return (\n        &#x3C;ColorContext.Consumer>\n        { value => (\n        &#x3C;p style={{color: value}}>I am a C component summoned by D but I received beautiful green colour from my dear Parent&#x3C;/p>\n        )}\n        &#x3C;/ColorContext.Consumer>\n    )\n}\n</code></pre>\n<blockquote>\n<p>With HOOKs we can make this even more elegant</p>\n</blockquote>\n<pre><code>import React, { useContext } from \"react\";\nconst ColorContext = React.createContext(\n    { value: \"purple\"}\n);\nexport function SimpleContextUsewithHook(){\n    return (        \n        &#x3C;D />        \n        )\n    }\nconst D = () => {\n    return (\n        &#x3C;div>\n        &#x3C;p>I am D component which is summoned by Parent component but I dont consume Context&#x3C;/p>\n        &#x3C;C />\n        &#x3C;/div>\n    )\n}\nconst C = () => {\n    const context = useContext(ColorContext);\n    return (  \n        &#x3C;p style={{color: context.value}}>I am a C component summoned by D but I received beautiful purple colour from my dear Parent&#x3C;/p> \n    )\n}\n</code></pre>\n<blockquote>\n<p>Complex example with classes where we still use provider because we also want to be able to update the team</p>\n</blockquote>\n<pre><code>import React from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\nconst ProfileContext = React.createContext();\nclass ProfileProvider extends React.Component {\n  state = {\n    company: 'Progress',\n    companyImage: 'https://svgshare.com/i/9ir.svg',\n    url: 'https://www.telerik.com/kendo-react-ui/',\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\n    userName: 'Kendoka',\n    fullName: 'Kendō No Arikata',\n    team: 'KendoReact',\n    changeTeam: (team) => this.setState({\n      team: `Kendo${team}`\n    })\n  }\n  render() {\n    return (\n      &#x3C;ProfileContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/ProfileContext.Provider>\n    )\n  }\n}\nconst App = () => (\n  &#x3C;ProfileProvider>\n    &#x3C;Profile />\n  &#x3C;/ProfileProvider>\n)\nconst Profile = () => (\n  &#x3C;div className=\"profile\">\n    &#x3C;ProfileContext.Consumer>\n      {context => &#x3C;img src={context.companyImage} />}\n    &#x3C;/ProfileContext.Consumer>\n    &#x3C;User />\n  &#x3C;/div>\n)\nconst User = () => (\n  &#x3C;div className=\"user\">\n    &#x3C;ProfileContext.Consumer>\n      {context =>\n        &#x3C;React.Fragment>\n          &#x3C;a href={context.url}>\n            &#x3C;img src={context.userImage} width=\"138px\" />\n          &#x3C;/a>\n          &#x3C;h1 className=\"profile-userName\">{context.userName}&#x3C;/h1>\n          &#x3C;p className=\"profile-fullName\">({context.fullName})&#x3C;/p>\n          &#x3C;Team />\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('Angular')}>Angular&#x3C;/button>\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('Vue')}>Vue&#x3C;/button>\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('React')}>React&#x3C;/button>\n        &#x3C;/React.Fragment>\n      }\n    &#x3C;/ProfileContext.Consumer>\n  &#x3C;/div>\n)\nconst Team = () => (\n  &#x3C;ProfileContext.Consumer>\n    {context =>\n      &#x3C;div className=\"team\">\n        &#x3C;p className=\"profile-team\">{context.team}&#x3C;/p>\n      &#x3C;/div>\n    }\n  &#x3C;/ProfileContext.Consumer>\n)\nrender(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<blockquote>\n<p>Same with hooks</p>\n</blockquote>\n<pre><code>import React, { Component, useContext } from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\nconst ProfileContext = React.createContext();\nclass ProfileProvider extends Component {\n  state = {\n    company: 'Progress',\n    companyImage: 'https://svgshare.com/i/9ir.svg',\n    url: 'https://www.telerik.com/kendo-react-ui/',\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\n    userName: 'Kendoken',\n    fullName: 'Kendoken No Michi',\n    team: 'KendoReact',\n    toggleTeam: (team) => this.setState({\n      team: `Kendo${team}`\n    })\n  }\n  render() {\n    return (\n      &#x3C;ProfileContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/ProfileContext.Provider>\n    )\n  }\n}\nlet Profile = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"profile\">\n      &#x3C;img src={context.companyImage} />\n      &#x3C;User />\n    &#x3C;/div>\n  )\n}\nlet User = () => {\n  const context = useContext(ProfileContext);\n return (\n    &#x3C;div className=\"user\">\n      &#x3C;a href={context.url}>\n        &#x3C;img src={context.userImage} width=\"138px\" />\n      &#x3C;/a>\n      &#x3C;h1 className=\"profile-userName\">{context.userName}&#x3C;/h1>\n      &#x3C;p className=\"profile-fullName\">({context.fullName})&#x3C;/p>\n      &#x3C;Team />\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('Angular')}>Angular&#x3C;/button>\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('Vue')}>Vue&#x3C;/button>\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('React')}>React&#x3C;/button>\n    &#x3C;/div>\n  )\n}\nlet Team = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"team\">\n      &#x3C;p className=\"profile-team\">{context.team}&#x3C;/p>\n    &#x3C;/div>\n  )\n}\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;ProfileProvider>\n        &#x3C;Profile />\n      &#x3C;/ProfileProvider>\n    );\n  }\n}\nrender(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<blockquote>\n<p>Resource: </p>\n</blockquote>\n<p><a href=\"https://www.robinwieruch.de/react-context\">https://www.robinwieruch.de/react-context</a></p>"}},{"node":{"id":"e07bd24b-17b4-5070-b764-52d6574904bb","excerpt":"Sometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the…","rawMarkdownBody":"\r\nSometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the local storage is:\r\n```\r\nwindow.localStorage.setItem('myInput', value)\r\n```\r\nExample code:\r\n```\r\nimport React from \"react\";\r\n\r\nexport class LocalStorage1 extends React.Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state={value: \"\"}\r\n      this.handleChange=this.handleChange.bind(this)\r\n  }\r\n  handleChange(e){\r\n    this.setState({value: e.target.value});\r\n    window.localStorage.setItem('myInput', e.target.value)\r\n  }\r\nrender () {\r\n    return (\r\n        <div>\r\n            <p>{this.state.value}</p>\r\n            <input type=\"text\" name=\"stats\" onChange={this.handleChange}></input>\r\n        </div>\r\n    )\r\n}\r\n}\r\n```\r\n> In order to retrieve item from the local storage we use code\r\n```\r\nwindow.localStorage.getItem('myInput')\r\n```","frontmatter":{"date":"2019-10-15","title":"Local Storage"},"fields":{"slug":"/Local_Storage/"},"timeToRead":1,"html":"<p>Sometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the local storage is:</p>\n<pre><code>window.localStorage.setItem('myInput', value)\n</code></pre>\n<p>Example code:</p>\n<pre><code>import React from \"react\";\n\nexport class LocalStorage1 extends React.Component {\n  constructor(props){\n      super(props);\n      this.state={value: \"\"}\n      this.handleChange=this.handleChange.bind(this)\n  }\n  handleChange(e){\n    this.setState({value: e.target.value});\n    window.localStorage.setItem('myInput', e.target.value)\n  }\nrender () {\n    return (\n        &#x3C;div>\n            &#x3C;p>{this.state.value}&#x3C;/p>\n            &#x3C;input type=\"text\" name=\"stats\" onChange={this.handleChange}>&#x3C;/input>\n        &#x3C;/div>\n    )\n}\n}\n</code></pre>\n<blockquote>\n<p>In order to retrieve item from the local storage we use code</p>\n</blockquote>\n<pre><code>window.localStorage.getItem('myInput')\n</code></pre>"}},{"node":{"id":"26313803-8624-5f31-b2b6-e6fc1a0abb2d","excerpt":"Template literal In JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be…","rawMarkdownBody":"\r\n**Template literal**\r\n\r\nIn JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be interpreted as a string\r\n\r\n```\r\n<p>You clicked {this.state.count} times</p>\r\n```\r\n\r\nWhen we are in JS land, we need to explicitly say that a variable should be interpreted as a string by adding $ in front of the curly bracket\r\n\r\n```\r\ncomponentDidMount() { document.title = `You clicked ${this.state.count} times`; }\r\n```","frontmatter":{"date":"2019-10-14","title":"Writing strings in JS and JSX"},"fields":{"slug":"/Writing_strings_in_JS_and_JSX/"},"timeToRead":1,"html":"<p><strong>Template literal</strong></p>\n<p>In JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be interpreted as a string</p>\n<pre><code>&#x3C;p>You clicked {this.state.count} times&#x3C;/p>\n</code></pre>\n<p>When we are in JS land, we need to explicitly say that a variable should be interpreted as a string by adding $ in front of the curly bracket</p>\n<pre><code>componentDidMount() { document.title = `You clicked ${this.state.count} times`; }\n</code></pre>"}},{"node":{"id":"22b7f20a-bd6f-5d49-a069-fab12398b603","excerpt":"We cant comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this: It will not work. We need to…","rawMarkdownBody":"\r\nWe cant comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this:\r\n\r\n``` \r\n/*<p>\r\n   <code>Welcome</code> to my page.\r\n  </p>*/\r\n\r\n ```\r\n\r\nIt will not work. We need to wrap the p tag in curly brackets.\r\n\r\n```\r\n{/*\r\n  <p>\r\n   <code>Welcome</code> to my page.\r\n  </p>*/}\r\n```\r\nNow we can finally comment out stuff :) Happy commenting! \r\nSPAM SPREE IS ON!","frontmatter":{"date":"2019-10-13","title":"Comment Me Out"},"fields":{"slug":"/Comment_Me_Out/"},"timeToRead":1,"html":"<p>We cant comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this:</p>\n<pre><code>/*&#x3C;p>\n   &#x3C;code>Welcome&#x3C;/code> to my page.\n  &#x3C;/p>*/\n</code></pre>\n<p>It will not work. We need to wrap the p tag in curly brackets.</p>\n<pre><code>{/*\n  &#x3C;p>\n   &#x3C;code>Welcome&#x3C;/code> to my page.\n  &#x3C;/p>*/}\n</code></pre>\n<p>Now we can finally comment out stuff :) Happy commenting!\nSPAM SPREE IS ON!</p>"}},{"node":{"id":"9f8de051-0dab-5327-8d70-ae03ebdba193","excerpt":"At first let us take a look at what React Bootstrap is and how it differs from Bootstrap: React bootstrap provides components like Row, Col…","rawMarkdownBody":"\r\nAt first let us take a look at what React Bootstrap is and how it differs from Bootstrap:\r\n\r\n**React bootstrap** provides components like Row, Col, etc. They aree useful to create a grid layout.\r\n\r\n**Bootstrap** provides CSS for styling your data.\r\n\r\n> Open your command line\r\n\r\n> Go to your project directory and then install React Bootstrap (delivers COMPONENETS like Col, Row) and Bootstrap itself (CSS)\r\n```\r\nnpm install react-bootstrap bootstrap\r\n```\r\n\r\n> As React bootstrap dosnt ship explicitly with CSS we need to import them to our index.js or app.js\r\n```\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n```","frontmatter":{"date":"2019-10-12","title":"React Bootstrap"},"fields":{"slug":"/ReactBootstrap/"},"timeToRead":1,"html":"<p>At first let us take a look at what React Bootstrap is and how it differs from Bootstrap:</p>\n<p><strong>React bootstrap</strong> provides components like Row, Col, etc. They aree useful to create a grid layout.</p>\n<p><strong>Bootstrap</strong> provides CSS for styling your data.</p>\n<blockquote>\n<p>Open your command line</p>\n</blockquote>\n<blockquote>\n<p>Go to your project directory and then install React Bootstrap (delivers COMPONENETS like Col, Row) and Bootstrap itself (CSS)</p>\n</blockquote>\n<pre><code>npm install react-bootstrap bootstrap\n</code></pre>\n<blockquote>\n<p>As React bootstrap dosnt ship explicitly with CSS we need to import them to our index.js or app.js</p>\n</blockquote>\n<pre><code>import 'bootstrap/dist/css/bootstrap.min.css';\n</code></pre>"}},{"node":{"id":"33ae629a-775e-584d-9ae5-ac6e190d3c28","excerpt":"Selectors Selectors enable to select certain html element(s) and apply CSS styles to it. Selectors are how we can select certain html…","rawMarkdownBody":"\r\n**Selectors**\r\n\r\nSelectors enable to select certain html element(s) and apply CSS styles to it. Selectors are how we can select certain html elements. In CSS there are 3 ways how we can select elements\r\n\r\n**A) by tag name** - this scenario will style the teal colour to ALL p tags in the page\r\n\r\nHTML:\r\n```\r\n<p>Hello Universe</p>\r\n```\r\nCSS:\r\n```\r\np {\r\n color: tile;\r\n}\r\n```\r\n**B) by class name** - In case of class names we need to ad period in front of the class name. They are meant to be re-used over many elements.\r\n\r\nHTML:\r\n```\r\n<p class=\"title\">Hello Universe</p>\r\n```\r\nCSS:\r\n```\r\n.title {\r\n font-family: Arial;\r\n}\r\n```\r\n\r\n**C) By id of an element** - Id is completely unique per site. We ned to add hashtag. An ID is meant to style only one element.\r\n\r\n\r\nHTML:\r\n```\r\n<p id=\"large-title\">Hello Universe</p>\r\n```\r\nCSS:\r\n```\r\n#large-title {\r\n font-size: 50px;\r\n}\r\n```\r\n> Precedence of selectors: General rule is that more specific selector will be applied compared to more generic selector. ID selector > Class selector > Tag selector. If we have example below, the red colour will be applied because .header (class selector) is more specific than tag selector. From the above 3 selectors, most specific selector is ID selector.\r\n\r\nHTML:\r\n```\r\n<h1 class=\"headere\">Hi</h1>\r\n```\r\nCSS:\r\n```\r\nh1 {\r\ncolor: blue;\r\n}\r\n\r\n.header {\r\ncolor: red;\r\n}\r\n```\r\n> There is only one way how to over-ride ID selector and namely by <code>!important</code> syntax. This can overrride any CSS styling and should be only used as a last resort (because this one is very hard to override). In the example below, the colour of header will be blue.\r\nHTML:\r\n```\r\n<h1 class=\"headere\">Hi</h1>\r\n```\r\nCSS:\r\n```\r\nh1 {\r\n  color: blue !important;\r\n}\r\n\r\n.header {\r\n  color: red;\r\n}\r\n```\r\n\r\n> Chaining selectors: we are able to chain more selectors and make them even more specific. In the example below, CSS style will be applied to h1 tags but only those which have class name teal.\r\n```\r\nh1.teal {\r\ncolor: teal;\r\n}\r\n```\r\n> Chaining selectors can be also this way:\r\n```\r\n.main p {\r\nfont-family: Arial;\r\n}\r\n```\r\n> If we need to apply same style to multiple selectors, we can simply separate them by comma.\r\nInstead of:\r\n```\r\nh1 {\r\n  font-family: Georgia;\r\n}\r\n\r\n.menu {\r\n  font-family: Georgia;\r\n}\r\n```\r\nWe can write:\r\n```\r\nh1, .menu {\r\nfont-family: Georgia;\r\n}\r\n```\r\n\r\n**Commands**\r\n\r\n> Font styles and families\r\nhttpshttps://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html\r\n\r\nExamples:\r\n> Changing font:\r\n```\r\nh1 {\r\nfont-family: Garamond;\r\n}\r\n```\r\n> General rules about font-families:\r\n\r\nThe font specified in a stylesheet must be installed on a user’s computer in order for that font to display when a user visits the web page. The default typeface for all HTML elements is Times New Roman. It’s a good practice to limit the number of fonts used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision. When the name of a font consists of more than one word, it’s a best practice to enclose the font’s name in quotes. Example:\r\n```\r\nh1 {\r\n  font-family: \"Courier New\";\r\n}\r\n```\r\n> Changing font size:\r\n```\r\np {\r\nfont-size: 18px;\r\n}\r\n```\r\n> Changing bold (thickness or narrowness of the font) using font-weight (it can hold values bold or normal):\r\n```\r\np {\r\nfont-weight: bold;\r\n}\r\n```\r\n\r\n> Aligning text to right, left or center\r\n```\r\nh1 {\r\n  text-align: right;\r\n}\r\n```\r\n> Setting color of text can be done in two ways:\r\n\r\n**A) foreground colour**  for example colour of the text itself, property to do this is called <code>color</code>\r\n\r\n**B) background colour** property using <code>background-color</code>\r\n```\r\nh1 {\r\n  color: red;\r\n  background-color: blue;\r\n}\r\n```\r\n> Change opacity of an element. Accepts values from 0 (0% opacity) to 1 (100%  opacity)\r\n```\r\n.overlay {\r\n  opacity: 0.5;\r\n}\r\n```\r\n> Adding image as a background to an element. URL can be link to exterenal site or file path within the project folder\r\n```\r\n.main-banner {\r\n  background-image: url(\"https://www.example.com/image.jpg\");\r\n}\r\n\r\n.main-banner {\r\n  background-image: url(\"images/mountains.jpg\");\r\n}\r\n```\r\n> Transforming whole text to uppercase\r\n```\r\nh1{\r\ntext-transform: uppercase;\r\n}\r\n```\r\n> Transforming first leter to upper case\r\n```\r\nh3 {\r\ntext-transform: capitalize;\r\n}\r\n```\r\n> Text cursive. Note, this does not mean italics. Cursive only emulates hand-writing\r\n```\r\n.cursive {\r\nfont-family: cursive;\r\n}\r\n```\r\n> The Box model includes the content area’s size (width and height) and the element’s padding, border, and margin. The properties include:\r\n\r\n**Width and height** — specifies the width and height of the content area.\r\n\r\n**Padding** — specifies the amount of space between the content area and the border.\r\n\r\n**Border** — specifies the thickness and style of the border surrounding the content area and padding.\r\n\r\n**Margin** — specifies the amount of space between the border and the outside edge of the element.\r\n\r\n> Width and height\r\n```\r\np {\r\n  height: 80px;\r\n  width: 240px;\r\n}\r\n```\r\n> A border is a line what surrounds an element, like a frame around a painting. Borders can be set with a specific width, style, and color.\r\n\r\n**width** — The thickness of the border. A border’s thickness can be set in pixels or with one of the following keywords: thin, medium, or thick.\r\n\r\n**style** — The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, and solid.\r\n\r\n**color** — The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.\r\n```\r\np {\r\n  border: 3px solid coral;\r\n}\r\n```\r\n> border with rounded corners\r\n```\r\ndiv.container {\r\n  border: 3px solid rgb(22, 77, 100);\r\n  border-radius: 5px;\r\n}\r\n```\r\n> perfect circle border - set the radius equal to height of the box or 100%\r\n```\r\ndiv.container {\r\n  height: 60px;\r\n  width: 60px;\r\n  border: 3px solid rgb(22, 77, 100);\r\n  border-radius: 100%;\r\n}\r\n```\r\n\r\n>Padding: space between content and border. Can have properties:\r\n```\r\npadding-top: 30px;\r\npadding-right: 15px;\r\npadding-bottom: 30px;\r\npadding-left: 15px;\r\n```\r\n\r\n>Padding: In order to have same padding on all four sides use:\r\n```\r\npadding: 10px;\r\n```\r\n\r\n>Padding: In order to specify exactly how much padding there should be on each side of the content in a single declaration. The values go in clock-wise direction: padding on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.\r\n```\r\npadding: 10px 15px 20px 30px;\r\n```\r\n\r\n>Padding: If the top and bottom values for padding will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut. First value defines padding top and bottom to be 10px, padding left and right to be 15px.\r\n```\r\npadding: 10px 15px;\r\n```\r\n\r\n>Padding: Top and Bottom paddings (vertical paddings) **DO NOT** collapse!\r\n\r\n>Padding: Left and Right paddings (horizontal paddings) **DO NOT** collapse! And are always added together.\r\n\r\n>Margin: Space outside of the border. It has following values:\r\n```\r\nmargin-top: 10px;\r\nmargin-right: 15px;\r\nmargin-bottom: 10px;\r\nmargin-left: 30px;\r\n```\r\n\r\n>Margin: If you want to have same margin on all four sides use:\r\n```\r\nmargin: 10px;\r\n```\r\n>Margin: In order to specify exactly how much margin there should be on each side of the content in a single declaration. The values go in clock-wise direction: margin on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.\r\n```\r\nmargin: 10px 15px 20px 30px;\r\n```\r\n\r\n>Margin: If the top and bottom values for margin will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut. First value defines margin top and bottom to be 10px, margin left and right to be 15px.\r\n```\r\nmargin: 10px 15px;\r\n```\r\n\r\n> Margin: Margin property also allows to position an element in the center of another containing element. There are 2 requirements in order to do it:\r\n\r\n**1/** top and bottom margin is defined and then followed by word auto, meaning right and left margin will be done automatically based on the width of the element and the container in which we want to center it\r\n\r\n**2/** width of the element needs to be defined and needs to be smaller than the width of the container where the element resides\r\n\r\n```\r\ndiv {\r\nwidth: 200px\r\nmargin: 0px auto;\r\n}\r\n```\r\n\r\n>Margin: Top and Bottom margin is also called: **Vertical margin**. Left and Right margin is called **Horizontal Margin**\r\n\r\n>Margin: Top and Bottom margin (vertical margins) **COLLAPSE**! The larger of the two vertical margins sets the distance between adjacent elements. For example: if top element has margin bottom of 20px and bottom element margin top of 30px, then the effective distance between these 2 elements is 30px.\r\n\r\n```\r\n#img-one {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n#img-two {\r\n  margin-top: 20px;\r\n}\r\n```\r\n\r\n>Margin: Left and Right margins (horizontal margins) **DO NOT** collapse! And are always added together. If left element has margin right of 10px and right element marin left of 10 px. Then the effective distance of the elements is 20px.\r\n\r\n```\r\n#img-one {\r\n  margin-right: 10px;\r\n}\r\n\r\n#img-two {\r\n  margin-left: 10px;\r\n}\r\n```\r\n\r\n>Minimum width is minimum width the element will shrink to\r\n```\r\nmin-width: 50px;\r\n```\r\n\r\n>Maximum width is maximum width the element will expand to\r\n```\r\nmax-width: 50px;\r\n```\r\n\r\n>Minimum heigth is minimum heigth the element will shrink to\r\n```\r\nmin-heigth: 30px;\r\n```\r\n\r\n>Maximum heigth is maximum heigth the element will expand to\r\n```\r\n>max-heigth: 30px;\r\n```\r\n\r\n>References:\r\nAmazing CSS course for beginners\r\nhttps://www.codecademy.com/courses/learn-css/","frontmatter":{"date":"2019-10-11","title":"CSS"},"fields":{"slug":"/CSS/"},"timeToRead":8,"html":"<p><strong>Selectors</strong></p>\n<p>Selectors enable to select certain html element(s) and apply CSS styles to it. Selectors are how we can select certain html elements. In CSS there are 3 ways how we can select elements</p>\n<p><strong>A) by tag name</strong> - this scenario will style the teal colour to ALL p tags in the page</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p>Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>p {\n color: tile;\n}\n</code></pre>\n<p><strong>B) by class name</strong> - In case of class names we need to ad period in front of the class name. They are meant to be re-used over many elements.</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p class=\"title\">Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.title {\n font-family: Arial;\n}\n</code></pre>\n<p><strong>C) By id of an element</strong> - Id is completely unique per site. We ned to add hashtag. An ID is meant to style only one element.</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p id=\"large-title\">Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>#large-title {\n font-size: 50px;\n}\n</code></pre>\n<blockquote>\n<p>Precedence of selectors: General rule is that more specific selector will be applied compared to more generic selector. ID selector > Class selector > Tag selector. If we have example below, the red colour will be applied because .header (class selector) is more specific than tag selector. From the above 3 selectors, most specific selector is ID selector.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;h1 class=\"headere\">Hi&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\ncolor: blue;\n}\n\n.header {\ncolor: red;\n}\n</code></pre>\n<blockquote>\n<p>There is only one way how to over-ride ID selector and namely by <code>!important</code> syntax. This can overrride any CSS styling and should be only used as a last resort (because this one is very hard to override). In the example below, the colour of header will be blue.\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;h1 class=\"headere\">Hi&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\n  color: blue !important;\n}\n\n.header {\n  color: red;\n}\n</code></pre>\n<blockquote>\n<p>Chaining selectors: we are able to chain more selectors and make them even more specific. In the example below, CSS style will be applied to h1 tags but only those which have class name teal.</p>\n</blockquote>\n<pre><code>h1.teal {\ncolor: teal;\n}\n</code></pre>\n<blockquote>\n<p>Chaining selectors can be also this way:</p>\n</blockquote>\n<pre><code>.main p {\nfont-family: Arial;\n}\n</code></pre>\n<blockquote>\n<p>If we need to apply same style to multiple selectors, we can simply separate them by comma.\nInstead of:</p>\n</blockquote>\n<pre><code>h1 {\n  font-family: Georgia;\n}\n\n.menu {\n  font-family: Georgia;\n}\n</code></pre>\n<p>We can write:</p>\n<pre><code>h1, .menu {\nfont-family: Georgia;\n}\n</code></pre>\n<p><strong>Commands</strong></p>\n<blockquote>\n<p>Font styles and families\nhttps<a href=\"https://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html\">https://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html</a></p>\n</blockquote>\n<p>Examples:</p>\n<blockquote>\n<p>Changing font:</p>\n</blockquote>\n<pre><code>h1 {\nfont-family: Garamond;\n}\n</code></pre>\n<blockquote>\n<p>General rules about font-families:</p>\n</blockquote>\n<p>The font specified in a stylesheet must be installed on a user’s computer in order for that font to display when a user visits the web page. The default typeface for all HTML elements is Times New Roman. It’s a good practice to limit the number of fonts used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision. When the name of a font consists of more than one word, it’s a best practice to enclose the font’s name in quotes. Example:</p>\n<pre><code>h1 {\n  font-family: \"Courier New\";\n}\n</code></pre>\n<blockquote>\n<p>Changing font size:</p>\n</blockquote>\n<pre><code>p {\nfont-size: 18px;\n}\n</code></pre>\n<blockquote>\n<p>Changing bold (thickness or narrowness of the font) using font-weight (it can hold values bold or normal):</p>\n</blockquote>\n<pre><code>p {\nfont-weight: bold;\n}\n</code></pre>\n<blockquote>\n<p>Aligning text to right, left or center</p>\n</blockquote>\n<pre><code>h1 {\n  text-align: right;\n}\n</code></pre>\n<blockquote>\n<p>Setting color of text can be done in two ways:</p>\n</blockquote>\n<p><strong>A) foreground colour</strong>  for example colour of the text itself, property to do this is called <code>color</code></p>\n<p><strong>B) background colour</strong> property using <code>background-color</code></p>\n<pre><code>h1 {\n  color: red;\n  background-color: blue;\n}\n</code></pre>\n<blockquote>\n<p>Change opacity of an element. Accepts values from 0 (0% opacity) to 1 (100%  opacity)</p>\n</blockquote>\n<pre><code>.overlay {\n  opacity: 0.5;\n}\n</code></pre>\n<blockquote>\n<p>Adding image as a background to an element. URL can be link to exterenal site or file path within the project folder</p>\n</blockquote>\n<pre><code>.main-banner {\n  background-image: url(\"https://www.example.com/image.jpg\");\n}\n\n.main-banner {\n  background-image: url(\"images/mountains.jpg\");\n}\n</code></pre>\n<blockquote>\n<p>Transforming whole text to uppercase</p>\n</blockquote>\n<pre><code>h1{\ntext-transform: uppercase;\n}\n</code></pre>\n<blockquote>\n<p>Transforming first leter to upper case</p>\n</blockquote>\n<pre><code>h3 {\ntext-transform: capitalize;\n}\n</code></pre>\n<blockquote>\n<p>Text cursive. Note, this does not mean italics. Cursive only emulates hand-writing</p>\n</blockquote>\n<pre><code>.cursive {\nfont-family: cursive;\n}\n</code></pre>\n<blockquote>\n<p>The Box model includes the content area’s size (width and height) and the element’s padding, border, and margin. The properties include:</p>\n</blockquote>\n<p><strong>Width and height</strong> — specifies the width and height of the content area.</p>\n<p><strong>Padding</strong> — specifies the amount of space between the content area and the border.</p>\n<p><strong>Border</strong> — specifies the thickness and style of the border surrounding the content area and padding.</p>\n<p><strong>Margin</strong> — specifies the amount of space between the border and the outside edge of the element.</p>\n<blockquote>\n<p>Width and height</p>\n</blockquote>\n<pre><code>p {\n  height: 80px;\n  width: 240px;\n}\n</code></pre>\n<blockquote>\n<p>A border is a line what surrounds an element, like a frame around a painting. Borders can be set with a specific width, style, and color.</p>\n</blockquote>\n<p><strong>width</strong> — The thickness of the border. A border’s thickness can be set in pixels or with one of the following keywords: thin, medium, or thick.</p>\n<p><strong>style</strong> — The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, and solid.</p>\n<p><strong>color</strong> — The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.</p>\n<pre><code>p {\n  border: 3px solid coral;\n}\n</code></pre>\n<blockquote>\n<p>border with rounded corners</p>\n</blockquote>\n<pre><code>div.container {\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 5px;\n}\n</code></pre>\n<blockquote>\n<p>perfect circle border - set the radius equal to height of the box or 100%</p>\n</blockquote>\n<pre><code>div.container {\n  height: 60px;\n  width: 60px;\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 100%;\n}\n</code></pre>\n<blockquote>\n<p>Padding: space between content and border. Can have properties:</p>\n</blockquote>\n<pre><code>padding-top: 30px;\npadding-right: 15px;\npadding-bottom: 30px;\npadding-left: 15px;\n</code></pre>\n<blockquote>\n<p>Padding: In order to have same padding on all four sides use:</p>\n</blockquote>\n<pre><code>padding: 10px;\n</code></pre>\n<blockquote>\n<p>Padding: In order to specify exactly how much padding there should be on each side of the content in a single declaration. The values go in clock-wise direction: padding on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.</p>\n</blockquote>\n<pre><code>padding: 10px 15px 20px 30px;\n</code></pre>\n<blockquote>\n<p>Padding: If the top and bottom values for padding will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut. First value defines padding top and bottom to be 10px, padding left and right to be 15px.</p>\n</blockquote>\n<pre><code>padding: 10px 15px;\n</code></pre>\n<blockquote>\n<p>Padding: Top and Bottom paddings (vertical paddings) <strong>DO NOT</strong> collapse!</p>\n</blockquote>\n<blockquote>\n<p>Padding: Left and Right paddings (horizontal paddings) <strong>DO NOT</strong> collapse! And are always added together.</p>\n</blockquote>\n<blockquote>\n<p>Margin: Space outside of the border. It has following values:</p>\n</blockquote>\n<pre><code>margin-top: 10px;\nmargin-right: 15px;\nmargin-bottom: 10px;\nmargin-left: 30px;\n</code></pre>\n<blockquote>\n<p>Margin: If you want to have same margin on all four sides use:</p>\n</blockquote>\n<pre><code>margin: 10px;\n</code></pre>\n<blockquote>\n<p>Margin: In order to specify exactly how much margin there should be on each side of the content in a single declaration. The values go in clock-wise direction: margin on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.</p>\n</blockquote>\n<pre><code>margin: 10px 15px 20px 30px;\n</code></pre>\n<blockquote>\n<p>Margin: If the top and bottom values for margin will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut. First value defines margin top and bottom to be 10px, margin left and right to be 15px.</p>\n</blockquote>\n<pre><code>margin: 10px 15px;\n</code></pre>\n<blockquote>\n<p>Margin: Margin property also allows to position an element in the center of another containing element. There are 2 requirements in order to do it:</p>\n</blockquote>\n<p><strong>1/</strong> top and bottom margin is defined and then followed by word auto, meaning right and left margin will be done automatically based on the width of the element and the container in which we want to center it</p>\n<p><strong>2/</strong> width of the element needs to be defined and needs to be smaller than the width of the container where the element resides</p>\n<pre><code>div {\nwidth: 200px\nmargin: 0px auto;\n}\n</code></pre>\n<blockquote>\n<p>Margin: Top and Bottom margin is also called: <strong>Vertical margin</strong>. Left and Right margin is called <strong>Horizontal Margin</strong></p>\n</blockquote>\n<blockquote>\n<p>Margin: Top and Bottom margin (vertical margins) <strong>COLLAPSE</strong>! The larger of the two vertical margins sets the distance between adjacent elements. For example: if top element has margin bottom of 20px and bottom element margin top of 30px, then the effective distance between these 2 elements is 30px.</p>\n</blockquote>\n<pre><code>#img-one {\n  margin-bottom: 30px;\n}\n\n#img-two {\n  margin-top: 20px;\n}\n</code></pre>\n<blockquote>\n<p>Margin: Left and Right margins (horizontal margins) <strong>DO NOT</strong> collapse! And are always added together. If left element has margin right of 10px and right element marin left of 10 px. Then the effective distance of the elements is 20px.</p>\n</blockquote>\n<pre><code>#img-one {\n  margin-right: 10px;\n}\n\n#img-two {\n  margin-left: 10px;\n}\n</code></pre>\n<blockquote>\n<p>Minimum width is minimum width the element will shrink to</p>\n</blockquote>\n<pre><code>min-width: 50px;\n</code></pre>\n<blockquote>\n<p>Maximum width is maximum width the element will expand to</p>\n</blockquote>\n<pre><code>max-width: 50px;\n</code></pre>\n<blockquote>\n<p>Minimum heigth is minimum heigth the element will shrink to</p>\n</blockquote>\n<pre><code>min-heigth: 30px;\n</code></pre>\n<blockquote>\n<p>Maximum heigth is maximum heigth the element will expand to</p>\n</blockquote>\n<pre><code>>max-heigth: 30px;\n</code></pre>\n<blockquote>\n<p>References:\nAmazing CSS course for beginners\n<a href=\"https://www.codecademy.com/courses/learn-css/\">https://www.codecademy.com/courses/learn-css/</a></p>\n</blockquote>"}},{"node":{"id":"04315871-e4f4-53ce-9d7e-9c0e2f7cc974","excerpt":"We can query images, or content of the website (text) from files in our project folder. Firstly open your command line in Ubuntu and install…","rawMarkdownBody":"\r\n> We can query images, or content of the website (text) from files in our project folder.\r\n\r\n> Firstly open your command line in Ubuntu and install the gatsby package called source **filesystem** plugin. The filesystem source plugin lets you query data**ABOUT** files (note: but it does NOT allow you to query data inside files, for that we have another plugin called transform)\r\n```\r\nnpm install --save gatsby-source-filesystem\r\n```\r\n> Secondly open the gatsby-config.js and add this plugin there:\r\n```\r\nplugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n```\r\n> Save and restart gatsby development environment\r\n```\r\ngatsby develop\r\n```\r\n> Two new elements will be added there: files and allFile\r\n```\r\nhttp://localhost:8000/___graphql\r\n```\r\n> Select some items for our query. For example <code>base</code> is the name of the file, <code>prettySize</code> is the size of the file, <code>relativeDirectory</code> is a folder in which file resides, etc\r\n\r\n> Lets use this data and print it to console:\r\n```\r\nimport React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nexport default ({ data }) => {\r\n  console.log(data)\r\n  return (\r\n    <Layout>\r\n      <div>Hello world</div>\r\n    </Layout>\r\n  )\r\n}\r\nexport const query = graphql`\r\n  query {\r\n    allFile {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          prettySize\r\n          extension\r\n          birthTime(fromNow: true)\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n```\r\n\r\n> Lets make our data beautiful in a table:\r\n```\r\nimport React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nexport default ({ data }) => {\r\n  console.log(data)\r\n  return (\r\n    <Layout>\r\n      <div>\r\n        <h1>My Site's Files</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>relativePath</th>\r\n              <th>prettySize</th>\r\n              <th>extension</th>\r\n              <th>birthTime</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.allFile.edges.map(({ node }, index) => (\r\n              <tr key={index}>\r\n                <td>{node.relativePath}</td>\r\n                <td>{node.prettySize}</td>\r\n                <td>{node.extension}</td>\r\n                <td>{node.birthTime}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\nexport const query = graphql`\r\n  query {\r\n    allFile {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          prettySize\r\n          extension\r\n          birthTime(fromNow: true)\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n```\r\n> ```<table>``` tag creates a table\r\n\r\n\r\n> ```<thread>``` tag is used to group header content in an HTML table. The ```<thead>``` element is used in conjunction with the ```<tbody>``` and ```<tfoot>``` elements to specify each part of a table (header, body, footer). Browsers can use these elements to enable scrolling of the table body independently of the header and footer. Also, when printing a large table that spans multiple pages, these elements can enable the table header and footer to be printed at the top and bottom of each page. The ```<thead>``` tag must be used in the following context: As a child of a ```<table>``` element, after any ```<caption>```, and ```<colgroup>``` elements, and before any ```<tbody>```, ```<tfoot>```, and ```<tr>``` elements.\r\n\r\n> ```<tr>``` tag means table row\r\n\r\n> ```<th>``` tag means one column in a table header\r\n\r\n> ```<td>``` tag means one column in the table data\r\n\r\n> for each tr we will take all available data into columns\r\n\r\n> How does this part of the code work?\r\n```\r\n{data.allFile.edges.map(({ node }, index) => (\r\n              <tr key={index}>\r\n                <td>{node.base}</td>\r\n                <td>{node.prettySize}</td>\r\n                <td>{node.relativeDirectory}</td>\r\n                <td>{node.name}</td>\r\n              </tr>\r\n            ))}\r\n```\r\n> <code>Map</code> is a method which can be called on an array. When we query data, you can see on the right column on GraphiQL how our data will look like: For example:\r\n```\r\n{\r\n  \"data\": {\r\n    \"allFile\": {\r\n      \"edges\": [\r\n        {\r\n          \"node\": {\r\n            \"id\": \"3d02d57a-a1ff-58a6-a75b-41d2d1f5de2f\",\r\n            \"base\": \"container.js\",\r\n            \"prettySize\": \"177 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"container\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"bfd68830-b23b-5750-9e97-fb73e577ebc8\",\r\n            \"base\": \"header.js\",\r\n            \"prettySize\": \"141 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"header\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"5110e7f0-f000-5a81-b65f-2d655e4937b4\",\r\n            \"base\": \"container.module.css\",\r\n            \"prettySize\": \"55 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"container.module\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"09ae19a0-accc-5c2a-9caa-ea806602b54f\",\r\n            \"base\": \"layout.js\",\r\n            \"prettySize\": \"1.25 kB\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"layout\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"e0c2ac65-ada6-5773-a74d-6129e1de7f7b\",\r\n            \"base\": \"about-css-modules.js\",\r\n            \"prettySize\": \"1.03 kB\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about-css-modules\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"95b910e6-a707-512e-b6cd-09e0f60fd8cb\",\r\n            \"base\": \"about-css-modules.module.css\",\r\n            \"prettySize\": \"334 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about-css-modules.module\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"d0e66873-11b2-5ecf-9971-c397b39412a8\",\r\n            \"base\": \"about.js\",\r\n            \"prettySize\": \"484 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"391e78c8-e96e-5412-a4c4-02d3074c2bc1\",\r\n            \"base\": \"contact.js\",\r\n            \"prettySize\": \"232 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"contact\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"689eea2c-7d70-53e6-8078-26e28cd337ce\",\r\n            \"base\": \"index.js\",\r\n            \"prettySize\": \"358 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"index\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"318cd83a-3107-5cbb-b65e-b2eb0fb3a428\",\r\n            \"base\": \"global.css\",\r\n            \"prettySize\": \"49 B\",\r\n            \"relativeDirectory\": \"styles\",\r\n            \"name\": \"global\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"34912156-9592-5c52-aac4-7e851d124baa\",\r\n            \"base\": \"typography.js\",\r\n            \"prettySize\": \"226 B\",\r\n            \"relativeDirectory\": \"utils\",\r\n            \"name\": \"typography\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\nNotice how <code>data.allFile.edges</code> returns an ARRAY of OBJECTS!! Which means we can use array method called map on it. Map works in a way that it iterated through every single element of the array and performs a certain function in it. It doesn't change original array, but creates a new array on which the function is performed.  One small example is here:\r\n```\r\nvar array1 = [1, 4, 9, 16];\r\n// pass a function to map\r\nconst map1 = array1.map(x => x * 2);\r\n\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\n> x is an element of the array which we currently iterate through\r\n\r\n> Documentation of Map is here: \r\n\r\n```\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\r\n```\r\n> Notice how the syntax looks:\r\n```\r\nvar new_array = arr.map(function callback(currentValue[, index[, array]]) {\r\n    // Return element for new_array\r\n}[, thisArg])\r\n```\r\n> This means that when using .map method we can use the current object we are on, but also its index!! Which mean index 0,1,2, etc\r\n\r\n> In our .map method we have a function which takes 2 arguments:\r\n```\r\n({ node }, index)\r\n```\r\n{ node } is an actual object which resides under data.allFile.edges\r\nIt should actually be called node, otherwise we will have an error.\r\nindex is the index of the element in our array on which we are currently itterating.\r\n\r\n> For each element in our array, we will create a ```<tr>``` tag which will have a unique property key which will be equal to the index of that element in the array\r\n```<tr key={index}>\r\n...\r\n</tr> \r\n```\r\n> Then this table row (tr) will create 4 columns ```<td>``` Each of ```<td>``` tags will access the element of array, which is in fact an object, where we retrieve values for example: node.base\r\n\r\n\r\n> In React each array element over which we will iterate needs a unique key property. \r\n\r\n> Each time you iterate over an array you have to set the key prop to each of the resulting DOM element as React needs it to optimize the re-rendering. \r\n\r\n> React for example will detect duplicates and only renders the first node with this key. Without key={index} there will be an error in console that each child in the list should have a unique key property. More reading:\r\n```\r\nhttps://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js\r\nhttps://stackoverflow.com/questions/37651660/react-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop?rq=1\r\n```\r\n> The filesystem source plugin lets you query data ABOUT files but what if you want to query data INSIDE files? To make this possible, Gatsby supports transformer plugins which take raw content from source plugins and transform it into something more usable. Example: markdown files .md\r\n\r\n\r\n> create a new markdow file under your pages folder\r\n```\r\nblog_post.md\r\n```\r\n\r\n> look at the GrphiQL and refresh the query, you will see the new .md file in there\r\n\r\n\r\n> First install transformer plugin\r\n```\r\nnpm install --save gatsby-transformer-remark\r\n```\r\n\r\n> Add plugin to gatsby config\r\n```\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: `Pandas Eating Lots`,\r\n  },\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n    `gatsby-transformer-remark`,\r\n    `gatsby-plugin-emotion`,\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n> Restart your development environment with\r\n```\r\ngatsby develop\r\n```\r\n> In GraphiQL we will see the new item allMarkdownRemark","frontmatter":{"date":"2019-10-10","title":"Querying data from project files"},"fields":{"slug":"/Querying_data_from_project_files/"},"timeToRead":7,"html":"<blockquote>\n<p>We can query images, or content of the website (text) from files in our project folder.</p>\n</blockquote>\n<blockquote>\n<p>Firstly open your command line in Ubuntu and install the gatsby package called source <strong>filesystem</strong> plugin. The filesystem source plugin lets you query data<strong>ABOUT</strong> files (note: but it does NOT allow you to query data inside files, for that we have another plugin called transform)</p>\n</blockquote>\n<pre><code>npm install --save gatsby-source-filesystem\n</code></pre>\n<blockquote>\n<p>Secondly open the gatsby-config.js and add this plugin there:</p>\n</blockquote>\n<pre><code>plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n</code></pre>\n<blockquote>\n<p>Save and restart gatsby development environment</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>Two new elements will be added there: files and allFile</p>\n</blockquote>\n<pre><code>http://localhost:8000/___graphql\n</code></pre>\n<blockquote>\n<p>Select some items for our query. For example <code>base</code> is the name of the file, <code>prettySize</code> is the size of the file, <code>relativeDirectory</code> is a folder in which file resides, etc</p>\n</blockquote>\n<blockquote>\n<p>Lets use this data and print it to console:</p>\n</blockquote>\n<pre><code>import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nexport default ({ data }) => {\n  console.log(data)\n  return (\n    &#x3C;Layout>\n      &#x3C;div>Hello world&#x3C;/div>\n    &#x3C;/Layout>\n  )\n}\nexport const query = graphql`\n  query {\n    allFile {\n      edges {\n        node {\n          relativePath\n          prettySize\n          extension\n          birthTime(fromNow: true)\n        }\n      }\n    }\n  }\n`\n</code></pre>\n<blockquote>\n<p>Lets make our data beautiful in a table:</p>\n</blockquote>\n<pre><code>import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nexport default ({ data }) => {\n  console.log(data)\n  return (\n    &#x3C;Layout>\n      &#x3C;div>\n        &#x3C;h1>My Site's Files&#x3C;/h1>\n        &#x3C;table>\n          &#x3C;thead>\n            &#x3C;tr>\n              &#x3C;th>relativePath&#x3C;/th>\n              &#x3C;th>prettySize&#x3C;/th>\n              &#x3C;th>extension&#x3C;/th>\n              &#x3C;th>birthTime&#x3C;/th>\n            &#x3C;/tr>\n          &#x3C;/thead>\n          &#x3C;tbody>\n            {data.allFile.edges.map(({ node }, index) => (\n              &#x3C;tr key={index}>\n                &#x3C;td>{node.relativePath}&#x3C;/td>\n                &#x3C;td>{node.prettySize}&#x3C;/td>\n                &#x3C;td>{node.extension}&#x3C;/td>\n                &#x3C;td>{node.birthTime}&#x3C;/td>\n              &#x3C;/tr>\n            ))}\n          &#x3C;/tbody>\n        &#x3C;/table>\n      &#x3C;/div>\n    &#x3C;/Layout>\n  )\n}\nexport const query = graphql`\n  query {\n    allFile {\n      edges {\n        node {\n          relativePath\n          prettySize\n          extension\n          birthTime(fromNow: true)\n        }\n      }\n    }\n  }\n`\n</code></pre>\n<blockquote>\n<p><code>&#x3C;table></code> tag creates a table</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;thread></code> tag is used to group header content in an HTML table. The <code>&#x3C;thead></code> element is used in conjunction with the <code>&#x3C;tbody></code> and <code>&#x3C;tfoot></code> elements to specify each part of a table (header, body, footer). Browsers can use these elements to enable scrolling of the table body independently of the header and footer. Also, when printing a large table that spans multiple pages, these elements can enable the table header and footer to be printed at the top and bottom of each page. The <code>&#x3C;thead></code> tag must be used in the following context: As a child of a <code>&#x3C;table></code> element, after any <code>&#x3C;caption></code>, and <code>&#x3C;colgroup></code> elements, and before any <code>&#x3C;tbody></code>, <code>&#x3C;tfoot></code>, and <code>&#x3C;tr></code> elements.</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;tr></code> tag means table row</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;th></code> tag means one column in a table header</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;td></code> tag means one column in the table data</p>\n</blockquote>\n<blockquote>\n<p>for each tr we will take all available data into columns</p>\n</blockquote>\n<blockquote>\n<p>How does this part of the code work?</p>\n</blockquote>\n<pre><code>{data.allFile.edges.map(({ node }, index) => (\n              &#x3C;tr key={index}>\n                &#x3C;td>{node.base}&#x3C;/td>\n                &#x3C;td>{node.prettySize}&#x3C;/td>\n                &#x3C;td>{node.relativeDirectory}&#x3C;/td>\n                &#x3C;td>{node.name}&#x3C;/td>\n              &#x3C;/tr>\n            ))}\n</code></pre>\n<blockquote>\n<p><code>Map</code> is a method which can be called on an array. When we query data, you can see on the right column on GraphiQL how our data will look like: For example:</p>\n</blockquote>\n<pre><code>{\n  \"data\": {\n    \"allFile\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"3d02d57a-a1ff-58a6-a75b-41d2d1f5de2f\",\n            \"base\": \"container.js\",\n            \"prettySize\": \"177 B\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"container\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"bfd68830-b23b-5750-9e97-fb73e577ebc8\",\n            \"base\": \"header.js\",\n            \"prettySize\": \"141 B\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"header\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"5110e7f0-f000-5a81-b65f-2d655e4937b4\",\n            \"base\": \"container.module.css\",\n            \"prettySize\": \"55 B\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"container.module\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"09ae19a0-accc-5c2a-9caa-ea806602b54f\",\n            \"base\": \"layout.js\",\n            \"prettySize\": \"1.25 kB\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"layout\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"e0c2ac65-ada6-5773-a74d-6129e1de7f7b\",\n            \"base\": \"about-css-modules.js\",\n            \"prettySize\": \"1.03 kB\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"about-css-modules\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"95b910e6-a707-512e-b6cd-09e0f60fd8cb\",\n            \"base\": \"about-css-modules.module.css\",\n            \"prettySize\": \"334 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"about-css-modules.module\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"d0e66873-11b2-5ecf-9971-c397b39412a8\",\n            \"base\": \"about.js\",\n            \"prettySize\": \"484 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"about\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"391e78c8-e96e-5412-a4c4-02d3074c2bc1\",\n            \"base\": \"contact.js\",\n            \"prettySize\": \"232 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"contact\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"689eea2c-7d70-53e6-8078-26e28cd337ce\",\n            \"base\": \"index.js\",\n            \"prettySize\": \"358 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"index\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"318cd83a-3107-5cbb-b65e-b2eb0fb3a428\",\n            \"base\": \"global.css\",\n            \"prettySize\": \"49 B\",\n            \"relativeDirectory\": \"styles\",\n            \"name\": \"global\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"34912156-9592-5c52-aac4-7e851d124baa\",\n            \"base\": \"typography.js\",\n            \"prettySize\": \"226 B\",\n            \"relativeDirectory\": \"utils\",\n            \"name\": \"typography\"\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<p>Notice how <code>data.allFile.edges</code> returns an ARRAY of OBJECTS!! Which means we can use array method called map on it. Map works in a way that it iterated through every single element of the array and performs a certain function in it. It doesn't change original array, but creates a new array on which the function is performed.  One small example is here:</p>\n<pre><code>var array1 = [1, 4, 9, 16];\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<blockquote>\n<p>x is an element of the array which we currently iterate through</p>\n</blockquote>\n<blockquote>\n<p>Documentation of Map is here: </p>\n</blockquote>\n<pre><code>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n</code></pre>\n<blockquote>\n<p>Notice how the syntax looks:</p>\n</blockquote>\n<pre><code>var new_array = arr.map(function callback(currentValue[, index[, array]]) {\n    // Return element for new_array\n}[, thisArg])\n</code></pre>\n<blockquote>\n<p>This means that when using .map method we can use the current object we are on, but also its index!! Which mean index 0,1,2, etc</p>\n</blockquote>\n<blockquote>\n<p>In our .map method we have a function which takes 2 arguments:</p>\n</blockquote>\n<pre><code>({ node }, index)\n</code></pre>\n<p>{ node } is an actual object which resides under data.allFile.edges\nIt should actually be called node, otherwise we will have an error.\nindex is the index of the element in our array on which we are currently itterating.</p>\n<blockquote>\n<p>For each element in our array, we will create a <code>&#x3C;tr></code> tag which will have a unique property key which will be equal to the index of that element in the array</p>\n</blockquote>\n<pre><code class=\"language-<tr\" data-meta=\"key={index}>\">...\n&#x3C;/tr> \n</code></pre>\n<blockquote>\n<p>Then this table row (tr) will create 4 columns <code>&#x3C;td></code> Each of <code>&#x3C;td></code> tags will access the element of array, which is in fact an object, where we retrieve values for example: node.base</p>\n</blockquote>\n<blockquote>\n<p>In React each array element over which we will iterate needs a unique key property. </p>\n</blockquote>\n<blockquote>\n<p>Each time you iterate over an array you have to set the key prop to each of the resulting DOM element as React needs it to optimize the re-rendering. </p>\n</blockquote>\n<blockquote>\n<p>React for example will detect duplicates and only renders the first node with this key. Without key={index} there will be an error in console that each child in the list should have a unique key property. More reading:</p>\n</blockquote>\n<pre><code>https://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js\nhttps://stackoverflow.com/questions/37651660/react-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop?rq=1\n</code></pre>\n<blockquote>\n<p>The filesystem source plugin lets you query data ABOUT files but what if you want to query data INSIDE files? To make this possible, Gatsby supports transformer plugins which take raw content from source plugins and transform it into something more usable. Example: markdown files .md</p>\n</blockquote>\n<blockquote>\n<p>create a new markdow file under your pages folder</p>\n</blockquote>\n<pre><code>blog_post.md\n</code></pre>\n<blockquote>\n<p>look at the GrphiQL and refresh the query, you will see the new .md file in there</p>\n</blockquote>\n<blockquote>\n<p>First install transformer plugin</p>\n</blockquote>\n<pre><code>npm install --save gatsby-transformer-remark\n</code></pre>\n<blockquote>\n<p>Add plugin to gatsby config</p>\n</blockquote>\n<pre><code>module.exports = {\n  siteMetadata: {\n    title: `Pandas Eating Lots`,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n    `gatsby-transformer-remark`,\n    `gatsby-plugin-emotion`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n}\n</code></pre>\n<blockquote>\n<p>Restart your development environment with</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>In GraphiQL we will see the new item allMarkdownRemark</p>\n</blockquote>"}},{"node":{"id":"4bdc078e-ea4f-5ace-89c2-c9b298236977","excerpt":"GraphQL is a technology for querying data and was developed by Facebook to allow react commponents to query data. QL means query language…","rawMarkdownBody":"\r\nGraphQL is a technology for querying data and was developed by Facebook to allow react commponents to query data. QL means query language and is similar to SQL.\r\n\r\nWhy do we prefer to query data anyway? Imagine you have yout site title (\"My page\") on various subpages, lets say on 20 subpages. Imagine you realize that this title is rather lame and you want to change it to somethis cooler (\"Welcome to my awesome page!\"). Then you have to go through all your code, every single page and change the hard typed title 20 times. However, it would be better if we could store our great title in some safe place from where each subpage would retrieve it. Then you would only need to change the title of the page once and everything would be updated automatically. Isnt it totally cool? Automation, saving time, error-prone. Let`s use awesome technologies and their potential to make our lives easier.\r\n\r\nThere are several GraphQL query types:\r\n> A) Page queries, which can only be done my PAGES (not by standalone components)\r\n\r\n>B) Non-pages components queries (such as layout.js)\r\n\r\n\r\n**PAGE QUERIES:**\r\n\r\n> One way to query data is to use page queries from site Metadata. This option is only available for pages (it is not available for non-page compoenents like layout.js) In order to do so, open the gatsby-config file and paste this into it:\r\n\r\n```\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: \"Coding Addventures with Addania\",\r\n  },\r\n```\r\n> then go to you About page and add following code:\r\n```\r\nimport React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nexport default ( {data}) => (  \r\n    <h1>About {data.site.siteMetadata.title}</h1>\r\n    <p>Such wow. Very React.</p>\r\n)\r\nexport const query = graphql`\r\nquery {\r\n  site {\r\n    siteMetadata{\r\n      title\r\n    }\r\n  }\r\n}\r\n`\r\n```\r\n\r\n> Please not that a constant query is outside of the componenet and by convention at the end of the file.\r\n\r\n\r\n**NON-PAGE COMPONENT QUERIES**\r\n> For standalone components like Header, Layout which are not pages, there is another way how to query data. We will use a hook called useStatisQuery. This hook was introduced to Gatsby that allow non-pages components also to retrieve data\r\n\r\n> Navigate to layout.js file\r\n\r\n> Import useStaticQuery and graphql from gatsy\r\n```\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\n```\r\n\r\n> function component needs to have {} brackets after =>\r\n```\r\nexport default ({ children }) => {\r\n...\r\n}\r\n```\r\n> create a function component which will have this constant before return function\r\n```\r\nconst data = useStaticQuery (\r\n  graphql`\r\n  query {\r\n    site {\r\n      siteMetadata{\r\n        title\r\n      }\r\n    }\r\n  }\r\n  `\r\n)\r\n```\r\n> Use query inside of the return function\r\n```\r\n<h3>{data.site.siteMetadata.title}</h3>\r\n```\r\n\r\n> Entire example layout.js is here:\r\n```\r\nimport React from \"react\";\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\n\r\nconst ListLink = props => (\r\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\r\n    <Link to={props.to}>{props.children}</Link>\r\n  </li>\r\n)\r\n\r\nexport default ({ children }) => {\r\nconst data = useStaticQuery (\r\n  graphql`\r\n  query {\r\n    site {\r\n      siteMetadata{\r\n        title\r\n      }\r\n    }\r\n  }\r\n  `\r\n)\r\nreturn (\r\n  <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\r\n    <header style={{ marginBottom: `1.5rem` }}>\r\n      <Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\r\n        <h3 style={{ display: `inline` }}>Addania</h3>\r\n      </Link>\r\n      <ul style={{ listStyle: `none`, float: `right` }}>\r\n        <ListLink to=\"/\">Home</ListLink>\r\n        <ListLink to=\"/about/\">About</ListLink>\r\n        <ListLink to=\"/contact/\">Contact</ListLink>\r\n      </ul>\r\n      <hr />\r\n    </header>\r\n    {children}\r\n    <h3>{data.site.siteMetadata.title}</h3>\r\n    <hr />\r\n    <footer style={{ marginBottom: `1.5rem` }}>\r\n        <p style={{ display: `inline`, align: \"right\" }}>2019 Design and Development by Addania</p>\r\n    </footer>\r\n  </div>\r\n)\r\n}\r\n```\r\n> In order to make sure to write the queries correctly we use tool called GraphiQL. It is available by default when our local development is running (gastby develop) and is accessible here:\r\n```\r\nhttp://localhost:8000/___graphql\r\n```\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-10-09","title":"Querying data with GraphQL"},"fields":{"slug":"/Querying_data_with_GraphQL/"},"timeToRead":3,"html":"<p>GraphQL is a technology for querying data and was developed by Facebook to allow react commponents to query data. QL means query language and is similar to SQL.</p>\n<p>Why do we prefer to query data anyway? Imagine you have yout site title (\"My page\") on various subpages, lets say on 20 subpages. Imagine you realize that this title is rather lame and you want to change it to somethis cooler (\"Welcome to my awesome page!\"). Then you have to go through all your code, every single page and change the hard typed title 20 times. However, it would be better if we could store our great title in some safe place from where each subpage would retrieve it. Then you would only need to change the title of the page once and everything would be updated automatically. Isnt it totally cool? Automation, saving time, error-prone. Let`s use awesome technologies and their potential to make our lives easier.</p>\n<p>There are several GraphQL query types:</p>\n<blockquote>\n<p>A) Page queries, which can only be done my PAGES (not by standalone components)</p>\n</blockquote>\n<blockquote>\n<p>B) Non-pages components queries (such as layout.js)</p>\n</blockquote>\n<p><strong>PAGE QUERIES:</strong></p>\n<blockquote>\n<p>One way to query data is to use page queries from site Metadata. This option is only available for pages (it is not available for non-page compoenents like layout.js) In order to do so, open the gatsby-config file and paste this into it:</p>\n</blockquote>\n<pre><code>module.exports = {\n  siteMetadata: {\n    title: \"Coding Addventures with Addania\",\n  },\n</code></pre>\n<blockquote>\n<p>then go to you About page and add following code:</p>\n</blockquote>\n<pre><code>import React from \"react\";\nimport { graphql } from \"gatsby\";\nexport default ( {data}) => (  \n    &#x3C;h1>About {data.site.siteMetadata.title}&#x3C;/h1>\n    &#x3C;p>Such wow. Very React.&#x3C;/p>\n)\nexport const query = graphql`\nquery {\n  site {\n    siteMetadata{\n      title\n    }\n  }\n}\n`\n</code></pre>\n<blockquote>\n<p>Please not that a constant query is outside of the componenet and by convention at the end of the file.</p>\n</blockquote>\n<p><strong>NON-PAGE COMPONENT QUERIES</strong></p>\n<blockquote>\n<p>For standalone components like Header, Layout which are not pages, there is another way how to query data. We will use a hook called useStatisQuery. This hook was introduced to Gatsby that allow non-pages components also to retrieve data</p>\n</blockquote>\n<blockquote>\n<p>Navigate to layout.js file</p>\n</blockquote>\n<blockquote>\n<p>Import useStaticQuery and graphql from gatsy</p>\n</blockquote>\n<pre><code>import { Link, useStaticQuery, graphql } from \"gatsby\";\n</code></pre>\n<blockquote>\n<p>function component needs to have {} brackets after =></p>\n</blockquote>\n<pre><code>export default ({ children }) => {\n...\n}\n</code></pre>\n<blockquote>\n<p>create a function component which will have this constant before return function</p>\n</blockquote>\n<pre><code>const data = useStaticQuery (\n  graphql`\n  query {\n    site {\n      siteMetadata{\n        title\n      }\n    }\n  }\n  `\n)\n</code></pre>\n<blockquote>\n<p>Use query inside of the return function</p>\n</blockquote>\n<pre><code>&#x3C;h3>{data.site.siteMetadata.title}&#x3C;/h3>\n</code></pre>\n<blockquote>\n<p>Entire example layout.js is here:</p>\n</blockquote>\n<pre><code>import React from \"react\";\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\n\nconst ListLink = props => (\n  &#x3C;li style={{ display: `inline-block`, marginRight: `1rem` }}>\n    &#x3C;Link to={props.to}>{props.children}&#x3C;/Link>\n  &#x3C;/li>\n)\n\nexport default ({ children }) => {\nconst data = useStaticQuery (\n  graphql`\n  query {\n    site {\n      siteMetadata{\n        title\n      }\n    }\n  }\n  `\n)\nreturn (\n  &#x3C;div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\n    &#x3C;header style={{ marginBottom: `1.5rem` }}>\n      &#x3C;Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\n        &#x3C;h3 style={{ display: `inline` }}>Addania&#x3C;/h3>\n      &#x3C;/Link>\n      &#x3C;ul style={{ listStyle: `none`, float: `right` }}>\n        &#x3C;ListLink to=\"/\">Home&#x3C;/ListLink>\n        &#x3C;ListLink to=\"/about/\">About&#x3C;/ListLink>\n        &#x3C;ListLink to=\"/contact/\">Contact&#x3C;/ListLink>\n      &#x3C;/ul>\n      &#x3C;hr />\n    &#x3C;/header>\n    {children}\n    &#x3C;h3>{data.site.siteMetadata.title}&#x3C;/h3>\n    &#x3C;hr />\n    &#x3C;footer style={{ marginBottom: `1.5rem` }}>\n        &#x3C;p style={{ display: `inline`, align: \"right\" }}>2019 Design and Development by Addania&#x3C;/p>\n    &#x3C;/footer>\n  &#x3C;/div>\n)\n}\n</code></pre>\n<blockquote>\n<p>In order to make sure to write the queries correctly we use tool called GraphiQL. It is available by default when our local development is running (gastby develop) and is accessible here:</p>\n</blockquote>\n<pre><code>http://localhost:8000/___graphql\n</code></pre>"}},{"node":{"id":"8cdfea2b-94f0-5bf9-87e3-90edd1b2ee21","excerpt":"In order to use custom fonts you need to install a package (plug in) and then restart the local host Then you need to open gatsby-config.js…","rawMarkdownBody":"\r\n> In order to use custom fonts you need to install a package (plug in) and then restart the local host\r\n```\r\nnpm install --save gatsby-plugin-typography react-typography typography typography-theme-fairy-gates\r\n```\r\n> Then you need to open gatsby-config.js file. This is the file where we need to add plugins or site configuration. In order to use typography plugin we need to change this:\r\n```\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\n> Create new folder under src called \"utils\"\r\n\r\n> Add a new js file called: typography.js\r\n\r\n> Add this code to the file:\r\n```\r\nimport Typography from \"typography\"\r\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\r\nconst typography = new Typography(fairyGateTheme)\r\nexport const { scale, rhythm, options } = typography\r\nexport default typography\r\n```\r\n\r\n> Start development server\r\n```\r\ngatsby develop\r\n```\r\n\r\n","frontmatter":{"date":"2019-10-08","title":"Gatsby fonts"},"fields":{"slug":"/Gatsby_fonts/"},"timeToRead":1,"html":"<blockquote>\n<p>In order to use custom fonts you need to install a package (plug in) and then restart the local host</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-typography react-typography typography typography-theme-fairy-gates\n</code></pre>\n<blockquote>\n<p>Then you need to open gatsby-config.js file. This is the file where we need to add plugins or site configuration. In order to use typography plugin we need to change this:</p>\n</blockquote>\n<pre><code>module.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n}\n</code></pre>\n<blockquote>\n<p>Create new folder under src called \"utils\"</p>\n</blockquote>\n<blockquote>\n<p>Add a new js file called: typography.js</p>\n</blockquote>\n<blockquote>\n<p>Add this code to the file:</p>\n</blockquote>\n<pre><code>import Typography from \"typography\"\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\nconst typography = new Typography(fairyGateTheme)\nexport const { scale, rhythm, options } = typography\nexport default typography\n</code></pre>\n<blockquote>\n<p>Start development server</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>"}},{"node":{"id":"b4442c35-48e8-55ac-a56a-f6eba3e8934d","excerpt":"Description Hooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function…","rawMarkdownBody":"\r\n> Description\r\n\r\nHooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function components with hooks rather than classes with state. Class componnets might be deprecated in future. Advantage of hooks is that we can create our own hooks and logic behind them. \r\n\r\n>Examples of hooks:\r\n\r\n**useState** - allows function component to have state\r\n\r\n**useEffect** - allows function component to use a certain function any time component renders, it is equivalent to lifecycles of class components\r\n\r\n> Importing\r\n\r\nEach hook needs to be imported from react.\r\n\r\nExample 1:\r\n```\r\nimport React from \"react\";\r\nimport {useState} from \"react\";\r\n```\r\n\r\nExample 2:\r\n```\r\nimport React, {useState} from \"react\";\r\n```\r\n","frontmatter":{"date":"2019-10-07","title":"Hooks"},"fields":{"slug":"/Hooks/"},"timeToRead":1,"html":"<blockquote>\n<p>Description</p>\n</blockquote>\n<p>Hooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function components with hooks rather than classes with state. Class componnets might be deprecated in future. Advantage of hooks is that we can create our own hooks and logic behind them. </p>\n<blockquote>\n<p>Examples of hooks:</p>\n</blockquote>\n<p><strong>useState</strong> - allows function component to have state</p>\n<p><strong>useEffect</strong> - allows function component to use a certain function any time component renders, it is equivalent to lifecycles of class components</p>\n<blockquote>\n<p>Importing</p>\n</blockquote>\n<p>Each hook needs to be imported from react.</p>\n<p>Example 1:</p>\n<pre><code>import React from \"react\";\nimport {useState} from \"react\";\n</code></pre>\n<p>Example 2:</p>\n<pre><code>import React, {useState} from \"react\";\n</code></pre>"}},{"node":{"id":"923d0f5a-e2e8-57ab-9278-01f7cdb8660f","excerpt":"There are basically 2 ways to style the React: importing a standard CSS file for example index.css, which can reside side by side next to…","rawMarkdownBody":"\r\nThere are basically 2 ways to style the React:\r\n\r\n1) importing a standard CSS file for example index.css, which can reside side by side next to your main file, for example index.js. \r\n\r\n> On Ubuntu console, create the css file\r\n```\r\ntouch index.css\r\n```\r\n> Add some styling to your css file, which follows standard CSS rules, for example in this case we will center the video asset which has class name called player:\r\n```\r\n.player {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: block;\r\n}\r\n```\r\n> index.js will look like this:\r\n``` \r\n<video controls className=\"player\">\r\n  <source src=\"/video.mp4\" type=\"video/mp4\">\r\n  </source>\r\n</video>\r\n```\r\n\r\n> Open your index.js file and import your CSS to your JS file:\r\n```\r\nimport \"/index.css\";\r\n```\r\n\r\n2) use styling inline in JS file. \r\n\r\n> Open your index.js file. In the tag where you want to apply your styles write style={{}} and add your style in between of the brackets. First pair of brackets means we are injecting JSX to the html, second pair of brackets means that what we are inputting there is in fact an object. Multiple styles needs to be separated by comma (just like in any other object). Please make sure you do not type styles (plural) instead of style (singular). Correct is style (singular). Please make sure that everything that in CSS uses minus (example: margin-left) must be inline without the minus and camelCased (example: marginLeft). Plus there must always be quotation marks even if in the CSS there wouldnt be. Full example:\r\n```\r\n<video  style={{width:\"500px\", display: \"block\", marginLeft: \"auto\", marginRight:\"auto\"}} controls>\r\n```","frontmatter":{"date":"2019-10-06","title":"Adding CSS to React"},"fields":{"slug":"/Adding_CSS_to_React/"},"timeToRead":1,"html":"<p>There are basically 2 ways to style the React:</p>\n<ol>\n<li>importing a standard CSS file for example index.css, which can reside side by side next to your main file, for example index.js. </li>\n</ol>\n<blockquote>\n<p>On Ubuntu console, create the css file</p>\n</blockquote>\n<pre><code>touch index.css\n</code></pre>\n<blockquote>\n<p>Add some styling to your css file, which follows standard CSS rules, for example in this case we will center the video asset which has class name called player:</p>\n</blockquote>\n<pre><code>.player {\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n</code></pre>\n<blockquote>\n<p>index.js will look like this:</p>\n</blockquote>\n<pre><code>&#x3C;video controls className=\"player\">\n  &#x3C;source src=\"/video.mp4\" type=\"video/mp4\">\n  &#x3C;/source>\n&#x3C;/video>\n</code></pre>\n<blockquote>\n<p>Open your index.js file and import your CSS to your JS file:</p>\n</blockquote>\n<pre><code>import \"/index.css\";\n</code></pre>\n<ol start=\"2\">\n<li>use styling inline in JS file. </li>\n</ol>\n<blockquote>\n<p>Open your index.js file. In the tag where you want to apply your styles write style={{}} and add your style in between of the brackets. First pair of brackets means we are injecting JSX to the html, second pair of brackets means that what we are inputting there is in fact an object. Multiple styles needs to be separated by comma (just like in any other object). Please make sure you do not type styles (plural) instead of style (singular). Correct is style (singular). Please make sure that everything that in CSS uses minus (example: margin-left) must be inline without the minus and camelCased (example: marginLeft). Plus there must always be quotation marks even if in the CSS there wouldnt be. Full example:</p>\n</blockquote>\n<pre><code>&#x3C;video  style={{width:\"500px\", display: \"block\", marginLeft: \"auto\", marginRight:\"auto\"}} controls>\n</code></pre>"}},{"node":{"id":"acc1e651-71eb-5b85-b6f6-99322976b845","excerpt":"How to view the source code in browser? Go to chrome, your page -> more tools -> developer tool -> press Control   Paste this in front of…","rawMarkdownBody":"\r\nHow to view the source code in browser?\r\n\r\n> Go to chrome, your page -> more tools -> developer tool -> press Control  \r\n\r\n> Paste this in front of your https\r\n```\r\nview-source:\r\n```\r\nExample:\r\n```\r\nview-source:https://addania.github.io/MyProject/\r\n```","frontmatter":{"date":"2019-10-05","title":"View Source"},"fields":{"slug":"/View_source/"},"timeToRead":1,"html":"<p>How to view the source code in browser?</p>\n<blockquote>\n<p>Go to chrome, your page -> more tools -> developer tool -> press Control  </p>\n</blockquote>\n<blockquote>\n<p>Paste this in front of your https</p>\n</blockquote>\n<pre><code>view-source:\n</code></pre>\n<p>Example:</p>\n<pre><code>view-source:https://addania.github.io/MyProject/\n</code></pre>"}},{"node":{"id":"38556b1a-ad57-58d5-b91a-4104886e3e79","excerpt":"Just admit it, carousels are simply cool!  :) Sooo, how to make one? Example code to create carousel component with 3 images slideshow is…","rawMarkdownBody":"\r\nJust admit it, carousels are simply cool!  :) Sooo, how to make one? Example code to create carousel component with 3 images slideshow is provided below. \r\n\r\n``` \r\nimport React from \"react\"\r\nimport \"./index.css\";\r\n\r\nexport class Carousel extends React.Component {\r\n  constructor (props){\r\n    super (props);\r\n    this.state = {\r\n      picsForCarousel: [\r\n        \"./img/car1.jpg\",\r\n        \"./img/car2.jpg\",\r\n        \"./img/car3.jpg\"\r\n      ],\r\n      picSelector: 0,\r\n    }\r\n  }\r\n\r\ncomponentDidMount(){\r\n  setTimeout(\r\n    ()=>{\r\n      const number=this.state.picSelector+1;\r\n      this.setState({picSelector: number})},5000)\r\n    }\r\n\r\n  componentDidUpdate(){\r\n      setTimeout(\r\n        ()=>{\r\n          const number=this.state.picSelector+1\r\n          this.setState({picSelector: number})},5000)\r\n        }\r\n\r\n  render (){\r\n    return (\r\n      <div>\r\n      <img src={this.state.picsForCarousel[this.state.picSelector]} style={{\r\n        display: \"block\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        width: \"40%\"\r\n      }} alt=\"\" />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n```\r\n\r\nDid it work? I hope yes. Have fun!","frontmatter":{"date":"2019-10-04","title":"Carousel in React"},"fields":{"slug":"/Carousel_in_React/"},"timeToRead":1,"html":"<p>Just admit it, carousels are simply cool!  :) Sooo, how to make one? Example code to create carousel component with 3 images slideshow is provided below. </p>\n<pre><code>import React from \"react\"\nimport \"./index.css\";\n\nexport class Carousel extends React.Component {\n  constructor (props){\n    super (props);\n    this.state = {\n      picsForCarousel: [\n        \"./img/car1.jpg\",\n        \"./img/car2.jpg\",\n        \"./img/car3.jpg\"\n      ],\n      picSelector: 0,\n    }\n  }\n\ncomponentDidMount(){\n  setTimeout(\n    ()=>{\n      const number=this.state.picSelector+1;\n      this.setState({picSelector: number})},5000)\n    }\n\n  componentDidUpdate(){\n      setTimeout(\n        ()=>{\n          const number=this.state.picSelector+1\n          this.setState({picSelector: number})},5000)\n        }\n\n  render (){\n    return (\n      &#x3C;div>\n      &#x3C;img src={this.state.picsForCarousel[this.state.picSelector]} style={{\n        display: \"block\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        width: \"40%\"\n      }} alt=\"\" />\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<p>Did it work? I hope yes. Have fun!</p>"}},{"node":{"id":"5a2a8a66-0179-53d9-8d67-e500f9943c3e","excerpt":"It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an…","rawMarkdownBody":"\r\n> It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an easy way how to position image or video tag directly\r\n```\r\nimg{\r\n  display: block;\r\n  margin-right: auto;\r\n  width: 50%\r\n}\r\n```\r\n```\r\nvideo {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: block\r\n}\r\n```\r\n\r\n> Another option is to use margin auto and width. This approach will center an element within its container (relative to the container). Some pre-requisites: \r\n\r\n1// Element must be have width smaller than its container. \r\n2// Width of the element must be set\r\n3// Margin should have top and bottom (first value in code below) to be set, for example to 0 or XX pixels\r\n4// Margin for right and left (second value in the code below) should be set to auto (where auto means horizontal margin will be set automatically in order to center the element within its container depending on the width of element and the container)\r\n\r\n```\r\ndiv {\r\n  width: 300px:\r\n  margin: 0px auto;\r\n}\r\n```","frontmatter":{"date":"2019-10-03","title":"How to center an image"},"fields":{"slug":"/How_to_center_image/"},"timeToRead":1,"html":"<blockquote>\n<p>It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an easy way how to position image or video tag directly</p>\n</blockquote>\n<pre><code>img{\n  display: block;\n  margin-right: auto;\n  width: 50%\n}\n</code></pre>\n<pre><code>video {\n  margin-left: auto;\n  margin-right: auto;\n  display: block\n}\n</code></pre>\n<blockquote>\n<p>Another option is to use margin auto and width. This approach will center an element within its container (relative to the container). Some pre-requisites: </p>\n</blockquote>\n<p>1// Element must be have width smaller than its container.\n2// Width of the element must be set\n3// Margin should have top and bottom (first value in code below) to be set, for example to 0 or XX pixels\n4// Margin for right and left (second value in the code below) should be set to auto (where auto means horizontal margin will be set automatically in order to center the element within its container depending on the width of element and the container)</p>\n<pre><code>div {\n  width: 300px:\n  margin: 0px auto;\n}\n</code></pre>"}},{"node":{"id":"0e3c6995-6d01-5402-8d71-5ff30c5c9fae","excerpt":"Being able to display videos in your website is very cool. Here is how you can easily do it. Go to pages folder and create vid subfolder…","rawMarkdownBody":"Being able to display videos in your website is very cool. Here is how you can easily do it.\r\n\r\n> Go to pages folder and create vid subfolder\r\n\r\n> Upload your video there for example called myVideo.mp4\r\n\r\n> Open your index.js files and import your video\r\n```\r\nimport vid from \"./vid/myVideo.mp4\";\r\n```\r\n> Create a video tag with source tag. In video tag write controls ifyzou want to display controls like play and pause. In source tag write the src either as a URL where your video is hosted or file path to your imported video. Also add type, in this case video/mp4\r\n```\r\n<video  controls>\r\n    <source src={vid} type=\"video/mp4\">\r\n    </source>\r\n</video>\r\n```","frontmatter":{"date":"2019-10-02","title":"Add video assets to React"},"fields":{"slug":"/Add_video_assets_to_React/"},"timeToRead":1,"html":"<p>Being able to display videos in your website is very cool. Here is how you can easily do it.</p>\n<blockquote>\n<p>Go to pages folder and create vid subfolder</p>\n</blockquote>\n<blockquote>\n<p>Upload your video there for example called myVideo.mp4</p>\n</blockquote>\n<blockquote>\n<p>Open your index.js files and import your video</p>\n</blockquote>\n<pre><code>import vid from \"./vid/myVideo.mp4\";\n</code></pre>\n<blockquote>\n<p>Create a video tag with source tag. In video tag write controls ifyzou want to display controls like play and pause. In source tag write the src either as a URL where your video is hosted or file path to your imported video. Also add type, in this case video/mp4</p>\n</blockquote>\n<pre><code>&#x3C;video  controls>\n    &#x3C;source src={vid} type=\"video/mp4\">\n    &#x3C;/source>\n&#x3C;/video>\n</code></pre>"}},{"node":{"id":"506aa847-a49a-5909-aad6-2e82218141d8","excerpt":"And here is how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools Go to: Find your favourite…","rawMarkdownBody":"\r\nAnd here is how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools\r\n\r\n> Go to:\r\n```\r\nhttps://www.w3schools.com/howto/howto_google_fonts.asp\r\n```\r\n> Find your favourite font, for example Mansalva\r\n\r\n> Click on button try it\r\n\r\n> Find url in the html document: https://fonts.googleapis.com/css?family=Mansalva\r\n\r\n> Create a new css file for example index.css\r\n\r\n> Populate the file with this code\r\n```\r\n@import url('https://fonts.googleapis.com/css?family=Mansalva');\r\n```\r\n> Add the styling for a body tag\r\n```\r\nbody {\r\n  font-family: 'Mansalva';\r\n}\r\n```\r\n> Alternatively use className to define a style\r\n```\r\n.fonts {\r\n  font-family: 'Mansalva';\r\n}\r\n```\r\n> Go to your index.js\r\n\r\n> Import your index.css please note that index.js and index.css need to be in the same folder\r\n```\r\nimport \"./index.css\"\r\n```\r\n> Add the className fonts to your tag where you want to apply the style, for example:\r\n```\r\n<div className=\"fonts\">\r\n```","frontmatter":{"date":"2019-10-01","title":"Google Fonts in React"},"fields":{"slug":"/Google_fonts_in_React/"},"timeToRead":1,"html":"<p>And here is how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools</p>\n<blockquote>\n<p>Go to:</p>\n</blockquote>\n<pre><code>https://www.w3schools.com/howto/howto_google_fonts.asp\n</code></pre>\n<blockquote>\n<p>Find your favourite font, for example Mansalva</p>\n</blockquote>\n<blockquote>\n<p>Click on button try it</p>\n</blockquote>\n<blockquote>\n<p>Find url in the html document: <a href=\"https://fonts.googleapis.com/css?family=Mansalva\">https://fonts.googleapis.com/css?family=Mansalva</a></p>\n</blockquote>\n<blockquote>\n<p>Create a new css file for example index.css</p>\n</blockquote>\n<blockquote>\n<p>Populate the file with this code</p>\n</blockquote>\n<pre><code>@import url('https://fonts.googleapis.com/css?family=Mansalva');\n</code></pre>\n<blockquote>\n<p>Add the styling for a body tag</p>\n</blockquote>\n<pre><code>body {\n  font-family: 'Mansalva';\n}\n</code></pre>\n<blockquote>\n<p>Alternatively use className to define a style</p>\n</blockquote>\n<pre><code>.fonts {\n  font-family: 'Mansalva';\n}\n</code></pre>\n<blockquote>\n<p>Go to your index.js</p>\n</blockquote>\n<blockquote>\n<p>Import your index.css please note that index.js and index.css need to be in the same folder</p>\n</blockquote>\n<pre><code>import \"./index.css\"\n</code></pre>\n<blockquote>\n<p>Add the className fonts to your tag where you want to apply the style, for example:</p>\n</blockquote>\n<pre><code>&#x3C;div className=\"fonts\">\n</code></pre>"}},{"node":{"id":"7ad618cd-8467-56b5-add4-30f77fcedf8b","excerpt":"Step-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages Create empty GitHub repository, for example called test…","rawMarkdownBody":"\r\nStep-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages\r\n\r\n> Create empty GitHub repository, for example called test2. It should be a public repository and do NOT initialize this repository with README\r\n\r\n> Start Ubuntu Command line\r\n\r\n> Navigate to your projects folder\r\n```\r\ncd projects\r\n```\r\n\r\n> Create new project\r\n```\r\ngatsby new test2 https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n```\r\n> Go to your new project folder\r\n```\r\ncd test2\r\n```\r\n> Install gh-pages. You need to do it for each single project. Dont get fooled like me that I thought I installed this package before. You need to be in your project folder and install it there. If the installation is successful you should get a message something like this \"added 17 packages from 6 contributors and audited 19803 packages in 18.616s found 0 vulnerabilities\"\r\n```\r\nnpm install gh-pages --save-dev\r\n```\r\n> Add your project files to **LOCAL** git\r\n```\r\ngit add .\r\n```\r\n> Commit your project files to **LOCAL** git\r\n```\r\ngit commit -m \"first commit\"\r\n```\r\n> Create a **REMOTE** repository\r\n```\r\ngit remote add origin git@github.com:addania/test2.git \r\n```\r\n> Push to **REMOTE** repository (you will be asked for you passphrase)\r\n```\r\ngit push origin master\r\n```\r\n> Go to you project folder and find file called <code>package.json</code> where you need to add following script to scripts section:\r\n```\r\n\"scripts\": {\r\n    \"deploy\": \"gatsby build && gh-pages -d public -b master\",\r\n  },\r\n```\r\n> If you are publishing to your account url, for example: https://addania.github.io without any prefix, then skip this step. But if on GitHub pages your url will have a prefix, we also need to add this prefix to the Gatsby files. For example, github pages which use repository name as prefix:\r\n```\r\nhttps://addania.github.io/MyProject\r\n```\r\nMyProject is name of repository and it comes AFTER  https://addania.github.io, therefore /MyProject is a prefix and Gatsby needs to build files, so that they add the prefix. If this is the case you also need to do next 2 steps:\r\n\r\n> 1/ Open <code>gatsby-config.js</code> and paste following (dont forget about the slash):\r\n```\r\nmodule.exports = {\r\npathPrefix: \"/MyProject\",\r\n}\r\n```\r\n> 2/ Open <code>package.json</code> file and add --prefix-paths like so:\r\n```\r\n\"build\": \"gatsby build --prefix-paths\",\r\n```\r\n\r\n```\r\n\"deploy\": \"gatsby build --prefix-paths && gh-pages -d public -b master\",\r\n```\r\n\r\n> Add your project files to **LOCAL** git\r\n```\r\ngit add .\r\n```\r\n> Commit your project files to **LOCAL** git\r\n```\r\ngit commit -m \"second commit\"\r\n```\r\n> Push to **REMOTE** repository (you will be asked for you passphrase)\r\n```\r\ngit push origin master\r\n```\r\n> Create gh-pages branch\r\n```\r\ngit checkout -b gh-pages\r\n```\r\n> Create upstream (you will need to add passphrase)\r\n```\r\ngit push --set-upstream origin gh-pages\r\n```\r\n> Run the npm deploy command. Zou will need to add your passphrase (twice). It should result in success and last word should be \"Published\"\r\n```\r\nnpm run deploy\r\n```\r\n> Go to your Github repository -> Settings\r\n\r\n> Scroll down to Github pages and change Source to Master branch.\r\n\r\n> Click on your github pages link: in my case: https://addania.github.io/test2/. You should see your website. Please note that sometimes you need to wait for couple of minutes (around 5 minutes) to see your website, most likely you will only see Gatsby welcome page\r\n\r\n> PLEASE NOTE\r\n\r\nwe will use gh-pages branch to upload / download our code and we will use master branch to publish the website\r\n\r\n> If you want to make changes to your code then you need to push it to the gh-pages branch. This will upload new version of your code to gh-pages branch but it will still not be however reflected in your published page\r\n```\r\ngit push origin gh-pages\r\n```\r\n> To make changes to be reflected on your published page you need to run npm again\r\n```\r\nnpm run deploy\r\n```\r\n> PLEASE NOTE\r\n\r\nIn the Project folder called Pages you can only store pages to your website, if you put there some components which you import to your index.js it will break the npm run deploy with the error that for example header.js must be a valid react component. How to fix it? Remove all your components from pages folder and create a folder called components in the src folder. Put all your components there. Then import your heade.js to your index.js by importr { Header } from \"../components/header.js\". Then you are able to run npm run deploy\r\n\r\n> PLEASE NOTE\r\n\r\nALWAYS commit code to the repository and then nmp run deploy!! You will avoid lots of problems!! If push and npm run deploy are not in synch you probably will have lots of problems with the page.\r\n\r\n> PLEASE NOTE\r\n\r\nActually the good practise is to use master branch for pushing my code and to use gh-pages branch for publishing. In this guide I made it vice versa\r\n\r\n> Additionally:\r\n\r\n> Brose your typography in typography.js here:\r\nhttps://kyleamathews.github.io/typography.js/\r\n\r\n> Choose the one you like\r\n\r\n> Install your typography:\r\n```\r\nnpm install --save gatsby-plugin-typography typography react-typography typography-theme-fairy-gates gatsby-plugin-emotion @emotion/core\r\n```\r\n\r\n> Another example:\r\n```\r\nnpm install --save gatsby-plugin-typography typography react-typography typography-theme-moraga gatsby-plugin-emotion @emotion/core\r\n```\r\n\r\n> Add typography to your package.json\r\n```\r\nmodule.exports = {\r\n  plugins: [\r\n    `gatsby-plugin-emotion`,\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\n> Under foldere src create a new folder utils\r\n\r\n> in src/utils folder create a new typography.js file\r\n\r\n> Input this code into the typography.js\r\n```\r\nimport Typography from \"typography\"\r\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\r\nconst typography = new Typography(fairyGateTheme)\r\nexport const { scale, rhythm, options } = typography\r\nexport default typography\r\n```\r\n\r\n> Another example:\r\n```\r\nimport Typography from \"typography\"\r\nimport moragaTheme from \"typography-theme-moraga\"\r\nconst typography = new Typography(moragaTheme)\r\nexport const { scale, rhythm, options } = typography\r\nexport default typography\r\n```\r\n\r\n> Install source filesystem\r\n```\r\nnpm install --save gatsby-source-filesystem\r\n```\r\n\r\n> Add following code to gatsby-config.js\r\n```\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n```\r\n\r\n> Add transformer remark to be able to work with markdown files:\r\n```\r\nnpm install --save gatsby-transformer-remark\r\n```\r\n\r\n> Add this code to gatsby-config to module exports plugins:\r\n```\r\n`gatsby-transformer-remark`,\r\n```\r\n> Create gatbsy-node.js file in the same folder as gatsby-config\r\n\r\n> add this code to gatsby node:\r\n```\r\nconst path= require(`path`)\r\nconst { createFilePath } = require(`gatsby-source-filesystem`)\r\nexports.onCreateNode = ({ node, getNode, actions }) => {\r\n  const { createNodeField } = actions\r\n  if (node.internal.type === `MarkdownRemark`) {\r\n    const slug = createFilePath({ node, getNode, basePath: `pages` })\r\n    createNodeField({\r\n      node,\r\n      name: `slug`,\r\n      value: slug,\r\n    })\r\n  }\r\n}\r\nexports.createPages = async ({ graphql, actions }) => {\r\n   \r\nconst {createPage} = actions\r\n    const result = await graphql(`\r\n      query {\r\n        allMarkdownRemark {\r\n          edges {\r\n            node {\r\n              fields {\r\n                slug\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `)\r\n    result.data.allMarkdownRemark.edges.forEach(({node}) =>{\r\n       createPage({\r\n           path: node.fields.slug,\r\n           component: path.resolve(`./src/templates/blog-post.js`),\r\n           context: {\r\n             slug: node.fields.slug,\r\n           },\r\n       })\r\n\r\n    })\r\n  }\r\n```\r\n\r\n> install manifest (if it throws error, then skip):\r\n```\r\nnpm install --save gatsby-plugin-manifest\r\n```\r\n\r\n> add manifest plugin to gatsby-config.js (this can throw error, then skip)\r\n```\r\nCopygatsby-config.js: copy code to clipboard\r\n{\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-manifest`,\r\n      options: {\r\n        name: `GatsbyJS`,\r\n        short_name: `GatsbyJS`,\r\n        start_url: `/`,\r\n        background_color: `#6b37bf`,\r\n        theme_color: `#6b37bf`,\r\n        // Enables \"Add to Homescreen\" prompt and disables browser UI (including back button)\r\n        // see https://developers.google.com/web/fundamentals/web-app-manifest/#display\r\n        display: `standalone`,\r\n        icon: `src/images/icon.png`, // This path is relative to the root of the site.\r\n      },\r\n    },\r\n  ]\r\n}\r\n```\r\n\r\n> Add offline support by installing:\r\n```\r\nnpm install --save gatsby-plugin-offline\r\n```\r\n\r\n> Add offline support to gatsby-config to module export plugins:\r\n```\r\n`gatsby-plugin-offline`,\r\n```\r\n\r\n> Add react helmet by installing:\r\n```\r\nnpm install --save gatsby-plugin-react-helmet react-helmet\r\n```\r\n\r\n> Add react helmet to gatsby-config:\r\n\r\n```\r\n`gatsby-plugin-react-helmet`,\r\n```\r\n\r\n> plus site metadata should have author and description:\r\n```\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: `Pandas Eating Lots`,\r\n    description: `A simple description about pandas eating lots...`,\r\n    author: `gatsbyjs`,\r\n  },\r\n```\r\n\r\n> Install react bootstrap and bootstrap:\r\n```\r\nnpm install react-bootstrap bootstrap\r\n```\r\n\r\n\r\n>Useful Sources:\r\n\r\nhttps://iolivia.me/posts/7-gatsby-deploy-github/\r\n\r\nhttps://www.gatsbyjs.org/tutorial/part-four/\r\n\r\n","frontmatter":{"date":"2019-09-30","title":"Publish your Gatsby website to Github Pages"},"fields":{"slug":"/Publish_your_Gatsby_site_to_GitHubpages/"},"timeToRead":7,"html":"<p>Step-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages</p>\n<blockquote>\n<p>Create empty GitHub repository, for example called test2. It should be a public repository and do NOT initialize this repository with README</p>\n</blockquote>\n<blockquote>\n<p>Start Ubuntu Command line</p>\n</blockquote>\n<blockquote>\n<p>Navigate to your projects folder</p>\n</blockquote>\n<pre><code>cd projects\n</code></pre>\n<blockquote>\n<p>Create new project</p>\n</blockquote>\n<pre><code>gatsby new test2 https://github.com/gatsbyjs/gatsby-starter-hello-world\n</code></pre>\n<blockquote>\n<p>Go to your new project folder</p>\n</blockquote>\n<pre><code>cd test2\n</code></pre>\n<blockquote>\n<p>Install gh-pages. You need to do it for each single project. Dont get fooled like me that I thought I installed this package before. You need to be in your project folder and install it there. If the installation is successful you should get a message something like this \"added 17 packages from 6 contributors and audited 19803 packages in 18.616s found 0 vulnerabilities\"</p>\n</blockquote>\n<pre><code>npm install gh-pages --save-dev\n</code></pre>\n<blockquote>\n<p>Add your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Commit your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git commit -m \"first commit\"\n</code></pre>\n<blockquote>\n<p>Create a <strong>REMOTE</strong> repository</p>\n</blockquote>\n<pre><code>git remote add origin git@github.com:addania/test2.git \n</code></pre>\n<blockquote>\n<p>Push to <strong>REMOTE</strong> repository (you will be asked for you passphrase)</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>Go to you project folder and find file called <code>package.json</code> where you need to add following script to scripts section:</p>\n</blockquote>\n<pre><code>\"scripts\": {\n    \"deploy\": \"gatsby build &#x26;&#x26; gh-pages -d public -b master\",\n  },\n</code></pre>\n<blockquote>\n<p>If you are publishing to your account url, for example: <a href=\"https://addania.github.io\">https://addania.github.io</a> without any prefix, then skip this step. But if on GitHub pages your url will have a prefix, we also need to add this prefix to the Gatsby files. For example, github pages which use repository name as prefix:</p>\n</blockquote>\n<pre><code>https://addania.github.io/MyProject\n</code></pre>\n<p>MyProject is name of repository and it comes AFTER  <a href=\"https://addania.github.io\">https://addania.github.io</a>, therefore /MyProject is a prefix and Gatsby needs to build files, so that they add the prefix. If this is the case you also need to do next 2 steps:</p>\n<blockquote>\n<p>1/ Open <code>gatsby-config.js</code> and paste following (dont forget about the slash):</p>\n</blockquote>\n<pre><code>module.exports = {\npathPrefix: \"/MyProject\",\n}\n</code></pre>\n<blockquote>\n<p>2/ Open <code>package.json</code> file and add --prefix-paths like so:</p>\n</blockquote>\n<pre><code>\"build\": \"gatsby build --prefix-paths\",\n</code></pre>\n<pre><code>\"deploy\": \"gatsby build --prefix-paths &#x26;&#x26; gh-pages -d public -b master\",\n</code></pre>\n<blockquote>\n<p>Add your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Commit your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git commit -m \"second commit\"\n</code></pre>\n<blockquote>\n<p>Push to <strong>REMOTE</strong> repository (you will be asked for you passphrase)</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>Create gh-pages branch</p>\n</blockquote>\n<pre><code>git checkout -b gh-pages\n</code></pre>\n<blockquote>\n<p>Create upstream (you will need to add passphrase)</p>\n</blockquote>\n<pre><code>git push --set-upstream origin gh-pages\n</code></pre>\n<blockquote>\n<p>Run the npm deploy command. Zou will need to add your passphrase (twice). It should result in success and last word should be \"Published\"</p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>Go to your Github repository -> Settings</p>\n</blockquote>\n<blockquote>\n<p>Scroll down to Github pages and change Source to Master branch.</p>\n</blockquote>\n<blockquote>\n<p>Click on your github pages link: in my case: <a href=\"https://addania.github.io/test2/\">https://addania.github.io/test2/</a>. You should see your website. Please note that sometimes you need to wait for couple of minutes (around 5 minutes) to see your website, most likely you will only see Gatsby welcome page</p>\n</blockquote>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>we will use gh-pages branch to upload / download our code and we will use master branch to publish the website</p>\n<blockquote>\n<p>If you want to make changes to your code then you need to push it to the gh-pages branch. This will upload new version of your code to gh-pages branch but it will still not be however reflected in your published page</p>\n</blockquote>\n<pre><code>git push origin gh-pages\n</code></pre>\n<blockquote>\n<p>To make changes to be reflected on your published page you need to run npm again</p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>In the Project folder called Pages you can only store pages to your website, if you put there some components which you import to your index.js it will break the npm run deploy with the error that for example header.js must be a valid react component. How to fix it? Remove all your components from pages folder and create a folder called components in the src folder. Put all your components there. Then import your heade.js to your index.js by importr { Header } from \"../components/header.js\". Then you are able to run npm run deploy</p>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>ALWAYS commit code to the repository and then nmp run deploy!! You will avoid lots of problems!! If push and npm run deploy are not in synch you probably will have lots of problems with the page.</p>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>Actually the good practise is to use master branch for pushing my code and to use gh-pages branch for publishing. In this guide I made it vice versa</p>\n<blockquote>\n<p>Additionally:</p>\n</blockquote>\n<blockquote>\n<p>Brose your typography in typography.js here:\n<a href=\"https://kyleamathews.github.io/typography.js/\">https://kyleamathews.github.io/typography.js/</a></p>\n</blockquote>\n<blockquote>\n<p>Choose the one you like</p>\n</blockquote>\n<blockquote>\n<p>Install your typography:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-typography typography react-typography typography-theme-fairy-gates gatsby-plugin-emotion @emotion/core\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-typography typography react-typography typography-theme-moraga gatsby-plugin-emotion @emotion/core\n</code></pre>\n<blockquote>\n<p>Add typography to your package.json</p>\n</blockquote>\n<pre><code>module.exports = {\n  plugins: [\n    `gatsby-plugin-emotion`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n}\n</code></pre>\n<blockquote>\n<p>Under foldere src create a new folder utils</p>\n</blockquote>\n<blockquote>\n<p>in src/utils folder create a new typography.js file</p>\n</blockquote>\n<blockquote>\n<p>Input this code into the typography.js</p>\n</blockquote>\n<pre><code>import Typography from \"typography\"\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\nconst typography = new Typography(fairyGateTheme)\nexport const { scale, rhythm, options } = typography\nexport default typography\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>import Typography from \"typography\"\nimport moragaTheme from \"typography-theme-moraga\"\nconst typography = new Typography(moragaTheme)\nexport const { scale, rhythm, options } = typography\nexport default typography\n</code></pre>\n<blockquote>\n<p>Install source filesystem</p>\n</blockquote>\n<pre><code>npm install --save gatsby-source-filesystem\n</code></pre>\n<blockquote>\n<p>Add following code to gatsby-config.js</p>\n</blockquote>\n<pre><code>  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n</code></pre>\n<blockquote>\n<p>Add transformer remark to be able to work with markdown files:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-transformer-remark\n</code></pre>\n<blockquote>\n<p>Add this code to gatsby-config to module exports plugins:</p>\n</blockquote>\n<pre><code>`gatsby-transformer-remark`,\n</code></pre>\n<blockquote>\n<p>Create gatbsy-node.js file in the same folder as gatsby-config</p>\n</blockquote>\n<blockquote>\n<p>add this code to gatsby node:</p>\n</blockquote>\n<pre><code>const path= require(`path`)\nconst { createFilePath } = require(`gatsby-source-filesystem`)\nexports.onCreateNode = ({ node, getNode, actions }) => {\n  const { createNodeField } = actions\n  if (node.internal.type === `MarkdownRemark`) {\n    const slug = createFilePath({ node, getNode, basePath: `pages` })\n    createNodeField({\n      node,\n      name: `slug`,\n      value: slug,\n    })\n  }\n}\nexports.createPages = async ({ graphql, actions }) => {\n   \nconst {createPage} = actions\n    const result = await graphql(`\n      query {\n        allMarkdownRemark {\n          edges {\n            node {\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    `)\n    result.data.allMarkdownRemark.edges.forEach(({node}) =>{\n       createPage({\n           path: node.fields.slug,\n           component: path.resolve(`./src/templates/blog-post.js`),\n           context: {\n             slug: node.fields.slug,\n           },\n       })\n\n    })\n  }\n</code></pre>\n<blockquote>\n<p>install manifest (if it throws error, then skip):</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-manifest\n</code></pre>\n<blockquote>\n<p>add manifest plugin to gatsby-config.js (this can throw error, then skip)</p>\n</blockquote>\n<pre><code>Copygatsby-config.js: copy code to clipboard\n{\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `GatsbyJS`,\n        short_name: `GatsbyJS`,\n        start_url: `/`,\n        background_color: `#6b37bf`,\n        theme_color: `#6b37bf`,\n        // Enables \"Add to Homescreen\" prompt and disables browser UI (including back button)\n        // see https://developers.google.com/web/fundamentals/web-app-manifest/#display\n        display: `standalone`,\n        icon: `src/images/icon.png`, // This path is relative to the root of the site.\n      },\n    },\n  ]\n}\n</code></pre>\n<blockquote>\n<p>Add offline support by installing:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-offline\n</code></pre>\n<blockquote>\n<p>Add offline support to gatsby-config to module export plugins:</p>\n</blockquote>\n<pre><code>`gatsby-plugin-offline`,\n</code></pre>\n<blockquote>\n<p>Add react helmet by installing:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-react-helmet react-helmet\n</code></pre>\n<blockquote>\n<p>Add react helmet to gatsby-config:</p>\n</blockquote>\n<pre><code>`gatsby-plugin-react-helmet`,\n</code></pre>\n<blockquote>\n<p>plus site metadata should have author and description:</p>\n</blockquote>\n<pre><code>module.exports = {\n  siteMetadata: {\n    title: `Pandas Eating Lots`,\n    description: `A simple description about pandas eating lots...`,\n    author: `gatsbyjs`,\n  },\n</code></pre>\n<blockquote>\n<p>Install react bootstrap and bootstrap:</p>\n</blockquote>\n<pre><code>npm install react-bootstrap bootstrap\n</code></pre>\n<blockquote>\n<p>Useful Sources:</p>\n</blockquote>\n<p><a href=\"https://iolivia.me/posts/7-gatsby-deploy-github/\">https://iolivia.me/posts/7-gatsby-deploy-github/</a></p>\n<p><a href=\"https://www.gatsbyjs.org/tutorial/part-four/\">https://www.gatsbyjs.org/tutorial/part-four/</a></p>"}},{"node":{"id":"89ff1b0c-9343-5cf8-a741-7b4c91617f97","excerpt":"Advantages of Node.js 1/ Creates Runtime Environments (local webserver)\nNode.js is a JavaScript runtime environment. It allows JavaScript to…","rawMarkdownBody":"\r\nAdvantages of Node.js\r\n\r\n1/ Creates Runtime Environments (local webserver)\r\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.\r\n\r\n2/ Enables to install cool packages(=libraries=modules)\r\nNode.js comes automatically with npm (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. nNpm I can only install packages which run in browser. Example of packages: \r\n\r\n> **react** - allows access to all react modules/features like React.Component\r\n\r\n> **reactDOM** - allows to generate react in the browser (unless I want to use script tags in html), for example: ReactDOM.render()\r\n\r\n> **create-react-app** - enables to setup initial react files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes react and reactDOM packages\r\n\r\n> **gatsby** - allows to build websites with multiple pages easier. It ALSO automatically includes react and reactDOM packages\r\n\r\nEach package needs to be installed by npm individually.\r\n\r\n2 ways how to download a package/any other software:\r\n\r\nA) go to webside -> click download -> run installer and install the software\r\n\r\nor\r\n\r\nB) use package managers - package manager MUST be run in command line\r\n\r\nCommands:\r\n\r\n> to install your favourite package\r\n```\r\nnpm install react\r\nnpm install reactDOM\r\nnpm install create-react-app\r\nnpm install gatsby\r\n```\r\n> In order to see which packages=libraries=modules my project is using I search for file called <code>package.json</code>. In the file there will be an object called dependencies \r\n```\r\n  \"dependencies\": {\r\n    \"gatsby\": \"^2.15.28\",\r\n    \"react\": \"^16.10.0\",\r\n    \"react-dom\": \"^16.10.0\"    \r\n  },\r\n```\r\n\r\n> To read a manual npm\r\n```\r\nman npm\r\n```\r\n> To read the help of npm\r\n```\r\nnpm help\r\n```\r\n","frontmatter":{"date":"2019-09-29","title":"Intro to NodeJS"},"fields":{"slug":"/Intro_to_NodeJS/"},"timeToRead":2,"html":"<p>Advantages of Node.js</p>\n<p>1/ Creates Runtime Environments (local webserver)\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.</p>\n<p>2/ Enables to install cool packages(=libraries=modules)\nNode.js comes automatically with npm (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. nNpm I can only install packages which run in browser. Example of packages: </p>\n<blockquote>\n<p><strong>react</strong> - allows access to all react modules/features like React.Component</p>\n</blockquote>\n<blockquote>\n<p><strong>reactDOM</strong> - allows to generate react in the browser (unless I want to use script tags in html), for example: ReactDOM.render()</p>\n</blockquote>\n<blockquote>\n<p><strong>create-react-app</strong> - enables to setup initial react files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes react and reactDOM packages</p>\n</blockquote>\n<blockquote>\n<p><strong>gatsby</strong> - allows to build websites with multiple pages easier. It ALSO automatically includes react and reactDOM packages</p>\n</blockquote>\n<p>Each package needs to be installed by npm individually.</p>\n<p>2 ways how to download a package/any other software:</p>\n<p>A) go to webside -> click download -> run installer and install the software</p>\n<p>or</p>\n<p>B) use package managers - package manager MUST be run in command line</p>\n<p>Commands:</p>\n<blockquote>\n<p>to install your favourite package</p>\n</blockquote>\n<pre><code>npm install react\nnpm install reactDOM\nnpm install create-react-app\nnpm install gatsby\n</code></pre>\n<blockquote>\n<p>In order to see which packages=libraries=modules my project is using I search for file called <code>package.json</code>. In the file there will be an object called dependencies </p>\n</blockquote>\n<pre><code>  \"dependencies\": {\n    \"gatsby\": \"^2.15.28\",\n    \"react\": \"^16.10.0\",\n    \"react-dom\": \"^16.10.0\"    \n  },\n</code></pre>\n<blockquote>\n<p>To read a manual npm</p>\n</blockquote>\n<pre><code>man npm\n</code></pre>\n<blockquote>\n<p>To read the help of npm</p>\n</blockquote>\n<pre><code>npm help\n</code></pre>"}},{"node":{"id":"edcac9ff-ad8f-5521-9470-ace78f1b69a4","excerpt":"React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing…","rawMarkdownBody":"\r\nReact is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having html css and Javascript in one file. \r\nReact is a closed environmnet and can be run in browser, on your local machine (my pc) or on phones (such as Android, etc).\r\n\r\nWhen I am developing a website in React I need to be able to see what I am building. I can do these:\r\n\r\nA/ doubleclick on my html file (index.html) and open it in browser. However, it won't really work. Other pages will not load, because I am only openineg filepath in browser.\r\n\r\nB/ run a web server locally on my machine (pc)\r\n\r\nIn order to run a web server on my machine, I need to install node.js\r\n\r\nIn order to be able to use React in a BROWSER I need package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:\r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n```\r\n> More on this in official documentation here:\r\n\r\nhttps://reactjs.org/docs/add-react-to-a-website.html\r\n\r\nThese script tags in html are equivalent to a file in my project called package.json which is automatically provided by Gatsby:\r\n```\r\n\"dependencies\": {\r\n    \"gatsby\": \"^2.15.28\",\r\n    \"react\": \"^16.10.0\",\r\n    \"react-dom\": \"^16.10.0\"\r\n},\r\n```\r\n\r\n\r\n\r\n> There are 2 ways how I can import react. A) I need to \r\n```\r\nimport React from \"react\";\r\n```\r\n>Then Im using:\r\n```\r\nclass MyClass extends React.Component(){\r\n\r\n}\r\n```\r\n\r\n> B) I can only import { Component } from \"react\"\r\n```\r\nimport { Component } from \"react\";\r\n```\r\n\r\n>Then Im using:\r\n```\r\nclass MyClass extends Component(){\r\n\r\n}\r\n```\r\n\r\n> I can import ReactDOM in ways. Way number A is below. This way we import everything that is in ReactDOM, all their methods. On of their methods is called render:\r\n``` \r\nimport ReactDOM from \"react-dom\";\r\n```\r\n\r\n> Then I am using this rendeer method:\r\n```\r\nReactDOM.render(<p>Hi</p>, document.getElementById(\"app\"));\r\n```\r\n> Another way to import render: si the way B. In this way we are eonly cherr/picking to import one spcifi method from reactDOM and this method is calld render:\r\n```\r\nimport { render } from\"react-dom\";\r\n``` \r\n> Then I am using this rendeer method:\r\n```\r\nrender(<p>Hi</p>, document.getElementById(\"app\"));\r\n```\r\n\r\n> In render method we have 2 possibilities to generate our component in a specific DOM element:\r\n\r\n> One way is to use document.getElementById\r\n```\r\nrender(<p>Hi</p>, document.getElementById(\"app\"));\r\n```\r\n\r\n> Another way is to usee document.querySelector:\r\n```\r\nrender(<p>Hi</p>, document.querySelctor(\"#app\"));\r\n```\r\n\r\n> Within react return statement I can only add  parent component:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <p>Hello</p>\r\n    )\r\n  }\r\n}\r\n```\r\n> I cannot write this:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <p>Hello</p>\r\n        <p>World</p>\r\n    )\r\n  }\r\n}\r\n```\r\n> To solve to have paralell tags, we can wrap them in div:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <div>\r\n          <p>Hello</p>\r\n          <p>World</p>\r\n        </div>  \r\n    )\r\n  }\r\n}\r\n```\r\n\r\n> Alternatively if we dont want to wrapt them in divs, we can wrap them in React.Fragment:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <React.Fragment>\r\n          <p>Hello</p>\r\n          <p>World</p>\r\n        </React.Fragment>  \r\n    )\r\n  }\r\n}\r\n```\r\n","frontmatter":{"date":"2019-09-28","title":"Intro to React"},"fields":{"slug":"/Intro_to_React/"},"timeToRead":3,"html":"<p>React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having html css and Javascript in one file.\nReact is a closed environmnet and can be run in browser, on your local machine (my pc) or on phones (such as Android, etc).</p>\n<p>When I am developing a website in React I need to be able to see what I am building. I can do these:</p>\n<p>A/ doubleclick on my html file (index.html) and open it in browser. However, it won't really work. Other pages will not load, because I am only openineg filepath in browser.</p>\n<p>B/ run a web server locally on my machine (pc)</p>\n<p>In order to run a web server on my machine, I need to install node.js</p>\n<p>In order to be able to use React in a BROWSER I need package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n</code></pre>\n<blockquote>\n<p>More on this in official documentation here:</p>\n</blockquote>\n<p><a href=\"https://reactjs.org/docs/add-react-to-a-website.html\">https://reactjs.org/docs/add-react-to-a-website.html</a></p>\n<p>These script tags in html are equivalent to a file in my project called package.json which is automatically provided by Gatsby:</p>\n<pre><code>\"dependencies\": {\n    \"gatsby\": \"^2.15.28\",\n    \"react\": \"^16.10.0\",\n    \"react-dom\": \"^16.10.0\"\n},\n</code></pre>\n<blockquote>\n<p>There are 2 ways how I can import react. A) I need to </p>\n</blockquote>\n<pre><code>import React from \"react\";\n</code></pre>\n<blockquote>\n<p>Then Im using:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\n\n}\n</code></pre>\n<blockquote>\n<p>B) I can only import { Component } from \"react\"</p>\n</blockquote>\n<pre><code>import { Component } from \"react\";\n</code></pre>\n<blockquote>\n<p>Then Im using:</p>\n</blockquote>\n<pre><code>class MyClass extends Component(){\n\n}\n</code></pre>\n<blockquote>\n<p>I can import ReactDOM in ways. Way number A is below. This way we import everything that is in ReactDOM, all their methods. On of their methods is called render:</p>\n</blockquote>\n<pre><code>import ReactDOM from \"react-dom\";\n</code></pre>\n<blockquote>\n<p>Then I am using this rendeer method:</p>\n</blockquote>\n<pre><code>ReactDOM.render(&#x3C;p>Hi&#x3C;/p>, document.getElementById(\"app\"));\n</code></pre>\n<blockquote>\n<p>Another way to import render: si the way B. In this way we are eonly cherr/picking to import one spcifi method from reactDOM and this method is calld render:</p>\n</blockquote>\n<pre><code>import { render } from\"react-dom\";\n</code></pre>\n<blockquote>\n<p>Then I am using this rendeer method:</p>\n</blockquote>\n<pre><code>render(&#x3C;p>Hi&#x3C;/p>, document.getElementById(\"app\"));\n</code></pre>\n<blockquote>\n<p>In render method we have 2 possibilities to generate our component in a specific DOM element:</p>\n</blockquote>\n<blockquote>\n<p>One way is to use document.getElementById</p>\n</blockquote>\n<pre><code>render(&#x3C;p>Hi&#x3C;/p>, document.getElementById(\"app\"));\n</code></pre>\n<blockquote>\n<p>Another way is to usee document.querySelector:</p>\n</blockquote>\n<pre><code>render(&#x3C;p>Hi&#x3C;/p>, document.querySelctor(\"#app\"));\n</code></pre>\n<blockquote>\n<p>Within react return statement I can only add  parent component:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;p>Hello&#x3C;/p>\n    )\n  }\n}\n</code></pre>\n<blockquote>\n<p>I cannot write this:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;p>Hello&#x3C;/p>\n        &#x3C;p>World&#x3C;/p>\n    )\n  }\n}\n</code></pre>\n<blockquote>\n<p>To solve to have paralell tags, we can wrap them in div:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;div>\n          &#x3C;p>Hello&#x3C;/p>\n          &#x3C;p>World&#x3C;/p>\n        &#x3C;/div>  \n    )\n  }\n}\n</code></pre>\n<blockquote>\n<p>Alternatively if we dont want to wrapt them in divs, we can wrap them in React.Fragment:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;React.Fragment>\n          &#x3C;p>Hello&#x3C;/p>\n          &#x3C;p>World&#x3C;/p>\n        &#x3C;/React.Fragment>  \n    )\n  }\n}\n</code></pre>"}},{"node":{"id":"c39798f0-f0e6-554d-90c8-da70a4424ebd","excerpt":"Deploying Website to Github Pages: Install Github pages to Gatsby Build website to github page, for example: https://addania.github.io…","rawMarkdownBody":"\r\nDeploying Website to Github Pages:\r\n\r\n> Install Github pages to Gatsby\r\n```\r\nnpm install gh-pages --save-dev\r\n```\r\n> Build website to github page, for example: https://addania.github.io/\r\n```\r\nnpm run deploy\r\n```\r\n> References: \r\n\r\nhttps://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/","frontmatter":{"date":"2019-09-27","title":"Intro to Github Pages"},"fields":{"slug":"/Intro_to_Github_pages/"},"timeToRead":1,"html":"<p>Deploying Website to Github Pages:</p>\n<blockquote>\n<p>Install Github pages to Gatsby</p>\n</blockquote>\n<pre><code>npm install gh-pages --save-dev\n</code></pre>\n<blockquote>\n<p>Build website to github page, for example: <a href=\"https://addania.github.io/\">https://addania.github.io/</a></p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>References: </p>\n</blockquote>\n<p><a href=\"https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\">https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/</a></p>"}},{"node":{"id":"da4a6e23-83f8-5549-a055-eebb91311371","excerpt":"Software to help create static website using React. They provide starter templates, ability to create multiple pages in their pages folder…","rawMarkdownBody":"\r\nSoftware to help create static website using React. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically\r\n\r\n> To install Gatsby\r\n```\r\n```\r\n> To display basic commands in gatsby\r\n```\r\ngatsby --help\r\n````\r\n> To create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)\r\n```\r\ngatsby new addania.com https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n```\r\n> To start Gatsby react development environment for my new project I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop\r\n```\r\ngatsby develop\r\n````","frontmatter":{"date":"2019-09-26","title":"Intro to Gatsby"},"fields":{"slug":"/Intro_to_Gatsby/"},"timeToRead":1,"html":"<p>Software to help create static website using React. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically</p>\n<blockquote>\n<p>To install Gatsby</p>\n</blockquote>\n<pre><code></code></pre>\n<blockquote>\n<p>To display basic commands in gatsby</p>\n</blockquote>\n<pre><code>gatsby --help\n</code></pre>\n<blockquote>\n<p>To create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)</p>\n</blockquote>\n<pre><code>gatsby new addania.com https://github.com/gatsbyjs/gatsby-starter-hello-world\n</code></pre>\n<blockquote>\n<p>To start Gatsby react development environment for my new project I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>"}},{"node":{"id":"a7a25318-c161-5d90-9f3a-46e596b300ef","excerpt":"Git is a file versioning system.  First things first - some Git definitions: LOCAL When we talk about LOCAL we mean anything that is stored…","rawMarkdownBody":"\r\nGit is a file versioning system. \r\n\r\n\r\nFirst things first - some Git definitions:\r\n\r\n**LOCAL**\r\n\r\n>When we talk about LOCAL we mean anything that is stored locally on your computer harddrive\r\n\r\n**REMOTE**\r\n\r\n>When we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.\r\n\r\nGeneral Git workflow:\r\n\r\nFirst we need to link our LOCAL and REMOTE repositories using SSH Key.\r\nFirst we need to generate our LOCAL SSH key which we then paste to REMORE GitHub.\r\n\r\n\r\nImagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\r\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing git init command which will create a subfolder git in my current project folder.\r\nThen I work on my project files and make changes to my website. Firstly I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\r\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:\r\n```\r\ngit add .\r\ngit commit -m \"message goes here\"\r\n```\r\nWhen our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.\r\n\r\nThen we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\r\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention): <code>git remote add origin remote repository URL</code>\r\n\r\nFor example:\r\n```\r\ngit remote add origin git@github.com:addania/addania.com.git \r\n```\r\nTo verify if our new remote was added we can check the git remote -v command. \r\nThen we are ready to puch our LOCAL git repository to the REMOTE Github repository:\r\n```\r\ngit push origin master\r\n```\r\n\r\n> In order to install git we need to have apt-get updated. To update apt-get\r\n```\r\nsudo apt-get update\r\n```\r\n> To install Git\r\n```\r\nsudo apt-get install git\r\n```\r\n> To check version of Git\r\n```\r\ngit --version\r\n```\r\n> To set up username and email\r\n```\r\ngit config --global user.name \"addania\"\r\ngit config --global user.email \"mirka.schw@gmail.com\"\r\n```\r\n\r\n>Tto check status of my git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:\r\n```\r\ngit status\r\n```\r\n> To see history of commits\r\n```\r\ngit log\r\n```\r\n> The git init command creates a new Git repository. Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:\r\n```\r\ngit init\r\n```\r\n> In order to commit anything, we first need to add files to staging area by using following command (dot means all files):\r\n```\r\ngit add . \r\n```\r\n> To commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. Git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:\r\n```\r\ngit commit\r\n```\r\n> To commit files to LOCAL git repository with a message already included in the command:\r\n```\r\ngit commit -m \"message goes here\"\r\n```\r\n> To see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):\r\n```\r\ngit remote -v\r\n```\r\n> To add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository\r\n```\r\ngit remote add origin git@github.com:addania/addania.com.git\r\n```\r\n\r\n> To rename origin with new url if I need to change my repository name:\r\n```\r\ngit remote set-url origin git@github.com:addania/addania.github.io.git\r\n```\r\n\r\n> To check how many branches I have in my repository, if there is only one, the main one will be called usually master:\r\n```\r\ngit branch\r\n```\r\n> To push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the btanch in the project, main branch is called master:\r\n```\r\ngit push origin master\r\n```\r\n> If I dont want to write always git push origin master -force I can create upstream and link local to remote git by -u. After this command then I can use only git push to upload files\r\n```\r\ngit push -u origin master -f\r\n```\r\n> To overwrite anything on the REMOTE repository in master branch we can force push:\r\n```\r\ngit push origin master --force \r\n```\r\n> Pulling down files from remote git to local git, where origin is name of my remote git and master is name of branch:\r\n```\r\ngit pull origin master\r\n```","frontmatter":{"date":"2019-09-25","title":"Intro to Git"},"fields":{"slug":"/Intro_to_Git/"},"timeToRead":4,"html":"<p>Git is a file versioning system. </p>\n<p>First things first - some Git definitions:</p>\n<p><strong>LOCAL</strong></p>\n<blockquote>\n<p>When we talk about LOCAL we mean anything that is stored locally on your computer harddrive</p>\n</blockquote>\n<p><strong>REMOTE</strong></p>\n<blockquote>\n<p>When we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.</p>\n</blockquote>\n<p>General Git workflow:</p>\n<p>First we need to link our LOCAL and REMOTE repositories using SSH Key.\nFirst we need to generate our LOCAL SSH key which we then paste to REMORE GitHub.</p>\n<p>Imagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing git init command which will create a subfolder git in my current project folder.\nThen I work on my project files and make changes to my website. Firstly I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:</p>\n<pre><code>git add .\ngit commit -m \"message goes here\"\n</code></pre>\n<p>When our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.</p>\n<p>Then we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention): <code>git remote add origin remote repository URL</code></p>\n<p>For example:</p>\n<pre><code>git remote add origin git@github.com:addania/addania.com.git \n</code></pre>\n<p>To verify if our new remote was added we can check the git remote -v command.\nThen we are ready to puch our LOCAL git repository to the REMOTE Github repository:</p>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>In order to install git we need to have apt-get updated. To update apt-get</p>\n</blockquote>\n<pre><code>sudo apt-get update\n</code></pre>\n<blockquote>\n<p>To install Git</p>\n</blockquote>\n<pre><code>sudo apt-get install git\n</code></pre>\n<blockquote>\n<p>To check version of Git</p>\n</blockquote>\n<pre><code>git --version\n</code></pre>\n<blockquote>\n<p>To set up username and email</p>\n</blockquote>\n<pre><code>git config --global user.name \"addania\"\ngit config --global user.email \"mirka.schw@gmail.com\"\n</code></pre>\n<blockquote>\n<p>Tto check status of my git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:</p>\n</blockquote>\n<pre><code>git status\n</code></pre>\n<blockquote>\n<p>To see history of commits</p>\n</blockquote>\n<pre><code>git log\n</code></pre>\n<blockquote>\n<p>The git init command creates a new Git repository. Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:</p>\n</blockquote>\n<pre><code>git init\n</code></pre>\n<blockquote>\n<p>In order to commit anything, we first need to add files to staging area by using following command (dot means all files):</p>\n</blockquote>\n<pre><code>git add . \n</code></pre>\n<blockquote>\n<p>To commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. Git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:</p>\n</blockquote>\n<pre><code>git commit\n</code></pre>\n<blockquote>\n<p>To commit files to LOCAL git repository with a message already included in the command:</p>\n</blockquote>\n<pre><code>git commit -m \"message goes here\"\n</code></pre>\n<blockquote>\n<p>To see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):</p>\n</blockquote>\n<pre><code>git remote -v\n</code></pre>\n<blockquote>\n<p>To add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository</p>\n</blockquote>\n<pre><code>git remote add origin git@github.com:addania/addania.com.git\n</code></pre>\n<blockquote>\n<p>To rename origin with new url if I need to change my repository name:</p>\n</blockquote>\n<pre><code>git remote set-url origin git@github.com:addania/addania.github.io.git\n</code></pre>\n<blockquote>\n<p>To check how many branches I have in my repository, if there is only one, the main one will be called usually master:</p>\n</blockquote>\n<pre><code>git branch\n</code></pre>\n<blockquote>\n<p>To push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the btanch in the project, main branch is called master:</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>If I dont want to write always git push origin master -force I can create upstream and link local to remote git by -u. After this command then I can use only git push to upload files</p>\n</blockquote>\n<pre><code>git push -u origin master -f\n</code></pre>\n<blockquote>\n<p>To overwrite anything on the REMOTE repository in master branch we can force push:</p>\n</blockquote>\n<pre><code>git push origin master --force \n</code></pre>\n<blockquote>\n<p>Pulling down files from remote git to local git, where origin is name of my remote git and master is name of branch:</p>\n</blockquote>\n<pre><code>git pull origin master\n</code></pre>"}},{"node":{"id":"1077652f-d780-5c05-bb3c-a68689430db4","excerpt":"HomeBrew helps to install softwares. See current version of homebrew Update brew Installing software hello Install node Checking version of…","rawMarkdownBody":"\r\nHomeBrew helps to install softwares.\r\n\r\n> See current version of homebrew\r\n```\r\nbrew -v\r\n```\r\n> Update brew\r\n```\r\nbrew update\r\n```\r\n> Installing software hello\r\n```\r\nbrew install hello\r\n```\r\n> Install node\r\n```\r\nbrew install node\r\n```\r\n> Checking version of node\r\n```\r\nnode --version\r\n```","frontmatter":{"date":"2019-09-24","title":"Intro to HomeBrew"},"fields":{"slug":"/Intro_to_HomeBrew/"},"timeToRead":1,"html":"<p>HomeBrew helps to install softwares.</p>\n<blockquote>\n<p>See current version of homebrew</p>\n</blockquote>\n<pre><code>brew -v\n</code></pre>\n<blockquote>\n<p>Update brew</p>\n</blockquote>\n<pre><code>brew update\n</code></pre>\n<blockquote>\n<p>Installing software hello</p>\n</blockquote>\n<pre><code>brew install hello\n</code></pre>\n<blockquote>\n<p>Install node</p>\n</blockquote>\n<pre><code>brew install node\n</code></pre>\n<blockquote>\n<p>Checking version of node</p>\n</blockquote>\n<pre><code>node --version\n</code></pre>"}},{"node":{"id":"f2ea98e2-12e0-5c6a-83a4-4cbc2689f36c","excerpt":"General: It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a…","rawMarkdownBody":"\r\nGeneral:\r\n\r\nIt is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It wont have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.\r\n\r\nUbuntu directory on PC:\r\n```\r\n\\\\wsl$\\Ubuntu-18.04\\home\\addania\r\n```\r\nControls:\r\n\r\nCopy/Paste works differently in Ubuntu: ctrl+shift+c for copy, crtl+shift+v for paste\r\n\r\nSome commands will start with sudo which means to run as administrator\r\n\r\nj and k keys allows navigate up and down\r\n\r\nh and l allow to navigate left and right\r\n\r\nCommands:\r\n\r\n> To show which directory I am currently in we use command pwd (print working directory)\r\n```\r\npwd\r\n```\r\n> To display list of all files in a current directory\r\n```\r\nls\r\n```\r\n> To display list of all files in a current directory including hidden files (those with ., ex: .git)\r\n```\r\nls -a\r\n```\r\n> Change directory cd + name of the directory (ex: cd src will go to folder called src in your current folder), this is to go one directory down the tree\r\n```\r\ncd src\r\n```\r\n> To go one directory up the tree\r\n```\r\ncd ..\r\n```\r\n> To create a folder\r\n```\r\nmkdir\r\n```\r\n> To create a new file called global.css\r\n```\r\ntouch global.css\r\n```\r\n\r\n> To cancel something running in the command line:\r\n```\r\ncontrol-C\r\n```","frontmatter":{"date":"2019-09-23","title":"Intro to Ubuntu"},"fields":{"slug":"/Intro_to_Ubuntu/"},"timeToRead":1,"html":"<p>General:</p>\n<p>It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It wont have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.</p>\n<p>Ubuntu directory on PC:</p>\n<pre><code>\\\\wsl$\\Ubuntu-18.04\\home\\addania\n</code></pre>\n<p>Controls:</p>\n<p>Copy/Paste works differently in Ubuntu: ctrl+shift+c for copy, crtl+shift+v for paste</p>\n<p>Some commands will start with sudo which means to run as administrator</p>\n<p>j and k keys allows navigate up and down</p>\n<p>h and l allow to navigate left and right</p>\n<p>Commands:</p>\n<blockquote>\n<p>To show which directory I am currently in we use command pwd (print working directory)</p>\n</blockquote>\n<pre><code>pwd\n</code></pre>\n<blockquote>\n<p>To display list of all files in a current directory</p>\n</blockquote>\n<pre><code>ls\n</code></pre>\n<blockquote>\n<p>To display list of all files in a current directory including hidden files (those with ., ex: .git)</p>\n</blockquote>\n<pre><code>ls -a\n</code></pre>\n<blockquote>\n<p>Change directory cd + name of the directory (ex: cd src will go to folder called src in your current folder), this is to go one directory down the tree</p>\n</blockquote>\n<pre><code>cd src\n</code></pre>\n<blockquote>\n<p>To go one directory up the tree</p>\n</blockquote>\n<pre><code>cd ..\n</code></pre>\n<blockquote>\n<p>To create a folder</p>\n</blockquote>\n<pre><code>mkdir\n</code></pre>\n<blockquote>\n<p>To create a new file called global.css</p>\n</blockquote>\n<pre><code>touch global.css\n</code></pre>\n<blockquote>\n<p>To cancel something running in the command line:</p>\n</blockquote>\n<pre><code>control-C\n</code></pre>"}}],"totalCount":54}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}