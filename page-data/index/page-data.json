{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"058d2027618bb5cd7fc0","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"6869d44a-7cf1-5416-85fd-c4304c424623","excerpt":"What are higher order functions? According to Wikipedia: In mathematics and computer science, a higher-order function is a function that…","rawMarkdownBody":"\r\nWhat are higher order functions? According to Wikipedia:\r\n\r\n> In mathematics and computer science, a higher-order function is a function that does at least one of the following:\r\n- takes one or more functions as arguments (i.e. procedural parameters),\r\n- returns a function as its result.\r\n\r\nFor example an array method .reduce is a higher order function because it takes a function called reducer as a parameter:\r\n``` \r\nconst [myArray, setMyArray] = useState([1, 4, 2]) \r\n\r\n<p>Im a reducer and SUM is: {myArray.reduce(reducer)}</p>\r\n\r\nconst reducer = (accumulator, currentValue, index) => {\r\n        accumulator = (accumulator + currentValue)\r\n        \r\n        return (accumulator);\r\n    } \r\n``` \r\n        ","frontmatter":{"date":"2019-11-03","title":"Higher Order Functions"},"fields":{"slug":"/Higher_order_functions/"},"timeToRead":1,"html":"<p>What are higher order functions? According to Wikipedia:</p>\n<blockquote>\n<p>In mathematics and computer science, a higher-order function is a function that does at least one of the following:</p>\n</blockquote>\n<ul>\n<li>takes one or more functions as arguments (i.e. procedural parameters),</li>\n<li>returns a function as its result.</li>\n</ul>\n<p>For example an array method .reduce is a higher order function because it takes a function called reducer as a parameter:</p>\n<pre><code>const [myArray, setMyArray] = useState([1, 4, 2]) \n\n&#x3C;p>Im a reducer and SUM is: {myArray.reduce(reducer)}&#x3C;/p>\n\nconst reducer = (accumulator, currentValue, index) => {\n        accumulator = (accumulator + currentValue)\n        \n        return (accumulator);\n    } \n</code></pre>\n<pre><code>    \n</code></pre>"}},{"node":{"id":"acc1e651-71eb-5b85-b6f6-99322976b845","excerpt":"How to view the source code in browser? A) go to chrome, your page -> more tools -> developer tool -> press Control U  B) paste view-source…","rawMarkdownBody":"\r\nHow to view the source code in browser?\r\n\r\nA) go to chrome, your page -> more tools -> developer tool -> press Control U \r\n\r\nB) paste <code>view-source:</code> int fromt of your https\r\n\r\nExample:\r\n\r\nview-source:https://addania.github.io/SamOnHands/","frontmatter":{"date":"2019-10-05","title":"View Source"},"fields":{"slug":"/View_source/"},"timeToRead":1,"html":"<p>How to view the source code in browser?</p>\n<p>A) go to chrome, your page -> more tools -> developer tool -> press Control U </p>\n<p>B) paste <code>view-source:</code> int fromt of your https</p>\n<p>Example:</p>\n<p>view-source:<a href=\"https://addania.github.io/SamOnHands/\">https://addania.github.io/SamOnHands/</a></p>"}},{"node":{"id":"38556b1a-ad57-58d5-b91a-4104886e3e79","excerpt":"Example code to create carouseel component with 3 images slideshow","rawMarkdownBody":"\r\nExample code to create carouseel component with 3 images slideshow\r\n\r\n``` \r\nimport React from \"react\"\r\nimport \"./index.css\";\r\n\r\nexport class Carousel extends React.Component {\r\n  constructor (props){\r\n    super (props);\r\n    this.state = {\r\n      picsForCarousel: [\r\n        \"./img/car1.jpg\",\r\n        \"./img/car2.jpg\",\r\n        \"./img/car3.jpg\"\r\n      ],\r\n      picSelector: 0,\r\n    }\r\n  }\r\n\r\ncomponentDidMount(){\r\n  setTimeout(\r\n    ()=>{\r\n      const number=this.state.picSelector+1;\r\n      this.setState({picSelector: number})},5000)\r\n    }\r\n\r\n  componentDidUpdate(){\r\n      setTimeout(\r\n        ()=>{\r\n          const number=this.state.picSelector+1\r\n          this.setState({picSelector: number})},5000)\r\n        }\r\n\r\n  render (){\r\n  /*  const number=this.state.picSelector+1;\r\n      this.setState({picSelector: number});*/\r\n    return (\r\n      <div>\r\n      <img src={this.state.picsForCarousel[this.state.picSelector]} style={{\r\n        display: \"block\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        width: \"40%\"\r\n      }} alt=\"\" />\r\n      </div>\r\n    )\r\n    \r\n    ;\r\n  }\r\n};\r\n```","frontmatter":{"date":"2019-10-04","title":"Carousel in React"},"fields":{"slug":"/Carousel_in_React/"},"timeToRead":1,"html":"<p>Example code to create carouseel component with 3 images slideshow</p>\n<pre><code>import React from \"react\"\nimport \"./index.css\";\n\nexport class Carousel extends React.Component {\n  constructor (props){\n    super (props);\n    this.state = {\n      picsForCarousel: [\n        \"./img/car1.jpg\",\n        \"./img/car2.jpg\",\n        \"./img/car3.jpg\"\n      ],\n      picSelector: 0,\n    }\n  }\n\ncomponentDidMount(){\n  setTimeout(\n    ()=>{\n      const number=this.state.picSelector+1;\n      this.setState({picSelector: number})},5000)\n    }\n\n  componentDidUpdate(){\n      setTimeout(\n        ()=>{\n          const number=this.state.picSelector+1\n          this.setState({picSelector: number})},5000)\n        }\n\n  render (){\n  /*  const number=this.state.picSelector+1;\n      this.setState({picSelector: number});*/\n    return (\n      &#x3C;div>\n      &#x3C;img src={this.state.picsForCarousel[this.state.picSelector]} style={{\n        display: \"block\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        width: \"40%\"\n      }} alt=\"\" />\n      &#x3C;/div>\n    )\n    \n    ;\n  }\n};\n</code></pre>"}},{"node":{"id":"5a2a8a66-0179-53d9-8d67-e500f9943c3e","excerpt":"It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an…","rawMarkdownBody":"\r\n> It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an easy way how to position image or video tag directly\r\n\r\nimg{\r\n\r\n  display: block;\r\n\r\n  margin-right: auto;\r\n\r\n  width: 50%\r\n\r\n}\r\n\r\nvideo {\r\n\r\n  margin-left: auto;\r\n\r\n  margin-right: auto;\r\n\r\n  display: block\r\n\r\n}","frontmatter":{"date":"2019-10-03","title":"How to center an image"},"fields":{"slug":"/How_to_center_image/"},"timeToRead":1,"html":"<blockquote>\n<p>It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an easy way how to position image or video tag directly</p>\n</blockquote>\n<p>img{</p>\n<p>  display: block;</p>\n<p>  margin-right: auto;</p>\n<p>  width: 50%</p>\n<p>}</p>\n<p>video {</p>\n<p>  margin-left: auto;</p>\n<p>  margin-right: auto;</p>\n<p>  display: block</p>\n<p>}</p>"}},{"node":{"id":"0e3c6995-6d01-5402-8d71-5ff30c5c9fae","excerpt":"Go to pages folder and create vid subfolder Upload your video there for example called ulrik.mp4 open your index.js files and import your…","rawMarkdownBody":"\r\n> Go to pages folder and create vid subfolder\r\n\r\n> Upload your video there for example called ulrik.mp4\r\n\r\n> open your index.js files and import your video\r\n\r\nimport vid from \"./vid/ulrik.mp4\";\r\n\r\n> create a video tag with source tag. in video tag write controls if zou want to displaz controls like plaz and pause. in source tag write the src either as a URL where your video is hosted or file path to your imported video. also add type, in this case video/mp4\r\n\r\n<video  controls>\r\n\r\n    <source src={vid} type=\"video/mp4\">\r\n\r\n    </source>\r\n    \r\n    </video>","frontmatter":{"date":"2019-10-02","title":"Add video assets to React"},"fields":{"slug":"/Add_video_assets_to_React/"},"timeToRead":1,"html":"<blockquote>\n<p>Go to pages folder and create vid subfolder</p>\n</blockquote>\n<blockquote>\n<p>Upload your video there for example called ulrik.mp4</p>\n</blockquote>\n<blockquote>\n<p>open your index.js files and import your video</p>\n</blockquote>\n<p>import vid from \"./vid/ulrik.mp4\";</p>\n<blockquote>\n<p>create a video tag with source tag. in video tag write controls if zou want to displaz controls like plaz and pause. in source tag write the src either as a URL where your video is hosted or file path to your imported video. also add type, in this case video/mp4</p>\n</blockquote>\n<video  controls>\n<pre><code>&#x3C;source src={vid} type=\"video/mp4\">\n\n&#x3C;/source>\n\n&#x3C;/video>\n</code></pre>"}},{"node":{"id":"506aa847-a49a-5909-aad6-2e82218141d8","excerpt":"It took me a while to figure out how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools go to…","rawMarkdownBody":"\r\nIt took me a while to figure out how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools\r\n\r\n> go to:\r\n\r\nhttps://www.w3schools.com/howto/howto_google_fonts.asp\r\n\r\n> find your favourite font, for example Mansalva\r\n\r\n> click on button try it\r\n\r\n> find url in the html document: https://fonts.googleapis.com/css?family=Mansalva\r\n\r\n> Create a new csss file for example index.css\r\n\r\n> populate the file with this code\r\n\r\n@import url('https://fonts.googleapis.com/css?family=Mansalva');\r\n\r\n> add the styling for a body tag\r\n\r\nbody {\r\n\r\n  font-family: 'Mansalva';\r\n\r\n}\r\n\r\n> alternatively use className to define a style\r\n\r\n.fonts {\r\n\r\n  font-family: 'Mansalva';\r\n\r\n}\r\n\r\n> go to your index.js\r\n\r\n> import your index.css please note that index.js and index.css neeed to be in the same folder\r\n\r\nimport \"./index.css\"\r\n\r\n> add the className fonts to your tag where you want to apply the style, for example:\r\n\r\n<div className=\"fonts\">\r\n","frontmatter":{"date":"2019-09-30","title":"Google Fonts in React"},"fields":{"slug":"/Google_fonts_in_React/"},"timeToRead":1,"html":"<p>It took me a while to figure out how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools</p>\n<blockquote>\n<p>go to:</p>\n</blockquote>\n<p><a href=\"https://www.w3schools.com/howto/howto_google_fonts.asp\">https://www.w3schools.com/howto/howto_google_fonts.asp</a></p>\n<blockquote>\n<p>find your favourite font, for example Mansalva</p>\n</blockquote>\n<blockquote>\n<p>click on button try it</p>\n</blockquote>\n<blockquote>\n<p>find url in the html document: <a href=\"https://fonts.googleapis.com/css?family=Mansalva\">https://fonts.googleapis.com/css?family=Mansalva</a></p>\n</blockquote>\n<blockquote>\n<p>Create a new csss file for example index.css</p>\n</blockquote>\n<blockquote>\n<p>populate the file with this code</p>\n</blockquote>\n<p>@import url('<a href=\"https://fonts.googleapis.com/css?family=Mansalva&#x27;\">https://fonts.googleapis.com/css?family=Mansalva'</a>);</p>\n<blockquote>\n<p>add the styling for a body tag</p>\n</blockquote>\n<p>body {</p>\n<p>  font-family: 'Mansalva';</p>\n<p>}</p>\n<blockquote>\n<p>alternatively use className to define a style</p>\n</blockquote>\n<p>.fonts {</p>\n<p>  font-family: 'Mansalva';</p>\n<p>}</p>\n<blockquote>\n<p>go to your index.js</p>\n</blockquote>\n<blockquote>\n<p>import your index.css please note that index.js and index.css neeed to be in the same folder</p>\n</blockquote>\n<p>import \"./index.css\"</p>\n<blockquote>\n<p>add the className fonts to your tag where you want to apply the style, for example:</p>\n</blockquote>\n<div className=\"fonts\">"}},{"node":{"id":"7ad618cd-8467-56b5-add4-30f77fcedf8b","excerpt":"Step-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages create empty GitHub Repository, for example called test…","rawMarkdownBody":"\r\nStep-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages\r\n\r\n> create empty GitHub Repository, for example called test2. It should be a public repository and do NOT initialize this repository with README\r\n\r\n> start Ubuntu Command line\r\n\r\n> navigate to your projects folder\r\n\r\n  <code>cd projects</code>\r\n\r\n>create new project\r\n\r\ngatsby new test2 https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n\r\n> go to your new project folder\r\n\r\ncd test2\r\n\r\n> install gh-pages. You need to do it for each single project. Dont get fooled like me that I thought I installed this package before. You need to be in your project folder and install it there. If the installation is successful you should get a message something like this \"added 17 packages from 6 contributors and audited 19803 packages in 18.616s found 0 vulnerabilities\"\r\n\r\nnpm install gh-pages --save-dev\r\n\r\n> add your project files to  LOCAL git\r\n\r\ngit add .\r\n\r\n> commit your project files to LOCAL git\r\n\r\ngit commit -m \"first commit\"\r\n\r\n> create a REMOTE repository\r\n\r\ngit remote add origin git@github.com:addania/test2.git \r\n\r\n> push to REMOTE repository (you will be asked for you passphrase)\r\n\r\ngit push origin master\r\n\r\n> Go to you project folder and find file called package.json where you need to add following script to scripts section:\r\n\r\n\"scripts\": {\r\n\r\n    ...\r\n\r\n    \"deploy\": \"gatsby build && gh-pages -d public -b master\",\r\n\r\n  },\r\n\r\n> If you are publishing to your account url, for example: https://addania.github.io without any prefix, then skip this step. But if on GitHub pages your url will have a prefix, we also need to add this prefix to the Gatsby files. For example, github pages which use repository name as prefix:\r\n\r\nhttps://addania.github.io/SamOnHands\r\n\r\nSamOnHands is name of repository and it comes AFTER  https://addania.github.io, therefore /SamOnHands is a prefix and Gatsby needs to build files, so that they add the prefix. If this is the case you also need to do next 2 steps:\r\n\r\n1) open gatsby-config.js and paste following (dont forget about the slash:\r\n\r\nmodule.exports = {\r\n\r\npathPrefix: \"/SamOnHands\",\r\n\r\n}\r\n\r\n2) open package.json file and add --prefix-paths like so:\r\n\r\n\"build\": \"gatsby build --prefix-paths\",\r\n\r\n\r\n> add your project files to LOCAL git\r\n\r\ngit add .\r\n\r\n> commit your project files to LOCAL git\r\n\r\ngit commit -m \"second commit\"\r\n\r\n> push to REMOTE repository (you will be asked for you passphrase)\r\n\r\ngit push origin master\r\n\r\n> create gh-pages branch\r\n\r\ngit checkout -b gh-pages\r\n\r\n> create upstream (you will need to add passphrase)\r\n\r\ngit push --set-upstream origin gh-pages\r\n\r\n> run the npm deploy command. you will need to add your passphrase (3times). It shoudl result in success and last word should be \"Published\"\r\n\r\nnpm run deploy\r\n\r\n> Go to your Github Repository to Settings\r\n\r\n> Scroll down to Github pages and change Source to master branch.\r\n\r\n> Click on your github pages link: in my case: https://addania.github.io/test2/. You should see your website. Please note that sometimes you need to wait for couple of minutes (around 5 minutes) to see your website, most likely you will only see Gatsby welcome page\r\n\r\n> PLEASE NOTE\r\n\r\nwe will use gh-pages branch to upload / download our code and we will use master branch to publish the website\r\n\r\n> If you want to make changes to your code then you need to push it to the gh/pages branch. This will upload new version of your code to gh-pages branch but it will still not be however reflected in your published page\r\n\r\ngit push origin gh-pages\r\n\r\n> to make changes to be reflected on your published page you need to run npm again\r\n\r\nnpm run deploy\r\n\r\n> PLEASE NOTE\r\n\r\nIn the Project forlder called Pages you can only store pages to your website, if you put there some components which you import to your index.js it will break the npm run deploy with the error that for example header.js must be a valid react component. HOw to fix it? Remove all your components from pages folder and create a folder called components in the src folder. put all your components there. then import your heade.js to your index.js by importr { Header } from \"../components/header.js\" Then you are able to run npm run deploy\r\n\r\n> PLEASE NOTE\r\n\r\nALWAYS commit code to the repository and then nmp run deploy!!! You will avoid lots of problems!!! If push and npm run deploy are not in synch you probably will have lots of problems with the page\r\n\r\n> PLEASE NOTE\r\n\r\nActually the good practise is to use master branch for pushing my code and to use gh-pages branch for publishing. In this guide I madee it vice versa\r\n\r\n>Useful Sources\r\n\r\nhttps://iolivia.me/posts/7-gatsby-deploy-github/\r\n","frontmatter":{"date":"2019-09-30","title":"Publish your Gatsby website to Github Pages"},"fields":{"slug":"/Publish_your_Gatsby_site_to_GitHubpages/"},"timeToRead":4,"html":"<p>Step-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages</p>\n<blockquote>\n<p>create empty GitHub Repository, for example called test2. It should be a public repository and do NOT initialize this repository with README</p>\n</blockquote>\n<blockquote>\n<p>start Ubuntu Command line</p>\n</blockquote>\n<blockquote>\n<p>navigate to your projects folder</p>\n</blockquote>\n<p>  <code>cd projects</code></p>\n<blockquote>\n<p>create new project</p>\n</blockquote>\n<p>gatsby new test2 <a href=\"https://github.com/gatsbyjs/gatsby-starter-hello-world\">https://github.com/gatsbyjs/gatsby-starter-hello-world</a></p>\n<blockquote>\n<p>go to your new project folder</p>\n</blockquote>\n<p>cd test2</p>\n<blockquote>\n<p>install gh-pages. You need to do it for each single project. Dont get fooled like me that I thought I installed this package before. You need to be in your project folder and install it there. If the installation is successful you should get a message something like this \"added 17 packages from 6 contributors and audited 19803 packages in 18.616s found 0 vulnerabilities\"</p>\n</blockquote>\n<p>npm install gh-pages --save-dev</p>\n<blockquote>\n<p>add your project files to  LOCAL git</p>\n</blockquote>\n<p>git add .</p>\n<blockquote>\n<p>commit your project files to LOCAL git</p>\n</blockquote>\n<p>git commit -m \"first commit\"</p>\n<blockquote>\n<p>create a REMOTE repository</p>\n</blockquote>\n<p>git remote add origin git@github.com:addania/test2.git </p>\n<blockquote>\n<p>push to REMOTE repository (you will be asked for you passphrase)</p>\n</blockquote>\n<p>git push origin master</p>\n<blockquote>\n<p>Go to you project folder and find file called package.json where you need to add following script to scripts section:</p>\n</blockquote>\n<p>\"scripts\": {</p>\n<pre><code>...\n\n\"deploy\": \"gatsby build &#x26;&#x26; gh-pages -d public -b master\",\n</code></pre>\n<p>  },</p>\n<blockquote>\n<p>If you are publishing to your account url, for example: <a href=\"https://addania.github.io\">https://addania.github.io</a> without any prefix, then skip this step. But if on GitHub pages your url will have a prefix, we also need to add this prefix to the Gatsby files. For example, github pages which use repository name as prefix:</p>\n</blockquote>\n<p><a href=\"https://addania.github.io/SamOnHands\">https://addania.github.io/SamOnHands</a></p>\n<p>SamOnHands is name of repository and it comes AFTER  <a href=\"https://addania.github.io\">https://addania.github.io</a>, therefore /SamOnHands is a prefix and Gatsby needs to build files, so that they add the prefix. If this is the case you also need to do next 2 steps:</p>\n<ol>\n<li>open gatsby-config.js and paste following (dont forget about the slash:</li>\n</ol>\n<p>module.exports = {</p>\n<p>pathPrefix: \"/SamOnHands\",</p>\n<p>}</p>\n<ol start=\"2\">\n<li>open package.json file and add --prefix-paths like so:</li>\n</ol>\n<p>\"build\": \"gatsby build --prefix-paths\",</p>\n<blockquote>\n<p>add your project files to LOCAL git</p>\n</blockquote>\n<p>git add .</p>\n<blockquote>\n<p>commit your project files to LOCAL git</p>\n</blockquote>\n<p>git commit -m \"second commit\"</p>\n<blockquote>\n<p>push to REMOTE repository (you will be asked for you passphrase)</p>\n</blockquote>\n<p>git push origin master</p>\n<blockquote>\n<p>create gh-pages branch</p>\n</blockquote>\n<p>git checkout -b gh-pages</p>\n<blockquote>\n<p>create upstream (you will need to add passphrase)</p>\n</blockquote>\n<p>git push --set-upstream origin gh-pages</p>\n<blockquote>\n<p>run the npm deploy command. you will need to add your passphrase (3times). It shoudl result in success and last word should be \"Published\"</p>\n</blockquote>\n<p>npm run deploy</p>\n<blockquote>\n<p>Go to your Github Repository to Settings</p>\n</blockquote>\n<blockquote>\n<p>Scroll down to Github pages and change Source to master branch.</p>\n</blockquote>\n<blockquote>\n<p>Click on your github pages link: in my case: <a href=\"https://addania.github.io/test2/\">https://addania.github.io/test2/</a>. You should see your website. Please note that sometimes you need to wait for couple of minutes (around 5 minutes) to see your website, most likely you will only see Gatsby welcome page</p>\n</blockquote>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>we will use gh-pages branch to upload / download our code and we will use master branch to publish the website</p>\n<blockquote>\n<p>If you want to make changes to your code then you need to push it to the gh/pages branch. This will upload new version of your code to gh-pages branch but it will still not be however reflected in your published page</p>\n</blockquote>\n<p>git push origin gh-pages</p>\n<blockquote>\n<p>to make changes to be reflected on your published page you need to run npm again</p>\n</blockquote>\n<p>npm run deploy</p>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>In the Project forlder called Pages you can only store pages to your website, if you put there some components which you import to your index.js it will break the npm run deploy with the error that for example header.js must be a valid react component. HOw to fix it? Remove all your components from pages folder and create a folder called components in the src folder. put all your components there. then import your heade.js to your index.js by importr { Header } from \"../components/header.js\" Then you are able to run npm run deploy</p>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>ALWAYS commit code to the repository and then nmp run deploy!!! You will avoid lots of problems!!! If push and npm run deploy are not in synch you probably will have lots of problems with the page</p>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>Actually the good practise is to use master branch for pushing my code and to use gh-pages branch for publishing. In this guide I madee it vice versa</p>\n<blockquote>\n<p>Useful Sources</p>\n</blockquote>\n<p><a href=\"https://iolivia.me/posts/7-gatsby-deploy-github/\">https://iolivia.me/posts/7-gatsby-deploy-github/</a></p>"}},{"node":{"id":"89ff1b0c-9343-5cf8-a741-7b4c91617f97","excerpt":"Advantages of Node.js Creates Runtime Environments (local webserver)\nNode.js is a JavaScript runtime environment. It allows JavaScript to…","rawMarkdownBody":"\r\nAdvantages of Node.js\r\n\r\n1) Creates Runtime Environments (local webserver)\r\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.\r\n\r\n2) Enables to install cool packages(=libraries=modules)\r\nNode.js comes automatically with npm (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. npm I can only install packages which run in browser. Example of packages: \r\n\r\nreact - allows access to all react modules/features like React.Component\r\n\r\nreactDOM - allows to generate react in the browser (unless I want to use script tags in html), for example: ReactDOM.render()\r\n\r\ncreate-react-app - enables to setup initial react files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes react and reactDOM packages\r\n\r\ngatsby - allows to build websites with multiple pages easier. It ALSO automatically includes react and reactDOM packages\r\n\r\nEach package needs to be installed by npm individually.\r\n\r\n2 ways how to download a package/any other software:\r\n\r\nA) go to webside -> click download -> run installer and install the software\r\n\r\nor\r\n\r\nB) use package managers - package manager MUST be run in command line\r\n\r\nCommands:\r\n\r\n> to install your favourite package\r\n\r\nnpm install react\r\n\r\nnpm install reactDOM\r\n\r\nnpm install create-react-app\r\n\r\nnpm install gatsby\r\n\r\n> In order to see which packages=libraries=modules my project is using I search for file called package.json. In the file there wil be an object called dependencies \r\n\r\n  \"dependencies\": {\r\n\r\n    \"gatsby\": \"^2.15.28\",\r\n\r\n    \"react\": \"^16.10.0\",\r\n\r\n    \"react-dom\": \"^16.10.0\"\r\n    \r\n  },\r\n\r\n\r\n> to read a manual npm\r\n\r\nman npm\r\n\r\n> to read the help of npm\r\n\r\nnpm help\r\n\r\n","frontmatter":{"date":"2019-09-29","title":"Intro to NodeJS"},"fields":{"slug":"/Intro_to_NodeJS/"},"timeToRead":2,"html":"<p>Advantages of Node.js</p>\n<ol>\n<li>Creates Runtime Environments (local webserver)\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.</li>\n<li>Enables to install cool packages(=libraries=modules)\nNode.js comes automatically with npm (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. npm I can only install packages which run in browser. Example of packages: </li>\n</ol>\n<p>react - allows access to all react modules/features like React.Component</p>\n<p>reactDOM - allows to generate react in the browser (unless I want to use script tags in html), for example: ReactDOM.render()</p>\n<p>create-react-app - enables to setup initial react files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes react and reactDOM packages</p>\n<p>gatsby - allows to build websites with multiple pages easier. It ALSO automatically includes react and reactDOM packages</p>\n<p>Each package needs to be installed by npm individually.</p>\n<p>2 ways how to download a package/any other software:</p>\n<p>A) go to webside -> click download -> run installer and install the software</p>\n<p>or</p>\n<p>B) use package managers - package manager MUST be run in command line</p>\n<p>Commands:</p>\n<blockquote>\n<p>to install your favourite package</p>\n</blockquote>\n<p>npm install react</p>\n<p>npm install reactDOM</p>\n<p>npm install create-react-app</p>\n<p>npm install gatsby</p>\n<blockquote>\n<p>In order to see which packages=libraries=modules my project is using I search for file called package.json. In the file there wil be an object called dependencies </p>\n</blockquote>\n<p>  \"dependencies\": {</p>\n<pre><code>\"gatsby\": \"^2.15.28\",\n\n\"react\": \"^16.10.0\",\n\n\"react-dom\": \"^16.10.0\"\n</code></pre>\n<p>  },</p>\n<blockquote>\n<p>to read a manual npm</p>\n</blockquote>\n<p>man npm</p>\n<blockquote>\n<p>to read the help of npm</p>\n</blockquote>\n<p>npm help</p>"}},{"node":{"id":"57345d05-f695-51fa-a876-bfc9f60a89d3","excerpt":"Ubuntu: General: It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in…","rawMarkdownBody":"**Ubuntu:**\r\n\r\nGeneral:\r\n\r\nIt is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It wont have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.\r\n\r\nUbuntu directory on PC:\r\n\r\n\\\\wsl$\\Ubuntu-18.04\\home\\addania\r\n\r\nControls:\r\n\r\nCopy/Paste works differently in Ubuntu: ctrl+shift+c for copy, crtl+shift+v for paste\r\nSome commands will start with sudo which means to run as administrator\r\nj and k keys allows navigate up and down\r\nh and l allow to navigate left and right\r\n\r\nCommands:\r\n\r\n> to show which directory I am currently in we use command pwd (print working directory)\r\n\r\npwd\r\n\r\n> to display list of all files in a current directory\r\n\r\nls\r\n\r\n> to display list of all files in a current directory including hidden files (those with ., ex: .git)\r\n\r\nls -a\r\n\r\n> change directory cd + name of the directory (ex: cd src will go to folder called src in your currnet folder), this is to go one directory down the tree\r\n\r\ncd src\r\n\r\n> to go one directory up the tree\r\n\r\ncd ..\r\n\r\n> to create a folder\r\n\r\nmkdir\r\n\r\n> to create a new file called global.css\r\n\r\ntouch global.css\r\n\r\n___\r\n**Homebrew:**\r\n\r\n> see current version of homebrew\r\n\r\nbrew -v\r\n\r\n> update brew\r\n\r\nbrew update\r\n\r\n> installing software hello\r\n\r\nbrew install hello\r\n\r\n> install node\r\n\r\nbrew install node\r\n\r\n> checking version of node\r\n\r\nnode --version\r\n\r\n___\r\n**Git:**\r\n\r\nGit is a file versioning system. \r\n\r\n\r\nSome Git definitions first:\r\n\r\nLOCAL\r\nWhen we talk about LOCAL we mean anything that is stored locally on your computer harddrive\r\n\r\nREMOTE\r\nWhen we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.\r\n\r\nGeneral Git workflow:\r\nFirst we need to link our LOCAL and REMOTE repositories using SSH Key.\r\nFirst we need to generate our LOCAL SSH key which we then paste to REMORE GitHub.\r\n\r\n\r\nImagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\r\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing git init command which will create a subfolder git in my current project folder.\r\nThen I work on my project files and make changes to my website. Firstly I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\r\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:\r\ngit add .\r\ngit commit -m \"message goes here\"\r\n\r\nWhen our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.\r\n\r\nThen we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\r\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention):\r\ngit remote add origin remote repository URL\r\nfor example:\r\ngit remote add origin git@github.com:addania/addania.com.git \r\n\r\nTo verify if our new remote was added we can check the git remote -v command. \r\nThen we are ready to puch our LOCAL git repository to the REMOTE Github repository:\r\ngit push origin master\r\n\r\n> In order to install git we need to have apt-get updated. To update apt-get\r\n\r\nsudo apt-get update\r\n\r\n> to install Git\r\n\r\nsudo apt-get install git\r\n\r\n> to check version of Git\r\n\r\ngit --version\r\n\r\n> to set up username and email\r\n\r\ngit config --global user.name \"addania\"\r\n\r\ngit config --global user.email \"mirka.schw@gmail.com\"\r\n\r\n> to check status of my git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:\r\n\r\ngit status\r\n\r\n> to see history of commits\r\n\r\ngit log\r\n\r\n> The git init command creates a new Git repository. Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:\r\n\r\n<code> git init </code>\r\n\r\n> in order to commit anything, we first need to add files to staging area by using following command (dot means all files):\r\n\r\ngit add . \r\n\r\n> to commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:\r\n\r\ngit commit\r\n\r\n> to commit files to LOCAL git repository with a message already included in the command:\r\n\r\ngit commit -m \"message goes here\"\r\n\r\n> to see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):\r\n\r\ngit remote -v\r\n\r\n> to add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository\r\n\r\ngit remote add origin git@github.com:addania/addania.com.git\r\n\r\ngit remote add origin git@github.com:addania/knowledgeBase.git  \r\n\r\n> to rename origin with new url if I need to change my repository name:\r\n\r\ngit remote set-url origin git@github.com:addania/addania.github.io.git\r\n\r\ngit remote set-url origin git@github.com:addania/addania.com.git\r\n\r\n> to check how many branches I have in my repository, if there is only one, the main one will be called usually master:\r\n\r\ngit branch\r\n\r\n> to push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the banch in the project, main branch is called master:\r\n\r\ngit push origin master\r\n\r\n> If I dont want to write always git push origin master -force I can create upstream and link local to remote git by -u. After this command then I can use only git push to upload files\r\n\r\ngit push -u origin master -f\r\n\r\n> to overwrite anything on the REMOTE repository in master branch we can force push:\r\n\r\ngit push origin master --force \r\n\r\n> pulling down files from remote git to local git, where origin is name of my remote git and master is name of branch:\r\n\r\ngit pull origin master\r\n\r\n___\r\n\r\n**Gatsby:**\r\n\r\nSoftware to help create static website using react. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically\r\n\r\n> to install Gatsby\r\n\r\n> to display basic commands in gatsby\r\n\r\ngatsby --help\r\n\r\n> to create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)\r\n\r\ngatsby new addania.com https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n\r\n> to start Gatsby react development environment for my new projct I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop\r\n\r\ngatsby develop\r\n\r\n___\r\n\r\n**Github Pages:**\r\n\r\nDeploying Website to Github Pages:\r\nhttps://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\r\n\r\n> installing github pages to gatsby\r\n\r\nnpm install gh-pages --save-dev\r\n\r\n> builds website to github page, for example: https://addania.github.io/\r\n\r\nnpm run deploy\r\n\r\n___\r\n\r\n**React:**\r\n\r\nReact is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having html css and Javascript in one file. \r\nReact is a closed environmnet and can be run in browser, on your local machine (my pc) or on phones (such as Android, etc).\r\n\r\nWhen I am developing a website in React I need to be able to see what I am building. I can do these:\r\n\r\n- A: doubleclick on my html file (index.html) and open it in browser. However, it wont really work. Other pages will not load, because I am only openineg filepath in browser.\r\n\r\n- B: run a web server locally on my machine (pc)\r\n\r\nIn order to run a web server on my machine, I need to install node.js\r\n\r\nIn order to be able to use React in a BROWSER I need package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:\r\n\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n\r\nMore on this in official documentation here:https://reactjs.org/docs/add-react-to-a-website.html\r\n\r\nThese script tags in html are equivalent to a file in my project called package.json which is automatically provided by Gatsby:\r\n\r\n\"dependencies\": {\r\n    \"gatsby\": \"^2.15.28\",\r\n    \"react\": \"^16.10.0\",\r\n    \"react-dom\": \"^16.10.0\"\r\n},\r\n\r\n___\r\n\r\n**Node.js**\r\n\r\nAdvantages of Node.js\r\n\r\n1) Creates Runtime Environments (local webserver)\r\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.\r\n\r\n2) Enables to install cool packages(=libraries=modules)\r\nNode.js comes automatically with npm (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. npm I can only install packages which run in browser. Example of packages: \r\n\r\nreact - allows access to all react modules/features like React.Component\r\n\r\nreactDOM - allows to generate react in the browser (unless I want to use script tags in html), for example: ReactDOM.render()\r\n\r\ncreate-react-app - enables to setup initial react files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes react and reactDOM packages\r\n\r\ngatsby - allows to build websites with multiple pages easier. It ALSO automatically includes react and reactDOM packages\r\n\r\nEach package needs to be installed by npm individually.\r\n\r\n2 ways how to download a package/any other software:\r\n\r\nA) go to webside -> click download -> run installer and install the software\r\n\r\nor\r\n\r\nB) use package managers - package manager MUST be run in command line\r\n\r\nCommands:\r\n\r\n> to install your favourite package\r\n\r\nnpm install react\r\n\r\nnpm install reactDOM\r\n\r\nnpm install create-react-app\r\n\r\nnpm install gatsby\r\n\r\n> In order to see which packages=libraries=modules my project is using I search for file called package.json. In the file there wil be an object called dependencies \r\n\r\n  \"dependencies\": {\r\n    \"gatsby\": \"^2.15.28\",\r\n    \"react\": \"^16.10.0\",\r\n    \"react-dom\": \"^16.10.0\"\r\n  },\r\n\r\n\r\n> to read a manual npm\r\n\r\nman npm\r\n\r\n> to read the help of npm\r\n\r\nnpm help\r\n____________________________________\r\n**Surge:**\r\n\r\nSurge is for publishing my website live\r\n\r\n","frontmatter":{"date":"2019-09-29","title":"Intro to Ubuntu, Gatsby, NodeJS"},"fields":{"slug":"/old/Ubuntu_Gatsby_NodeJS/"},"timeToRead":9,"html":"<p><strong>Ubuntu:</strong></p>\n<p>General:</p>\n<p>It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It wont have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.</p>\n<p>Ubuntu directory on PC:</p>\n<p>\\wsl$\\Ubuntu-18.04\\home\\addania</p>\n<p>Controls:</p>\n<p>Copy/Paste works differently in Ubuntu: ctrl+shift+c for copy, crtl+shift+v for paste\nSome commands will start with sudo which means to run as administrator\nj and k keys allows navigate up and down\nh and l allow to navigate left and right</p>\n<p>Commands:</p>\n<blockquote>\n<p>to show which directory I am currently in we use command pwd (print working directory)</p>\n</blockquote>\n<p>pwd</p>\n<blockquote>\n<p>to display list of all files in a current directory</p>\n</blockquote>\n<p>ls</p>\n<blockquote>\n<p>to display list of all files in a current directory including hidden files (those with ., ex: .git)</p>\n</blockquote>\n<p>ls -a</p>\n<blockquote>\n<p>change directory cd + name of the directory (ex: cd src will go to folder called src in your currnet folder), this is to go one directory down the tree</p>\n</blockquote>\n<p>cd src</p>\n<blockquote>\n<p>to go one directory up the tree</p>\n</blockquote>\n<p>cd ..</p>\n<blockquote>\n<p>to create a folder</p>\n</blockquote>\n<p>mkdir</p>\n<blockquote>\n<p>to create a new file called global.css</p>\n</blockquote>\n<p>touch global.css</p>\n<hr>\n<p><strong>Homebrew:</strong></p>\n<blockquote>\n<p>see current version of homebrew</p>\n</blockquote>\n<p>brew -v</p>\n<blockquote>\n<p>update brew</p>\n</blockquote>\n<p>brew update</p>\n<blockquote>\n<p>installing software hello</p>\n</blockquote>\n<p>brew install hello</p>\n<blockquote>\n<p>install node</p>\n</blockquote>\n<p>brew install node</p>\n<blockquote>\n<p>checking version of node</p>\n</blockquote>\n<p>node --version</p>\n<hr>\n<p><strong>Git:</strong></p>\n<p>Git is a file versioning system. </p>\n<p>Some Git definitions first:</p>\n<p>LOCAL\nWhen we talk about LOCAL we mean anything that is stored locally on your computer harddrive</p>\n<p>REMOTE\nWhen we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.</p>\n<p>General Git workflow:\nFirst we need to link our LOCAL and REMOTE repositories using SSH Key.\nFirst we need to generate our LOCAL SSH key which we then paste to REMORE GitHub.</p>\n<p>Imagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing git init command which will create a subfolder git in my current project folder.\nThen I work on my project files and make changes to my website. Firstly I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:\ngit add .\ngit commit -m \"message goes here\"</p>\n<p>When our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.</p>\n<p>Then we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention):\ngit remote add origin remote repository URL\nfor example:\ngit remote add origin git@github.com:addania/addania.com.git </p>\n<p>To verify if our new remote was added we can check the git remote -v command.\nThen we are ready to puch our LOCAL git repository to the REMOTE Github repository:\ngit push origin master</p>\n<blockquote>\n<p>In order to install git we need to have apt-get updated. To update apt-get</p>\n</blockquote>\n<p>sudo apt-get update</p>\n<blockquote>\n<p>to install Git</p>\n</blockquote>\n<p>sudo apt-get install git</p>\n<blockquote>\n<p>to check version of Git</p>\n</blockquote>\n<p>git --version</p>\n<blockquote>\n<p>to set up username and email</p>\n</blockquote>\n<p>git config --global user.name \"addania\"</p>\n<p>git config --global user.email \"mirka.schw@gmail.com\"</p>\n<blockquote>\n<p>to check status of my git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:</p>\n</blockquote>\n<p>git status</p>\n<blockquote>\n<p>to see history of commits</p>\n</blockquote>\n<p>git log</p>\n<blockquote>\n<p>The git init command creates a new Git repository. Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:</p>\n</blockquote>\n<p><code> git init </code></p>\n<blockquote>\n<p>in order to commit anything, we first need to add files to staging area by using following command (dot means all files):</p>\n</blockquote>\n<p>git add . </p>\n<blockquote>\n<p>to commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:</p>\n</blockquote>\n<p>git commit</p>\n<blockquote>\n<p>to commit files to LOCAL git repository with a message already included in the command:</p>\n</blockquote>\n<p>git commit -m \"message goes here\"</p>\n<blockquote>\n<p>to see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):</p>\n</blockquote>\n<p>git remote -v</p>\n<blockquote>\n<p>to add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository</p>\n</blockquote>\n<p>git remote add origin git@github.com:addania/addania.com.git</p>\n<p>git remote add origin git@github.com:addania/knowledgeBase.git  </p>\n<blockquote>\n<p>to rename origin with new url if I need to change my repository name:</p>\n</blockquote>\n<p>git remote set-url origin git@github.com:addania/addania.github.io.git</p>\n<p>git remote set-url origin git@github.com:addania/addania.com.git</p>\n<blockquote>\n<p>to check how many branches I have in my repository, if there is only one, the main one will be called usually master:</p>\n</blockquote>\n<p>git branch</p>\n<blockquote>\n<p>to push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the banch in the project, main branch is called master:</p>\n</blockquote>\n<p>git push origin master</p>\n<blockquote>\n<p>If I dont want to write always git push origin master -force I can create upstream and link local to remote git by -u. After this command then I can use only git push to upload files</p>\n</blockquote>\n<p>git push -u origin master -f</p>\n<blockquote>\n<p>to overwrite anything on the REMOTE repository in master branch we can force push:</p>\n</blockquote>\n<p>git push origin master --force </p>\n<blockquote>\n<p>pulling down files from remote git to local git, where origin is name of my remote git and master is name of branch:</p>\n</blockquote>\n<p>git pull origin master</p>\n<hr>\n<p><strong>Gatsby:</strong></p>\n<p>Software to help create static website using react. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically</p>\n<blockquote>\n<p>to install Gatsby</p>\n</blockquote>\n<blockquote>\n<p>to display basic commands in gatsby</p>\n</blockquote>\n<p>gatsby --help</p>\n<blockquote>\n<p>to create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)</p>\n</blockquote>\n<p>gatsby new addania.com <a href=\"https://github.com/gatsbyjs/gatsby-starter-hello-world\">https://github.com/gatsbyjs/gatsby-starter-hello-world</a></p>\n<blockquote>\n<p>to start Gatsby react development environment for my new projct I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop</p>\n</blockquote>\n<p>gatsby develop</p>\n<hr>\n<p><strong>Github Pages:</strong></p>\n<p>Deploying Website to Github Pages:\n<a href=\"https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\">https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/</a></p>\n<blockquote>\n<p>installing github pages to gatsby</p>\n</blockquote>\n<p>npm install gh-pages --save-dev</p>\n<blockquote>\n<p>builds website to github page, for example: <a href=\"https://addania.github.io/\">https://addania.github.io/</a></p>\n</blockquote>\n<p>npm run deploy</p>\n<hr>\n<p><strong>React:</strong></p>\n<p>React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having html css and Javascript in one file.\nReact is a closed environmnet and can be run in browser, on your local machine (my pc) or on phones (such as Android, etc).</p>\n<p>When I am developing a website in React I need to be able to see what I am building. I can do these:</p>\n<ul>\n<li>A: doubleclick on my html file (index.html) and open it in browser. However, it wont really work. Other pages will not load, because I am only openineg filepath in browser.</li>\n<li>B: run a web server locally on my machine (pc)</li>\n</ul>\n<p>In order to run a web server on my machine, I need to install node.js</p>\n<p>In order to be able to use React in a BROWSER I need package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:</p>\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\n<p>More on this in official documentation here:<a href=\"https://reactjs.org/docs/add-react-to-a-website.html\">https://reactjs.org/docs/add-react-to-a-website.html</a></p>\n<p>These script tags in html are equivalent to a file in my project called package.json which is automatically provided by Gatsby:</p>\n<p>\"dependencies\": {\n\"gatsby\": \"^2.15.28\",\n\"react\": \"^16.10.0\",\n\"react-dom\": \"^16.10.0\"\n},</p>\n<hr>\n<p><strong>Node.js</strong></p>\n<p>Advantages of Node.js</p>\n<ol>\n<li>Creates Runtime Environments (local webserver)\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.</li>\n<li>Enables to install cool packages(=libraries=modules)\nNode.js comes automatically with npm (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. npm I can only install packages which run in browser. Example of packages: </li>\n</ol>\n<p>react - allows access to all react modules/features like React.Component</p>\n<p>reactDOM - allows to generate react in the browser (unless I want to use script tags in html), for example: ReactDOM.render()</p>\n<p>create-react-app - enables to setup initial react files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes react and reactDOM packages</p>\n<p>gatsby - allows to build websites with multiple pages easier. It ALSO automatically includes react and reactDOM packages</p>\n<p>Each package needs to be installed by npm individually.</p>\n<p>2 ways how to download a package/any other software:</p>\n<p>A) go to webside -> click download -> run installer and install the software</p>\n<p>or</p>\n<p>B) use package managers - package manager MUST be run in command line</p>\n<p>Commands:</p>\n<blockquote>\n<p>to install your favourite package</p>\n</blockquote>\n<p>npm install react</p>\n<p>npm install reactDOM</p>\n<p>npm install create-react-app</p>\n<p>npm install gatsby</p>\n<blockquote>\n<p>In order to see which packages=libraries=modules my project is using I search for file called package.json. In the file there wil be an object called dependencies </p>\n</blockquote>\n<p>  \"dependencies\": {\n\"gatsby\": \"^2.15.28\",\n\"react\": \"^16.10.0\",\n\"react-dom\": \"^16.10.0\"\n},</p>\n<blockquote>\n<p>to read a manual npm</p>\n</blockquote>\n<p>man npm</p>\n<blockquote>\n<p>to read the help of npm</p>\n</blockquote>\n<p>npm help</p>\n<hr>\n<p><strong>Surge:</strong></p>\n<p>Surge is for publishing my website live</p>"}},{"node":{"id":"edcac9ff-ad8f-5521-9470-ace78f1b69a4","excerpt":"React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing…","rawMarkdownBody":"\r\nReact is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having html css and Javascript in one file. \r\nReact is a closed environmnet and can be run in browser, on your local machine (my pc) or on phones (such as Android, etc).\r\n\r\nWhen I am developing a website in React I need to be able to see what I am building. I can do these:\r\n\r\n- A: doubleclick on my html file (index.html) and open it in browser. However, it wont really work. Other pages will not load, because I am only openineg filepath in browser.\r\n\r\n- B: run a web server locally on my machine (pc)\r\n\r\nIn order to run a web server on my machine, I need to install node.js\r\n\r\nIn order to be able to use React in a BROWSER I need package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:\r\n\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n\r\nMore on this in official documentation here:https://reactjs.org/docs/add-react-to-a-website.html\r\n\r\nThese script tags in html are equivalent to a file in my project called package.json which is automatically provided by Gatsby:\r\n\r\n\"dependencies\": {\r\n\r\n    \"gatsby\": \"^2.15.28\",\r\n\r\n    \"react\": \"^16.10.0\",\r\n\r\n    \"react-dom\": \"^16.10.0\"\r\n\r\n},\r\n","frontmatter":{"date":"2019-09-28","title":"Intro to React"},"fields":{"slug":"/Intro_to_React/"},"timeToRead":1,"html":"<p>React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having html css and Javascript in one file.\nReact is a closed environmnet and can be run in browser, on your local machine (my pc) or on phones (such as Android, etc).</p>\n<p>When I am developing a website in React I need to be able to see what I am building. I can do these:</p>\n<ul>\n<li>A: doubleclick on my html file (index.html) and open it in browser. However, it wont really work. Other pages will not load, because I am only openineg filepath in browser.</li>\n<li>B: run a web server locally on my machine (pc)</li>\n</ul>\n<p>In order to run a web server on my machine, I need to install node.js</p>\n<p>In order to be able to use React in a BROWSER I need package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:</p>\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\n<p>More on this in official documentation here:<a href=\"https://reactjs.org/docs/add-react-to-a-website.html\">https://reactjs.org/docs/add-react-to-a-website.html</a></p>\n<p>These script tags in html are equivalent to a file in my project called package.json which is automatically provided by Gatsby:</p>\n<p>\"dependencies\": {</p>\n<pre><code>\"gatsby\": \"^2.15.28\",\n\n\"react\": \"^16.10.0\",\n\n\"react-dom\": \"^16.10.0\"\n</code></pre>\n<p>},</p>"}},{"node":{"id":"c39798f0-f0e6-554d-90c8-da70a4424ebd","excerpt":"Deploying Website to Github Pages:\nhttps://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/ installing github pages to gatsby npm…","rawMarkdownBody":"\r\nDeploying Website to Github Pages:\r\nhttps://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\r\n\r\n> installing github pages to gatsby\r\n\r\nnpm install gh-pages --save-dev\r\n\r\n> builds website to github page, for example: https://addania.github.io/\r\n\r\nnpm run deploy\r\n","frontmatter":{"date":"2019-09-27","title":"Intro to Github Pages"},"fields":{"slug":"/Intro_to_Github_pages/"},"timeToRead":1,"html":"<p>Deploying Website to Github Pages:\n<a href=\"https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\">https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/</a></p>\n<blockquote>\n<p>installing github pages to gatsby</p>\n</blockquote>\n<p>npm install gh-pages --save-dev</p>\n<blockquote>\n<p>builds website to github page, for example: <a href=\"https://addania.github.io/\">https://addania.github.io/</a></p>\n</blockquote>\n<p>npm run deploy</p>"}},{"node":{"id":"da4a6e23-83f8-5549-a055-eebb91311371","excerpt":"Software to help create static website using react. They provide starter templates, ability to create multiple pages in their pages folder…","rawMarkdownBody":"\r\nSoftware to help create static website using react. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically\r\n\r\n> to install Gatsby\r\n\r\n> to display basic commands in gatsby\r\n\r\ngatsby --help\r\n\r\n> to create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)\r\n\r\ngatsby new addania.com https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n\r\n> to start Gatsby react development environment for my new projct I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop\r\n\r\ngatsby develop\r\n","frontmatter":{"date":"2019-09-26","title":"Intro to Gatsby"},"fields":{"slug":"/Intro_to_Gatsby/"},"timeToRead":1,"html":"<p>Software to help create static website using react. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically</p>\n<blockquote>\n<p>to install Gatsby</p>\n</blockquote>\n<blockquote>\n<p>to display basic commands in gatsby</p>\n</blockquote>\n<p>gatsby --help</p>\n<blockquote>\n<p>to create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)</p>\n</blockquote>\n<p>gatsby new addania.com <a href=\"https://github.com/gatsbyjs/gatsby-starter-hello-world\">https://github.com/gatsbyjs/gatsby-starter-hello-world</a></p>\n<blockquote>\n<p>to start Gatsby react development environment for my new projct I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop</p>\n</blockquote>\n<p>gatsby develop</p>"}},{"node":{"id":"a7a25318-c161-5d90-9f3a-46e596b300ef","excerpt":"Git is a file versioning system.  Some Git definitions first: LOCAL\nWhen we talk about LOCAL we mean anything that is stored locally on your…","rawMarkdownBody":"\r\nGit is a file versioning system. \r\n\r\n\r\nSome Git definitions first:\r\n\r\nLOCAL\r\nWhen we talk about LOCAL we mean anything that is stored locally on your computer harddrive\r\n\r\nREMOTE\r\nWhen we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.\r\n\r\nGeneral Git workflow:\r\nFirst we need to link our LOCAL and REMOTE repositories using SSH Key.\r\nFirst we need to generate our LOCAL SSH key which we then paste to REMORE GitHub.\r\n\r\n\r\nImagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\r\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing git init command which will create a subfolder git in my current project folder.\r\nThen I work on my project files and make changes to my website. Firstly I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\r\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:\r\ngit add .\r\ngit commit -m \"message goes here\"\r\n\r\nWhen our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.\r\n\r\nThen we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\r\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention):\r\ngit remote add origin remote repository URL\r\nfor example:\r\ngit remote add origin git@github.com:addania/addania.com.git \r\n\r\nTo verify if our new remote was added we can check the git remote -v command. \r\nThen we are ready to puch our LOCAL git repository to the REMOTE Github repository:\r\ngit push origin master\r\n\r\n> In order to install git we need to have apt-get updated. To update apt-get\r\n\r\nsudo apt-get update\r\n\r\n> to install Git\r\n\r\nsudo apt-get install git\r\n\r\n> to check version of Git\r\n\r\ngit --version\r\n\r\n> to set up username and email\r\n\r\ngit config --global user.name \"addania\"\r\n\r\ngit config --global user.email \"mirka.schw@gmail.com\"\r\n\r\n> to check status of my git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:\r\n\r\ngit status\r\n\r\n> to see history of commits\r\n\r\ngit log\r\n\r\n> The git init command creates a new Git repository. Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:\r\n\r\n<code> git init </code>\r\n\r\n> in order to commit anything, we first need to add files to staging area by using following command (dot means all files):\r\n\r\ngit add . \r\n\r\n> to commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:\r\n\r\ngit commit\r\n\r\n> to commit files to LOCAL git repository with a message already included in the command:\r\n\r\ngit commit -m \"message goes here\"\r\n\r\n> to see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):\r\n\r\ngit remote -v\r\n\r\n> to add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository\r\n\r\ngit remote add origin git@github.com:addania/addania.com.git\r\n\r\ngit remote add origin git@github.com:addania/knowledgeBase.git  \r\n\r\n> to rename origin with new url if I need to change my repository name:\r\n\r\ngit remote set-url origin git@github.com:addania/addania.github.io.git\r\n\r\ngit remote set-url origin git@github.com:addania/addania.com.git\r\n\r\n> to check how many branches I have in my repository, if there is only one, the main one will be called usually master:\r\n\r\ngit branch\r\n\r\n> to push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the banch in the project, main branch is called master:\r\n\r\ngit push origin master\r\n\r\n> If I dont want to write always git push origin master -force I can create upstream and link local to remote git by -u. After this command then I can use only git push to upload files\r\n\r\ngit push -u origin master -f\r\n\r\n> to overwrite anything on the REMOTE repository in master branch we can force push:\r\n\r\ngit push origin master --force \r\n\r\n> pulling down files from remote git to local git, where origin is name of my remote git and master is name of branch:\r\n\r\ngit pull origin master","frontmatter":{"date":"2019-09-25","title":"Intro to Git"},"fields":{"slug":"/Intro_to_Git/"},"timeToRead":4,"html":"<p>Git is a file versioning system. </p>\n<p>Some Git definitions first:</p>\n<p>LOCAL\nWhen we talk about LOCAL we mean anything that is stored locally on your computer harddrive</p>\n<p>REMOTE\nWhen we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.</p>\n<p>General Git workflow:\nFirst we need to link our LOCAL and REMOTE repositories using SSH Key.\nFirst we need to generate our LOCAL SSH key which we then paste to REMORE GitHub.</p>\n<p>Imagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing git init command which will create a subfolder git in my current project folder.\nThen I work on my project files and make changes to my website. Firstly I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:\ngit add .\ngit commit -m \"message goes here\"</p>\n<p>When our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.</p>\n<p>Then we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention):\ngit remote add origin remote repository URL\nfor example:\ngit remote add origin git@github.com:addania/addania.com.git </p>\n<p>To verify if our new remote was added we can check the git remote -v command.\nThen we are ready to puch our LOCAL git repository to the REMOTE Github repository:\ngit push origin master</p>\n<blockquote>\n<p>In order to install git we need to have apt-get updated. To update apt-get</p>\n</blockquote>\n<p>sudo apt-get update</p>\n<blockquote>\n<p>to install Git</p>\n</blockquote>\n<p>sudo apt-get install git</p>\n<blockquote>\n<p>to check version of Git</p>\n</blockquote>\n<p>git --version</p>\n<blockquote>\n<p>to set up username and email</p>\n</blockquote>\n<p>git config --global user.name \"addania\"</p>\n<p>git config --global user.email \"mirka.schw@gmail.com\"</p>\n<blockquote>\n<p>to check status of my git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:</p>\n</blockquote>\n<p>git status</p>\n<blockquote>\n<p>to see history of commits</p>\n</blockquote>\n<p>git log</p>\n<blockquote>\n<p>The git init command creates a new Git repository. Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:</p>\n</blockquote>\n<p><code> git init </code></p>\n<blockquote>\n<p>in order to commit anything, we first need to add files to staging area by using following command (dot means all files):</p>\n</blockquote>\n<p>git add . </p>\n<blockquote>\n<p>to commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:</p>\n</blockquote>\n<p>git commit</p>\n<blockquote>\n<p>to commit files to LOCAL git repository with a message already included in the command:</p>\n</blockquote>\n<p>git commit -m \"message goes here\"</p>\n<blockquote>\n<p>to see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):</p>\n</blockquote>\n<p>git remote -v</p>\n<blockquote>\n<p>to add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository</p>\n</blockquote>\n<p>git remote add origin git@github.com:addania/addania.com.git</p>\n<p>git remote add origin git@github.com:addania/knowledgeBase.git  </p>\n<blockquote>\n<p>to rename origin with new url if I need to change my repository name:</p>\n</blockquote>\n<p>git remote set-url origin git@github.com:addania/addania.github.io.git</p>\n<p>git remote set-url origin git@github.com:addania/addania.com.git</p>\n<blockquote>\n<p>to check how many branches I have in my repository, if there is only one, the main one will be called usually master:</p>\n</blockquote>\n<p>git branch</p>\n<blockquote>\n<p>to push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the banch in the project, main branch is called master:</p>\n</blockquote>\n<p>git push origin master</p>\n<blockquote>\n<p>If I dont want to write always git push origin master -force I can create upstream and link local to remote git by -u. After this command then I can use only git push to upload files</p>\n</blockquote>\n<p>git push -u origin master -f</p>\n<blockquote>\n<p>to overwrite anything on the REMOTE repository in master branch we can force push:</p>\n</blockquote>\n<p>git push origin master --force </p>\n<blockquote>\n<p>pulling down files from remote git to local git, where origin is name of my remote git and master is name of branch:</p>\n</blockquote>\n<p>git pull origin master</p>"}},{"node":{"id":"1077652f-d780-5c05-bb3c-a68689430db4","excerpt":"HomeBrew helps to install softwares. see current version of homebrew brew -v update brew brew update installing software hello brew install…","rawMarkdownBody":"\r\nHomeBrew helps to install softwares.\r\n\r\n> see current version of homebrew\r\n\r\nbrew -v\r\n\r\n> update brew\r\n\r\nbrew update\r\n\r\n> installing software hello\r\n\r\nbrew install hello\r\n\r\n> install node\r\n\r\nbrew install node\r\n\r\n> checking version of node\r\n\r\nnode --version\r\n","frontmatter":{"date":"2019-09-24","title":"Intro to HomeBrew"},"fields":{"slug":"/Intro_to_HomeBrew/"},"timeToRead":1,"html":"<p>HomeBrew helps to install softwares.</p>\n<blockquote>\n<p>see current version of homebrew</p>\n</blockquote>\n<p>brew -v</p>\n<blockquote>\n<p>update brew</p>\n</blockquote>\n<p>brew update</p>\n<blockquote>\n<p>installing software hello</p>\n</blockquote>\n<p>brew install hello</p>\n<blockquote>\n<p>install node</p>\n</blockquote>\n<p>brew install node</p>\n<blockquote>\n<p>checking version of node</p>\n</blockquote>\n<p>node --version</p>"}},{"node":{"id":"f2ea98e2-12e0-5c6a-83a4-4cbc2689f36c","excerpt":"General: It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a…","rawMarkdownBody":"\r\nGeneral:\r\n\r\nIt is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It wont have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.\r\n\r\nUbuntu directory on PC:\r\n\r\n\\\\wsl$\\Ubuntu-18.04\\home\\addania\r\n\r\nControls:\r\n\r\nCopy/Paste works differently in Ubuntu: ctrl+shift+c for copy, crtl+shift+v for paste\r\nSome commands will start with sudo which means to run as administrator\r\nj and k keys allows navigate up and down\r\nh and l allow to navigate left and right\r\n\r\nCommands:\r\n\r\n> to show which directory I am currently in we use command pwd (print working directory)\r\n\r\npwd\r\n\r\n> to display list of all files in a current directory\r\n\r\nls\r\n\r\n> to display list of all files in a current directory including hidden files (those with ., ex: .git)\r\n\r\nls -a\r\n\r\n> change directory cd + name of the directory (ex: cd src will go to folder called src in your currnet folder), this is to go one directory down the tree\r\n\r\ncd src\r\n\r\n> to go one directory up the tree\r\n\r\ncd ..\r\n\r\n> to create a folder\r\n\r\nmkdir\r\n\r\n> to create a new file called global.css\r\n\r\ntouch global.css","frontmatter":{"date":"2019-09-23","title":"Intro to Ubuntu"},"fields":{"slug":"/Intro_to_Ubuntu/"},"timeToRead":1,"html":"<p>General:</p>\n<p>It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It wont have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.</p>\n<p>Ubuntu directory on PC:</p>\n<p>\\wsl$\\Ubuntu-18.04\\home\\addania</p>\n<p>Controls:</p>\n<p>Copy/Paste works differently in Ubuntu: ctrl+shift+c for copy, crtl+shift+v for paste\nSome commands will start with sudo which means to run as administrator\nj and k keys allows navigate up and down\nh and l allow to navigate left and right</p>\n<p>Commands:</p>\n<blockquote>\n<p>to show which directory I am currently in we use command pwd (print working directory)</p>\n</blockquote>\n<p>pwd</p>\n<blockquote>\n<p>to display list of all files in a current directory</p>\n</blockquote>\n<p>ls</p>\n<blockquote>\n<p>to display list of all files in a current directory including hidden files (those with ., ex: .git)</p>\n</blockquote>\n<p>ls -a</p>\n<blockquote>\n<p>change directory cd + name of the directory (ex: cd src will go to folder called src in your currnet folder), this is to go one directory down the tree</p>\n</blockquote>\n<p>cd src</p>\n<blockquote>\n<p>to go one directory up the tree</p>\n</blockquote>\n<p>cd ..</p>\n<blockquote>\n<p>to create a folder</p>\n</blockquote>\n<p>mkdir</p>\n<blockquote>\n<p>to create a new file called global.css</p>\n</blockquote>\n<p>touch global.css</p>"}}],"totalCount":15}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}