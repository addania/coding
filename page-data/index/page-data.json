{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"1bea878426c21dff659f","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"21a8ae64-a3bd-53f6-b2a0-7b204e3ec5b3","excerpt":"\"Place code as close to where it's relevant as possible.\" Kent C. Dodds \"Things that change together should be located as close as…","rawMarkdownBody":"\r\n![](https://i.imgur.com/xI4DXv7.jpg \"Photo by ELEVATE from Pexels\")\r\n\r\n> \"Place code as close to where it's relevant as possible.\"\r\n\r\nKent C. Dodds\r\n\r\n> \"Things that change together should be located as close as reasonable.\"\r\n\r\nDan Abramov\r\n\r\nThis means for example if a component is using some functions and these functions are not used in any other places, then place those functions within the same file but outside of the component, rather then creating an external file for for each function. \r\n\r\nAll elements that logically belong to gether should be kept close to each other. \r\n\r\nSame goes for tests, these should be kept as close to the function files as possible. If there are only couple of function files, their tests can reside next to them. This is to remind the future you or other developers not to forget to update tests when functions change. If there are many function files and main folder would be clattred, create a dedicated subfolder for tests.\r\n\r\nReference:\r\n\r\nhttps://kentcdodds.com/blog/colocation/\r\n\r\n![](https://i.imgur.com/VwFJtH1.jpg \"Photo by Anastasiya Lobanovskaya from Pexels\")","frontmatter":{"date":"2020-02-20","title":"Colocation"},"fields":{"slug":"/Colocation/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/xI4DXv7.jpg\" title=\"Photo by ELEVATE from Pexels\"></p>\n<blockquote>\n<p>\"Place code as close to where it's relevant as possible.\"</p>\n</blockquote>\n<p>Kent C. Dodds</p>\n<blockquote>\n<p>\"Things that change together should be located as close as reasonable.\"</p>\n</blockquote>\n<p>Dan Abramov</p>\n<p>This means for example if a component is using some functions and these functions are not used in any other places, then place those functions within the same file but outside of the component, rather then creating an external file for for each function. </p>\n<p>All elements that logically belong to gether should be kept close to each other. </p>\n<p>Same goes for tests, these should be kept as close to the function files as possible. If there are only couple of function files, their tests can reside next to them. This is to remind the future you or other developers not to forget to update tests when functions change. If there are many function files and main folder would be clattred, create a dedicated subfolder for tests.</p>\n<p>Reference:</p>\n<p><a href=\"https://kentcdodds.com/blog/colocation/\">https://kentcdodds.com/blog/colocation/</a></p>\n<p><img src=\"https://i.imgur.com/VwFJtH1.jpg\" title=\"Photo by Anastasiya Lobanovskaya from Pexels\"></p>"}},{"node":{"id":"3fc7e6f1-50ed-50bf-9785-9248e5afe354","excerpt":"The most fascinating model of how to work with branches and how to merge them in order to enable the entire dev team to work efficiently and…","rawMarkdownBody":"\r\n![](https://i.imgur.com/uOGLcr9.png \"Photo by Vincent Driessen from https://nvie.com/\")\r\n\r\nThe most fascinating model of how to work with branches and how to merge them in order to enable the entire dev team to work efficiently and in a structured manner.\r\n\r\nReference:\r\n\r\nhttps://nvie.com/posts/a-successful-git-branching-model/\r\n","frontmatter":{"date":"2020-02-19","title":"Git Flow"},"fields":{"slug":"/Git_Flow/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/uOGLcr9.png\" title=\"Photo by Vincent Driessen from https://nvie.com/\"></p>\n<p>The most fascinating model of how to work with branches and how to merge them in order to enable the entire dev team to work efficiently and in a structured manner.</p>\n<p>Reference:</p>\n<p><a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">https://nvie.com/posts/a-successful-git-branching-model/</a></p>"}},{"node":{"id":"bbaa5c47-034d-51c0-ad9b-29c08b790043","excerpt":"Here we go! Finally the time has come to explore the opportunities of Gaming on Linux. I honestly didn't really think I might be able to get…","rawMarkdownBody":"\r\n![](https://i.imgur.com/jy1aFWj.jpg \"Photo by Lucie Liz from Pexels\")\r\n\r\nHere we go! Finally the time has come to explore the opportunities of Gaming on Linux. I honestly didn't really think I might be able to get it going, but somehow it turned out that Steam has some excellent initiative called Steam Play which allows Linux users to run some games which are originally only supported on Windows. \r\n\r\nLet's see what is necessary to do:\r\n\r\n> First of course you need to have a Steam account and you need to download Steam on your Linux. You can go to Ubuntu Software app and download Steam Installer.\r\n\r\n> Then install WineTricks via console:\r\n```\r\nsudo apt-get install wine winetricks\r\n```\r\n\r\n> Then go to Steam > Settings > Steam Play and check both boxes:\r\n\r\n**1//** Enable Steam Play for supported titles\r\n\r\n**2//** Enable Steam Play for all other titles\r\n\r\n> Then also select Proton 4.11-12 from the option: <code>Run other titles with</code>.\r\n\r\n> Click **OK**\r\n\r\n> Then download and install Age of Empires on your Steam and try to run it! Probably you will get an error but at least you will create a Proton file.\r\n\r\n> Then go to your terminal and paste this code:\r\n```\r\nWINEPREFIX=\"/home/YOUR_PROFILE/.steam/steam/steamapps/compatdata/105450/pfx/\" winetricks mfc42 l3codecx winxp\r\n```\r\n\r\nwhere YOUR_PROFILE is name of your profile on your Linux. In my case it is <code>addania</code>, so my final code is:\r\n```\r\nWINEPREFIX=\"/home/addania/.steam/steam/steamapps/compatdata/105450/pfx/\" winetricks mfc42 l3codecx winxp\r\n```\r\n\r\n> Then try to run Age of Empires again. It hopefully should work. <code>HAPPY GAMING</code> :) \r\n\r\n> Some useful articles:\r\n\r\nhttps://askubuntu.com/questions/306665/can-i-play-windows-steam-games-on-ubuntu\r\n\r\nhttps://itsfoss.com/steam-play/\r\n\r\nhttps://steamcommunity.com/app/105450/discussions/0/3220528325728647640/\r\n\r\nhttps://www.protondb.com/app/105450\r\n\r\n![](https://i.imgur.com/MK6LK5L.jpg \"Photo by John Petalcurin from Pexels\")","frontmatter":{"date":"2020-01-18","title":"Gaming on Linux"},"fields":{"slug":"/Gaming_On_Linux/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/jy1aFWj.jpg\" title=\"Photo by Lucie Liz from Pexels\"></p>\n<p>Here we go! Finally the time has come to explore the opportunities of Gaming on Linux. I honestly didn't really think I might be able to get it going, but somehow it turned out that Steam has some excellent initiative called Steam Play which allows Linux users to run some games which are originally only supported on Windows. </p>\n<p>Let's see what is necessary to do:</p>\n<blockquote>\n<p>First of course you need to have a Steam account and you need to download Steam on your Linux. You can go to Ubuntu Software app and download Steam Installer.</p>\n</blockquote>\n<blockquote>\n<p>Then install WineTricks via console:</p>\n</blockquote>\n<pre><code>sudo apt-get install wine winetricks\n</code></pre>\n<blockquote>\n<p>Then go to Steam > Settings > Steam Play and check both boxes:</p>\n</blockquote>\n<p><strong>1//</strong> Enable Steam Play for supported titles</p>\n<p><strong>2//</strong> Enable Steam Play for all other titles</p>\n<blockquote>\n<p>Then also select Proton 4.11-12 from the option: <code>Run other titles with</code>.</p>\n</blockquote>\n<blockquote>\n<p>Click <strong>OK</strong></p>\n</blockquote>\n<blockquote>\n<p>Then download and install Age of Empires on your Steam and try to run it! Probably you will get an error but at least you will create a Proton file.</p>\n</blockquote>\n<blockquote>\n<p>Then go to your terminal and paste this code:</p>\n</blockquote>\n<pre><code>WINEPREFIX=\"/home/YOUR_PROFILE/.steam/steam/steamapps/compatdata/105450/pfx/\" winetricks mfc42 l3codecx winxp\n</code></pre>\n<p>where YOUR_PROFILE is name of your profile on your Linux. In my case it is <code>addania</code>, so my final code is:</p>\n<pre><code>WINEPREFIX=\"/home/addania/.steam/steam/steamapps/compatdata/105450/pfx/\" winetricks mfc42 l3codecx winxp\n</code></pre>\n<blockquote>\n<p>Then try to run Age of Empires again. It hopefully should work. <code>HAPPY GAMING</code> :) </p>\n</blockquote>\n<blockquote>\n<p>Some useful articles:</p>\n</blockquote>\n<p><a href=\"https://askubuntu.com/questions/306665/can-i-play-windows-steam-games-on-ubuntu\">https://askubuntu.com/questions/306665/can-i-play-windows-steam-games-on-ubuntu</a></p>\n<p><a href=\"https://itsfoss.com/steam-play/\">https://itsfoss.com/steam-play/</a></p>\n<p><a href=\"https://steamcommunity.com/app/105450/discussions/0/3220528325728647640/\">https://steamcommunity.com/app/105450/discussions/0/3220528325728647640/</a></p>\n<p><a href=\"https://www.protondb.com/app/105450\">https://www.protondb.com/app/105450</a></p>\n<p><img src=\"https://i.imgur.com/MK6LK5L.jpg\" title=\"Photo by John Petalcurin from Pexels\"></p>"}},{"node":{"id":"40b1faea-dde4-5d40-8f4d-77f0bf872da4","excerpt":"Happy New Year and let's learn something right away. How about something cool, I don't know, maybe how to create and download txt file upon…","rawMarkdownBody":"\r\n![](https://i.imgur.com/o5VQqra.jpg \"Photo by Dominika Roseclay from Pexels\")\r\n\r\nHappy New Year and let's learn something right away. How about something cool, I don't know, maybe how to create and download txt file upon a button click :) \r\n\r\n> In order to do so, you will need a following function:\r\n```\r\nfunction download(data, filename, type) {\r\n    var file = new Blob([data], {type: type});\r\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\r\n        window.navigator.msSaveOrOpenBlob(file, filename);\r\n    else { // Others\r\n        var a = document.createElement(\"a\"),\r\n                url = URL.createObjectURL(file);\r\n        a.href = url;\r\n        a.download = filename;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        setTimeout(function() {\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(url);  \r\n        }, 0); \r\n    }\r\n}\r\n```\r\n\r\n> You can then call this function in you Component button-click-handler-function:\r\n```\r\ndownload(data, \"fileName.txt\", \"text/plain\")\r\n```\r\n> **Tip:** imagine your <code>data</code> is array of strings, such as:\r\n```\r\nconst input = [\".#.\",\"#.#\",\".#.\" ]\r\n```\r\n\r\n> If you just print out this file, it will concatenate the elements into one long string. \r\n```\r\n\".#.#.#.#.\"\r\n```\r\n\r\n>What if we wanted each element on a separate line, so that the result is:\r\n```\r\n\".#.\"\r\n\"#.#\"\r\n\".#.\"\r\n```\r\n>In order to do so we need to create a single string from array elements and this string will be sparated by NewLine character <code>\\n</code>\r\n\r\n>We can use a function to create such a string:\r\n```\r\nconst data=input.join(\"\\n\")\r\n```\r\n\r\nReference:\r\n\r\nhttps://stackoverflow.com/questions/13405129/javascript-create-and-save-file\r\n\r\n![](https://i.imgur.com/aF3EWOK.jpg \"Photo by picjumbo.com from Pexels\")","frontmatter":{"date":"2020-01-03","title":"Create and download file in Javascript"},"fields":{"slug":"/Create_and_Download_File_JS/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/o5VQqra.jpg\" title=\"Photo by Dominika Roseclay from Pexels\"></p>\n<p>Happy New Year and let's learn something right away. How about something cool, I don't know, maybe how to create and download txt file upon a button click :) </p>\n<blockquote>\n<p>In order to do so, you will need a following function:</p>\n</blockquote>\n<pre><code>function download(data, filename, type) {\n    var file = new Blob([data], {type: type});\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\n        window.navigator.msSaveOrOpenBlob(file, filename);\n    else { // Others\n        var a = document.createElement(\"a\"),\n                url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(function() {\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);  \n        }, 0); \n    }\n}\n</code></pre>\n<blockquote>\n<p>You can then call this function in you Component button-click-handler-function:</p>\n</blockquote>\n<pre><code>download(data, \"fileName.txt\", \"text/plain\")\n</code></pre>\n<blockquote>\n<p><strong>Tip:</strong> imagine your <code>data</code> is array of strings, such as:</p>\n</blockquote>\n<pre><code>const input = [\".#.\",\"#.#\",\".#.\" ]\n</code></pre>\n<blockquote>\n<p>If you just print out this file, it will concatenate the elements into one long string. </p>\n</blockquote>\n<pre><code>\".#.#.#.#.\"\n</code></pre>\n<blockquote>\n<p>What if we wanted each element on a separate line, so that the result is:</p>\n</blockquote>\n<pre><code>\".#.\"\n\"#.#\"\n\".#.\"\n</code></pre>\n<blockquote>\n<p>In order to do so we need to create a single string from array elements and this string will be sparated by NewLine character <code>\\n</code></p>\n</blockquote>\n<blockquote>\n<p>We can use a function to create such a string:</p>\n</blockquote>\n<pre><code>const data=input.join(\"\\n\")\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/13405129/javascript-create-and-save-file\">https://stackoverflow.com/questions/13405129/javascript-create-and-save-file</a></p>\n<p><img src=\"https://i.imgur.com/aF3EWOK.jpg\" title=\"Photo by picjumbo.com from Pexels\"></p>"}},{"node":{"id":"0a4688bb-43aa-5cd2-891e-48ccb5173313","excerpt":"Ubuntu does not have WinRar, as this is a Windows software. In order to be able to open .rar folders and unpack them correctly, we will need…","rawMarkdownBody":"\r\n![](https://i.imgur.com/qlTfidI.jpg \"Photo by Miray Bostancı from Pexels\")\r\n\r\nUbuntu does not have WinRar, as this is a Windows software. In order to be able to open <code>.rar</code> folders and unpack them correctly, we will need to do following 2 commands:\r\n```\r\nsudo apt-get install rar\r\n```\r\n\r\n```\r\nsudo apt-get install unrar\r\n```\r\n\r\nResources:\r\n\r\nhttps://askubuntu.com/questions/147258/winrar-installation-on-ubuntu/147262","frontmatter":{"date":"2019-12-29","title":"Install rar on Linux"},"fields":{"slug":"/Linux_Install_Rar/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/qlTfidI.jpg\" title=\"Photo by Miray Bostancı from Pexels\"></p>\n<p>Ubuntu does not have WinRar, as this is a Windows software. In order to be able to open <code>.rar</code> folders and unpack them correctly, we will need to do following 2 commands:</p>\n<pre><code>sudo apt-get install rar\n</code></pre>\n<pre><code>sudo apt-get install unrar\n</code></pre>\n<p>Resources:</p>\n<p><a href=\"https://askubuntu.com/questions/147258/winrar-installation-on-ubuntu/147262\">https://askubuntu.com/questions/147258/winrar-installation-on-ubuntu/147262</a></p>"}},{"node":{"id":"35a05121-4914-52b2-87d6-8ae645047245","excerpt":"In order to install Notepad++ we need a snap tool. To check if it is installed, we can type to command line: If it is not installed, we can…","rawMarkdownBody":"\r\n![](https://i.imgur.com/LVjRiAO.png \"Notepad++ logo\")\r\n\r\nIn order to install Notepad++ we need a snap tool. To check if it is installed, we can type to command line:\r\n```\r\nsudo apt list\r\n```\r\n\r\nIf it is not installed, we can install it with following command:\r\n\r\n```\r\nsudo apt-get install snapd snapd-xdg-open\r\n```\r\n\r\nAfterwards we can instal Notepad++ itself:\r\n```\r\nsudo snap install notepad-plus-plus\r\n```\r\n\r\nResources:\r\n\r\nhttps://vitux.com/how-to-install-notepad-on-ubuntu/","frontmatter":{"date":"2019-12-28","title":"Install Notepad++ on Linux"},"fields":{"slug":"/Linux_Install_Nodepad++/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/LVjRiAO.png\" title=\"Notepad++ logo\"></p>\n<p>In order to install Notepad++ we need a snap tool. To check if it is installed, we can type to command line:</p>\n<pre><code>sudo apt list\n</code></pre>\n<p>If it is not installed, we can install it with following command:</p>\n<pre><code>sudo apt-get install snapd snapd-xdg-open\n</code></pre>\n<p>Afterwards we can instal Notepad++ itself:</p>\n<pre><code>sudo snap install notepad-plus-plus\n</code></pre>\n<p>Resources:</p>\n<p><a href=\"https://vitux.com/how-to-install-notepad-on-ubuntu/\">https://vitux.com/how-to-install-notepad-on-ubuntu/</a></p>"}},{"node":{"id":"464a667b-eec6-5d62-bc62-0c284c4d406a","excerpt":"Starter HTML document starts with  to tell the browser which html version we are using,rather then letting the browser pick one. By the…","rawMarkdownBody":"\r\n![](https://i.imgur.com/37IM7Po.jpg \"Photo by Miguel Á. Padriñán from Pexels\")\r\n\r\n**Starter**\r\n\r\nHTML document starts with <code><!doctype html></code> to tell the browser which html version we are using,rather then letting the browser pick one. By the following code we actually say we want the latest version:\r\n```\r\n<!doctype html>\r\n```\r\n\r\nAfterwards we use html tag and then head and body tags.\r\n```\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n```\r\n<code>head</code> tag includes information about the page itself. It can contain title which will display nam of the page in the tab. \r\n```\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n    <title>My website</title>\r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n```\r\n\r\nIt can contain style sheets imported to website via <code>link</code> tag or javascript imported via <code>script</code> tag:\r\n```\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n    <title>My website</title>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"theme.css\">\r\n    <script src=\"myscripts.js\"></script>\r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n```\r\n<code>body</code> tag includes content of the webpage\r\n\r\n**Empty tags**\r\n\r\nAn empty tag is a one which does not need a closing tag. Examples:\r\n\r\n**1//**\r\n<code>```<br>```</code> tag is a page break and is an empty tag\r\n\r\n```\r\n<br>\r\n```\r\n\r\n**2//**\r\n<code>```<img>```</code> tag to display images\r\n```\r\n<img src=\"myPhoto.jpg\" alt=\"photo\">\r\n```\r\n\r\n**3//**\r\n<code>```<link```</code> tag is an empty tag and allows to import different files to the HTML or create links to other URLs \r\n```\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"theme.css\">\r\n\r\n```\r\n\r\n**Including CSS in HTML**\r\n\r\nWe can use 3 different ways to add styles to our webpage:\r\n\r\n**1//** Add style to individual tag\r\n```\r\n<h1 style=\"color:blue;\">This is a Blue Heading</h1>\r\n```\r\n\r\n**2//**  Add style tags to <code>head</code> tag\r\n```\r\n<head>\r\n  <style>\r\n    p {\r\n\t  color: white;\r\n\t  background-color: black;\r\n    }\r\n  </style>\r\n</head>  \r\n```\r\n\r\n**3//** Include stylesheets in the HTML in the head tag using link tag \r\n```\r\n<link r⁠e⁠l⁠=⁠\"⁠s⁠t⁠y⁠l⁠e⁠s⁠h⁠e⁠e⁠t⁠” href=“style.css”>\r\n```\r\n\r\n<code>rel</code> says what kind of file we want to include\r\n<code>href</code> says the path or URL where the file exists\r\n\r\n**Nested lists**\r\n\r\nWe can create nested list. An example is here:\r\n```\r\nDrinks:\r\n<ul>\r\n  <li>Coffee</li>\r\n  <li>Tea\r\n    <ol>\r\n      <li>Herbal tea</li>\r\n      <li>Black tea</li>\r\n      <li>Green tea</li>\r\n      <li>White tea</li>\r\n    </ol>\r\n  </li>\r\n  <li>Milk</li>\r\n</ul>\r\n```\r\nResult will look like this:\r\n\r\nDrinks:\r\n<ul>\r\n  <li>Coffee</li>\r\n  <li>Tea\r\n    <ol>\r\n      <li>Herbal tea</li>\r\n      <li>Black tea</li>\r\n      <li>Green tea</li>\r\n      <li>White tea</li>\r\n    </ol>\r\n  </li>\r\n  <li>Milk</li>\r\n</ul>","frontmatter":{"date":"2019-12-27","title":"HTML"},"fields":{"slug":"/HTML/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/37IM7Po.jpg\" title=\"Photo by Miguel Á. Padriñán from Pexels\"></p>\n<p><strong>Starter</strong></p>\n<p>HTML document starts with <code><!doctype html></code> to tell the browser which html version we are using,rather then letting the browser pick one. By the following code we actually say we want the latest version:</p>\n<pre><code>&#x3C;!doctype html>\n</code></pre>\n<p>Afterwards we use html tag and then head and body tags.</p>\n<pre><code>&#x3C;!doctype html>\n&#x3C;html>\n  &#x3C;head>\n  &#x3C;/head>\n  &#x3C;body>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><code>head</code> tag includes information about the page itself. It can contain title which will display nam of the page in the tab. </p>\n<pre><code>&#x3C;!doctype html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;title>My website&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>It can contain style sheets imported to website via <code>link</code> tag or javascript imported via <code>script</code> tag:</p>\n<pre><code>&#x3C;!doctype html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;title>My website&#x3C;/title>\n    &#x3C;link rel=\"stylesheet\" type=\"text/css\" href=\"theme.css\">\n    &#x3C;script src=\"myscripts.js\">&#x3C;/script>\n  &#x3C;/head>\n  &#x3C;body>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><code>body</code> tag includes content of the webpage</p>\n<p><strong>Empty tags</strong></p>\n<p>An empty tag is a one which does not need a closing tag. Examples:</p>\n<p><strong>1//</strong>\n<code><code>&#x3C;br></code></code> tag is a page break and is an empty tag</p>\n<pre><code>&#x3C;br>\n</code></pre>\n<p><strong>2//</strong>\n<code><code>&#x3C;img></code></code> tag to display images</p>\n<pre><code>&#x3C;img src=\"myPhoto.jpg\" alt=\"photo\">\n</code></pre>\n<p><strong>3//</strong>\n<code><code>&#x3C;link</code></code> tag is an empty tag and allows to import different files to the HTML or create links to other URLs </p>\n<pre><code>&#x3C;link rel=\"stylesheet\" type=\"text/css\" href=\"theme.css\">\n</code></pre>\n<p><strong>Including CSS in HTML</strong></p>\n<p>We can use 3 different ways to add styles to our webpage:</p>\n<p><strong>1//</strong> Add style to individual tag</p>\n<pre><code>&#x3C;h1 style=\"color:blue;\">This is a Blue Heading&#x3C;/h1>\n</code></pre>\n<p><strong>2//</strong>  Add style tags to <code>head</code> tag</p>\n<pre><code>&#x3C;head>\n  &#x3C;style>\n    p {\n      color: white;\n      background-color: black;\n    }\n  &#x3C;/style>\n&#x3C;/head>  \n</code></pre>\n<p><strong>3//</strong> Include stylesheets in the HTML in the head tag using link tag </p>\n<pre><code>&#x3C;link r⁠e⁠l⁠=⁠\"⁠s⁠t⁠y⁠l⁠e⁠s⁠h⁠e⁠e⁠t⁠” href=“style.css”>\n</code></pre>\n<p><code>rel</code> says what kind of file we want to include\n<code>href</code> says the path or URL where the file exists</p>\n<p><strong>Nested lists</strong></p>\n<p>We can create nested list. An example is here:</p>\n<pre><code>Drinks:\n&#x3C;ul>\n  &#x3C;li>Coffee&#x3C;/li>\n  &#x3C;li>Tea\n    &#x3C;ol>\n      &#x3C;li>Herbal tea&#x3C;/li>\n      &#x3C;li>Black tea&#x3C;/li>\n      &#x3C;li>Green tea&#x3C;/li>\n      &#x3C;li>White tea&#x3C;/li>\n    &#x3C;/ol>\n  &#x3C;/li>\n  &#x3C;li>Milk&#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<p>Result will look like this:</p>\n<p>Drinks:</p>\n<ul>\n  <li>Coffee</li>\n  <li>Tea\n    <ol>\n      <li>Herbal tea</li>\n      <li>Black tea</li>\n      <li>Green tea</li>\n      <li>White tea</li>\n    </ol>\n  </li>\n  <li>Milk</li>\n</ul>"}},{"node":{"id":"ae22f85d-bff7-5b49-b6a1-7a36b7454ddf","excerpt":"I will miss you! Trully. All the code adventures we have been through together. Those code advent loop incention craziness we did together…","rawMarkdownBody":"\r\n![](https://i.imgur.com/hw5qopR.jpg \"Photo by Helena Lopes from Pexels\")\r\n\r\nI will miss you! Trully. All the code adventures we have been through together. Those code advent loop incention craziness we did together :) I shall never forget you and we WILL meet again. But the new era of functional programming came and it is time to explore new possibilities of xmap, filter and reduce. They say it is more elegant, more sexy and more readable with map, filter and reduce. I would argue against it... but I also want to learn new concepts and hone my skills. So here we are, let's explore unknown together.\r\n\r\n**MAP**\r\n\r\nMap can be used on an array to iterate over EVERY SINGLE element of it. And here we go already, right from the start, drawback of map compared to for loops is that map cannot be broken out of, whereas in loops we can use simple <code>break;</code> to get out of it (just saying ;) )\r\n\r\nNevertheless, map will need an array to loop over and then a function. This function will be performed over every single element of the array and it will return A NEW array where each element will be whatever the function returns\r\n\r\nExample:\r\n```\r\nconst array1 = [1, 4, 9, 16];\r\n// pass a function to map\r\nconst map1 = array1.map(x => x * 2);\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\nThis code can be re-written to make it more clear:\r\n```\r\nconst array1 = [1, 4, 9, 16];\r\nconst myFunction = (x) => {\r\n  const double = x*2;\r\n  return double\r\n}\r\nconst map1 = array1.map(myFunction);\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\n\r\nYet another way how to write this code:\r\n```\r\nconst array1 = [1, 4, 9, 16];\r\n// pass a function to map\r\nconst map1 = array1.map(function(x){ return x * 2});\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\n\r\nCompare especially **EXPLICIT RETURN**:\r\n```\r\nconst map1 = array1.map(function(x){ return x * 2});\r\n```\r\nwith this **IMPLICIT RETURN**:\r\n```\r\nconst map1 = array1.map(x => x * 2);\r\n```\r\n\r\nHere we can see more clearly that map receives a FUNCTION as input. This function can be either declared somewhere else (second example) or it can be anonymous function directly in between of the .map brackets (first example).\r\n\r\nIt is also more clear that the body of the function can be literally anything, any calculation, but what matters is what is the return of that function. Because the return of the function will define what the new element of the new array will be.\r\n\r\nSome code re-factoring from for loops to using map:\r\n\r\nold:\r\n```\r\nfunction formatImpressions(input) {\r\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\r\n  for (let row = 0; row < input.length; row++) {\r\n    if (!input[row].Impressions) {\r\n      input[row].Impressions = 0;\r\n    }\r\n    if (!input[row].Clicks) {\r\n      input[row].Clicks = 0;\r\n    }\r\n  }\r\n  return input;\r\n}\r\n```\r\n\r\nnew:\r\n```\r\nexport const formatImpressions = input => {\r\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\r\n\r\n  const formatNumbers = row => {\r\n    if (!row.Impressions) {\r\n      row.Impressions = 0;\r\n    }\r\n    if (!row.Clicks) {\r\n      row.Clicks = 0;\r\n    }\r\n    return row;\r\n  };\r\n  const output = input.map(formatNumbers);\r\n  return output;\r\n};\r\n```\r\n\r\nold:\r\n```\r\nfunction extractDate(input) {\r\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\r\n  const dataWithDate = [];\r\n  for (let row = 0; row < input.length; row++) {\r\n    const entry = { ...input[row] };\r\n    const oldDate = input[row].Date;\r\n\r\n    const year = oldDate.slice(6, 10);\r\n    const month = oldDate.slice(3, 5);\r\n    const day = oldDate.slice(0, 2);\r\n    const newDate = year + \"-\" + month + \"-\" + day;\r\n    const dateFormatted = new Date(newDate);\r\n    entry.Date = dateFormatted;\r\n    dataWithDate.push(entry);\r\n  }\r\n  return dataWithDate;\r\n}\r\n```\r\n\r\nnew:\r\n```\r\nexport const extractDate = input => {\r\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\r\n  const convertDate = row => {\r\n    const entry = { ...row };\r\n    const oldDate = row.Date;\r\n    const year = oldDate.slice(6, 10);\r\n    const month = oldDate.slice(3, 5);\r\n    const day = oldDate.slice(0, 2);\r\n    const newDate = year + \"-\" + month + \"-\" + day;\r\n    const dateFormatted = new Date(newDate);\r\n    entry.Date = dateFormatted;\r\n    return entry;\r\n  };\r\n  const dataWithDate = input.map(convertDate);\r\n  return dataWithDate;\r\n};\r\n```\r\n\r\nold:\r\n```\r\nimport _ from \"lodash\";\r\nfunction getMetrics(inputData, inputColumns) {\r\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\r\n  // Outputs array of column names which holds numeric values.\r\n  const output = [];\r\n  for (let item = 0; item < inputColumns.length; item++) {\r\n    const col = inputColumns[item];\r\n    if (_.isNumber(inputData[col])) {\r\n      output.push(col);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n```\r\n\r\nnew:\r\n```\r\nexport const getMetrics = (inputData, inputColumns) => {\r\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\r\n  // Outputs array of column names which holds numeric values.\r\n  const output = inputColumns.filter(col => typeof inputData[col] === \"number\");\r\n  return output;\r\n};\r\n```\r\n\r\nold:\r\n```\r\nimport _ from \"lodash\";\r\nfunction getDimensions(inputData, inputColumns) {\r\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\r\n  // Outputs array of column names which holds string values (excluding date formats).\r\n  const output = [];\r\n  for (let item = 0; item < inputColumns.length; item++) {\r\n    const col = inputColumns[item];\r\n    if (_.isString(inputData[col])) {\r\n      output.push(col);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n```\r\n\r\nnew:\r\n```\r\nexport const getDimensions = (inputData, inputColumns) => {\r\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\r\n  // Outputs array of column names which holds string values (excluding date formats).\r\n  const output = inputColumns.filter(col => typeof inputData[col] === \"string\");\r\n  return output;\r\n};\r\n\r\n```\r\n\r\nold:\r\n```\r\nconst moment = require(\"moment\");\r\nfunction formatDate(input) {\r\n  // Receives an array of objects as input and formats date entries into a \"DD. MMM\" format. Outputs data as \"dataWithDate\".\r\n  const formattedDateArray = [];\r\n  for (let row = 0; row < input.length; row++) {\r\n    const entry = { ...input[row] };\r\n    const oldDate = input[row].Date;\r\n    const dateFormatted = moment(oldDate, \"DD.MM.YYYY\").format(\"DD. MMM\");\r\n    entry.Date = dateFormatted;\r\n    formattedDateArray.push(entry);\r\n  }\r\n  return formattedDateArray;\r\n}\r\n```\r\n\r\nnew\r\n```\r\nconst moment = require(\"moment\");\r\nexport const formatDate = input => {\r\n  // Receives an array of objects as input and formats date entries into a \"DD. MMM\" format. Outputs data as \"dataWithDate\".\r\n\r\n  const convertDate = row => {\r\n    const entry = { ...row };\r\n    const oldDate = row.Date;\r\n    const dateFormatted = moment(oldDate, \"DD.MM.YYYY\").format(\"DD. MMM\");\r\n    entry.Date = dateFormatted;\r\n    return entry;\r\n  };\r\n  const formattedDateArray = input.map(convertDate);\r\n  return formattedDateArray;\r\n};\r\n```\r\n\r\n**FOR EACH**\r\nFor each is very similar to map. It iterates through each item of and array and performs a function over it. BUT it DOES NOT returns a NEW array. The forEach() method doesn’t actually return anything (undefined). It simply calls a provided function on each element in your array. This callback is allowed to mutate the calling array.\r\n```\r\nconst books = [\"The Expanse\", \"Lord Of The Rings\", \"Harry Potter\"];\r\nbooks.forEach(function(book, i){\r\n    console.log(book);\r\n});\r\n\r\n//output in console.log:\r\nThe Expanse\r\nVM761:2 Lord Of The Rings\r\nVM761:2 Harry Potter\r\n```\r\n\r\nNotice how books.forEach is NOT assignd to ANY const.\r\n\r\nWe can use forEach also to create a new array, but we would need to create it MANUALLY\r\n\r\n```\r\nconst items = ['item1', 'item2', 'item3'];\r\nconst copy = [];\r\nitems.forEach(function(item){\r\n  copy.push(item);\r\n});\r\n```\r\n\r\n**FILTER**\r\n\r\nFilter iterates over each element of an array and ONLY returns those elements, which fulfill a condition which is given within the function.\r\n```\r\nconst words = ['react', 'javascript', 'html', 'css'];\r\nconst result = words.filter(word => word.length > 5);\r\n// result: [\"javascript\"]\r\n\r\nconst result2 = words.filter(word => word.length < 5);\r\n// result2: ['html', 'css'];\r\n```\r\n\r\nFilter can be re-factored in a way that we declare a function:\r\n```\r\nconst words = ['react', 'javascript', 'html', 'css'];\r\nconst isLonger = (word) => {\r\n  return word.length > 5;\r\n}\r\nconst result = words.filter(isLonger);\r\n// result: [\"javascript\"]\r\n```\r\n\r\n**REDUCE**\r\n\r\nReduce also iterates over every single element of an array and it also has an accumulator which is calculating for example SUM of all items. Result of reduce can be a single number (it can also be an array,  but for basic use it will return one value).\r\n\r\nReduce receives 2 parameters, one is a function which will be performed over each element and second (optional) parameter is the initial value from which we start calculating.\r\n\r\nReduce returns a new value as a result of calculations\r\n\r\n```\r\nconst array1 = [1, 2, 3, 4];\r\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n// 1 + 2 + 3 + 4\r\nconst result = array1.reduce(reducer));\r\n// result: 10\r\n\r\n// 5 + 1 + 2 + 3 + 4\r\nconst result = array1.reduce(reducer, 5));\r\n// result: 15\r\n```\r\n\r\nold:\r\n```\r\nimport _ from \"lodash\";\r\nfunction calculateAggregates(array) {\r\n  // Receives an array of data as input and outputs an array of data aggregated per date.\r\n  // First element of the output array is array of aggregated impressions.\r\n  // Second element of the output array is array of aggregated clicks.\r\n  // Third element of the output array is array of unique dates.\r\n  let groupByDate = _.groupBy(array, \"Date\");\r\n  let uniqueDates = _.keys(groupByDate);\r\n  let impressionsArray = [];\r\n  let clicksArray = [];\r\n\r\n  for (let dayEntry = 0; dayEntry < uniqueDates.length; dayEntry++) {\r\n    let totalImpressions = 0;\r\n    let totalClicks = 0;\r\n\r\n    for (\r\n      let dataRow = 0;\r\n      dataRow < groupByDate[uniqueDates[dayEntry]].length;\r\n      dataRow++\r\n    ) {\r\n      totalImpressions =\r\n        totalImpressions +\r\n        groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\r\n      totalClicks =\r\n        totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\r\n    }\r\n    impressionsArray.push(totalImpressions);\r\n    clicksArray.push(totalClicks);\r\n  }\r\n  return [impressionsArray, clicksArray, uniqueDates];\r\n}\r\n\r\n```\r\n\r\nnew\r\n```\r\nimport _ from \"lodash\";\r\n\r\nexport const calculateAggregates = array => {\r\n  // Receives an array of data as input and outputs an array of data aggregated per date.\r\n  // First element of the output array is array of aggregated impressions.\r\n  // Second element of the output array is array of aggregated clicks.\r\n  // Third element of the output array is array of unique dates.\r\n  const groupByDate = _.groupBy(array, \"Date\");\r\n  const uniqueDates = Object.keys(groupByDate);\r\n  const impressionsArray = uniqueDates.map(item => {\r\n    const sumImp = groupByDate[item].reduce((acc, obj) => {\r\n      return acc + obj.Impressions;\r\n    }, 0);\r\n    return sumImp;\r\n  });\r\n  const clicksArray = uniqueDates.map(item => {\r\n    const sumClick = groupByDate[item].reduce((acc, obj) => {\r\n      return acc + obj.Clicks;\r\n    }, 0);\r\n    return sumClick;\r\n  });\r\n  return [impressionsArray, clicksArray, uniqueDates];\r\n};\r\n\r\n```\r\n\r\n**FILTER AND MAP COMBO **\r\nPowerful way of combining filter and map to get for example a list of guys which are SINGLE :) :) :) very useful (muhahahahaaa)\r\n```\r\nconst guys = [\r\n  {name: 'Danny', single: true},\r\n  {name: 'Calvin', single: true},\r\n  {name: 'Mike', single: true},\r\n  {name: 'Jeff', single: false}\r\n];\r\n\r\nconst isSingle = person => person.single;\r\nconst getName = person => person.name;\r\nconst preys = guys.filter(isSingle).map(getName);\r\nconsole.log(preys) // [\"Danny\", \"Calvin\", \"Mike\"]\r\n\r\n```\r\n\r\nReference:\r\n\r\nhttps://www.codereadability.com/coding-without-loops/\r\n\r\nhttps://kuanhsuh.github.io/JS-functional-programming.html\r\n\r\n![](https://i.imgur.com/fIyDFmN.jpg \"Photo by Pixabay from Pexels\")","frontmatter":{"date":"2019-12-26","title":"Farewell my Good Old Best Buddies For Loops"},"fields":{"slug":"/Farewell_my_Good_Old_Best_Friends_For_Loops/"},"timeToRead":8,"html":"<p><img src=\"https://i.imgur.com/hw5qopR.jpg\" title=\"Photo by Helena Lopes from Pexels\"></p>\n<p>I will miss you! Trully. All the code adventures we have been through together. Those code advent loop incention craziness we did together :) I shall never forget you and we WILL meet again. But the new era of functional programming came and it is time to explore new possibilities of xmap, filter and reduce. They say it is more elegant, more sexy and more readable with map, filter and reduce. I would argue against it... but I also want to learn new concepts and hone my skills. So here we are, let's explore unknown together.</p>\n<p><strong>MAP</strong></p>\n<p>Map can be used on an array to iterate over EVERY SINGLE element of it. And here we go already, right from the start, drawback of map compared to for loops is that map cannot be broken out of, whereas in loops we can use simple <code>break;</code> to get out of it (just saying ;) )</p>\n<p>Nevertheless, map will need an array to loop over and then a function. This function will be performed over every single element of the array and it will return A NEW array where each element will be whatever the function returns</p>\n<p>Example:</p>\n<pre><code>const array1 = [1, 4, 9, 16];\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p>This code can be re-written to make it more clear:</p>\n<pre><code>const array1 = [1, 4, 9, 16];\nconst myFunction = (x) => {\n  const double = x*2;\n  return double\n}\nconst map1 = array1.map(myFunction);\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p>Yet another way how to write this code:</p>\n<pre><code>const array1 = [1, 4, 9, 16];\n// pass a function to map\nconst map1 = array1.map(function(x){ return x * 2});\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p>Compare especially <strong>EXPLICIT RETURN</strong>:</p>\n<pre><code>const map1 = array1.map(function(x){ return x * 2});\n</code></pre>\n<p>with this <strong>IMPLICIT RETURN</strong>:</p>\n<pre><code>const map1 = array1.map(x => x * 2);\n</code></pre>\n<p>Here we can see more clearly that map receives a FUNCTION as input. This function can be either declared somewhere else (second example) or it can be anonymous function directly in between of the .map brackets (first example).</p>\n<p>It is also more clear that the body of the function can be literally anything, any calculation, but what matters is what is the return of that function. Because the return of the function will define what the new element of the new array will be.</p>\n<p>Some code re-factoring from for loops to using map:</p>\n<p>old:</p>\n<pre><code>function formatImpressions(input) {\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\n  for (let row = 0; row &#x3C; input.length; row++) {\n    if (!input[row].Impressions) {\n      input[row].Impressions = 0;\n    }\n    if (!input[row].Clicks) {\n      input[row].Clicks = 0;\n    }\n  }\n  return input;\n}\n</code></pre>\n<p>new:</p>\n<pre><code>export const formatImpressions = input => {\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\n\n  const formatNumbers = row => {\n    if (!row.Impressions) {\n      row.Impressions = 0;\n    }\n    if (!row.Clicks) {\n      row.Clicks = 0;\n    }\n    return row;\n  };\n  const output = input.map(formatNumbers);\n  return output;\n};\n</code></pre>\n<p>old:</p>\n<pre><code>function extractDate(input) {\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\n  const dataWithDate = [];\n  for (let row = 0; row &#x3C; input.length; row++) {\n    const entry = { ...input[row] };\n    const oldDate = input[row].Date;\n\n    const year = oldDate.slice(6, 10);\n    const month = oldDate.slice(3, 5);\n    const day = oldDate.slice(0, 2);\n    const newDate = year + \"-\" + month + \"-\" + day;\n    const dateFormatted = new Date(newDate);\n    entry.Date = dateFormatted;\n    dataWithDate.push(entry);\n  }\n  return dataWithDate;\n}\n</code></pre>\n<p>new:</p>\n<pre><code>export const extractDate = input => {\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\n  const convertDate = row => {\n    const entry = { ...row };\n    const oldDate = row.Date;\n    const year = oldDate.slice(6, 10);\n    const month = oldDate.slice(3, 5);\n    const day = oldDate.slice(0, 2);\n    const newDate = year + \"-\" + month + \"-\" + day;\n    const dateFormatted = new Date(newDate);\n    entry.Date = dateFormatted;\n    return entry;\n  };\n  const dataWithDate = input.map(convertDate);\n  return dataWithDate;\n};\n</code></pre>\n<p>old:</p>\n<pre><code>import _ from \"lodash\";\nfunction getMetrics(inputData, inputColumns) {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds numeric values.\n  const output = [];\n  for (let item = 0; item &#x3C; inputColumns.length; item++) {\n    const col = inputColumns[item];\n    if (_.isNumber(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n</code></pre>\n<p>new:</p>\n<pre><code>export const getMetrics = (inputData, inputColumns) => {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds numeric values.\n  const output = inputColumns.filter(col => typeof inputData[col] === \"number\");\n  return output;\n};\n</code></pre>\n<p>old:</p>\n<pre><code>import _ from \"lodash\";\nfunction getDimensions(inputData, inputColumns) {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds string values (excluding date formats).\n  const output = [];\n  for (let item = 0; item &#x3C; inputColumns.length; item++) {\n    const col = inputColumns[item];\n    if (_.isString(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n</code></pre>\n<p>new:</p>\n<pre><code>export const getDimensions = (inputData, inputColumns) => {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds string values (excluding date formats).\n  const output = inputColumns.filter(col => typeof inputData[col] === \"string\");\n  return output;\n};\n</code></pre>\n<p>old:</p>\n<pre><code>const moment = require(\"moment\");\nfunction formatDate(input) {\n  // Receives an array of objects as input and formats date entries into a \"DD. MMM\" format. Outputs data as \"dataWithDate\".\n  const formattedDateArray = [];\n  for (let row = 0; row &#x3C; input.length; row++) {\n    const entry = { ...input[row] };\n    const oldDate = input[row].Date;\n    const dateFormatted = moment(oldDate, \"DD.MM.YYYY\").format(\"DD. MMM\");\n    entry.Date = dateFormatted;\n    formattedDateArray.push(entry);\n  }\n  return formattedDateArray;\n}\n</code></pre>\n<p>new</p>\n<pre><code>const moment = require(\"moment\");\nexport const formatDate = input => {\n  // Receives an array of objects as input and formats date entries into a \"DD. MMM\" format. Outputs data as \"dataWithDate\".\n\n  const convertDate = row => {\n    const entry = { ...row };\n    const oldDate = row.Date;\n    const dateFormatted = moment(oldDate, \"DD.MM.YYYY\").format(\"DD. MMM\");\n    entry.Date = dateFormatted;\n    return entry;\n  };\n  const formattedDateArray = input.map(convertDate);\n  return formattedDateArray;\n};\n</code></pre>\n<p><strong>FOR EACH</strong>\nFor each is very similar to map. It iterates through each item of and array and performs a function over it. BUT it DOES NOT returns a NEW array. The forEach() method doesn’t actually return anything (undefined). It simply calls a provided function on each element in your array. This callback is allowed to mutate the calling array.</p>\n<pre><code>const books = [\"The Expanse\", \"Lord Of The Rings\", \"Harry Potter\"];\nbooks.forEach(function(book, i){\n    console.log(book);\n});\n\n//output in console.log:\nThe Expanse\nVM761:2 Lord Of The Rings\nVM761:2 Harry Potter\n</code></pre>\n<p>Notice how books.forEach is NOT assignd to ANY const.</p>\n<p>We can use forEach also to create a new array, but we would need to create it MANUALLY</p>\n<pre><code>const items = ['item1', 'item2', 'item3'];\nconst copy = [];\nitems.forEach(function(item){\n  copy.push(item);\n});\n</code></pre>\n<p><strong>FILTER</strong></p>\n<p>Filter iterates over each element of an array and ONLY returns those elements, which fulfill a condition which is given within the function.</p>\n<pre><code>const words = ['react', 'javascript', 'html', 'css'];\nconst result = words.filter(word => word.length > 5);\n// result: [\"javascript\"]\n\nconst result2 = words.filter(word => word.length &#x3C; 5);\n// result2: ['html', 'css'];\n</code></pre>\n<p>Filter can be re-factored in a way that we declare a function:</p>\n<pre><code>const words = ['react', 'javascript', 'html', 'css'];\nconst isLonger = (word) => {\n  return word.length > 5;\n}\nconst result = words.filter(isLonger);\n// result: [\"javascript\"]\n</code></pre>\n<p><strong>REDUCE</strong></p>\n<p>Reduce also iterates over every single element of an array and it also has an accumulator which is calculating for example SUM of all items. Result of reduce can be a single number (it can also be an array,  but for basic use it will return one value).</p>\n<p>Reduce receives 2 parameters, one is a function which will be performed over each element and second (optional) parameter is the initial value from which we start calculating.</p>\n<p>Reduce returns a new value as a result of calculations</p>\n<pre><code>const array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n// 1 + 2 + 3 + 4\nconst result = array1.reduce(reducer));\n// result: 10\n\n// 5 + 1 + 2 + 3 + 4\nconst result = array1.reduce(reducer, 5));\n// result: 15\n</code></pre>\n<p>old:</p>\n<pre><code>import _ from \"lodash\";\nfunction calculateAggregates(array) {\n  // Receives an array of data as input and outputs an array of data aggregated per date.\n  // First element of the output array is array of aggregated impressions.\n  // Second element of the output array is array of aggregated clicks.\n  // Third element of the output array is array of unique dates.\n  let groupByDate = _.groupBy(array, \"Date\");\n  let uniqueDates = _.keys(groupByDate);\n  let impressionsArray = [];\n  let clicksArray = [];\n\n  for (let dayEntry = 0; dayEntry &#x3C; uniqueDates.length; dayEntry++) {\n    let totalImpressions = 0;\n    let totalClicks = 0;\n\n    for (\n      let dataRow = 0;\n      dataRow &#x3C; groupByDate[uniqueDates[dayEntry]].length;\n      dataRow++\n    ) {\n      totalImpressions =\n        totalImpressions +\n        groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\n      totalClicks =\n        totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\n    }\n    impressionsArray.push(totalImpressions);\n    clicksArray.push(totalClicks);\n  }\n  return [impressionsArray, clicksArray, uniqueDates];\n}\n</code></pre>\n<p>new</p>\n<pre><code>import _ from \"lodash\";\n\nexport const calculateAggregates = array => {\n  // Receives an array of data as input and outputs an array of data aggregated per date.\n  // First element of the output array is array of aggregated impressions.\n  // Second element of the output array is array of aggregated clicks.\n  // Third element of the output array is array of unique dates.\n  const groupByDate = _.groupBy(array, \"Date\");\n  const uniqueDates = Object.keys(groupByDate);\n  const impressionsArray = uniqueDates.map(item => {\n    const sumImp = groupByDate[item].reduce((acc, obj) => {\n      return acc + obj.Impressions;\n    }, 0);\n    return sumImp;\n  });\n  const clicksArray = uniqueDates.map(item => {\n    const sumClick = groupByDate[item].reduce((acc, obj) => {\n      return acc + obj.Clicks;\n    }, 0);\n    return sumClick;\n  });\n  return [impressionsArray, clicksArray, uniqueDates];\n};\n</code></pre>\n<p>**FILTER AND MAP COMBO **\nPowerful way of combining filter and map to get for example a list of guys which are SINGLE :) :) :) very useful (muhahahahaaa)</p>\n<pre><code>const guys = [\n  {name: 'Danny', single: true},\n  {name: 'Calvin', single: true},\n  {name: 'Mike', single: true},\n  {name: 'Jeff', single: false}\n];\n\nconst isSingle = person => person.single;\nconst getName = person => person.name;\nconst preys = guys.filter(isSingle).map(getName);\nconsole.log(preys) // [\"Danny\", \"Calvin\", \"Mike\"]\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://www.codereadability.com/coding-without-loops/\">https://www.codereadability.com/coding-without-loops/</a></p>\n<p><a href=\"https://kuanhsuh.github.io/JS-functional-programming.html\">https://kuanhsuh.github.io/JS-functional-programming.html</a></p>\n<p><img src=\"https://i.imgur.com/fIyDFmN.jpg\" title=\"Photo by Pixabay from Pexels\"></p>"}},{"node":{"id":"31b668aa-a6cb-56f8-8ab8-82f715f4f2e9","excerpt":"WORK IN PROGRESS The Problem JavaScript has two visually similar, yet very different, ways to test equality. You can test equality with…","rawMarkdownBody":"\r\n![](https://i.imgur.com/hPA457A.jpg \"Photo by Ivan Bertolazzi from Pexels\")\r\n\r\n\r\nWORK IN PROGRESS\r\n\r\nThe Problem\r\n\r\nJavaScript has two visually similar, yet very different, ways to test equality. You can test equality with == or ===. Here are the differences:\r\n\r\nTriple Equals\r\n\r\nWhen using triple equals === in JavaScript, we are testing for strict equality. This means both the type and the value we are comparing have to be the same.\r\nLets look at a couple examples of strict equality.\r\nIn this first example we’re comparing the number 5 with the number 5. As expected, true is returned. Both are numbers, and both share the same value of 5.\r\n5 === 5\r\n// true\r\nWith this in mind, we can look at two more examples that will return true:\r\n'hello world' === 'hello world'\r\n// true (Both Strings, equal values)\r\ntrue === true\r\n// true (Both Booleans, equal values)\r\nAwesome. Now lets take a look at some examples that will return false:\r\nIn this example we’ll compare the number 77 to the string value of 77. This means our operands will have the same value, but a different type. This will return false\r\n77 === '77'\r\n// false (Number v. String)\r\nHere are two additional examples:\r\n'cat' === 'dog'\r\n// false (Both are Strings, but have different values)\r\nfalse === 0\r\n// false (Different type and different value)\r\nAwesome! Again, the key takeaway for triple (strict) equality is that both the type and the value we are comparing have to be the same.\r\n\r\nDouble equals\r\n\r\nWhen using double equals in JavaScript we are testing for loose equality. Double equals also performs type coercion.\r\nType coercion means that two values are compared only after attempting to convert them into a common type.\r\nAn example will illustrate this. Recall earlier when we tested the following with strict equality:\r\n77 === '77'\r\n// false (Number v. String)\r\n77 does not strictly equal '77' because they have different types. However, if we were to test these values with loose equality…\r\n77 == '77'\r\n// true\r\nYou can see we get true. That because of type coercion. JavaScript will actually try to convert our values into a like type. In this case, it succeeds. The string value of '77' can easily be converted into the number value of 77. Since 77 equals 77, we get our answer of true.\r\nLets look at one more example.\r\nRecall earlier when we tested with strict equality if false equals 0:\r\nfalse === 0\r\n// false (Different type and different value)\r\nThis is obviously false. However, if we run the same equation with loose equality…\r\nfalse == 0\r\n// true\r\nWe get true? Why is this? It has to do with falsy values in JavaScript. We’ll explore this concept in the next section.\r\n\r\nFalsy Values\r\n\r\nOkay, so why does false == 0 in JavaScript? It’s complex, but it’s because in JavaScript 0 is a falsy value.\r\nType coercion will actually convert our zero into a false boolean, then false is equal to false.\r\nThere are only six falsy values in JavaScript you should be aware of:\r\nfalse — boolean false\r\n0 — number zero\r\n“” — empty string\r\nnull\r\nundefined\r\nNaN — Not A Number\r\nFalsy Value Comparison\r\nThe following you can consider to be ‘rules’ of falsy values. These are things you should ultimately memorize if you will be working with JavaScript often.\r\nfalse, 0, and \"\"\r\nWhen comparing any of our first three falsy values with loose equality, they will always be equal! That’s because these values will all coerce into a false boolean.\r\nfalse == 0\r\n// true\r\n0 == \"\"\r\n// true\r\n\"\" == false\r\n// true\r\n2. null and undefined\r\nWhen comparing null and undefined, they are only equal to themselves and each other:\r\nnull == null\r\n// true\r\nundefined == undefined\r\n// true\r\nnull == undefined\r\n// true\r\nIf you try to compare null to any other value, it will return false.\r\n3. NaN\r\nLastly, NaN is not equivalent to anything. Even cooler, it’s not even itself!\r\nNaN == null\r\n// false\r\nNaN == undefined\r\n// false\r\nNaN == NaN\r\n// false\r\n![](https://i.imgur.com/VsPEaKZ.jpg \"Photo by Dominika Roseclay from Pexels\")\r\n\r\nKey Takeaways\r\nAs you’ve seen, type coercion can get a bit crazy in JS. Unless you’re very familiar with JavaScript, loose equality can lead to more headaches than it’s worth. Memorizing the six falsy values and the rules associated with them can go a long way towards understanding loose equality.\r\nTriple Equals is superior to double equals. Whenever possible, you should use triple equals to test equality. By testing the type and value you can be sure that you are always executing a true equality test.\r\nReference:\r\n\r\nhttps://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a\r\n\r\n![](https://i.imgur.com/fIyDFmN.jpg \"Photo by Pixabay from Pexels\")","frontmatter":{"date":"2019-12-25","title":"Tripple vs Double Equality"},"fields":{"slug":"/Tripple_vs_Double_Equality/"},"timeToRead":3,"html":"<p><img src=\"https://i.imgur.com/hPA457A.jpg\" title=\"Photo by Ivan Bertolazzi from Pexels\"></p>\n<p>WORK IN PROGRESS</p>\n<p>The Problem</p>\n<p>JavaScript has two visually similar, yet very different, ways to test equality. You can test equality with == or ===. Here are the differences:</p>\n<p>Triple Equals</p>\n<p>When using triple equals === in JavaScript, we are testing for strict equality. This means both the type and the value we are comparing have to be the same.\nLets look at a couple examples of strict equality.\nIn this first example we’re comparing the number 5 with the number 5. As expected, true is returned. Both are numbers, and both share the same value of 5.\n5 === 5\n// true\nWith this in mind, we can look at two more examples that will return true:\n'hello world' === 'hello world'\n// true (Both Strings, equal values)\ntrue === true\n// true (Both Booleans, equal values)\nAwesome. Now lets take a look at some examples that will return false:\nIn this example we’ll compare the number 77 to the string value of 77. This means our operands will have the same value, but a different type. This will return false\n77 === '77'\n// false (Number v. String)\nHere are two additional examples:\n'cat' === 'dog'\n// false (Both are Strings, but have different values)\nfalse === 0\n// false (Different type and different value)\nAwesome! Again, the key takeaway for triple (strict) equality is that both the type and the value we are comparing have to be the same.</p>\n<p>Double equals</p>\n<p>When using double equals in JavaScript we are testing for loose equality. Double equals also performs type coercion.\nType coercion means that two values are compared only after attempting to convert them into a common type.\nAn example will illustrate this. Recall earlier when we tested the following with strict equality:\n77 === '77'\n// false (Number v. String)\n77 does not strictly equal '77' because they have different types. However, if we were to test these values with loose equality…\n77 == '77'\n// true\nYou can see we get true. That because of type coercion. JavaScript will actually try to convert our values into a like type. In this case, it succeeds. The string value of '77' can easily be converted into the number value of 77. Since 77 equals 77, we get our answer of true.\nLets look at one more example.\nRecall earlier when we tested with strict equality if false equals 0:\nfalse === 0\n// false (Different type and different value)\nThis is obviously false. However, if we run the same equation with loose equality…\nfalse == 0\n// true\nWe get true? Why is this? It has to do with falsy values in JavaScript. We’ll explore this concept in the next section.</p>\n<p>Falsy Values</p>\n<p>Okay, so why does false == 0 in JavaScript? It’s complex, but it’s because in JavaScript 0 is a falsy value.\nType coercion will actually convert our zero into a false boolean, then false is equal to false.\nThere are only six falsy values in JavaScript you should be aware of:\nfalse — boolean false\n0 — number zero\n“” — empty string\nnull\nundefined\nNaN — Not A Number\nFalsy Value Comparison\nThe following you can consider to be ‘rules’ of falsy values. These are things you should ultimately memorize if you will be working with JavaScript often.\nfalse, 0, and \"\"\nWhen comparing any of our first three falsy values with loose equality, they will always be equal! That’s because these values will all coerce into a false boolean.\nfalse == 0\n// true\n0 == \"\"\n// true\n\"\" == false\n// true</p>\n<ol start=\"2\">\n<li>null and undefined\nWhen comparing null and undefined, they are only equal to themselves and each other:\nnull == null\n// true\nundefined == undefined\n// true\nnull == undefined\n// true\nIf you try to compare null to any other value, it will return false.</li>\n<li>NaN\nLastly, NaN is not equivalent to anything. Even cooler, it’s not even itself!\nNaN == null\n// false\nNaN == undefined\n// false\nNaN == NaN\n// false\n<img src=\"https://i.imgur.com/VsPEaKZ.jpg\" title=\"Photo by Dominika Roseclay from Pexels\"></li>\n</ol>\n<p>Key Takeaways\nAs you’ve seen, type coercion can get a bit crazy in JS. Unless you’re very familiar with JavaScript, loose equality can lead to more headaches than it’s worth. Memorizing the six falsy values and the rules associated with them can go a long way towards understanding loose equality.\nTriple Equals is superior to double equals. Whenever possible, you should use triple equals to test equality. By testing the type and value you can be sure that you are always executing a true equality test.\nReference:</p>\n<p><a href=\"https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a\">https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a</a></p>\n<p><img src=\"https://i.imgur.com/fIyDFmN.jpg\" title=\"Photo by Pixabay from Pexels\"></p>"}},{"node":{"id":"a87e150c-e2ae-5a28-9a07-8fbda4eb3ec1","excerpt":"Semantic UI is a library of React components which are ready to be used. Let's take an example where we want to use a multiple selection…","rawMarkdownBody":"\r\n![](https://i.imgur.com/HkbIUiu.png \"Semantic UI React logo\")\r\n\r\nSemantic UI is a library of React components which are ready to be used. Let's take an example where we want to use a multiple selection Dropdown.\r\n\r\nFirst we visit the page of semantic ui:\r\n\r\nhttps://react.semantic-ui.com/modules/dropdown/\r\n\r\nWe can scroll to <code>Multiple Selection</code> and click to see the entire code in CodeSandbox:\r\n\r\nhttps://codesandbox.io/s/9h0ck?module=/example.js\r\n\r\nHere we can see entire code and how it can be integrated:\r\n\r\n```\r\nimport React from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\nconst options = [\r\n  { key: 'angular', text: 'Angular', value: 'angular' },\r\n  { key: 'css', text: 'CSS', value: 'css' },\r\n  { key: 'design', text: 'Graphic Design', value: 'design' },\r\n]\r\n\r\nconst DropdownExampleMultipleSelection = () => (\r\n  <Dropdown placeholder='Skills' fluid multiple selection options={options} />\r\n)\r\n\r\nexport default DropdownExampleMultipleSelection\r\n\r\n```\r\n\r\nThen we also need a component like App, which will display the component:\r\n```\r\n<DropdownExampleMultipleSelection />\r\n```\r\n\r\nSuch component can be for example App component\r\n\r\nPlease note we will also need to add STYLES to the semantic ui components, else theey will not generate correctly. There are two ways how to do it:\r\n\r\n**1//** got to public folder and find index.html and integrate link tag there like this:\r\n```\r\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\r\n```\r\n\r\nor\r\n\r\n**2//** you can use a small hack to add to your DropdownExampleMultipleSelection component:\r\n```\r\nconst styleLink = document.createElement(\"link\");\r\nstyleLink.rel = \"stylesheet\";\r\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\r\ndocument.head.appendChild(styleLink);\r\n```\r\n\r\nEntire code loos then like this:\r\n```\r\nimport React from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\nconst styleLink = document.createElement(\"link\");\r\nstyleLink.rel = \"stylesheet\";\r\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\r\ndocument.head.appendChild(styleLink);\r\n\r\nconst options = [\r\n  { key: 'angular', text: 'Angular', value: 'angular' },\r\n  { key: 'css', text: 'CSS', value: 'css' },\r\n  { key: 'design', text: 'Graphic Design', value: 'design' },\r\n]\r\n\r\nconst DropdownExampleMultipleSelection = () => (\r\n  <Dropdown placeholder='Skills' fluid multiple selection options={options} />\r\n)\r\n\r\nexport default DropdownExampleMultipleSelection\r\n\r\n```\r\n\r\nWhen using this dropdown, it is very importnat to generate options!!! These will be the values in the dropdown:\r\n```\r\nconst options = [\r\n  { key: 'angular', text: 'Angular', value: 'angular' },\r\n  { key: 'css', text: 'CSS', value: 'css' },\r\n  { key: 'design', text: 'Graphic Design', value: 'design' },\r\n]\r\n\r\n```\r\n\r\nThey are then passed into the Dropdown component as prop called options.\r\n\r\nMy real work integration of the dropdown was to create a filter component which would be based on Datasource and Campaign columns from my dataset. Original integration looked like this:\r\n```\r\nimport React from \"react\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\n\r\nexport function Filter({ styling, filterColumns, onChange, dataSet }) {\r\n  // Defines a filter which allows users to filter data displayed on graph\r\n  // by selecting certain datasources and/or campaigns.\r\n  const columns = [];\r\n  const styleLink = document.createElement(\"link\");\r\n  styleLink.rel = \"stylesheet\";\r\n  styleLink.href =\r\n    \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\r\n  document.head.appendChild(styleLink);\r\n\r\n  for (let item = 0; item < filterColumns.length; item++) {\r\n    const genOptions = generateOptions(filterColumns[item], dataSet);\r\n    columns.push(\r\n      <div key={item}>\r\n        <p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\r\n          {filterColumns[item]}\r\n        </p>\r\n        <Dropdown\r\n          key={item}\r\n          style={styleLink}\r\n          placeholder={filterColumns[item]}\r\n          fluid\r\n          multiple\r\n          selection\r\n          options={genOptions}\r\n          onChange={onChange}\r\n          style={{ marginTop: \"5px\" }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <h2 style={styling}>Filters</h2>\r\n      {columns}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction generateOptions(inputItem, inputDataSet) {\r\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\r\n  let uniqueValues = [];\r\n  for (let entry = 0; entry < inputDataSet.length; entry++) {\r\n    if (!uniqueValues.includes(inputDataSet[entry][inputItem])) {\r\n      uniqueValues.push(inputDataSet[entry][inputItem]);\r\n    }\r\n  }\r\n  let newOptions = [];\r\n  for (let optionItem = 0; optionItem < uniqueValues.length; optionItem++) {\r\n    let optionRow = {\r\n      key: uniqueValues[optionItem],\r\n      text: uniqueValues[optionItem],\r\n      value: uniqueValues[optionItem]\r\n    };\r\n    newOptions.push(optionRow);\r\n  }\r\n  return newOptions;\r\n}\r\n```\r\n\r\nThen a re-worked integration looked like this:\r\n\r\nfilter.js\r\n```\r\nimport React from \"react\";\r\nimport { filterHelperFunction } from \"../functions/filterHelperFunction\";\r\n\r\nexport const Filter = ({ styling, filterColumns, onChange, dataSet }) => {\r\n  // Defines a filter which allows users to filter data displayed on graph\r\n  // by selecting certain datasources and/or campaigns.\r\n  const columns = filterHelperFunction(filterColumns, onChange, dataSet);\r\n\r\n  return (\r\n    <div data-testid=\"filter\">\r\n      <h2 style={styling}>Filters</h2>\r\n      {columns}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nfilterHeelperFunction.js\r\n```\r\nimport React from \"react\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport { generateOptionsFilter } from \"./generateOptionsFilter\";\r\n\r\nexport const filterHelperFunction = (filterColumns, onChange, dataSet) => {\r\n  const getColumns = item => {\r\n    const genOptions = generateOptionsFilter(item, dataSet);\r\n    return (\r\n      <div key={item}>\r\n        <p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\r\n          {item}\r\n        </p>\r\n        <Dropdown\r\n          key={item}\r\n          placeholder={item}\r\n          fluid\r\n          multiple\r\n          selection\r\n          options={genOptions}\r\n          onChange={onChange}\r\n          style={{ marginTop: \"5px\" }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const columns = filterColumns.map(getColumns);\r\n  return columns;\r\n};\r\n```\r\n\r\ngenerateOptionsFilter.js\r\n```\r\nexport const generateOptionsFilter = (inputItem, inputDataSet) => {\r\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\r\n  const uniqueValues = [...new Set(inputDataSet.map(item => item[inputItem]))];\r\n  const newOptions = uniqueValues.map(item => {\r\n    return {\r\n      key: item,\r\n      text: item,\r\n      value: item\r\n    };\r\n  });\r\n  return newOptions;\r\n};\r\n```\r\n\r\nindex.html (notice the link integration for semantic ui)\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n    <meta name=\"theme-color\" content=\"#000000\" />\r\n    <meta\r\n      name=\"description\"\r\n      content=\"Web site created using create-react-app\"\r\n    />\r\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\r\n    <!--\r\n      manifest.json provides metadata used when your web app is installed on a\r\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\r\n    -->\r\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\r\n    <!--\r\n      Notice the use of %PUBLIC_URL% in the tags above.\r\n      It will be replaced with the URL of the `public` folder during the build.\r\n      Only files inside the `public` folder can be referenced from the HTML.\r\n\r\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\r\n      work correctly both with client-side routing and a non-root public URL.\r\n      Learn how to configure a non-root public URL by running `npm run build`.\r\n    -->\r\n    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\r\n    <title>React App</title>\r\n  </head>\r\n  <body>\r\n    <noscript>You need to enable JavaScript to run this app.</noscript>\r\n    <div id=\"root\"></div>\r\n    <!--\r\n      This HTML file is a template.\r\n      If you open it directly in the browser, you will see an empty page.\r\n\r\n      You can add webfonts, meta tags, or analytics to this file.\r\n      The build step will place the bundled scripts into the <body> tag.\r\n\r\n      To begin the development, run `npm start` or `yarn start`.\r\n      To create a production bundle, use `npm run build` or `yarn build`.\r\n    -->\r\n  </body>\r\n</html>\r\n\r\n```","frontmatter":{"date":"2019-12-24","title":"Semantic UI Dropdown"},"fields":{"slug":"/Using_Semantic_UI_Dropdown/"},"timeToRead":5,"html":"<p><img src=\"https://i.imgur.com/HkbIUiu.png\" title=\"Semantic UI React logo\"></p>\n<p>Semantic UI is a library of React components which are ready to be used. Let's take an example where we want to use a multiple selection Dropdown.</p>\n<p>First we visit the page of semantic ui:</p>\n<p><a href=\"https://react.semantic-ui.com/modules/dropdown/\">https://react.semantic-ui.com/modules/dropdown/</a></p>\n<p>We can scroll to <code>Multiple Selection</code> and click to see the entire code in CodeSandbox:</p>\n<p><a href=\"https://codesandbox.io/s/9h0ck?module=/example.js\">https://codesandbox.io/s/9h0ck?module=/example.js</a></p>\n<p>Here we can see entire code and how it can be integrated:</p>\n<pre><code>import React from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\nconst options = [\n  { key: 'angular', text: 'Angular', value: 'angular' },\n  { key: 'css', text: 'CSS', value: 'css' },\n  { key: 'design', text: 'Graphic Design', value: 'design' },\n]\n\nconst DropdownExampleMultipleSelection = () => (\n  &#x3C;Dropdown placeholder='Skills' fluid multiple selection options={options} />\n)\n\nexport default DropdownExampleMultipleSelection\n</code></pre>\n<p>Then we also need a component like App, which will display the component:</p>\n<pre><code>&#x3C;DropdownExampleMultipleSelection />\n</code></pre>\n<p>Such component can be for example App component</p>\n<p>Please note we will also need to add STYLES to the semantic ui components, else theey will not generate correctly. There are two ways how to do it:</p>\n<p><strong>1//</strong> got to public folder and find index.html and integrate link tag there like this:</p>\n<pre><code>&#x3C;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\n</code></pre>\n<p>or</p>\n<p><strong>2//</strong> you can use a small hack to add to your DropdownExampleMultipleSelection component:</p>\n<pre><code>const styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n</code></pre>\n<p>Entire code loos then like this:</p>\n<pre><code>import React from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nconst options = [\n  { key: 'angular', text: 'Angular', value: 'angular' },\n  { key: 'css', text: 'CSS', value: 'css' },\n  { key: 'design', text: 'Graphic Design', value: 'design' },\n]\n\nconst DropdownExampleMultipleSelection = () => (\n  &#x3C;Dropdown placeholder='Skills' fluid multiple selection options={options} />\n)\n\nexport default DropdownExampleMultipleSelection\n</code></pre>\n<p>When using this dropdown, it is very importnat to generate options!!! These will be the values in the dropdown:</p>\n<pre><code>const options = [\n  { key: 'angular', text: 'Angular', value: 'angular' },\n  { key: 'css', text: 'CSS', value: 'css' },\n  { key: 'design', text: 'Graphic Design', value: 'design' },\n]\n</code></pre>\n<p>They are then passed into the Dropdown component as prop called options.</p>\n<p>My real work integration of the dropdown was to create a filter component which would be based on Datasource and Campaign columns from my dataset. Original integration looked like this:</p>\n<pre><code>import React from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nexport function Filter({ styling, filterColumns, onChange, dataSet }) {\n  // Defines a filter which allows users to filter data displayed on graph\n  // by selecting certain datasources and/or campaigns.\n  const columns = [];\n  const styleLink = document.createElement(\"link\");\n  styleLink.rel = \"stylesheet\";\n  styleLink.href =\n    \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\n  document.head.appendChild(styleLink);\n\n  for (let item = 0; item &#x3C; filterColumns.length; item++) {\n    const genOptions = generateOptions(filterColumns[item], dataSet);\n    columns.push(\n      &#x3C;div key={item}>\n        &#x3C;p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\n          {filterColumns[item]}\n        &#x3C;/p>\n        &#x3C;Dropdown\n          key={item}\n          style={styleLink}\n          placeholder={filterColumns[item]}\n          fluid\n          multiple\n          selection\n          options={genOptions}\n          onChange={onChange}\n          style={{ marginTop: \"5px\" }}\n        />\n      &#x3C;/div>\n    );\n  }\n  return (\n    &#x3C;div>\n      &#x3C;h2 style={styling}>Filters&#x3C;/h2>\n      {columns}\n    &#x3C;/div>\n  );\n}\n\nfunction generateOptions(inputItem, inputDataSet) {\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\n  let uniqueValues = [];\n  for (let entry = 0; entry &#x3C; inputDataSet.length; entry++) {\n    if (!uniqueValues.includes(inputDataSet[entry][inputItem])) {\n      uniqueValues.push(inputDataSet[entry][inputItem]);\n    }\n  }\n  let newOptions = [];\n  for (let optionItem = 0; optionItem &#x3C; uniqueValues.length; optionItem++) {\n    let optionRow = {\n      key: uniqueValues[optionItem],\n      text: uniqueValues[optionItem],\n      value: uniqueValues[optionItem]\n    };\n    newOptions.push(optionRow);\n  }\n  return newOptions;\n}\n</code></pre>\n<p>Then a re-worked integration looked like this:</p>\n<p>filter.js</p>\n<pre><code>import React from \"react\";\nimport { filterHelperFunction } from \"../functions/filterHelperFunction\";\n\nexport const Filter = ({ styling, filterColumns, onChange, dataSet }) => {\n  // Defines a filter which allows users to filter data displayed on graph\n  // by selecting certain datasources and/or campaigns.\n  const columns = filterHelperFunction(filterColumns, onChange, dataSet);\n\n  return (\n    &#x3C;div data-testid=\"filter\">\n      &#x3C;h2 style={styling}>Filters&#x3C;/h2>\n      {columns}\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<p>filterHeelperFunction.js</p>\n<pre><code>import React from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\nimport { generateOptionsFilter } from \"./generateOptionsFilter\";\n\nexport const filterHelperFunction = (filterColumns, onChange, dataSet) => {\n  const getColumns = item => {\n    const genOptions = generateOptionsFilter(item, dataSet);\n    return (\n      &#x3C;div key={item}>\n        &#x3C;p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\n          {item}\n        &#x3C;/p>\n        &#x3C;Dropdown\n          key={item}\n          placeholder={item}\n          fluid\n          multiple\n          selection\n          options={genOptions}\n          onChange={onChange}\n          style={{ marginTop: \"5px\" }}\n        />\n      &#x3C;/div>\n    );\n  };\n  const columns = filterColumns.map(getColumns);\n  return columns;\n};\n</code></pre>\n<p>generateOptionsFilter.js</p>\n<pre><code>export const generateOptionsFilter = (inputItem, inputDataSet) => {\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\n  const uniqueValues = [...new Set(inputDataSet.map(item => item[inputItem]))];\n  const newOptions = uniqueValues.map(item => {\n    return {\n      key: item,\n      text: item,\n      value: item\n    };\n  });\n  return newOptions;\n};\n</code></pre>\n<p>index.html (notice the link integration for semantic ui)</p>\n<pre><code>&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;meta charset=\"utf-8\" />\n    &#x3C;link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    &#x3C;meta name=\"theme-color\" content=\"#000000\" />\n    &#x3C;meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    />\n    &#x3C;link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    &#x3C;!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    &#x3C;link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    &#x3C;!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    &#x3C;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\n    &#x3C;title>React App&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;noscript>You need to enable JavaScript to run this app.&#x3C;/noscript>\n    &#x3C;div id=\"root\">&#x3C;/div>\n    &#x3C;!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the &#x3C;body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>"}},{"node":{"id":"1853059e-7940-59d5-8927-9da41ce5208d","excerpt":"In order to get unique values from an array, we can use Set and map: In order to get unique values from an object, imagine we have an object…","rawMarkdownBody":"\r\n![](https://i.imgur.com/STxfgmb.jpg \"Photo by João Jesus from Pexels\")\r\n\r\nIn order to get unique values from an array, we can use <code>Set</code> and <code>map</code>:\r\n```\r\nconst uniqueValues = [...new Set([1,1,1,2,2,2,3,3,3,3,4,5].map(item => item))];\r\nconsole.log(uniqueValues);\r\n// result: [1,2,3,4,5]\r\n```\r\n\r\nIn order to get unique values from an object, imagine we have an object like this:\r\n```\r\nconst data = [\r\n{Datasource: \"FB\", Campaign: \"A\"},\r\n{Datasource: \"FB\", Campaign: \"B\"},\r\n{Datasource: \"Adwords\", Campaign: \"A\"},\r\n{Datasource: \"Adwords\", Campaign: \"C\"}]\r\n```\r\n\r\nNow we want to get and array of unique datasources:\r\n```\r\n[\"FB\", \"Adwords\"]\r\n```\r\nand an array of unique campaigns:\r\n```\r\n[\"A\", \"B\", \"C\"]\r\n```\r\n\r\nIn order to do it, we can use <code>Set</code> and <code>map</code> again:\r\n\r\nUnique datasources:\r\n```\r\nconst uniqueDatasources = [...new Set(data.map(item => item.Datasource))];\r\nconsole.log(\"uniqueDatasources\", uniqueDatasources);\r\n// result: [\"FB\", \"Adwords\"]\r\n```\r\n\r\nUnique campaigns:\r\n\r\n```\r\nconst uniqueCampaigns = [...new Set(data.map(item => item.Campaign))];\r\nconsole.log(\"uniqueCampaigns\", uniqueCampaigns);\r\n// result: [\"A\", \"B\", \"C\"]\r\n```\r\n\r\nResources: \r\n\r\nhttps://stackoverflow.com/questions/15125920/how-to-get-distinct-values-from-an-array-of-objects-in-javascript\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set","frontmatter":{"date":"2019-12-23","title":"How to generate Unique values from an object"},"fields":{"slug":"/How_to_Generate_Unique_Values_from_Object/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/STxfgmb.jpg\" title=\"Photo by João Jesus from Pexels\"></p>\n<p>In order to get unique values from an array, we can use <code>Set</code> and <code>map</code>:</p>\n<pre><code>const uniqueValues = [...new Set([1,1,1,2,2,2,3,3,3,3,4,5].map(item => item))];\nconsole.log(uniqueValues);\n// result: [1,2,3,4,5]\n</code></pre>\n<p>In order to get unique values from an object, imagine we have an object like this:</p>\n<pre><code>const data = [\n{Datasource: \"FB\", Campaign: \"A\"},\n{Datasource: \"FB\", Campaign: \"B\"},\n{Datasource: \"Adwords\", Campaign: \"A\"},\n{Datasource: \"Adwords\", Campaign: \"C\"}]\n</code></pre>\n<p>Now we want to get and array of unique datasources:</p>\n<pre><code>[\"FB\", \"Adwords\"]\n</code></pre>\n<p>and an array of unique campaigns:</p>\n<pre><code>[\"A\", \"B\", \"C\"]\n</code></pre>\n<p>In order to do it, we can use <code>Set</code> and <code>map</code> again:</p>\n<p>Unique datasources:</p>\n<pre><code>const uniqueDatasources = [...new Set(data.map(item => item.Datasource))];\nconsole.log(\"uniqueDatasources\", uniqueDatasources);\n// result: [\"FB\", \"Adwords\"]\n</code></pre>\n<p>Unique campaigns:</p>\n<pre><code>const uniqueCampaigns = [...new Set(data.map(item => item.Campaign))];\nconsole.log(\"uniqueCampaigns\", uniqueCampaigns);\n// result: [\"A\", \"B\", \"C\"]\n</code></pre>\n<p>Resources: </p>\n<p><a href=\"https://stackoverflow.com/questions/15125920/how-to-get-distinct-values-from-an-array-of-objects-in-javascript\">https://stackoverflow.com/questions/15125920/how-to-get-distinct-values-from-an-array-of-objects-in-javascript</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set</a></p>"}},{"node":{"id":"7c0bf4e2-39ad-596a-9d3d-681656b54e7d","excerpt":"We can use 2 ways to check data types: ES6 native: Lodash:","rawMarkdownBody":"\r\n![](https://i.imgur.com/STxfgmb.jpg \"Photo by João Jesus from Pexels\")\r\n\r\nWe can use 2 ways to check data types:\r\n\r\nES6 native:\r\n```\r\nconst check = typeof \"hello\" === \"string\";\r\nconsole.log(check);\r\n//result: true\r\n```\r\n\r\nLodash:\r\n```\r\nimport _ from \"lodash\";\r\n\r\nconst check = _.isString(\"hello\");\r\nconsole.log(check);\r\n//result: true\r\n```","frontmatter":{"date":"2019-12-22","title":"How to check data types"},"fields":{"slug":"/Data_Types/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/STxfgmb.jpg\" title=\"Photo by João Jesus from Pexels\"></p>\n<p>We can use 2 ways to check data types:</p>\n<p>ES6 native:</p>\n<pre><code>const check = typeof \"hello\" === \"string\";\nconsole.log(check);\n//result: true\n</code></pre>\n<p>Lodash:</p>\n<pre><code>import _ from \"lodash\";\n\nconst check = _.isString(\"hello\");\nconsole.log(check);\n//result: true\n</code></pre>"}},{"node":{"id":"df37737e-ef94-5548-be18-49df8c5725c6","excerpt":"Testing with Jest is relatively easy. When you create your project with create-react-app, it will come already with Jest installed and with…","rawMarkdownBody":"\r\n![](https://i.imgur.com/cbhYcg2.jpg \"Photo by Chokniti Khongchum from Pexels\")\r\n\r\nTesting with Jest is relatively easy. When you create your project with create-react-app, it will come already with Jest installed and with the <code>App.test.js</code> in the <code>src</code> folder.\r\n\r\nAnd immediatelly out of the box you can simply use following code to run your first test for App.js:\r\n```\r\nnpm run test\r\n```\r\nHow to proceed then?\r\n\r\nBy default Jest uses exporting which is different from the ES6 (used in React).\r\n\r\nReact uses either **NAMED EXPORT**:\r\n```\r\nexport const functionX = () => {\r\n\treturn 1;\r\n}\r\n```\r\nand **NAMED IMPORT**:\r\n```\r\nimport {functionX} from \"./functionX\"\r\n```\r\n\r\nor React uses **DEFAULT EXPORT**:\r\n```\r\nconst functionX = () => {\r\n\treturn 1;\r\n}\r\nexport default functionX;\r\n```\r\nand **DEFAULT IMPORT**:\r\n```\r\nimport functionX from \"./functionX\"\r\n```\r\n\r\n\r\nHowever, what Jest uses are <code>MODULE EXPORTS</code>. These are different and not fully compatible with React.\r\n\r\n**MODULE EXPORT**:\r\n```\r\nconst functionX = () => {\r\n\treturn 1;\r\n}\r\nmodule.exports = functionX;\r\n```\r\n\r\n**MODULE IMPORT**:\r\n```\r\nconst functionX = require(\"./functionX\");\r\n```\r\n\r\nReact way of importing is NOT compatible with Jest. If you use import or export in your function or in your test, you will get errors:\r\n```\r\nCannot use import statement outside a module\r\n```\r\n\r\nIn order to be able to use Jest tests and export them and import them according to ES6 (React standard way) you will also need to install following dependencies:\r\n```\r\nnpm install --dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\r\n```\r\n\r\nAfterwards you should easily be able to use import and export for your tests.\r\n\r\nExample function called <code>formatImpressions.js</code> which resides in <code>functions</code> folder:\r\n```\r\nexport function formatImpressions(input) {\r\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\r\n  for (let row = 0; row < input.length; row++) {\r\n    if (!input[row].Impressions) {\r\n      input[row].Impressions = 0;\r\n    }\r\n    if (!input[row].Clicks) {\r\n      input[row].Clicks = 0;\r\n    }\r\n  }\r\n  return input;\r\n}\r\n\r\n```\r\n\r\nExample test in <code>formatImpressions.test.js</code> which resides in <code>tests</code> folder:\r\n```\r\nimport { formatImpressions } from \"../functions/formatImpressions\";\r\n\r\ntest(\"format Impressions\", () => {\r\n  expect(\r\n    formatImpressions([\r\n      { Datasource: \"Facebook Ads\", Impressions: \"\", Clicks: \"\" }\r\n    ])\r\n  ).toStrictEqual([{ Datasource: \"Facebook Ads\", Impressions: 0, Clicks: 0 }]);\r\n  expect(\r\n    formatImpressions([\r\n      { Datasource: \"Facebook Ads\", Impressions: 123, Clicks: 50 }\r\n    ])\r\n  ).toStrictEqual([\r\n    { Datasource: \"Facebook Ads\", Impressions: 123, Clicks: 50 }\r\n  ]);\r\n});\r\n\r\n```\r\n\r\nIn the terminal we are now able to run the test\r\n```\r\nnpm run test\r\n```\r\n\r\nIt should open the <code>watch</code> view where you can see how many tests failed and how many passed. Pressing <code>A</code> button in this view will run ALL tests again (because sometimes only latest test will run). \r\n\r\nPressing <code>Q</code> will end this watch view and get you back to terminal.\r\n\r\n**TESTING REACT COMPONENTS**\r\n\r\nExample set of tests possible for React components, where components are in components folder and in this folder we also have a subfolder <code>__test__</code> and <code>__snapshots__</code>(the last one is created automatically when running snapshot tests):\r\n```\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Header } from \"../Header.js\";\r\nimport { render, cleanup } from \"@testing-library/react\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport renderer from \"react-test-renderer\";\r\n\r\nafterEach(cleanup);\r\n\r\nit(\"renders without crashing\", () => {\r\n  const div = document.createElement(\"div\");\r\n  ReactDOM.render(<Header></Header>, div);\r\n});\r\n\r\nit(\"renders header correctly\", () => {\r\n  render(<Header></Header>);\r\n});\r\n\r\nit(\"renders header correctly\", () => {\r\n  const { getByTestId } = render(<Header></Header>);\r\n  expect(getByTestId(\"header\")).toHaveTextContent(\r\n    \"Advertising Data ETL-V Challenge\"\r\n  );\r\n});\r\n\r\nit(\"matches snapshot\", () => {\r\n  const tree = renderer.create(<Header></Header>).toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n```\r\nPLEASE NOTE that the Header component needs to have a attribute <code>data-testid=\"header\"</code>:\r\n```\r\nimport React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport function Header() {\r\n  // Defines a header to be displayed as a title on the pages\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col sm={12}>\r\n          <h2\r\n            data-testid=\"header\"\r\n            style={{\r\n              margin: \"20px 0px\",\r\n              textAlign: \"left\",\r\n              color: \"#7F6A93\",\r\n              borderBottom: \"0.5px solid #E8E8EA\",\r\n              paddingBottom: \"20px\"\r\n            }}\r\n          >\r\n            Advertising Data ETL-V Challenge\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nAccording to official Higcharts forum https://www.highcharts.com/forum/viewtopic.php?t=42324 trying to use snapshot test with Highcharts will not work because:\r\n```\r\nIt seems that React Test Renderer works only on pure JavaScripts objects without depending on the DOM, while Highcharts needs integration with HTML structure (to find container where the chart will be rendered etc.) - more: https://reactjs.org/docs/test-renderer.html.\r\n```\r\n\r\nResources: \r\n\r\nhttps://jestjs.io/docs/en/tutorial-react\r\n","frontmatter":{"date":"2019-12-21","title":"Testing with Jest"},"fields":{"slug":"/Testing_With_Jest/"},"timeToRead":4,"html":"<p><img src=\"https://i.imgur.com/cbhYcg2.jpg\" title=\"Photo by Chokniti Khongchum from Pexels\"></p>\n<p>Testing with Jest is relatively easy. When you create your project with create-react-app, it will come already with Jest installed and with the <code>App.test.js</code> in the <code>src</code> folder.</p>\n<p>And immediatelly out of the box you can simply use following code to run your first test for App.js:</p>\n<pre><code>npm run test\n</code></pre>\n<p>How to proceed then?</p>\n<p>By default Jest uses exporting which is different from the ES6 (used in React).</p>\n<p>React uses either <strong>NAMED EXPORT</strong>:</p>\n<pre><code>export const functionX = () => {\n    return 1;\n}\n</code></pre>\n<p>and <strong>NAMED IMPORT</strong>:</p>\n<pre><code>import {functionX} from \"./functionX\"\n</code></pre>\n<p>or React uses <strong>DEFAULT EXPORT</strong>:</p>\n<pre><code>const functionX = () => {\n    return 1;\n}\nexport default functionX;\n</code></pre>\n<p>and <strong>DEFAULT IMPORT</strong>:</p>\n<pre><code>import functionX from \"./functionX\"\n</code></pre>\n<p>However, what Jest uses are <code>MODULE EXPORTS</code>. These are different and not fully compatible with React.</p>\n<p><strong>MODULE EXPORT</strong>:</p>\n<pre><code>const functionX = () => {\n    return 1;\n}\nmodule.exports = functionX;\n</code></pre>\n<p><strong>MODULE IMPORT</strong>:</p>\n<pre><code>const functionX = require(\"./functionX\");\n</code></pre>\n<p>React way of importing is NOT compatible with Jest. If you use import or export in your function or in your test, you will get errors:</p>\n<pre><code>Cannot use import statement outside a module\n</code></pre>\n<p>In order to be able to use Jest tests and export them and import them according to ES6 (React standard way) you will also need to install following dependencies:</p>\n<pre><code>npm install --dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n</code></pre>\n<p>Afterwards you should easily be able to use import and export for your tests.</p>\n<p>Example function called <code>formatImpressions.js</code> which resides in <code>functions</code> folder:</p>\n<pre><code>export function formatImpressions(input) {\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\n  for (let row = 0; row &#x3C; input.length; row++) {\n    if (!input[row].Impressions) {\n      input[row].Impressions = 0;\n    }\n    if (!input[row].Clicks) {\n      input[row].Clicks = 0;\n    }\n  }\n  return input;\n}\n</code></pre>\n<p>Example test in <code>formatImpressions.test.js</code> which resides in <code>tests</code> folder:</p>\n<pre><code>import { formatImpressions } from \"../functions/formatImpressions\";\n\ntest(\"format Impressions\", () => {\n  expect(\n    formatImpressions([\n      { Datasource: \"Facebook Ads\", Impressions: \"\", Clicks: \"\" }\n    ])\n  ).toStrictEqual([{ Datasource: \"Facebook Ads\", Impressions: 0, Clicks: 0 }]);\n  expect(\n    formatImpressions([\n      { Datasource: \"Facebook Ads\", Impressions: 123, Clicks: 50 }\n    ])\n  ).toStrictEqual([\n    { Datasource: \"Facebook Ads\", Impressions: 123, Clicks: 50 }\n  ]);\n});\n</code></pre>\n<p>In the terminal we are now able to run the test</p>\n<pre><code>npm run test\n</code></pre>\n<p>It should open the <code>watch</code> view where you can see how many tests failed and how many passed. Pressing <code>A</code> button in this view will run ALL tests again (because sometimes only latest test will run). </p>\n<p>Pressing <code>Q</code> will end this watch view and get you back to terminal.</p>\n<p><strong>TESTING REACT COMPONENTS</strong></p>\n<p>Example set of tests possible for React components, where components are in components folder and in this folder we also have a subfolder <code><strong>test</strong></code> and <code><strong>snapshots</strong></code>(the last one is created automatically when running snapshot tests):</p>\n<pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Header } from \"../Header.js\";\nimport { render, cleanup } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport renderer from \"react-test-renderer\";\n\nafterEach(cleanup);\n\nit(\"renders without crashing\", () => {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(&#x3C;Header>&#x3C;/Header>, div);\n});\n\nit(\"renders header correctly\", () => {\n  render(&#x3C;Header>&#x3C;/Header>);\n});\n\nit(\"renders header correctly\", () => {\n  const { getByTestId } = render(&#x3C;Header>&#x3C;/Header>);\n  expect(getByTestId(\"header\")).toHaveTextContent(\n    \"Advertising Data ETL-V Challenge\"\n  );\n});\n\nit(\"matches snapshot\", () => {\n  const tree = renderer.create(&#x3C;Header>&#x3C;/Header>).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n</code></pre>\n<p>PLEASE NOTE that the Header component needs to have a attribute <code>data-testid=\"header\"</code>:</p>\n<pre><code>import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport function Header() {\n  // Defines a header to be displayed as a title on the pages\n  return (\n    &#x3C;div>\n      &#x3C;Row>\n        &#x3C;Col sm={12}>\n          &#x3C;h2\n            data-testid=\"header\"\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#7F6A93\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            Advertising Data ETL-V Challenge\n          &#x3C;/h2>\n        &#x3C;/Col>\n      &#x3C;/Row>\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<p>According to official Higcharts forum <a href=\"https://www.highcharts.com/forum/viewtopic.php?t=42324\">https://www.highcharts.com/forum/viewtopic.php?t=42324</a> trying to use snapshot test with Highcharts will not work because:</p>\n<pre><code>It seems that React Test Renderer works only on pure JavaScripts objects without depending on the DOM, while Highcharts needs integration with HTML structure (to find container where the chart will be rendered etc.) - more: https://reactjs.org/docs/test-renderer.html.\n</code></pre>\n<p>Resources: </p>\n<p><a href=\"https://jestjs.io/docs/en/tutorial-react\">https://jestjs.io/docs/en/tutorial-react</a></p>"}},{"node":{"id":"77e98de8-596d-5cff-9002-f34b0e0942bf","excerpt":"For example if we want to publish our project on Github pages, it is done over HTTPS (secure HTTP). However, if we fetch some data (or…","rawMarkdownBody":"\r\n![](https://i.imgur.com/ReyaN6N.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nFor example if we want to publish our project on Github pages, it is done over HTTPS (secure HTTP). However, if we fetch some data (or upload an image) on it from not-secured HTTP, we will get an error:\r\n```\r\nMixed Content: The page at \"https://...\" \r\nwas loaded over HTTPS, but requestd an \r\ninsecure image \"http://...\". This content \r\nshould be served over HTTPS.\r\n```\r\n\r\nHow to solve it? There is not much what we can do:\r\n\r\n**1)**Check if the insecure HTTP URL is available over HTTPS by changing it from http:// to https://.\r\n\r\nIf the resource displayed is the same over HTTP and HTTPS, everything is OK :)\r\n\r\n**2)**Change the resource and substitute with a secure one\r\n\r\n**3)**Delete the resource from your app completely\r\n\r\nReference:\r\n\r\nhttps://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content","frontmatter":{"date":"2019-12-13","title":"Mixed content error"},"fields":{"slug":"/Mixed_Content/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/ReyaN6N.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>For example if we want to publish our project on Github pages, it is done over HTTPS (secure HTTP). However, if we fetch some data (or upload an image) on it from not-secured HTTP, we will get an error:</p>\n<pre><code>Mixed Content: The page at \"https://...\" \nwas loaded over HTTPS, but requestd an \ninsecure image \"http://...\". This content \nshould be served over HTTPS.\n</code></pre>\n<p>How to solve it? There is not much what we can do:</p>\n<p><strong>1)</strong>Check if the insecure HTTP URL is available over HTTPS by changing it from http:// to https://.</p>\n<p>If the resource displayed is the same over HTTP and HTTPS, everything is OK :)</p>\n<p><strong>2)</strong>Change the resource and substitute with a secure one</p>\n<p><strong>3)</strong>Delete the resource from your app completely</p>\n<p>Reference:</p>\n<p><a href=\"https://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content\">https://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content</a></p>"}},{"node":{"id":"287f1945-9138-5db9-aa84-7f9f44ee0a09","excerpt":"CSV files will be interpretted as string. In order to convert them to a JSON object, we will need to parse them first. It is relatively easy…","rawMarkdownBody":"\r\n![](https://i.imgur.com/crZSR9A.jpg \"Photo by Mike from Pexels\")\r\n\r\nCSV files will be interpretted as <code>string</code>. In order to convert them to a JSON object, we will need to parse them first. It is relatively easy as they are comma separated. \r\n\r\nExample CSV parser is here:\r\n```\r\nfunction csvJSON(csv) {\r\n  // Receives a comma separated csv file as input. \r\n  Outputs array of objects as result.\r\n  var lines = csv.split(\"\\n\");\r\n  var result = [];\r\n  var headers = lines[0].split(\",\");\r\n  for (var i = 1; i < lines.length; i++) {\r\n    var obj = {};\r\n    var currentline = lines[i].split(\",\");\r\n    for (var j = 0; j < headers.length; j++) {\r\n      const columnValue = currentline[j];\r\n      if (j === 3 || j === 4) {\r\n        obj[headers[j]] = parseInt(columnValue);\r\n      } else {\r\n        obj[headers[j]] = columnValue;\r\n      }\r\n    }\r\n    result.push(obj);\r\n  }\r\n  let removeLast = result.pop();\r\n  return result;\r\n}\r\n```\r\n\r\nPlease note, that it can happen that there will be one redundant line at the very end of our JSON object. Which we remove by <code>.pop()</code>. function. If in your case there is an extra empty row, then zou can remove that line in two ways:\r\n\r\n**1//** NON-MUTATIONAL:\r\n```\r\nconst newArray = objectArray.slice(1, objectArray.length - 1);\r\nreeturn newArray\r\n```\r\n\r\n**2//** MUTATIONAL (not recommndede way):\r\n```\r\nlet removeLast = result.pop();\r\nreturn result\r\n```\r\n\r\n![](https://i.imgur.com/YY6Senp.jpg \"Photo by Mike from Pexels\")","frontmatter":{"date":"2019-12-12","title":"Parsing CSV"},"fields":{"slug":"/Parsing_CSV/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/crZSR9A.jpg\" title=\"Photo by Mike from Pexels\"></p>\n<p>CSV files will be interpretted as <code>string</code>. In order to convert them to a JSON object, we will need to parse them first. It is relatively easy as they are comma separated. </p>\n<p>Example CSV parser is here:</p>\n<pre><code>function csvJSON(csv) {\n  // Receives a comma separated csv file as input. \n  Outputs array of objects as result.\n  var lines = csv.split(\"\\n\");\n  var result = [];\n  var headers = lines[0].split(\",\");\n  for (var i = 1; i &#x3C; lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(\",\");\n    for (var j = 0; j &#x3C; headers.length; j++) {\n      const columnValue = currentline[j];\n      if (j === 3 || j === 4) {\n        obj[headers[j]] = parseInt(columnValue);\n      } else {\n        obj[headers[j]] = columnValue;\n      }\n    }\n    result.push(obj);\n  }\n  let removeLast = result.pop();\n  return result;\n}\n</code></pre>\n<p>Please note, that it can happen that there will be one redundant line at the very end of our JSON object. Which we remove by <code>.pop()</code>. function. If in your case there is an extra empty row, then zou can remove that line in two ways:</p>\n<p><strong>1//</strong> NON-MUTATIONAL:</p>\n<pre><code>const newArray = objectArray.slice(1, objectArray.length - 1);\nreeturn newArray\n</code></pre>\n<p><strong>2//</strong> MUTATIONAL (not recommndede way):</p>\n<pre><code>let removeLast = result.pop();\nreturn result\n</code></pre>\n<p><img src=\"https://i.imgur.com/YY6Senp.jpg\" title=\"Photo by Mike from Pexels\"></p>"}},{"node":{"id":"dbd452f3-70a3-5eb5-ab6f-eb2bfc6dc2db","excerpt":"Fetching data in REACT from a url or an API is not as straightforward as it might seem. It also has some catches to it. In order to fetch…","rawMarkdownBody":"\r\n![](https://i.imgur.com/MqWLXcO.jpg \"Photo by Jozef Fehér from Pexels\")\r\n\r\nFetching data in REACT from a url or an API is not as straightforward as it might seem. It also has some catches to it.\r\n\r\nIn order to fetch data, the best place to fetch data is useEffect hook. It is similar to lifecycle methods of class components, so it will be triggered when the component mounts or when it re-renders. Plus it has an advantage of being able to define if it will only run once. So let's take a look at it.\r\n\r\nTo fetch data from this Amazon aws url: \r\n\r\n<code>\"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"</code> \r\n\r\nor its Github equivalent: \r\n\r\n<code>\"https://raw.githubusercontent.com/addania/challenge/master/src/data/source.csv?raw=true\"</code> \r\n\r\nwe can use following script:\r\n```\r\n1 useEffect(() => { \r\n2   async function fetchData() {\r\n3      const response = await fetch(\r\n4        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\r\n5      );\r\n6      const csvData = await response.text();\r\n7      const jsonData = csvJSON(csvData);\r\n8      const formattedImpressions = formatImpressions(jsonData);\r\n9      //...more functions which transform initial data\r\n      setState(formattedImpressions);      \r\n10    }\r\n11    fetchData();\r\n12  }, []);\r\n\r\n```\r\n\r\nLet's break it down. We already know some advantages why we should use useEffect for it. We also need to make sure we import the useEffect in the first place, so the entire code will look like this:\r\n```\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nfunction App() {\r\n  \r\nconst [data, setData] = useState([]);\r\n\r\nuseEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetch(\r\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\r\n      );\r\n      const csvData = await response.text();\r\n      const jsonData = csvJSON(csvData);\r\n      const formattedImpressions = formatImpressions(jsonData);\r\n      //...more functions which transform initial data\r\n      setState(formattedImpressions);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n return (\r\n    <div></div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nWhen we fetch data we most likely only want to do it once when the component mounts, and not every time when it re-renders. Why? Fetching data (and especially big files) is an expensive operation and it causes delays in when data are available. So we want to do it only once. In order to do it, we pass empty array to the useEffect function as second argument <code>[]</code> on the line number 12. This will tell useEffect to only render once when component mounts.\r\n\r\n\r\nThen the syntax for fetching is following (lines2-11):\r\n```\r\n async function fetchData() {\r\n      const response = await fetch(\r\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\r\n      );\r\n      const csvData = await response.text();\r\n      const jsonData = csvJSON(csvData);\r\n      const formattedImpressions = formatImpressions(jsonData);\r\n      //...more functions which transform initial data\r\n      setState(formattedImpressions);      \r\n    }\r\n    fetchData();\r\n```\r\n\r\nIt is important to understand that fetching is <code>asynchronous</code>. When we fetch data, we only get a promise, that we will get the data as soon as they are available (at some later point in time, can be even in 5 minutes). But they are NOT yet available in the moment when the trigger the fetch. Therefore, we cannot <code>console.log</code> them or work with them immediatelly afterwards. If we do, we will get errors, that our functions cannot run on <code>undefined</code>. This is the reason why we need to include <code>await</code> and then all the functions which need to run on our data will run AFTER the data are available and they need to run **INSIDE** of the useEffect. Then the very last step will be to setState with transformed data. \r\n\r\n<code>Await</code> will make sure that anything after it will first wait until data are available and only trigger it when data are there. If we put our functions **OUSIDE** of the useEffect, all functions will run before the data actually are available and fail.\r\n\r\nAnother way how we can fetch data:\r\n```\r\nimport React, { useState, useEffect } from \"react\";\r\nexport const FetchAPItest = () => {\r\n  const [person, setPerson] = useState(null);\r\n  useEffect(async () => {\r\n    const response = await fetch(\"https://api.randomuser.me/\");\r\n    const data = await response.json();\r\n    const [item]=data.results;\r\n    setPerson(item);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {person && <p>{person.name.first}</p>}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nPlease note: this will only work when you initially set the state to <code>null</code>!\r\n```\r\nconst [person, setPerson] = useState(null);\r\n```\r\n\r\nIf you set your state to empty:\r\n```\r\nconst [person, setPerson] = useState();\r\n```\r\n\r\nyou will get an error that undefined does not have property name.first\r\n\r\nPlease also note, that we render our component conditionally when the person is there:\r\n```\r\n{person && <p>{person.name.first}</p>}\r\n```\r\n\r\nIf we just do this:\r\n```\r\n<p>{person.name.first}</p>\r\n```\r\nwe will again have error.\r\n\r\nSame data, fetched by the first method:\r\n```\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nexport const FetchAPItest2 = () => {\r\n  const [person, setPerson] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData(){\r\n      \r\n    const response = await fetch(\"https://api.randomuser.me/\");\r\n    const data = await response.json();\r\n    const [item]=data.results;\r\n    setPerson(item);\r\n  }\r\n  fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {person && <p>{person.name.first}</p>}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/Sb31C68.jpg \"Photo by Jozef Fehér from Pexels\")","frontmatter":{"date":"2019-12-11","title":"Fetching Data in React"},"fields":{"slug":"/Fetching_Data/"},"timeToRead":4,"html":"<p><img src=\"https://i.imgur.com/MqWLXcO.jpg\" title=\"Photo by Jozef Fehér from Pexels\"></p>\n<p>Fetching data in REACT from a url or an API is not as straightforward as it might seem. It also has some catches to it.</p>\n<p>In order to fetch data, the best place to fetch data is useEffect hook. It is similar to lifecycle methods of class components, so it will be triggered when the component mounts or when it re-renders. Plus it has an advantage of being able to define if it will only run once. So let's take a look at it.</p>\n<p>To fetch data from this Amazon aws url: </p>\n<p><code>\"<a href=\"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv%22\">http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"</a></code> </p>\n<p>or its Github equivalent: </p>\n<p><code>\"<a href=\"https://raw.githubusercontent.com/addania/challenge/master/src/data/source.csv?raw=true%22\">https://raw.githubusercontent.com/addania/challenge/master/src/data/source.csv?raw=true\"</a></code> </p>\n<p>we can use following script:</p>\n<pre><code>1 useEffect(() => { \n2   async function fetchData() {\n3      const response = await fetch(\n4        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\n5      );\n6      const csvData = await response.text();\n7      const jsonData = csvJSON(csvData);\n8      const formattedImpressions = formatImpressions(jsonData);\n9      //...more functions which transform initial data\n      setState(formattedImpressions);      \n10    }\n11    fetchData();\n12  }, []);\n</code></pre>\n<p>Let's break it down. We already know some advantages why we should use useEffect for it. We also need to make sure we import the useEffect in the first place, so the entire code will look like this:</p>\n<pre><code>import React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  \nconst [data, setData] = useState([]);\n\nuseEffect(() => {\n    async function fetchData() {\n      const response = await fetch(\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\n      );\n      const csvData = await response.text();\n      const jsonData = csvJSON(csvData);\n      const formattedImpressions = formatImpressions(jsonData);\n      //...more functions which transform initial data\n      setState(formattedImpressions);\n    }\n    fetchData();\n  }, []);\n\n return (\n    &#x3C;div>&#x3C;/div>\n    )\n}\n\nexport default App;\n</code></pre>\n<p>When we fetch data we most likely only want to do it once when the component mounts, and not every time when it re-renders. Why? Fetching data (and especially big files) is an expensive operation and it causes delays in when data are available. So we want to do it only once. In order to do it, we pass empty array to the useEffect function as second argument <code>[]</code> on the line number 12. This will tell useEffect to only render once when component mounts.</p>\n<p>Then the syntax for fetching is following (lines2-11):</p>\n<pre><code> async function fetchData() {\n      const response = await fetch(\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\n      );\n      const csvData = await response.text();\n      const jsonData = csvJSON(csvData);\n      const formattedImpressions = formatImpressions(jsonData);\n      //...more functions which transform initial data\n      setState(formattedImpressions);      \n    }\n    fetchData();\n</code></pre>\n<p>It is important to understand that fetching is <code>asynchronous</code>. When we fetch data, we only get a promise, that we will get the data as soon as they are available (at some later point in time, can be even in 5 minutes). But they are NOT yet available in the moment when the trigger the fetch. Therefore, we cannot <code>console.log</code> them or work with them immediatelly afterwards. If we do, we will get errors, that our functions cannot run on <code>undefined</code>. This is the reason why we need to include <code>await</code> and then all the functions which need to run on our data will run AFTER the data are available and they need to run <strong>INSIDE</strong> of the useEffect. Then the very last step will be to setState with transformed data. </p>\n<p><code>Await</code> will make sure that anything after it will first wait until data are available and only trigger it when data are there. If we put our functions <strong>OUSIDE</strong> of the useEffect, all functions will run before the data actually are available and fail.</p>\n<p>Another way how we can fetch data:</p>\n<pre><code>import React, { useState, useEffect } from \"react\";\nexport const FetchAPItest = () => {\n  const [person, setPerson] = useState(null);\n  useEffect(async () => {\n    const response = await fetch(\"https://api.randomuser.me/\");\n    const data = await response.json();\n    const [item]=data.results;\n    setPerson(item);\n  }, []);\n  return (\n    &#x3C;div>\n      {person &#x26;&#x26; &#x3C;p>{person.name.first}&#x3C;/p>}\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Please note: this will only work when you initially set the state to <code>null</code>!</p>\n<pre><code>const [person, setPerson] = useState(null);\n</code></pre>\n<p>If you set your state to empty:</p>\n<pre><code>const [person, setPerson] = useState();\n</code></pre>\n<p>you will get an error that undefined does not have property name.first</p>\n<p>Please also note, that we render our component conditionally when the person is there:</p>\n<pre><code>{person &#x26;&#x26; &#x3C;p>{person.name.first}&#x3C;/p>}\n</code></pre>\n<p>If we just do this:</p>\n<pre><code>&#x3C;p>{person.name.first}&#x3C;/p>\n</code></pre>\n<p>we will again have error.</p>\n<p>Same data, fetched by the first method:</p>\n<pre><code>import React, { useState, useEffect } from \"react\";\n\nexport const FetchAPItest2 = () => {\n  const [person, setPerson] = useState(null);\n\n  useEffect(() => {\n    async function fetchData(){\n      \n    const response = await fetch(\"https://api.randomuser.me/\");\n    const data = await response.json();\n    const [item]=data.results;\n    setPerson(item);\n  }\n  fetchData();\n  }, []);\n\n  return (\n    &#x3C;div>\n      {person &#x26;&#x26; &#x3C;p>{person.name.first}&#x3C;/p>}\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/Sb31C68.jpg\" title=\"Photo by Jozef Fehér from Pexels\"></p>"}},{"node":{"id":"eae8adf3-57e3-58eb-ae65-9179040e1b7b","excerpt":"If you want to put a condition which verifies if the object is empty, you can use following: ECMA 7+: ECMA 5+: Pre-ECMA 5: Lodash Reference…","rawMarkdownBody":"\r\n![](https://i.imgur.com/6uOGygm.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nIf you want to put a condition which verifies if the object is empty, you can use following:\r\n\r\nECMA 7+:\r\n```\r\n// because Object.entries(new Date()).length === 0;\r\n// we have to do some additional check\r\nObject.entries(obj).length === 0 && obj.constructor === Object\r\n```\r\n\r\nECMA 5+:\r\n```\r\n// because Object.keys(new Date()).length === 0;\r\n// we have to do some additional check\r\nObject.keys(obj).length === 0 && obj.constructor === Object\r\n```\r\n\r\nPre-ECMA 5:\r\n```\r\nfunction isEmpty(obj) {\r\n  for(var prop in obj) {\r\n    if(obj.hasOwnProperty(prop)) {\r\n      return false;\r\n    }\r\n  }\r\n  return JSON.stringify(obj) === JSON.stringify({});\r\n}\r\n```\r\n\r\nLodash\r\n```\r\n_.isEmpty({}); // true\r\n```\r\n\r\nReference:\r\n\r\nhttps://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object\r\n\r\n![](https://i.imgur.com/v8eHezH.jpg \"Photo by Sebastian Palomino from Pexels\")\r\n\r\n","frontmatter":{"date":"2019-12-10","title":"How to check if object is empty"},"fields":{"slug":"/How_to_Check_if_Object_is_Empty/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/6uOGygm.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>If you want to put a condition which verifies if the object is empty, you can use following:</p>\n<p>ECMA 7+:</p>\n<pre><code>// because Object.entries(new Date()).length === 0;\n// we have to do some additional check\nObject.entries(obj).length === 0 &#x26;&#x26; obj.constructor === Object\n</code></pre>\n<p>ECMA 5+:</p>\n<pre><code>// because Object.keys(new Date()).length === 0;\n// we have to do some additional check\nObject.keys(obj).length === 0 &#x26;&#x26; obj.constructor === Object\n</code></pre>\n<p>Pre-ECMA 5:</p>\n<pre><code>function isEmpty(obj) {\n  for(var prop in obj) {\n    if(obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n  return JSON.stringify(obj) === JSON.stringify({});\n}\n</code></pre>\n<p>Lodash</p>\n<pre><code>_.isEmpty({}); // true\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object\">https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object</a></p>\n<p><img src=\"https://i.imgur.com/v8eHezH.jpg\" title=\"Photo by Sebastian Palomino from Pexels\"></p>"}},{"node":{"id":"8011ec9e-2bd5-551d-b139-0a2074d9df9a","excerpt":"It is possible to create multiple variables with a single var, let or const if we separate them with comma: Reference: https://www.youtube…","rawMarkdownBody":"\r\n![](https://i.imgur.com/elDgUVi.jpg \"Photo by Süleyman Şahan from Pexels\")\r\n\r\nIt is possible to create multiple variables with a single <code>var</code>, <code>let</code> or <code>const</code> if we separate them with comma:\r\n```\r\nvar myDate=new Date(), \r\n    date=myDate.getDate(), // shows number of day in MONTH (for example 24)\r\n    day=myDate.getDay(), // shows number of day in WEEK (for example 6)\r\n    month=myDate.getMonth()+1, // gives number of MONTH - starts from 0 for January - if you want 1 for January add +1\r\n    year=myDate.getYear(); // give YEAR\r\n\r\n```\r\n\r\nReference:\r\n\r\nhttps://www.youtube.com/watch?v=CnozSz4wbBQ","frontmatter":{"date":"2019-12-09","title":"How to create multiple variables"},"fields":{"slug":"/Creating_multiple_Variables/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/elDgUVi.jpg\" title=\"Photo by Süleyman Şahan from Pexels\"></p>\n<p>It is possible to create multiple variables with a single <code>var</code>, <code>let</code> or <code>const</code> if we separate them with comma:</p>\n<pre><code>var myDate=new Date(), \n    date=myDate.getDate(), // shows number of day in MONTH (for example 24)\n    day=myDate.getDay(), // shows number of day in WEEK (for example 6)\n    month=myDate.getMonth()+1, // gives number of MONTH - starts from 0 for January - if you want 1 for January add +1\n    year=myDate.getYear(); // give YEAR\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://www.youtube.com/watch?v=CnozSz4wbBQ\">https://www.youtube.com/watch?v=CnozSz4wbBQ</a></p>"}},{"node":{"id":"11068e16-3407-5d69-9388-e0e5231b07f2","excerpt":"JSPrettier formats the code according to best practices. Install JSPrettier: Go to your folder where you want to run Prettier and check…","rawMarkdownBody":"\n![](https://i.imgur.com/GNpxcbc.jpg \"Photo by Anderson Guerra from Pexels\")\n\nJSPrettier formats the code according to best practices.\n\n> Install JSPrettier:\n```\nnpm install --global prettier\n```\n\n> Go to your folder where you want to run Prettier and check which files need to be formatted by following command\n```\nprettier src/** --check\n```\n> Let Prettier overwrite files\n```\nprettier src/** --write\n```\n>Do not forget to also run Prettier on subfolders such as <code>components</code>. For that you first need to navigate to the parent folder, such as <code>cd src</code> and then:\n```\nprettier components/** --write\n```\n\nTo run preettir for src AND subfoldrs:\n```\nprettier src/**/* --write\n```","frontmatter":{"date":"2019-12-08","title":"JSPrettier"},"fields":{"slug":"/JSPrettier/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/GNpxcbc.jpg\" title=\"Photo by Anderson Guerra from Pexels\"></p>\n<p>JSPrettier formats the code according to best practices.</p>\n<blockquote>\n<p>Install JSPrettier:</p>\n</blockquote>\n<pre><code>npm install --global prettier\n</code></pre>\n<blockquote>\n<p>Go to your folder where you want to run Prettier and check which files need to be formatted by following command</p>\n</blockquote>\n<pre><code>prettier src/** --check\n</code></pre>\n<blockquote>\n<p>Let Prettier overwrite files</p>\n</blockquote>\n<pre><code>prettier src/** --write\n</code></pre>\n<blockquote>\n<p>Do not forget to also run Prettier on subfolders such as <code>components</code>. For that you first need to navigate to the parent folder, such as <code>cd src</code> and then:</p>\n</blockquote>\n<pre><code>prettier components/** --write\n</code></pre>\n<p>To run preettir for src AND subfoldrs:</p>\n<pre><code>prettier src/**/* --write\n</code></pre>"}},{"node":{"id":"6c7a9c5d-080f-561e-a05d-d3afd4e161ef","excerpt":"How to generate SSH key and add to SSH agent? First check if you have existing ssh keys by pasting this to command line: Also check in your…","rawMarkdownBody":"\r\n![](https://i.imgur.com/wOgHAU7.jpg \"Photo by Ylanite Koppens from Pexels\")\r\n\r\nHow to generate SSH key and add to SSH agent?\r\n\r\n> First check if you have existing ssh keys by pasting this to command line:\r\n```\r\nls -al ~/.ssh\r\n```\r\n\r\n> Also check in your folders to see if you already have a public SSH key. By default, the filenames of the public keys are one of the following:\r\n```\r\nid_rsa.pub\r\nid_ecdsa.pub\r\nid_ed25519.pub\r\n```\r\n\r\n> If you found no SSH keys, follow next steps:\r\n\r\n> Open command line and paste the following code. Please note that <code>your_email@example.com</code> is your email address :\r\n```\r\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\r\n```\r\n\r\n> You will be prompted following message, then just press **ENTER**:\r\n```\r\nEnter a file in which to save the key (/c/Users/you/.ssh/id_rsa):\r\n```\r\n\r\n> You will be asked to enter your passphrase:\r\n```\r\nEnter passphrase (empty for no passphrase):\r\n```\r\n\r\n> And to confirm it again:\r\n```\r\nEnter same passphrase again:\r\n```\r\n\r\n> Key has been generated now\r\n\r\n> We need to tell our computer we want to use this key\r\n\r\n> First we start our SSH agent\r\n```\r\neval $(ssh-agent -s)\r\n```\r\n\r\n> We will get agent pid\r\n\r\n> Now we need to add the key to our home folder (default location)\r\n```\r\nssh-add ~/.ssh/id_rsa\r\n```\r\n\r\n> Enter the pass phrase\r\n\r\n> The identity has been added\r\n\r\n> Now we need to copy the **PUBLIC** key to our clipboard, so that we can paste it into Github.\r\n\r\n> To do it, we can find the file and open it. It will be in the /C/Users/Mia/.ssh/id_rsa.pub and we can copy it\r\n\r\n> Alternatively you can use the command line to copy the ssh key to clipboard:\r\n```\r\nclip < ~/.ssh/id_rsa.pub\r\n```\r\n> Now it was copied to the clipboard\r\n\r\n> We can go to our Github\r\n\r\n> Click on Profile picture -> Settings -> SSH and GPG keys -> New SSH Key\r\n\r\n> Give it a title like: \"private pc\" or \"home desktop\" or anything\r\n\r\n> Paste the SSH key to the Key box\r\n\r\n> Click the button <code>Add SSH Key</code>\r\n\r\n> We are **DONE** :)\r\n\r\nReferences:\r\n\r\nhttps://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\r\nhttps://www.youtube.com/watch?v=WgZIv5HI44o\r\n\r\n![](https://i.imgur.com/LyXt5ub.jpg \"Photo by Pixabay from Pexels\")","frontmatter":{"date":"2019-12-06","title":"Generate SSH Key for GitHub"},"fields":{"slug":"/Generate_SSH_Key/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/wOgHAU7.jpg\" title=\"Photo by Ylanite Koppens from Pexels\"></p>\n<p>How to generate SSH key and add to SSH agent?</p>\n<blockquote>\n<p>First check if you have existing ssh keys by pasting this to command line:</p>\n</blockquote>\n<pre><code>ls -al ~/.ssh\n</code></pre>\n<blockquote>\n<p>Also check in your folders to see if you already have a public SSH key. By default, the filenames of the public keys are one of the following:</p>\n</blockquote>\n<pre><code>id_rsa.pub\nid_ecdsa.pub\nid_ed25519.pub\n</code></pre>\n<blockquote>\n<p>If you found no SSH keys, follow next steps:</p>\n</blockquote>\n<blockquote>\n<p>Open command line and paste the following code. Please note that <code>your_email@example.com</code> is your email address :</p>\n</blockquote>\n<pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre>\n<blockquote>\n<p>You will be prompted following message, then just press <strong>ENTER</strong>:</p>\n</blockquote>\n<pre><code>Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):\n</code></pre>\n<blockquote>\n<p>You will be asked to enter your passphrase:</p>\n</blockquote>\n<pre><code>Enter passphrase (empty for no passphrase):\n</code></pre>\n<blockquote>\n<p>And to confirm it again:</p>\n</blockquote>\n<pre><code>Enter same passphrase again:\n</code></pre>\n<blockquote>\n<p>Key has been generated now</p>\n</blockquote>\n<blockquote>\n<p>We need to tell our computer we want to use this key</p>\n</blockquote>\n<blockquote>\n<p>First we start our SSH agent</p>\n</blockquote>\n<pre><code>eval $(ssh-agent -s)\n</code></pre>\n<blockquote>\n<p>We will get agent pid</p>\n</blockquote>\n<blockquote>\n<p>Now we need to add the key to our home folder (default location)</p>\n</blockquote>\n<pre><code>ssh-add ~/.ssh/id_rsa\n</code></pre>\n<blockquote>\n<p>Enter the pass phrase</p>\n</blockquote>\n<blockquote>\n<p>The identity has been added</p>\n</blockquote>\n<blockquote>\n<p>Now we need to copy the <strong>PUBLIC</strong> key to our clipboard, so that we can paste it into Github.</p>\n</blockquote>\n<blockquote>\n<p>To do it, we can find the file and open it. It will be in the /C/Users/Mia/.ssh/id_rsa.pub and we can copy it</p>\n</blockquote>\n<blockquote>\n<p>Alternatively you can use the command line to copy the ssh key to clipboard:</p>\n</blockquote>\n<pre><code>clip &#x3C; ~/.ssh/id_rsa.pub\n</code></pre>\n<blockquote>\n<p>Now it was copied to the clipboard</p>\n</blockquote>\n<blockquote>\n<p>We can go to our Github</p>\n</blockquote>\n<blockquote>\n<p>Click on Profile picture -> Settings -> SSH and GPG keys -> New SSH Key</p>\n</blockquote>\n<blockquote>\n<p>Give it a title like: \"private pc\" or \"home desktop\" or anything</p>\n</blockquote>\n<blockquote>\n<p>Paste the SSH key to the Key box</p>\n</blockquote>\n<blockquote>\n<p>Click the button <code>Add SSH Key</code></p>\n</blockquote>\n<blockquote>\n<p>We are <strong>DONE</strong> :)</p>\n</blockquote>\n<p>References:</p>\n<p><a href=\"https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a>\n<a href=\"https://www.youtube.com/watch?v=WgZIv5HI44o\">https://www.youtube.com/watch?v=WgZIv5HI44o</a></p>\n<p><img src=\"https://i.imgur.com/LyXt5ub.jpg\" title=\"Photo by Pixabay from Pexels\"></p>"}},{"node":{"id":"1b9f665a-4a63-5e88-9430-7f99be2ccc5f","excerpt":"Regular expressions allow to match certain patters. If we want to find char \"a\" in a string \"Today is a nice day\" and replace is with \"ha…","rawMarkdownBody":"\r\n![](https://i.imgur.com/8v0qmr4.jpg \"Photo by Medhat Ayad from Pexels\")\r\n\r\nRegular expressions allow to match certain patters.\r\n\r\nIf we want to find char <code>\"a\"</code> in a string <code>\"Today is a nice day\"</code> and replace is with <code>\"ha\"</code>:\r\n\r\n```\r\nlet sentence=\"Today is a nice day\".replace(\"a\", \"ha\");\r\nconsole.log(sentence);\r\n// output is: \"Todhay is a nice day\"\r\n```\r\n\r\nWhat happened here? Only the first occurence of the <code>\"a\"</code> was found. How can we replace all? We can use regular expressions with <code>g</code> flag.\r\n\r\n```\r\nlet sentence=\"Today is a nice day\".replace(/a/g, \"ha\");\r\nconsole.log(sentence);\r\n// output is: \"Todhay is ha nice dhay\"\r\n```\r\n\r\nHow can we use a variable? For example we want to replace first <code>\"a\"</code>, then <code>\"i\"</code>, etc.\r\n\r\n```\r\nvar replacedChar = \"a\";\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"ha\");\r\nconsole.log(sentence);\r\n// output is: \"Todhay is ha nice dhay\"\r\n\r\nvar replacedChar = \"i\";\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"I\");\r\nconsole.log(sentence);\r\n// output is: \"Today Is  nIce day\"\r\n```\r\n\r\nHow can we do it using variable?\r\n```\r\nvar char=\"d\";\r\nvar replacedChar = char;\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"D\");\r\nconsole.log(sentence);\r\n// output is: \"ToDay is a nice Day\"\r\n```\r\n\r\nHow can we make sure we replace one or another character?\r\n\r\n```\r\nvar char=\"d\";\r\nvar char2=\"a\";\r\nvar replacedChar = char+\"|\"+char2;\r\nvar re = new RegExp(replacedChar,\"g\");\r\nlet sentence=\"Today is a nice day\".replace(re, \"\");\r\nconsole.log(sentence);\r\n// output is: \"Toy is  nice y\"\r\n```\r\n\r\n\r\n![](https://i.imgur.com/E1iESVO.jpg \"Photo by Ann Lee from Pexels\")","frontmatter":{"date":"2019-12-05","title":"Replace all occurrencies of a string with RegEx"},"fields":{"slug":"/Replace_all_occurrencies_of_string_using_RegEx/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/8v0qmr4.jpg\" title=\"Photo by Medhat Ayad from Pexels\"></p>\n<p>Regular expressions allow to match certain patters.</p>\n<p>If we want to find char <code>\"a\"</code> in a string <code>\"Today is a nice day\"</code> and replace is with <code>\"ha\"</code>:</p>\n<pre><code>let sentence=\"Today is a nice day\".replace(\"a\", \"ha\");\nconsole.log(sentence);\n// output is: \"Todhay is a nice day\"\n</code></pre>\n<p>What happened here? Only the first occurence of the <code>\"a\"</code> was found. How can we replace all? We can use regular expressions with <code>g</code> flag.</p>\n<pre><code>let sentence=\"Today is a nice day\".replace(/a/g, \"ha\");\nconsole.log(sentence);\n// output is: \"Todhay is ha nice dhay\"\n</code></pre>\n<p>How can we use a variable? For example we want to replace first <code>\"a\"</code>, then <code>\"i\"</code>, etc.</p>\n<pre><code>var replacedChar = \"a\";\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"ha\");\nconsole.log(sentence);\n// output is: \"Todhay is ha nice dhay\"\n\nvar replacedChar = \"i\";\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"I\");\nconsole.log(sentence);\n// output is: \"Today Is  nIce day\"\n</code></pre>\n<p>How can we do it using variable?</p>\n<pre><code>var char=\"d\";\nvar replacedChar = char;\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"D\");\nconsole.log(sentence);\n// output is: \"ToDay is a nice Day\"\n</code></pre>\n<p>How can we make sure we replace one or another character?</p>\n<pre><code>var char=\"d\";\nvar char2=\"a\";\nvar replacedChar = char+\"|\"+char2;\nvar re = new RegExp(replacedChar,\"g\");\nlet sentence=\"Today is a nice day\".replace(re, \"\");\nconsole.log(sentence);\n// output is: \"Toy is  nice y\"\n</code></pre>\n<p><img src=\"https://i.imgur.com/E1iESVO.jpg\" title=\"Photo by Ann Lee from Pexels\"></p>"}},{"node":{"id":"437c8795-3c37-5d3f-9387-d28398b7732c","excerpt":"How can we render an element under certain condition? Unfortunatlly, we cannot use if statements within JSX like: It is due to compiling…","rawMarkdownBody":"\r\n![](https://i.imgur.com/BRbkVil.jpg \"Photo by Aleksandar Pasaric from Pexels\")\r\n\r\nHow can we render an element under certain condition? Unfortunatlly, we cannot use <code>if</code> statements within JSX like:\r\n```\r\n(<h1>\r\n  {\r\n    if (purchase.complete) {\r\n      'Thank you for placing an order!'\r\n    }\r\n  }\r\n</h1>)\r\n```\r\nIt is due to compiling.\r\n\r\n**Alternative 1:**\r\n```\r\nlet message;\r\n\r\nif (user.age >= 18) {\r\n  meessage= (\r\n    <h1>\r\n      Let´s go out!\r\n    </h1>\r\n  );\r\n} else {\r\n  message = (\r\n    <h1>\r\n      Let´s study\r\n    </h1>\r\n  );\r\n}\r\n```\r\n\r\n**Alternative 2:**\r\n```\r\nconst headline = (\r\n  <h1>\r\n    { age >= 18 ? 'Let´s go out' : 'Let´s study' }\r\n  </h1>\r\n);\r\n```\r\n\r\n**Alternative 3:**\r\n```\r\nconst lunch = (\r\n  <ul>\r\n    <li>Foods</li>\r\n    { !baby && <li>Pizza</li> }\r\n    { age > 15 && <li>Salad</li> }\r\n    { age > 25 && <li>Veggies</li> }\r\n  </ul>\r\n);\r\n\r\n```\r\n\r\n![](https://i.imgur.com/4YCrCOR.jpg \"Photo by Mudassir Ali from Pexels\")","frontmatter":{"date":"2019-12-04","title":"Conditionally render a component"},"fields":{"slug":"/Conditionally_Render_Component/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/BRbkVil.jpg\" title=\"Photo by Aleksandar Pasaric from Pexels\"></p>\n<p>How can we render an element under certain condition? Unfortunatlly, we cannot use <code>if</code> statements within JSX like:</p>\n<pre><code>(&#x3C;h1>\n  {\n    if (purchase.complete) {\n      'Thank you for placing an order!'\n    }\n  }\n&#x3C;/h1>)\n</code></pre>\n<p>It is due to compiling.</p>\n<p><strong>Alternative 1:</strong></p>\n<pre><code>let message;\n\nif (user.age >= 18) {\n  meessage= (\n    &#x3C;h1>\n      Let´s go out!\n    &#x3C;/h1>\n  );\n} else {\n  message = (\n    &#x3C;h1>\n      Let´s study\n    &#x3C;/h1>\n  );\n}\n</code></pre>\n<p><strong>Alternative 2:</strong></p>\n<pre><code>const headline = (\n  &#x3C;h1>\n    { age >= 18 ? 'Let´s go out' : 'Let´s study' }\n  &#x3C;/h1>\n);\n</code></pre>\n<p><strong>Alternative 3:</strong></p>\n<pre><code>const lunch = (\n  &#x3C;ul>\n    &#x3C;li>Foods&#x3C;/li>\n    { !baby &#x26;&#x26; &#x3C;li>Pizza&#x3C;/li> }\n    { age > 15 &#x26;&#x26; &#x3C;li>Salad&#x3C;/li> }\n    { age > 25 &#x26;&#x26; &#x3C;li>Veggies&#x3C;/li> }\n  &#x3C;/ul>\n);\n</code></pre>\n<p><img src=\"https://i.imgur.com/4YCrCOR.jpg\" title=\"Photo by Mudassir Ali from Pexels\"></p>"}},{"node":{"id":"c62dc289-0afb-5171-97a9-5936b8697f9f","excerpt":"If you run into an Please tell me who you are.error: You can solve it with following steps: Reference: https://stackoverflow.com/questions…","rawMarkdownBody":"\r\n![](https://i.imgur.com/J4QhoGt.jpg \"Photo by \r\nKristin De Soto from Pexels\")\r\n\r\nIf you run into an <code>Please tell me who you are.</code>error:\r\n```\r\n*** Please tell me who you are.\r\nRun\r\n  git config --global user.email \"you@example.com\"\r\n  git config --global user.name \"Your Name\"\r\nto set your account's default identity.\r\nOmit --global to set the identity only in this repository.\r\nfatal: unable to auto-detect email address (got 'addania@addania-Lenovo-IdeaPad-Z510.(none)')\r\n\r\n```\r\n\r\nYou can solve it with following steps:\r\n```\r\n1.git init\r\n2.git config user.name \"someone\"\r\n3.git config user.email \"someone@someplace.com\"\r\n4.git add *\r\n5.git commit -m \"some init msg\"\r\n```\r\n\r\nReference:\r\n\r\nhttps://stackoverflow.com/questions/11656761/git-please-tell-me-who-you-are-error","frontmatter":{"date":"2019-12-03","title":"Tell me who you are error"},"fields":{"slug":"/Tell_Me_Who_You_Are/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/J4QhoGt.jpg\" title=\"Photo by \nKristin De Soto from Pexels\"></p>\n<p>If you run into an <code>Please tell me who you are.</code>error:</p>\n<pre><code>*** Please tell me who you are.\nRun\n  git config --global user.email \"you@example.com\"\n  git config --global user.name \"Your Name\"\nto set your account's default identity.\nOmit --global to set the identity only in this repository.\nfatal: unable to auto-detect email address (got 'addania@addania-Lenovo-IdeaPad-Z510.(none)')\n</code></pre>\n<p>You can solve it with following steps:</p>\n<pre><code>1.git init\n2.git config user.name \"someone\"\n3.git config user.email \"someone@someplace.com\"\n4.git add *\n5.git commit -m \"some init msg\"\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/11656761/git-please-tell-me-who-you-are-error\">https://stackoverflow.com/questions/11656761/git-please-tell-me-who-you-are-error</a></p>"}},{"node":{"id":"fff993ea-e53c-5d28-a6f9-a0cb3ac46303","excerpt":"Let's talk about exporting / importing / ... and ... smuggling :) There are 2 types of exports: default and named exports. And so are the…","rawMarkdownBody":"\r\n![](https://i.imgur.com/1S7qNP7.jpg \"Photo by Pixabay from Pexels\")\r\n\r\n\r\nLet's talk about exporting / importing / ... and ... smuggling :)\r\n\r\n\r\nThere are 2 types of exports: **default** and **named** exports. And so are the imports.\r\n\r\n\r\n**Named exports** are exported with a given name of the component. We can't change the name of the exported component.\r\n\r\n**Default exports** means we can change name of the exported component.\r\n\r\nExample of default export:\r\n```\r\nexport default App\r\n```\r\n\r\nThen import looks like this:\r\n```\r\nimport App from \"./app.js\";\r\n```\r\n\r\nBut we can also write\r\n```\r\nimport Unicorn from \"./app.js\";\r\n```\r\n\r\nNotice the lack of curly braces around the name.\r\n\r\nExample of named export:\r\n```\r\nexport class App extends React.Componenet(){\r\n}\r\n```\r\n\r\nImporting named export:\r\n```\r\nimport { App } from \"./app.js\"\r\n```\r\nNotice how we need to wrap the name of component into curly braces.\r\n\r\nIn the above example we cannot change the name, unless I write as:\r\n```\r\nimport { App as Unicorn } from \"./app.js\"\r\n```\r\n\r\nAlternative to named export is:\r\n```\r\nclass App extends React.Componenet(){\r\n...}\r\nexport {\r\n  App,\r\n  ..\r\n}\r\n```\r\n\r\nIn above example I can export more component at the same time:\r\n```\r\nexport {\r\n  App, \r\n  Something,\r\n  AnotherThing\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/FMsL26h.jpg \"Photo by Pixabay from Pexels\")\r\n","frontmatter":{"date":"2019-12-01","title":"Exports"},"fields":{"slug":"/Exports/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/1S7qNP7.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>Let's talk about exporting / importing / ... and ... smuggling :)</p>\n<p>There are 2 types of exports: <strong>default</strong> and <strong>named</strong> exports. And so are the imports.</p>\n<p><strong>Named exports</strong> are exported with a given name of the component. We can't change the name of the exported component.</p>\n<p><strong>Default exports</strong> means we can change name of the exported component.</p>\n<p>Example of default export:</p>\n<pre><code>export default App\n</code></pre>\n<p>Then import looks like this:</p>\n<pre><code>import App from \"./app.js\";\n</code></pre>\n<p>But we can also write</p>\n<pre><code>import Unicorn from \"./app.js\";\n</code></pre>\n<p>Notice the lack of curly braces around the name.</p>\n<p>Example of named export:</p>\n<pre><code>export class App extends React.Componenet(){\n}\n</code></pre>\n<p>Importing named export:</p>\n<pre><code>import { App } from \"./app.js\"\n</code></pre>\n<p>Notice how we need to wrap the name of component into curly braces.</p>\n<p>In the above example we cannot change the name, unless I write as:</p>\n<pre><code>import { App as Unicorn } from \"./app.js\"\n</code></pre>\n<p>Alternative to named export is:</p>\n<pre><code>class App extends React.Componenet(){\n...}\nexport {\n  App,\n  ..\n}\n</code></pre>\n<p>In above example I can export more component at the same time:</p>\n<pre><code>export {\n  App, \n  Something,\n  AnotherThing\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/FMsL26h.jpg\" title=\"Photo by Pixabay from Pexels\"></p>"}},{"node":{"id":"5fd116b7-fb8d-5ab1-a051-45b1366a7089","excerpt":"Let's talk about packages our app is depending on. These can be found in the package.json file. There 2 types of dependencies:…","rawMarkdownBody":"\r\n![](https://i.imgur.com/xa1x0Gq.jpg \"Photo by Kim Stiver from Pexels\")\r\n\r\nLet's talk about packages our app is depending on. These can be found in the package.json file. There 2 types of dependencies:\r\n\r\n1/dependencies\r\n2/devDependencies\r\n\r\n**devDependeencies** are not directly used by the app when it is building, testing, running. \r\n\r\nExample of devDependencies:\r\n```\r\ngh-pages\r\n```\r\n\r\n**dependencies** are packages which are necessary to build, run, test the APP. They are most of the time imported like: \r\n```\r\nimport React rom \"react\"\r\nimport Bootstrap ...\r\n```\r\n\r\nTo install dependecies, type this in command line:\r\n```\r\nnpm install\r\n```\r\n\r\n<code>npm install</code> installs all **devDependancies** and **dependeencies** which are specified in package.json!\r\n\r\n<code>npm install</code> **MUST** be triggered manually by user. I decide when and which dependency I want to install. It must be installed in the folder where package.json. If it is not where package.json, it will throw an error (*\"hey, bro you want me to install pckages?? But there is no packages definition, so what should I do??\"*)\r\n\r\nIf it is installed then I have a node_modules folder in my project folder.\r\n\r\n<code>npm install</code> is done once and for all for each package (it will install all packages if I don't provide name of package) :)\r\n\r\n> To install individual package, for example bootstrap\r\n```\r\nnpm install bootstrap\r\n```\r\n\r\n<code>npm start</code> will look into package.json in the script section under command <code>start</code>. It will execute whatever is in there. For applications created by create-react-app, there will be:\r\n```\r\n\"start\": \"react-scripts start\",\r\n```\r\n\r\n><code>react-scripts start</code> will start local host environment under port number: 3000\r\n\r\n> If I have gatsby project, I can also write\r\n```\r\nnpm start\r\n```\r\n\r\n> <code>npm run develop</code> will also execute whatever is in package.json, in scripts under <code>start</code>\r\n```\r\n\"npm run develop\",\r\n```\r\n\r\n> This is then equivalent to\r\n```\r\ngatsby develop\r\n```\r\n\r\n> When I have command:\r\n```\r\nnpm run develop\r\n```\r\n\r\n> <code>npm run</code> means it will look into package.json under scripts and select script called\r\n```\r\n\"develop\"\r\n```\r\n\r\n> Then under develop we have:\r\n```\r\n\"develop\": \"gatsby develop\",\r\n```\r\n\r\n> <code>\"gatsby develop\"</code> is the FINAL thing FINALLY\r\n```\r\nphew\r\n```\r\n\r\n> I should always use \r\n```\r\nnpm run ....\r\n```\r\n\r\n> For example:\r\n```\r\nnpm run start\r\n```\r\n\r\nor\r\n```\r\nnpm run develop\r\n```\r\n\r\nor \r\n```\r\nnpm run test\r\n```\r\n\r\n> But because start and test are such used and common, you can skip word <code>run</code> they can be abbreviated to\r\n```\r\nnpm start\r\n```\r\n\r\nor\r\n```\r\nnpm test\r\n```\r\n\r\n> However, you CANNOT abbreviate npm develop, it needs to include run\r\n```\r\nnpm run develop\r\n```\r\n\r\n![Package](https://i.imgur.com/G6XuINT.jpg \"Photo by Pixabay from Pexels\")\r\n\r\n**Dependencies Management**\r\n\r\n> When I work on a project and test out things, I will probably install a lot of dependencies in my project. It can happen that the final version of the project will not need all of them. For that reason it is a good idea to tidy up the dependencies when the project is final. In order to remove dependencies we do the following:\r\n\r\n> Open the <code>package.json</code> and remove those those dependencies which you don’t need. But... how do I know from all of them which ones are part of the final version of the project? We can use a tool called: <code>npm-check</code>, which will check which dependencies are part of the last  version of the project and which dependencies need updating. \r\n\r\n> In order to download the npm-check, write this to the terminal:\r\n```\r\nnpm install -g npm-check\r\n```\r\n\r\n> <code>-g</code> means that the package will be installed globally\r\n\r\n> Then to use the <code>npm-check</code>, navigate to your project folder and paste:\r\n```\r\nnpm-check\r\n```\r\n\r\n> You will see the list of dependencies in terminal which are not used by your project or which need updating.\r\n\r\n> Afterwards go to your <code>package.json</code> and delete unnecessary dependencies.\r\n\r\n> Afterwards we can remove/delete entire <code>node_modules</code> folder in the project folder. \r\n\r\n> Deleting <code>node_modules</code> from terminal, paste this:\r\n```\r\nrm -rf node_modules\r\n```\r\n> Above will delete entire <code>node_modules</code> folder\r\n\r\n> Alternatively you can also delete only a particular package by:\r\n```\r\nnpm prune [name of package]\r\n```\r\n\r\n> When everything we need is deleted, we can install only relevant dependencies which we left in <code>package.json</code>again by:\r\n```\r\nnpm install\r\n```\r\n\r\n> Your project is now dependent only on relevant packages and up-to-date! Yay! :)\r\n\r\n\r\n> How to install new version of npm\r\n```\r\nnpm install -g npm\r\n\r\n```\r\nReference:\r\n\r\nhttps://stackoverflow.com/questions/21122342/how-to-clean-node-modules-folder-of-packages-that-are-not-in-package-json\r\n\r\n![Package](https://i.imgur.com/Y5egUqF.jpg \"Photo by freestocks.org from Pexels\")","frontmatter":{"date":"2019-12-01","title":"NPM Packages"},"fields":{"slug":"/NPM_Packages/"},"timeToRead":4,"html":"<p><img src=\"https://i.imgur.com/xa1x0Gq.jpg\" title=\"Photo by Kim Stiver from Pexels\"></p>\n<p>Let's talk about packages our app is depending on. These can be found in the package.json file. There 2 types of dependencies:</p>\n<p>1/dependencies\n2/devDependencies</p>\n<p><strong>devDependeencies</strong> are not directly used by the app when it is building, testing, running. </p>\n<p>Example of devDependencies:</p>\n<pre><code>gh-pages\n</code></pre>\n<p><strong>dependencies</strong> are packages which are necessary to build, run, test the APP. They are most of the time imported like: </p>\n<pre><code>import React rom \"react\"\nimport Bootstrap ...\n</code></pre>\n<p>To install dependecies, type this in command line:</p>\n<pre><code>npm install\n</code></pre>\n<p><code>npm install</code> installs all <strong>devDependancies</strong> and <strong>dependeencies</strong> which are specified in package.json!</p>\n<p><code>npm install</code> <strong>MUST</strong> be triggered manually by user. I decide when and which dependency I want to install. It must be installed in the folder where package.json. If it is not where package.json, it will throw an error (<em>\"hey, bro you want me to install pckages?? But there is no packages definition, so what should I do??\"</em>)</p>\n<p>If it is installed then I have a node_modules folder in my project folder.</p>\n<p><code>npm install</code> is done once and for all for each package (it will install all packages if I don't provide name of package) :)</p>\n<blockquote>\n<p>To install individual package, for example bootstrap</p>\n</blockquote>\n<pre><code>npm install bootstrap\n</code></pre>\n<p><code>npm start</code> will look into package.json in the script section under command <code>start</code>. It will execute whatever is in there. For applications created by create-react-app, there will be:</p>\n<pre><code>\"start\": \"react-scripts start\",\n</code></pre>\n<blockquote>\n<p><code>react-scripts start</code> will start local host environment under port number: 3000</p>\n</blockquote>\n<blockquote>\n<p>If I have gatsby project, I can also write</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<blockquote>\n<p><code>npm run develop</code> will also execute whatever is in package.json, in scripts under <code>start</code></p>\n</blockquote>\n<pre><code>\"npm run develop\",\n</code></pre>\n<blockquote>\n<p>This is then equivalent to</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>When I have command:</p>\n</blockquote>\n<pre><code>npm run develop\n</code></pre>\n<blockquote>\n<p><code>npm run</code> means it will look into package.json under scripts and select script called</p>\n</blockquote>\n<pre><code>\"develop\"\n</code></pre>\n<blockquote>\n<p>Then under develop we have:</p>\n</blockquote>\n<pre><code>\"develop\": \"gatsby develop\",\n</code></pre>\n<blockquote>\n<p><code>\"gatsby develop\"</code> is the FINAL thing FINALLY</p>\n</blockquote>\n<pre><code>phew\n</code></pre>\n<blockquote>\n<p>I should always use </p>\n</blockquote>\n<pre><code>npm run ....\n</code></pre>\n<blockquote>\n<p>For example:</p>\n</blockquote>\n<pre><code>npm run start\n</code></pre>\n<p>or</p>\n<pre><code>npm run develop\n</code></pre>\n<p>or </p>\n<pre><code>npm run test\n</code></pre>\n<blockquote>\n<p>But because start and test are such used and common, you can skip word <code>run</code> they can be abbreviated to</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<p>or</p>\n<pre><code>npm test\n</code></pre>\n<blockquote>\n<p>However, you CANNOT abbreviate npm develop, it needs to include run</p>\n</blockquote>\n<pre><code>npm run develop\n</code></pre>\n<p><img src=\"https://i.imgur.com/G6XuINT.jpg\" alt=\"Package\" title=\"Photo by Pixabay from Pexels\"></p>\n<p><strong>Dependencies Management</strong></p>\n<blockquote>\n<p>When I work on a project and test out things, I will probably install a lot of dependencies in my project. It can happen that the final version of the project will not need all of them. For that reason it is a good idea to tidy up the dependencies when the project is final. In order to remove dependencies we do the following:</p>\n</blockquote>\n<blockquote>\n<p>Open the <code>package.json</code> and remove those those dependencies which you don’t need. But... how do I know from all of them which ones are part of the final version of the project? We can use a tool called: <code>npm-check</code>, which will check which dependencies are part of the last  version of the project and which dependencies need updating. </p>\n</blockquote>\n<blockquote>\n<p>In order to download the npm-check, write this to the terminal:</p>\n</blockquote>\n<pre><code>npm install -g npm-check\n</code></pre>\n<blockquote>\n<p><code>-g</code> means that the package will be installed globally</p>\n</blockquote>\n<blockquote>\n<p>Then to use the <code>npm-check</code>, navigate to your project folder and paste:</p>\n</blockquote>\n<pre><code>npm-check\n</code></pre>\n<blockquote>\n<p>You will see the list of dependencies in terminal which are not used by your project or which need updating.</p>\n</blockquote>\n<blockquote>\n<p>Afterwards go to your <code>package.json</code> and delete unnecessary dependencies.</p>\n</blockquote>\n<blockquote>\n<p>Afterwards we can remove/delete entire <code>node_modules</code> folder in the project folder. </p>\n</blockquote>\n<blockquote>\n<p>Deleting <code>node_modules</code> from terminal, paste this:</p>\n</blockquote>\n<pre><code>rm -rf node_modules\n</code></pre>\n<blockquote>\n<p>Above will delete entire <code>node_modules</code> folder</p>\n</blockquote>\n<blockquote>\n<p>Alternatively you can also delete only a particular package by:</p>\n</blockquote>\n<pre><code>npm prune [name of package]\n</code></pre>\n<blockquote>\n<p>When everything we need is deleted, we can install only relevant dependencies which we left in <code>package.json</code>again by:</p>\n</blockquote>\n<pre><code>npm install\n</code></pre>\n<blockquote>\n<p>Your project is now dependent only on relevant packages and up-to-date! Yay! :)</p>\n</blockquote>\n<blockquote>\n<p>How to install new version of npm</p>\n</blockquote>\n<pre><code>npm install -g npm\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/21122342/how-to-clean-node-modules-folder-of-packages-that-are-not-in-package-json\">https://stackoverflow.com/questions/21122342/how-to-clean-node-modules-folder-of-packages-that-are-not-in-package-json</a></p>\n<p><img src=\"https://i.imgur.com/Y5egUqF.jpg\" alt=\"Package\" title=\"Photo by freestocks.org from Pexels\"></p>"}},{"node":{"id":"db53cc14-dc3b-5b79-a034-e73f0bd9cc3e","excerpt":"This software allows us to switch between different versions of the node. Why to want to switch? Because some capabilities are not supported…","rawMarkdownBody":"\r\n![](https://i.imgur.com/GUDW6qM.jpg \"Photo by Vitaly Vlasov from Pexels\")\r\n\r\nThis software allows us to switch between different versions of the node. Why to want to switch? Because some capabilities are not supported in certain versions of Node. For example, you have a project which has some dependencies on different packages. If you want to <code>npm install</code> them, then you get errors. One of the reasons can be that you are using latest (not yet stable) version of node.\r\n\r\nNode in general is installed globally for all projects. To be able to change versions we need to de-install it and only use NVM from now on to switch between versions. Each project can have different node version then. It is used a lot in professional dev life.\r\n\r\n> Paste this to command line (it will be installed globally, no matter in which folder I currently am):\r\n```\r\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash \r\n```\r\n\r\n> Restart the terminal\r\n\r\n> Write this so that NVM uses previous (already installed) SYSTEM version of NODE:\r\n```\r\nnvm use system\r\n```\r\n\r\n>If I want to see all shortcuts for nvm\r\n```\r\nnvm\r\n```\r\n\r\n> If I want to see current version\r\n```\r\nnvm current\r\n```\r\n\r\n> To install a specific version of the node **GLOBALLY** to be able to use it later on in the project:\r\n```\r\nnvm install 10.0.0\r\n```\r\n\r\n> Then we will need to add the different version of node to a specific project. \r\n\r\n> Go to project directory\r\n\r\n> In the root location of the project (where package.json is) create a new file with touch command. File will be calle <code>.nvmrc</code>:\r\n```\r\ntouch .nvmrc\r\n```\r\n\r\n> Then you open that file and paste number of version in it\r\n```\r\n10.0\r\n```\r\n\r\nAlternatively you can combine the above two command in one:\r\n```\r\necho \"10.0\" > .nvmrc\r\n```","frontmatter":{"date":"2019-11-30","title":"Node Version Manager - NVM"},"fields":{"slug":"/NVM/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/GUDW6qM.jpg\" title=\"Photo by Vitaly Vlasov from Pexels\"></p>\n<p>This software allows us to switch between different versions of the node. Why to want to switch? Because some capabilities are not supported in certain versions of Node. For example, you have a project which has some dependencies on different packages. If you want to <code>npm install</code> them, then you get errors. One of the reasons can be that you are using latest (not yet stable) version of node.</p>\n<p>Node in general is installed globally for all projects. To be able to change versions we need to de-install it and only use NVM from now on to switch between versions. Each project can have different node version then. It is used a lot in professional dev life.</p>\n<blockquote>\n<p>Paste this to command line (it will be installed globally, no matter in which folder I currently am):</p>\n</blockquote>\n<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash \n</code></pre>\n<blockquote>\n<p>Restart the terminal</p>\n</blockquote>\n<blockquote>\n<p>Write this so that NVM uses previous (already installed) SYSTEM version of NODE:</p>\n</blockquote>\n<pre><code>nvm use system\n</code></pre>\n<blockquote>\n<p>If I want to see all shortcuts for nvm</p>\n</blockquote>\n<pre><code>nvm\n</code></pre>\n<blockquote>\n<p>If I want to see current version</p>\n</blockquote>\n<pre><code>nvm current\n</code></pre>\n<blockquote>\n<p>To install a specific version of the node <strong>GLOBALLY</strong> to be able to use it later on in the project:</p>\n</blockquote>\n<pre><code>nvm install 10.0.0\n</code></pre>\n<blockquote>\n<p>Then we will need to add the different version of node to a specific project. </p>\n</blockquote>\n<blockquote>\n<p>Go to project directory</p>\n</blockquote>\n<blockquote>\n<p>In the root location of the project (where package.json is) create a new file with touch command. File will be calle <code>.nvmrc</code>:</p>\n</blockquote>\n<pre><code>touch .nvmrc\n</code></pre>\n<blockquote>\n<p>Then you open that file and paste number of version in it</p>\n</blockquote>\n<pre><code>10.0\n</code></pre>\n<p>Alternatively you can combine the above two command in one:</p>\n<pre><code>echo \"10.0\" > .nvmrc\n</code></pre>"}},{"node":{"id":"460734f0-66d4-52f7-9caf-5c773c78f91d","excerpt":"Cloning Github repository means creating a copy of REMOTE repo locally to your machine. How to do it?  Go to repository root folder (top one…","rawMarkdownBody":"\r\n![](https://i.imgur.com/GmB70yE.jpg \"Photo by Trinity Kubassek from Pexels\")\r\n\r\nCloning Github repository means creating a copy of **REMOTE** repo locally to your machine. How to do it? \r\n\r\n> Go to repository root folder (top one)\r\n\r\n> Click the big GREEN (frog) button called:\r\n```\r\nClone of Download\r\n```\r\n\r\n> Copy the url:\r\n```\r\nhttps://github.com/nvm-sh/nvm.git\r\n```\r\n\r\n> Go to the project folder\r\n\r\n> Paste this to the command line:\r\n```\r\ngit clone https://github.com/nvm-sh/nvm.git\r\n```\r\n\r\nHow to clone repo from another branch (for example gh-pages)?\r\n\r\n> Go to repository and click on <code>clone/download</code> button (green)\r\n\r\n>Then copy the repo link. For example:\r\n```\r\ngit@github.com:addania/coding.git\r\n```\r\n\r\n>Then go to terminal and paste (where gh-pages is the name of the branch from where we want to clone):\r\n```\r\ngit clone git@github.com:addania/coding.git -b gh-pages\r\n```\r\n>Our repository was successfully cloned to **LOCAL**. Yay!\r\n\r\n![](https://i.imgur.com/yA5ouqS.jpg \"Photo by Kat Jayne from Pexels\")","frontmatter":{"date":"2019-11-29","title":"Cloning Github Repository"},"fields":{"slug":"/Cloning_Github_Repository/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/GmB70yE.jpg\" title=\"Photo by Trinity Kubassek from Pexels\"></p>\n<p>Cloning Github repository means creating a copy of <strong>REMOTE</strong> repo locally to your machine. How to do it? </p>\n<blockquote>\n<p>Go to repository root folder (top one)</p>\n</blockquote>\n<blockquote>\n<p>Click the big GREEN (frog) button called:</p>\n</blockquote>\n<pre><code>Clone of Download\n</code></pre>\n<blockquote>\n<p>Copy the url:</p>\n</blockquote>\n<pre><code>https://github.com/nvm-sh/nvm.git\n</code></pre>\n<blockquote>\n<p>Go to the project folder</p>\n</blockquote>\n<blockquote>\n<p>Paste this to the command line:</p>\n</blockquote>\n<pre><code>git clone https://github.com/nvm-sh/nvm.git\n</code></pre>\n<p>How to clone repo from another branch (for example gh-pages)?</p>\n<blockquote>\n<p>Go to repository and click on <code>clone/download</code> button (green)</p>\n</blockquote>\n<blockquote>\n<p>Then copy the repo link. For example:</p>\n</blockquote>\n<pre><code>git@github.com:addania/coding.git\n</code></pre>\n<blockquote>\n<p>Then go to terminal and paste (where gh-pages is the name of the branch from where we want to clone):</p>\n</blockquote>\n<pre><code>git clone git@github.com:addania/coding.git -b gh-pages\n</code></pre>\n<blockquote>\n<p>Our repository was successfully cloned to <strong>LOCAL</strong>. Yay!</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/yA5ouqS.jpg\" title=\"Photo by Kat Jayne from Pexels\"></p>"}},{"node":{"id":"ddc805ac-173c-5a50-afe0-ced44956ce55","excerpt":"Step-By-Step Guide for Dummies on how to publish your create-react-app website on Github pages Create empty GitHub repository, for example…","rawMarkdownBody":"\r\n![](https://i.imgur.com/4tBPaPE.png \"React logo\")\r\n\r\nStep-By-Step Guide for Dummies on how to publish your create-react-app website on Github pages\r\n\r\n> Create empty GitHub repository, for example called monsterFactory. It should be a public repository and do NOT initialize this repository with README\r\n\r\n> Start Ubuntu Command line\r\n\r\n> Navigate to your projects folder\r\n```\r\ncd projects\r\n```\r\n\r\n> Create new project\r\n```\r\nnpx create-react-app monster_factory\r\n```\r\n> Go to your new project folder\r\n```\r\ncd monster_factory\r\n```\r\n\r\n> Open package.json and paste your github repository url to homepage\r\n```\r\n\"homepage\": \"https://addania.github.io/monsterFactory\",\r\n```\r\n\r\n> Install gh-pages:\r\n```\r\nnpm install --save gh-pages\r\n```\r\n> Open package.json and paste following code:\r\n```\r\n\"scripts\": {\r\n   \"predeploy\": \"npm run build\",\r\n   \"deploy\": \"gh-pages -d build\",\r\n   \"start\": \"react-scripts start\",\r\n   \"build\": \"react-scripts build\",\r\n```\r\n\r\n> Initiate git repository\r\n```\r\ngit init\r\n```\r\n> Add your username:\r\n```\r\ngit config user.name \"someone\"\r\n```\r\n\r\n>Add your email:\r\n```\r\ngit config user.email \"someone@someplace.com\"\r\n```\r\n\r\n> Create a **REMOTE** repository. Remote repository can be called anything, but convention is to call it origin\r\n```\r\ngit remote add origin git@github.com:addania/monsterFactory.git \r\n```\r\n\r\n> Then push our **PRODUCTION** files (compressed publish-ready files) to **REMOTE** by <code>npm run deploy</code> and publish it.\r\n```\r\nnpm run deploy\r\n```\r\n\r\nPlease note that we don't need to do <code>git add .</code> because now we only want to publish the site! <code>git add, commit, push</code>code>  is only if I want to upload my real source code to Github.\r\n\r\n> When I want to upload and backup my <code>precious</code> working code to Github, it has nothing to do with **PUBLISHING** production files by <code>npm run deploy</code>. \r\n\r\n> To upload and backup my files, I add my project files to **LOCAL** git\r\n```\r\ngit add .\r\n```\r\n> Then I commit my project files to **LOCAL** git\r\n```\r\ngit commit -m \"first commit\"\r\n```\r\n\r\n> Then I push it to **REMOTE** repository:\r\n```\r\ngit push origin master\r\n```\r\n\r\n> I will be asked for my passphrase\r\n\r\n> My <code>precious</code> is stored securely\r\n\r\nUseful sources:\r\n\r\nhttps://create-react-app.dev/docs/deployment/#github-pages\r\n","frontmatter":{"date":"2019-11-29","title":"Publish Create React App to Github Pages"},"fields":{"slug":"/Publish_Create_React_App_on_GithubPages/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/4tBPaPE.png\" title=\"React logo\"></p>\n<p>Step-By-Step Guide for Dummies on how to publish your create-react-app website on Github pages</p>\n<blockquote>\n<p>Create empty GitHub repository, for example called monsterFactory. It should be a public repository and do NOT initialize this repository with README</p>\n</blockquote>\n<blockquote>\n<p>Start Ubuntu Command line</p>\n</blockquote>\n<blockquote>\n<p>Navigate to your projects folder</p>\n</blockquote>\n<pre><code>cd projects\n</code></pre>\n<blockquote>\n<p>Create new project</p>\n</blockquote>\n<pre><code>npx create-react-app monster_factory\n</code></pre>\n<blockquote>\n<p>Go to your new project folder</p>\n</blockquote>\n<pre><code>cd monster_factory\n</code></pre>\n<blockquote>\n<p>Open package.json and paste your github repository url to homepage</p>\n</blockquote>\n<pre><code>\"homepage\": \"https://addania.github.io/monsterFactory\",\n</code></pre>\n<blockquote>\n<p>Install gh-pages:</p>\n</blockquote>\n<pre><code>npm install --save gh-pages\n</code></pre>\n<blockquote>\n<p>Open package.json and paste following code:</p>\n</blockquote>\n<pre><code>\"scripts\": {\n   \"predeploy\": \"npm run build\",\n   \"deploy\": \"gh-pages -d build\",\n   \"start\": \"react-scripts start\",\n   \"build\": \"react-scripts build\",\n</code></pre>\n<blockquote>\n<p>Initiate git repository</p>\n</blockquote>\n<pre><code>git init\n</code></pre>\n<blockquote>\n<p>Add your username:</p>\n</blockquote>\n<pre><code>git config user.name \"someone\"\n</code></pre>\n<blockquote>\n<p>Add your email:</p>\n</blockquote>\n<pre><code>git config user.email \"someone@someplace.com\"\n</code></pre>\n<blockquote>\n<p>Create a <strong>REMOTE</strong> repository. Remote repository can be called anything, but convention is to call it origin</p>\n</blockquote>\n<pre><code>git remote add origin git@github.com:addania/monsterFactory.git \n</code></pre>\n<blockquote>\n<p>Then push our <strong>PRODUCTION</strong> files (compressed publish-ready files) to <strong>REMOTE</strong> by <code>npm run deploy</code> and publish it.</p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<p>Please note that we don't need to do <code>git add .</code> because now we only want to publish the site! <code>git add, commit, push</code>code>  is only if I want to upload my real source code to Github.</p>\n<blockquote>\n<p>When I want to upload and backup my <code>precious</code> working code to Github, it has nothing to do with <strong>PUBLISHING</strong> production files by <code>npm run deploy</code>. </p>\n</blockquote>\n<blockquote>\n<p>To upload and backup my files, I add my project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Then I commit my project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git commit -m \"first commit\"\n</code></pre>\n<blockquote>\n<p>Then I push it to <strong>REMOTE</strong> repository:</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>I will be asked for my passphrase</p>\n</blockquote>\n<blockquote>\n<p>My <code>precious</code> is stored securely</p>\n</blockquote>\n<p>Useful sources:</p>\n<p><a href=\"https://create-react-app.dev/docs/deployment/#github-pages\">https://create-react-app.dev/docs/deployment/#github-pages</a></p>"}},{"node":{"id":"8fd97ba8-580f-571f-9b53-5f14057dcb31","excerpt":"There are many loops in JS which we can use: for - looping through a block of code for a given number of times for/in - looping through…","rawMarkdownBody":"\r\n![](https://i.imgur.com/VhAOIMg.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nThere are many loops in JS which we can use:\r\n\r\n**for** - looping through a block of code for a given number of times\r\n\r\n**for/in** - looping through properties(values) of an <code>object</code>\r\n\r\n**for/of** - looping through values of an <code>array</code>\r\n\r\n**while** - looping through a block of code as long as a specified condition is true\r\n\r\n**do/while** - looping through a block of code once, and then repeating the loop as long as a specified condition is true\r\n\r\n**for**\r\n```\r\nlet array=[\"Hello\", \"universe\"]\r\nfor (let item =0; item < array.length; item++){\r\n  console.log (item);\r\n}\r\n// Output:\r\n//Hello\r\n//universe\r\n```\r\n\r\n**for/in**\r\n```\r\nfunction loop() {\r\n  var person = {firstName:\"Mia\", lastName:\"Schw\", age:32};\r\n  var text = \"\";\r\n  var item;\r\n  for (item in person) {\r\n    text += person[item] + \" \";\r\n  }\r\n}\r\nlet identity=loop();\r\n// result: Mia Schw 32\r\n```\r\n\r\n**for/of**\r\n```\r\nvar sports = ['skiing', 'surfing', 'dancing'];\r\nvar x;\r\nfor (x of cars) {\r\n  console.log(x + \"<br >\");\r\n}\r\n```\r\n\r\n**while**\r\n```\r\nlet check=true;\r\nwhile(check){\r\nconsole.log(\"Hi\");\r\n  check=false;\r\n}\r\n//Output: Hi\r\n```\r\n\r\n**do/while**\r\n```\r\nfunction worker() {\r\n  var text = \"\"\r\n  var i = 0;\r\n  do {\r\n    text += \"<br>The number is \" + i;\r\n    i++;\r\n  }\r\n  while (i < 2);\r\n  console.log(text);\r\n}\r\nworker();\r\n// The number is 0\r\n// The number is 1\r\n// The number is 2\r\n\r\n```\r\n\r\n![Loop](https://i.imgur.com/xM1q8Qz.jpg \"Photo by Stas Knop from Pexels\")","frontmatter":{"date":"2019-11-28","title":"Loops"},"fields":{"slug":"/Loops/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/VhAOIMg.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>There are many loops in JS which we can use:</p>\n<p><strong>for</strong> - looping through a block of code for a given number of times</p>\n<p><strong>for/in</strong> - looping through properties(values) of an <code>object</code></p>\n<p><strong>for/of</strong> - looping through values of an <code>array</code></p>\n<p><strong>while</strong> - looping through a block of code as long as a specified condition is true</p>\n<p><strong>do/while</strong> - looping through a block of code once, and then repeating the loop as long as a specified condition is true</p>\n<p><strong>for</strong></p>\n<pre><code>let array=[\"Hello\", \"universe\"]\nfor (let item =0; item &#x3C; array.length; item++){\n  console.log (item);\n}\n// Output:\n//Hello\n//universe\n</code></pre>\n<p><strong>for/in</strong></p>\n<pre><code>function loop() {\n  var person = {firstName:\"Mia\", lastName:\"Schw\", age:32};\n  var text = \"\";\n  var item;\n  for (item in person) {\n    text += person[item] + \" \";\n  }\n}\nlet identity=loop();\n// result: Mia Schw 32\n</code></pre>\n<p><strong>for/of</strong></p>\n<pre><code>var sports = ['skiing', 'surfing', 'dancing'];\nvar x;\nfor (x of cars) {\n  console.log(x + \"&#x3C;br >\");\n}\n</code></pre>\n<p><strong>while</strong></p>\n<pre><code>let check=true;\nwhile(check){\nconsole.log(\"Hi\");\n  check=false;\n}\n//Output: Hi\n</code></pre>\n<p><strong>do/while</strong></p>\n<pre><code>function worker() {\n  var text = \"\"\n  var i = 0;\n  do {\n    text += \"&#x3C;br>The number is \" + i;\n    i++;\n  }\n  while (i &#x3C; 2);\n  console.log(text);\n}\nworker();\n// The number is 0\n// The number is 1\n// The number is 2\n</code></pre>\n<p><img src=\"https://i.imgur.com/xM1q8Qz.jpg\" alt=\"Loop\" title=\"Photo by Stas Knop from Pexels\"></p>"}},{"node":{"id":"d2a6f634-af8c-5890-ba06-41e1fc69dd4e","excerpt":"Recusion is a function that calls itself. Example usage of recursive functions is to calculate factorial of a given number. Let's say we…","rawMarkdownBody":"\r\n![](https://i.imgur.com/kQUGRug.jpg \"Photo by P C from Pexels\")\r\n\r\nRecusion is a function that calls itself.\r\n\r\nExample usage of recursive functions is to calculate factorial of a given number. Let's say we want to calculate factorial of number <code>n</code>. If <code>n=3</code>, then factorial of <code>n</code> is <code>```3*2*1```=6</code>\r\n```\r\nfunction factorial(n){\r\n  if (n==1){\r\n    return 1\r\n  }\r\n  if (n>1){\r\n    return n*factorial(n-1);\r\n  }\r\n}\r\nlet number=factorial(3);\r\n// result: 3*2*1=6\r\n```\r\n\r\nExample usage of recursive functions is to calculate number to certain power. Imagine we want to calculate <code>3</code> to the power of <code>2</code>. We would need to multiply <code>```3*3=9```</code>. Let's define that <code>x</code> is our number and <code>n</code> is the power.\r\n```\r\nfunction power(x, n){\r\n  if (n==1){\r\n    return x\r\n  } else {\r\n    return x * power(x, n-1);\r\n  }\r\n}\r\npower(2,3);\r\n// returns 8\r\npower(3,2);\r\n// returns 9\r\n```\r\n\r\nExample usage is to sum the the numbers <code>1+2+3+...+ n</code>\r\n```\r\nfunction sumTo(n){\r\n  if (n==1){\r\n   return n\r\n  } else {\r\n  return n+ sumTo(n-1);\r\n  }\r\n}\r\nlet result=sumTo(3);\r\n// result is: 6\r\n```\r\n\r\nExample usage of recursive functions is to calculate salaries in a company in different departments or sub-departments. Imagine we have an object like this:\r\n```\r\nlet company={ \r\n  sales: [{name: \"Mia\", salary: 1000},{name: \"Sam\", salary: 1500}], \r\n  development: {\r\n    onsite: [{name: \"Peter\", salary: 500}, {name: \"Edita\", salary: 1200} ],\r\n    remote: [{name: \"Lubo\", salary: 3000}, {name: \"Peta\", salary: 800} ]\r\n    }\r\n}\r\n```\r\n\r\nThen we can use a recursive function to calculate the sum of salaries:\r\n```\r\nfunction salarySum(department){\r\n  if (Array.isArray(department)){\r\n\r\n    return department.reduce( (prev, current) => \r\n    prev + current, 0 )\r\n  } else {\r\n    let sum =0;\r\n    for (let subdep of Object.values(department)){\r\n     sum= sum + salarySum(subdep);\r\n    }\r\n    return sum,\r\n  }\r\n}\r\n```\r\n\r\nLet' s call the function and see the result:\r\n```\r\nlet result= salarySum(company);\r\n// result is: 8000\r\n```","frontmatter":{"date":"2019-11-27","title":"Recursion"},"fields":{"slug":"/Recursion/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/kQUGRug.jpg\" title=\"Photo by P C from Pexels\"></p>\n<p>Recusion is a function that calls itself.</p>\n<p>Example usage of recursive functions is to calculate factorial of a given number. Let's say we want to calculate factorial of number <code>n</code>. If <code>n=3</code>, then factorial of <code>n</code> is <code><code>3*2*1</code>=6</code></p>\n<pre><code>function factorial(n){\n  if (n==1){\n    return 1\n  }\n  if (n>1){\n    return n*factorial(n-1);\n  }\n}\nlet number=factorial(3);\n// result: 3*2*1=6\n</code></pre>\n<p>Example usage of recursive functions is to calculate number to certain power. Imagine we want to calculate <code>3</code> to the power of <code>2</code>. We would need to multiply <code><code>3*3=9</code></code>. Let's define that <code>x</code> is our number and <code>n</code> is the power.</p>\n<pre><code>function power(x, n){\n  if (n==1){\n    return x\n  } else {\n    return x * power(x, n-1);\n  }\n}\npower(2,3);\n// returns 8\npower(3,2);\n// returns 9\n</code></pre>\n<p>Example usage is to sum the the numbers <code>1+2+3+...+ n</code></p>\n<pre><code>function sumTo(n){\n  if (n==1){\n   return n\n  } else {\n  return n+ sumTo(n-1);\n  }\n}\nlet result=sumTo(3);\n// result is: 6\n</code></pre>\n<p>Example usage of recursive functions is to calculate salaries in a company in different departments or sub-departments. Imagine we have an object like this:</p>\n<pre><code>let company={ \n  sales: [{name: \"Mia\", salary: 1000},{name: \"Sam\", salary: 1500}], \n  development: {\n    onsite: [{name: \"Peter\", salary: 500}, {name: \"Edita\", salary: 1200} ],\n    remote: [{name: \"Lubo\", salary: 3000}, {name: \"Peta\", salary: 800} ]\n    }\n}\n</code></pre>\n<p>Then we can use a recursive function to calculate the sum of salaries:</p>\n<pre><code>function salarySum(department){\n  if (Array.isArray(department)){\n\n    return department.reduce( (prev, current) => \n    prev + current, 0 )\n  } else {\n    let sum =0;\n    for (let subdep of Object.values(department)){\n     sum= sum + salarySum(subdep);\n    }\n    return sum,\n  }\n}\n</code></pre>\n<p>Let' s call the function and see the result:</p>\n<pre><code>let result= salarySum(company);\n// result is: 8000\n</code></pre>"}},{"node":{"id":"9a64b42d-5e5a-5c60-be91-a2da92357e9b","excerpt":"Installing Chrome on Ubuntu: Open terminal by: Download chrome: Install chrome: Type your user and password To start Chrome, you can type in…","rawMarkdownBody":"\r\n![](https://i.imgur.com/jX7rNIv.jpg \"Photo by PhotoMIX Ltd. from Pexels\")\r\n\r\nInstalling Chrome on Ubuntu:\r\n\r\n\r\n> Open terminal by:\r\n```\r\nCtrl+Alt+T\r\n```\r\n\r\n> Download chrome:\r\n```\r\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\r\n```\r\n\r\n> Install chrome:\r\n```\r\nsudo dpkg -i google-chrome-stable_current_amd64.deb\r\n```\r\n\r\n> Type your user and password\r\n\r\n> To start Chrome, you can type in terminal:\r\n```\r\ngoogle-chrome\r\n```\r\n\r\n> Or by clicking Activities -> Google Chrome\r\n\r\n\r\nReference:\r\n\r\nhttps://linuxize.com/post/how-to-install-google-chrome-web-browser-on-ubuntu-18-04/","frontmatter":{"date":"2019-11-21","title":"Install Chrome on Linux"},"fields":{"slug":"/Linux_Install_Chrome/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/jX7rNIv.jpg\" title=\"Photo by PhotoMIX Ltd. from Pexels\"></p>\n<p>Installing Chrome on Ubuntu:</p>\n<blockquote>\n<p>Open terminal by:</p>\n</blockquote>\n<pre><code>Ctrl+Alt+T\n</code></pre>\n<blockquote>\n<p>Download chrome:</p>\n</blockquote>\n<pre><code>wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n</code></pre>\n<blockquote>\n<p>Install chrome:</p>\n</blockquote>\n<pre><code>sudo dpkg -i google-chrome-stable_current_amd64.deb\n</code></pre>\n<blockquote>\n<p>Type your user and password</p>\n</blockquote>\n<blockquote>\n<p>To start Chrome, you can type in terminal:</p>\n</blockquote>\n<pre><code>google-chrome\n</code></pre>\n<blockquote>\n<p>Or by clicking Activities -> Google Chrome</p>\n</blockquote>\n<p>Reference:</p>\n<p><a href=\"https://linuxize.com/post/how-to-install-google-chrome-web-browser-on-ubuntu-18-04/\">https://linuxize.com/post/how-to-install-google-chrome-web-browser-on-ubuntu-18-04/</a></p>"}},{"node":{"id":"9b777295-d1d2-5bb9-8e86-ef9da1ef1919","excerpt":"How to install Sublime on Linux Sublime is a code editor. There are diffrent kinds of installs depending on Linux distributor: 1/ apt…","rawMarkdownBody":"\r\n![](https://i.imgur.com/13CjRhl.png \"Sublime logo\")\r\n\r\nHow to install Sublime on Linux\r\n\r\nSublime is a code editor.\r\n\r\nThere are diffrent kinds of installs depending on Linux distributor:\r\n\r\n**1/** apt - Ubuntu, Debian\r\n\r\n**2/** pacman - Arch\r\n\r\n**3/** yum - CentOS\r\n\r\n**4/** dnf - Fedora\r\n\r\n**5/** zypper - openSUSE\r\n\r\nHere we will check how apt works:\r\n\r\n> Install GPG key\r\n```\r\nwget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -\r\n```\r\n\r\n> Setup apt to work with http sources\r\n```\r\nsudo apt-get install apt-transport-https\r\n```\r\n\r\n> Select channel - we will choose stable channel\r\n```\r\necho \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list\r\n```\r\n\r\n> Update apt source\r\n```\r\nsudo apt-get update\r\n```\r\n\r\n> Install Sublime Text\r\n```\r\nsudo apt-get install sublime-text\r\n```\r\n\r\n> Start Sublime from the command line:\r\n```\r\nsubl .\r\n```\r\n\r\nReference:\r\n\r\nhttps://www.sublimetext.com/docs/3/linux_repositories.html\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-11-20","title":"Install Sublime on Linux"},"fields":{"slug":"/Linux_Install_Sublime/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/13CjRhl.png\" title=\"Sublime logo\"></p>\n<p>How to install Sublime on Linux</p>\n<p>Sublime is a code editor.</p>\n<p>There are diffrent kinds of installs depending on Linux distributor:</p>\n<p><strong>1/</strong> apt - Ubuntu, Debian</p>\n<p><strong>2/</strong> pacman - Arch</p>\n<p><strong>3/</strong> yum - CentOS</p>\n<p><strong>4/</strong> dnf - Fedora</p>\n<p><strong>5/</strong> zypper - openSUSE</p>\n<p>Here we will check how apt works:</p>\n<blockquote>\n<p>Install GPG key</p>\n</blockquote>\n<pre><code>wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -\n</code></pre>\n<blockquote>\n<p>Setup apt to work with http sources</p>\n</blockquote>\n<pre><code>sudo apt-get install apt-transport-https\n</code></pre>\n<blockquote>\n<p>Select channel - we will choose stable channel</p>\n</blockquote>\n<pre><code>echo \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list\n</code></pre>\n<blockquote>\n<p>Update apt source</p>\n</blockquote>\n<pre><code>sudo apt-get update\n</code></pre>\n<blockquote>\n<p>Install Sublime Text</p>\n</blockquote>\n<pre><code>sudo apt-get install sublime-text\n</code></pre>\n<blockquote>\n<p>Start Sublime from the command line:</p>\n</blockquote>\n<pre><code>subl .\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://www.sublimetext.com/docs/3/linux_repositories.html\">https://www.sublimetext.com/docs/3/linux_repositories.html</a></p>"}},{"node":{"id":"b9a8da0a-ab39-504f-be7e-b59e5e275e8a","excerpt":"Open your terminal by:  Adding LibreOffice PPA repository Hit Enter to proceed Update system Install LibreOffice Press yes Reference:  https…","rawMarkdownBody":"\r\n![](https://i.imgur.com/t5FghyM.png \"Sublime logo\")\r\n\r\n> Open your terminal by: \r\n```\r\nCtrl+Alt+T\r\n```\r\n\r\n> Adding LibreOffice PPA repository\r\n```\r\nsudo add-apt-repository ppa:libreoffice/ppa\r\n```\r\n\r\n> Hit <code>Enter</code> to proceed\r\n\r\n> Update system\r\n```\r\nsudo apt update\r\n```\r\n\r\n> Install LibreOffice\r\n```\r\nsudo apt install libreoffice\r\n```\r\n\r\n> Press <code>yes</code>\r\n\r\n> Reference: \r\n\r\nhttps://www.liquidweb.com/kb/installing-libreoffice-on-ubuntu-16-04/\r\n\r\n\r\n> If your Libre Office is making problems and does not opent your files, try these steps:\r\n\r\n1//  Open your file manager and go to your <code>Home</code>\r\n\r\n2// Press <code>CTRL + H</code> to show hidden files\r\n\r\n3// Search for <code>.config</code> file and open it\r\n\r\n4// Look for a folder called <code>libreoffice</code> and remove it\r\n\r\n5// Log out and back in. \r\n\r\nReference:\r\n\r\nhttps://askubuntu.com/questions/643382/libre-office-wont-open\r\n\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-11-19","title":"Install LibreOffice on Linux"},"fields":{"slug":"/Linux_Install_LibreOffice/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/t5FghyM.png\" title=\"Sublime logo\"></p>\n<blockquote>\n<p>Open your terminal by: </p>\n</blockquote>\n<pre><code>Ctrl+Alt+T\n</code></pre>\n<blockquote>\n<p>Adding LibreOffice PPA repository</p>\n</blockquote>\n<pre><code>sudo add-apt-repository ppa:libreoffice/ppa\n</code></pre>\n<blockquote>\n<p>Hit <code>Enter</code> to proceed</p>\n</blockquote>\n<blockquote>\n<p>Update system</p>\n</blockquote>\n<pre><code>sudo apt update\n</code></pre>\n<blockquote>\n<p>Install LibreOffice</p>\n</blockquote>\n<pre><code>sudo apt install libreoffice\n</code></pre>\n<blockquote>\n<p>Press <code>yes</code></p>\n</blockquote>\n<blockquote>\n<p>Reference: </p>\n</blockquote>\n<p><a href=\"https://www.liquidweb.com/kb/installing-libreoffice-on-ubuntu-16-04/\">https://www.liquidweb.com/kb/installing-libreoffice-on-ubuntu-16-04/</a></p>\n<blockquote>\n<p>If your Libre Office is making problems and does not opent your files, try these steps:</p>\n</blockquote>\n<p>1//  Open your file manager and go to your <code>Home</code></p>\n<p>2// Press <code>CTRL + H</code> to show hidden files</p>\n<p>3// Search for <code>.config</code> file and open it</p>\n<p>4// Look for a folder called <code>libreoffice</code> and remove it</p>\n<p>5// Log out and back in. </p>\n<p>Reference:</p>\n<p><a href=\"https://askubuntu.com/questions/643382/libre-office-wont-open\">https://askubuntu.com/questions/643382/libre-office-wont-open</a></p>"}},{"node":{"id":"1ed194fe-a836-5bbd-a57e-6467946997d4","excerpt":"Here you can find a small summary of the most useful array methods.d Creating an Array Creating new array (when we dont want to reference…","rawMarkdownBody":"\r\n![](https://i.imgur.com/qmUjmQg.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nHere you can find a small summary of the most useful array methods.d\r\n\r\n**Creating an Array**\r\n\r\nCreating new array (when we dont want to reference) of a given length of empty elements:\r\n```\r\nlet newArray = new Array(7);\r\n//creates array of 7 elements, each element is emtpy\r\n```\r\n\r\n\r\nCreating new array with one specific item in it:\r\n```\r\nlet newArray = new Array(\"7\");\r\n//creates array of 1 element, this element is string 7\r\n```\r\n\r\nCreating new array from another array using spread operator. Spread operator creates new object + copies other array:\r\n```\r\nvar array = [1,2,3]\r\nvar newArray = [...array]\r\n\r\n// newArray will be: [1,2,3]\r\n\r\n```\r\n\r\nCreating new array from another array using spread operator + adding more elements. Spread operator creates new object + copies other array:\r\n```\r\nvar array = [1,2,3]\r\nvar newArray = [...array, 4]\r\n\r\n// newArray will be: [1,2,3,4]\r\n\r\n```\r\n\r\n\r\nCreating new array filled with 0s using loop:\r\n```\r\nvar data = [];\r\nvar length = 5;\r\n\r\nfor(var i = 0; i < length; i++) {\r\n    data.push(0);\r\n}\r\n```\r\n\r\n**Array.map()**\r\n\r\n![Map](https://i.imgur.com/XM3VmyA.jpg \"Photo by Aaditya Arora from Pexels\")\r\n\r\n<code>array.map()</code> is going through each element of the array and allows to perform function on it and output NEW array\r\n\r\nIt requires a function after the brackets. Function takes argument for example called <code>string</code> (but name of argument can be called anything, for example: item, string, number, etc.) which means each item from the array through which we will iterate. \r\n\r\nIt returns the **NEW** array. New array will consist of items and each item will contain whatever is a return from the function, for example: ```<li>{string}</li>```\r\n```\r\nconst array1 = [1, 4, 9, 16];\r\n\r\n// pass a function to map\r\nconst map1 = array1.map(x => x * 2);\r\n\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\n\r\nCreating list of items using <code>array.map()</code>\r\n```\r\nconst strings = ['Home', 'Shop', 'About Me'];\r\nconst listItems = strings.map(string => <li>{string}</li>);\r\n<ul>{listItems}</ul>\r\n```\r\n\r\n**Adding items to Array using .concat or .push**\r\n\r\n![Add](https://i.imgur.com/PVgFfnd.jpg \"Photo by Geeorge Becker from Pexels\")\r\n\r\n**Array.concat()**\r\n\r\n<code>array.concat</code> creates A NEW array which concatenates original array with another array. Concat does **NOT** mutate origina array\r\n```\r\nlet array = [\"cat\",\"tiger\"]\r\nlet newArray = array.concat(\"monster\")\r\n\r\n// array is still [\"cat\",\"tiger\"]\r\n// newArray is [\"cat\",\"tiger\", \"monster\"]\r\n```\r\n\r\n**Array.push()**\r\n\r\n<code>array.push</code> **MUTATES** the existing array and adds new element!\r\n```\r\nlet array = [\"cat\",\"tiger\" ]\r\nlet length = array.push(\"monster\")\r\n// array is mutated [\"cat\",\"tiger\", \"monster\"]\r\n// length is 3\r\n```\r\n\r\n**Array.indexOf()**\r\n\r\n![Index](https://i.imgur.com/ue3MXf2.jpg \"Photo by Engin Akyurt from Pexels\")\r\n\r\n<code>array.indexOf()</code> finds element in the array, optional index means starting searching from position X\r\n\r\n```\r\nconst beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\r\n\r\nconsole.log(beasts.indexOf('bison'));\r\n// expected output: 1\r\n\r\n// start from index 2\r\nconsole.log(beasts.indexOf('bison', 2));\r\n// expected output: 4\r\n```\r\n\r\n**Cutting arrays using .slice or .splice**\r\n\r\n![Cut](https://i.imgur.com/s23i0Yr.jpg \"Photo by Photo Collections from Pexels\")\r\n\r\n**Array.slice()**\r\n\r\n<code>array.slice()</code> slices array from one index to another but it creates NEW array, it dos NOT mutate the original one\r\n```\r\n```\r\n\r\n**Array.splice()**\r\n<code>array.splice()</code> slices array from one index to another but it MUTATES existing array!\r\n```\r\n```\r\n\r\n**Array.reduce()**\r\n\r\n![Reduce](https://i.imgur.com/UOPhFMg.jpg \"Photo by Arun Thomas from Pexels\")\r\n\r\nReduce method is very powerful one which allows you to iterate through all elements in an array, perform certain calculations on it and then returns something: a single value, array, etc.\r\n\r\nLet's start with an array:\r\n```\r\nconst myArray = [1,4,2]\r\n```\r\nWe want to sum this up and return one value of the total sum which would be 7\r\n\r\nWe can call:\r\n```\r\nmyArray.reduce(reducer, initialValue);\r\n```\r\n**Reducer** is a function, which means that <code>.reduce</code> calls upon another function which we need to define. \r\n\r\n**InitialValue** is optional, we can kick it off with some starting value, but for the first simple example we will skip it.\r\n\r\nExample reducer function:\r\n```\r\n  const reducer = (accumulator, currentValue) => {\r\n        accumulator = (accumulator + currentValue)        \r\n        return (accumulator);\r\n    } \r\n```\r\nReducer takes in 2 arguments:\r\n\r\n**Accumulator** - value where we can store results of our calculations. Initial accumulator will equal the first element in array which will be 1 (unless we set initial value for it)\r\n\r\n**Current value** - value at which we are currently iterating, initially this will be value of second element in array which is number 4 (unless we set initial value, then the initial currentValue will be the first element)\r\n\r\nThere can be other arguments like currentIndex (index of currentValue where the iteration currently happens) but the most basic example is with above-mentioned two.\r\n\r\nEach iteration ( or function call ) will deliver a returning value! It means on each step return will be executed. This returning value is going to get passed into next step!\r\n\r\nExample to use it for the highest number:\r\n\r\n``` \r\nconst reducer = (accumulator, currentValue) => {\r\n        if (currentValue >= accumulator){\r\n            accumulator = currentValue;\r\n        }\r\n        return (accumulator);\r\n    } \r\n```\r\n\r\nExample to use it for average number:\r\n``` \r\nconst reducer = (accumulator, currentValue) => {\r\n        if (currentValue >= accumulator){\r\n            accumulator = currentValue;\r\n       }\r\n        return (accumulator);\r\n    } \r\n <p>Im a reducer and highest number is: {myArray.reduce(reducer)}</p>\r\n```\r\n\r\n~~ And that's it for the intro to most basic array methods. I hope you enjoyed it.~~\r\n\r\n![Array](https://i.imgur.com/ui07Dbb.jpg \"Photo by Genaro Servín from Pexels\")","frontmatter":{"date":"2019-11-18","title":"Arrays"},"fields":{"slug":"/Arrays/"},"timeToRead":4,"html":"<p><img src=\"https://i.imgur.com/qmUjmQg.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>Here you can find a small summary of the most useful array methods.d</p>\n<p><strong>Creating an Array</strong></p>\n<p>Creating new array (when we dont want to reference) of a given length of empty elements:</p>\n<pre><code>let newArray = new Array(7);\n//creates array of 7 elements, each element is emtpy\n</code></pre>\n<p>Creating new array with one specific item in it:</p>\n<pre><code>let newArray = new Array(\"7\");\n//creates array of 1 element, this element is string 7\n</code></pre>\n<p>Creating new array from another array using spread operator. Spread operator creates new object + copies other array:</p>\n<pre><code>var array = [1,2,3]\nvar newArray = [...array]\n\n// newArray will be: [1,2,3]\n</code></pre>\n<p>Creating new array from another array using spread operator + adding more elements. Spread operator creates new object + copies other array:</p>\n<pre><code>var array = [1,2,3]\nvar newArray = [...array, 4]\n\n// newArray will be: [1,2,3,4]\n</code></pre>\n<p>Creating new array filled with 0s using loop:</p>\n<pre><code>var data = [];\nvar length = 5;\n\nfor(var i = 0; i &#x3C; length; i++) {\n    data.push(0);\n}\n</code></pre>\n<p><strong>Array.map()</strong></p>\n<p><img src=\"https://i.imgur.com/XM3VmyA.jpg\" alt=\"Map\" title=\"Photo by Aaditya Arora from Pexels\"></p>\n<p><code>array.map()</code> is going through each element of the array and allows to perform function on it and output NEW array</p>\n<p>It requires a function after the brackets. Function takes argument for example called <code>string</code> (but name of argument can be called anything, for example: item, string, number, etc.) which means each item from the array through which we will iterate. </p>\n<p>It returns the <strong>NEW</strong> array. New array will consist of items and each item will contain whatever is a return from the function, for example: <code>&#x3C;li>{string}&#x3C;/li></code></p>\n<pre><code>const array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<p>Creating list of items using <code>array.map()</code></p>\n<pre><code>const strings = ['Home', 'Shop', 'About Me'];\nconst listItems = strings.map(string => &#x3C;li>{string}&#x3C;/li>);\n&#x3C;ul>{listItems}&#x3C;/ul>\n</code></pre>\n<p><strong>Adding items to Array using .concat or .push</strong></p>\n<p><img src=\"https://i.imgur.com/PVgFfnd.jpg\" alt=\"Add\" title=\"Photo by Geeorge Becker from Pexels\"></p>\n<p><strong>Array.concat()</strong></p>\n<p><code>array.concat</code> creates A NEW array which concatenates original array with another array. Concat does <strong>NOT</strong> mutate origina array</p>\n<pre><code>let array = [\"cat\",\"tiger\"]\nlet newArray = array.concat(\"monster\")\n\n// array is still [\"cat\",\"tiger\"]\n// newArray is [\"cat\",\"tiger\", \"monster\"]\n</code></pre>\n<p><strong>Array.push()</strong></p>\n<p><code>array.push</code> <strong>MUTATES</strong> the existing array and adds new element!</p>\n<pre><code>let array = [\"cat\",\"tiger\" ]\nlet length = array.push(\"monster\")\n// array is mutated [\"cat\",\"tiger\", \"monster\"]\n// length is 3\n</code></pre>\n<p><strong>Array.indexOf()</strong></p>\n<p><img src=\"https://i.imgur.com/ue3MXf2.jpg\" alt=\"Index\" title=\"Photo by Engin Akyurt from Pexels\"></p>\n<p><code>array.indexOf()</code> finds element in the array, optional index means starting searching from position X</p>\n<pre><code>const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\n\nconsole.log(beasts.indexOf('bison'));\n// expected output: 1\n\n// start from index 2\nconsole.log(beasts.indexOf('bison', 2));\n// expected output: 4\n</code></pre>\n<p><strong>Cutting arrays using .slice or .splice</strong></p>\n<p><img src=\"https://i.imgur.com/s23i0Yr.jpg\" alt=\"Cut\" title=\"Photo by Photo Collections from Pexels\"></p>\n<p><strong>Array.slice()</strong></p>\n<p><code>array.slice()</code> slices array from one index to another but it creates NEW array, it dos NOT mutate the original one</p>\n<pre><code></code></pre>\n<p><strong>Array.splice()</strong>\n<code>array.splice()</code> slices array from one index to another but it MUTATES existing array!</p>\n<pre><code></code></pre>\n<p><strong>Array.reduce()</strong></p>\n<p><img src=\"https://i.imgur.com/UOPhFMg.jpg\" alt=\"Reduce\" title=\"Photo by Arun Thomas from Pexels\"></p>\n<p>Reduce method is very powerful one which allows you to iterate through all elements in an array, perform certain calculations on it and then returns something: a single value, array, etc.</p>\n<p>Let's start with an array:</p>\n<pre><code>const myArray = [1,4,2]\n</code></pre>\n<p>We want to sum this up and return one value of the total sum which would be 7</p>\n<p>We can call:</p>\n<pre><code>myArray.reduce(reducer, initialValue);\n</code></pre>\n<p><strong>Reducer</strong> is a function, which means that <code>.reduce</code> calls upon another function which we need to define. </p>\n<p><strong>InitialValue</strong> is optional, we can kick it off with some starting value, but for the first simple example we will skip it.</p>\n<p>Example reducer function:</p>\n<pre><code>  const reducer = (accumulator, currentValue) => {\n        accumulator = (accumulator + currentValue)        \n        return (accumulator);\n    } \n</code></pre>\n<p>Reducer takes in 2 arguments:</p>\n<p><strong>Accumulator</strong> - value where we can store results of our calculations. Initial accumulator will equal the first element in array which will be 1 (unless we set initial value for it)</p>\n<p><strong>Current value</strong> - value at which we are currently iterating, initially this will be value of second element in array which is number 4 (unless we set initial value, then the initial currentValue will be the first element)</p>\n<p>There can be other arguments like currentIndex (index of currentValue where the iteration currently happens) but the most basic example is with above-mentioned two.</p>\n<p>Each iteration ( or function call ) will deliver a returning value! It means on each step return will be executed. This returning value is going to get passed into next step!</p>\n<p>Example to use it for the highest number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n        }\n        return (accumulator);\n    } \n</code></pre>\n<p>Example to use it for average number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n       }\n        return (accumulator);\n    } \n &#x3C;p>Im a reducer and highest number is: {myArray.reduce(reducer)}&#x3C;/p>\n</code></pre>\n<p>~~ And that's it for the intro to most basic array methods. I hope you enjoyed it.~~</p>\n<p><img src=\"https://i.imgur.com/ui07Dbb.jpg\" alt=\"Array\" title=\"Photo by Genaro Servín from Pexels\"></p>"}},{"node":{"id":"1a274b55-19e1-50f7-982c-f8ad9db58738","excerpt":"Disabled button:","rawMarkdownBody":"\r\n![](https://i.imgur.com/fxWHGwv.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nDisabled button:\r\n\r\n```\r\n<button type=\"button\" disabled>Click Me!</button>\r\n```","frontmatter":{"date":"2019-11-17","title":"Buttons"},"fields":{"slug":"/Buttons/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/fxWHGwv.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>Disabled button:</p>\n<pre><code>&#x3C;button type=\"button\" disabled>Click Me!&#x3C;/button>\n</code></pre>"}},{"node":{"id":"64875e78-585f-5a4a-98e1-4f44bc267e65","excerpt":"To create a new variable with the CURRENT date, we use new Date() with empty brackets: Now our myDate is of a date type. We can extract…","rawMarkdownBody":"\r\n![](https://i.imgur.com/ooqUgWd.jpg \"Photo by Wolfgang from Pexels\")\r\n\r\n\r\nTo create a new variable with the CURRENT date, we use <code>new Date()</code> with empty brackets:\r\n```\r\nvar myDate = new Date();\r\n```\r\n\r\nNow our <code>myDate</code> is of a date type. We can extract different information from it like:\r\n\r\n- day of month, \r\n\r\n- day of week, \r\n\r\n- month, \r\n\r\n- year, etc.\r\n\r\nRetrieving info from the date:\r\n\r\nYear\r\n```\r\nvar year = myDate.getFullYear();\r\n//or\r\nvar year = myDate.getUTCFullYear();\r\n```\r\n\r\nMonth\r\n```\r\n ar monthIndex = myDate.getMonth();\r\n //or\r\nvar monthIndex = myDate.getUTCMonth();\r\n```\r\nMonth starts from 0 for January to 11 for December - if you want 1 for January add +1\r\n```\r\nvar myDate=new Date(); \r\nvar month=myDate.getMonth()+1\r\n```\r\n\r\nDay of month- which provides day of the month, such as 1, 24, 31, etc.\r\n```\r\nvar day = myDate.getDate();\r\n//or\r\nvar day = myDate.getUTCDate();\r\n```\r\n\r\nDay of week - which provides day of the week, such as 1, 6, etc.\r\n```\r\nvar day = myDate.getDate();\r\n//or\r\nvar day = myDate.getUTCDate();\r\n```\r\n\r\nHours\r\n```\r\nvar hours = myDate.getHours();\r\n//or\r\nvar hours = myDate.getUTCHours();\r\n```\r\nMinutes\r\n```\r\nvar minutes = myDate.getMinutes();\r\n//or\r\nvar minutes = myDate.getUTCMinutes();\r\n```\r\n\r\nSeconds\r\n```\r\nvar seconds = myDate.getSeconds();\r\n//or\r\nvar seconds = myDate.getITCSeconds();\r\n```\r\n\r\nIncrementing one day to a date\r\n```\r\nvar myDate = new Date();\r\n//add a day to the date\r\nmyDate.setDate(myDate.getDate() + 1);\r\n```\r\n\r\nCreating new variable event which will contain a given date:\r\n```\r\nvar event = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\r\n```\r\n\r\nFortmatting Date to nice string using <code>.toLocaleSting</code>\r\n```\r\nconsole.log(event.toLocaleString('en-GB', { timeZone: 'UTC' }));\r\n// expected output: 20/12/2012, 03:00:00\r\n```\r\n\r\nReference:\r\n\r\nhttps://www.youtube.com/watch?v=CnozSz4wbBQ\r\n\r\n\r\n**Moment JS**\r\n\r\n![Moment](https://i.imgur.com/o7K483F.jpg \"Photo by Matej from Pexels\")\r\n\r\nAnother cool package which allows us to get variety of formatting options with dates is called <code>MomentJS</code>. Plain Javascript does not have as many options as Moment JS.\r\n\r\nIn order to install it:\r\n```\r\nnpm install moment --save\r\n```\r\n\r\nIn order to add it to your React JS file, paste this **AFTER** all imports:\r\n```\r\nvar moment = require('moment');\r\n```\r\n\r\nThen you can use it and create a new date variable with the date of TODAY (now):\r\n```\r\nvar myDate=moment();\r\n```\r\n\r\n> An object will be returned with many properties.\r\n\r\n> We can also create a date variable from existing value if we know its formatting:\r\n```\r\nvar itIsADate=\"01.01.2020\"\r\nvar myDate=moment(itIsADate, \"DD.MM.YYYY\");\r\n\r\n```\r\n\r\n> We can then transform our date to any format:\r\n```\r\nvar newDate=moment(myDate).format(\"YYYY-MMM-DD\")\r\n//Result: 2016-Jan-01\r\n```\r\n\r\nReference:\r\n\r\nhttps://momentjs.com/docs\r\n\r\n![Dates](https://i.imgur.com/bNckChk.jpg \"Photo by Bich Tran from Pexels\")","frontmatter":{"date":"2019-11-16","title":"Playing with Dates in Javascript"},"fields":{"slug":"/Playing_with_Dates_in_Javascript/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/ooqUgWd.jpg\" title=\"Photo by Wolfgang from Pexels\"></p>\n<p>To create a new variable with the CURRENT date, we use <code>new Date()</code> with empty brackets:</p>\n<pre><code>var myDate = new Date();\n</code></pre>\n<p>Now our <code>myDate</code> is of a date type. We can extract different information from it like:</p>\n<ul>\n<li>day of month, </li>\n<li>day of week, </li>\n<li>month, </li>\n<li>year, etc.</li>\n</ul>\n<p>Retrieving info from the date:</p>\n<p>Year</p>\n<pre><code>var year = myDate.getFullYear();\n//or\nvar year = myDate.getUTCFullYear();\n</code></pre>\n<p>Month</p>\n<pre><code> ar monthIndex = myDate.getMonth();\n //or\nvar monthIndex = myDate.getUTCMonth();\n</code></pre>\n<p>Month starts from 0 for January to 11 for December - if you want 1 for January add +1</p>\n<pre><code>var myDate=new Date(); \nvar month=myDate.getMonth()+1\n</code></pre>\n<p>Day of month- which provides day of the month, such as 1, 24, 31, etc.</p>\n<pre><code>var day = myDate.getDate();\n//or\nvar day = myDate.getUTCDate();\n</code></pre>\n<p>Day of week - which provides day of the week, such as 1, 6, etc.</p>\n<pre><code>var day = myDate.getDate();\n//or\nvar day = myDate.getUTCDate();\n</code></pre>\n<p>Hours</p>\n<pre><code>var hours = myDate.getHours();\n//or\nvar hours = myDate.getUTCHours();\n</code></pre>\n<p>Minutes</p>\n<pre><code>var minutes = myDate.getMinutes();\n//or\nvar minutes = myDate.getUTCMinutes();\n</code></pre>\n<p>Seconds</p>\n<pre><code>var seconds = myDate.getSeconds();\n//or\nvar seconds = myDate.getITCSeconds();\n</code></pre>\n<p>Incrementing one day to a date</p>\n<pre><code>var myDate = new Date();\n//add a day to the date\nmyDate.setDate(myDate.getDate() + 1);\n</code></pre>\n<p>Creating new variable event which will contain a given date:</p>\n<pre><code>var event = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n</code></pre>\n<p>Fortmatting Date to nice string using <code>.toLocaleSting</code></p>\n<pre><code>console.log(event.toLocaleString('en-GB', { timeZone: 'UTC' }));\n// expected output: 20/12/2012, 03:00:00\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://www.youtube.com/watch?v=CnozSz4wbBQ\">https://www.youtube.com/watch?v=CnozSz4wbBQ</a></p>\n<p><strong>Moment JS</strong></p>\n<p><img src=\"https://i.imgur.com/o7K483F.jpg\" alt=\"Moment\" title=\"Photo by Matej from Pexels\"></p>\n<p>Another cool package which allows us to get variety of formatting options with dates is called <code>MomentJS</code>. Plain Javascript does not have as many options as Moment JS.</p>\n<p>In order to install it:</p>\n<pre><code>npm install moment --save\n</code></pre>\n<p>In order to add it to your React JS file, paste this <strong>AFTER</strong> all imports:</p>\n<pre><code>var moment = require('moment');\n</code></pre>\n<p>Then you can use it and create a new date variable with the date of TODAY (now):</p>\n<pre><code>var myDate=moment();\n</code></pre>\n<blockquote>\n<p>An object will be returned with many properties.</p>\n</blockquote>\n<blockquote>\n<p>We can also create a date variable from existing value if we know its formatting:</p>\n</blockquote>\n<pre><code>var itIsADate=\"01.01.2020\"\nvar myDate=moment(itIsADate, \"DD.MM.YYYY\");\n</code></pre>\n<blockquote>\n<p>We can then transform our date to any format:</p>\n</blockquote>\n<pre><code>var newDate=moment(myDate).format(\"YYYY-MMM-DD\")\n//Result: 2016-Jan-01\n</code></pre>\n<p>Reference:</p>\n<p><a href=\"https://momentjs.com/docs\">https://momentjs.com/docs</a></p>\n<p><img src=\"https://i.imgur.com/bNckChk.jpg\" alt=\"Dates\" title=\"Photo by Bich Tran from Pexels\"></p>"}},{"node":{"id":"52dc0d06-5105-5f23-b8d1-ef543a07b609","excerpt":"Imagine to have a while look in which you are updating state: Updating state within while loop risks running into infinite loop especially…","rawMarkdownBody":"\r\n![](https://i.imgur.com/8pjW3Uh.jpg \"Photo by Edwin Soto from Pexels\")\r\n\r\nImagine to have a <code>while</code> look in which you are updating state:\r\n```\r\nexport const CodeAdvent20180102 = () => {\r\n  const [frequencyChanges, setFrequencyChanges] = useState([\r\n    3,\r\n    -3,\r\n    -2,\r\n    5,\r\n    4,\r\n    0\r\n  ]);\r\n  const [frequencySum, setFrequencySum] = useState(0);\r\n  const [uniques, setUniques] = useState([0]);\r\n  const [reiterate, setReiterate] = useState(true);\r\n  const [duplicateFrequency, setDuplicateFrequency] = useState();\r\n\r\n  function handleClick() {\r\n    let result = 0;\r\n    let newArray = [...uniques];\r\n\r\n while (reiterate) {\r\n\r\n    frequencyChanges.map((item, index) => {\r\n      result = result + item;\r\n      console.log(\"Im here\");\r\n      if (uniques.includes(result) && reiterate) {\r\n        setReiterate(false);\r\n        debugger;\r\n        setDuplicateFrequency(result);\r\n      } else if (reiterate) {\r\n        newArray = newArray.concat(result);\r\n        setUniques(newArray);\r\n        setFrequencySum(result);\r\n      }\r\n    });\r\n   }\r\n  }\r\n\r\n```\r\n\r\nUpdating state within while loop risks running into infinite loop especially if the loop condition is based on the state.\r\n\r\nWhy??\r\n\r\nIt is beecause the way state works in the React. For performance reasons, when we update the state and use that state info immediatelly afterwards, it is not guaranteed that it will be updated. State updated asynchronously and sometimes state updates are batched (grouped) for performance reasons! \r\n\r\nSo dont rely on states too much!","frontmatter":{"date":"2019-11-15","title":"While Loop and React State"},"fields":{"slug":"/While_Loop_and_React_State/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/8pjW3Uh.jpg\" title=\"Photo by Edwin Soto from Pexels\"></p>\n<p>Imagine to have a <code>while</code> look in which you are updating state:</p>\n<pre><code>export const CodeAdvent20180102 = () => {\n  const [frequencyChanges, setFrequencyChanges] = useState([\n    3,\n    -3,\n    -2,\n    5,\n    4,\n    0\n  ]);\n  const [frequencySum, setFrequencySum] = useState(0);\n  const [uniques, setUniques] = useState([0]);\n  const [reiterate, setReiterate] = useState(true);\n  const [duplicateFrequency, setDuplicateFrequency] = useState();\n\n  function handleClick() {\n    let result = 0;\n    let newArray = [...uniques];\n\n while (reiterate) {\n\n    frequencyChanges.map((item, index) => {\n      result = result + item;\n      console.log(\"Im here\");\n      if (uniques.includes(result) &#x26;&#x26; reiterate) {\n        setReiterate(false);\n        debugger;\n        setDuplicateFrequency(result);\n      } else if (reiterate) {\n        newArray = newArray.concat(result);\n        setUniques(newArray);\n        setFrequencySum(result);\n      }\n    });\n   }\n  }\n</code></pre>\n<p>Updating state within while loop risks running into infinite loop especially if the loop condition is based on the state.</p>\n<p>Why??</p>\n<p>It is beecause the way state works in the React. For performance reasons, when we update the state and use that state info immediatelly afterwards, it is not guaranteed that it will be updated. State updated asynchronously and sometimes state updates are batched (grouped) for performance reasons! </p>\n<p>So dont rely on states too much!</p>"}},{"node":{"id":"3fc4bcd1-249d-56a5-8a78-d636f292f1b6","excerpt":"First import your image: Then use it on your component style: or Alternative, create a className on your element And then style your CSS…","rawMarkdownBody":"\r\n![](https://i.imgur.com/M6Q6Fay.jpg \"Photo by Aneta Foubíková from Pexels\")\r\n\r\nFirst import your image:\r\n```\r\nimport Background from './advent.jpg';\r\n```\r\n\r\nThen use it on your component style:\r\n```\r\n<Col sm={12} style={{backgroundImage: `url(${Background})`}} />\r\n```\r\n\r\nor\r\n\r\n```\r\n<h2 style={{backgroundImage: `url(${Background})`}} >HI</h2>\r\n```\r\n\r\nAlternative, create a <code>className</code> on your element\r\n```\r\nclassName=\"background\"\r\n```\r\n\r\nAnd then style your CSS:\r\n```\r\n.background{\r\n  background-image: url(\"https://i.imgur.com/obmwHdn.jpg\");\r\n  width: 600px;\r\n}\r\n```\r\n\r\nFurther interesting resources:\r\n\r\nhttps://css-tricks.com/text-blocks-over-image/\r\n\r\n![NewZealand](https://i.imgur.com/GUSKq9U.jpg \"Photo by Tyler Lastovich from Pexels\")","frontmatter":{"date":"2019-11-15","title":"Background image in div"},"fields":{"slug":"/How_To_Add_Background_Image_To_Div/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/M6Q6Fay.jpg\" title=\"Photo by Aneta Foubíková from Pexels\"></p>\n<p>First import your image:</p>\n<pre><code>import Background from './advent.jpg';\n</code></pre>\n<p>Then use it on your component style:</p>\n<pre><code>&#x3C;Col sm={12} style={{backgroundImage: `url(${Background})`}} />\n</code></pre>\n<p>or</p>\n<pre><code>&#x3C;h2 style={{backgroundImage: `url(${Background})`}} >HI&#x3C;/h2>\n</code></pre>\n<p>Alternative, create a <code>className</code> on your element</p>\n<pre><code>className=\"background\"\n</code></pre>\n<p>And then style your CSS:</p>\n<pre><code>.background{\n  background-image: url(\"https://i.imgur.com/obmwHdn.jpg\");\n  width: 600px;\n}\n</code></pre>\n<p>Further interesting resources:</p>\n<p><a href=\"https://css-tricks.com/text-blocks-over-image/\">https://css-tricks.com/text-blocks-over-image/</a></p>\n<p><img src=\"https://i.imgur.com/GUSKq9U.jpg\" alt=\"NewZealand\" title=\"Photo by Tyler Lastovich from Pexels\"></p>"}},{"node":{"id":"e63ee37e-5e99-55a1-9462-c8499eba72bd","excerpt":"How to update an array state in React? States in React are declared with const and therefore immutable. It means we cant (or rather shouldnt…","rawMarkdownBody":"\r\n![](https://i.imgur.com/OULUQRu.jpg \"Photo by Chokniti Khongchum from Pexels\")\r\n\r\nHow to update an array state in React?\r\n\r\nStates in React are declared with const and therefore immutable. It means we cant (or rather shouldnt) manipulate them directly.\r\n\r\nA quote from the official React documentation says:\r\n\r\n*\"Never mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.\"*\r\n\r\nWhat is direct manipulation?\r\n\r\nImagine we have this state:\r\n\r\n```\r\nconst [array, setArray] = useState([1,2,3])\r\n```\r\n\r\nThen we try to manipulate it directly:\r\n\r\n```\r\narray = [4]\r\n```\r\n\r\nState should also not be MUTATED. What is mutation? It can be an array method that will CHANGE the state directly. For example push (adding one more element to array).\r\n\r\n```\r\narray.push(4);\r\n```\r\n\r\nWhy mutation is bad? It has to do with how the memory works. \r\n\r\nWhen we create our state, for example:\r\n\r\n```\r\nconst [array, setArray] = useState([1,2,3])\r\n```\r\n\r\nThis variable will be created as an object in the memory on location lets say aaa and this object will be pointing to other memory locations for each of the elements in the array. Number 1 will have memory location xxx, Number 2 will have memory location yyy, etc). The ARRAY object in the memory location aaa only points to other memory locations. \r\n\r\nImagine we now MUTATE/change the existing array by:\r\n\r\n```\r\narray.push(4);\r\n```\r\n\r\nThis changes the EXISTING array, in memory however the memory location aaa of the WHOLE array object did NOT change (because it is not a NEW object, it is the SAME object, just mutated/slightly change). Only thing that changed is that ARRAY object on location aaa is now pointing also to number 4 located lets say on memory location qqq. If the memory location of the whole array did not change, the render of the whole component will not be triggered!!\r\n\r\nIn order to trigger the render, we need to create a NEW object in the memory! For example, creating a new array with new memory location which will be then set as the new state using <code>setArray(newArray)</code>.\r\n\r\nBest way to create a new array and concatenate the new value to it is:\r\n\r\n\r\n\r\nThere are two array methods which ave potential to be used:\r\n\r\n- array.push('new value')\r\n\r\n- array.concat('new value')\r\n\r\n<code>array.push('new value')</code> returns the **LENGHT** of the extended array, instead of the array itself! Moreover it MUTATES the array, so it should NOT be used.\r\n\r\n\r\n<code>array.concat('new value')</code> returns a new array which can be then set to OVERWRITE the state used useState hook.\r\n\r\n\r\n>Great source: \r\n\r\nhttps://blog.logrocket.com/immutability-in-react-ebe55253a1cc/\r\n\r\n\r\n> Even greater resource:\r\n\r\nhttps://www.samanthaming.com/tidbits/35-es6-way-to-clone-an-array\r\n","frontmatter":{"date":"2019-11-14","title":"React state immutability"},"fields":{"slug":"/React_State_Immutability/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/OULUQRu.jpg\" title=\"Photo by Chokniti Khongchum from Pexels\"></p>\n<p>How to update an array state in React?</p>\n<p>States in React are declared with const and therefore immutable. It means we cant (or rather shouldnt) manipulate them directly.</p>\n<p>A quote from the official React documentation says:</p>\n<p><em>\"Never mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.\"</em></p>\n<p>What is direct manipulation?</p>\n<p>Imagine we have this state:</p>\n<pre><code>const [array, setArray] = useState([1,2,3])\n</code></pre>\n<p>Then we try to manipulate it directly:</p>\n<pre><code>array = [4]\n</code></pre>\n<p>State should also not be MUTATED. What is mutation? It can be an array method that will CHANGE the state directly. For example push (adding one more element to array).</p>\n<pre><code>array.push(4);\n</code></pre>\n<p>Why mutation is bad? It has to do with how the memory works. </p>\n<p>When we create our state, for example:</p>\n<pre><code>const [array, setArray] = useState([1,2,3])\n</code></pre>\n<p>This variable will be created as an object in the memory on location lets say aaa and this object will be pointing to other memory locations for each of the elements in the array. Number 1 will have memory location xxx, Number 2 will have memory location yyy, etc). The ARRAY object in the memory location aaa only points to other memory locations. </p>\n<p>Imagine we now MUTATE/change the existing array by:</p>\n<pre><code>array.push(4);\n</code></pre>\n<p>This changes the EXISTING array, in memory however the memory location aaa of the WHOLE array object did NOT change (because it is not a NEW object, it is the SAME object, just mutated/slightly change). Only thing that changed is that ARRAY object on location aaa is now pointing also to number 4 located lets say on memory location qqq. If the memory location of the whole array did not change, the render of the whole component will not be triggered!!</p>\n<p>In order to trigger the render, we need to create a NEW object in the memory! For example, creating a new array with new memory location which will be then set as the new state using <code>setArray(newArray)</code>.</p>\n<p>Best way to create a new array and concatenate the new value to it is:</p>\n<p>There are two array methods which ave potential to be used:</p>\n<ul>\n<li>array.push('new value')</li>\n<li>array.concat('new value')</li>\n</ul>\n<p><code>array.push('new value')</code> returns the <strong>LENGHT</strong> of the extended array, instead of the array itself! Moreover it MUTATES the array, so it should NOT be used.</p>\n<p><code>array.concat('new value')</code> returns a new array which can be then set to OVERWRITE the state used useState hook.</p>\n<blockquote>\n<p>Great source: </p>\n</blockquote>\n<p><a href=\"https://blog.logrocket.com/immutability-in-react-ebe55253a1cc/\">https://blog.logrocket.com/immutability-in-react-ebe55253a1cc/</a></p>\n<blockquote>\n<p>Even greater resource:</p>\n</blockquote>\n<p><a href=\"https://www.samanthaming.com/tidbits/35-es6-way-to-clone-an-array\">https://www.samanthaming.com/tidbits/35-es6-way-to-clone-an-array</a></p>"}},{"node":{"id":"a6e7baee-d781-57fb-8d2f-051619d50a9f","excerpt":"How to convert string to integer? Use parseInt: There is another way and in my opinion neater way to convert a string to a number","rawMarkdownBody":"\r\n![](https://i.imgur.com/6UBU54T.jpg \"Photo by Daria Shevtsova from Pexels\")\r\n\r\nHow to convert string to integer?\r\n\r\nUse parseInt:\r\n```\r\nlet integer = parseInt(\"1\");\r\n```\r\n\r\nThere is another way and in my opinion neater way to convert a string to a number\r\n```\r\nlet integer = +\"1\";\r\n```","frontmatter":{"date":"2019-11-14","title":"Convert string to integer"},"fields":{"slug":"/Convert_string_to_integer/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/6UBU54T.jpg\" title=\"Photo by Daria Shevtsova from Pexels\"></p>\n<p>How to convert string to integer?</p>\n<p>Use parseInt:</p>\n<pre><code>let integer = parseInt(\"1\");\n</code></pre>\n<p>There is another way and in my opinion neater way to convert a string to a number</p>\n<pre><code>let integer = +\"1\";\n</code></pre>"}},{"node":{"id":"4153decd-7235-53e7-aac0-6c6f49d71fc4","excerpt":"General information Markdown files use extension .md. They allow formatting text better then in the code itself between for example <p> tags…","rawMarkdownBody":"\r\n![](https://i.imgur.com/VIj56ca.jpg \"Photo by Spencer Selover from Pexels\")\r\n\r\n**General information**\r\n\r\nMarkdown files use extension <code>.md</code>. They allow formatting text better then in the code itself between for example <code>```<p>```</code> tags. Gatsby also can interpret each md file a sub-site and automate creation for example of blog posts, articles, etc.\r\n\r\nMD files usually start with some metadata, such as title, date, etc, which can be retreived and used to build components which will display the data:\r\n```\r\n---\r\ntitle: \"JS\"\r\ndate: \"2019-11-12\"\r\n---\r\n```\r\n\r\n**Basic styling in Markdown**\r\n> Bold\r\n```\r\n**I am BOLD**\r\n```\r\n> List\r\n```\r\n- List item1\r\n- List item2\r\n```\r\n\r\n>How to separate text which should not be formatted, such as our code?\r\n```\r\nuse ``` before and after the block code\r\n```\r\n\r\n>How to insert images to md files?\r\n```\r\n![image alt atribute](url_or_file_path image_title)\r\n```\r\n\r\n>You can add text to image which will display when you <code>mouseOver</code> the image using Title\r\n```\r\n![image alt atribute](url \"Title\")\r\n```","frontmatter":{"date":"2019-11-12","title":"Markdown"},"fields":{"slug":"/Markdown/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/VIj56ca.jpg\" title=\"Photo by Spencer Selover from Pexels\"></p>\n<p><strong>General information</strong></p>\n<p>Markdown files use extension <code>.md</code>. They allow formatting text better then in the code itself between for example <code><code>&#x3C;p></code></code> tags. Gatsby also can interpret each md file a sub-site and automate creation for example of blog posts, articles, etc.</p>\n<p>MD files usually start with some metadata, such as title, date, etc, which can be retreived and used to build components which will display the data:</p>\n<pre><code>---\ntitle: \"JS\"\ndate: \"2019-11-12\"\n---\n</code></pre>\n<p><strong>Basic styling in Markdown</strong></p>\n<blockquote>\n<p>Bold</p>\n</blockquote>\n<pre><code>**I am BOLD**\n</code></pre>\n<blockquote>\n<p>List</p>\n</blockquote>\n<pre><code>- List item1\n- List item2\n</code></pre>\n<blockquote>\n<p>How to separate text which should not be formatted, such as our code?</p>\n</blockquote>\n<pre><code>use ``` before and after the block code\n</code></pre>\n<blockquote>\n<p>How to insert images to md files?</p>\n</blockquote>\n<pre><code>![image alt atribute](url_or_file_path image_title)\n</code></pre>\n<blockquote>\n<p>You can add text to image which will display when you <code>mouseOver</code> the image using Title</p>\n</blockquote>\n<pre><code>![image alt atribute](url \"Title\")\n</code></pre>"}},{"node":{"id":"be83f1bd-ac41-5726-9854-ebc9e44c0d52","excerpt":"General definitions Paradigm is an universal approach to structuring code. Example of paradigms:  1/procedural programming 2/object-oriented…","rawMarkdownBody":"\r\n![](https://i.imgur.com/a6lhpyl.jpg \"Photo by Bich Tran from Pexels\")\r\n\r\n**General definitions**\r\n\r\n> Paradigm\r\n\r\nis an universal approach to structuring code. Example of paradigms: \r\n\r\n**1/**procedural programming\r\n\r\n**2/**object-oriented programming\r\n\r\n**3/**functional programming\r\n\r\nSome languages embrace one of them, other languages like JS are multi-paradigm languages.\r\n\r\n> Style\r\n\r\nindividual programmer's way of writing code\r\n\r\n> Framework\r\n\r\ntools and libraries used in program\r\n\r\n> ECMA\r\n\r\nEuropean Computer Manufacturers Association - is a standards organization for information and communication systems. Mission is to standardize computer systems in Europe. \r\n\r\n> Official name\r\n\r\nJavaScript (or in short JS) was in 2016 officially named as ECMAScriptXXXX where XXXX stands for revision year. For example now we have ECMAScript2019 which is abbreviated as ES2019. Therefor we can use Javascript, JS, ECMAScript or ES2019 to refer to the name of this language.\r\n\r\n> T39\r\n\r\nis a committee which works on new features/bugs, votes on proposals, etc. It contains 50-100 members of different companies like Google, Mozilla, etc\r\n\r\n> Birthday\r\n\r\nJS was created in 1995.\r\n\r\n> Compatibility\r\n\r\nJS is and will always be backwards compatible. Code written in 1995 will still run (on updated browsers) and won't break. JS however is NOT forward compatible. Latest JS will not run on OLD browsers!\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-11-10","title":"JS"},"fields":{"slug":"/JS/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/a6lhpyl.jpg\" title=\"Photo by Bich Tran from Pexels\"></p>\n<p><strong>General definitions</strong></p>\n<blockquote>\n<p>Paradigm</p>\n</blockquote>\n<p>is an universal approach to structuring code. Example of paradigms: </p>\n<p><strong>1/</strong>procedural programming</p>\n<p><strong>2/</strong>object-oriented programming</p>\n<p><strong>3/</strong>functional programming</p>\n<p>Some languages embrace one of them, other languages like JS are multi-paradigm languages.</p>\n<blockquote>\n<p>Style</p>\n</blockquote>\n<p>individual programmer's way of writing code</p>\n<blockquote>\n<p>Framework</p>\n</blockquote>\n<p>tools and libraries used in program</p>\n<blockquote>\n<p>ECMA</p>\n</blockquote>\n<p>European Computer Manufacturers Association - is a standards organization for information and communication systems. Mission is to standardize computer systems in Europe. </p>\n<blockquote>\n<p>Official name</p>\n</blockquote>\n<p>JavaScript (or in short JS) was in 2016 officially named as ECMAScriptXXXX where XXXX stands for revision year. For example now we have ECMAScript2019 which is abbreviated as ES2019. Therefor we can use Javascript, JS, ECMAScript or ES2019 to refer to the name of this language.</p>\n<blockquote>\n<p>T39</p>\n</blockquote>\n<p>is a committee which works on new features/bugs, votes on proposals, etc. It contains 50-100 members of different companies like Google, Mozilla, etc</p>\n<blockquote>\n<p>Birthday</p>\n</blockquote>\n<p>JS was created in 1995.</p>\n<blockquote>\n<p>Compatibility</p>\n</blockquote>\n<p>JS is and will always be backwards compatible. Code written in 1995 will still run (on updated browsers) and won't break. JS however is NOT forward compatible. Latest JS will not run on OLD browsers!</p>"}},{"node":{"id":"820d089f-038d-5129-bfd4-a2566b8a3970","excerpt":"Are you also one of those perfectionists (like me..) who like their text to be nicely formatted in a BLOCK, rather than having each text…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Lm6vmDZ.jpg \"Photo by Suzy Hazelwood from Pexels\")\r\n\r\nAre you also one of those perfectionists (like me..) who like their text to be nicely formatted in a <code>BLOCK</code>, rather than having each text line of different length? If yes, then this article is for you!\r\n\r\nIn order to have each line of text of same length and left and right side of text nicely aligned, we can use following code:\r\n```\r\n<p style={{  textAlign: \"justify\" }}>\r\n```\r\n\r\nTry it out! It works like magic :) ","frontmatter":{"date":"2019-10-29","title":"Format Text to Block"},"fields":{"slug":"/Format_text_to_Block/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/Lm6vmDZ.jpg\" title=\"Photo by Suzy Hazelwood from Pexels\"></p>\n<p>Are you also one of those perfectionists (like me..) who like their text to be nicely formatted in a <code>BLOCK</code>, rather than having each text line of different length? If yes, then this article is for you!</p>\n<p>In order to have each line of text of same length and left and right side of text nicely aligned, we can use following code:</p>\n<pre><code>&#x3C;p style={{  textAlign: \"justify\" }}>\n</code></pre>\n<p>Try it out! It works like magic :) </p>"}},{"node":{"id":"612c83c0-0cb5-5622-b787-025f02ed5586","excerpt":"Only one advice here: :) Apart from that, imagine you want to display following text in a p tag : If you write the code like this: you will…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Xp2icU5.jpg \"Photo by Matthias Zomer from Pexels\")\r\n\r\nOnly one advice here:\r\n\r\n```\r\nRUUUUUUUUUUN\r\n```\r\n\r\n:)\r\n\r\nApart from that, imagine you want to display following text in a p tag :\r\n```\r\nThe way you use props is {props.name}\r\n```\r\nIf you write the code like this:\r\n```\r\n<p>The way you use props is {props.name}</p>\r\n```\r\nyou will get an error that props.name is not defined\r\n\r\nIt is because curly braces means injecting JS in JSX so the program expects for example a variable, not a plain text.\r\n\r\nSolution is to use {'{}'} like so:\r\n```\r\n<p>the way you use props is {'{props.name}'}</p>\r\n```","frontmatter":{"date":"2019-10-28","title":"Escaping curly brackets in JSX"},"fields":{"slug":"/Escaping_Brackets_in_JSX/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/Xp2icU5.jpg\" title=\"Photo by Matthias Zomer from Pexels\"></p>\n<p>Only one advice here:</p>\n<pre><code>RUUUUUUUUUUN\n</code></pre>\n<p>:)</p>\n<p>Apart from that, imagine you want to display following text in a p tag :</p>\n<pre><code>The way you use props is {props.name}\n</code></pre>\n<p>If you write the code like this:</p>\n<pre><code>&#x3C;p>The way you use props is {props.name}&#x3C;/p>\n</code></pre>\n<p>you will get an error that props.name is not defined</p>\n<p>It is because curly braces means injecting JS in JSX so the program expects for example a variable, not a plain text.</p>\n<p>Solution is to use {'{}'} like so:</p>\n<pre><code>&#x3C;p>the way you use props is {'{props.name}'}&#x3C;/p>\n</code></pre>"}},{"node":{"id":"6869d44a-7cf1-5416-85fd-c4304c424623","excerpt":"What are higher order functions? According to Wikipedia: In mathematics and computer science, a higher-order function is a function that…","rawMarkdownBody":"\r\n![](https://i.imgur.com/o8RCUlW.jpg \"Photo by Cameron Casey from Pexels\")\r\n\r\n\r\nWhat are higher order functions? According to Wikipedia:\r\n\r\n> In mathematics and computer science, a higher-order function is a function that does at least one of the following:\r\n\r\n> **1/** takes one or more functions as arguments (i.e. procedural parameters)\r\n\r\n> **2/** returns a function as its result.\r\n\r\nFor example an array method <code>.reduce</code> is a higher order function because it takes a function called reducer as a parameter:\r\n\r\n\r\n```javascript\r\nconst [myArray, setMyArray] = useState([1, 4, 2]) \r\n<p>Im a reducer and SUM is: {myArray.reduce(reducer)}</p>\r\nconst reducer = (accumulator, currentValue, index) => {\r\n        accumulator = (accumulator + currentValue)        \r\n        return (accumulator);\r\n    } \r\n```   ","frontmatter":{"date":"2019-10-27","title":"Higher Order Functions"},"fields":{"slug":"/Higher_order_functions/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/o8RCUlW.jpg\" title=\"Photo by Cameron Casey from Pexels\"></p>\n<p>What are higher order functions? According to Wikipedia:</p>\n<blockquote>\n<p>In mathematics and computer science, a higher-order function is a function that does at least one of the following:</p>\n</blockquote>\n<blockquote>\n<p><strong>1/</strong> takes one or more functions as arguments (i.e. procedural parameters)</p>\n</blockquote>\n<blockquote>\n<p><strong>2/</strong> returns a function as its result.</p>\n</blockquote>\n<p>For example an array method <code>.reduce</code> is a higher order function because it takes a function called reducer as a parameter:</p>\n<pre><code class=\"language-javascript\">const [myArray, setMyArray] = useState([1, 4, 2]) \n&#x3C;p>Im a reducer and SUM is: {myArray.reduce(reducer)}&#x3C;/p>\nconst reducer = (accumulator, currentValue, index) => {\n        accumulator = (accumulator + currentValue)        \n        return (accumulator);\n    } \n</code></pre>"}},{"node":{"id":"f316a34a-e925-5967-a916-7c85f8f6cab6","excerpt":"There are two ways how to access props passed to a component. a) Using props as argument of the functional component and accessing them with…","rawMarkdownBody":"\r\n![](https://i.imgur.com/fEZTMxH.jpg \"Photo by Gnist Design from Pexels\")\r\n\r\nThere are two ways how to access props passed to a component.\r\n\r\n**a)** Using props as argument of the functional component and accessing them with <code>props.name</code>\r\n\r\n```\r\nconst Button = (props) => {\r\n  return (\r\n      <p>{props.name}</p>\r\n  )\r\n}\r\n```\r\n\r\n**b)** Passing name of prop inside curly brackets of the functional component and then accessing props with <code>name</code>\r\n```\r\nconst Button = ({name}) => {\r\n  return (\r\n      <p>{name}</p>\r\n  )\r\n}\r\n```\r\nAlternative b allows only passing specific props to the component, instead of passing ALL of them.\r\n\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-10-26","title":"Accessing Props"},"fields":{"slug":"/Accessing_Props/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/fEZTMxH.jpg\" title=\"Photo by Gnist Design from Pexels\"></p>\n<p>There are two ways how to access props passed to a component.</p>\n<p><strong>a)</strong> Using props as argument of the functional component and accessing them with <code>props.name</code></p>\n<pre><code>const Button = (props) => {\n  return (\n      &#x3C;p>{props.name}&#x3C;/p>\n  )\n}\n</code></pre>\n<p><strong>b)</strong> Passing name of prop inside curly brackets of the functional component and then accessing props with <code>name</code></p>\n<pre><code>const Button = ({name}) => {\n  return (\n      &#x3C;p>{name}&#x3C;/p>\n  )\n}\n</code></pre>\n<p>Alternative b allows only passing specific props to the component, instead of passing ALL of them.</p>"}},{"node":{"id":"7a0e48f9-355f-540a-b84b-22036c4b235f","excerpt":"Imagine we add to our code a line like this: Then we are able to execute code only up until this line.  You need to go to your website and…","rawMarkdownBody":"\r\n![](https://i.imgur.com/7vkvSLF.jpg \"Photo by Egor Kamelev from Pixabay\")\r\n\r\nImagine we add to our code a line like this:\r\n```\r\ndebugger;\r\n```\r\nThen we are able to execute code only up until this line. \r\n\r\nYou need to go to your website and open the <code>DEV TOOLS</code> (without opening the dev tools you won't be able to see the debugger stopping at the given place).\r\n\r\nAutomatical execution will stop and we will be able to use console to check for any value of our variable and hence check if all variables have correct values. \r\n\r\nFor example if we put debugger to <code>onClick</code> event handler, we can type in console:\r\n```\r\nevent\r\n```\r\nand we will see the whole event object.\r\n\r\nWe can put\r\n```\r\nevent.target\r\n```\r\n\r\nand see all the options we have that can be used as <code>event.target</code>. <code>Event.target</code> set is pre-defined and doesn't display any custom values, like prop names.\r\n\r\nTo read custom properties, we can use:\r\n```\r\nevent.target.attribute\r\n```\r\nFor example, if we gave our button attribute <code>user</code>, then we can access it by\r\n```\r\nevent.target.attribute.user\r\n```\r\nIf we wanted to access what is in between of the closing and ending tag of button we write\r\n```\r\nevent.target.innerHTML\r\n```\r\nPlease Note: React does not persist the events. Therefore many of those values might be empty. We can add this line to our code:\r\n```\r\nevent.persist();\r\n```","frontmatter":{"date":"2019-10-25","title":"Debugging"},"fields":{"slug":"/Debugging/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/7vkvSLF.jpg\" title=\"Photo by Egor Kamelev from Pixabay\"></p>\n<p>Imagine we add to our code a line like this:</p>\n<pre><code>debugger;\n</code></pre>\n<p>Then we are able to execute code only up until this line. </p>\n<p>You need to go to your website and open the <code>DEV TOOLS</code> (without opening the dev tools you won't be able to see the debugger stopping at the given place).</p>\n<p>Automatical execution will stop and we will be able to use console to check for any value of our variable and hence check if all variables have correct values. </p>\n<p>For example if we put debugger to <code>onClick</code> event handler, we can type in console:</p>\n<pre><code>event\n</code></pre>\n<p>and we will see the whole event object.</p>\n<p>We can put</p>\n<pre><code>event.target\n</code></pre>\n<p>and see all the options we have that can be used as <code>event.target</code>. <code>Event.target</code> set is pre-defined and doesn't display any custom values, like prop names.</p>\n<p>To read custom properties, we can use:</p>\n<pre><code>event.target.attribute\n</code></pre>\n<p>For example, if we gave our button attribute <code>user</code>, then we can access it by</p>\n<pre><code>event.target.attribute.user\n</code></pre>\n<p>If we wanted to access what is in between of the closing and ending tag of button we write</p>\n<pre><code>event.target.innerHTML\n</code></pre>\n<p>Please Note: React does not persist the events. Therefore many of those values might be empty. We can add this line to our code:</p>\n<pre><code>event.persist();\n</code></pre>"}},{"node":{"id":"46e50bd6-3d8f-59fd-801f-355f74656ed3","excerpt":"Event handlers like onClick will by default pass in some metadata to the event handler function, which we can use afterwards. For example…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Ac14aft.jpg \"Photo by Wolfgang from Pexels\")\r\n\r\nEvent handlers like <code>onClick</code> will by default pass in some metadata to the event handler function, which we can use afterwards. For example: name and id of the element which triggered it or trigger type (onClick, onMouseOver, onChange, etc)\r\n\r\nWe access them by:\r\n```\r\nevent.target.name\r\nevent.target.id\r\n```\r\nThese names are predefined by default!\r\n\r\nBut we can also access all our custom properties by:\r\n```\r\nevent.target.attribute.XXX\r\n```\r\n\r\nwhere XXX is name of our custom property. Please note however, that this is not a reliable way to retreive data. This way uses DOM and DOM does not keep this data longer than the moment when the event was triggered. For that reason we might also need to include \r\n```\r\nevent.persist()\r\n```\r\n\r\nExample:\r\n```\r\nfunction handleClick(event) {\r\n    console.log(\"Event: \", event);\r\n    console.log(\"Event type: \", event.type);\r\n    console.log(\"Event name: \", event.target.name);\r\n    console.log(\"Event id: \", event.target.id);\r\n    console.log(\"Event custom property: \", event.target.attributes.custom);\r\n    console.log(\"Event innerHTML: \", event.target.attributes.innerHTML);\r\n  }\r\n<button onClick={handleClick} name={\"clicker\"} id={\"click01\"} custom=\"I am the best in clicking\">\r\n    Click ME!\r\n</button>\r\n```\r\n\r\n> PLEASE NOTE: <code>console.log(\"Event: \", event);</code> will return the whole event OBJECT (on which we can click and see all nodes). If we wrote <code>console.log(\"Event: \" + event);</code> event object would be stringyfied and we wont have opportunity to explore the OBJECT!!\r\n\r\n\r\nWe might need to get some info from the element which called our event handler. For example <code>onClick</code>. With the onClick, we can use the information provided in event object and retreeive data about our componenet which triggered the event from event object. But this approach is not good, becasue it retrieves data from the DOM. In React we dont want to rely on DOM because it is outside of the React world. \r\n\r\n``` \r\nfunction handleClick(event) {\r\n    setMyArray(\r\n      myArray.concat({\r\n        firstName: event.target.attributes.name,\r\n        lastName: event.target.attributes.last,\r\n        display: event.target.innerHTML,\r\n      })\r\n    );\r\n  }\r\n<button onClick={handleClick} name={\"pete\"} id={\"grey\"} last=\"IM HIDDEN\">\r\n        Add Pete\r\n      </button>\r\n```\r\n\r\nIt is better to use it in this way:\r\n``` \r\n<Button\r\n        onClickZ={(name, id) => {\r\n          console.log(name, id);\r\n        }}\r\n        name=\"I AM NAME\"\r\n        id=\"IM ID\"\r\n        children=\"We are the children\"\r\n        last=\"IM LAST NAME\"\r\n      />\r\nfunction Button({ onClickZ, name, last, children }) {\r\n  return <button onClick={() => onClickZ(name, last)}>{children}</button>;\r\n}\r\n```","frontmatter":{"date":"2019-10-24","title":"Event Handlers"},"fields":{"slug":"/Event_Handlers/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/Ac14aft.jpg\" title=\"Photo by Wolfgang from Pexels\"></p>\n<p>Event handlers like <code>onClick</code> will by default pass in some metadata to the event handler function, which we can use afterwards. For example: name and id of the element which triggered it or trigger type (onClick, onMouseOver, onChange, etc)</p>\n<p>We access them by:</p>\n<pre><code>event.target.name\nevent.target.id\n</code></pre>\n<p>These names are predefined by default!</p>\n<p>But we can also access all our custom properties by:</p>\n<pre><code>event.target.attribute.XXX\n</code></pre>\n<p>where XXX is name of our custom property. Please note however, that this is not a reliable way to retreive data. This way uses DOM and DOM does not keep this data longer than the moment when the event was triggered. For that reason we might also need to include </p>\n<pre><code>event.persist()\n</code></pre>\n<p>Example:</p>\n<pre><code>function handleClick(event) {\n    console.log(\"Event: \", event);\n    console.log(\"Event type: \", event.type);\n    console.log(\"Event name: \", event.target.name);\n    console.log(\"Event id: \", event.target.id);\n    console.log(\"Event custom property: \", event.target.attributes.custom);\n    console.log(\"Event innerHTML: \", event.target.attributes.innerHTML);\n  }\n&#x3C;button onClick={handleClick} name={\"clicker\"} id={\"click01\"} custom=\"I am the best in clicking\">\n    Click ME!\n&#x3C;/button>\n</code></pre>\n<blockquote>\n<p>PLEASE NOTE: <code>console.log(\"Event: \", event);</code> will return the whole event OBJECT (on which we can click and see all nodes). If we wrote <code>console.log(\"Event: \" + event);</code> event object would be stringyfied and we wont have opportunity to explore the OBJECT!!</p>\n</blockquote>\n<p>We might need to get some info from the element which called our event handler. For example <code>onClick</code>. With the onClick, we can use the information provided in event object and retreeive data about our componenet which triggered the event from event object. But this approach is not good, becasue it retrieves data from the DOM. In React we dont want to rely on DOM because it is outside of the React world. </p>\n<pre><code>function handleClick(event) {\n    setMyArray(\n      myArray.concat({\n        firstName: event.target.attributes.name,\n        lastName: event.target.attributes.last,\n        display: event.target.innerHTML,\n      })\n    );\n  }\n&#x3C;button onClick={handleClick} name={\"pete\"} id={\"grey\"} last=\"IM HIDDEN\">\n        Add Pete\n      &#x3C;/button>\n</code></pre>\n<p>It is better to use it in this way:</p>\n<pre><code>&#x3C;Button\n        onClickZ={(name, id) => {\n          console.log(name, id);\n        }}\n        name=\"I AM NAME\"\n        id=\"IM ID\"\n        children=\"We are the children\"\n        last=\"IM LAST NAME\"\n      />\nfunction Button({ onClickZ, name, last, children }) {\n  return &#x3C;button onClick={() => onClickZ(name, last)}>{children}&#x3C;/button>;\n}\n</code></pre>"}},{"node":{"id":"005b611a-a35f-5c72-8c82-9a1509f9dd4a","excerpt":"Ever wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a…","rawMarkdownBody":"\r\n![](https://i.imgur.com/YsPOiRH.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nEver wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a button:\r\n```\r\n<Button name=\"ABC\" color=\"green\">I AM CHILD</bButton>\r\n```\r\n\r\nThere are two ways how we can declare innerHTML\r\n\r\n**a) Writing text between opening and closing tag**:\r\n\r\n```\r\n<Button name=\"ABC\" color=\"green\">I AM CHILD</Button>\r\n``` \r\n\r\n**b) Writing children property**:\r\n\r\n\r\n``` \r\n<Button children=\"I AM A CHILD\" name=\"ABC\" color=\"green\"/>\r\n```\r\n\r\n> Please note: when using second option we need to have self closing tag, because if I have:\r\n```\r\n<Button children=\"Hello\"></Button>\r\n``` \r\n\r\nan empty space between opening and closing tag will overwrite my children property!\r\n\r\n>Please note: It is a good practice to write children between opening and closing tags (option A), rather than using it as property (option B)\r\n\r\nWhen we then define the button component, we can retrieve the children props like this\r\n\r\n**Alternative A**: Passing word children and then accessing it by word children\r\n\r\n```\r\nconst Button = ({children}) => {\r\n  return (\r\n      <button>{children}</button>\r\n  )\r\n}\r\n\r\n```\r\n**Alternative B**: Passing word props as arguments and then accessing props like so: props.children\r\n``` \r\nconst Button = (props) => {\r\n  return (\r\n      <button>{props.children}</button>\r\n  )\r\n}\r\n```\r\n\r\n","frontmatter":{"date":"2019-10-23","title":"Children - how to access inner HTML"},"fields":{"slug":"/Children-How_to_access_Inner_HTML/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/YsPOiRH.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>Ever wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a button:</p>\n<pre><code>&#x3C;Button name=\"ABC\" color=\"green\">I AM CHILD&#x3C;/bButton>\n</code></pre>\n<p>There are two ways how we can declare innerHTML</p>\n<p><strong>a) Writing text between opening and closing tag</strong>:</p>\n<pre><code>&#x3C;Button name=\"ABC\" color=\"green\">I AM CHILD&#x3C;/Button>\n</code></pre>\n<p><strong>b) Writing children property</strong>:</p>\n<pre><code>&#x3C;Button children=\"I AM A CHILD\" name=\"ABC\" color=\"green\"/>\n</code></pre>\n<blockquote>\n<p>Please note: when using second option we need to have self closing tag, because if I have:</p>\n</blockquote>\n<pre><code>&#x3C;Button children=\"Hello\">&#x3C;/Button>\n</code></pre>\n<p>an empty space between opening and closing tag will overwrite my children property!</p>\n<blockquote>\n<p>Please note: It is a good practice to write children between opening and closing tags (option A), rather than using it as property (option B)</p>\n</blockquote>\n<p>When we then define the button component, we can retrieve the children props like this</p>\n<p><strong>Alternative A</strong>: Passing word children and then accessing it by word children</p>\n<pre><code>const Button = ({children}) => {\n  return (\n      &#x3C;button>{children}&#x3C;/button>\n  )\n}\n</code></pre>\n<p><strong>Alternative B</strong>: Passing word props as arguments and then accessing props like so: props.children</p>\n<pre><code>const Button = (props) => {\n  return (\n      &#x3C;button>{props.children}&#x3C;/button>\n  )\n}\n</code></pre>"}},{"node":{"id":"c46d3ef8-6652-54c5-b3c4-b848bea2ee2a","excerpt":"3 ways to define a function: or or Above functions would be called like this: Parenthesis mean call function immediately and output whatever…","rawMarkdownBody":"\r\n![](https://i.imgur.com/dGu7Oa8.jpg \"Photo by Rodolfo Clix from Pexels\")\r\n\r\n3 ways to define a function:\r\n```\r\nfunction bla() {\r\n  return null\r\n}\r\n```\r\nor\r\n```\r\nconst blo = () => {\r\n  return null\r\n}\r\n```\r\nor\r\n```\r\n() => onClickZ(name, last) {\r\n  return null\r\n}\r\n```\r\n\r\nAbove functions would be called like this:\r\n```\r\nbla()\r\nblo()\r\nonClickZ(name, last)\r\n```\r\nParenthesis mean call function immediately and output whatever is in the return.\r\n\r\nReferencing a function needs to be without parenthesis:\r\n```\r\nbla\r\nblo\r\nonClickZ\r\n```\r\nReferencing can be also done in event handlers like this\r\n```\r\nonChange={()=>onClickZ(name,last)}\r\n```\r\n\r\nAbove example is useful when we need to provide arguments to the function. But if we simply wrote\r\n``` \r\nonClickZ(name,last)\r\n```\r\nwe would actually CALL function, hence we need to use:\r\n```\r\n()=>onClickZ(name,last)\r\n```\r\nin order to reference a function and not to directly CALL it.\r\n","frontmatter":{"date":"2019-10-20","title":"Function declaration and call"},"fields":{"slug":"/Function_declaration_and_call/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/dGu7Oa8.jpg\" title=\"Photo by Rodolfo Clix from Pexels\"></p>\n<p>3 ways to define a function:</p>\n<pre><code>function bla() {\n  return null\n}\n</code></pre>\n<p>or</p>\n<pre><code>const blo = () => {\n  return null\n}\n</code></pre>\n<p>or</p>\n<pre><code>() => onClickZ(name, last) {\n  return null\n}\n</code></pre>\n<p>Above functions would be called like this:</p>\n<pre><code>bla()\nblo()\nonClickZ(name, last)\n</code></pre>\n<p>Parenthesis mean call function immediately and output whatever is in the return.</p>\n<p>Referencing a function needs to be without parenthesis:</p>\n<pre><code>bla\nblo\nonClickZ\n</code></pre>\n<p>Referencing can be also done in event handlers like this</p>\n<pre><code>onChange={()=>onClickZ(name,last)}\n</code></pre>\n<p>Above example is useful when we need to provide arguments to the function. But if we simply wrote</p>\n<pre><code>onClickZ(name,last)\n</code></pre>\n<p>we would actually CALL function, hence we need to use:</p>\n<pre><code>()=>onClickZ(name,last)\n</code></pre>\n<p>in order to reference a function and not to directly CALL it.</p>"}},{"node":{"id":"d74d0d9d-44cf-55e7-9121-7c750e781ce0","excerpt":"If we use function definition like this (using arrow functions): and this definition is AFTER code where it is called, it might still not be…","rawMarkdownBody":"\r\n![](https://i.imgur.com/WBmDMUv.jpg \"Photo by Susanne Jutzeler from Pexels\")\r\n\r\nIf we use function definition like this (using arrow functions):\r\n```\r\nconst Button = () => {\r\n}\r\n```\r\n\r\nand this definition is AFTER code where it is called, it might still not be defined.\r\n\r\nBut if we use:\r\n```\r\n function Button () {\r\n}\r\n```\r\n\r\nsuch function definition can be anywhere at the end of the file, but it will be **HOISTED**. \r\n\r\nHoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.\r\n\r\nInevitably, this means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local. \r\n\r\nThis allows you to  be able to call functions before you wrote them in your code.\r\n\r\n> Reference:\r\n\r\nhttps://scotch.io/tutorials/understanding-hoisting-in-javascript\r\n\r\n![](https://i.imgur.com/UyFD8zE.jpg \"Photo by Jens Johnsson from Pexels\")","frontmatter":{"date":"2019-10-18","title":"Function definition: Arrow vs Function, Hoising"},"fields":{"slug":"/Function_vs_Arrow_and_Hoisting/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/WBmDMUv.jpg\" title=\"Photo by Susanne Jutzeler from Pexels\"></p>\n<p>If we use function definition like this (using arrow functions):</p>\n<pre><code>const Button = () => {\n}\n</code></pre>\n<p>and this definition is AFTER code where it is called, it might still not be defined.</p>\n<p>But if we use:</p>\n<pre><code> function Button () {\n}\n</code></pre>\n<p>such function definition can be anywhere at the end of the file, but it will be <strong>HOISTED</strong>. </p>\n<p>Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.</p>\n<p>Inevitably, this means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local. </p>\n<p>This allows you to  be able to call functions before you wrote them in your code.</p>\n<blockquote>\n<p>Reference:</p>\n</blockquote>\n<p><a href=\"https://scotch.io/tutorials/understanding-hoisting-in-javascript\">https://scotch.io/tutorials/understanding-hoisting-in-javascript</a></p>\n<p><img src=\"https://i.imgur.com/UyFD8zE.jpg\" title=\"Photo by Jens Johnsson from Pexels\"></p>"}},{"node":{"id":"bb32f881-e1ba-5d67-b8d5-d447d0732b95","excerpt":"Have you wondered how you can actually output an array in exactly the same form as you declare it? Say we have array: If you display it just…","rawMarkdownBody":"\r\n![](https://i.imgur.com/KX2u0f2.jpg \"Photo by Dominika Roseclay from Pexels\")\r\n\r\nHave you wondered how you can actually output an array in exactly the same form as you declare it?\r\n\r\n> Say we have array:\r\n```\r\nconst myArray = [1, 2, 4];\r\n```\r\n> If you display it just as myArray, you will get: My array is 124\r\n```\r\n<p>My array is {myArray}</p>\r\n```\r\n\r\n> If you want to display however: My array is [1,2,4] you need to use JSON.stringify\r\n```\r\n<p>My array is {JSON.stringify(myArray)}</p>\r\n```","frontmatter":{"date":"2019-10-17","title":"JSON.stringify"},"fields":{"slug":"/JSON.stringify/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/KX2u0f2.jpg\" title=\"Photo by Dominika Roseclay from Pexels\"></p>\n<p>Have you wondered how you can actually output an array in exactly the same form as you declare it?</p>\n<blockquote>\n<p>Say we have array:</p>\n</blockquote>\n<pre><code>const myArray = [1, 2, 4];\n</code></pre>\n<blockquote>\n<p>If you display it just as myArray, you will get: My array is 124</p>\n</blockquote>\n<pre><code>&#x3C;p>My array is {myArray}&#x3C;/p>\n</code></pre>\n<blockquote>\n<p>If you want to display however: My array is [1,2,4] you need to use JSON.stringify</p>\n</blockquote>\n<pre><code>&#x3C;p>My array is {JSON.stringify(myArray)}&#x3C;/p>\n</code></pre>"}},{"node":{"id":"bf3eb494-3f89-59b9-af22-e499e6ecc112","excerpt":"Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a…","rawMarkdownBody":"\r\n![](https://i.imgur.com/uUsUaUJ.jpg \"Photo by Suraphat Nuea-on from Pexels\")\r\n\r\n> Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a better way how components can receive props. The way is called **context** and you can think of it as something like a global variable.\r\n\r\n> Imagine component structure:\r\nA -> D -> C\r\n\r\n> A is parent and only summons D component. Then D summons  C\r\n\r\n> A has prop for theme ( value: \"green\") which needs to be passed to C. But only to C. Other component like D doesnt care about this prop.\r\n\r\n> Top level component **PROVIDES** context and child component **CONSUMES** the context. \r\n\r\nProvider example: component A.  \r\n\r\nConsumer Example: componenet called D\r\n\r\n> A: provides theme\r\n\r\n> C: consumes theme\r\n\r\n> First we create the context itself:\r\n``` \r\n// src/ThemeContext.js\r\nimport React from 'react';\r\nconst ThemeContext = React.createContext(null);\r\nexport default ThemeContext;\r\n```\r\n> <code>React.createContext</code> will give us access to Provider and Consumer components.\r\n```\r\nThemeContext = React.createContext(null);\r\n```\r\n> Then we create component A which will be context provider\r\n```\r\n// src/ComponentA.js\r\nimport React from 'react';\r\nimport ThemeContext from './ThemeContext';\r\nconst A = () => (\r\n  <ThemeContext.Provider value=\"green\">\r\n    <D />\r\n  </ThemeContext.Provider>\r\n);\r\n```\r\n> We need to include new components called <code>ThemeContext.Provider</code>\r\n\r\n> A doesn't pass any props to D component. It makes value green available to all child components. A summons D component.\r\n\r\n> Let's look at C component. Now that A has made the value green available to all children, C can access that value:\r\n```\r\n// src/ComponentC.js\r\nimport React from 'react';\r\nimport ThemeContext from './ThemeContext';\r\nconst C = () => (\r\n  <ThemeContext.Consumer>\r\n    {value => (\r\n      <p style={{ color: value }}>\r\n        Hello World\r\n      </p>\r\n    )}\r\n  </ThemeContext.Consumer>\r\n);\r\n```\r\n\r\n> Complete example:\r\n``` \r\nimport React from \"react\";\r\nconst ColorContext = React.createContext(null);\r\nexport function SimpleContext(){\r\n    return (\r\n        <ColorContext.Provider value=\"green\">\r\n        <D />\r\n        </ColorContext.Provider>\r\n        )\r\n    }\r\nconst D = () => {\r\n    return (\r\n        <div>\r\n        <p>I am D component which is summoned by Parent component but I dont consume Context</p>\r\n        <C />\r\n        </div>\r\n    )\r\n}\r\nconst C = () => {\r\n    return (\r\n        <ColorContext.Consumer>\r\n        { value => (\r\n        <p style={{color: value}}>I am a C component summoned by D but I received beautiful green colour from my dear Parent</p>\r\n        )}\r\n        </ColorContext.Consumer>\r\n    )\r\n}\r\n```\r\n\r\n> With HOOKs we can make this even more elegant\r\n```\r\nimport React, { useContext } from \"react\";\r\nconst ColorContext = React.createContext(\r\n    { value: \"purple\"}\r\n);\r\nexport function SimpleContextUsewithHook(){\r\n    return (        \r\n        <D />        \r\n        )\r\n    }\r\nconst D = () => {\r\n    return (\r\n        <div>\r\n        <p>I am D component which is summoned by Parent component but I dont consume Context</p>\r\n        <C />\r\n        </div>\r\n    )\r\n}\r\nconst C = () => {\r\n    const context = useContext(ColorContext);\r\n    return (  \r\n        <p style={{color: context.value}}>I am a C component summoned by D but I received beautiful purple colour from my dear Parent</p> \r\n    )\r\n}\r\n```\r\n\r\n> Complex example with classes where we still use provider because we also want to be able to update the team\r\n```\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport './style.css';\r\nconst ProfileContext = React.createContext();\r\nclass ProfileProvider extends React.Component {\r\n  state = {\r\n    company: 'Progress',\r\n    companyImage: 'https://svgshare.com/i/9ir.svg',\r\n    url: 'https://www.telerik.com/kendo-react-ui/',\r\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\r\n    userName: 'Kendoka',\r\n    fullName: 'Kendō No Arikata',\r\n    team: 'KendoReact',\r\n    changeTeam: (team) => this.setState({\r\n      team: `Kendo${team}`\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <ProfileContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </ProfileContext.Provider>\r\n    )\r\n  }\r\n}\r\nconst App = () => (\r\n  <ProfileProvider>\r\n    <Profile />\r\n  </ProfileProvider>\r\n)\r\nconst Profile = () => (\r\n  <div className=\"profile\">\r\n    <ProfileContext.Consumer>\r\n      {context => <img src={context.companyImage} />}\r\n    </ProfileContext.Consumer>\r\n    <User />\r\n  </div>\r\n)\r\nconst User = () => (\r\n  <div className=\"user\">\r\n    <ProfileContext.Consumer>\r\n      {context =>\r\n        <React.Fragment>\r\n          <a href={context.url}>\r\n            <img src={context.userImage} width=\"138px\" />\r\n          </a>\r\n          <h1 className=\"profile-userName\">{context.userName}</h1>\r\n          <p className=\"profile-fullName\">({context.fullName})</p>\r\n          <Team />\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('Angular')}>Angular</button>\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('Vue')}>Vue</button>\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('React')}>React</button>\r\n        </React.Fragment>\r\n      }\r\n    </ProfileContext.Consumer>\r\n  </div>\r\n)\r\nconst Team = () => (\r\n  <ProfileContext.Consumer>\r\n    {context =>\r\n      <div className=\"team\">\r\n        <p className=\"profile-team\">{context.team}</p>\r\n      </div>\r\n    }\r\n  </ProfileContext.Consumer>\r\n)\r\nrender(<App />, document.getElementById('root'));\r\n``` \r\n\r\n> Same with hooks\r\n```\r\nimport React, { Component, useContext } from 'react';\r\nimport { render } from 'react-dom';\r\nimport './style.css';\r\nconst ProfileContext = React.createContext();\r\nclass ProfileProvider extends Component {\r\n  state = {\r\n    company: 'Progress',\r\n    companyImage: 'https://svgshare.com/i/9ir.svg',\r\n    url: 'https://www.telerik.com/kendo-react-ui/',\r\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\r\n    userName: 'Kendoken',\r\n    fullName: 'Kendoken No Michi',\r\n    team: 'KendoReact',\r\n    toggleTeam: (team) => this.setState({\r\n      team: `Kendo${team}`\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <ProfileContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </ProfileContext.Provider>\r\n    )\r\n  }\r\n}\r\nlet Profile = () => {\r\n  const context = useContext(ProfileContext);\r\n  return (\r\n    <div className=\"profile\">\r\n      <img src={context.companyImage} />\r\n      <User />\r\n    </div>\r\n  )\r\n}\r\nlet User = () => {\r\n  const context = useContext(ProfileContext);\r\n return (\r\n    <div className=\"user\">\r\n      <a href={context.url}>\r\n        <img src={context.userImage} width=\"138px\" />\r\n      </a>\r\n      <h1 className=\"profile-userName\">{context.userName}</h1>\r\n      <p className=\"profile-fullName\">({context.fullName})</p>\r\n      <Team />\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('Angular')}>Angular</button>\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('Vue')}>Vue</button>\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('React')}>React</button>\r\n    </div>\r\n  )\r\n}\r\nlet Team = () => {\r\n  const context = useContext(ProfileContext);\r\n  return (\r\n    <div className=\"team\">\r\n      <p className=\"profile-team\">{context.team}</p>\r\n    </div>\r\n  )\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <ProfileProvider>\r\n        <Profile />\r\n      </ProfileProvider>\r\n    );\r\n  }\r\n}\r\nrender(<App />, document.getElementById('root'));\r\n```\r\n> Resource: \r\n\r\nhttps://www.robinwieruch.de/react-context","frontmatter":{"date":"2019-10-16","title":"Context"},"fields":{"slug":"/Context/"},"timeToRead":5,"html":"<p><img src=\"https://i.imgur.com/uUsUaUJ.jpg\" title=\"Photo by Suraphat Nuea-on from Pexels\"></p>\n<blockquote>\n<p>Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a better way how components can receive props. The way is called <strong>context</strong> and you can think of it as something like a global variable.</p>\n</blockquote>\n<blockquote>\n<p>Imagine component structure:\nA -> D -> C</p>\n</blockquote>\n<blockquote>\n<p>A is parent and only summons D component. Then D summons  C</p>\n</blockquote>\n<blockquote>\n<p>A has prop for theme ( value: \"green\") which needs to be passed to C. But only to C. Other component like D doesnt care about this prop.</p>\n</blockquote>\n<blockquote>\n<p>Top level component <strong>PROVIDES</strong> context and child component <strong>CONSUMES</strong> the context. </p>\n</blockquote>\n<p>Provider example: component A.  </p>\n<p>Consumer Example: componenet called D</p>\n<blockquote>\n<p>A: provides theme</p>\n</blockquote>\n<blockquote>\n<p>C: consumes theme</p>\n</blockquote>\n<blockquote>\n<p>First we create the context itself:</p>\n</blockquote>\n<pre><code>// src/ThemeContext.js\nimport React from 'react';\nconst ThemeContext = React.createContext(null);\nexport default ThemeContext;\n</code></pre>\n<blockquote>\n<p><code>React.createContext</code> will give us access to Provider and Consumer components.</p>\n</blockquote>\n<pre><code>ThemeContext = React.createContext(null);\n</code></pre>\n<blockquote>\n<p>Then we create component A which will be context provider</p>\n</blockquote>\n<pre><code>// src/ComponentA.js\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nconst A = () => (\n  &#x3C;ThemeContext.Provider value=\"green\">\n    &#x3C;D />\n  &#x3C;/ThemeContext.Provider>\n);\n</code></pre>\n<blockquote>\n<p>We need to include new components called <code>ThemeContext.Provider</code></p>\n</blockquote>\n<blockquote>\n<p>A doesn't pass any props to D component. It makes value green available to all child components. A summons D component.</p>\n</blockquote>\n<blockquote>\n<p>Let's look at C component. Now that A has made the value green available to all children, C can access that value:</p>\n</blockquote>\n<pre><code>// src/ComponentC.js\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nconst C = () => (\n  &#x3C;ThemeContext.Consumer>\n    {value => (\n      &#x3C;p style={{ color: value }}>\n        Hello World\n      &#x3C;/p>\n    )}\n  &#x3C;/ThemeContext.Consumer>\n);\n</code></pre>\n<blockquote>\n<p>Complete example:</p>\n</blockquote>\n<pre><code>import React from \"react\";\nconst ColorContext = React.createContext(null);\nexport function SimpleContext(){\n    return (\n        &#x3C;ColorContext.Provider value=\"green\">\n        &#x3C;D />\n        &#x3C;/ColorContext.Provider>\n        )\n    }\nconst D = () => {\n    return (\n        &#x3C;div>\n        &#x3C;p>I am D component which is summoned by Parent component but I dont consume Context&#x3C;/p>\n        &#x3C;C />\n        &#x3C;/div>\n    )\n}\nconst C = () => {\n    return (\n        &#x3C;ColorContext.Consumer>\n        { value => (\n        &#x3C;p style={{color: value}}>I am a C component summoned by D but I received beautiful green colour from my dear Parent&#x3C;/p>\n        )}\n        &#x3C;/ColorContext.Consumer>\n    )\n}\n</code></pre>\n<blockquote>\n<p>With HOOKs we can make this even more elegant</p>\n</blockquote>\n<pre><code>import React, { useContext } from \"react\";\nconst ColorContext = React.createContext(\n    { value: \"purple\"}\n);\nexport function SimpleContextUsewithHook(){\n    return (        \n        &#x3C;D />        \n        )\n    }\nconst D = () => {\n    return (\n        &#x3C;div>\n        &#x3C;p>I am D component which is summoned by Parent component but I dont consume Context&#x3C;/p>\n        &#x3C;C />\n        &#x3C;/div>\n    )\n}\nconst C = () => {\n    const context = useContext(ColorContext);\n    return (  \n        &#x3C;p style={{color: context.value}}>I am a C component summoned by D but I received beautiful purple colour from my dear Parent&#x3C;/p> \n    )\n}\n</code></pre>\n<blockquote>\n<p>Complex example with classes where we still use provider because we also want to be able to update the team</p>\n</blockquote>\n<pre><code>import React from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\nconst ProfileContext = React.createContext();\nclass ProfileProvider extends React.Component {\n  state = {\n    company: 'Progress',\n    companyImage: 'https://svgshare.com/i/9ir.svg',\n    url: 'https://www.telerik.com/kendo-react-ui/',\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\n    userName: 'Kendoka',\n    fullName: 'Kendō No Arikata',\n    team: 'KendoReact',\n    changeTeam: (team) => this.setState({\n      team: `Kendo${team}`\n    })\n  }\n  render() {\n    return (\n      &#x3C;ProfileContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/ProfileContext.Provider>\n    )\n  }\n}\nconst App = () => (\n  &#x3C;ProfileProvider>\n    &#x3C;Profile />\n  &#x3C;/ProfileProvider>\n)\nconst Profile = () => (\n  &#x3C;div className=\"profile\">\n    &#x3C;ProfileContext.Consumer>\n      {context => &#x3C;img src={context.companyImage} />}\n    &#x3C;/ProfileContext.Consumer>\n    &#x3C;User />\n  &#x3C;/div>\n)\nconst User = () => (\n  &#x3C;div className=\"user\">\n    &#x3C;ProfileContext.Consumer>\n      {context =>\n        &#x3C;React.Fragment>\n          &#x3C;a href={context.url}>\n            &#x3C;img src={context.userImage} width=\"138px\" />\n          &#x3C;/a>\n          &#x3C;h1 className=\"profile-userName\">{context.userName}&#x3C;/h1>\n          &#x3C;p className=\"profile-fullName\">({context.fullName})&#x3C;/p>\n          &#x3C;Team />\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('Angular')}>Angular&#x3C;/button>\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('Vue')}>Vue&#x3C;/button>\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('React')}>React&#x3C;/button>\n        &#x3C;/React.Fragment>\n      }\n    &#x3C;/ProfileContext.Consumer>\n  &#x3C;/div>\n)\nconst Team = () => (\n  &#x3C;ProfileContext.Consumer>\n    {context =>\n      &#x3C;div className=\"team\">\n        &#x3C;p className=\"profile-team\">{context.team}&#x3C;/p>\n      &#x3C;/div>\n    }\n  &#x3C;/ProfileContext.Consumer>\n)\nrender(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<blockquote>\n<p>Same with hooks</p>\n</blockquote>\n<pre><code>import React, { Component, useContext } from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\nconst ProfileContext = React.createContext();\nclass ProfileProvider extends Component {\n  state = {\n    company: 'Progress',\n    companyImage: 'https://svgshare.com/i/9ir.svg',\n    url: 'https://www.telerik.com/kendo-react-ui/',\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\n    userName: 'Kendoken',\n    fullName: 'Kendoken No Michi',\n    team: 'KendoReact',\n    toggleTeam: (team) => this.setState({\n      team: `Kendo${team}`\n    })\n  }\n  render() {\n    return (\n      &#x3C;ProfileContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/ProfileContext.Provider>\n    )\n  }\n}\nlet Profile = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"profile\">\n      &#x3C;img src={context.companyImage} />\n      &#x3C;User />\n    &#x3C;/div>\n  )\n}\nlet User = () => {\n  const context = useContext(ProfileContext);\n return (\n    &#x3C;div className=\"user\">\n      &#x3C;a href={context.url}>\n        &#x3C;img src={context.userImage} width=\"138px\" />\n      &#x3C;/a>\n      &#x3C;h1 className=\"profile-userName\">{context.userName}&#x3C;/h1>\n      &#x3C;p className=\"profile-fullName\">({context.fullName})&#x3C;/p>\n      &#x3C;Team />\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('Angular')}>Angular&#x3C;/button>\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('Vue')}>Vue&#x3C;/button>\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('React')}>React&#x3C;/button>\n    &#x3C;/div>\n  )\n}\nlet Team = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"team\">\n      &#x3C;p className=\"profile-team\">{context.team}&#x3C;/p>\n    &#x3C;/div>\n  )\n}\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;ProfileProvider>\n        &#x3C;Profile />\n      &#x3C;/ProfileProvider>\n    );\n  }\n}\nrender(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<blockquote>\n<p>Resource: </p>\n</blockquote>\n<p><a href=\"https://www.robinwieruch.de/react-context\">https://www.robinwieruch.de/react-context</a></p>"}},{"node":{"id":"e07bd24b-17b4-5070-b764-52d6574904bb","excerpt":"Sometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the…","rawMarkdownBody":"\r\n![](https://i.imgur.com/zMFVLde.jpg \"Photo by Dids from Pexels\")\r\n\r\nSometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the local storage is:\r\n```\r\nwindow.localStorage.setItem('myInput', value)\r\n```\r\nExample code:\r\n```\r\nimport React from \"react\";\r\n\r\nexport class LocalStorage1 extends React.Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state={value: \"\"}\r\n      this.handleChange=this.handleChange.bind(this)\r\n  }\r\n  handleChange(e){\r\n    this.setState({value: e.target.value});\r\n    window.localStorage.setItem('myInput', e.target.value)\r\n  }\r\nrender () {\r\n    return (\r\n        <div>\r\n            <p>{this.state.value}</p>\r\n            <input type=\"text\" name=\"stats\" onChange={this.handleChange}></input>\r\n        </div>\r\n    )\r\n}\r\n}\r\n```\r\n> In order to retreeive item from the local storage we use code\r\n```\r\nwindow.localStorage.getItem('myInput')\r\n```","frontmatter":{"date":"2019-10-15","title":"Local Storage"},"fields":{"slug":"/Local_Storage/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/zMFVLde.jpg\" title=\"Photo by Dids from Pexels\"></p>\n<p>Sometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the local storage is:</p>\n<pre><code>window.localStorage.setItem('myInput', value)\n</code></pre>\n<p>Example code:</p>\n<pre><code>import React from \"react\";\n\nexport class LocalStorage1 extends React.Component {\n  constructor(props){\n      super(props);\n      this.state={value: \"\"}\n      this.handleChange=this.handleChange.bind(this)\n  }\n  handleChange(e){\n    this.setState({value: e.target.value});\n    window.localStorage.setItem('myInput', e.target.value)\n  }\nrender () {\n    return (\n        &#x3C;div>\n            &#x3C;p>{this.state.value}&#x3C;/p>\n            &#x3C;input type=\"text\" name=\"stats\" onChange={this.handleChange}>&#x3C;/input>\n        &#x3C;/div>\n    )\n}\n}\n</code></pre>\n<blockquote>\n<p>In order to retreeive item from the local storage we use code</p>\n</blockquote>\n<pre><code>window.localStorage.getItem('myInput')\n</code></pre>"}},{"node":{"id":"26313803-8624-5f31-b2b6-e6fc1a0abb2d","excerpt":"Template literal In JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be…","rawMarkdownBody":"\r\n![](https://i.imgur.com/wPtcgBh.jpg \"Photo by Elina Krima from Pexels\")\r\n\r\n**Template literal**\r\n\r\nIn JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be interpreted as a string\r\n\r\n```\r\n<p>You clicked {this.state.count} times</p>\r\n```\r\n\r\nWhen we are in JS land, we need to explicitly say that a variable should be interpreted as a string by adding $ in front of the curly bracket\r\n\r\n```\r\ncomponentDidMount() { document.title = `You clicked ${this.state.count} times`; }\r\n```","frontmatter":{"date":"2019-10-14","title":"Writing strings in JS and JSX"},"fields":{"slug":"/Writing_strings_in_JS_and_JSX/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/wPtcgBh.jpg\" title=\"Photo by Elina Krima from Pexels\"></p>\n<p><strong>Template literal</strong></p>\n<p>In JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be interpreted as a string</p>\n<pre><code>&#x3C;p>You clicked {this.state.count} times&#x3C;/p>\n</code></pre>\n<p>When we are in JS land, we need to explicitly say that a variable should be interpreted as a string by adding $ in front of the curly bracket</p>\n<pre><code>componentDidMount() { document.title = `You clicked ${this.state.count} times`; }\n</code></pre>"}},{"node":{"id":"22b7f20a-bd6f-5d49-a069-fab12398b603","excerpt":"We can,t comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this: It will not work. We need to…","rawMarkdownBody":"\r\n![](https://i.imgur.com/DnSKN89.jpg \"Photo by Cristian Dina from Pexels\")\r\n\r\nWe can,t comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this:\r\n``` \r\n/*<p>\r\n   <code>Welcome</code> to my page.\r\n  </p>*/\r\n\r\n ```\r\n\r\nIt will not work. We need to wrap the <code>```<p>```</code> tag in curly brackets.\r\n```\r\n{/*\r\n  <p>\r\n   <code>Welcome</code> to my page.\r\n  </p>*/}\r\n```\r\nNow we can finally comment out stuff :) Happy commenting! \r\nSPAM SPREE IS ON!","frontmatter":{"date":"2019-10-13","title":"Comment Me Out"},"fields":{"slug":"/Comment_Me_Out/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/DnSKN89.jpg\" title=\"Photo by Cristian Dina from Pexels\"></p>\n<p>We can,t comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this:</p>\n<pre><code>/*&#x3C;p>\n   &#x3C;code>Welcome&#x3C;/code> to my page.\n  &#x3C;/p>*/\n</code></pre>\n<p>It will not work. We need to wrap the <code><code>&#x3C;p></code></code> tag in curly brackets.</p>\n<pre><code>{/*\n  &#x3C;p>\n   &#x3C;code>Welcome&#x3C;/code> to my page.\n  &#x3C;/p>*/}\n</code></pre>\n<p>Now we can finally comment out stuff :) Happy commenting!\nSPAM SPREE IS ON!</p>"}},{"node":{"id":"9f8de051-0dab-5327-8d70-ae03ebdba193","excerpt":"At first let us take a look at what React Bootstrap is and how it differs from Bootstrap: React bootstrap provides components like Row, Col…","rawMarkdownBody":"\r\n![](https://i.imgur.com/YRAOVo0.jpg \"React Bootstrap Logo\")\r\n\r\nAt first let us take a look at what React Bootstrap is and how it differs from Bootstrap:\r\n\r\n**React bootstrap** provides components like Row, Col, etc. They are useful to create a grid layout.\r\n\r\n**Bootstrap** provides CSS for styling your data.\r\n\r\n> Open your command line\r\n\r\n> Go to your project directory and then install React Bootstrap (delivers COMPONENTS like Col, Row) and Bootstrap itself (CSS)\r\n```\r\nnpm install react-bootstrap bootstrap\r\n```\r\n\r\n> As React Bootstrap doesn't ship explicitly with CSS we need to import them to our index.js or app.js\r\n```\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n```","frontmatter":{"date":"2019-10-12","title":"React Bootstrap"},"fields":{"slug":"/ReactBootstrap/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/YRAOVo0.jpg\" title=\"React Bootstrap Logo\"></p>\n<p>At first let us take a look at what React Bootstrap is and how it differs from Bootstrap:</p>\n<p><strong>React bootstrap</strong> provides components like Row, Col, etc. They are useful to create a grid layout.</p>\n<p><strong>Bootstrap</strong> provides CSS for styling your data.</p>\n<blockquote>\n<p>Open your command line</p>\n</blockquote>\n<blockquote>\n<p>Go to your project directory and then install React Bootstrap (delivers COMPONENTS like Col, Row) and Bootstrap itself (CSS)</p>\n</blockquote>\n<pre><code>npm install react-bootstrap bootstrap\n</code></pre>\n<blockquote>\n<p>As React Bootstrap doesn't ship explicitly with CSS we need to import them to our index.js or app.js</p>\n</blockquote>\n<pre><code>import 'bootstrap/dist/css/bootstrap.min.css';\n</code></pre>"}},{"node":{"id":"33ae629a-775e-584d-9ae5-ac6e190d3c28","excerpt":"SELECTORS Selectors enable to select certain HTML element(s) and apply CSS styles to it. Selectors are how we can select certain HTML…","rawMarkdownBody":"\r\n![](https://i.imgur.com/0v7juum.jpg \"Photo by Format from Pexels\")\r\n\r\n**SELECTORS**\r\n\r\nSelectors enable to select certain HTML element(s) and apply CSS styles to it. Selectors are how we can select certain HTML elements. In CSS there are 3 ways how we can select elements\r\n\r\n**A) by tag name** - this scenario will style the teal colour to ALL <code>```<p>```</code> tags in the page\r\n\r\nHTML:\r\n```\r\n<p>Hello Universe</p>\r\n```\r\nCSS:\r\n```\r\np {\r\n color: tile;\r\n}\r\n```\r\n**B) by class name** - In case of class names we need to add period in front of the class name. They are meant to be re-used over many elements.\r\n\r\nHTML:\r\n```\r\n<p class=\"title\">Hello Universe</p>\r\n```\r\nCSS:\r\n```\r\n.title {\r\n font-family: Arial;\r\n}\r\n```\r\n\r\n<code>Please note:</code> in pure HTML we use word \"class\" to define for example a class called title which we can then style by .title in CSS. However, in REACT word \"class\" is reserved to create class components. Therefore, in order to create regular names of classes, we need to use word \"className\".\r\n\r\n**C) By id of an element** - ID is completely unique per site. We ned to add hashtag. An ID is meant to style only one element.\r\n\r\nHTML:\r\n```\r\n<p id=\"large-title\">Hello Universe</p>\r\n```\r\nCSS:\r\n```\r\n#large-title {\r\n font-size: 50px;\r\n}\r\n```\r\n> Precedence of selectors: General rule is that more specific selector will be applied compared to more generic selector. ID selector > Class selector > Tag selector. If we have example below, the red colour will be applied because .header (class selector) is more specific than tag selector. From the above 3 selectors, most specific selector is ID selector.\r\n\r\nHTML:\r\n```\r\n<h1 class=\"headere\">Hi</h1>\r\n```\r\nCSS:\r\n```\r\nh1 {\r\ncolor: blue;\r\n}\r\n\r\n.header {\r\ncolor: red;\r\n}\r\n```\r\n> There is only one way how to over-ride ID selector and namely by <code>!important</code> syntax. This can overrride any CSS styling and should be only used as a last resort (because this one is very hard to override). In the example below, the colour of header will be blue.\r\nHTML:\r\n```\r\n<h1 class=\"headere\">Hi</h1>\r\n```\r\nCSS:\r\n```\r\nh1 {\r\n  color: blue !important;\r\n}\r\n\r\n.header {\r\n  color: red;\r\n}\r\n```\r\n\r\n> Chaining selectors: we are able to chain more selectors and make them even more specific. In the example below, CSS style will be applied to <code>```<h1>```</code> tags but only those which have class name teal.\r\n```\r\nh1.teal {\r\ncolor: teal;\r\n}\r\n```\r\n> Chaining selectors can be also this way:\r\n```\r\n.main p {\r\nfont-family: Arial;\r\n}\r\n```\r\n> If we need to apply same style to multiple selectors, we can simply separate them by comma.\r\n\r\nInstead of:\r\n```\r\nh1 {\r\n  font-family: Georgia;\r\n}\r\n\r\n.menu {\r\n  font-family: Georgia;\r\n}\r\n```\r\nWe can write:\r\n```\r\nh1, .menu {\r\nfont-family: Georgia;\r\n}\r\n```\r\n\r\n**FONTS**\r\n\r\n> Font styles and families\r\n\r\nhttps://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html\r\n\r\nExamples:\r\n\r\n> Changing font:\r\n```\r\nh1 {\r\nfont-family: Garamond;\r\n}\r\n```\r\n> General rules about font-families:\r\n\r\nThe font specified in a stylesheet must be installed on a user’s computer in order for that font to display when a user visits the web page. The default typeface for all HTML elements is Times New Roman. It’s a good practice to limit the number of fonts used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision. When the name of a font consists of more than one word, it’s a best practice to enclose the font’s name in quotes. Example:\r\n```\r\nh1 {\r\n  font-family: \"Courier New\";\r\n}\r\n```\r\n> Changing font size:\r\n```\r\np {\r\nfont-size: 18px;\r\n}\r\n```\r\n> Changing bold (thickness or narrowness of the font) using font-weight (it can hold values bold or normal):\r\n```\r\np {\r\nfont-weight: bold;\r\n}\r\n```\r\n\r\n**ALIGNING TEXT**\r\n\r\n> Aligning text to right, left or center\r\n```\r\nh1 {\r\n  text-align: right;\r\n}\r\n```\r\n\r\n**COLORS**\r\n\r\n> Setting color of text can be done in two ways:\r\n\r\n**A) foreground colour**  for example colour of the text itself, property to do this is called <code>color</code>\r\n\r\n**B) background colour** property using <code>background-color</code>\r\n```\r\nh1 {\r\n  color: red;\r\n  background-color: blue;\r\n}\r\n```\r\n> Change opacity of an element. Accepts values from 0 (0% opacity) to 1 (100%  opacity)\r\n```\r\n.overlay {\r\n  opacity: 0.5;\r\n}\r\n```\r\n\r\n![](https://i.imgur.com/ZrJnm95.jpg \"Photo by Daniel Frese from Pexels\")\r\n\r\n**IMAGES**\r\n\r\n> Adding image as a background to an element. URL can be link to exterenal site or file path within the project folder\r\n```\r\n.main-banner {\r\n  background-image: url(\"https://www.example.com/image.jpg\");\r\n}\r\n\r\n.main-banner {\r\n  background-image: url(\"images/mountains.jpg\");\r\n}\r\n```\r\n\r\n**TEXT TRANSFORMATIONS**\r\n\r\n> Transforming whole text to uppercase\r\n```\r\nh1{\r\ntext-transform: uppercase;\r\n}\r\n```\r\n> Transforming first leter to uppercase\r\n```\r\nh3 {\r\ntext-transform: capitalize;\r\n}\r\n```\r\n> Text cursive. Note, this does not mean italics. Cursive only emulates hand-writing\r\n```\r\n.cursive {\r\nfont-family: cursive;\r\n}\r\n```\r\n\r\n**BOX MODEL**\r\n\r\n> The Box model includes the content area’s size (width and height) and the element’s padding, border, and margin. The properties include:\r\n\r\n**Width and height** — specifies the width and height of the content area.\r\n\r\n**Padding** — specifies the amount of space between the content area and the border.\r\n\r\n**Border** — specifies the thickness and style of the border surrounding the content area and padding.\r\n\r\n**Margin** — specifies the amount of space between the border and the outside edge of the element.\r\n\r\n\r\n\r\n**WIDTH AND HEIGHT**\r\n\r\n> To set specific width and height of an element:\r\n```\r\np {\r\n  height: 80px;\r\n  width: 240px;\r\n}\r\n```\r\n\r\n>Minimum width is minimum width the element will shrink to\r\n```\r\nmin-width: 50px;\r\n```\r\n\r\n>Maximum width is maximum width the element will expand to\r\n```\r\nmax-width: 50px;\r\n```\r\n\r\n>Minimum heigth is minimum heigth the element will shrink to\r\n```\r\nmin-heigth: 30px;\r\n```\r\n\r\n>Maximum heigth is maximum heigth the element will expand to\r\n```\r\n>max-heigth: 30px;\r\n```\r\n\r\n**BORDER**\r\n\r\n> A border is a line what surrounds an element, like a frame around a painting. Borders can be set with a specific width, style, and color.\r\n\r\n**width** — The thickness of the border. A border’s thickness can be set in pixels or with one of the following keywords: thin, medium, or thick.\r\n\r\n**style** — The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, and solid.\r\n\r\n**color** — The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.\r\n```\r\np {\r\n  border: 3px solid coral;\r\n}\r\n```\r\n> Border with rounded corners\r\n```\r\ndiv.container {\r\n  border: 3px solid rgb(22, 77, 100);\r\n  border-radius: 5px;\r\n}\r\n```\r\n> Perfect circle border - set the radius equal to height of the box or 100%\r\n```\r\ndiv.container {\r\n  height: 60px;\r\n  width: 60px;\r\n  border: 3px solid rgb(22, 77, 100);\r\n  border-radius: 100%;\r\n}\r\n```\r\nor equivalently:\r\n```\r\ndiv.container {\r\n  height: 60px;\r\n  width: 60px;\r\n  border: 3px solid rgb(22, 77, 100);\r\n  border-radius: 100%;\r\n}\r\n```\r\n\r\n> Border radius can be also defind by 4 values. The first one is the top left corner, the second value is top right corner, the third is the bottom right corner and finally the fourth value is the bottom left corner:\r\n```\r\nborder-radius: 10px 10px 10px 10px;\r\n```\r\n> We can decide to only set 3 or less of the values for creative shapes:\r\n\r\n**Teardrop shape**\r\n```\r\nborder-radius: 0px 10px 10px 10px;\r\n```\r\n\r\n**Palm leaf shape** where width of image is 100px\r\n```\r\nborder-radius: 100px 0px 100px 0px;\r\n```\r\n\r\n**Quarter circle** where width and height of the image is 100px:\r\n```\r\nborder-radius: 100px 0px 0px 0px;\r\n```\r\n\r\n**PADDING**\r\n\r\n>Padding: space between content and border. Can have properties:\r\n```\r\npadding-top: 30px;\r\npadding-right: 15px;\r\npadding-bottom: 30px;\r\npadding-left: 15px;\r\n```\r\n\r\n>Padding: In order to have same padding on all four sides use:\r\n```\r\npadding: 10px;\r\n```\r\n\r\n>Padding: In order to specify exactly how much padding there should be on each side of the content in a single declaration. The values go in clock-wise direction: padding on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.\r\n```\r\npadding: 10px 15px 20px 30px;\r\n```\r\n\r\n>Padding: If the top and bottom values for padding will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut. First value defines padding top and bottom to be 10px, padding left and right to be 15px.\r\n```\r\npadding: 10px 15px;\r\n```\r\n\r\n>Padding: Top and Bottom paddings (vertical paddings) **DO NOT** collapse!\r\n\r\n>Padding: Left and Right paddings (horizontal paddings) **DO NOT** collapse! And are always added together.\r\n\r\n\r\n**MARGIN**\r\n\r\n>Margin: Space outside of the border. It has following values:\r\n```\r\nmargin-top: 10px;\r\nmargin-right: 15px;\r\nmargin-bottom: 10px;\r\nmargin-left: 30px;\r\n```\r\n\r\n>Margin: If you want to have same margin on all four sides use:\r\n```\r\nmargin: 10px;\r\n```\r\n>Margin: In order to specify exactly how much margin there should be on each side of the content in a single declaration. The values go in clock-wise direction: margin on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.\r\n```\r\nmargin: 10px 15px 20px 30px;\r\n```\r\n\r\n>Margin: If the top and bottom values for margin will equal each other, and the left and right values for margin will also equal each other, you can use the following shortcut. First value defines margin top and bottom to be 10px, margin left and right to be 15px.\r\n```\r\nmargin: 10px 15px;\r\n```\r\n\r\n> Margin: Margin property also allows to position an element in the center of another containing element. There are 2 requirements in order to do it:\r\n\r\n**1/** top and bottom margin is defined and then followed by word auto, meaning right and left margin will be done automatically based on the width of the element and the container in which we want to center it\r\n\r\n**2/** width of the element needs to be defined and needs to be smaller than the width of the container where the element resides\r\n```\r\ndiv {\r\nwidth: 200px\r\nmargin: 0px auto;\r\n}\r\n```\r\n\r\n>Margin: Top and Bottom margin is also called: **Vertical margin**. Left and Right margin is called **Horizontal Margin**\r\n\r\n>Margin: Top and Bottom margin (vertical margins) **COLLAPSE**! The larger of the two vertical margins sets the distance between adjacent elements. For example: if top element has margin bottom of 20px and bottom element margin top of 30px, then the effective distance between these 2 elements is 30px.\r\n\r\n```\r\n#img-one {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n#img-two {\r\n  margin-top: 20px;\r\n}\r\n```\r\n\r\n>Margin: Left and Right margins (horizontal margins) **DO NOT** collapse! And are always added together. If left element has margin right of 10px and right element marin left of 10 px. Then the effective distance of the elements is 20px.\r\n\r\n```\r\n#img-one {\r\n  margin-right: 10px;\r\n}\r\n\r\n#img-two {\r\n  margin-left: 10px;\r\n}\r\n```\r\n\r\n**ROTATION**\r\n> The <code>t⁠r⁠a⁠n⁠s⁠f⁠o⁠r⁠m</code> property can rotate images and other elements. It accepts functions as values. To add a function that rotates an image, we type in <code>r⁠o⁠t⁠a⁠t⁠e⁠(⁠)</code>. We enter there number of degrees we want to rotate image.90deg means 90 degrees clickwise\r\n```\r\nimg {\r\ntransform: rotate(90deg);\r\n}\r\n```\r\n\r\n> To rotate an image anti-clockwise we add minus sign -45deg\r\n```\r\nimg {\r\ntransform: rotate(-45deg);\r\n}\r\n```\r\n\r\n>We can rotate other elements, not only images. For example buttons\r\n```\r\nbutton {\r\ntransform: rotate(-90deg);\r\n}\r\n```\r\n\r\n>References:\r\n\r\nAmazing CSS course for beginners:\r\n\r\nhttps://www.codecademy.com/courses/learn-css/\r\n\r\n\r\n![](https://i.imgur.com/Y25H36n.jpg \"Photo by Lisa Fotios from Pexels\")","frontmatter":{"date":"2019-10-11","title":"CSS"},"fields":{"slug":"/CSS/"},"timeToRead":10,"html":"<p><img src=\"https://i.imgur.com/0v7juum.jpg\" title=\"Photo by Format from Pexels\"></p>\n<p><strong>SELECTORS</strong></p>\n<p>Selectors enable to select certain HTML element(s) and apply CSS styles to it. Selectors are how we can select certain HTML elements. In CSS there are 3 ways how we can select elements</p>\n<p><strong>A) by tag name</strong> - this scenario will style the teal colour to ALL <code><code>&#x3C;p></code></code> tags in the page</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p>Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>p {\n color: tile;\n}\n</code></pre>\n<p><strong>B) by class name</strong> - In case of class names we need to add period in front of the class name. They are meant to be re-used over many elements.</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p class=\"title\">Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.title {\n font-family: Arial;\n}\n</code></pre>\n<p><code>Please note:</code> in pure HTML we use word \"class\" to define for example a class called title which we can then style by .title in CSS. However, in REACT word \"class\" is reserved to create class components. Therefore, in order to create regular names of classes, we need to use word \"className\".</p>\n<p><strong>C) By id of an element</strong> - ID is completely unique per site. We ned to add hashtag. An ID is meant to style only one element.</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p id=\"large-title\">Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>#large-title {\n font-size: 50px;\n}\n</code></pre>\n<blockquote>\n<p>Precedence of selectors: General rule is that more specific selector will be applied compared to more generic selector. ID selector > Class selector > Tag selector. If we have example below, the red colour will be applied because .header (class selector) is more specific than tag selector. From the above 3 selectors, most specific selector is ID selector.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;h1 class=\"headere\">Hi&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\ncolor: blue;\n}\n\n.header {\ncolor: red;\n}\n</code></pre>\n<blockquote>\n<p>There is only one way how to over-ride ID selector and namely by <code>!important</code> syntax. This can overrride any CSS styling and should be only used as a last resort (because this one is very hard to override). In the example below, the colour of header will be blue.\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;h1 class=\"headere\">Hi&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\n  color: blue !important;\n}\n\n.header {\n  color: red;\n}\n</code></pre>\n<blockquote>\n<p>Chaining selectors: we are able to chain more selectors and make them even more specific. In the example below, CSS style will be applied to <code><code>&#x3C;h1></code></code> tags but only those which have class name teal.</p>\n</blockquote>\n<pre><code>h1.teal {\ncolor: teal;\n}\n</code></pre>\n<blockquote>\n<p>Chaining selectors can be also this way:</p>\n</blockquote>\n<pre><code>.main p {\nfont-family: Arial;\n}\n</code></pre>\n<blockquote>\n<p>If we need to apply same style to multiple selectors, we can simply separate them by comma.</p>\n</blockquote>\n<p>Instead of:</p>\n<pre><code>h1 {\n  font-family: Georgia;\n}\n\n.menu {\n  font-family: Georgia;\n}\n</code></pre>\n<p>We can write:</p>\n<pre><code>h1, .menu {\nfont-family: Georgia;\n}\n</code></pre>\n<p><strong>FONTS</strong></p>\n<blockquote>\n<p>Font styles and families</p>\n</blockquote>\n<p><a href=\"https://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html\">https://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html</a></p>\n<p>Examples:</p>\n<blockquote>\n<p>Changing font:</p>\n</blockquote>\n<pre><code>h1 {\nfont-family: Garamond;\n}\n</code></pre>\n<blockquote>\n<p>General rules about font-families:</p>\n</blockquote>\n<p>The font specified in a stylesheet must be installed on a user’s computer in order for that font to display when a user visits the web page. The default typeface for all HTML elements is Times New Roman. It’s a good practice to limit the number of fonts used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision. When the name of a font consists of more than one word, it’s a best practice to enclose the font’s name in quotes. Example:</p>\n<pre><code>h1 {\n  font-family: \"Courier New\";\n}\n</code></pre>\n<blockquote>\n<p>Changing font size:</p>\n</blockquote>\n<pre><code>p {\nfont-size: 18px;\n}\n</code></pre>\n<blockquote>\n<p>Changing bold (thickness or narrowness of the font) using font-weight (it can hold values bold or normal):</p>\n</blockquote>\n<pre><code>p {\nfont-weight: bold;\n}\n</code></pre>\n<p><strong>ALIGNING TEXT</strong></p>\n<blockquote>\n<p>Aligning text to right, left or center</p>\n</blockquote>\n<pre><code>h1 {\n  text-align: right;\n}\n</code></pre>\n<p><strong>COLORS</strong></p>\n<blockquote>\n<p>Setting color of text can be done in two ways:</p>\n</blockquote>\n<p><strong>A) foreground colour</strong>  for example colour of the text itself, property to do this is called <code>color</code></p>\n<p><strong>B) background colour</strong> property using <code>background-color</code></p>\n<pre><code>h1 {\n  color: red;\n  background-color: blue;\n}\n</code></pre>\n<blockquote>\n<p>Change opacity of an element. Accepts values from 0 (0% opacity) to 1 (100%  opacity)</p>\n</blockquote>\n<pre><code>.overlay {\n  opacity: 0.5;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/ZrJnm95.jpg\" title=\"Photo by Daniel Frese from Pexels\"></p>\n<p><strong>IMAGES</strong></p>\n<blockquote>\n<p>Adding image as a background to an element. URL can be link to exterenal site or file path within the project folder</p>\n</blockquote>\n<pre><code>.main-banner {\n  background-image: url(\"https://www.example.com/image.jpg\");\n}\n\n.main-banner {\n  background-image: url(\"images/mountains.jpg\");\n}\n</code></pre>\n<p><strong>TEXT TRANSFORMATIONS</strong></p>\n<blockquote>\n<p>Transforming whole text to uppercase</p>\n</blockquote>\n<pre><code>h1{\ntext-transform: uppercase;\n}\n</code></pre>\n<blockquote>\n<p>Transforming first leter to uppercase</p>\n</blockquote>\n<pre><code>h3 {\ntext-transform: capitalize;\n}\n</code></pre>\n<blockquote>\n<p>Text cursive. Note, this does not mean italics. Cursive only emulates hand-writing</p>\n</blockquote>\n<pre><code>.cursive {\nfont-family: cursive;\n}\n</code></pre>\n<p><strong>BOX MODEL</strong></p>\n<blockquote>\n<p>The Box model includes the content area’s size (width and height) and the element’s padding, border, and margin. The properties include:</p>\n</blockquote>\n<p><strong>Width and height</strong> — specifies the width and height of the content area.</p>\n<p><strong>Padding</strong> — specifies the amount of space between the content area and the border.</p>\n<p><strong>Border</strong> — specifies the thickness and style of the border surrounding the content area and padding.</p>\n<p><strong>Margin</strong> — specifies the amount of space between the border and the outside edge of the element.</p>\n<p><strong>WIDTH AND HEIGHT</strong></p>\n<blockquote>\n<p>To set specific width and height of an element:</p>\n</blockquote>\n<pre><code>p {\n  height: 80px;\n  width: 240px;\n}\n</code></pre>\n<blockquote>\n<p>Minimum width is minimum width the element will shrink to</p>\n</blockquote>\n<pre><code>min-width: 50px;\n</code></pre>\n<blockquote>\n<p>Maximum width is maximum width the element will expand to</p>\n</blockquote>\n<pre><code>max-width: 50px;\n</code></pre>\n<blockquote>\n<p>Minimum heigth is minimum heigth the element will shrink to</p>\n</blockquote>\n<pre><code>min-heigth: 30px;\n</code></pre>\n<blockquote>\n<p>Maximum heigth is maximum heigth the element will expand to</p>\n</blockquote>\n<pre><code>>max-heigth: 30px;\n</code></pre>\n<p><strong>BORDER</strong></p>\n<blockquote>\n<p>A border is a line what surrounds an element, like a frame around a painting. Borders can be set with a specific width, style, and color.</p>\n</blockquote>\n<p><strong>width</strong> — The thickness of the border. A border’s thickness can be set in pixels or with one of the following keywords: thin, medium, or thick.</p>\n<p><strong>style</strong> — The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, and solid.</p>\n<p><strong>color</strong> — The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.</p>\n<pre><code>p {\n  border: 3px solid coral;\n}\n</code></pre>\n<blockquote>\n<p>Border with rounded corners</p>\n</blockquote>\n<pre><code>div.container {\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 5px;\n}\n</code></pre>\n<blockquote>\n<p>Perfect circle border - set the radius equal to height of the box or 100%</p>\n</blockquote>\n<pre><code>div.container {\n  height: 60px;\n  width: 60px;\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 100%;\n}\n</code></pre>\n<p>or equivalently:</p>\n<pre><code>div.container {\n  height: 60px;\n  width: 60px;\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 100%;\n}\n</code></pre>\n<blockquote>\n<p>Border radius can be also defind by 4 values. The first one is the top left corner, the second value is top right corner, the third is the bottom right corner and finally the fourth value is the bottom left corner:</p>\n</blockquote>\n<pre><code>border-radius: 10px 10px 10px 10px;\n</code></pre>\n<blockquote>\n<p>We can decide to only set 3 or less of the values for creative shapes:</p>\n</blockquote>\n<p><strong>Teardrop shape</strong></p>\n<pre><code>border-radius: 0px 10px 10px 10px;\n</code></pre>\n<p><strong>Palm leaf shape</strong> where width of image is 100px</p>\n<pre><code>border-radius: 100px 0px 100px 0px;\n</code></pre>\n<p><strong>Quarter circle</strong> where width and height of the image is 100px:</p>\n<pre><code>border-radius: 100px 0px 0px 0px;\n</code></pre>\n<p><strong>PADDING</strong></p>\n<blockquote>\n<p>Padding: space between content and border. Can have properties:</p>\n</blockquote>\n<pre><code>padding-top: 30px;\npadding-right: 15px;\npadding-bottom: 30px;\npadding-left: 15px;\n</code></pre>\n<blockquote>\n<p>Padding: In order to have same padding on all four sides use:</p>\n</blockquote>\n<pre><code>padding: 10px;\n</code></pre>\n<blockquote>\n<p>Padding: In order to specify exactly how much padding there should be on each side of the content in a single declaration. The values go in clock-wise direction: padding on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.</p>\n</blockquote>\n<pre><code>padding: 10px 15px 20px 30px;\n</code></pre>\n<blockquote>\n<p>Padding: If the top and bottom values for padding will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut. First value defines padding top and bottom to be 10px, padding left and right to be 15px.</p>\n</blockquote>\n<pre><code>padding: 10px 15px;\n</code></pre>\n<blockquote>\n<p>Padding: Top and Bottom paddings (vertical paddings) <strong>DO NOT</strong> collapse!</p>\n</blockquote>\n<blockquote>\n<p>Padding: Left and Right paddings (horizontal paddings) <strong>DO NOT</strong> collapse! And are always added together.</p>\n</blockquote>\n<p><strong>MARGIN</strong></p>\n<blockquote>\n<p>Margin: Space outside of the border. It has following values:</p>\n</blockquote>\n<pre><code>margin-top: 10px;\nmargin-right: 15px;\nmargin-bottom: 10px;\nmargin-left: 30px;\n</code></pre>\n<blockquote>\n<p>Margin: If you want to have same margin on all four sides use:</p>\n</blockquote>\n<pre><code>margin: 10px;\n</code></pre>\n<blockquote>\n<p>Margin: In order to specify exactly how much margin there should be on each side of the content in a single declaration. The values go in clock-wise direction: margin on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.</p>\n</blockquote>\n<pre><code>margin: 10px 15px 20px 30px;\n</code></pre>\n<blockquote>\n<p>Margin: If the top and bottom values for margin will equal each other, and the left and right values for margin will also equal each other, you can use the following shortcut. First value defines margin top and bottom to be 10px, margin left and right to be 15px.</p>\n</blockquote>\n<pre><code>margin: 10px 15px;\n</code></pre>\n<blockquote>\n<p>Margin: Margin property also allows to position an element in the center of another containing element. There are 2 requirements in order to do it:</p>\n</blockquote>\n<p><strong>1/</strong> top and bottom margin is defined and then followed by word auto, meaning right and left margin will be done automatically based on the width of the element and the container in which we want to center it</p>\n<p><strong>2/</strong> width of the element needs to be defined and needs to be smaller than the width of the container where the element resides</p>\n<pre><code>div {\nwidth: 200px\nmargin: 0px auto;\n}\n</code></pre>\n<blockquote>\n<p>Margin: Top and Bottom margin is also called: <strong>Vertical margin</strong>. Left and Right margin is called <strong>Horizontal Margin</strong></p>\n</blockquote>\n<blockquote>\n<p>Margin: Top and Bottom margin (vertical margins) <strong>COLLAPSE</strong>! The larger of the two vertical margins sets the distance between adjacent elements. For example: if top element has margin bottom of 20px and bottom element margin top of 30px, then the effective distance between these 2 elements is 30px.</p>\n</blockquote>\n<pre><code>#img-one {\n  margin-bottom: 30px;\n}\n\n#img-two {\n  margin-top: 20px;\n}\n</code></pre>\n<blockquote>\n<p>Margin: Left and Right margins (horizontal margins) <strong>DO NOT</strong> collapse! And are always added together. If left element has margin right of 10px and right element marin left of 10 px. Then the effective distance of the elements is 20px.</p>\n</blockquote>\n<pre><code>#img-one {\n  margin-right: 10px;\n}\n\n#img-two {\n  margin-left: 10px;\n}\n</code></pre>\n<p><strong>ROTATION</strong></p>\n<blockquote>\n<p>The <code>t⁠r⁠a⁠n⁠s⁠f⁠o⁠r⁠m</code> property can rotate images and other elements. It accepts functions as values. To add a function that rotates an image, we type in <code>r⁠o⁠t⁠a⁠t⁠e⁠(⁠)</code>. We enter there number of degrees we want to rotate image.90deg means 90 degrees clickwise</p>\n</blockquote>\n<pre><code>img {\ntransform: rotate(90deg);\n}\n</code></pre>\n<blockquote>\n<p>To rotate an image anti-clockwise we add minus sign -45deg</p>\n</blockquote>\n<pre><code>img {\ntransform: rotate(-45deg);\n}\n</code></pre>\n<blockquote>\n<p>We can rotate other elements, not only images. For example buttons</p>\n</blockquote>\n<pre><code>button {\ntransform: rotate(-90deg);\n}\n</code></pre>\n<blockquote>\n<p>References:</p>\n</blockquote>\n<p>Amazing CSS course for beginners:</p>\n<p><a href=\"https://www.codecademy.com/courses/learn-css/\">https://www.codecademy.com/courses/learn-css/</a></p>\n<p><img src=\"https://i.imgur.com/Y25H36n.jpg\" title=\"Photo by Lisa Fotios from Pexels\"></p>"}},{"node":{"id":"04315871-e4f4-53ce-9d7e-9c0e2f7cc974","excerpt":"We can query images, or content of the website (text) from files in our project folder. Firstly, open your command line in Ubuntu and…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Ms2Wa14.jpg \"Photo by Logan Kirschner from Pexels\")\r\n\r\n> We can query images, or content of the website (text) from files in our project folder.\r\n\r\n> Firstly, open your command line in Ubuntu and install the Gatsby package called source **filesystem** plugin. The filesystem source plugin lets you query data**ABOUT** files (note: but it does NOT allow you to query data inside files, for that we have another plugin called transform)\r\n```\r\nnpm install --save gatsby-source-filesystem\r\n```\r\n> Secondly open the <code>gatsby-config.js</code> and add this plugin there:\r\n```\r\nplugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n```\r\n> Save and restart Gatsby development environment\r\n```\r\ngatsby develop\r\n```\r\n> Two new elements will be added there: files and allFile\r\n```\r\nhttp://localhost:8000/___graphql\r\n```\r\n> Select some items for our query. For example <code>base</code> is the name of the file, <code>prettySize</code> is the size of the file, <code>relativeDirectory</code> is a folder in which file resides, etc\r\n\r\n> Let's use this data and print it to console:\r\n```\r\nimport React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nexport default ({ data }) => {\r\n  console.log(data)\r\n  return (\r\n    <Layout>\r\n      <div>Hello world</div>\r\n    </Layout>\r\n  )\r\n}\r\nexport const query = graphql`\r\n  query {\r\n    allFile {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          prettySize\r\n          extension\r\n          birthTime(fromNow: true)\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n```\r\n\r\n> Let's make our data beautiful in a table:\r\n```\r\nimport React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nexport default ({ data }) => {\r\n  console.log(data)\r\n  return (\r\n    <Layout>\r\n      <div>\r\n        <h1>My Site's Files</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>relativePath</th>\r\n              <th>prettySize</th>\r\n              <th>extension</th>\r\n              <th>birthTime</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.allFile.edges.map(({ node }, index) => (\r\n              <tr key={index}>\r\n                <td>{node.relativePath}</td>\r\n                <td>{node.prettySize}</td>\r\n                <td>{node.extension}</td>\r\n                <td>{node.birthTime}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\nexport const query = graphql`\r\n  query {\r\n    allFile {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          prettySize\r\n          extension\r\n          birthTime(fromNow: true)\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n```\r\n> ```<table>``` tag creates a table\r\n\r\n\r\n> ```<thread>``` tag is used to group header content in an HTML table. The ```<thead>``` element is used in conjunction with the ```<tbody>``` and ```<tfoot>``` elements to specify each part of a table (header, body, footer). Browsers can use these elements to enable scrolling of the table body independently of the header and footer. Also, when printing a large table that spans multiple pages, these elements can enable the table header and footer to be printed at the top and bottom of each page. The ```<thead>``` tag must be used in the following context: As a child of a ```<table>``` element, after any ```<caption>```, and ```<colgroup>``` elements, and before any ```<tbody>```, ```<tfoot>```, and ```<tr>``` elements.\r\n\r\n> ```<tr>``` tag means table row\r\n\r\n> ```<th>``` tag means one column in a table header\r\n\r\n> ```<td>``` tag means one column in the table data\r\n\r\n> for each tr we will take all available data into columns\r\n\r\n> How does this part of the code work?\r\n```\r\n{data.allFile.edges.map(({ node }, index) => (\r\n              <tr key={index}>\r\n                <td>{node.base}</td>\r\n                <td>{node.prettySize}</td>\r\n                <td>{node.relativeDirectory}</td>\r\n                <td>{node.name}</td>\r\n              </tr>\r\n            ))}\r\n```\r\n> <code>Map</code> is a method which can be called on an array. When we query data, you can see on the right column on GraphiQL how our data will look like: For example:\r\n```\r\n{\r\n  \"data\": {\r\n    \"allFile\": {\r\n      \"edges\": [\r\n        {\r\n          \"node\": {\r\n            \"id\": \"3d02d57a-a1ff-58a6-a75b-41d2d1f5de2f\",\r\n            \"base\": \"container.js\",\r\n            \"prettySize\": \"177 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"container\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"bfd68830-b23b-5750-9e97-fb73e577ebc8\",\r\n            \"base\": \"header.js\",\r\n            \"prettySize\": \"141 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"header\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"5110e7f0-f000-5a81-b65f-2d655e4937b4\",\r\n            \"base\": \"container.module.css\",\r\n            \"prettySize\": \"55 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"container.module\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"09ae19a0-accc-5c2a-9caa-ea806602b54f\",\r\n            \"base\": \"layout.js\",\r\n            \"prettySize\": \"1.25 kB\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"layout\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"e0c2ac65-ada6-5773-a74d-6129e1de7f7b\",\r\n            \"base\": \"about-css-modules.js\",\r\n            \"prettySize\": \"1.03 kB\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about-css-modules\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"95b910e6-a707-512e-b6cd-09e0f60fd8cb\",\r\n            \"base\": \"about-css-modules.module.css\",\r\n            \"prettySize\": \"334 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about-css-modules.module\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"d0e66873-11b2-5ecf-9971-c397b39412a8\",\r\n            \"base\": \"about.js\",\r\n            \"prettySize\": \"484 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"391e78c8-e96e-5412-a4c4-02d3074c2bc1\",\r\n            \"base\": \"contact.js\",\r\n            \"prettySize\": \"232 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"contact\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"689eea2c-7d70-53e6-8078-26e28cd337ce\",\r\n            \"base\": \"index.js\",\r\n            \"prettySize\": \"358 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"index\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"318cd83a-3107-5cbb-b65e-b2eb0fb3a428\",\r\n            \"base\": \"global.css\",\r\n            \"prettySize\": \"49 B\",\r\n            \"relativeDirectory\": \"styles\",\r\n            \"name\": \"global\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"34912156-9592-5c52-aac4-7e851d124baa\",\r\n            \"base\": \"typography.js\",\r\n            \"prettySize\": \"226 B\",\r\n            \"relativeDirectory\": \"utils\",\r\n            \"name\": \"typography\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\nNotice how <code>data.allFile.edges</code> returns an ARRAY of OBJECTS! Which means we can use array method called map on it. Map works in a way that it iterated through every single element of the array and performs a certain function in it. It doesn't change original array, but creates a new array on which the function is performed.  One small example is here:\r\n```\r\nvar array1 = [1, 4, 9, 16];\r\n// pass a function to map\r\nconst map1 = array1.map(x => x * 2);\r\n\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n```\r\n> x is an element of the array which we currently iterate through\r\n\r\n> Documentation of Map is here: \r\n\r\n```\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\r\n```\r\n> Notice how the syntax looks:\r\n```\r\nvar new_array = arr.map(function callback(currentValue[, index[, array]]) {\r\n    // Return element for new_array\r\n}[, thisArg])\r\n```\r\n> This means that when using <code>.map</code> method we can use the current object we are on, but also its index! Which mean index 0,1,2, etc\r\n\r\n> In our <code>.map</code> method we have a function which takes 2 arguments:\r\n```\r\n({ node }, index)\r\n```\r\n<code>{ node }</code> is an actual object which resides under <code>data.allFile.edges</code>\r\n\r\nIt should actually be called node, otherwise we will have an error.\r\n\r\nIndex is the index of the element in our array on which we are currently itterating.\r\n\r\n> For each element in our array, we will create a ```<tr>``` tag which will have a unique property key which will be equal to the index of that element in the array\r\n```<tr key={index}>\r\n...\r\n</tr> \r\n```\r\n> Then this table row (tr) will create 4 columns ```<td>``` Each of ```<td>``` tags will access the element of array, which is in fact an object, where we retrieve values for example: <code>node.base</code>\r\n\r\n\r\n> In React each array element over which we will iterate needs a unique key property. \r\n\r\n> Each time you iterate over an array you have to set the key prop to each of the resulting DOM element as React needs it to optimize the re-rendering.\r\n\r\n> React for example will detect duplicates and only renders the first node with this key. Without <code>key={index}</code> there will be an error in console that each child in the list should have a unique key property. More reading:\r\n```\r\nhttps://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js\r\nhttps://stackoverflow.com/questions/37651660/react-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop?rq=1\r\n```\r\n> The filesystem source plugin lets you query data ABOUT files but what if you want to query data INSIDE files? To make this possible, Gatsby supports transformer plugins which take raw content from source plugins and transform it into something more usable. Example: markdown files <code>.md</code>\r\n\r\n> Create a new markdow file under your pages folder\r\n```\r\nblog_post.md\r\n```\r\n\r\n> Look at the GrphiQL and refresh the query, you will see the new <code>.md</code> file in there\r\n\r\n\r\n> First install transformer plugin\r\n```\r\nnpm install --save gatsby-transformer-remark\r\n```\r\n\r\n> Add plugin to Gatsby config\r\n```\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: `Pandas Eating Lots`,\r\n  },\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n    `gatsby-transformer-remark`,\r\n    `gatsby-plugin-emotion`,\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n> Restart your development environment with\r\n```\r\ngatsby develop\r\n```\r\n> In GraphiQL we will see the new item <code>allMarkdownRemark</code>","frontmatter":{"date":"2019-10-10","title":"Querying data from project files"},"fields":{"slug":"/Querying_data_from_project_files/"},"timeToRead":7,"html":"<p><img src=\"https://i.imgur.com/Ms2Wa14.jpg\" title=\"Photo by Logan Kirschner from Pexels\"></p>\n<blockquote>\n<p>We can query images, or content of the website (text) from files in our project folder.</p>\n</blockquote>\n<blockquote>\n<p>Firstly, open your command line in Ubuntu and install the Gatsby package called source <strong>filesystem</strong> plugin. The filesystem source plugin lets you query data<strong>ABOUT</strong> files (note: but it does NOT allow you to query data inside files, for that we have another plugin called transform)</p>\n</blockquote>\n<pre><code>npm install --save gatsby-source-filesystem\n</code></pre>\n<blockquote>\n<p>Secondly open the <code>gatsby-config.js</code> and add this plugin there:</p>\n</blockquote>\n<pre><code>plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n</code></pre>\n<blockquote>\n<p>Save and restart Gatsby development environment</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>Two new elements will be added there: files and allFile</p>\n</blockquote>\n<pre><code>http://localhost:8000/___graphql\n</code></pre>\n<blockquote>\n<p>Select some items for our query. For example <code>base</code> is the name of the file, <code>prettySize</code> is the size of the file, <code>relativeDirectory</code> is a folder in which file resides, etc</p>\n</blockquote>\n<blockquote>\n<p>Let's use this data and print it to console:</p>\n</blockquote>\n<pre><code>import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nexport default ({ data }) => {\n  console.log(data)\n  return (\n    &#x3C;Layout>\n      &#x3C;div>Hello world&#x3C;/div>\n    &#x3C;/Layout>\n  )\n}\nexport const query = graphql`\n  query {\n    allFile {\n      edges {\n        node {\n          relativePath\n          prettySize\n          extension\n          birthTime(fromNow: true)\n        }\n      }\n    }\n  }\n`\n</code></pre>\n<blockquote>\n<p>Let's make our data beautiful in a table:</p>\n</blockquote>\n<pre><code>import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nexport default ({ data }) => {\n  console.log(data)\n  return (\n    &#x3C;Layout>\n      &#x3C;div>\n        &#x3C;h1>My Site's Files&#x3C;/h1>\n        &#x3C;table>\n          &#x3C;thead>\n            &#x3C;tr>\n              &#x3C;th>relativePath&#x3C;/th>\n              &#x3C;th>prettySize&#x3C;/th>\n              &#x3C;th>extension&#x3C;/th>\n              &#x3C;th>birthTime&#x3C;/th>\n            &#x3C;/tr>\n          &#x3C;/thead>\n          &#x3C;tbody>\n            {data.allFile.edges.map(({ node }, index) => (\n              &#x3C;tr key={index}>\n                &#x3C;td>{node.relativePath}&#x3C;/td>\n                &#x3C;td>{node.prettySize}&#x3C;/td>\n                &#x3C;td>{node.extension}&#x3C;/td>\n                &#x3C;td>{node.birthTime}&#x3C;/td>\n              &#x3C;/tr>\n            ))}\n          &#x3C;/tbody>\n        &#x3C;/table>\n      &#x3C;/div>\n    &#x3C;/Layout>\n  )\n}\nexport const query = graphql`\n  query {\n    allFile {\n      edges {\n        node {\n          relativePath\n          prettySize\n          extension\n          birthTime(fromNow: true)\n        }\n      }\n    }\n  }\n`\n</code></pre>\n<blockquote>\n<p><code>&#x3C;table></code> tag creates a table</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;thread></code> tag is used to group header content in an HTML table. The <code>&#x3C;thead></code> element is used in conjunction with the <code>&#x3C;tbody></code> and <code>&#x3C;tfoot></code> elements to specify each part of a table (header, body, footer). Browsers can use these elements to enable scrolling of the table body independently of the header and footer. Also, when printing a large table that spans multiple pages, these elements can enable the table header and footer to be printed at the top and bottom of each page. The <code>&#x3C;thead></code> tag must be used in the following context: As a child of a <code>&#x3C;table></code> element, after any <code>&#x3C;caption></code>, and <code>&#x3C;colgroup></code> elements, and before any <code>&#x3C;tbody></code>, <code>&#x3C;tfoot></code>, and <code>&#x3C;tr></code> elements.</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;tr></code> tag means table row</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;th></code> tag means one column in a table header</p>\n</blockquote>\n<blockquote>\n<p><code>&#x3C;td></code> tag means one column in the table data</p>\n</blockquote>\n<blockquote>\n<p>for each tr we will take all available data into columns</p>\n</blockquote>\n<blockquote>\n<p>How does this part of the code work?</p>\n</blockquote>\n<pre><code>{data.allFile.edges.map(({ node }, index) => (\n              &#x3C;tr key={index}>\n                &#x3C;td>{node.base}&#x3C;/td>\n                &#x3C;td>{node.prettySize}&#x3C;/td>\n                &#x3C;td>{node.relativeDirectory}&#x3C;/td>\n                &#x3C;td>{node.name}&#x3C;/td>\n              &#x3C;/tr>\n            ))}\n</code></pre>\n<blockquote>\n<p><code>Map</code> is a method which can be called on an array. When we query data, you can see on the right column on GraphiQL how our data will look like: For example:</p>\n</blockquote>\n<pre><code>{\n  \"data\": {\n    \"allFile\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"3d02d57a-a1ff-58a6-a75b-41d2d1f5de2f\",\n            \"base\": \"container.js\",\n            \"prettySize\": \"177 B\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"container\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"bfd68830-b23b-5750-9e97-fb73e577ebc8\",\n            \"base\": \"header.js\",\n            \"prettySize\": \"141 B\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"header\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"5110e7f0-f000-5a81-b65f-2d655e4937b4\",\n            \"base\": \"container.module.css\",\n            \"prettySize\": \"55 B\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"container.module\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"09ae19a0-accc-5c2a-9caa-ea806602b54f\",\n            \"base\": \"layout.js\",\n            \"prettySize\": \"1.25 kB\",\n            \"relativeDirectory\": \"components\",\n            \"name\": \"layout\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"e0c2ac65-ada6-5773-a74d-6129e1de7f7b\",\n            \"base\": \"about-css-modules.js\",\n            \"prettySize\": \"1.03 kB\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"about-css-modules\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"95b910e6-a707-512e-b6cd-09e0f60fd8cb\",\n            \"base\": \"about-css-modules.module.css\",\n            \"prettySize\": \"334 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"about-css-modules.module\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"d0e66873-11b2-5ecf-9971-c397b39412a8\",\n            \"base\": \"about.js\",\n            \"prettySize\": \"484 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"about\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"391e78c8-e96e-5412-a4c4-02d3074c2bc1\",\n            \"base\": \"contact.js\",\n            \"prettySize\": \"232 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"contact\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"689eea2c-7d70-53e6-8078-26e28cd337ce\",\n            \"base\": \"index.js\",\n            \"prettySize\": \"358 B\",\n            \"relativeDirectory\": \"pages\",\n            \"name\": \"index\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"318cd83a-3107-5cbb-b65e-b2eb0fb3a428\",\n            \"base\": \"global.css\",\n            \"prettySize\": \"49 B\",\n            \"relativeDirectory\": \"styles\",\n            \"name\": \"global\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"34912156-9592-5c52-aac4-7e851d124baa\",\n            \"base\": \"typography.js\",\n            \"prettySize\": \"226 B\",\n            \"relativeDirectory\": \"utils\",\n            \"name\": \"typography\"\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<p>Notice how <code>data.allFile.edges</code> returns an ARRAY of OBJECTS! Which means we can use array method called map on it. Map works in a way that it iterated through every single element of the array and performs a certain function in it. It doesn't change original array, but creates a new array on which the function is performed.  One small example is here:</p>\n<pre><code>var array1 = [1, 4, 9, 16];\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n<blockquote>\n<p>x is an element of the array which we currently iterate through</p>\n</blockquote>\n<blockquote>\n<p>Documentation of Map is here: </p>\n</blockquote>\n<pre><code>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n</code></pre>\n<blockquote>\n<p>Notice how the syntax looks:</p>\n</blockquote>\n<pre><code>var new_array = arr.map(function callback(currentValue[, index[, array]]) {\n    // Return element for new_array\n}[, thisArg])\n</code></pre>\n<blockquote>\n<p>This means that when using <code>.map</code> method we can use the current object we are on, but also its index! Which mean index 0,1,2, etc</p>\n</blockquote>\n<blockquote>\n<p>In our <code>.map</code> method we have a function which takes 2 arguments:</p>\n</blockquote>\n<pre><code>({ node }, index)\n</code></pre>\n<p><code>{ node }</code> is an actual object which resides under <code>data.allFile.edges</code></p>\n<p>It should actually be called node, otherwise we will have an error.</p>\n<p>Index is the index of the element in our array on which we are currently itterating.</p>\n<blockquote>\n<p>For each element in our array, we will create a <code>&#x3C;tr></code> tag which will have a unique property key which will be equal to the index of that element in the array</p>\n</blockquote>\n<pre><code class=\"language-<tr\" data-meta=\"key={index}>\">...\n&#x3C;/tr> \n</code></pre>\n<blockquote>\n<p>Then this table row (tr) will create 4 columns <code>&#x3C;td></code> Each of <code>&#x3C;td></code> tags will access the element of array, which is in fact an object, where we retrieve values for example: <code>node.base</code></p>\n</blockquote>\n<blockquote>\n<p>In React each array element over which we will iterate needs a unique key property. </p>\n</blockquote>\n<blockquote>\n<p>Each time you iterate over an array you have to set the key prop to each of the resulting DOM element as React needs it to optimize the re-rendering.</p>\n</blockquote>\n<blockquote>\n<p>React for example will detect duplicates and only renders the first node with this key. Without <code>key={index}</code> there will be an error in console that each child in the list should have a unique key property. More reading:</p>\n</blockquote>\n<pre><code>https://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js\nhttps://stackoverflow.com/questions/37651660/react-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop?rq=1\n</code></pre>\n<blockquote>\n<p>The filesystem source plugin lets you query data ABOUT files but what if you want to query data INSIDE files? To make this possible, Gatsby supports transformer plugins which take raw content from source plugins and transform it into something more usable. Example: markdown files <code>.md</code></p>\n</blockquote>\n<blockquote>\n<p>Create a new markdow file under your pages folder</p>\n</blockquote>\n<pre><code>blog_post.md\n</code></pre>\n<blockquote>\n<p>Look at the GrphiQL and refresh the query, you will see the new <code>.md</code> file in there</p>\n</blockquote>\n<blockquote>\n<p>First install transformer plugin</p>\n</blockquote>\n<pre><code>npm install --save gatsby-transformer-remark\n</code></pre>\n<blockquote>\n<p>Add plugin to Gatsby config</p>\n</blockquote>\n<pre><code>module.exports = {\n  siteMetadata: {\n    title: `Pandas Eating Lots`,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n    `gatsby-transformer-remark`,\n    `gatsby-plugin-emotion`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n}\n</code></pre>\n<blockquote>\n<p>Restart your development environment with</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>\n<blockquote>\n<p>In GraphiQL we will see the new item <code>allMarkdownRemark</code></p>\n</blockquote>"}},{"node":{"id":"4bdc078e-ea4f-5ace-89c2-c9b298236977","excerpt":"GraphQL is a technology for querying data and was developed by Facebook to allow React commponents to query data. QL means query language…","rawMarkdownBody":"\r\n![](https://i.imgur.com/vfl9kPh.jpg \"Photo by Vitaly Vlasov from Pexels\")\r\n\r\nGraphQL is a technology for querying data and was developed by Facebook to allow React commponents to query data. QL means query language and is similar to SQL.\r\n\r\nWhy do we prefer to query data anyway? Imagine you have yout site title (\"My page\") on various subpages, let's say on 20 subpages. Imagine you realize that this title is rather lame and you want to change it to somethis cooler (\"Welcome to my awesome page!\"). Then you have to go through all your code, every single page and change the hard typed title 20 times. However, it would be better if we could store our great title in some safe place from where each subpage would retreive it. Then you would only need to change the title of the page once and everything would be updated automatically. Isn't it totally cool? Automation, saving time, error-prone. Let's use awesome technologies and their potential to make our lives easier.\r\n\r\nThere are several GraphQL query types:\r\n> **A)** Page queries, which can only be done my PAGES (not by standalone components)\r\n\r\n> **B)** Non-pages components queries (such as layout.js)\r\n\r\n\r\n**PAGE QUERIES:**\r\n\r\n> One way to query data is to use page queries from site Metadata. This option is only available for pages (it is not available for non-page components like <code>layout.js</code>). In order to do so, open the gatsby-config file and paste this into it:\r\n\r\n```\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: \"Coding Addventures with Addania\",\r\n  },\r\n```\r\n> Then go to you About page and add following code:\r\n```\r\nimport React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nexport default ( {data}) => (  \r\n    <h1>About {data.site.siteMetadata.title}</h1>\r\n    <p>Such wow. Very React.</p>\r\n)\r\nexport const query = graphql`\r\nquery {\r\n  site {\r\n    siteMetadata{\r\n      title\r\n    }\r\n  }\r\n}\r\n`\r\n```\r\n\r\n> Please note that a constant query is outside of the component and by convention at the end of the file.\r\n\r\n\r\n**NON-PAGE COMPONENT QUERIES**\r\n> For standalone components like Header, Layout which are not pages, there is another way how to query data. We will use a hook called useStatisQuery. This hook was introduced to Gatsby that allow non-pages components also to retrieve data\r\n\r\n> Navigate to <code>layout.js</code> file\r\n\r\n> Import useStaticQuery and GraphQL from Gatsy\r\n```\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\n```\r\n\r\n> Function component needs to have {} brackets after =>\r\n```\r\nexport default ({ children }) => {\r\n...\r\n}\r\n```\r\n> Create a function component which will have this constant before return function\r\n```\r\nconst data = useStaticQuery (\r\n  graphql`\r\n  query {\r\n    site {\r\n      siteMetadata{\r\n        title\r\n      }\r\n    }\r\n  }\r\n  `\r\n)\r\n```\r\n> Use query inside of the return function\r\n```\r\n<h3>{data.site.siteMetadata.title}</h3>\r\n```\r\n\r\n> Entire example <code>layout.js</code> is here:\r\n```\r\nimport React from \"react\";\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\n\r\nconst ListLink = props => (\r\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\r\n    <Link to={props.to}>{props.children}</Link>\r\n  </li>\r\n)\r\n\r\nexport default ({ children }) => {\r\nconst data = useStaticQuery (\r\n  graphql`\r\n  query {\r\n    site {\r\n      siteMetadata{\r\n        title\r\n      }\r\n    }\r\n  }\r\n  `\r\n)\r\nreturn (\r\n  <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\r\n    <header style={{ marginBottom: `1.5rem` }}>\r\n      <Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\r\n        <h3 style={{ display: `inline` }}>Addania</h3>\r\n      </Link>\r\n      <ul style={{ listStyle: `none`, float: `right` }}>\r\n        <ListLink to=\"/\">Home</ListLink>\r\n        <ListLink to=\"/about/\">About</ListLink>\r\n        <ListLink to=\"/contact/\">Contact</ListLink>\r\n      </ul>\r\n      <hr />\r\n    </header>\r\n    {children}\r\n    <h3>{data.site.siteMetadata.title}</h3>\r\n    <hr />\r\n    <footer style={{ marginBottom: `1.5rem` }}>\r\n        <p style={{ display: `inline`, align: \"right\" }}>2019 Design and Development by Addania</p>\r\n    </footer>\r\n  </div>\r\n)\r\n}\r\n```\r\n> In order to make sure to write the queries correctly we use tool called GraphiQL. It is available by default when our local development is running (gastby develop) and is accessible here:\r\n```\r\nhttp://localhost:8000/___graphql\r\n```","frontmatter":{"date":"2019-10-09","title":"Querying data with GraphQL"},"fields":{"slug":"/Querying_data_with_GraphQL/"},"timeToRead":3,"html":"<p><img src=\"https://i.imgur.com/vfl9kPh.jpg\" title=\"Photo by Vitaly Vlasov from Pexels\"></p>\n<p>GraphQL is a technology for querying data and was developed by Facebook to allow React commponents to query data. QL means query language and is similar to SQL.</p>\n<p>Why do we prefer to query data anyway? Imagine you have yout site title (\"My page\") on various subpages, let's say on 20 subpages. Imagine you realize that this title is rather lame and you want to change it to somethis cooler (\"Welcome to my awesome page!\"). Then you have to go through all your code, every single page and change the hard typed title 20 times. However, it would be better if we could store our great title in some safe place from where each subpage would retreive it. Then you would only need to change the title of the page once and everything would be updated automatically. Isn't it totally cool? Automation, saving time, error-prone. Let's use awesome technologies and their potential to make our lives easier.</p>\n<p>There are several GraphQL query types:</p>\n<blockquote>\n<p><strong>A)</strong> Page queries, which can only be done my PAGES (not by standalone components)</p>\n</blockquote>\n<blockquote>\n<p><strong>B)</strong> Non-pages components queries (such as layout.js)</p>\n</blockquote>\n<p><strong>PAGE QUERIES:</strong></p>\n<blockquote>\n<p>One way to query data is to use page queries from site Metadata. This option is only available for pages (it is not available for non-page components like <code>layout.js</code>). In order to do so, open the gatsby-config file and paste this into it:</p>\n</blockquote>\n<pre><code>module.exports = {\n  siteMetadata: {\n    title: \"Coding Addventures with Addania\",\n  },\n</code></pre>\n<blockquote>\n<p>Then go to you About page and add following code:</p>\n</blockquote>\n<pre><code>import React from \"react\";\nimport { graphql } from \"gatsby\";\nexport default ( {data}) => (  \n    &#x3C;h1>About {data.site.siteMetadata.title}&#x3C;/h1>\n    &#x3C;p>Such wow. Very React.&#x3C;/p>\n)\nexport const query = graphql`\nquery {\n  site {\n    siteMetadata{\n      title\n    }\n  }\n}\n`\n</code></pre>\n<blockquote>\n<p>Please note that a constant query is outside of the component and by convention at the end of the file.</p>\n</blockquote>\n<p><strong>NON-PAGE COMPONENT QUERIES</strong></p>\n<blockquote>\n<p>For standalone components like Header, Layout which are not pages, there is another way how to query data. We will use a hook called useStatisQuery. This hook was introduced to Gatsby that allow non-pages components also to retrieve data</p>\n</blockquote>\n<blockquote>\n<p>Navigate to <code>layout.js</code> file</p>\n</blockquote>\n<blockquote>\n<p>Import useStaticQuery and GraphQL from Gatsy</p>\n</blockquote>\n<pre><code>import { Link, useStaticQuery, graphql } from \"gatsby\";\n</code></pre>\n<blockquote>\n<p>Function component needs to have {} brackets after =></p>\n</blockquote>\n<pre><code>export default ({ children }) => {\n...\n}\n</code></pre>\n<blockquote>\n<p>Create a function component which will have this constant before return function</p>\n</blockquote>\n<pre><code>const data = useStaticQuery (\n  graphql`\n  query {\n    site {\n      siteMetadata{\n        title\n      }\n    }\n  }\n  `\n)\n</code></pre>\n<blockquote>\n<p>Use query inside of the return function</p>\n</blockquote>\n<pre><code>&#x3C;h3>{data.site.siteMetadata.title}&#x3C;/h3>\n</code></pre>\n<blockquote>\n<p>Entire example <code>layout.js</code> is here:</p>\n</blockquote>\n<pre><code>import React from \"react\";\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\n\nconst ListLink = props => (\n  &#x3C;li style={{ display: `inline-block`, marginRight: `1rem` }}>\n    &#x3C;Link to={props.to}>{props.children}&#x3C;/Link>\n  &#x3C;/li>\n)\n\nexport default ({ children }) => {\nconst data = useStaticQuery (\n  graphql`\n  query {\n    site {\n      siteMetadata{\n        title\n      }\n    }\n  }\n  `\n)\nreturn (\n  &#x3C;div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\n    &#x3C;header style={{ marginBottom: `1.5rem` }}>\n      &#x3C;Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\n        &#x3C;h3 style={{ display: `inline` }}>Addania&#x3C;/h3>\n      &#x3C;/Link>\n      &#x3C;ul style={{ listStyle: `none`, float: `right` }}>\n        &#x3C;ListLink to=\"/\">Home&#x3C;/ListLink>\n        &#x3C;ListLink to=\"/about/\">About&#x3C;/ListLink>\n        &#x3C;ListLink to=\"/contact/\">Contact&#x3C;/ListLink>\n      &#x3C;/ul>\n      &#x3C;hr />\n    &#x3C;/header>\n    {children}\n    &#x3C;h3>{data.site.siteMetadata.title}&#x3C;/h3>\n    &#x3C;hr />\n    &#x3C;footer style={{ marginBottom: `1.5rem` }}>\n        &#x3C;p style={{ display: `inline`, align: \"right\" }}>2019 Design and Development by Addania&#x3C;/p>\n    &#x3C;/footer>\n  &#x3C;/div>\n)\n}\n</code></pre>\n<blockquote>\n<p>In order to make sure to write the queries correctly we use tool called GraphiQL. It is available by default when our local development is running (gastby develop) and is accessible here:</p>\n</blockquote>\n<pre><code>http://localhost:8000/___graphql\n</code></pre>"}},{"node":{"id":"8cdfea2b-94f0-5bf9-87e3-90edd1b2ee21","excerpt":"In order to use custom fonts you need to install a package (plug in) and then restart the local host Then you need to open gatsby-config.js…","rawMarkdownBody":"\r\n![](https://i.imgur.com/BvSXI40.jpg \"PPhoto by Dominika Roseclay from Pexels\")\r\n\r\n> In order to use custom fonts you need to install a package (plug in) and then restart the local host\r\n```\r\nnpm install --save gatsby-plugin-typography react-typography typography typography-theme-fairy-gates\r\n```\r\n> Then you need to open gatsby-config.js file. This is the file where we need to add plugins or site configuration. In order to use typography plugin we need to change this:\r\n```\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\n> Create new folder under src called \"utils\"\r\n\r\n> Add a new js file called: <code>typography.js</code>\r\n\r\n> Add this code to the file:\r\n```\r\nimport Typography from \"typography\"\r\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\r\nconst typography = new Typography(fairyGateTheme)\r\nexport const { scale, rhythm, options } = typography\r\nexport default typography\r\n```\r\n\r\n> Start development server\r\n```\r\ngatsby develop\r\n```\r\n\r\n","frontmatter":{"date":"2019-10-08","title":"Gatsby fonts"},"fields":{"slug":"/Gatsby_fonts/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/BvSXI40.jpg\" title=\"PPhoto by Dominika Roseclay from Pexels\"></p>\n<blockquote>\n<p>In order to use custom fonts you need to install a package (plug in) and then restart the local host</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-typography react-typography typography typography-theme-fairy-gates\n</code></pre>\n<blockquote>\n<p>Then you need to open gatsby-config.js file. This is the file where we need to add plugins or site configuration. In order to use typography plugin we need to change this:</p>\n</blockquote>\n<pre><code>module.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n}\n</code></pre>\n<blockquote>\n<p>Create new folder under src called \"utils\"</p>\n</blockquote>\n<blockquote>\n<p>Add a new js file called: <code>typography.js</code></p>\n</blockquote>\n<blockquote>\n<p>Add this code to the file:</p>\n</blockquote>\n<pre><code>import Typography from \"typography\"\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\nconst typography = new Typography(fairyGateTheme)\nexport const { scale, rhythm, options } = typography\nexport default typography\n</code></pre>\n<blockquote>\n<p>Start development server</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>"}},{"node":{"id":"b4442c35-48e8-55ac-a56a-f6eba3e8934d","excerpt":"Description Hooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function…","rawMarkdownBody":"\r\n![](https://i.imgur.com/4KvXTki.jpg \"Photo by Johannes Plenio from Pexels\")\r\n\r\n>Description\r\n\r\nHooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function components with hooks rather than classes with state. Class components might be deprecated in future. Advantage of hooks is that we can create our own hooks and logic behind them. \r\n\r\n>Examples of hooks:\r\n\r\n**useState** - allows function component to have state\r\n\r\n**useEffect** - allows function component to use a certain function any time component renders, it is equivalent to lifecycles of class components\r\n\r\n> Importing\r\n\r\nEach hook needs to be imported from react.\r\n\r\nExample 1:\r\n```\r\nimport React from \"react\";\r\nimport {useState} from \"react\";\r\n```\r\n\r\nExample 2:\r\n```\r\nimport React, {useState} from \"react\";\r\n```\r\n","frontmatter":{"date":"2019-10-07","title":"Hooks"},"fields":{"slug":"/Hooks/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/4KvXTki.jpg\" title=\"Photo by Johannes Plenio from Pexels\"></p>\n<blockquote>\n<p>Description</p>\n</blockquote>\n<p>Hooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function components with hooks rather than classes with state. Class components might be deprecated in future. Advantage of hooks is that we can create our own hooks and logic behind them. </p>\n<blockquote>\n<p>Examples of hooks:</p>\n</blockquote>\n<p><strong>useState</strong> - allows function component to have state</p>\n<p><strong>useEffect</strong> - allows function component to use a certain function any time component renders, it is equivalent to lifecycles of class components</p>\n<blockquote>\n<p>Importing</p>\n</blockquote>\n<p>Each hook needs to be imported from react.</p>\n<p>Example 1:</p>\n<pre><code>import React from \"react\";\nimport {useState} from \"react\";\n</code></pre>\n<p>Example 2:</p>\n<pre><code>import React, {useState} from \"react\";\n</code></pre>"}},{"node":{"id":"923d0f5a-e2e8-57ab-9278-01f7cdb8660f","excerpt":"There are basically 2 ways to style the React: 1) importing a standard CSS file for example index.css, which can reside side by side next to…","rawMarkdownBody":"\r\n![](https://i.imgur.com/cLbxIHe.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nThere are basically 2 ways to style the React:\r\n\r\n**1)** importing a standard CSS file for example <code>index.css</code>, which can reside side by side next to your main file, for example <code>index.js</code>. \r\n\r\n> On Ubuntu console, create the css file\r\n```\r\ntouch index.css\r\n```\r\n> Add some styling to your css file, which follows standard CSS rules, for example in this case we will center the video asset which has class name called player:\r\n```\r\n.player {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: block;\r\n}\r\n```\r\n> <code>index.js</code> will look like this:\r\n``` \r\n<video controls className=\"player\">\r\n  <source src=\"/video.mp4\" type=\"video/mp4\">\r\n  </source>\r\n</video>\r\n```\r\n\r\n> Open your <code>index.js</code> file and import your CSS to your JS file:\r\n```\r\nimport \"/index.css\";\r\n```\r\n\r\n**2)** Use styling inline in JS file. \r\n\r\n> Open your <code>index.js</code> file. In the tag where you want to apply your styles write <code>```style={{}}```</code> and add your style in between of the brackets. First pair of brackets means we are injecting JSX to the HTML, second pair of brackets means that what we are inputting there is in fact an object. Multiple styles needs to be separated by comma (just like in any other object). Please make sure you do not type styles (plural) instead of style (singular). Correct is style (singular). Please make sure that everything that in CSS uses minus (example: margin-left) must be inline without the minus and camelCased (example: marginLeft). Plus there must always be quotation marks even if in the CSS there wouldn't be. Full example:\r\n```\r\n<video  style={{width:\"500px\", display: \"block\", marginLeft: \"auto\", marginRight:\"auto\"}} controls>\r\n```","frontmatter":{"date":"2019-10-06","title":"Adding CSS to React"},"fields":{"slug":"/Adding_CSS_to_React/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/cLbxIHe.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>There are basically 2 ways to style the React:</p>\n<p><strong>1)</strong> importing a standard CSS file for example <code>index.css</code>, which can reside side by side next to your main file, for example <code>index.js</code>. </p>\n<blockquote>\n<p>On Ubuntu console, create the css file</p>\n</blockquote>\n<pre><code>touch index.css\n</code></pre>\n<blockquote>\n<p>Add some styling to your css file, which follows standard CSS rules, for example in this case we will center the video asset which has class name called player:</p>\n</blockquote>\n<pre><code>.player {\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n</code></pre>\n<blockquote>\n<p><code>index.js</code> will look like this:</p>\n</blockquote>\n<pre><code>&#x3C;video controls className=\"player\">\n  &#x3C;source src=\"/video.mp4\" type=\"video/mp4\">\n  &#x3C;/source>\n&#x3C;/video>\n</code></pre>\n<blockquote>\n<p>Open your <code>index.js</code> file and import your CSS to your JS file:</p>\n</blockquote>\n<pre><code>import \"/index.css\";\n</code></pre>\n<p><strong>2)</strong> Use styling inline in JS file. </p>\n<blockquote>\n<p>Open your <code>index.js</code> file. In the tag where you want to apply your styles write <code><code>style={{}}</code></code> and add your style in between of the brackets. First pair of brackets means we are injecting JSX to the HTML, second pair of brackets means that what we are inputting there is in fact an object. Multiple styles needs to be separated by comma (just like in any other object). Please make sure you do not type styles (plural) instead of style (singular). Correct is style (singular). Please make sure that everything that in CSS uses minus (example: margin-left) must be inline without the minus and camelCased (example: marginLeft). Plus there must always be quotation marks even if in the CSS there wouldn't be. Full example:</p>\n</blockquote>\n<pre><code>&#x3C;video  style={{width:\"500px\", display: \"block\", marginLeft: \"auto\", marginRight:\"auto\"}} controls>\n</code></pre>"}},{"node":{"id":"acc1e651-71eb-5b85-b6f6-99322976b845","excerpt":"How to view the source code in browser? Go to Chrome Navigate to your Page -> More tools -> Developer tool -> press Control   Paste this in…","rawMarkdownBody":"\r\n![](https://i.imgur.com/3qgZSlV.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nHow to view the source code in browser?\r\n\r\n> Go to Chrome\r\n\r\n> Navigate to your Page -> More tools -> Developer tool -> press Control  \r\n\r\n> Paste this in front of your https\r\n```\r\nview-source:\r\n```\r\n\r\nExample:\r\n```\r\nview-source:https://addania.github.io/MyProject/\r\n```","frontmatter":{"date":"2019-10-05","title":"View Source"},"fields":{"slug":"/View_source/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/3qgZSlV.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>How to view the source code in browser?</p>\n<blockquote>\n<p>Go to Chrome</p>\n</blockquote>\n<blockquote>\n<p>Navigate to your Page -> More tools -> Developer tool -> press Control  </p>\n</blockquote>\n<blockquote>\n<p>Paste this in front of your https</p>\n</blockquote>\n<pre><code>view-source:\n</code></pre>\n<p>Example:</p>\n<pre><code>view-source:https://addania.github.io/MyProject/\n</code></pre>"}},{"node":{"id":"38556b1a-ad57-58d5-b91a-4104886e3e79","excerpt":"Just admit it, carousels are simply cool!  :) Sooo, how to make one? Example code to create carousel component with 3 images slideshow is…","rawMarkdownBody":"\r\n![](https://i.imgur.com/qlBACx0.jpg \"Photo by Brett Sayles from Pexels\")\r\n\r\n\r\nJust admit it, carousels are simply cool!  :) Sooo, how to make one? Example code to create carousel component with 3 images slideshow is provided below. \r\n\r\n``` \r\nimport React from \"react\"\r\nimport \"./index.css\";\r\n\r\nexport class Carousel extends React.Component {\r\n  constructor (props){\r\n    super (props);\r\n    this.state = {\r\n      picsForCarousel: [\r\n        \"./img/car1.jpg\",\r\n        \"./img/car2.jpg\",\r\n        \"./img/car3.jpg\"\r\n      ],\r\n      picSelector: 0,\r\n    }\r\n  }\r\n\r\ncomponentDidMount(){\r\n  setTimeout(\r\n    ()=>{\r\n      const number=this.state.picSelector+1;\r\n      this.setState({picSelector: number})},5000)\r\n    }\r\n\r\n  componentDidUpdate(){\r\n      setTimeout(\r\n        ()=>{\r\n          const number=this.state.picSelector+1\r\n          this.setState({picSelector: number})},5000)\r\n        }\r\n\r\n  render (){\r\n    return (\r\n      <div>\r\n      <img src={this.state.picsForCarousel[this.state.picSelector]} style={{\r\n        display: \"block\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        width: \"40%\"\r\n      }} alt=\"\" />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n```\r\n\r\nDid it work? I hope yes. Have fun!","frontmatter":{"date":"2019-10-04","title":"Carousel in React"},"fields":{"slug":"/Carousel_in_React/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/qlBACx0.jpg\" title=\"Photo by Brett Sayles from Pexels\"></p>\n<p>Just admit it, carousels are simply cool!  :) Sooo, how to make one? Example code to create carousel component with 3 images slideshow is provided below. </p>\n<pre><code>import React from \"react\"\nimport \"./index.css\";\n\nexport class Carousel extends React.Component {\n  constructor (props){\n    super (props);\n    this.state = {\n      picsForCarousel: [\n        \"./img/car1.jpg\",\n        \"./img/car2.jpg\",\n        \"./img/car3.jpg\"\n      ],\n      picSelector: 0,\n    }\n  }\n\ncomponentDidMount(){\n  setTimeout(\n    ()=>{\n      const number=this.state.picSelector+1;\n      this.setState({picSelector: number})},5000)\n    }\n\n  componentDidUpdate(){\n      setTimeout(\n        ()=>{\n          const number=this.state.picSelector+1\n          this.setState({picSelector: number})},5000)\n        }\n\n  render (){\n    return (\n      &#x3C;div>\n      &#x3C;img src={this.state.picsForCarousel[this.state.picSelector]} style={{\n        display: \"block\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        width: \"40%\"\n      }} alt=\"\" />\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<p>Did it work? I hope yes. Have fun!</p>"}},{"node":{"id":"5a2a8a66-0179-53d9-8d67-e500f9943c3e","excerpt":"It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Iy5iZXG.jpg \"Photo by Nathan Cowley from Pexels\")\r\n\r\n> It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an easy way how to position image or video tag directly\r\n```\r\nimg{\r\n  display: block;\r\n  margin-right: auto;\r\n  width: 50%\r\n}\r\n```\r\n```\r\nvideo {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: block\r\n}\r\n```\r\n\r\n> Another option is to use margin auto and width. This approach will center an element within its container (relative to the container). Some pre-requisites: \r\n\r\n**1//** Element must be have width smaller than its container. \r\n\r\n**2//** Width of the element must be set\r\n\r\n**3//** Margin should have top and bottom (first value in code below) to be set, for example to 0 or XX pixels\r\n\r\n**4//** Margin for right and left (second value in the code below) should be set to auto (where auto means horizontal margin will be set automatically in order to center the element within its container depending on the width of element and the container)\r\n\r\n```\r\ndiv {\r\n  width: 300px:\r\n  margin: 0px auto;\r\n}\r\n```","frontmatter":{"date":"2019-10-03","title":"How to center an image"},"fields":{"slug":"/How_to_center_image/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/Iy5iZXG.jpg\" title=\"Photo by Nathan Cowley from Pexels\"></p>\n<blockquote>\n<p>It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an easy way how to position image or video tag directly</p>\n</blockquote>\n<pre><code>img{\n  display: block;\n  margin-right: auto;\n  width: 50%\n}\n</code></pre>\n<pre><code>video {\n  margin-left: auto;\n  margin-right: auto;\n  display: block\n}\n</code></pre>\n<blockquote>\n<p>Another option is to use margin auto and width. This approach will center an element within its container (relative to the container). Some pre-requisites: </p>\n</blockquote>\n<p><strong>1//</strong> Element must be have width smaller than its container. </p>\n<p><strong>2//</strong> Width of the element must be set</p>\n<p><strong>3//</strong> Margin should have top and bottom (first value in code below) to be set, for example to 0 or XX pixels</p>\n<p><strong>4//</strong> Margin for right and left (second value in the code below) should be set to auto (where auto means horizontal margin will be set automatically in order to center the element within its container depending on the width of element and the container)</p>\n<pre><code>div {\n  width: 300px:\n  margin: 0px auto;\n}\n</code></pre>"}},{"node":{"id":"0e3c6995-6d01-5402-8d71-5ff30c5c9fae","excerpt":"Being able to display videos in your website is very cool. Here is how you can easily do it. Go to pages folder and create vid subfolder…","rawMarkdownBody":"\r\n![](https://i.imgur.com/WSj6CoM.jpg \"Photo by Donald Tong from Pexels\")\r\n\r\n\r\nBeing able to display videos in your website is very cool. Here is how you can easily do it.\r\n\r\n> Go to pages folder and create vid subfolder\r\n\r\n> Upload your video there for example called <code>myVideo.mp4</code>\r\n\r\n> Open your <code>index.js</code> files and import your video\r\n```\r\nimport vid from \"./vid/myVideo.mp4\";\r\n```\r\n> Create a video tag with source tag. In video tag write controls if you want to display controls like play and pause. In source tag write the src either as a URL where your video is hosted or file path to your imported video. Also add type, in this case video/mp4\r\n```\r\n<video  controls>\r\n    <source src={vid} type=\"video/mp4\">\r\n    </source>\r\n</video>\r\n```","frontmatter":{"date":"2019-10-02","title":"Add video assets to React"},"fields":{"slug":"/Add_video_assets_to_React/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/WSj6CoM.jpg\" title=\"Photo by Donald Tong from Pexels\"></p>\n<p>Being able to display videos in your website is very cool. Here is how you can easily do it.</p>\n<blockquote>\n<p>Go to pages folder and create vid subfolder</p>\n</blockquote>\n<blockquote>\n<p>Upload your video there for example called <code>myVideo.mp4</code></p>\n</blockquote>\n<blockquote>\n<p>Open your <code>index.js</code> files and import your video</p>\n</blockquote>\n<pre><code>import vid from \"./vid/myVideo.mp4\";\n</code></pre>\n<blockquote>\n<p>Create a video tag with source tag. In video tag write controls if you want to display controls like play and pause. In source tag write the src either as a URL where your video is hosted or file path to your imported video. Also add type, in this case video/mp4</p>\n</blockquote>\n<pre><code>&#x3C;video  controls>\n    &#x3C;source src={vid} type=\"video/mp4\">\n    &#x3C;/source>\n&#x3C;/video>\n</code></pre>"}},{"node":{"id":"506aa847-a49a-5909-aad6-2e82218141d8","excerpt":"And here is how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools Go to: Find your favourite…","rawMarkdownBody":"\r\n![](https://i.imgur.com/W5e4AEm.jpg \"Photo by Pixabay from Pexels\")\r\n\r\nAnd here is how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools\r\n\r\n> Go to:\r\n```\r\nhttps://www.w3schools.com/howto/howto_google_fonts.asp\r\n```\r\n> Find your favourite font, for example Mansalva\r\n\r\n> Click on button try it\r\n\r\n> Find URL in the HTML document: https://fonts.googleapis.com/css?family=Mansalva\r\n\r\n> Create a new CSS file for example <code>index.css</code>\r\n\r\n> Populate the file with this code\r\n```\r\n@import url('https://fonts.googleapis.com/css?family=Mansalva');\r\n```\r\n> Add the styling for a body tag\r\n```\r\nbody {\r\n  font-family: 'Mansalva';\r\n}\r\n```\r\n> Alternatively use <code>className</code> to define a style\r\n```\r\n.fonts {\r\n  font-family: 'Mansalva';\r\n}\r\n```\r\n> Go to your <code>index.js</code>\r\n\r\n> Import your index.css please note that <code>index.js</code> and <code>index.css</code> need to be in the same folder\r\n```\r\nimport \"./index.css\"\r\n```\r\n> Add the className fonts to your tag where you want to apply the style, for example:\r\n```\r\n<div className=\"fonts\">\r\n```","frontmatter":{"date":"2019-10-01","title":"Google Fonts in React"},"fields":{"slug":"/Google_fonts_in_React/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/W5e4AEm.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p>And here is how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools</p>\n<blockquote>\n<p>Go to:</p>\n</blockquote>\n<pre><code>https://www.w3schools.com/howto/howto_google_fonts.asp\n</code></pre>\n<blockquote>\n<p>Find your favourite font, for example Mansalva</p>\n</blockquote>\n<blockquote>\n<p>Click on button try it</p>\n</blockquote>\n<blockquote>\n<p>Find URL in the HTML document: <a href=\"https://fonts.googleapis.com/css?family=Mansalva\">https://fonts.googleapis.com/css?family=Mansalva</a></p>\n</blockquote>\n<blockquote>\n<p>Create a new CSS file for example <code>index.css</code></p>\n</blockquote>\n<blockquote>\n<p>Populate the file with this code</p>\n</blockquote>\n<pre><code>@import url('https://fonts.googleapis.com/css?family=Mansalva');\n</code></pre>\n<blockquote>\n<p>Add the styling for a body tag</p>\n</blockquote>\n<pre><code>body {\n  font-family: 'Mansalva';\n}\n</code></pre>\n<blockquote>\n<p>Alternatively use <code>className</code> to define a style</p>\n</blockquote>\n<pre><code>.fonts {\n  font-family: 'Mansalva';\n}\n</code></pre>\n<blockquote>\n<p>Go to your <code>index.js</code></p>\n</blockquote>\n<blockquote>\n<p>Import your index.css please note that <code>index.js</code> and <code>index.css</code> need to be in the same folder</p>\n</blockquote>\n<pre><code>import \"./index.css\"\n</code></pre>\n<blockquote>\n<p>Add the className fonts to your tag where you want to apply the style, for example:</p>\n</blockquote>\n<pre><code>&#x3C;div className=\"fonts\">\n</code></pre>"}},{"node":{"id":"7ad618cd-8467-56b5-add4-30f77fcedf8b","excerpt":"Step-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages Create empty GitHub repository, for example called test…","rawMarkdownBody":"\r\n![](https://i.imgur.com/NAMuzl3.jpg \"Photo by Designecologist from Pexels\")\r\n\r\nStep-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages\r\n\r\n> Create empty GitHub repository, for example called test2. It should be a public repository and do NOT initialize this repository with README\r\n\r\n> Start Ubuntu Command line\r\n\r\n> Navigate to your projects folder\r\n```\r\ncd projects\r\n```\r\n\r\n> Create new project\r\n```\r\ngatsby new test2 https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n```\r\n> Go to your new project folder\r\n```\r\ncd test2\r\n```\r\n> Install gh-pages. You need to do it for each single project. Don't get fooled like me that I thought I installed this package before. You need to be in your project folder and install it there. If the installation is successful you should get a message something like this \"added 17 packages from 6 contributors and audited 19803 packages in 18.616s found 0 vulnerabilities\"\r\n```\r\nnpm install gh-pages --save-dev\r\n```\r\n> Add your project files to **LOCAL** git\r\n```\r\ngit add .\r\n```\r\n\r\n> If above command fails, then you first need to initialize empty git repository with:\r\n```\r\ngit init\r\n```\r\n\r\n> Then try again:\r\n```\r\ngit add .\r\n```\r\n\r\n> Commit your project files to **LOCAL** git\r\n```\r\ngit commit -m \"first commit\"\r\n```\r\n> If this commit fails because of \"tell me who you are\", then proceed here: https://addania.github.io/coding/Tell_Me_Who_You_Are/\r\n\r\n> Afer above steps, try again:\r\n```\r\ngit commit -m \"first commit\"\r\n```\r\n\r\n> Create a **REMOTE** repository\r\n```\r\ngit remote add origin git@github.com:addania/test2.git \r\n```\r\n> Push to **REMOTE** repository (you will be asked for you passphrase)\r\n```\r\ngit push origin master\r\n```\r\n\r\n> If you are publishing to your account URL, for example: https://addania.github.io without any prefix, then skip this step. But if on GitHub pages your URL will have a prefix, we also need to add this prefix to the Gatsby files. For example, Github pages which use repository name as prefix:\r\n```\r\nhttps://addania.github.io/test2\r\n```\r\ntest2 is name of repository and it comes AFTER  https://addania.github.io, therefore /test2 is a prefix and Gatsby needs to build files, so that they add the prefix. If this is the case you also need to do next 2 steps:\r\n\r\n> 1/ Open <code>gatsby-config.js</code> and paste following (don't forget about the slash):\r\n```\r\nmodule.exports = {\r\npathPrefix: \"/test2\",\r\n}\r\n```\r\n> 2/ Open <code>package.json</code> file and add --prefix-paths like so:\r\n```\r\n\"build\": \"gatsby build --prefix-paths\",\r\n```\r\n\r\n```\r\n\"deploy\": \"gatsby build --prefix-paths && gh-pages -d public -b master\",\r\n```\r\n\r\n> Add your project files to **LOCAL** git\r\n```\r\ngit add .\r\n```\r\n> Commit your project files to **LOCAL** git\r\n```\r\ngit commit -m \"second commit\"\r\n```\r\n> Push to **REMOTE** repository (you will be asked for you passphrase)\r\n```\r\ngit push origin master\r\n```\r\n\r\n> Create gh-pages branch\r\n```\r\ngit checkout -b gh-pages\r\n```\r\n\r\n> Run the <code>npm deploy</code> command. You will need to add your passphrase (twice). It should result in success and last word should be \"Published\"\r\n```\r\nnpm run deploy\r\n```\r\n> Go to your Github repository -> Settings\r\n\r\n> Scroll down to Github pages and change Source to gh-pages branch.\r\n\r\n> Click on your Github pages link: in my case: https://addania.github.io/test2/. You should see your website. Please note that sometimes you need to wait for couple of minutes (around 5 minutes) to see your website, most likely you will only see Gatsby welcome page\r\n\r\n> PLEASE NOTE\r\n\r\nWe will use gh-pages branch to publish the website and we will use master branch to upload / download our code\r\n\r\n> If you want to make changes to your code then you need to push it to the master branch. This will upload new version of your code to master branch but it will still not be however reflected in your published page\r\n```\r\ngit push origin master\r\n```\r\n> To make changes to be reflected on your published page you need to run npm again\r\n```\r\nnpm run deploy\r\n```\r\n> PLEASE NOTE\r\n\r\nIn the Project folder called Pages you can only store pages to your website, if you put there some components which you import to your index.js it will break the <code>npm run deploy</code> with the error that for example <code>header.js</code> must be a valid React component. How to fix it? Remove all your components from pages folder and create a folder called components in the <code>src</code> folder. Put all your components there. Then import your header.js to your <code>index.js</code> by \r\n```\r\nimport { Header } from \"../components/header.js\"\r\n```\r\nThen you are able to run:\r\n```\r\nnpm run deploy\r\n```\r\n\r\n> PLEASE NOTE\r\n\r\nALWAYS commit code to the repository and then nmp run deploy!! You will avoid lots of problems!! If push and <code>npm run deploy</code> are not in synch you probably will have lots of problems with the page.\r\n\r\n> PLEASE NOTE\r\n\r\nThe good practise is to use master branch for pushing your code and to use gh-pages branch for publishing.\r\n\r\n**Additionally:**\r\n\r\n> Brose your typography in typography.js here:\r\nhttps://kyleamathews.github.io/typography.js/\r\n\r\n> Choose the one you like\r\n\r\n> Install your typography:\r\n```\r\nnpm install --save gatsby-plugin-typography typography react-typography typography-theme-fairy-gates gatsby-plugin-emotion @emotion/core\r\n```\r\n\r\n> Another example:\r\n```\r\nnpm install --save gatsby-plugin-typography typography react-typography typography-theme-moraga gatsby-plugin-emotion @emotion/core\r\n```\r\n\r\n> Add typography to your <code>package.json</code>\r\n```\r\nmodule.exports = {\r\n  plugins: [\r\n    `gatsby-plugin-emotion`,\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\n> Under folder <code>src</code> create a new folder utils\r\n\r\n> In <code>src/utils</code> folder create a new <code>typography.js</code> file\r\n\r\n> Input this code into the <code>typography.js</code>\r\n```\r\nimport Typography from \"typography\"\r\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\r\nconst typography = new Typography(fairyGateTheme)\r\nexport const { scale, rhythm, options } = typography\r\nexport default typography\r\n```\r\n\r\n> Another example:\r\n```\r\nimport Typography from \"typography\"\r\nimport moragaTheme from \"typography-theme-moraga\"\r\nconst typography = new Typography(moragaTheme)\r\nexport const { scale, rhythm, options } = typography\r\nexport default typography\r\n```\r\n\r\n> Install source filesystem\r\n```\r\nnpm install --save gatsby-source-filesystem\r\n```\r\n\r\n> Add following code to <code>gatsby-config.js</code>\r\n```\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n```\r\n\r\n> Add transformer remark to be able to work with markdown files:\r\n```\r\nnpm install --save gatsby-transformer-remark\r\n```\r\n\r\n> Add this code to gatsby-config to module exports plugins:\r\n```\r\n`gatsby-transformer-remark`,\r\n```\r\n> Create <code>gatbsy-node.js</code> file in the same folder as <code>gatsby-config</code>\r\n\r\n> Add this code to gatsby node:\r\n```\r\nconst path= require(`path`)\r\nconst { createFilePath } = require(`gatsby-source-filesystem`)\r\nexports.onCreateNode = ({ node, getNode, actions }) => {\r\n  const { createNodeField } = actions\r\n  if (node.internal.type === `MarkdownRemark`) {\r\n    const slug = createFilePath({ node, getNode, basePath: `pages` })\r\n    createNodeField({\r\n      node,\r\n      name: `slug`,\r\n      value: slug,\r\n    })\r\n  }\r\n}\r\nexports.createPages = async ({ graphql, actions }) => {\r\n   \r\nconst {createPage} = actions\r\n    const result = await graphql(`\r\n      query {\r\n        allMarkdownRemark {\r\n          edges {\r\n            node {\r\n              fields {\r\n                slug\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `)\r\n    result.data.allMarkdownRemark.edges.forEach(({node}) =>{\r\n       createPage({\r\n           path: node.fields.slug,\r\n           component: path.resolve(`./src/templates/blog-post.js`),\r\n           context: {\r\n             slug: node.fields.slug,\r\n           },\r\n       })\r\n\r\n    })\r\n  }\r\n```\r\n\r\n> Install manifest (if it throws error, then skip):\r\n```\r\nnpm install --save gatsby-plugin-manifest\r\n```\r\n\r\n> Add manifest plugin to <code>gatsby-config.js</code> (this can throw error, then skip)\r\n```\r\nCopygatsby-config.js: copy code to clipboard\r\n{\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-manifest`,\r\n      options: {\r\n        name: `GatsbyJS`,\r\n        short_name: `GatsbyJS`,\r\n        start_url: `/`,\r\n        background_color: `#6b37bf`,\r\n        theme_color: `#6b37bf`,\r\n        // Enables \"Add to Homescreen\" prompt and disables browser UI (including back button)\r\n        // see https://developers.google.com/web/fundamentals/web-app-manifest/#display\r\n        display: `standalone`,\r\n        icon: `src/images/icon.png`, // This path is relative to the root of the site.\r\n      },\r\n    },\r\n  ]\r\n}\r\n```\r\n\r\n> Add offline support by installing:\r\n```\r\nnpm install --save gatsby-plugin-offline\r\n```\r\n\r\n> Add offline support to <code>gatsby-config</code> to module export plugins:\r\n```\r\n`gatsby-plugin-offline`,\r\n```\r\n\r\n> Add react helmet by installing:\r\n```\r\nnpm install --save gatsby-plugin-react-helmet react-helmet\r\n```\r\n\r\n> Add react helmet to <code>gatsby-config</code>:\r\n\r\n```\r\n`gatsby-plugin-react-helmet`,\r\n```\r\n\r\n> Plus site metadata should have author and description:\r\n```\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: `Pandas Eating Lots`,\r\n    description: `A simple description about pandas eating lots...`,\r\n    author: `gatsbyjs`,\r\n  },\r\n```\r\n\r\n> Install React Bootstrap and Bootstrap:\r\n```\r\nnpm install react-bootstrap bootstrap\r\n```\r\n\r\n\r\n>Useful Sources:\r\n\r\nhttps://iolivia.me/posts/7-gatsby-deploy-github/\r\n\r\nhttps://www.gatsbyjs.org/tutorial/part-four/\r\n\r\n","frontmatter":{"date":"2019-09-30","title":"Publish your Gatsby website to Github Pages"},"fields":{"slug":"/Publish_your_Gatsby_site_to_GitHubpages/"},"timeToRead":7,"html":"<p><img src=\"https://i.imgur.com/NAMuzl3.jpg\" title=\"Photo by Designecologist from Pexels\"></p>\n<p>Step-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages</p>\n<blockquote>\n<p>Create empty GitHub repository, for example called test2. It should be a public repository and do NOT initialize this repository with README</p>\n</blockquote>\n<blockquote>\n<p>Start Ubuntu Command line</p>\n</blockquote>\n<blockquote>\n<p>Navigate to your projects folder</p>\n</blockquote>\n<pre><code>cd projects\n</code></pre>\n<blockquote>\n<p>Create new project</p>\n</blockquote>\n<pre><code>gatsby new test2 https://github.com/gatsbyjs/gatsby-starter-hello-world\n</code></pre>\n<blockquote>\n<p>Go to your new project folder</p>\n</blockquote>\n<pre><code>cd test2\n</code></pre>\n<blockquote>\n<p>Install gh-pages. You need to do it for each single project. Don't get fooled like me that I thought I installed this package before. You need to be in your project folder and install it there. If the installation is successful you should get a message something like this \"added 17 packages from 6 contributors and audited 19803 packages in 18.616s found 0 vulnerabilities\"</p>\n</blockquote>\n<pre><code>npm install gh-pages --save-dev\n</code></pre>\n<blockquote>\n<p>Add your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>If above command fails, then you first need to initialize empty git repository with:</p>\n</blockquote>\n<pre><code>git init\n</code></pre>\n<blockquote>\n<p>Then try again:</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Commit your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git commit -m \"first commit\"\n</code></pre>\n<blockquote>\n<p>If this commit fails because of \"tell me who you are\", then proceed here: <a href=\"https://addania.github.io/coding/Tell_Me_Who_You_Are/\">https://addania.github.io/coding/Tell_Me_Who_You_Are/</a></p>\n</blockquote>\n<blockquote>\n<p>Afer above steps, try again:</p>\n</blockquote>\n<pre><code>git commit -m \"first commit\"\n</code></pre>\n<blockquote>\n<p>Create a <strong>REMOTE</strong> repository</p>\n</blockquote>\n<pre><code>git remote add origin git@github.com:addania/test2.git \n</code></pre>\n<blockquote>\n<p>Push to <strong>REMOTE</strong> repository (you will be asked for you passphrase)</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>If you are publishing to your account URL, for example: <a href=\"https://addania.github.io\">https://addania.github.io</a> without any prefix, then skip this step. But if on GitHub pages your URL will have a prefix, we also need to add this prefix to the Gatsby files. For example, Github pages which use repository name as prefix:</p>\n</blockquote>\n<pre><code>https://addania.github.io/test2\n</code></pre>\n<p>test2 is name of repository and it comes AFTER  <a href=\"https://addania.github.io\">https://addania.github.io</a>, therefore /test2 is a prefix and Gatsby needs to build files, so that they add the prefix. If this is the case you also need to do next 2 steps:</p>\n<blockquote>\n<p>1/ Open <code>gatsby-config.js</code> and paste following (don't forget about the slash):</p>\n</blockquote>\n<pre><code>module.exports = {\npathPrefix: \"/test2\",\n}\n</code></pre>\n<blockquote>\n<p>2/ Open <code>package.json</code> file and add --prefix-paths like so:</p>\n</blockquote>\n<pre><code>\"build\": \"gatsby build --prefix-paths\",\n</code></pre>\n<pre><code>\"deploy\": \"gatsby build --prefix-paths &#x26;&#x26; gh-pages -d public -b master\",\n</code></pre>\n<blockquote>\n<p>Add your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Commit your project files to <strong>LOCAL</strong> git</p>\n</blockquote>\n<pre><code>git commit -m \"second commit\"\n</code></pre>\n<blockquote>\n<p>Push to <strong>REMOTE</strong> repository (you will be asked for you passphrase)</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>Create gh-pages branch</p>\n</blockquote>\n<pre><code>git checkout -b gh-pages\n</code></pre>\n<blockquote>\n<p>Run the <code>npm deploy</code> command. You will need to add your passphrase (twice). It should result in success and last word should be \"Published\"</p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>Go to your Github repository -> Settings</p>\n</blockquote>\n<blockquote>\n<p>Scroll down to Github pages and change Source to gh-pages branch.</p>\n</blockquote>\n<blockquote>\n<p>Click on your Github pages link: in my case: <a href=\"https://addania.github.io/test2/\">https://addania.github.io/test2/</a>. You should see your website. Please note that sometimes you need to wait for couple of minutes (around 5 minutes) to see your website, most likely you will only see Gatsby welcome page</p>\n</blockquote>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>We will use gh-pages branch to publish the website and we will use master branch to upload / download our code</p>\n<blockquote>\n<p>If you want to make changes to your code then you need to push it to the master branch. This will upload new version of your code to master branch but it will still not be however reflected in your published page</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>To make changes to be reflected on your published page you need to run npm again</p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>In the Project folder called Pages you can only store pages to your website, if you put there some components which you import to your index.js it will break the <code>npm run deploy</code> with the error that for example <code>header.js</code> must be a valid React component. How to fix it? Remove all your components from pages folder and create a folder called components in the <code>src</code> folder. Put all your components there. Then import your header.js to your <code>index.js</code> by </p>\n<pre><code>import { Header } from \"../components/header.js\"\n</code></pre>\n<p>Then you are able to run:</p>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>ALWAYS commit code to the repository and then nmp run deploy!! You will avoid lots of problems!! If push and <code>npm run deploy</code> are not in synch you probably will have lots of problems with the page.</p>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>The good practise is to use master branch for pushing your code and to use gh-pages branch for publishing.</p>\n<p><strong>Additionally:</strong></p>\n<blockquote>\n<p>Brose your typography in typography.js here:\n<a href=\"https://kyleamathews.github.io/typography.js/\">https://kyleamathews.github.io/typography.js/</a></p>\n</blockquote>\n<blockquote>\n<p>Choose the one you like</p>\n</blockquote>\n<blockquote>\n<p>Install your typography:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-typography typography react-typography typography-theme-fairy-gates gatsby-plugin-emotion @emotion/core\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-typography typography react-typography typography-theme-moraga gatsby-plugin-emotion @emotion/core\n</code></pre>\n<blockquote>\n<p>Add typography to your <code>package.json</code></p>\n</blockquote>\n<pre><code>module.exports = {\n  plugins: [\n    `gatsby-plugin-emotion`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n}\n</code></pre>\n<blockquote>\n<p>Under folder <code>src</code> create a new folder utils</p>\n</blockquote>\n<blockquote>\n<p>In <code>src/utils</code> folder create a new <code>typography.js</code> file</p>\n</blockquote>\n<blockquote>\n<p>Input this code into the <code>typography.js</code></p>\n</blockquote>\n<pre><code>import Typography from \"typography\"\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\nconst typography = new Typography(fairyGateTheme)\nexport const { scale, rhythm, options } = typography\nexport default typography\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<pre><code>import Typography from \"typography\"\nimport moragaTheme from \"typography-theme-moraga\"\nconst typography = new Typography(moragaTheme)\nexport const { scale, rhythm, options } = typography\nexport default typography\n</code></pre>\n<blockquote>\n<p>Install source filesystem</p>\n</blockquote>\n<pre><code>npm install --save gatsby-source-filesystem\n</code></pre>\n<blockquote>\n<p>Add following code to <code>gatsby-config.js</code></p>\n</blockquote>\n<pre><code>  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n</code></pre>\n<blockquote>\n<p>Add transformer remark to be able to work with markdown files:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-transformer-remark\n</code></pre>\n<blockquote>\n<p>Add this code to gatsby-config to module exports plugins:</p>\n</blockquote>\n<pre><code>`gatsby-transformer-remark`,\n</code></pre>\n<blockquote>\n<p>Create <code>gatbsy-node.js</code> file in the same folder as <code>gatsby-config</code></p>\n</blockquote>\n<blockquote>\n<p>Add this code to gatsby node:</p>\n</blockquote>\n<pre><code>const path= require(`path`)\nconst { createFilePath } = require(`gatsby-source-filesystem`)\nexports.onCreateNode = ({ node, getNode, actions }) => {\n  const { createNodeField } = actions\n  if (node.internal.type === `MarkdownRemark`) {\n    const slug = createFilePath({ node, getNode, basePath: `pages` })\n    createNodeField({\n      node,\n      name: `slug`,\n      value: slug,\n    })\n  }\n}\nexports.createPages = async ({ graphql, actions }) => {\n   \nconst {createPage} = actions\n    const result = await graphql(`\n      query {\n        allMarkdownRemark {\n          edges {\n            node {\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    `)\n    result.data.allMarkdownRemark.edges.forEach(({node}) =>{\n       createPage({\n           path: node.fields.slug,\n           component: path.resolve(`./src/templates/blog-post.js`),\n           context: {\n             slug: node.fields.slug,\n           },\n       })\n\n    })\n  }\n</code></pre>\n<blockquote>\n<p>Install manifest (if it throws error, then skip):</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-manifest\n</code></pre>\n<blockquote>\n<p>Add manifest plugin to <code>gatsby-config.js</code> (this can throw error, then skip)</p>\n</blockquote>\n<pre><code>Copygatsby-config.js: copy code to clipboard\n{\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `GatsbyJS`,\n        short_name: `GatsbyJS`,\n        start_url: `/`,\n        background_color: `#6b37bf`,\n        theme_color: `#6b37bf`,\n        // Enables \"Add to Homescreen\" prompt and disables browser UI (including back button)\n        // see https://developers.google.com/web/fundamentals/web-app-manifest/#display\n        display: `standalone`,\n        icon: `src/images/icon.png`, // This path is relative to the root of the site.\n      },\n    },\n  ]\n}\n</code></pre>\n<blockquote>\n<p>Add offline support by installing:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-offline\n</code></pre>\n<blockquote>\n<p>Add offline support to <code>gatsby-config</code> to module export plugins:</p>\n</blockquote>\n<pre><code>`gatsby-plugin-offline`,\n</code></pre>\n<blockquote>\n<p>Add react helmet by installing:</p>\n</blockquote>\n<pre><code>npm install --save gatsby-plugin-react-helmet react-helmet\n</code></pre>\n<blockquote>\n<p>Add react helmet to <code>gatsby-config</code>:</p>\n</blockquote>\n<pre><code>`gatsby-plugin-react-helmet`,\n</code></pre>\n<blockquote>\n<p>Plus site metadata should have author and description:</p>\n</blockquote>\n<pre><code>module.exports = {\n  siteMetadata: {\n    title: `Pandas Eating Lots`,\n    description: `A simple description about pandas eating lots...`,\n    author: `gatsbyjs`,\n  },\n</code></pre>\n<blockquote>\n<p>Install React Bootstrap and Bootstrap:</p>\n</blockquote>\n<pre><code>npm install react-bootstrap bootstrap\n</code></pre>\n<blockquote>\n<p>Useful Sources:</p>\n</blockquote>\n<p><a href=\"https://iolivia.me/posts/7-gatsby-deploy-github/\">https://iolivia.me/posts/7-gatsby-deploy-github/</a></p>\n<p><a href=\"https://www.gatsbyjs.org/tutorial/part-four/\">https://www.gatsbyjs.org/tutorial/part-four/</a></p>"}},{"node":{"id":"89ff1b0c-9343-5cf8-a741-7b4c91617f97","excerpt":"Advantages of Node.js 1/ Creates Runtime Environments (local webserver) Node.js is a JavaScript runtime environment. It allows JavaScript to…","rawMarkdownBody":"\r\n![](https://i.imgur.com/Y2H1vQk.png \"NodeJS logo\")\r\n\r\nAdvantages of Node.js\r\n\r\n**1/** Creates Runtime Environments (local webserver)\r\n\r\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.\r\n\r\n**2/** Enables to install cool packages(=libraries=modules)\r\n\r\nNode.js comes automatically with NPM (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configurating, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. NPM I can only install packages which run in browser. Example of packages: \r\n\r\n> **react** - allows access to all React modules/features like <code>React.Component</code>\r\n\r\n> **reactDOM** - allows to generate React in the browser (unless I want to use script tags in html), for example: <code>ReactDOM.render()</code>\r\n\r\n> **create-react-app** - enables to setup initial React files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes React and ReactDOM packages\r\n\r\n> **gatsby** - allows to build websites with multiple pages easier. It ALSO automatically includes React and ReactDOM packages\r\n\r\nEach package needs to be installed by NPM individually.\r\n\r\n2 ways how to download a package/any other software:\r\n\r\n**A)** Go to webside -> click download -> run installer and install the software\r\n\r\nor\r\n\r\n**B)** Use package managers - package manager MUST be run in command line\r\n\r\nCommands:\r\n\r\n> To install your favourite package\r\n```\r\nnpm install react\r\nnpm install reactDOM\r\nnpm install create-react-app\r\nnpm install gatsby\r\n```\r\n> In order to see which packages=libraries=modules my project is using I search for file called <code>package.json</code>. In the file there will be an object called dependencies \r\n```\r\n  \"dependencies\": {\r\n    \"gatsby\": \"^2.15.28\",\r\n    \"react\": \"^16.10.0\",\r\n    \"react-dom\": \"^16.10.0\"    \r\n  },\r\n```\r\n\r\n> To read a manual of NPM\r\n```\r\nman npm\r\n```\r\n> To read the help of NPM\r\n```\r\nnpm help\r\n```\r\n","frontmatter":{"date":"2019-09-29","title":"Intro to NodeJS"},"fields":{"slug":"/Intro_to_NodeJS/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/Y2H1vQk.png\" title=\"NodeJS logo\"></p>\n<p>Advantages of Node.js</p>\n<p><strong>1/</strong> Creates Runtime Environments (local webserver)</p>\n<p>Node.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.</p>\n<p><strong>2/</strong> Enables to install cool packages(=libraries=modules)</p>\n<p>Node.js comes automatically with NPM (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configurating, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. NPM I can only install packages which run in browser. Example of packages: </p>\n<blockquote>\n<p><strong>react</strong> - allows access to all React modules/features like <code>React.Component</code></p>\n</blockquote>\n<blockquote>\n<p><strong>reactDOM</strong> - allows to generate React in the browser (unless I want to use script tags in html), for example: <code>ReactDOM.render()</code></p>\n</blockquote>\n<blockquote>\n<p><strong>create-react-app</strong> - enables to setup initial React files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes React and ReactDOM packages</p>\n</blockquote>\n<blockquote>\n<p><strong>gatsby</strong> - allows to build websites with multiple pages easier. It ALSO automatically includes React and ReactDOM packages</p>\n</blockquote>\n<p>Each package needs to be installed by NPM individually.</p>\n<p>2 ways how to download a package/any other software:</p>\n<p><strong>A)</strong> Go to webside -> click download -> run installer and install the software</p>\n<p>or</p>\n<p><strong>B)</strong> Use package managers - package manager MUST be run in command line</p>\n<p>Commands:</p>\n<blockquote>\n<p>To install your favourite package</p>\n</blockquote>\n<pre><code>npm install react\nnpm install reactDOM\nnpm install create-react-app\nnpm install gatsby\n</code></pre>\n<blockquote>\n<p>In order to see which packages=libraries=modules my project is using I search for file called <code>package.json</code>. In the file there will be an object called dependencies </p>\n</blockquote>\n<pre><code>  \"dependencies\": {\n    \"gatsby\": \"^2.15.28\",\n    \"react\": \"^16.10.0\",\n    \"react-dom\": \"^16.10.0\"    \n  },\n</code></pre>\n<blockquote>\n<p>To read a manual of NPM</p>\n</blockquote>\n<pre><code>man npm\n</code></pre>\n<blockquote>\n<p>To read the help of NPM</p>\n</blockquote>\n<pre><code>npm help\n</code></pre>"}},{"node":{"id":"edcac9ff-ad8f-5521-9470-ace78f1b69a4","excerpt":"React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing…","rawMarkdownBody":"\r\n![](https://i.imgur.com/4tBPaPE.png \"React logo\")\r\n\r\nReact is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having HTML, CSS and Javascript in one file. \r\n\r\nReact is a closed environmnet and can be run in browser, on your local machine (your PC) or on phones (such as Android, etc).\r\n\r\nWhen I am developing a website in React I need to be able to see what I am building. I can do these:\r\n\r\n**A/** doubleclick on my html file (index.html) and open it in browser. However, it won't really work. Other pages will not load, because I am only openineg filepath in browser.\r\n\r\n**B/** run a web server locally on my machine (pc)\r\n\r\nIn order to run a web server on my machine, I need to install <code>node.js</code>.\r\n\r\nIn order to be able to use React in a **BROWSER** I need a package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:\r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n```\r\n> More on this in official documentation here:\r\n\r\nhttps://reactjs.org/docs/add-react-to-a-website.html\r\n\r\nThese script tags in html are equivalent to a file in my project called <code>package.json</code> which is automatically provided by Gatsby:\r\n```\r\n\"dependencies\": {\r\n    \"gatsby\": \"^2.15.28\",\r\n    \"react\": \"^16.10.0\",\r\n    \"react-dom\": \"^16.10.0\"\r\n},\r\n```\r\n\r\n> There are 2 ways how I can import React. \r\n\r\n**A)** I need to  import React:\r\n```\r\nimport React from \"react\";\r\n```\r\n>Then I'm using:\r\n```\r\nclass MyClass extends React.Component(){\r\n\r\n}\r\n```\r\n\r\n**B)** I can only import { Component } from \"react\"\r\n```\r\nimport { Component } from \"react\";\r\n```\r\n\r\n>Then Im using:\r\n```\r\nclass MyClass extends Component(){\r\n\r\n}\r\n```\r\n\r\n> I can import ReactDOM in 2 ways. \r\n\r\n**A)** We import everything that is in ReactDOM, all their methods. On of their methods is called render:\r\n``` \r\nimport ReactDOM from \"react-dom\";\r\n```\r\n\r\n> Then I am using this render method:\r\n```\r\nReactDOM.render(<p>Hi</p>, document.getElementById(\"app\"));\r\n```\r\n**B)** In this way we are only cherry-picking to import one specific method from reactDOM and this method is called render:\r\n```\r\nimport { render } from\"react-dom\";\r\n``` \r\n> Then I am using this render method:\r\n```\r\nrender(<p>Hi</p>, document.getElementById(\"app\"));\r\n```\r\n\r\n> In render method we have 2 possibilities to generate our component in a specific DOM element:\r\n\r\n**A)** One way is to use document.getElementById\r\n```\r\nrender(<p>Hi</p>, document.getElementById(\"app\"));\r\n```\r\n\r\n**B** Another way is to use document.querySelector:\r\n```\r\nrender(<p>Hi</p>, document.querySelctor(\"#app\"));\r\n```\r\n\r\n> Within React return statement I can only add parent component:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <p>Hello</p>\r\n    )\r\n  }\r\n}\r\n```\r\n> I cannot write this:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <p>Hello</p>\r\n        <p>World</p>\r\n    )\r\n  }\r\n}\r\n```\r\n> To solve to have paralell tags, we can wrap them in div:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <div>\r\n          <p>Hello</p>\r\n          <p>World</p>\r\n        </div>  \r\n    )\r\n  }\r\n}\r\n```\r\n\r\n> Alternatively if we dont want to wrapt them in divs, we can wrap them in React.Fragment:\r\n```\r\nclass MyClass extends React.Component(){\r\nrender (){\r\n    return (\r\n        <React.Fragment>\r\n          <p>Hello</p>\r\n          <p>World</p>\r\n        </React.Fragment>  \r\n    )\r\n  }\r\n}\r\n```\r\n\r\n**HTML scripts equivalent to React**\r\n\r\nCreate a new file with .html extention. For example: site.html\r\n\r\nYou can open this file in the browser (simply double-clicking on the file). Browser will open up a completely blank page.\r\n\r\nNow we can open it in editor (for example note++, etc) and add a <code>div</code> tag in it id of root:\r\n```\r\n<div id=\"root\">Hi</div>\r\n\r\n```\r\n\r\nRefresh the browser and you wil see <code>Hi</code> displayed. But let's remove hard coded <code>Hi</code> and we will play around how we can place other elements within the root div.\r\n\r\nIn HTML in between of script tags, we can write regular Javascript\r\n```\r\n<div id=\"root\"></div>\r\n<script type=\"text/javascript\">\r\n</script>\r\n```\r\n\r\nIn between script tags we will now write a script that will add a new element to the div root\r\n.\r\n\r\nTo target a div with id root, we write <code>document.getElementById</code>\r\n```\r\nconst rootElement = document.getElementById(\"root\");\r\n```\r\n\r\n\r\nTo create a new element we use <code>document.createElement</code>\r\n```\r\nconst element = document.createElement(\"div\");\r\n```\r\n\r\nTo add attributes to our new div, we use following syntax:\r\n```\r\nelement.textContent = \"Hello World!\";\r\nelement.className = \"container\";\r\n```\r\n\r\nIt is equivalent and will eventually  look like:\r\n```\r\n<div className=\"container\">Hello World!</div>\r\n```\r\n\r\nNow we need to add this element to our root div by syntax:\r\n```\r\nrootElement.appendChild(element);\r\n```\r\n\r\nEntire code will look like this:\r\n```\r\n<div id=\"root\"></div>\r\n<script type=\"text/javascript\">\r\nconst rootElement = document.getElementById(\"root\");\r\nconst element = document.createElement(\"div\");\r\nelement.textContent = \"Hello World!\";\r\nelement.className = \"container\";\r\nrootElement.appendChild(element);\r\n</script>\r\n```\r\n\r\nNow we will do the same with REACT.\r\n\r\nFirst we need to import react to our HTML using script tags. Add following to your HTML file:\r\n```\r\n<!-- Load React. -->\r\n<!-- Note: when deploying, replace \"development.js\" with \"production.min.js\". -->\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n```\r\n\r\nNow we will use react to create our elements.\r\n```\r\n<div id=\"root\"></div>\r\n<script type=\"text/javascript\">\r\nconst rootElement = document.getElementById(\"root\");\r\n</script>\r\n```\r\n\r\nIn order to create new element we will use React.createElement which has 3 paramenters:\r\n\r\n**1/** which element it is - div\r\n\r\n**2/** are ther eany atributes - className\r\n\r\n**3/** and the text itself\r\n```\r\nconst element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\");\r\n```\r\n\r\nIn <code>React.createElement</code>, we can have any number of childeren like \"Yuhuu\" there:\r\n```\r\nconst element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\", \"Cool\", \"Hell yeah\");\r\n```\r\n\r\nThe above ones will be an array of children in the backend.\r\n\r\nAnother way to generate children is to use className called children and add the array of children there:\r\n```\r\nconst element = React.createElement(\"div\", {className: \"container\", children: [\"Yuhuu\", \"Cool\", \"Hell yeah\"]});\r\n```\r\n\r\nThen we will render this element:\r\n```\r\nReactDOM.render(element, rootElement);\r\n```\r\n\r\nEntire code looks like this:\r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n<div id=\"root\"></div>\r\n<script type=\"text/javascript\">\r\nconst rootElement = document.getElementById(\"root\");\r\nconst element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\");\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nWriting entire app with <code>React.createElement</code> is possible but not practical. It would be better if we could use regular html tags in the html. For example:\r\n``` const element = <div>Hello world</div>```\r\n\r\nWe can do it like this:\r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n<div id=\"root\"></div>\r\n<script type=\"text/javascript\">\r\nconst rootElement = document.getElementById(\"root\");\r\nconst element = <div>Hello world</div>\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nBut if we run this, we will get a syntax error, where <code><</code> is not a valid syntax.\r\n\r\nSuch construct like <code>```<div>Hello world</div>```</code> is called JSX. And in order to be interpretted as <code>React.createElement</code>, it needs to be TRANSPILED and we can use Babbel to do it - Babbel is a transpiler, which takes JSX and converts it to regular Javascript.\r\n\r\nIn order to use Babbel to transpile our JSX code to pure Javascript code, we need to import Babbel standalone using script\r\n```\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n```\r\nAnd we need to change <code>text/javascript</code> to <code>text/babel</code>\r\n```\r\n<script type=\"text/javascript\">\r\n```\r\n\r\nEntire code: \r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script><div id=\"root\"></div>\r\n<div id=\"root\"></div>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\");\r\nconst element = <div className=\"container\">Yuhuu</div>;\r\nReactDOM.render(element, rootElement);\r\n</script>\r\n```\r\n\r\nDifferences between HTML and JSX:\r\n\r\nIn HTML you write <code>class</code> in JSX <code>className</code>\r\n\r\nOur children in the div tag can be EXTERNALIZED which means made as a variable by:\r\n```\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script><div id=\"root\"></div>\r\n<div id=\"root\"></div>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\");\r\nconst greeting=\"HOLA!\"\r\nconst element = <div className=\"container\">{greeting}</div>;\r\nReactDOM.render(element, rootElement);\r\n</script>\r\n```\r\n\r\n<code>{greeting}</code> with curly brackets is called interpolation! Interpolation is injecting pure JS into the JSX. Interpolation is denoted by curly brackets.  Interpolation allows us to dive in land of Javascript from the land of JSX.\r\n\r\nIn the interpolation, we can use anything that evaluates to an expression. It can as well be an anonymous function:\r\n```\r\nconst element = <div className=\"container\">{( ()=> greeting ) () ) }</div>;\r\n```\r\n\r\nWe can do interpolation within the properties:\r\n\r\n```\r\nconst greeting=\"HOLA!\";\r\nconst myClassName = \"container\";\r\nconst element = <div className={myClassName + \"__hi-there\"}>{greeting}</div>;\r\n```\r\n\r\nAnother way how to give component props is:\r\n```\r\nconst props = {\r\nclassName: \"container\",\r\nchildren: \"Hello there\",\r\n};\r\nconst element = (\r\n<div {...props} />\r\n)\r\n\r\n```\r\n\r\nOr these props can be stored in a function:\r\n```\r\nconst message= props => <div>{props.msg}</div>\r\nconst element =(\r\n<div className=\"container\">\r\n  {message({msg: \"ahoj\"})}\r\n  {message({msg: \"hi\"})}\r\n</div>\r\n)\r\n\r\n```\r\n\r\nBut this will unfortunatelly NOT run. Babbel will interpret message as undefined variable. We need to capitalize message. Capitalization tells DOM that this is not a regular variable, rather it is a DOM element.\r\n\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nconst Message= props => <div>{props.msg}</div>\r\nconst element =(\r\n<div className=\"container\">\r\n  <Message msg=\"ahoj\" />\r\n  <Message msg=\"hi\" />\r\n</div>)\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n\r\n```\r\n\r\nThis is our first react element. It is defined as a functional element and it is passed a prop called <code>msg</code> to it, which is then displayed in between of div tag.\r\n\r\nDefinition of the component is here:\r\n```\r\nconst Message= props => <div>{props.msg}</div>\r\n```\r\n\r\nIt can also be defined like this:\r\n```\r\nfunction Message (props){\r\n return <div>{props.msg}</div>\r\n}\r\n```\r\n\r\nWhen we want to pass props to components we should make sure we will get correct types (string, number, etc). In order to do so, we will be using <code>propTypes</code>.\r\n\r\nLets see how this is done:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nfunction SayHello (props){ \r\n  return (\r\n    <div> Hello {props.firstName} {props.lastName}</div>\r\n  )\r\n}\r\n\r\nconst PropTypes= {\r\n  string(props, propName, componentName){\r\n    if (typeof props[propName] !== \"string\"){\r\n     return new Error (\r\n       \"you should pass a strin for ${propName} in ${componenetName} but you provided ${typeof props[propName]}\"\r\n       )\r\n    }\r\n  }\r\n}\r\n\r\nSayHello.propTypes ={\r\n  firstName: PropTypes.string,\r\n  lastName: PropTypes.string,\r\n}\r\n\r\nconst element= (\r\n  <div>\r\n   <SayHello firstName={true} lastName=\"S\" />\r\n  </div>\r\n  )\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nAbove is our own implementation of prop types. In console we should get error, because we are passing incorrect type. We pass <code>boolean</code> instead of <code>string</code>.\r\n\r\nAlternatively we can use prop types provided by React:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nfunction SayHello (props){ \r\n  return (\r\n    <div> Hello {props.firstName} {props.lastName}</div>\r\n  )\r\n}\r\n\r\nSayHello.propTypes ={\r\n  firstName: PropTypes.string,\r\n  lastName: PropTypes.string,\r\n}\r\n\r\nconst element= (\r\n  <div>\r\n   <SayHello firstName={true} lastName=\"S\" />\r\n  </div>\r\n  )\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nAgain we should get an error. But we only get one, even though we should get two errors.\r\nReason is that properties are optional, therefore we need to add <code>.isRequired</code>:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nfunction SayHello (props){ \r\n  return (\r\n    <div> Hello {props.firstName} {props.lastName}</div>\r\n  )\r\n}\r\n\r\nSayHello.propTypes ={\r\n  firstName: PropTypes.string.isRequired,\r\n  lastName: PropTypes.string.isRequired,\r\n}\r\n\r\nconst element= (\r\n  <div>\r\n   <SayHello firstName={true} lastName=\"S\" />\r\n  </div>\r\n  )\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nAbove usage is for function components. For class components we use static property:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nclass SayHello extends React.Component{ \r\nstatic propTypes ={\r\n  firstName: PropTypes.string.isRequired,\r\n  lastName: PropTypes.string.isRequired,\r\n}\r\n  render () {\r\n  const {firstName, lastName} = this.props\r\n  return (\r\n    <div> Hello {firstName} {lastName}</div>\r\n  )\r\n  }\r\n}\r\n\r\nSayHello.propTypes ={\r\n  firstName: PropTypes.string.isRequired,\r\n  lastName: PropTypes.string.isRequired,\r\n}\r\n\r\nconst element= (\r\n  <div>\r\n   <SayHello firstName={true} lastName={false} />\r\n  </div>\r\n  )\r\nReactDOM.render(element, rootElement)\r\n</script>\r\n```\r\n\r\nHow to render a message <code>\"No Message\"</code> when we don't provide message to the component:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\n\r\nfunction Message ({message}){\r\n  if (!message){\r\n  return <div>No message</div>\r\n  }\r\n  return <div>{message}</div>\r\n}\r\n\r\nReactDOM.render( <Message message={null} />, rootElement)\r\n </script>\r\n```\r\n\r\nThe same thing using ternary:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\n\r\nfunction Message ({message}){\r\n  \r\n  return ( message ? <div>{message}</div> : <div>No message</div>)\r\n}\r\n\r\nReactDOM.render( <Message message={null} />, rootElement)\r\n </script>\r\n```\r\n\r\nIf we want to wrap everything in a <code>div</code> component we will need to do interpolation:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\n\r\nfunction Message ({message}){\r\n  \r\n  return ( \r\n  <div>\r\n  {message ? <div>{message}</div> : <div>No message</div>}\r\n  </div>\r\n  )\r\n}\r\n\r\nReactDOM.render( <Message message={null} />, rootElement)\r\n </script>\r\n```\r\n\r\nRe-render the component - building a current time displaying component.\r\n\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\n\r\nfunction tick (){\r\n  const time = new Date().toLocaleTimeString()\r\n  const element = <div> It is {time} </div>\r\n  ReactDOM.render(element, rootElement)\r\n}\r\n\r\ntick()\r\nsetInterval(tick, 1000)\r\n </script>\r\n```\r\n\r\nSpreading properties on an element. \r\n\r\nClassical way to add properties is this:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n\r\n<style>\r\n.box{\r\n  border-style: solid;\r\n}\r\n\r\n.box--small{\r\n  width: 60px;\r\n  height: 60px;\r\n}\r\n</style>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\n\r\nconst element = (<div>\r\n                  <div className=\"box box--small\" style= {{paddingLeft: \"20px\"}}>box</div>\r\n        </div>)\r\n\r\nReactDOM.render(element, rootElement)\r\n\r\n </script>\r\n```\r\n\r\nBut we can also spread properties:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n\r\n<style>\r\n.box{\r\n  border-style: solid;\r\n}\r\n\r\n.box--small{\r\n  width: 60px;\r\n  height: 60px;\r\n}\r\n</style>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nconst props ={\r\n  className:\"box box--small\",\r\n  style: {paddingLeft: \"20px\"},\r\n}\r\nconst element = (<div>\r\n                  <div {...props }>box</div>\r\n        </div>)\r\nReactDOM.render(element, rootElement)\r\n </script>\r\n```\r\n\r\nWe can also store <code>className</code> in a variable:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n\r\n<style>\r\n.box{\r\n  border-style: solid;\r\n}\r\n\r\n.box--small{\r\n  width: 60px;\r\n  height: 60px;\r\n}\r\n</style>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nconst className = \"box box--small\"\r\nconst props ={\r\n  className,\r\n  style: {paddingLeft: \"20px\"},\r\n}\r\nconst element = (<div>\r\n                  <div {...props }>box</div>\r\n        </div>)\r\nReactDOM.render(element, rootElement)\r\n </script>\r\n```\r\n\r\nHow we can manually set the state in React:\r\n```\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script>\r\n\r\n<script type=\"text/babel\">\r\nconst rootElement = document.getElementById(\"root\")\r\nconst state ={eventCount: 0, username: ''}\r\n\r\nfunction App(){\r\n  return (\r\n    <div>\r\n      <p>There have been {state.eventCount}</p>\r\n    <p><button>Click Me</button></p>\r\n    <p>You typed: {state.username} </p>\r\n    <p><input /></p>\r\n  </div>\r\n   )\r\n}\r\n\r\nsetState({eventCount: 10})\r\nsetState({username: \"mia\"})\r\n\r\nfunction setState(newState){\r\n  Object.assign(state, newState)\r\n  renderApp()\r\n}\r\n\r\nfunction renderApp(){\r\n  ReactDOM.render(\r\n  <App />, \r\n  rootElement\r\n  )\r\n}\r\nrenderApp()\r\n </script>\r\n```","frontmatter":{"date":"2019-09-28","title":"Intro to React"},"fields":{"slug":"/Intro_to_React/"},"timeToRead":18,"html":"<p><img src=\"https://i.imgur.com/4tBPaPE.png\" title=\"React logo\"></p>\n<p>React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having HTML, CSS and Javascript in one file. </p>\n<p>React is a closed environmnet and can be run in browser, on your local machine (your PC) or on phones (such as Android, etc).</p>\n<p>When I am developing a website in React I need to be able to see what I am building. I can do these:</p>\n<p><strong>A/</strong> doubleclick on my html file (index.html) and open it in browser. However, it won't really work. Other pages will not load, because I am only openineg filepath in browser.</p>\n<p><strong>B/</strong> run a web server locally on my machine (pc)</p>\n<p>In order to run a web server on my machine, I need to install <code>node.js</code>.</p>\n<p>In order to be able to use React in a <strong>BROWSER</strong> I need a package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n</code></pre>\n<blockquote>\n<p>More on this in official documentation here:</p>\n</blockquote>\n<p><a href=\"https://reactjs.org/docs/add-react-to-a-website.html\">https://reactjs.org/docs/add-react-to-a-website.html</a></p>\n<p>These script tags in html are equivalent to a file in my project called <code>package.json</code> which is automatically provided by Gatsby:</p>\n<pre><code>\"dependencies\": {\n    \"gatsby\": \"^2.15.28\",\n    \"react\": \"^16.10.0\",\n    \"react-dom\": \"^16.10.0\"\n},\n</code></pre>\n<blockquote>\n<p>There are 2 ways how I can import React. </p>\n</blockquote>\n<p><strong>A)</strong> I need to  import React:</p>\n<pre><code>import React from \"react\";\n</code></pre>\n<blockquote>\n<p>Then I'm using:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\n\n}\n</code></pre>\n<p><strong>B)</strong> I can only import { Component } from \"react\"</p>\n<pre><code>import { Component } from \"react\";\n</code></pre>\n<blockquote>\n<p>Then Im using:</p>\n</blockquote>\n<pre><code>class MyClass extends Component(){\n\n}\n</code></pre>\n<blockquote>\n<p>I can import ReactDOM in 2 ways. </p>\n</blockquote>\n<p><strong>A)</strong> We import everything that is in ReactDOM, all their methods. On of their methods is called render:</p>\n<pre><code>import ReactDOM from \"react-dom\";\n</code></pre>\n<blockquote>\n<p>Then I am using this render method:</p>\n</blockquote>\n<pre><code>ReactDOM.render(&#x3C;p>Hi&#x3C;/p>, document.getElementById(\"app\"));\n</code></pre>\n<p><strong>B)</strong> In this way we are only cherry-picking to import one specific method from reactDOM and this method is called render:</p>\n<pre><code>import { render } from\"react-dom\";\n</code></pre>\n<blockquote>\n<p>Then I am using this render method:</p>\n</blockquote>\n<pre><code>render(&#x3C;p>Hi&#x3C;/p>, document.getElementById(\"app\"));\n</code></pre>\n<blockquote>\n<p>In render method we have 2 possibilities to generate our component in a specific DOM element:</p>\n</blockquote>\n<p><strong>A)</strong> One way is to use document.getElementById</p>\n<pre><code>render(&#x3C;p>Hi&#x3C;/p>, document.getElementById(\"app\"));\n</code></pre>\n<p><strong>B</strong> Another way is to use document.querySelector:</p>\n<pre><code>render(&#x3C;p>Hi&#x3C;/p>, document.querySelctor(\"#app\"));\n</code></pre>\n<blockquote>\n<p>Within React return statement I can only add parent component:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;p>Hello&#x3C;/p>\n    )\n  }\n}\n</code></pre>\n<blockquote>\n<p>I cannot write this:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;p>Hello&#x3C;/p>\n        &#x3C;p>World&#x3C;/p>\n    )\n  }\n}\n</code></pre>\n<blockquote>\n<p>To solve to have paralell tags, we can wrap them in div:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;div>\n          &#x3C;p>Hello&#x3C;/p>\n          &#x3C;p>World&#x3C;/p>\n        &#x3C;/div>  \n    )\n  }\n}\n</code></pre>\n<blockquote>\n<p>Alternatively if we dont want to wrapt them in divs, we can wrap them in React.Fragment:</p>\n</blockquote>\n<pre><code>class MyClass extends React.Component(){\nrender (){\n    return (\n        &#x3C;React.Fragment>\n          &#x3C;p>Hello&#x3C;/p>\n          &#x3C;p>World&#x3C;/p>\n        &#x3C;/React.Fragment>  \n    )\n  }\n}\n</code></pre>\n<p><strong>HTML scripts equivalent to React</strong></p>\n<p>Create a new file with .html extention. For example: site.html</p>\n<p>You can open this file in the browser (simply double-clicking on the file). Browser will open up a completely blank page.</p>\n<p>Now we can open it in editor (for example note++, etc) and add a <code>div</code> tag in it id of root:</p>\n<pre><code>&#x3C;div id=\"root\">Hi&#x3C;/div>\n</code></pre>\n<p>Refresh the browser and you wil see <code>Hi</code> displayed. But let's remove hard coded <code>Hi</code> and we will play around how we can place other elements within the root div.</p>\n<p>In HTML in between of script tags, we can write regular Javascript</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/javascript\">\n&#x3C;/script>\n</code></pre>\n<p>In between script tags we will now write a script that will add a new element to the div root\n.</p>\n<p>To target a div with id root, we write <code>document.getElementById</code></p>\n<pre><code>const rootElement = document.getElementById(\"root\");\n</code></pre>\n<p>To create a new element we use <code>document.createElement</code></p>\n<pre><code>const element = document.createElement(\"div\");\n</code></pre>\n<p>To add attributes to our new div, we use following syntax:</p>\n<pre><code>element.textContent = \"Hello World!\";\nelement.className = \"container\";\n</code></pre>\n<p>It is equivalent and will eventually  look like:</p>\n<pre><code>&#x3C;div className=\"container\">Hello World!&#x3C;/div>\n</code></pre>\n<p>Now we need to add this element to our root div by syntax:</p>\n<pre><code>rootElement.appendChild(element);\n</code></pre>\n<p>Entire code will look like this:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/javascript\">\nconst rootElement = document.getElementById(\"root\");\nconst element = document.createElement(\"div\");\nelement.textContent = \"Hello World!\";\nelement.className = \"container\";\nrootElement.appendChild(element);\n&#x3C;/script>\n</code></pre>\n<p>Now we will do the same with REACT.</p>\n<p>First we need to import react to our HTML using script tags. Add following to your HTML file:</p>\n<pre><code>&#x3C;!-- Load React. -->\n&#x3C;!-- Note: when deploying, replace \"development.js\" with \"production.min.js\". -->\n&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n</code></pre>\n<p>Now we will use react to create our elements.</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/javascript\">\nconst rootElement = document.getElementById(\"root\");\n&#x3C;/script>\n</code></pre>\n<p>In order to create new element we will use React.createElement which has 3 paramenters:</p>\n<p><strong>1/</strong> which element it is - div</p>\n<p><strong>2/</strong> are ther eany atributes - className</p>\n<p><strong>3/</strong> and the text itself</p>\n<pre><code>const element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\");\n</code></pre>\n<p>In <code>React.createElement</code>, we can have any number of childeren like \"Yuhuu\" there:</p>\n<pre><code>const element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\", \"Cool\", \"Hell yeah\");\n</code></pre>\n<p>The above ones will be an array of children in the backend.</p>\n<p>Another way to generate children is to use className called children and add the array of children there:</p>\n<pre><code>const element = React.createElement(\"div\", {className: \"container\", children: [\"Yuhuu\", \"Cool\", \"Hell yeah\"]});\n</code></pre>\n<p>Then we will render this element:</p>\n<pre><code>ReactDOM.render(element, rootElement);\n</code></pre>\n<p>Entire code looks like this:</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/javascript\">\nconst rootElement = document.getElementById(\"root\");\nconst element = React.createElement(\"div\", {className: \"container\" }, \"Yuhuu\");\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>Writing entire app with <code>React.createElement</code> is possible but not practical. It would be better if we could use regular html tags in the html. For example:\n<code>const element = &#x3C;div>Hello world&#x3C;/div></code></p>\n<p>We can do it like this:</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/javascript\">\nconst rootElement = document.getElementById(\"root\");\nconst element = &#x3C;div>Hello world&#x3C;/div>\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>But if we run this, we will get a syntax error, where <code>&#x3C;</code> is not a valid syntax.</p>\n<p>Such construct like <code><code>&#x3C;div>Hello world&#x3C;/div></code></code> is called JSX. And in order to be interpretted as <code>React.createElement</code>, it needs to be TRANSPILED and we can use Babbel to do it - Babbel is a transpiler, which takes JSX and converts it to regular Javascript.</p>\n<p>In order to use Babbel to transpile our JSX code to pure Javascript code, we need to import Babbel standalone using script</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n</code></pre>\n<p>And we need to change <code>text/javascript</code> to <code>text/babel</code></p>\n<pre><code>&#x3C;script type=\"text/javascript\">\n</code></pre>\n<p>Entire code: </p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\");\nconst element = &#x3C;div className=\"container\">Yuhuu&#x3C;/div>;\nReactDOM.render(element, rootElement);\n&#x3C;/script>\n</code></pre>\n<p>Differences between HTML and JSX:</p>\n<p>In HTML you write <code>class</code> in JSX <code>className</code></p>\n<p>Our children in the div tag can be EXTERNALIZED which means made as a variable by:</p>\n<pre><code>&#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\");\nconst greeting=\"HOLA!\"\nconst element = &#x3C;div className=\"container\">{greeting}&#x3C;/div>;\nReactDOM.render(element, rootElement);\n&#x3C;/script>\n</code></pre>\n<p><code>{greeting}</code> with curly brackets is called interpolation! Interpolation is injecting pure JS into the JSX. Interpolation is denoted by curly brackets.  Interpolation allows us to dive in land of Javascript from the land of JSX.</p>\n<p>In the interpolation, we can use anything that evaluates to an expression. It can as well be an anonymous function:</p>\n<pre><code>const element = &#x3C;div className=\"container\">{( ()=> greeting ) () ) }&#x3C;/div>;\n</code></pre>\n<p>We can do interpolation within the properties:</p>\n<pre><code>const greeting=\"HOLA!\";\nconst myClassName = \"container\";\nconst element = &#x3C;div className={myClassName + \"__hi-there\"}>{greeting}&#x3C;/div>;\n</code></pre>\n<p>Another way how to give component props is:</p>\n<pre><code>const props = {\nclassName: \"container\",\nchildren: \"Hello there\",\n};\nconst element = (\n&#x3C;div {...props} />\n)\n</code></pre>\n<p>Or these props can be stored in a function:</p>\n<pre><code>const message= props => &#x3C;div>{props.msg}&#x3C;/div>\nconst element =(\n&#x3C;div className=\"container\">\n  {message({msg: \"ahoj\"})}\n  {message({msg: \"hi\"})}\n&#x3C;/div>\n)\n</code></pre>\n<p>But this will unfortunatelly NOT run. Babbel will interpret message as undefined variable. We need to capitalize message. Capitalization tells DOM that this is not a regular variable, rather it is a DOM element.</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nconst Message= props => &#x3C;div>{props.msg}&#x3C;/div>\nconst element =(\n&#x3C;div className=\"container\">\n  &#x3C;Message msg=\"ahoj\" />\n  &#x3C;Message msg=\"hi\" />\n&#x3C;/div>)\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>This is our first react element. It is defined as a functional element and it is passed a prop called <code>msg</code> to it, which is then displayed in between of div tag.</p>\n<p>Definition of the component is here:</p>\n<pre><code>const Message= props => &#x3C;div>{props.msg}&#x3C;/div>\n</code></pre>\n<p>It can also be defined like this:</p>\n<pre><code>function Message (props){\n return &#x3C;div>{props.msg}&#x3C;/div>\n}\n</code></pre>\n<p>When we want to pass props to components we should make sure we will get correct types (string, number, etc). In order to do so, we will be using <code>propTypes</code>.</p>\n<p>Lets see how this is done:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nfunction SayHello (props){ \n  return (\n    &#x3C;div> Hello {props.firstName} {props.lastName}&#x3C;/div>\n  )\n}\n\nconst PropTypes= {\n  string(props, propName, componentName){\n    if (typeof props[propName] !== \"string\"){\n     return new Error (\n       \"you should pass a strin for ${propName} in ${componenetName} but you provided ${typeof props[propName]}\"\n       )\n    }\n  }\n}\n\nSayHello.propTypes ={\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n}\n\nconst element= (\n  &#x3C;div>\n   &#x3C;SayHello firstName={true} lastName=\"S\" />\n  &#x3C;/div>\n  )\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>Above is our own implementation of prop types. In console we should get error, because we are passing incorrect type. We pass <code>boolean</code> instead of <code>string</code>.</p>\n<p>Alternatively we can use prop types provided by React:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nfunction SayHello (props){ \n  return (\n    &#x3C;div> Hello {props.firstName} {props.lastName}&#x3C;/div>\n  )\n}\n\nSayHello.propTypes ={\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n}\n\nconst element= (\n  &#x3C;div>\n   &#x3C;SayHello firstName={true} lastName=\"S\" />\n  &#x3C;/div>\n  )\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>Again we should get an error. But we only get one, even though we should get two errors.\nReason is that properties are optional, therefore we need to add <code>.isRequired</code>:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nfunction SayHello (props){ \n  return (\n    &#x3C;div> Hello {props.firstName} {props.lastName}&#x3C;/div>\n  )\n}\n\nSayHello.propTypes ={\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n}\n\nconst element= (\n  &#x3C;div>\n   &#x3C;SayHello firstName={true} lastName=\"S\" />\n  &#x3C;/div>\n  )\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>Above usage is for function components. For class components we use static property:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nclass SayHello extends React.Component{ \nstatic propTypes ={\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n}\n  render () {\n  const {firstName, lastName} = this.props\n  return (\n    &#x3C;div> Hello {firstName} {lastName}&#x3C;/div>\n  )\n  }\n}\n\nSayHello.propTypes ={\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n}\n\nconst element= (\n  &#x3C;div>\n   &#x3C;SayHello firstName={true} lastName={false} />\n  &#x3C;/div>\n  )\nReactDOM.render(element, rootElement)\n&#x3C;/script>\n</code></pre>\n<p>How to render a message <code>\"No Message\"</code> when we don't provide message to the component:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\n\nfunction Message ({message}){\n  if (!message){\n  return &#x3C;div>No message&#x3C;/div>\n  }\n  return &#x3C;div>{message}&#x3C;/div>\n}\n\nReactDOM.render( &#x3C;Message message={null} />, rootElement)\n &#x3C;/script>\n</code></pre>\n<p>The same thing using ternary:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\n\nfunction Message ({message}){\n  \n  return ( message ? &#x3C;div>{message}&#x3C;/div> : &#x3C;div>No message&#x3C;/div>)\n}\n\nReactDOM.render( &#x3C;Message message={null} />, rootElement)\n &#x3C;/script>\n</code></pre>\n<p>If we want to wrap everything in a <code>div</code> component we will need to do interpolation:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\n\nfunction Message ({message}){\n  \n  return ( \n  &#x3C;div>\n  {message ? &#x3C;div>{message}&#x3C;/div> : &#x3C;div>No message&#x3C;/div>}\n  &#x3C;/div>\n  )\n}\n\nReactDOM.render( &#x3C;Message message={null} />, rootElement)\n &#x3C;/script>\n</code></pre>\n<p>Re-render the component - building a current time displaying component.</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\n\nfunction tick (){\n  const time = new Date().toLocaleTimeString()\n  const element = &#x3C;div> It is {time} &#x3C;/div>\n  ReactDOM.render(element, rootElement)\n}\n\ntick()\nsetInterval(tick, 1000)\n &#x3C;/script>\n</code></pre>\n<p>Spreading properties on an element. </p>\n<p>Classical way to add properties is this:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n\n&#x3C;style>\n.box{\n  border-style: solid;\n}\n\n.box--small{\n  width: 60px;\n  height: 60px;\n}\n&#x3C;/style>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\n\nconst element = (&#x3C;div>\n                  &#x3C;div className=\"box box--small\" style= {{paddingLeft: \"20px\"}}>box&#x3C;/div>\n        &#x3C;/div>)\n\nReactDOM.render(element, rootElement)\n\n &#x3C;/script>\n</code></pre>\n<p>But we can also spread properties:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n\n&#x3C;style>\n.box{\n  border-style: solid;\n}\n\n.box--small{\n  width: 60px;\n  height: 60px;\n}\n&#x3C;/style>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nconst props ={\n  className:\"box box--small\",\n  style: {paddingLeft: \"20px\"},\n}\nconst element = (&#x3C;div>\n                  &#x3C;div {...props }>box&#x3C;/div>\n        &#x3C;/div>)\nReactDOM.render(element, rootElement)\n &#x3C;/script>\n</code></pre>\n<p>We can also store <code>className</code> in a variable:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n\n&#x3C;style>\n.box{\n  border-style: solid;\n}\n\n.box--small{\n  width: 60px;\n  height: 60px;\n}\n&#x3C;/style>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nconst className = \"box box--small\"\nconst props ={\n  className,\n  style: {paddingLeft: \"20px\"},\n}\nconst element = (&#x3C;div>\n                  &#x3C;div {...props }>box&#x3C;/div>\n        &#x3C;/div>)\nReactDOM.render(element, rootElement)\n &#x3C;/script>\n</code></pre>\n<p>How we can manually set the state in React:</p>\n<pre><code>&#x3C;div id=\"root\">&#x3C;/div>\n&#x3C;script src=\"https://unpkg.com/react@16.0.0-rc.3/umd/react.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/react-dom@16.0.0-rc.3/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\">&#x3C;/script>\n\n&#x3C;script type=\"text/babel\">\nconst rootElement = document.getElementById(\"root\")\nconst state ={eventCount: 0, username: ''}\n\nfunction App(){\n  return (\n    &#x3C;div>\n      &#x3C;p>There have been {state.eventCount}&#x3C;/p>\n    &#x3C;p>&#x3C;button>Click Me&#x3C;/button>&#x3C;/p>\n    &#x3C;p>You typed: {state.username} &#x3C;/p>\n    &#x3C;p>&#x3C;input />&#x3C;/p>\n  &#x3C;/div>\n   )\n}\n\nsetState({eventCount: 10})\nsetState({username: \"mia\"})\n\nfunction setState(newState){\n  Object.assign(state, newState)\n  renderApp()\n}\n\nfunction renderApp(){\n  ReactDOM.render(\n  &#x3C;App />, \n  rootElement\n  )\n}\nrenderApp()\n &#x3C;/script>\n</code></pre>"}},{"node":{"id":"c39798f0-f0e6-554d-90c8-da70a4424ebd","excerpt":"Deploying Website to Github Pages: Install Github pages to Gatsby Build website to github page, for example: https://addania.github.io…","rawMarkdownBody":"\r\n![](https://i.imgur.com/gUJE7Eu.png \"Github Logo\")\r\n\r\nDeploying Website to Github Pages:\r\n\r\n> Install Github pages to Gatsby\r\n```\r\nnpm install gh-pages --save-dev\r\n```\r\n> Build website to github page, for example: https://addania.github.io/\r\n```\r\nnpm run deploy\r\n```\r\n> References: \r\n\r\nhttps://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/","frontmatter":{"date":"2019-09-27","title":"Intro to Github Pages"},"fields":{"slug":"/Intro_to_Github_pages/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/gUJE7Eu.png\" title=\"Github Logo\"></p>\n<p>Deploying Website to Github Pages:</p>\n<blockquote>\n<p>Install Github pages to Gatsby</p>\n</blockquote>\n<pre><code>npm install gh-pages --save-dev\n</code></pre>\n<blockquote>\n<p>Build website to github page, for example: <a href=\"https://addania.github.io/\">https://addania.github.io/</a></p>\n</blockquote>\n<pre><code>npm run deploy\n</code></pre>\n<blockquote>\n<p>References: </p>\n</blockquote>\n<p><a href=\"https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\">https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/</a></p>"}},{"node":{"id":"da4a6e23-83f8-5549-a055-eebb91311371","excerpt":"Software to help create static website using React. They provide starter templates, ability to create multiple pages in their pages folder…","rawMarkdownBody":"\r\n\r\n![](https://i.imgur.com/rqXXcAi.png \"Gatsby Logo\")\r\n\r\nSoftware to help create static website using React. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically\r\n\r\n> To install Gatsby\r\n```\r\n```\r\n> To display basic commands in gatsby\r\n```\r\ngatsby --help\r\n````\r\n> To create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)\r\n```\r\ngatsby new addania.com https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n```\r\n> To start Gatsby react development environment for my new project I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop\r\n```\r\ngatsby develop\r\n````","frontmatter":{"date":"2019-09-26","title":"Intro to Gatsby"},"fields":{"slug":"/Intro_to_Gatsby/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/rqXXcAi.png\" title=\"Gatsby Logo\"></p>\n<p>Software to help create static website using React. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically</p>\n<blockquote>\n<p>To install Gatsby</p>\n</blockquote>\n<pre><code></code></pre>\n<blockquote>\n<p>To display basic commands in gatsby</p>\n</blockquote>\n<pre><code>gatsby --help\n</code></pre>\n<blockquote>\n<p>To create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)</p>\n</blockquote>\n<pre><code>gatsby new addania.com https://github.com/gatsbyjs/gatsby-starter-hello-world\n</code></pre>\n<blockquote>\n<p>To start Gatsby react development environment for my new project I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop</p>\n</blockquote>\n<pre><code>gatsby develop\n</code></pre>"}},{"node":{"id":"a7a25318-c161-5d90-9f3a-46e596b300ef","excerpt":"GETTING STARTED Git is a file versioning system. In order to install Git we need to have apt-get updated. To update apt-get To install Git…","rawMarkdownBody":"\r\n![](https://i.imgur.com/ZVeInG0.png \"Git Logo\")\r\n\r\n**GETTING STARTED**\r\n\r\nGit is a file versioning system.\r\n\r\n> In order to install Git we need to have apt-get updated. To update apt-get\r\n```\r\nsudo apt-get update\r\n```\r\n> To install Git\r\n```\r\nsudo apt-get install git\r\n```\r\n> To check version of Git\r\n```\r\ngit --version\r\n```\r\n> To set up username and email\r\n```\r\ngit config --global user.name \"addania\"\r\ngit config --global user.email \"mirka.schw@gmail.com\"\r\n```\r\n\r\n**DEFINITIONS**\r\n\r\n![](https://i.imgur.com/ba3JFiY.jpg \"Photo by Pixabay from Pexels\")\r\n\r\n**Local**\r\n\r\n>When we talk about LOCAL we mean anything that is stored locally on your computer hard drive.\r\n\r\n**Remote**\r\n\r\n>When we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.\r\n\r\n**GIT WORKFLOW**:\r\n\r\n![](https://i.imgur.com/cHDGtUJ.jpg \"Photo by Startup Stock Photos from Pexels\")\r\n\r\nFirst we need to link our LOCAL and REMOTE repositories using SSH Key.\r\n\r\nWe need to generate our LOCAL SSH key which we then paste to REMORE GitHub.\r\n\r\n\r\nImagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\r\n\r\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing <code>git init</code> command which will create a subfolder git in my current project folder.\r\n\r\n```\r\ngit init\r\n```\r\n\r\nThen I work on my project files and make changes to my website. Firstly, I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\r\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:\r\n```\r\ngit add .\r\ngit commit -m \"message goes here\"\r\n```\r\nWhen our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.\r\n\r\nThen we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\r\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention): <code>git remote add origin remoteRepositoryURL</code>\r\n\r\nFor example:\r\n```\r\ngit remote add origin git@github.com:addania/addania.com.git \r\n```\r\nTo verify if our new remote was added we can check the:\r\n```\r\ngit remote -v \r\n```\r\n\r\nThen we are ready to push our LOCAL git repository to the REMOTE Github repository:\r\n```\r\ngit push origin master\r\n```\r\n\r\n>To check status of my Git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:\r\n```\r\ngit status\r\n```\r\n> To see history of commits\r\n```\r\ngit log\r\n```\r\n> The git init command creates a new Git repository. Executing <code>git init</code> creates a <code>.git</code> subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:\r\n```\r\ngit init\r\n```\r\n> In order to commit anything, we first need to add files to staging area by using following command (dot means all files):\r\n```\r\ngit add . \r\n```\r\n> To commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. Git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:\r\n```\r\ngit commit\r\n```\r\n> To commit files to LOCAL git repository with a message already included in the command:\r\n```\r\ngit commit -m \"message goes here\"\r\n```\r\n> To see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):\r\n```\r\ngit remote -v\r\n```\r\n> To add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository\r\n```\r\ngit remote add origin git@github.com:addania/addania.com.git\r\n```\r\n\r\n> To rename origin with new url if I need to change my repository name:\r\n```\r\ngit remote set-url origin git@github.com:addania/addania.github.io.git\r\n```\r\n\r\n> To check how many branches I have in my repository, if there is only one, the main one will be called usually master:\r\n```\r\ngit branch\r\n```\r\n> To push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the branch in the project, main branch is called master:\r\n```\r\ngit push origin master\r\n```\r\n> If I don't want to write always <code>git push origin master -force</code> I can create upstream and link local to remote git by <code>-u</code>. After this command then I can use only git push to upload files\r\n```\r\ngit push -u origin master -f\r\n```\r\n> To overwrite anything on the REMOTE repository in master branch we can <code>force</code> push:\r\n```\r\ngit push origin master --force \r\n```\r\n> Pulling down files from REMOTE Git to local Git, where origin is name of my REMOTE Git and master is name of my branch:\r\n```\r\ngit pull origin master\r\n```\r\n\r\n>To create new branch on the LOCAL machine:\r\n```\r\ngit checkout -b [name_of_your_new_branch]\r\n```\r\n\r\n>For example, where convention is that 1 is number of issue on Github:\r\n```\r\ngit checkout -b Github1AddDay05Task02\r\n```\r\n\r\n>To create a new branch taking MASTER as a base for the code (it could be any other name of the branch):\r\n```\r\ngit checkout -b Github1AddDay05Task02 master\r\n```\r\n\r\n>To create a new branch taking Github2AddDay06 as a base for the code (it could be any othr name of the branch):\r\n```\r\ngit checkout -b Github1AddDay05Task02 Github2AddDay06\r\n```\r\n\r\n>This will switch from your current branch to the new branch.\r\n\r\n> You can always use <code>git status</code> to check on which branch you currently work.\r\n```\r\ngit status\r\n```\r\n\r\n> Push the branch <code>gh-pages</code> to Github :\r\n```\r\ngit push origin gh-pages\r\n```\r\n\r\n> To see Git log (historical commits):\r\n```\r\ngit log\r\n```\r\n\r\n> It only shows one page by default:\r\n\r\n>In order to see new line press <code>ENTER</code>.\r\n\r\n>In order to see new page press <code>SPACE</code>.\r\n\r\n>In order to see new page press <code>Q</code>.\r\n\r\n> Here is an example log of latest commit:\r\n```\r\ncommit 29d6a97075b71993ca66b67a04ed9e038f4330ed (HEAD -> Github1AddDay05Task02, origin/gh-pages, gh-pages)\r\nAuthor: addania <mirka.schw@gmail.com>\r\nDate:   Sat Dec 14 17:10:03 2019 +0100\r\nadding day 4 tast 2\r\n```\r\n\r\n> Commit ID is <code>29d6a97075b71993ca66b67a04ed9e038f4330ed</code>\r\n\r\n> <code>HEAD</code> means that this is the commit on which I currently work, this is the latest commit which I did\r\n\r\n> After <code>-></code> we have all branches which are on this commit, they are also called tags (or marks).\r\n\r\n>It means my commit 29d6a97075b71993ca66b67a04ed9e038f4330ed is on branch <code>Github1AddDay05Task02</code>, <code>origin/gh-pages</code> and <code>gh-pages</code>.\r\n\r\n1// **gh-pages** is my LOCAL version of the branch\r\n\r\n2// **origin/gh-pages** is my REMOTE version of the branch\r\n\r\n3// **Github1AddDay05Task02** is my new branch which I created with <code>git checkout -b Github1AddDay05Task02</code>\r\n\r\n> As soon as I create a new branch with <code>git checkout -b Github1AddDay05Task02</code> my latest commit will be on that branch.\r\n\r\n> Then I need to push my LOCAL branch to the REMOTE:\r\n```\r\ngit push origin Github1AddDay05Task02\r\n```\r\n\r\n> I can now go to Github and check if new branch was created.\r\n\r\n> How to switch branches to master branch:\r\n```\r\ngit checkout master\r\n```\r\n\r\n> How to switch branches to gh-pages branch:\r\n```\r\ngit checkout gh-pages\r\n```\r\n\r\n> How to switch branches to Github1AddDay05Task02 branch - how to change branch:\r\n```\r\ngit checkout Github1AddDay05Task02\r\n```\r\n\r\n> Then if I have couple of branches I always need to pay attention which branch I am on and from which branch I do <code>npm start</code> and which files I am then working on.\r\n\r\n> I can check on which branch I currently am by:\r\n```\r\ngit status\r\n```\r\n\r\n> Then when I am on correct branch then I can start my local development:\r\n```\r\nnpm start\r\n```\r\n\r\n> Then I can make changes to code on my new branch Github1AddDay05Task02\r\n\r\n> Afterwards I add the changes to local git:\r\n```\r\ngit add .\r\n```\r\n\r\n> Then I commit those changes:\r\n```\r\ngit commit -m \"fixing issue Github1\"\r\n```\r\n\r\n> And now I can push those changes to my REMOTE branch:\r\n```\r\ngit push origin Github1AddDay05Task02\r\n```\r\n> You can go to Github and see that our latest commit is present on branch: Github1AddDay05Task02 but is not present on other branches like the gh-pages branch.\r\n\r\n**MERGE**\r\n\r\n![](https://i.imgur.com/cZzbzhC.jpg \"Photo by Pixabay from Pexels\")\r\n\r\n> In order to merge this branch with the branch on which you have your main code (usually master, but in my case gh-pages branch), we can go to -> Pull Requests and click on <code>Create a new Pull Request</code>\r\n\r\n> Then it will show the <code>Compare changes</code> page\r\n\r\n1// <code>Base</code> is the main branch TO WHICH I want to merge my code to. In my case gh-pages (but usually will be master)\r\n\r\n2// <code>Compare</code> is the branch FROM WHICH I want to put data to the base. In my case Github1AddDay05Task02\r\n\r\n> Here I can see all changes that were made.\r\n\r\n> Next I can click <code>Create Pull Request</code>\r\n\r\n> I will be redirected to <code>Open Pull Request</code> page where I add title and description of the pull request. \r\n\r\n> I can assign someone, add reviewers, labels and projects to this Pull Request.\r\n\r\n> Then click <code>Create Pull Request</code>\r\n\r\n> Then someone will comment on the code, review changes, request change of the code or approve changes.\r\n\r\n> If it is approved I can click on <code>Merge pull request</code>.\r\n\r\n> Then click <code>Confirm Merge</code>.\r\n\r\n> I should get the message:\r\n```\r\nPull request successfully merged and closed\r\n```\r\n> Now gh-pages branch on the REMOTE has CHANGED!!! We need to now download those latest changes to my LOCAL!!! We can use <code>git pull</code> or <code>git fetch</code>:\r\n```\r\ngit fetch\r\n```\r\n\r\n```\r\ngit pull\r\n```\r\n\r\n> <code>Git pull</code> will make <code>git fetch</code> plus it will also merge REMOTE changes with my LOCAL changes (which I made meanwhile but did not put on REMOTE). <code>Git fetch</code> will only fetch data, and will not merge in case I did some changes meanwhile on LOCAL which were not on REMOTE. Fetch will always work. Pull can fail if changes on my LOCAL are not compatible with changes on REMOTE.\r\n\r\n> It does not matter on which branch I make the pull or fetch, it will take all the data from all branches. However, you might get an error:\r\n```\r\nThere is no tracking information for the current branch.\r\n```\r\n\r\nIt means that Git is not able to match LOCAL and REMOTE branch names automatically. Therefore you might need to use pull for a specific branch instead, to get all the updates:\r\n```\r\ngit pull origin master\r\n```\r\n\r\nor\r\n\r\n```\r\ngit pull origin master Github1AddDay05Task02\r\n```\r\n\r\n> My branch Github1AddDay05Task02 still exists. If we want to delete this branch I can do following:\r\n\r\n1// go to the pull request from where we merged it and at the end there will be button: <code>Delete branch</code>\r\n\r\nor\r\n\r\n2// I can go to <code>Branches</code> and click on the trash icon to delete it\r\n\r\n> To delete this branch on REMOTE from terminal:\r\n```\r\ngit push <remote_name> --delete <branch_name>\r\n```\r\n\r\n> In our case the code will be:\r\n```\r\ngit push origin --delete Github1AddDay05Task02\r\n```\r\n\r\n>To delete this branch on LOCAL we can do it by these 2 commands:\r\n```\r\ngit branch -d branch_name\r\ngit branch -D branch_name\r\n```\r\nOne is with <code>‘d’</code> and one with <code>‘D’</code>.\r\n\r\n1// The <code>-d</code> option stands for --delete, which would delete the local branch, only if you have already pushed and merged it with your remote branches.\r\n\r\n2// The <code>-D</code> option stands for --delete --force, which deletes the branch regardless of its push and merge status, so careful with this one!\r\n\r\n> We can merge branch into another one also in terminal. For example I want to merge my PR1 branch into master branch. First we run <code>git checkout master</code> to change the active branch back to master. \r\n```\r\ngit checkout master\r\n```\r\n> Then we run the command <code>git merge PR1</code> to merge the new feature into the master branch.\r\n```\r\ngit merge PR1\r\n```\r\n> Note that <code>git merge</code> merges the specified branch into the <code>currently active</code> branch. So we need to be on the branch that we are merging into.\r\n\r\n> Note also that this only merged the branches LOCALLY. We still need to push changes to REMOTE.\r\n```\r\ngit push origin master\r\n```\r\n\r\n> Performing this might not necessarily automatically close the PR on Github (if the PRs base was NOT master) but it can close it automatically (if the PRs base was master). Weird stuff, kinda.\r\n\r\n**RESOLVING CONFLICTS**\r\n\r\n![](https://i.imgur.com/EN9pOyE.jpg \"Photo by Steve Johnson from Pexels\")\r\n\r\n> Imagine you want to merge branch PR2 to your master branch. However, you notice on Github, that there are some conflicts and automatic merge cannot happen. In such cases you need to manually resolve the conflicts. How to do it? Basically we will first merge master to our PR2 branch (yes, exactly, it is vise versa of what you might have thought.. or was it just me? :) ). Then we resolve the conflicts on our PR2 branch, then we commit changes to PR2 and we are ready to merge PR2 to master. Detailled steps are described below:\r\n\r\n> First we go to our terminal.\r\n\r\n> We go to our PR2 branch using checkout command:\r\n```\r\ngit checkout PR2\r\n```\r\n\r\n> As we are now on PR2 branch we can merge master to our PR2 by <code>git merge</code>.\r\n```\r\ngit merge master\r\n```\r\n\r\n>Above command will merge master to our PR2 branch (our currently active branch on which we are now).\r\n\r\n> As you do the merge you will most likely get an error, that merge could not be done manually and you will get a conflicted file. Please note, that we are still on our PR2 branch, but partially it was merged already with code from master, except for the conflicts. Let's assume that conflicting file is <code>App.js</code>.\r\n\r\n> We need to go to the <code>App.js</code> and this file will contain weird characters, HEAD and master:\r\n```\r\n<<<<<<< HEAD\r\ncode1\r\n=======\r\ncode2\r\n>>>>>>> master\r\n```\r\n\r\n> This basically points you to what exactly the conflict is. \r\n\r\n> <code>HEAD</code> means what is on your current branch (in our case branch PR2). This is basically **code1**, which is between\r\n```\r\n<<<<<<< HEAD\r\n```\r\n\r\nand \r\n```\r\n=======\r\n```\r\n\r\n> Above **code1** is in conflict with its equivalnt **code2** on master branch. In file it will be code between:\r\n```\r\n=======\r\n```\r\nand \r\n```\r\n>>>>>>> master\r\n```\r\n\r\n> At this point you need to decide if **code1** or **code2** is the correct one that should be kept.\r\n\r\n> In our case let's assume that **code1** is the correct one. Therefore, we will remove everything except for **code1**:\r\n```\r\ncode1\r\n```\r\n> **code1** stays in our file\r\n\r\n> We need to remove everything else. Also HEAD and master and all other characters:\r\n\r\n```\r\n<<<<<<< HEAD\r\n=======\r\ncode2\r\n>>>>>>> master\r\n```\r\n\r\n> Here I would recommend to double-check if our code is still working! Run your local server:\r\n```\r\nnpm start\r\n```\r\n\r\n>and check if merge and conflict resolution was correct and your app is still working. In my case for example, there was an error that one function which should be deleted was still imported in my file. Therefore, I can assume it is always necessary to check the app and run your tests after merge:\r\n```\r\nnpm run test\r\n```\r\n\r\n> Now it is time to commit and push the changes on PR2 branch from our LOCAL to REMOTE:\r\n```\r\ngit add .\r\n```\r\n\r\n```\r\ngit commit -m \"merging master to PR2, resolving conflicts\"\r\n```\r\n\r\n```\r\ngit push origin PR2\r\n```\r\n\r\n> We can check Github now. PR2 should now contain all code from master and its updates (additions) to master. We should be good to go and merge PR2 to master without conflicts. Yay :)\r\n\r\n**UNDO CHANGES**\r\n\r\n> To undo changes in a specific file without staging them use git <code>checkout</code> and a file path to the file which we want to revert changes done:\r\n```\r\ngit checkout src/functions/myFunction.js\r\n```\r\n**CODE STATISTICS**\r\n\r\n![](https://i.imgur.com/ydhaIIE.jpg \"Photo by Timur Saglambilek from Pexels\")\r\n\r\n> Display number of rows of code for each file - code statistics:\r\n```\r\ngit ls-files | xargs wc -l\r\n```\r\n\r\n> It will result in something like this:\r\n```\r\n38 src/App.css\r\n99 src/App.js\r\n36 src/components/Button.css\r\n23 src/components/Button.js\r\n24 src/components/Chart.js\r\n14 src/components/Filter.js\r\n27 src/components/Header.js\r\n```\r\n\r\n> Get statistics about users, number of changed files, how many insertions, how many deletions and net:\r\n```\r\ngit log --shortstat --pretty=\"%cE\" | sed 's/\\(.*\\)@.*/\\1/' | grep -v \"^$\" | awk 'BEGIN { line=\"\"; } !/^ / { if (line==\"\" || !match(line, $0)) {line = $0 \",\" line }} /^ / { print line \" # \" $0; line=\"\"}' | sort | sed -E 's/# //;s/ files? changed,//;s/([0-9]+) ([0-9]+ deletion)/\\1 0 insertions\\(+\\), \\2/;s/\\(\\+\\)$/\\(\\+\\), 0 deletions\\(-\\)/;s/insertions?\\(\\+\\), //;s/ deletions?\\(-\\)//' | awk 'BEGIN {name=\"\"; files=0; insertions=0; deletions=0;} {if ($1 != name && name != \"\") { print name \": \" files \" files changed, \" insertions \" insertions(+), \" deletions \" deletions(-), \" insertions-deletions \" net\"; files=0; insertions=0; deletions=0; name=$1; } name=$1; files+=$2; insertions+=$3; deletions+=$4} END {print name \": \" files \" files changed, \" insertions \" insertions(+), \" deletions \" deletions(-), \" insertions-deletions \" net\";}'\r\n```\r\n> It will result it something like this:\r\n```\r\nmirka.schw,: 311 files changed, 370168 insertions(+), 99040 deletions(-), 271128 net\r\n```\r\n\r\n> How to install new version of npm \r\n```\r\nnpm install -g npm\r\n```\r\n\r\n**VISUALS**\r\n\r\n![](https://i.imgur.com/qvRNfBN.png  \"Smart Git logo\")\r\n> Good visual Git software is called Smart Git(it is paid however):\r\n```\r\nSmart Git\r\n```","frontmatter":{"date":"2019-09-25","title":"Intro to Git"},"fields":{"slug":"/Intro_to_Git/"},"timeToRead":15,"html":"<p><img src=\"https://i.imgur.com/ZVeInG0.png\" title=\"Git Logo\"></p>\n<p><strong>GETTING STARTED</strong></p>\n<p>Git is a file versioning system.</p>\n<blockquote>\n<p>In order to install Git we need to have apt-get updated. To update apt-get</p>\n</blockquote>\n<pre><code>sudo apt-get update\n</code></pre>\n<blockquote>\n<p>To install Git</p>\n</blockquote>\n<pre><code>sudo apt-get install git\n</code></pre>\n<blockquote>\n<p>To check version of Git</p>\n</blockquote>\n<pre><code>git --version\n</code></pre>\n<blockquote>\n<p>To set up username and email</p>\n</blockquote>\n<pre><code>git config --global user.name \"addania\"\ngit config --global user.email \"mirka.schw@gmail.com\"\n</code></pre>\n<p><strong>DEFINITIONS</strong></p>\n<p><img src=\"https://i.imgur.com/ba3JFiY.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<p><strong>Local</strong></p>\n<blockquote>\n<p>When we talk about LOCAL we mean anything that is stored locally on your computer hard drive.</p>\n</blockquote>\n<p><strong>Remote</strong></p>\n<blockquote>\n<p>When we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.</p>\n</blockquote>\n<p><strong>GIT WORKFLOW</strong>:</p>\n<p><img src=\"https://i.imgur.com/cHDGtUJ.jpg\" title=\"Photo by Startup Stock Photos from Pexels\"></p>\n<p>First we need to link our LOCAL and REMOTE repositories using SSH Key.</p>\n<p>We need to generate our LOCAL SSH key which we then paste to REMORE GitHub.</p>\n<p>Imagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.</p>\n<p>Some softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing <code>git init</code> command which will create a subfolder git in my current project folder.</p>\n<pre><code>git init\n</code></pre>\n<p>Then I work on my project files and make changes to my website. Firstly, I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:</p>\n<pre><code>git add .\ngit commit -m \"message goes here\"\n</code></pre>\n<p>When our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.</p>\n<p>Then we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention): <code>git remote add origin remoteRepositoryURL</code></p>\n<p>For example:</p>\n<pre><code>git remote add origin git@github.com:addania/addania.com.git \n</code></pre>\n<p>To verify if our new remote was added we can check the:</p>\n<pre><code>git remote -v \n</code></pre>\n<p>Then we are ready to push our LOCAL git repository to the REMOTE Github repository:</p>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>To check status of my Git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:</p>\n</blockquote>\n<pre><code>git status\n</code></pre>\n<blockquote>\n<p>To see history of commits</p>\n</blockquote>\n<pre><code>git log\n</code></pre>\n<blockquote>\n<p>The git init command creates a new Git repository. Executing <code>git init</code> creates a <code>.git</code> subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:</p>\n</blockquote>\n<pre><code>git init\n</code></pre>\n<blockquote>\n<p>In order to commit anything, we first need to add files to staging area by using following command (dot means all files):</p>\n</blockquote>\n<pre><code>git add . \n</code></pre>\n<blockquote>\n<p>To commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. Git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:</p>\n</blockquote>\n<pre><code>git commit\n</code></pre>\n<blockquote>\n<p>To commit files to LOCAL git repository with a message already included in the command:</p>\n</blockquote>\n<pre><code>git commit -m \"message goes here\"\n</code></pre>\n<blockquote>\n<p>To see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):</p>\n</blockquote>\n<pre><code>git remote -v\n</code></pre>\n<blockquote>\n<p>To add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository</p>\n</blockquote>\n<pre><code>git remote add origin git@github.com:addania/addania.com.git\n</code></pre>\n<blockquote>\n<p>To rename origin with new url if I need to change my repository name:</p>\n</blockquote>\n<pre><code>git remote set-url origin git@github.com:addania/addania.github.io.git\n</code></pre>\n<blockquote>\n<p>To check how many branches I have in my repository, if there is only one, the main one will be called usually master:</p>\n</blockquote>\n<pre><code>git branch\n</code></pre>\n<blockquote>\n<p>To push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the branch in the project, main branch is called master:</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>If I don't want to write always <code>git push origin master -force</code> I can create upstream and link local to remote git by <code>-u</code>. After this command then I can use only git push to upload files</p>\n</blockquote>\n<pre><code>git push -u origin master -f\n</code></pre>\n<blockquote>\n<p>To overwrite anything on the REMOTE repository in master branch we can <code>force</code> push:</p>\n</blockquote>\n<pre><code>git push origin master --force \n</code></pre>\n<blockquote>\n<p>Pulling down files from REMOTE Git to local Git, where origin is name of my REMOTE Git and master is name of my branch:</p>\n</blockquote>\n<pre><code>git pull origin master\n</code></pre>\n<blockquote>\n<p>To create new branch on the LOCAL machine:</p>\n</blockquote>\n<pre><code>git checkout -b [name_of_your_new_branch]\n</code></pre>\n<blockquote>\n<p>For example, where convention is that 1 is number of issue on Github:</p>\n</blockquote>\n<pre><code>git checkout -b Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>To create a new branch taking MASTER as a base for the code (it could be any other name of the branch):</p>\n</blockquote>\n<pre><code>git checkout -b Github1AddDay05Task02 master\n</code></pre>\n<blockquote>\n<p>To create a new branch taking Github2AddDay06 as a base for the code (it could be any othr name of the branch):</p>\n</blockquote>\n<pre><code>git checkout -b Github1AddDay05Task02 Github2AddDay06\n</code></pre>\n<blockquote>\n<p>This will switch from your current branch to the new branch.</p>\n</blockquote>\n<blockquote>\n<p>You can always use <code>git status</code> to check on which branch you currently work.</p>\n</blockquote>\n<pre><code>git status\n</code></pre>\n<blockquote>\n<p>Push the branch <code>gh-pages</code> to Github :</p>\n</blockquote>\n<pre><code>git push origin gh-pages\n</code></pre>\n<blockquote>\n<p>To see Git log (historical commits):</p>\n</blockquote>\n<pre><code>git log\n</code></pre>\n<blockquote>\n<p>It only shows one page by default:</p>\n</blockquote>\n<blockquote>\n<p>In order to see new line press <code>ENTER</code>.</p>\n</blockquote>\n<blockquote>\n<p>In order to see new page press <code>SPACE</code>.</p>\n</blockquote>\n<blockquote>\n<p>In order to see new page press <code>Q</code>.</p>\n</blockquote>\n<blockquote>\n<p>Here is an example log of latest commit:</p>\n</blockquote>\n<pre><code>commit 29d6a97075b71993ca66b67a04ed9e038f4330ed (HEAD -> Github1AddDay05Task02, origin/gh-pages, gh-pages)\nAuthor: addania &#x3C;mirka.schw@gmail.com>\nDate:   Sat Dec 14 17:10:03 2019 +0100\nadding day 4 tast 2\n</code></pre>\n<blockquote>\n<p>Commit ID is <code>29d6a97075b71993ca66b67a04ed9e038f4330ed</code></p>\n</blockquote>\n<blockquote>\n<p><code>HEAD</code> means that this is the commit on which I currently work, this is the latest commit which I did</p>\n</blockquote>\n<blockquote>\n<p>After <code>-></code> we have all branches which are on this commit, they are also called tags (or marks).</p>\n</blockquote>\n<blockquote>\n<p>It means my commit 29d6a97075b71993ca66b67a04ed9e038f4330ed is on branch <code>Github1AddDay05Task02</code>, <code>origin/gh-pages</code> and <code>gh-pages</code>.</p>\n</blockquote>\n<p>1// <strong>gh-pages</strong> is my LOCAL version of the branch</p>\n<p>2// <strong>origin/gh-pages</strong> is my REMOTE version of the branch</p>\n<p>3// <strong>Github1AddDay05Task02</strong> is my new branch which I created with <code>git checkout -b Github1AddDay05Task02</code></p>\n<blockquote>\n<p>As soon as I create a new branch with <code>git checkout -b Github1AddDay05Task02</code> my latest commit will be on that branch.</p>\n</blockquote>\n<blockquote>\n<p>Then I need to push my LOCAL branch to the REMOTE:</p>\n</blockquote>\n<pre><code>git push origin Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>I can now go to Github and check if new branch was created.</p>\n</blockquote>\n<blockquote>\n<p>How to switch branches to master branch:</p>\n</blockquote>\n<pre><code>git checkout master\n</code></pre>\n<blockquote>\n<p>How to switch branches to gh-pages branch:</p>\n</blockquote>\n<pre><code>git checkout gh-pages\n</code></pre>\n<blockquote>\n<p>How to switch branches to Github1AddDay05Task02 branch - how to change branch:</p>\n</blockquote>\n<pre><code>git checkout Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>Then if I have couple of branches I always need to pay attention which branch I am on and from which branch I do <code>npm start</code> and which files I am then working on.</p>\n</blockquote>\n<blockquote>\n<p>I can check on which branch I currently am by:</p>\n</blockquote>\n<pre><code>git status\n</code></pre>\n<blockquote>\n<p>Then when I am on correct branch then I can start my local development:</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<blockquote>\n<p>Then I can make changes to code on my new branch Github1AddDay05Task02</p>\n</blockquote>\n<blockquote>\n<p>Afterwards I add the changes to local git:</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<blockquote>\n<p>Then I commit those changes:</p>\n</blockquote>\n<pre><code>git commit -m \"fixing issue Github1\"\n</code></pre>\n<blockquote>\n<p>And now I can push those changes to my REMOTE branch:</p>\n</blockquote>\n<pre><code>git push origin Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>You can go to Github and see that our latest commit is present on branch: Github1AddDay05Task02 but is not present on other branches like the gh-pages branch.</p>\n</blockquote>\n<p><strong>MERGE</strong></p>\n<p><img src=\"https://i.imgur.com/cZzbzhC.jpg\" title=\"Photo by Pixabay from Pexels\"></p>\n<blockquote>\n<p>In order to merge this branch with the branch on which you have your main code (usually master, but in my case gh-pages branch), we can go to -> Pull Requests and click on <code>Create a new Pull Request</code></p>\n</blockquote>\n<blockquote>\n<p>Then it will show the <code>Compare changes</code> page</p>\n</blockquote>\n<p>1// <code>Base</code> is the main branch TO WHICH I want to merge my code to. In my case gh-pages (but usually will be master)</p>\n<p>2// <code>Compare</code> is the branch FROM WHICH I want to put data to the base. In my case Github1AddDay05Task02</p>\n<blockquote>\n<p>Here I can see all changes that were made.</p>\n</blockquote>\n<blockquote>\n<p>Next I can click <code>Create Pull Request</code></p>\n</blockquote>\n<blockquote>\n<p>I will be redirected to <code>Open Pull Request</code> page where I add title and description of the pull request. </p>\n</blockquote>\n<blockquote>\n<p>I can assign someone, add reviewers, labels and projects to this Pull Request.</p>\n</blockquote>\n<blockquote>\n<p>Then click <code>Create Pull Request</code></p>\n</blockquote>\n<blockquote>\n<p>Then someone will comment on the code, review changes, request change of the code or approve changes.</p>\n</blockquote>\n<blockquote>\n<p>If it is approved I can click on <code>Merge pull request</code>.</p>\n</blockquote>\n<blockquote>\n<p>Then click <code>Confirm Merge</code>.</p>\n</blockquote>\n<blockquote>\n<p>I should get the message:</p>\n</blockquote>\n<pre><code>Pull request successfully merged and closed\n</code></pre>\n<blockquote>\n<p>Now gh-pages branch on the REMOTE has CHANGED!!! We need to now download those latest changes to my LOCAL!!! We can use <code>git pull</code> or <code>git fetch</code>:</p>\n</blockquote>\n<pre><code>git fetch\n</code></pre>\n<pre><code>git pull\n</code></pre>\n<blockquote>\n<p><code>Git pull</code> will make <code>git fetch</code> plus it will also merge REMOTE changes with my LOCAL changes (which I made meanwhile but did not put on REMOTE). <code>Git fetch</code> will only fetch data, and will not merge in case I did some changes meanwhile on LOCAL which were not on REMOTE. Fetch will always work. Pull can fail if changes on my LOCAL are not compatible with changes on REMOTE.</p>\n</blockquote>\n<blockquote>\n<p>It does not matter on which branch I make the pull or fetch, it will take all the data from all branches. However, you might get an error:</p>\n</blockquote>\n<pre><code>There is no tracking information for the current branch.\n</code></pre>\n<p>It means that Git is not able to match LOCAL and REMOTE branch names automatically. Therefore you might need to use pull for a specific branch instead, to get all the updates:</p>\n<pre><code>git pull origin master\n</code></pre>\n<p>or</p>\n<pre><code>git pull origin master Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>My branch Github1AddDay05Task02 still exists. If we want to delete this branch I can do following:</p>\n</blockquote>\n<p>1// go to the pull request from where we merged it and at the end there will be button: <code>Delete branch</code></p>\n<p>or</p>\n<p>2// I can go to <code>Branches</code> and click on the trash icon to delete it</p>\n<blockquote>\n<p>To delete this branch on REMOTE from terminal:</p>\n</blockquote>\n<pre><code>git push &#x3C;remote_name> --delete &#x3C;branch_name>\n</code></pre>\n<blockquote>\n<p>In our case the code will be:</p>\n</blockquote>\n<pre><code>git push origin --delete Github1AddDay05Task02\n</code></pre>\n<blockquote>\n<p>To delete this branch on LOCAL we can do it by these 2 commands:</p>\n</blockquote>\n<pre><code>git branch -d branch_name\ngit branch -D branch_name\n</code></pre>\n<p>One is with <code>‘d’</code> and one with <code>‘D’</code>.</p>\n<p>1// The <code>-d</code> option stands for --delete, which would delete the local branch, only if you have already pushed and merged it with your remote branches.</p>\n<p>2// The <code>-D</code> option stands for --delete --force, which deletes the branch regardless of its push and merge status, so careful with this one!</p>\n<blockquote>\n<p>We can merge branch into another one also in terminal. For example I want to merge my PR1 branch into master branch. First we run <code>git checkout master</code> to change the active branch back to master. </p>\n</blockquote>\n<pre><code>git checkout master\n</code></pre>\n<blockquote>\n<p>Then we run the command <code>git merge PR1</code> to merge the new feature into the master branch.</p>\n</blockquote>\n<pre><code>git merge PR1\n</code></pre>\n<blockquote>\n<p>Note that <code>git merge</code> merges the specified branch into the <code>currently active</code> branch. So we need to be on the branch that we are merging into.</p>\n</blockquote>\n<blockquote>\n<p>Note also that this only merged the branches LOCALLY. We still need to push changes to REMOTE.</p>\n</blockquote>\n<pre><code>git push origin master\n</code></pre>\n<blockquote>\n<p>Performing this might not necessarily automatically close the PR on Github (if the PRs base was NOT master) but it can close it automatically (if the PRs base was master). Weird stuff, kinda.</p>\n</blockquote>\n<p><strong>RESOLVING CONFLICTS</strong></p>\n<p><img src=\"https://i.imgur.com/EN9pOyE.jpg\" title=\"Photo by Steve Johnson from Pexels\"></p>\n<blockquote>\n<p>Imagine you want to merge branch PR2 to your master branch. However, you notice on Github, that there are some conflicts and automatic merge cannot happen. In such cases you need to manually resolve the conflicts. How to do it? Basically we will first merge master to our PR2 branch (yes, exactly, it is vise versa of what you might have thought.. or was it just me? :) ). Then we resolve the conflicts on our PR2 branch, then we commit changes to PR2 and we are ready to merge PR2 to master. Detailled steps are described below:</p>\n</blockquote>\n<blockquote>\n<p>First we go to our terminal.</p>\n</blockquote>\n<blockquote>\n<p>We go to our PR2 branch using checkout command:</p>\n</blockquote>\n<pre><code>git checkout PR2\n</code></pre>\n<blockquote>\n<p>As we are now on PR2 branch we can merge master to our PR2 by <code>git merge</code>.</p>\n</blockquote>\n<pre><code>git merge master\n</code></pre>\n<blockquote>\n<p>Above command will merge master to our PR2 branch (our currently active branch on which we are now).</p>\n</blockquote>\n<blockquote>\n<p>As you do the merge you will most likely get an error, that merge could not be done manually and you will get a conflicted file. Please note, that we are still on our PR2 branch, but partially it was merged already with code from master, except for the conflicts. Let's assume that conflicting file is <code>App.js</code>.</p>\n</blockquote>\n<blockquote>\n<p>We need to go to the <code>App.js</code> and this file will contain weird characters, HEAD and master:</p>\n</blockquote>\n<pre><code>&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\ncode1\n=======\ncode2\n>>>>>>> master\n</code></pre>\n<blockquote>\n<p>This basically points you to what exactly the conflict is. </p>\n</blockquote>\n<blockquote>\n<p><code>HEAD</code> means what is on your current branch (in our case branch PR2). This is basically <strong>code1</strong>, which is between</p>\n</blockquote>\n<pre><code>&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\n</code></pre>\n<p>and </p>\n<pre><code>=======\n</code></pre>\n<blockquote>\n<p>Above <strong>code1</strong> is in conflict with its equivalnt <strong>code2</strong> on master branch. In file it will be code between:</p>\n</blockquote>\n<pre><code>=======\n</code></pre>\n<p>and </p>\n<pre><code>>>>>>>> master\n</code></pre>\n<blockquote>\n<p>At this point you need to decide if <strong>code1</strong> or <strong>code2</strong> is the correct one that should be kept.</p>\n</blockquote>\n<blockquote>\n<p>In our case let's assume that <strong>code1</strong> is the correct one. Therefore, we will remove everything except for <strong>code1</strong>:</p>\n</blockquote>\n<pre><code>code1\n</code></pre>\n<blockquote>\n<p><strong>code1</strong> stays in our file</p>\n</blockquote>\n<blockquote>\n<p>We need to remove everything else. Also HEAD and master and all other characters:</p>\n</blockquote>\n<pre><code>&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\n=======\ncode2\n>>>>>>> master\n</code></pre>\n<blockquote>\n<p>Here I would recommend to double-check if our code is still working! Run your local server:</p>\n</blockquote>\n<pre><code>npm start\n</code></pre>\n<blockquote>\n<p>and check if merge and conflict resolution was correct and your app is still working. In my case for example, there was an error that one function which should be deleted was still imported in my file. Therefore, I can assume it is always necessary to check the app and run your tests after merge:</p>\n</blockquote>\n<pre><code>npm run test\n</code></pre>\n<blockquote>\n<p>Now it is time to commit and push the changes on PR2 branch from our LOCAL to REMOTE:</p>\n</blockquote>\n<pre><code>git add .\n</code></pre>\n<pre><code>git commit -m \"merging master to PR2, resolving conflicts\"\n</code></pre>\n<pre><code>git push origin PR2\n</code></pre>\n<blockquote>\n<p>We can check Github now. PR2 should now contain all code from master and its updates (additions) to master. We should be good to go and merge PR2 to master without conflicts. Yay :)</p>\n</blockquote>\n<p><strong>UNDO CHANGES</strong></p>\n<blockquote>\n<p>To undo changes in a specific file without staging them use git <code>checkout</code> and a file path to the file which we want to revert changes done:</p>\n</blockquote>\n<pre><code>git checkout src/functions/myFunction.js\n</code></pre>\n<p><strong>CODE STATISTICS</strong></p>\n<p><img src=\"https://i.imgur.com/ydhaIIE.jpg\" title=\"Photo by Timur Saglambilek from Pexels\"></p>\n<blockquote>\n<p>Display number of rows of code for each file - code statistics:</p>\n</blockquote>\n<pre><code>git ls-files | xargs wc -l\n</code></pre>\n<blockquote>\n<p>It will result in something like this:</p>\n</blockquote>\n<pre><code>38 src/App.css\n99 src/App.js\n36 src/components/Button.css\n23 src/components/Button.js\n24 src/components/Chart.js\n14 src/components/Filter.js\n27 src/components/Header.js\n</code></pre>\n<blockquote>\n<p>Get statistics about users, number of changed files, how many insertions, how many deletions and net:</p>\n</blockquote>\n<pre><code>git log --shortstat --pretty=\"%cE\" | sed 's/\\(.*\\)@.*/\\1/' | grep -v \"^$\" | awk 'BEGIN { line=\"\"; } !/^ / { if (line==\"\" || !match(line, $0)) {line = $0 \",\" line }} /^ / { print line \" # \" $0; line=\"\"}' | sort | sed -E 's/# //;s/ files? changed,//;s/([0-9]+) ([0-9]+ deletion)/\\1 0 insertions\\(+\\), \\2/;s/\\(\\+\\)$/\\(\\+\\), 0 deletions\\(-\\)/;s/insertions?\\(\\+\\), //;s/ deletions?\\(-\\)//' | awk 'BEGIN {name=\"\"; files=0; insertions=0; deletions=0;} {if ($1 != name &#x26;&#x26; name != \"\") { print name \": \" files \" files changed, \" insertions \" insertions(+), \" deletions \" deletions(-), \" insertions-deletions \" net\"; files=0; insertions=0; deletions=0; name=$1; } name=$1; files+=$2; insertions+=$3; deletions+=$4} END {print name \": \" files \" files changed, \" insertions \" insertions(+), \" deletions \" deletions(-), \" insertions-deletions \" net\";}'\n</code></pre>\n<blockquote>\n<p>It will result it something like this:</p>\n</blockquote>\n<pre><code>mirka.schw,: 311 files changed, 370168 insertions(+), 99040 deletions(-), 271128 net\n</code></pre>\n<blockquote>\n<p>How to install new version of npm </p>\n</blockquote>\n<pre><code>npm install -g npm\n</code></pre>\n<p><strong>VISUALS</strong></p>\n<p><img src=\"https://i.imgur.com/qvRNfBN.png\" title=\"Smart Git logo\"></p>\n<blockquote>\n<p>Good visual Git software is called Smart Git(it is paid however):</p>\n</blockquote>\n<pre><code>Smart Git\n</code></pre>"}},{"node":{"id":"1077652f-d780-5c05-bb3c-a68689430db4","excerpt":"HomeBrew helps to install softwares. See current version of homebrew Update brew Install software hello Install node Checking version of…","rawMarkdownBody":"\r\n![](https://i.imgur.com/omFnC3A.png \"Homebrew Logo\")\r\n\r\nHomeBrew helps to install softwares.\r\n\r\n> See current version of homebrew\r\n```\r\nbrew -v\r\n```\r\n> Update brew\r\n```\r\nbrew update\r\n```\r\n> Install software hello\r\n```\r\nbrew install hello\r\n```\r\n> Install node\r\n```\r\nbrew install node\r\n```\r\n> Checking version of node\r\n```\r\nnode --version\r\n```","frontmatter":{"date":"2019-09-24","title":"Intro to HomeBrew"},"fields":{"slug":"/Intro_to_HomeBrew/"},"timeToRead":1,"html":"<p><img src=\"https://i.imgur.com/omFnC3A.png\" title=\"Homebrew Logo\"></p>\n<p>HomeBrew helps to install softwares.</p>\n<blockquote>\n<p>See current version of homebrew</p>\n</blockquote>\n<pre><code>brew -v\n</code></pre>\n<blockquote>\n<p>Update brew</p>\n</blockquote>\n<pre><code>brew update\n</code></pre>\n<blockquote>\n<p>Install software hello</p>\n</blockquote>\n<pre><code>brew install hello\n</code></pre>\n<blockquote>\n<p>Install node</p>\n</blockquote>\n<pre><code>brew install node\n</code></pre>\n<blockquote>\n<p>Checking version of node</p>\n</blockquote>\n<pre><code>node --version\n</code></pre>"}},{"node":{"id":"f2ea98e2-12e0-5c6a-83a4-4cbc2689f36c","excerpt":"General: It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a…","rawMarkdownBody":"\r\n![](https://i.imgur.com/9fMfBav.png \"Ubuntu Logo\")\r\n\r\n**General**:\r\n\r\nIt is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. \r\n\r\nPlease note, upon first installation of Ubuntu subsystem, it is a completely blank software. It won't have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.\r\n\r\nUbuntu directory on PC:\r\n```\r\n\\\\wsl$\\Ubuntu-18.04\\home\\addania\r\n```\r\n**Controls**:\r\n\r\nCopy/Paste works differently in Ubuntu: \r\n\r\n<code>ctrl+shift+c</code> for copy, \r\n\r\n<code>crtl+shift+v</code> for paste\r\n\r\nSome commands will start with sudo which means to run as administrator\r\n\r\n<code>j</code> and <code>k</code> keys allows navigate up and down\r\n\r\n<code>h</code> and <code>l</code> allow to navigate left and right\r\n\r\n**Commands**:\r\n\r\n> To show which directory I am currently in we use command pwd (print working directory)\r\n```\r\npwd\r\n```\r\n> To display list of all files in a current directory\r\n```\r\nls\r\n```\r\n> To display list of all files in a current directory including hidden files (those with ., ex: .git)\r\n```\r\nls -a\r\n```\r\n> Change directory cd + name of the directory (ex: cd src will go to folder called src in your current folder), this is to go one directory down the tree\r\n```\r\ncd src\r\n```\r\n> To go one directory up the tree\r\n```\r\ncd ..\r\n```\r\n> To create a folder\r\n```\r\nmkdir\r\n```\r\n> To create a new file called global.css\r\n```\r\ntouch global.css\r\n```\r\n\r\n> To cancel something running in the command line:\r\n```\r\ncontrol-C\r\n```\r\n\r\n> To delete a specific file, type <code>rm</code> for remove and then file name\r\n```\r\nrm unnecessaryFile.js\r\n```\r\n\r\n\r\n> Command line, how to delete a specific folder, type <code>rm</code> for remove, <code>-r</code> for recursive, then folder name\r\n```\r\nrm -r unnecessaryFile.js\r\n```\r\n>How to kill or stop a process, for example Chrome?\r\n```\r\nkillall chrome\r\n```\r\n\r\n>How to see kill manual\r\n```\r\nman kill\r\n```","frontmatter":{"date":"2019-09-23","title":"Intro to Ubuntu"},"fields":{"slug":"/Intro_to_Ubuntu/"},"timeToRead":2,"html":"<p><img src=\"https://i.imgur.com/9fMfBav.png\" title=\"Ubuntu Logo\"></p>\n<p><strong>General</strong>:</p>\n<p>It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. </p>\n<p>Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It won't have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.</p>\n<p>Ubuntu directory on PC:</p>\n<pre><code>\\\\wsl$\\Ubuntu-18.04\\home\\addania\n</code></pre>\n<p><strong>Controls</strong>:</p>\n<p>Copy/Paste works differently in Ubuntu: </p>\n<p><code>ctrl+shift+c</code> for copy, </p>\n<p><code>crtl+shift+v</code> for paste</p>\n<p>Some commands will start with sudo which means to run as administrator</p>\n<p><code>j</code> and <code>k</code> keys allows navigate up and down</p>\n<p><code>h</code> and <code>l</code> allow to navigate left and right</p>\n<p><strong>Commands</strong>:</p>\n<blockquote>\n<p>To show which directory I am currently in we use command pwd (print working directory)</p>\n</blockquote>\n<pre><code>pwd\n</code></pre>\n<blockquote>\n<p>To display list of all files in a current directory</p>\n</blockquote>\n<pre><code>ls\n</code></pre>\n<blockquote>\n<p>To display list of all files in a current directory including hidden files (those with ., ex: .git)</p>\n</blockquote>\n<pre><code>ls -a\n</code></pre>\n<blockquote>\n<p>Change directory cd + name of the directory (ex: cd src will go to folder called src in your current folder), this is to go one directory down the tree</p>\n</blockquote>\n<pre><code>cd src\n</code></pre>\n<blockquote>\n<p>To go one directory up the tree</p>\n</blockquote>\n<pre><code>cd ..\n</code></pre>\n<blockquote>\n<p>To create a folder</p>\n</blockquote>\n<pre><code>mkdir\n</code></pre>\n<blockquote>\n<p>To create a new file called global.css</p>\n</blockquote>\n<pre><code>touch global.css\n</code></pre>\n<blockquote>\n<p>To cancel something running in the command line:</p>\n</blockquote>\n<pre><code>control-C\n</code></pre>\n<blockquote>\n<p>To delete a specific file, type <code>rm</code> for remove and then file name</p>\n</blockquote>\n<pre><code>rm unnecessaryFile.js\n</code></pre>\n<blockquote>\n<p>Command line, how to delete a specific folder, type <code>rm</code> for remove, <code>-r</code> for recursive, then folder name</p>\n</blockquote>\n<pre><code>rm -r unnecessaryFile.js\n</code></pre>\n<blockquote>\n<p>How to kill or stop a process, for example Chrome?</p>\n</blockquote>\n<pre><code>killall chrome\n</code></pre>\n<blockquote>\n<p>How to see kill manual</p>\n</blockquote>\n<pre><code>man kill\n</code></pre>"}}],"totalCount":76}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}