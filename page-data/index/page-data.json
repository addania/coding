{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"668a9473bbb49ee10c1b","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"6869d44a-7cf1-5416-85fd-c4304c424623","excerpt":"What are higher order functions? According to Wikipedia: In mathematics and computer science, a higher-order function is a function that…","rawMarkdownBody":"\r\nWhat are higher order functions? According to Wikipedia:\r\n\r\n> In mathematics and computer science, a higher-order function is a function that does at least one of the following:\r\n> 1. takes one or more functions as arguments (i.e. procedural parameters),\r\n> 2. returns a function as its result.\r\n\r\nFor example an array method .reduce is a higher order function because it takes a function called reducer as a parameter:\r\n\r\n\r\n```javascript\r\nconst [myArray, setMyArray] = useState([1, 4, 2]) \r\n<p>Im a reducer and SUM is: {myArray.reduce(reducer)}</p>\r\nconst reducer = (accumulator, currentValue, index) => {\r\n        accumulator = (accumulator + currentValue)        \r\n        return (accumulator);\r\n    } \r\n```   ","frontmatter":{"date":"2019-10-27","title":"Higher Order Functions"},"fields":{"slug":"/Higher_order_functions/"},"timeToRead":1,"html":"<p>What are higher order functions? According to Wikipedia:</p>\n<blockquote>\n<p>In mathematics and computer science, a higher-order function is a function that does at least one of the following:</p>\n<ol>\n<li>takes one or more functions as arguments (i.e. procedural parameters),</li>\n<li>returns a function as its result.</li>\n</ol>\n</blockquote>\n<p>For example an array method .reduce is a higher order function because it takes a function called reducer as a parameter:</p>\n<pre><code class=\"language-javascript\">const [myArray, setMyArray] = useState([1, 4, 2]) \n&#x3C;p>Im a reducer and SUM is: {myArray.reduce(reducer)}&#x3C;/p>\nconst reducer = (accumulator, currentValue, index) => {\n        accumulator = (accumulator + currentValue)        \n        return (accumulator);\n    } \n</code></pre>"}},{"node":{"id":"f316a34a-e925-5967-a916-7c85f8f6cab6","excerpt":"There are two ways how to access props passed to a component a) Passing word props as arguments and then accessing props like so: props.name…","rawMarkdownBody":"\r\nThere are two ways how to access props passed to a component\r\n\r\na) Passing word props as arguments and then accessing props like so: props.name\r\n```\r\nconst Button = (props) => {\r\n  return (\r\n      <p>{props.name}</p>\r\n  )\r\n}\r\n```\r\n\r\nb) alternative is to pass only specific name of a prop\r\n```\r\nconst Button = ({name}) => {\r\n  return (\r\n      <p>{name}</p>\r\n  )\r\n}\r\n```\r\nAlternative b allows only passing specific props to the component, instead of pass ALL of them\r\n\r\n\r\n","frontmatter":{"date":"2019-10-26","title":"Accessing Props"},"fields":{"slug":"/Accessing_Props/"},"timeToRead":1,"html":"<p>There are two ways how to access props passed to a component</p>\n<p>a) Passing word props as arguments and then accessing props like so: props.name</p>\n<pre><code>const Button = (props) => {\n  return (\n      &#x3C;p>{props.name}&#x3C;/p>\n  )\n}\n</code></pre>\n<p>b) alternative is to pass only specific name of a prop</p>\n<pre><code>const Button = ({name}) => {\n  return (\n      &#x3C;p>{name}&#x3C;/p>\n  )\n}\n</code></pre>\n<p>Alternative b allows only passing specific props to the component, instead of pass ALL of them</p>"}},{"node":{"id":"7a0e48f9-355f-540a-b84b-22036c4b235f","excerpt":"When we are in the code and we add somewhere this line:\ndebugger; we are able to execute code only up until this line.  You need to go to…","rawMarkdownBody":"\r\nWhen we are in the code and we add somewhere this line:\r\ndebugger;\r\n\r\nwe are able to execute code only up until this line. \r\n\r\nYou need to go to your website and open the DEEV TOOLS (without opening dev tools you wont be able to see the debugger stopping at the given place)\r\n\r\nAutomatically execution will stop and the developer tools will open. We will be able to use console to check for any value of the variable. \r\n\r\nFor example if we put debugger to onClick event handler, we can type in console\r\nevent\r\n\r\nand we will see the whole event object\r\n\r\nwe can put\r\nevent.target\r\n\r\nand see all the options we have that can be used as event.target. This set it pre-defined and doesnt display any custom value.\r\n\r\nTo read custom properties, we can use:\r\nevent.target.attribute\r\n\r\nFor example if we gave our button attribute last, then we can access it by\r\nevent.target.attribute.last\r\n\r\nIf we wanted to access what is in between of the closing and ending tag of button we write\r\nevent.target.attribute.innerHTML","frontmatter":{"date":"2019-10-25","title":"Debugging"},"fields":{"slug":"/Debugging/"},"timeToRead":1,"html":"<p>When we are in the code and we add somewhere this line:\ndebugger;</p>\n<p>we are able to execute code only up until this line. </p>\n<p>You need to go to your website and open the DEEV TOOLS (without opening dev tools you wont be able to see the debugger stopping at the given place)</p>\n<p>Automatically execution will stop and the developer tools will open. We will be able to use console to check for any value of the variable. </p>\n<p>For example if we put debugger to onClick event handler, we can type in console\nevent</p>\n<p>and we will see the whole event object</p>\n<p>we can put\nevent.target</p>\n<p>and see all the options we have that can be used as event.target. This set it pre-defined and doesnt display any custom value.</p>\n<p>To read custom properties, we can use:\nevent.target.attribute</p>\n<p>For example if we gave our button attribute last, then we can access it by\nevent.target.attribute.last</p>\n<p>If we wanted to access what is in between of the closing and ending tag of button we write\nevent.target.attribute.innerHTML</p>"}},{"node":{"id":"196baa7b-b9d1-5924-8eda-45686fc2a465","excerpt":"Event handlers like onClick will by default pass in some metadata, which we can use afterwards. For example: name and id of the element…","rawMarkdownBody":"\r\nEvent handlers like onClick will by default pass in some metadata, which we can use afterwards. For example: name and id of the element which triggered it or trigger type (onClick, onMouseOver, onChange, etc)\r\n\r\nWe access them by:\r\nevent.target.name\r\nevent.target.id\r\n\r\nThese names are predefined by default!\r\n\r\nBut we can also access all our custom properties by:\r\nevent.target.attribute.XXX\r\n\r\nwhere XXX is name of our custom property\r\n\r\n\r\nExample:\r\n```\r\nfunction handleClick(event) {\r\n    console.log(\"Event: \", event);\r\n    console.log(\"Event type: \", event.type);\r\n    console.log(\"Event name: \", event.target.name);\r\n    console.log(\"Event id: \", event.target.id);\r\n    console.log(\"Event custom property: \", event.target.attributes.custom);\r\n    console.log(\"Event innerHTML: \", event.target.attributes.innerHTML);\r\n\r\n  }\r\n\r\n\r\n<button onClick={handleClick} name={\"clicker\"} id={\"click01\"} custom=\"I am the best in clicking\">\r\n    Click ME!\r\n</button>\r\n```\r\n\r\nconsole.log(\"Event: \", event); will return the whole event OBJECT (on which we can click and see all nodes)\r\nif we wrote console.log(\"Event: \" + event); event object would be stringyfied and we wont have opportunity to explore the OBJECT!!!!\r\n\r\n\r\nWe might need to get some info from the element which called our event handler. For example onClick. With the onClick, we can use the information provided in event object and retrieve data about our componenet which triggered the event from event object. But this approach is not good, becasue it retrieves data from the DOM.\r\n\r\n\r\n``` \r\nfunction handleClick(event) {\r\n    setMyArray(\r\n      myArray.concat({\r\n        firstName: event.target.attributes.name,\r\n        lastName: event.target.attributes.last,\r\n        display: event.target.innerHTML,\r\n      })\r\n    );\r\n  }\r\n\r\n<button onClick={handleClick} name={\"pete\"} id={\"schw\"} last=\"IM HIDDEN\">\r\n        Add Pete to array\r\n      </button>\r\n```\r\n\r\nIt is better to use it in this way:\r\n``` \r\n<Button\r\n        onClickZ={(name, id) => {\r\n          console.log(name, id);\r\n        }}\r\n        name=\"I AM NAME\"\r\n        id=\"IM ID\"\r\n        children=\"We are the children\"\r\n        last=\"IM LAST NAME\"\r\n      />\r\n\r\n\r\nfunction Button({ onClickZ, name, last, children }) {\r\n  return <button onClick={() => onClickZ(name, last)}>{children}</button>;\r\n}\r\n\r\n```","frontmatter":{"date":"2019-10-24","title":"Event Handlers"},"fields":{"slug":"/EventHandlers/"},"timeToRead":1,"html":"<p>Event handlers like onClick will by default pass in some metadata, which we can use afterwards. For example: name and id of the element which triggered it or trigger type (onClick, onMouseOver, onChange, etc)</p>\n<p>We access them by:\nevent.target.name\nevent.target.id</p>\n<p>These names are predefined by default!</p>\n<p>But we can also access all our custom properties by:\nevent.target.attribute.XXX</p>\n<p>where XXX is name of our custom property</p>\n<p>Example:</p>\n<pre><code>function handleClick(event) {\n    console.log(\"Event: \", event);\n    console.log(\"Event type: \", event.type);\n    console.log(\"Event name: \", event.target.name);\n    console.log(\"Event id: \", event.target.id);\n    console.log(\"Event custom property: \", event.target.attributes.custom);\n    console.log(\"Event innerHTML: \", event.target.attributes.innerHTML);\n\n  }\n\n\n&#x3C;button onClick={handleClick} name={\"clicker\"} id={\"click01\"} custom=\"I am the best in clicking\">\n    Click ME!\n&#x3C;/button>\n</code></pre>\n<p>console.log(\"Event: \", event); will return the whole event OBJECT (on which we can click and see all nodes)\nif we wrote console.log(\"Event: \" + event); event object would be stringyfied and we wont have opportunity to explore the OBJECT!!!!</p>\n<p>We might need to get some info from the element which called our event handler. For example onClick. With the onClick, we can use the information provided in event object and retrieve data about our componenet which triggered the event from event object. But this approach is not good, becasue it retrieves data from the DOM.</p>\n<pre><code>function handleClick(event) {\n    setMyArray(\n      myArray.concat({\n        firstName: event.target.attributes.name,\n        lastName: event.target.attributes.last,\n        display: event.target.innerHTML,\n      })\n    );\n  }\n\n&#x3C;button onClick={handleClick} name={\"pete\"} id={\"schw\"} last=\"IM HIDDEN\">\n        Add Pete to array\n      &#x3C;/button>\n</code></pre>\n<p>It is better to use it in this way:</p>\n<pre><code>&#x3C;Button\n        onClickZ={(name, id) => {\n          console.log(name, id);\n        }}\n        name=\"I AM NAME\"\n        id=\"IM ID\"\n        children=\"We are the children\"\n        last=\"IM LAST NAME\"\n      />\n\n\nfunction Button({ onClickZ, name, last, children }) {\n  return &#x3C;button onClick={() => onClickZ(name, last)}>{children}&#x3C;/button>;\n}\n</code></pre>"}},{"node":{"id":"8d1c4f39-e144-5dc1-979c-9737b922799a","excerpt":"There are two ways how we can declare innerHTML a) Passing word props as arguments and then accessing props like so: props.name or When we…","rawMarkdownBody":"\r\nThere are two ways how we can declare innerHTML\r\n\r\na) Passing word props as arguments and then accessing props like so: props.name\r\n\r\n```\r\n<Button name=\"ABC\" color=\"green\">I AM CHILD</Button>\r\n``` \r\n\r\nor\r\n\r\n``` \r\n<Button children=\"I AM A CHILD\" name=\"ABC\" color=\"green\"></Button>\r\n```\r\n\r\nWhen we then define the button component, we can retrieve the children props like this\r\n\r\nAlternative A:\r\n\r\n```\r\nconst Button = ({children}) => {\r\n  return (\r\n      <button>{children}</button>\r\n  )\r\n}\r\n\r\n```\r\nAlternative B:\r\n\r\n``` \r\nconst Button = (props) => {\r\n  return (\r\n      <button>{props.children}</button>\r\n  )\r\n}\r\n```\r\n\r\n","frontmatter":{"date":"2019-10-23","title":"Children"},"fields":{"slug":"/Children/"},"timeToRead":1,"html":"<p>There are two ways how we can declare innerHTML</p>\n<p>a) Passing word props as arguments and then accessing props like so: props.name</p>\n<pre><code>&#x3C;Button name=\"ABC\" color=\"green\">I AM CHILD&#x3C;/Button>\n</code></pre>\n<p>or</p>\n<pre><code>&#x3C;Button children=\"I AM A CHILD\" name=\"ABC\" color=\"green\">&#x3C;/Button>\n</code></pre>\n<p>When we then define the button component, we can retrieve the children props like this</p>\n<p>Alternative A:</p>\n<pre><code>const Button = ({children}) => {\n  return (\n      &#x3C;button>{children}&#x3C;/button>\n  )\n}\n</code></pre>\n<p>Alternative B:</p>\n<pre><code>const Button = (props) => {\n  return (\n      &#x3C;button>{props.children}&#x3C;/button>\n  )\n}\n</code></pre>"}},{"node":{"id":"7e772fa5-993c-55a8-84e8-5b26924d7468","excerpt":"Reduce method is very powerful one which allows you to iterate thrgouh all elements in an array, perform certain calculation on it and then…","rawMarkdownBody":"\r\nReduce method is very powerful one which allows you to iterate thrgouh all elements in an array, perform certain calculation on it and then returns a single value.\r\n\r\nLet start with an array\r\nconst myArray = [1,4,2]\r\n\r\nWe want to sum this up and return one value of the total sum which would be 7\r\n\r\nWe can call myArray.reduce(reducer, initialValue);\r\n\r\nwhere reducer is a function. Which means that .reduce calls upon another function which we need to define. initialValue is optional, we can kick it off with some staring value, but for the first simple example we will skip it.\r\n\r\nExample reducer function\r\n\r\n  const reducer = (accumulator, currentValue) => {\r\n        accumulator = (accumulator + currentValue)        \r\n        return (accumulator);\r\n    } \r\n\r\nreducer takes in 2 arguments:\r\naccumulator - value where we can store results of our calculations. Initial accumulator will equal the first element in array which will be 1 (unless we set initial value for it)\r\ncurrent value - value at which we are currently iterating, initially this will be value of second element in array which is number 4 (unless we set initial value, then the initial currentValue will be the first element)\r\n\r\nThere can be other arguments like currentIndex (index of currentValue where the itteration currently happens) but the most basic example is with above-mentioned two.\r\n\r\nEach iteration ( or function call ) will deliver a returning value! It means on each step return will be executed. This returning value is going to get passed into next step!\r\n\r\nExample to use it for the highest number:\r\n\r\n``` \r\nconst reducer = (accumulator, currentValue) => {\r\n\r\n        if (currentValue >= accumulator){\r\n            accumulator = currentValue;\r\n        }\r\n        return (accumulator);\r\n    } \r\n\r\n```\r\n\r\nExample to usee it for average number:\r\n``` \r\n    const reducer = (accumulator, currentValue) => {\r\n        if (currentValue >= accumulator){\r\n            accumulator = currentValue;\r\n\r\n        }\r\n        return (accumulator);\r\n    } \r\n\r\n <p>Im a reducer and highest number is: {myArray.reduce(reducer)}</p>\r\n\r\n\r\n```\r\n   \r\n","frontmatter":{"date":"2019-10-22","title":"Array Methods .reduce"},"fields":{"slug":"/Array_Methods_Reduce/"},"timeToRead":1,"html":"<p>Reduce method is very powerful one which allows you to iterate thrgouh all elements in an array, perform certain calculation on it and then returns a single value.</p>\n<p>Let start with an array\nconst myArray = [1,4,2]</p>\n<p>We want to sum this up and return one value of the total sum which would be 7</p>\n<p>We can call myArray.reduce(reducer, initialValue);</p>\n<p>where reducer is a function. Which means that .reduce calls upon another function which we need to define. initialValue is optional, we can kick it off with some staring value, but for the first simple example we will skip it.</p>\n<p>Example reducer function</p>\n<p>  const reducer = (accumulator, currentValue) => {\naccumulator = (accumulator + currentValue)<br>\nreturn (accumulator);\n} </p>\n<p>reducer takes in 2 arguments:\naccumulator - value where we can store results of our calculations. Initial accumulator will equal the first element in array which will be 1 (unless we set initial value for it)\ncurrent value - value at which we are currently iterating, initially this will be value of second element in array which is number 4 (unless we set initial value, then the initial currentValue will be the first element)</p>\n<p>There can be other arguments like currentIndex (index of currentValue where the itteration currently happens) but the most basic example is with above-mentioned two.</p>\n<p>Each iteration ( or function call ) will deliver a returning value! It means on each step return will be executed. This returning value is going to get passed into next step!</p>\n<p>Example to use it for the highest number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n        }\n        return (accumulator);\n    } \n</code></pre>\n<p>Example to usee it for average number:</p>\n<pre><code>    const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n\n        }\n        return (accumulator);\n    } \n\n &#x3C;p>Im a reducer and highest number is: {myArray.reduce(reducer)}&#x3C;/p>\n</code></pre>"}},{"node":{"id":"8a6ca7ba-bc7d-5c7a-b3be-ce9bcba04d05","excerpt":"Ever wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a…","rawMarkdownBody":"\r\nEver wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a button:\r\n``` \r\n<button>Hello</button>\r\n```\r\nThis is how we can access it: \r\nprops.children\r\n\r\nIn fact we can also rewrite the whole tag:\r\n```\r\n<button children=\"Hello\" />\r\n```\r\nBe careful not to do this:\r\n```\r\n<button children=\"Hello\"></button>\r\n```\r\nHere property children will be overwritten by blank space between opening and closing tag","frontmatter":{"date":"2019-10-21","title":"How to access inner HTML"},"fields":{"slug":"/How_to_access_innerHTML/"},"timeToRead":1,"html":"<p>Ever wodered how to access inner html of an element? Lets say we want to work with whatever is between closing and opening brackets of a button:</p>\n<pre><code>&#x3C;button>Hello&#x3C;/button>\n</code></pre>\n<p>This is how we can access it:\nprops.children</p>\n<p>In fact we can also rewrite the whole tag:</p>\n<pre><code>&#x3C;button children=\"Hello\" />\n</code></pre>\n<p>Be careful not to do this:</p>\n<pre><code>&#x3C;button children=\"Hello\">&#x3C;/button>\n</code></pre>\n<p>Here property children will be overwritten by blank space between opening and closing tag</p>"}},{"node":{"id":"c46d3ef8-6652-54c5-b3c4-b848bea2ee2a","excerpt":"3 ways to define a function: function bla() {\n  return null\n} const blo = () => {\n  return null\n} () => onClickZ(name, last) {\n  return null…","rawMarkdownBody":"\r\n3 ways to define a function:\r\n\r\nfunction bla() {\r\n  return null\r\n}\r\n\r\nconst blo = () => {\r\n  return null\r\n}\r\n\r\n() => onClickZ(name, last) {\r\n  return null\r\n}\r\n\r\n\r\nAbove functions would be called like this:\r\nbla()\r\nblo()\r\nonClickZ(name, last)\r\n\r\nParenthesis mean call function immediately and output whatever is in the return.\r\n\r\nReferencing a function needs to be without parenthesis:\r\nbla\r\nblo\r\nonClick\r\n","frontmatter":{"date":"2019-10-20","title":"Function declaration and call"},"fields":{"slug":"/Function_declaration_and_call/"},"timeToRead":1,"html":"<p>3 ways to define a function:</p>\n<p>function bla() {\nreturn null\n}</p>\n<p>const blo = () => {\nreturn null\n}</p>\n<p>() => onClickZ(name, last) {\nreturn null\n}</p>\n<p>Above functions would be called like this:\nbla()\nblo()\nonClickZ(name, last)</p>\n<p>Parenthesis mean call function immediately and output whatever is in the return.</p>\n<p>Referencing a function needs to be without parenthesis:\nbla\nblo\nonClick</p>"}},{"node":{"id":"e69a4768-f644-5947-80a6-c0ded485cf4b","excerpt":"There are two ways to access props.  a) Using props as argument of the functional component and accessing them like: props.onClick b) or…","rawMarkdownBody":"\r\nThere are two ways to access props. \r\n\r\na) Using props as argument of the functional component and accessing them like: props.onClick\r\n\r\n```\r\nconst Button = (props) => {\r\n}\r\n```\r\n\r\nb) or alternatively passing name of prop inside curly brackets of the functional component and then accessing props like: onClick\r\n```\r\nconst Button = ({onClick}) => {\r\n}\r\n```\r\n\r\nAlternative b) allows only passing specific props to the component.\r\n\r\n```\r\n<button onClick={handleClick} name={\"pete\"} id={\"schw\"}>\r\n        Add Pete to array\r\n      </button>\r\n```\r\nor \r\n```\r\n<button onClick={handleClick} name={\"lubo\"} id={\"kost\"} children=\"Add Lubo to array\" />\r\n```\r\nBut then I need to have self closing tag, because if I have </button> empty stace before closing and opening tag will overwrite my children property\r\n        ","frontmatter":{"date":"2019-10-19","title":"Accessing Props"},"fields":{"slug":"/Accessing_props/"},"timeToRead":1,"html":"<p>There are two ways to access props. </p>\n<p>a) Using props as argument of the functional component and accessing them like: props.onClick</p>\n<pre><code>const Button = (props) => {\n}\n</code></pre>\n<p>b) or alternatively passing name of prop inside curly brackets of the functional component and then accessing props like: onClick</p>\n<pre><code>const Button = ({onClick}) => {\n}\n</code></pre>\n<p>Alternative b) allows only passing specific props to the component.</p>\n<pre><code>&#x3C;button onClick={handleClick} name={\"pete\"} id={\"schw\"}>\n        Add Pete to array\n      &#x3C;/button>\n</code></pre>\n<p>or </p>\n<pre><code>&#x3C;button onClick={handleClick} name={\"lubo\"} id={\"kost\"} children=\"Add Lubo to array\" />\n</code></pre>\n<p>But then I need to have self closing tag, because if I have </button> empty stace before closing and opening tag will overwrite my children property\n</p>"}},{"node":{"id":"d74d0d9d-44cf-55e7-9121-7c750e781ce0","excerpt":"If we use function definition like this (using arrow functions): and this definition is AFTER code where it is called, it might still not be…","rawMarkdownBody":"\r\nIf we use function definition like this (using arrow functions):\r\n```\r\nconst Button = () => {\r\n  \r\n}\r\n```\r\n\r\nand this definition is AFTER code where it is called, it might still not be defined.\r\n\r\nBut if we use:\r\n```\r\n function Button () {\r\n  \r\n}\r\n```\r\n\r\nsuch function definition can be anywhere at the end of the file, but it will be HOISTED. \r\n\r\nHoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.\r\n\r\nInevitably, this means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local. \r\n\r\nThis allows you to  be able to call functions before you wrote them in your code.\r\n\r\n> Reference:\r\nhttps://scotch.io/tutorials/understanding-hoisting-in-javascript","frontmatter":{"date":"2019-10-18","title":"Function definition: Arrow vs Function, Hoising"},"fields":{"slug":"/Function_vs_Arrow_and_Hoisting/"},"timeToRead":1,"html":"<p>If we use function definition like this (using arrow functions):</p>\n<pre><code>const Button = () => {\n  \n}\n</code></pre>\n<p>and this definition is AFTER code where it is called, it might still not be defined.</p>\n<p>But if we use:</p>\n<pre><code> function Button () {\n  \n}\n</code></pre>\n<p>such function definition can be anywhere at the end of the file, but it will be HOISTED. </p>\n<p>Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.</p>\n<p>Inevitably, this means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local. </p>\n<p>This allows you to  be able to call functions before you wrote them in your code.</p>\n<blockquote>\n<p>Reference:\n<a href=\"https://scotch.io/tutorials/understanding-hoisting-in-javascript\">https://scotch.io/tutorials/understanding-hoisting-in-javascript</a></p>\n</blockquote>"}},{"node":{"id":"bb32f881-e1ba-5d67-b8d5-d447d0732b95","excerpt":"Have you wondered how you can actually output an array in exactly the same form as you declare it? Say we have array:\nconst myArray = 1,…","rawMarkdownBody":"Have you wondered how you can actually output an array in exactly the same form as you declare it?\r\n\r\n> Say we have array:\r\nconst myArray = [1, 2, 4];\r\n\r\n> If you display it just as myArray, you will get: My array is 124\r\n```\r\n<p>My array is {myArray} </p>\r\n```\r\n\r\n> If you want to diplay however: My array is [1,2,4] you neeed to use JSON.stringify\r\n```\r\n<p>My array// src/ThemeContext.js is {JSON.stringify(myArray)} </p>\r\n```","frontmatter":{"date":"2019-10-17","title":"JSON.stringify"},"fields":{"slug":"/JSON.stringify/"},"timeToRead":1,"html":"<p>Have you wondered how you can actually output an array in exactly the same form as you declare it?</p>\n<blockquote>\n<p>Say we have array:\nconst myArray = [1, 2, 4];</p>\n</blockquote>\n<blockquote>\n<p>If you display it just as myArray, you will get: My array is 124</p>\n</blockquote>\n<pre><code>&#x3C;p>My array is {myArray} &#x3C;/p>\n</code></pre>\n<blockquote>\n<p>If you want to diplay however: My array is [1,2,4] you neeed to use JSON.stringify</p>\n</blockquote>\n<pre><code>&#x3C;p>My array// src/ThemeContext.js is {JSON.stringify(myArray)} &#x3C;/p>\n</code></pre>"}},{"node":{"id":"bf3eb494-3f89-59b9-af22-e499e6ecc112","excerpt":"Instead of passing down props through tree of nexted child components (sometimes as much as 20+ times from parent to the last child), there…","rawMarkdownBody":"\r\n> Instead of passing down props through tree of nexted child components (sometimes as much as 20+ times from parent to the last child), there is a better way how components can receive props. The way is called context and is something like a global variable.\r\n\r\n> Imagine component structure:\r\nA -> D -> C\r\n\r\n> A is parent and only summons D component. Then D summons  C\r\n\r\n> A has prop for theme ( value: \"green\") which needs to be passed C. But only to C. Other components like D doesnt care about this prop.\r\n\r\n> Top level component PROVIDES context and child component CONSUMES the context. Provider example: component called A.  Consumer Example: componenet called D\r\n\r\n> A: provides theme\r\n\r\n> C: consumes theme\r\n\r\n> First we create the cotext itself\r\n\r\n``` \r\n// src/ThemeContext.js\r\nimport React from 'react';\r\nconst ThemeContext = React.createContext(null);\r\nexport default ThemeContext;\r\n```\r\n> React.createContext will give us access to Provider and Consumer components.\r\n```\r\nThemeContext = React.createContext(null);\r\n```\r\n> Then we create component A which will be context provider\r\n```\r\n// src/ComponentA.js\r\nimport React from 'react';\r\nimport ThemeContext from './ThemeContext';\r\nconst A = () => (\r\n  <ThemeContext.Provider value=\"green\">\r\n    <D />\r\n  </ThemeContext.Provider>\r\n);\r\n```\r\n> We need to include new components called ThemeContext.Provider\r\n\r\n> A doesnt pass any props to D component. It makes value green available to all child components. A summons D component.\r\n\r\n> Lets look at C component. Now that A has made the vlue greeen available to all children, C can assess that value:\r\n\r\n\r\n```\r\n// src/ComponentC.js\r\nimport React from 'react';\r\nimport ThemeContext from './ThemeContext';\r\nconst C = () => (\r\n  <ThemeContext.Consumer>\r\n    {value => (\r\n      <p style={{ color: value }}>\r\n        Hello World\r\n      </p>\r\n    )}\r\n  </ThemeContext.Consumer>\r\n);\r\n```\r\n\r\n> Complete example:\r\n``` \r\nimport React from \"react\";\r\n\r\nconst ColorContext = React.createContext(null);\r\n\r\nexport function SimpleContext(){\r\n    return (\r\n        <ColorContext.Provider value=\"green\">\r\n        <D />\r\n        </ColorContext.Provider>\r\n        )\r\n    }\r\n\r\nconst D = () => {\r\n    return (\r\n        <div>\r\n        <p>I am D component which is summoned by Parent component but I dont consume Context</p>\r\n        <C />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst C = () => {\r\n    return (\r\n        <ColorContext.Consumer>\r\n        { value => (\r\n        <p style={{color: value}}>I am a C component summoned by D but I received beautiful green colour from my dear Parent</p>\r\n        )}\r\n        </ColorContext.Consumer>\r\n    )\r\n}\r\n\r\n\r\n```\r\n\r\n> With HOOKs we can make this even more elegant\r\n```\r\nimport React, { useContext } from \"react\";\r\n\r\nconst ColorContext = React.createContext(\r\n    { value: \"purple\"}\r\n);\r\n\r\nexport function SimpleContextUsewithHook(){\r\n    return (\r\n        \r\n        <D />\r\n        \r\n        )\r\n    }\r\n\r\nconst D = () => {\r\n    return (\r\n        <div>\r\n        <p>I am D component which is summoned by Parent component but I dont consume Context</p>\r\n        <C />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst C = () => {\r\n    const context = useContext(ColorContext);\r\n    return (  \r\n        <p style={{color: context.value}}>I am a C component summoned by D but I received beautiful purple colour from my dear Parent</p>  \r\n    )\r\n}\r\n\r\n```\r\n\r\n> Complex example with classes where we still use provider because we also want to be able to update the team and info which team is using\r\n\r\n```\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport './style.css';\r\n\r\nconst ProfileContext = React.createContext();\r\nclass ProfileProvider extends React.Component {\r\n  state = {\r\n    company: 'Progress',\r\n    companyImage: 'https://svgshare.com/i/9ir.svg',\r\n    url: 'https://www.telerik.com/kendo-react-ui/',\r\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\r\n    userName: 'Kendoka',\r\n    fullName: 'Kendō No Arikata',\r\n    team: 'KendoReact',\r\n    changeTeam: (team) => this.setState({\r\n      team: `Kendo${team}`\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <ProfileContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </ProfileContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nconst App = () => (\r\n  <ProfileProvider>\r\n    <Profile />\r\n  </ProfileProvider>\r\n)\r\n\r\nconst Profile = () => (\r\n  <div className=\"profile\">\r\n    <ProfileContext.Consumer>\r\n      {context => <img src={context.companyImage} />}\r\n    </ProfileContext.Consumer>\r\n    <User />\r\n  </div>\r\n)\r\n\r\nconst User = () => (\r\n  <div className=\"user\">\r\n    <ProfileContext.Consumer>\r\n      {context =>\r\n        <React.Fragment>\r\n          <a href={context.url}>\r\n            <img src={context.userImage} width=\"138px\" />\r\n          </a>\r\n          <h1 className=\"profile-userName\">{context.userName}</h1>\r\n          <p className=\"profile-fullName\">({context.fullName})</p>\r\n          <Team />\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('Angular')}>Angular</button>\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('Vue')}>Vue</button>\r\n          <button className=\"profile-button\"\r\n            onClick={() => context.changeTeam('React')}>React</button>\r\n        </React.Fragment>\r\n      }\r\n    </ProfileContext.Consumer>\r\n  </div>\r\n)\r\n\r\nconst Team = () => (\r\n  <ProfileContext.Consumer>\r\n    {context =>\r\n      <div className=\"team\">\r\n        <p className=\"profile-team\">{context.team}</p>\r\n      </div>\r\n    }\r\n  </ProfileContext.Consumer>\r\n)\r\n\r\nrender(<App />, document.getElementById('root'));\r\n``` \r\n\r\n> Same with hooks\r\n```\r\nimport React, { Component, useContext } from 'react';\r\nimport { render } from 'react-dom';\r\nimport './style.css';\r\n\r\nconst ProfileContext = React.createContext();\r\n\r\nclass ProfileProvider extends Component {\r\n  state = {\r\n    company: 'Progress',\r\n    companyImage: 'https://svgshare.com/i/9ir.svg',\r\n    url: 'https://www.telerik.com/kendo-react-ui/',\r\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\r\n    userName: 'Kendoken',\r\n    fullName: 'Kendoken No Michi',\r\n    team: 'KendoReact',\r\n    toggleTeam: (team) => this.setState({\r\n      team: `Kendo${team}`\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <ProfileContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </ProfileContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nlet Profile = () => {\r\n  const context = useContext(ProfileContext);\r\n  return (\r\n    <div className=\"profile\">\r\n      <img src={context.companyImage} />\r\n      <User />\r\n    </div>\r\n  )\r\n}\r\n\r\nlet User = () => {\r\n  const context = useContext(ProfileContext);\r\n  return (\r\n    <div className=\"user\">\r\n      <a href={context.url}>\r\n        <img src={context.userImage} width=\"138px\" />\r\n      </a>\r\n      <h1 className=\"profile-userName\">{context.userName}</h1>\r\n      <p className=\"profile-fullName\">({context.fullName})</p>\r\n      <Team />\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('Angular')}>Angular</button>\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('Vue')}>Vue</button>\r\n      <button className=\"profile-button\"\r\n        onClick={() => context.toggleTeam('React')}>React</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nlet Team = () => {\r\n  const context = useContext(ProfileContext);\r\n  return (\r\n    <div className=\"team\">\r\n      <p className=\"profile-team\">{context.team}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <ProfileProvider>\r\n        <Profile />\r\n      </ProfileProvider>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<App />, document.getElementById('root'));\r\n```\r\n\r\nrender(<App />, document.getElementById('root'));\r\n\r\n```\r\n> Resource: https://www.robinwieruch.de/react-context","frontmatter":{"date":"2019-10-16","title":"Context"},"fields":{"slug":"/Context/"},"timeToRead":5,"html":"<blockquote>\n<p>Instead of passing down props through tree of nexted child components (sometimes as much as 20+ times from parent to the last child), there is a better way how components can receive props. The way is called context and is something like a global variable.</p>\n</blockquote>\n<blockquote>\n<p>Imagine component structure:\nA -> D -> C</p>\n</blockquote>\n<blockquote>\n<p>A is parent and only summons D component. Then D summons  C</p>\n</blockquote>\n<blockquote>\n<p>A has prop for theme ( value: \"green\") which needs to be passed C. But only to C. Other components like D doesnt care about this prop.</p>\n</blockquote>\n<blockquote>\n<p>Top level component PROVIDES context and child component CONSUMES the context. Provider example: component called A.  Consumer Example: componenet called D</p>\n</blockquote>\n<blockquote>\n<p>A: provides theme</p>\n</blockquote>\n<blockquote>\n<p>C: consumes theme</p>\n</blockquote>\n<blockquote>\n<p>First we create the cotext itself</p>\n</blockquote>\n<pre><code>// src/ThemeContext.js\nimport React from 'react';\nconst ThemeContext = React.createContext(null);\nexport default ThemeContext;\n</code></pre>\n<blockquote>\n<p>React.createContext will give us access to Provider and Consumer components.</p>\n</blockquote>\n<pre><code>ThemeContext = React.createContext(null);\n</code></pre>\n<blockquote>\n<p>Then we create component A which will be context provider</p>\n</blockquote>\n<pre><code>// src/ComponentA.js\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nconst A = () => (\n  &#x3C;ThemeContext.Provider value=\"green\">\n    &#x3C;D />\n  &#x3C;/ThemeContext.Provider>\n);\n</code></pre>\n<blockquote>\n<p>We need to include new components called ThemeContext.Provider</p>\n</blockquote>\n<blockquote>\n<p>A doesnt pass any props to D component. It makes value green available to all child components. A summons D component.</p>\n</blockquote>\n<blockquote>\n<p>Lets look at C component. Now that A has made the vlue greeen available to all children, C can assess that value:</p>\n</blockquote>\n<pre><code>// src/ComponentC.js\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nconst C = () => (\n  &#x3C;ThemeContext.Consumer>\n    {value => (\n      &#x3C;p style={{ color: value }}>\n        Hello World\n      &#x3C;/p>\n    )}\n  &#x3C;/ThemeContext.Consumer>\n);\n</code></pre>\n<blockquote>\n<p>Complete example:</p>\n</blockquote>\n<pre><code>import React from \"react\";\n\nconst ColorContext = React.createContext(null);\n\nexport function SimpleContext(){\n    return (\n        &#x3C;ColorContext.Provider value=\"green\">\n        &#x3C;D />\n        &#x3C;/ColorContext.Provider>\n        )\n    }\n\nconst D = () => {\n    return (\n        &#x3C;div>\n        &#x3C;p>I am D component which is summoned by Parent component but I dont consume Context&#x3C;/p>\n        &#x3C;C />\n        &#x3C;/div>\n    )\n}\n\nconst C = () => {\n    return (\n        &#x3C;ColorContext.Consumer>\n        { value => (\n        &#x3C;p style={{color: value}}>I am a C component summoned by D but I received beautiful green colour from my dear Parent&#x3C;/p>\n        )}\n        &#x3C;/ColorContext.Consumer>\n    )\n}\n</code></pre>\n<blockquote>\n<p>With HOOKs we can make this even more elegant</p>\n</blockquote>\n<pre><code>import React, { useContext } from \"react\";\n\nconst ColorContext = React.createContext(\n    { value: \"purple\"}\n);\n\nexport function SimpleContextUsewithHook(){\n    return (\n        \n        &#x3C;D />\n        \n        )\n    }\n\nconst D = () => {\n    return (\n        &#x3C;div>\n        &#x3C;p>I am D component which is summoned by Parent component but I dont consume Context&#x3C;/p>\n        &#x3C;C />\n        &#x3C;/div>\n    )\n}\n\nconst C = () => {\n    const context = useContext(ColorContext);\n    return (  \n        &#x3C;p style={{color: context.value}}>I am a C component summoned by D but I received beautiful purple colour from my dear Parent&#x3C;/p>  \n    )\n}\n</code></pre>\n<blockquote>\n<p>Complex example with classes where we still use provider because we also want to be able to update the team and info which team is using</p>\n</blockquote>\n<pre><code>import React from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\n\nconst ProfileContext = React.createContext();\nclass ProfileProvider extends React.Component {\n  state = {\n    company: 'Progress',\n    companyImage: 'https://svgshare.com/i/9ir.svg',\n    url: 'https://www.telerik.com/kendo-react-ui/',\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\n    userName: 'Kendoka',\n    fullName: 'Kendō No Arikata',\n    team: 'KendoReact',\n    changeTeam: (team) => this.setState({\n      team: `Kendo${team}`\n    })\n  }\n  render() {\n    return (\n      &#x3C;ProfileContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/ProfileContext.Provider>\n    )\n  }\n}\n\nconst App = () => (\n  &#x3C;ProfileProvider>\n    &#x3C;Profile />\n  &#x3C;/ProfileProvider>\n)\n\nconst Profile = () => (\n  &#x3C;div className=\"profile\">\n    &#x3C;ProfileContext.Consumer>\n      {context => &#x3C;img src={context.companyImage} />}\n    &#x3C;/ProfileContext.Consumer>\n    &#x3C;User />\n  &#x3C;/div>\n)\n\nconst User = () => (\n  &#x3C;div className=\"user\">\n    &#x3C;ProfileContext.Consumer>\n      {context =>\n        &#x3C;React.Fragment>\n          &#x3C;a href={context.url}>\n            &#x3C;img src={context.userImage} width=\"138px\" />\n          &#x3C;/a>\n          &#x3C;h1 className=\"profile-userName\">{context.userName}&#x3C;/h1>\n          &#x3C;p className=\"profile-fullName\">({context.fullName})&#x3C;/p>\n          &#x3C;Team />\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('Angular')}>Angular&#x3C;/button>\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('Vue')}>Vue&#x3C;/button>\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('React')}>React&#x3C;/button>\n        &#x3C;/React.Fragment>\n      }\n    &#x3C;/ProfileContext.Consumer>\n  &#x3C;/div>\n)\n\nconst Team = () => (\n  &#x3C;ProfileContext.Consumer>\n    {context =>\n      &#x3C;div className=\"team\">\n        &#x3C;p className=\"profile-team\">{context.team}&#x3C;/p>\n      &#x3C;/div>\n    }\n  &#x3C;/ProfileContext.Consumer>\n)\n\nrender(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<blockquote>\n<p>Same with hooks</p>\n</blockquote>\n<pre><code>import React, { Component, useContext } from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\n\nconst ProfileContext = React.createContext();\n\nclass ProfileProvider extends Component {\n  state = {\n    company: 'Progress',\n    companyImage: 'https://svgshare.com/i/9ir.svg',\n    url: 'https://www.telerik.com/kendo-react-ui/',\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\n    userName: 'Kendoken',\n    fullName: 'Kendoken No Michi',\n    team: 'KendoReact',\n    toggleTeam: (team) => this.setState({\n      team: `Kendo${team}`\n    })\n  }\n  render() {\n    return (\n      &#x3C;ProfileContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/ProfileContext.Provider>\n    )\n  }\n}\n\nlet Profile = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"profile\">\n      &#x3C;img src={context.companyImage} />\n      &#x3C;User />\n    &#x3C;/div>\n  )\n}\n\nlet User = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"user\">\n      &#x3C;a href={context.url}>\n        &#x3C;img src={context.userImage} width=\"138px\" />\n      &#x3C;/a>\n      &#x3C;h1 className=\"profile-userName\">{context.userName}&#x3C;/h1>\n      &#x3C;p className=\"profile-fullName\">({context.fullName})&#x3C;/p>\n      &#x3C;Team />\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('Angular')}>Angular&#x3C;/button>\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('Vue')}>Vue&#x3C;/button>\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('React')}>React&#x3C;/button>\n    &#x3C;/div>\n  )\n}\n\nlet Team = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"team\">\n      &#x3C;p className=\"profile-team\">{context.team}&#x3C;/p>\n    &#x3C;/div>\n  )\n}\n\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;ProfileProvider>\n        &#x3C;Profile />\n      &#x3C;/ProfileProvider>\n    );\n  }\n}\n\nrender(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<p>render(<App />, document.getElementById('root'));</p>\n<pre><code>> Resource: https://www.robinwieruch.de/react-context\n</code></pre>"}},{"node":{"id":"e07bd24b-17b4-5070-b764-52d6574904bb","excerpt":"Sometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the…","rawMarkdownBody":"\r\nSometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the local storage is:\r\nwindow.localStorage.setItem('myInput', value)\r\n\r\nExample code:\r\n```\r\nimport React from \"react\";\r\n\r\nexport class LocalStorage1 extends React.Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state={value: \"\"}\r\n      this.handleChange=this.handleChange.bind(this)\r\n  }\r\n  handleChange(e){\r\n    this.setState({value: e.target.value});\r\n    window.localStorage.setItem('myInput', e.target.value)\r\n  }\r\nrender () {\r\n    return (\r\n        <div>\r\n            <p>{this.state.value}</p>\r\n            <input type=\"text\" name=\"stats\" onChange={this.handleChange}></input>\r\n        </div>\r\n    )\r\n}\r\n}\r\n```\r\n> In order to retrieve item from the local storage we use code\r\n\r\nwindow.localStorage.getItem('myInput')","frontmatter":{"date":"2019-10-15","title":"Local Storage"},"fields":{"slug":"/Local_Storage/"},"timeToRead":1,"html":"<p>Sometimes we want to store some data in the local storage of the browser, so that we can use them on the next session. Command to set the local storage is:\nwindow.localStorage.setItem('myInput', value)</p>\n<p>Example code:</p>\n<pre><code>import React from \"react\";\n\nexport class LocalStorage1 extends React.Component {\n  constructor(props){\n      super(props);\n      this.state={value: \"\"}\n      this.handleChange=this.handleChange.bind(this)\n  }\n  handleChange(e){\n    this.setState({value: e.target.value});\n    window.localStorage.setItem('myInput', e.target.value)\n  }\nrender () {\n    return (\n        &#x3C;div>\n            &#x3C;p>{this.state.value}&#x3C;/p>\n            &#x3C;input type=\"text\" name=\"stats\" onChange={this.handleChange}>&#x3C;/input>\n        &#x3C;/div>\n    )\n}\n}\n</code></pre>\n<blockquote>\n<p>In order to retrieve item from the local storage we use code</p>\n</blockquote>\n<p>window.localStorage.getItem('myInput')</p>"}},{"node":{"id":"26313803-8624-5f31-b2b6-e6fc1a0abb2d","excerpt":"Template literal In JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be…","rawMarkdownBody":"\r\nTemplate literal\r\n\r\nIn JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be interpreted as a string\r\n\r\n```\r\n<p>You clicked {this.state.count} times</p>\r\n```\r\n\r\nWhen we are in JS land, we need to explicitly say that a variable should be interpreted as a string by adding $ in front of the curly bracket\r\n\r\n```\r\ncomponentDidMount() { document.title = `You clicked ${this.state.count} times`; }\r\n```","frontmatter":{"date":"2019-10-14","title":"Writing strings in JS and JSX"},"fields":{"slug":"/Writing_strings_in_JS_and_JSX/"},"timeToRead":1,"html":"<p>Template literal</p>\n<p>In JSX land, we dont need to use any special character to write a string, all variables in between curly brackets will be interpreted as a string</p>\n<pre><code>&#x3C;p>You clicked {this.state.count} times&#x3C;/p>\n</code></pre>\n<p>When we are in JS land, we need to explicitly say that a variable should be interpreted as a string by adding $ in front of the curly bracket</p>\n<pre><code>componentDidMount() { document.title = `You clicked ${this.state.count} times`; }\n</code></pre>"}},{"node":{"id":"22b7f20a-bd6f-5d49-a069-fab12398b603","excerpt":"We cant comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this: It will not work. We need to…","rawMarkdownBody":"\r\nWe cant comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this:\r\n\r\n``` \r\n/*<p>\r\n <code>Welcome</code> to my page.\r\n </p>*/\r\n\r\n ```\r\n\r\nIt will not work. We need to wrap the p tag in curly brackets.\r\n\r\n```\r\n{/*\r\n        <p>\r\n          <code>Welcome</code> to my page.\r\n        </p>*/}\r\n```\r\nNow we can finallz comment out stufff :) happy testing","frontmatter":{"date":"2019-10-13","title":"Comment Me Out"},"fields":{"slug":"/Comment_Me_Out/"},"timeToRead":1,"html":"<p>We cant comment out JSX (because // or /* are only valid for Javascript). So if we wanted to comment out this:</p>\n<pre><code>/*&#x3C;p>\n &#x3C;code>Welcome&#x3C;/code> to my page.\n &#x3C;/p>*/\n</code></pre>\n<p>It will not work. We need to wrap the p tag in curly brackets.</p>\n<pre><code>{/*\n        &#x3C;p>\n          &#x3C;code>Welcome&#x3C;/code> to my page.\n        &#x3C;/p>*/}\n</code></pre>\n<p>Now we can finallz comment out stufff :) happy testing</p>"}},{"node":{"id":"9f8de051-0dab-5327-8d70-ae03ebdba193","excerpt":"Go to your project directory and then to install React bootstrap (delivers COMPONENETS like Col, Row) and Bootstrap itself (both) npm…","rawMarkdownBody":"\r\n> Go to your project directory and then to install React bootstrap (delivers COMPONENETS like Col, Row) and Bootstrap itself (both)\r\n\r\nnpm install react-bootstrap bootstrap\r\n\r\n> Import creat\r\n\r\n> As React bootstrap dosnt ship explicitly with CSS we need to import them to our index.js or addp.js\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';","frontmatter":{"date":"2019-10-12","title":"React Bootstrap"},"fields":{"slug":"/ReactBootstrap/"},"timeToRead":1,"html":"<blockquote>\n<p>Go to your project directory and then to install React bootstrap (delivers COMPONENETS like Col, Row) and Bootstrap itself (both)</p>\n</blockquote>\n<p>npm install react-bootstrap bootstrap</p>\n<blockquote>\n<p>Import creat</p>\n</blockquote>\n<blockquote>\n<p>As React bootstrap dosnt ship explicitly with CSS we need to import them to our index.js or addp.js</p>\n</blockquote>\n<p>import 'bootstrap/dist/css/bootstrap.min.css';</p>"}},{"node":{"id":"33ae629a-775e-584d-9ae5-ac6e190d3c28","excerpt":"References: Amazing CSS course for beginners\nhttps://www.codecademy.com/courses/learn-css/ Selectors\nEnable to select certain html element(s…","rawMarkdownBody":"References:\r\n> Amazing CSS course for beginners\r\nhttps://www.codecademy.com/courses/learn-css/\r\n\r\n\r\nSelectors\r\nEnable to select certain html element(s) and apply CSS styles to it\r\n>Selectors are how we can select certain html elements. In CSS there are 3 ways how we can select elements\r\nA) by tag name - this scenario will style the teal colour to ALL p tags in the page\r\n\r\nHTML:\r\n<p>Hello Universe</p>\r\n\r\nCSS:\r\np {\r\n color: tile;\r\n}\r\n\r\nB) by class name. In case of class names we need to pre-pend period in front of the class name. They are meant to bee ree-used over many elements.\r\n\r\nHTML:\r\n<p class=\"title\">Hello Universe</p>\r\n\r\nCSS:\r\n.title {\r\n font-family: Arial;\r\n}\r\n\r\n\r\nC) By id of the element. Id is completely unique per site. We ned to pre-pend hashtag. An ID is meant to style only one element.\r\n\r\n\r\nHTML:\r\n<p id=\"large-title\">Hello Universe</p>\r\n\r\nCSS:\r\n#large-title {\r\n font-size: 50px;\r\n}\r\n\r\n> Precedence of selectors: General rule is that more specific selector will be applied compared to more generic selector. ID selector > Class selector > Tag selector. If we have example below, the red colour will be applied because .header (class selector) is more specific than tag selector. From the above 3 selectors, most specific selector is ID selector.\r\n\r\nHTML:\r\n<h1 class=\"headere\">Hi</h1>\r\n\r\nCSS:\r\nh1 {\r\ncolor: blue;\r\n}\r\n\r\n.header {\r\ncolor: red;\r\n}\r\n\r\n> There is only one way how to over-ride ID selector and namely by !importnat syntax. This was can overrride any CSS styling ans should be only used as a last resort (because this one is very hard to override). In the example below, the colour of header will be blue.\r\nHTML:\r\n<h1 class=\"headere\">Hi</h1>\r\n\r\nCSS:\r\nh1 {\r\n  color: blue !important;\r\n}\r\n\r\n.header {\r\n  color: red;\r\n}\r\n\r\n\r\n> Chaining selectors: we are able to chain more selectors and make them even more specific. In the example below, CSS style will be applied to h1 tags but only thosee which have class name teal.\r\nh1.teal {\r\ncolor: teal;\r\n}\r\n\r\n> Chaining selectors can be also this way:\r\n.main p {\r\nfont-family: Arial;\r\n}\r\n\r\n> If we need to apply same style to multiple selectors, we can simply separate them by comma.\r\nInstead of:\r\nh1 {\r\n  font-family: Georgia;\r\n}\r\n\r\n.menu {\r\n  font-family: Georgia;\r\n}\r\n\r\nWe can write:\r\n\r\nh1, .menu {\r\nfont-family: Georgia;\r\n}\r\n\r\n\r\n\r\n> Font styles and families\r\nhttpshttps://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html\r\n\r\nExamples:\r\n> Changing font:\r\nh1 {\r\nfont-family: Garamond;\r\n}\r\n\r\n> General rules about font-families:\r\nThe font specified in a stylesheet must be installed on a user’s computer in order for that font to display when a user visits the web page. The default typeface for all HTML elements is Times New Roman. It’s a good practice to limit the number of fonts used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision. When the name of a font consists of more than one word, it’s a best practice to enclose the font’s name in quotes. Example:\r\nh1 {\r\n  font-family: \"Courier New\";\r\n}\r\n\r\n> Changin font size:\r\np {\r\nfont-size: 18px;\r\n}\r\n\r\n> Changing bold (thickness or narrowness of the font) using font-weight (it can hold values bold or normal):\r\np {\r\nfont-weight: bold;\r\n}\r\n\r\n> Aligning text to right, left or center\r\nh1 {\r\n  text-align: right;\r\n}\r\n\r\n> Setting color of text can be done in two ways:\r\nA) foreground colour  for example colour of the text itself, property to do this is called color\r\nB) background colour, property to do this is background-color\r\nh1 {\r\n  color: red;\r\n  background-color: blue;\r\n}\r\n\r\n> Change opacity of an element. Accepts values from 0 (0% opacity) to 1 (100%  opacity)\r\n.overlay {\r\n  opacity: 0.5;\r\n}\r\n\r\n> Adding image as a background to an element. URL can be link to exterenal site or fie within the project folder\r\n.main-banner {\r\n  background-image: url(\"https://www.example.com/image.jpg\");\r\n}\r\n\r\n.main-banner {\r\n  background-image: url(\"images/mountains.jpg\");\r\n}\r\n\r\n> Transforming whole text to uppercase\r\nh1{\r\ntext-transform: uppercase;\r\n}\r\n\r\n> Transforming first leter to upper case\r\nh3 {\r\ntext-transform: capitalize;\r\n}\r\n\r\n> Text cursive. Note, this does not mean italics. Cursive only emulates handwriting\r\n.cursive {\r\nfont-family: cursive;\r\n}\r\n\r\n> The Box model includes the content area’s size (width and height) and the element’s padding, border, and margin. The properties include:\r\n\r\n    Width and height — specifies the width and height of the content area.\r\n    Padding — specifies the amount of space between the content area and the border.\r\n    Border — specifies the thickness and style of the border surrounding the content area and padding.\r\n    Margin — specifies the amount of space between the border and the outside edge of the element.\r\n\r\n> Width and height\r\np {\r\n  height: 80px;\r\n  width: 240px;\r\n}\r\n\r\n> A border is a line that surrounds an element, like a frame around a painting. Borders can be set with a specific width, style, and color.\r\n\r\n    width — The thickness of the border. A border’s thickness can be set in pixels or with one of the following keywords: thin, medium, or thick.\r\n    style — The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, and solid.\r\n    color — The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.\r\n\r\np {\r\n  border: 3px solid coral;\r\n}\r\n\r\n> border with rounded corners\r\ndiv.container {\r\n  border: 3px solid rgb(22, 77, 100);\r\n  border-radius: 5px;\r\n}\r\n\r\n> perfect circle bordeer - set the radius equel to height of the box or 100%\r\ndiv.container {\r\n  height: 60px;\r\n  width: 60px;\r\n  border: 3px solid rgb(22, 77, 100);\r\n  border-radius: 100%;\r\n}\r\n\r\n> Padding - The space between the contents of a box and the borders of a box. In example belowpadding will be applied ot all sides.\r\n\r\np.content-header {\r\n  border: 3px solid coral;\r\n  padding: 10px;\r\n}\r\n\r\n> Padding can  onlso be only defined with for example: \r\n    padding-top\r\n    padding-right\r\n    padding-bottom\r\n    padding-left\r\n\r\n\r\n","frontmatter":{"date":"2019-10-11","title":"CSS"},"fields":{"slug":"/CSS/"},"timeToRead":4,"html":"<p>References:</p>\n<blockquote>\n<p>Amazing CSS course for beginners\n<a href=\"https://www.codecademy.com/courses/learn-css/\">https://www.codecademy.com/courses/learn-css/</a></p>\n</blockquote>\n<p>Selectors\nEnable to select certain html element(s) and apply CSS styles to it</p>\n<blockquote>\n<p>Selectors are how we can select certain html elements. In CSS there are 3 ways how we can select elements\nA) by tag name - this scenario will style the teal colour to ALL p tags in the page</p>\n</blockquote>\n<p>HTML:</p>\n<p>Hello Universe</p>\n<p>CSS:\np {\ncolor: tile;\n}</p>\n<p>B) by class name. In case of class names we need to pre-pend period in front of the class name. They are meant to bee ree-used over many elements.</p>\n<p>HTML:</p>\n<p class=\"title\">Hello Universe</p>\n<p>CSS:\n.title {\nfont-family: Arial;\n}</p>\n<p>C) By id of the element. Id is completely unique per site. We ned to pre-pend hashtag. An ID is meant to style only one element.</p>\n<p>HTML:</p>\n<p id=\"large-title\">Hello Universe</p>\n<p>CSS:</p>\n<h1>large-title {</h1>\n<p> font-size: 50px;\n}</p>\n<blockquote>\n<p>Precedence of selectors: General rule is that more specific selector will be applied compared to more generic selector. ID selector > Class selector > Tag selector. If we have example below, the red colour will be applied because .header (class selector) is more specific than tag selector. From the above 3 selectors, most specific selector is ID selector.</p>\n</blockquote>\n<p>HTML:</p>\n<h1 class=\"headere\">Hi</h1>\n<p>CSS:\nh1 {\ncolor: blue;\n}</p>\n<p>.header {\ncolor: red;\n}</p>\n<blockquote>\n<p>There is only one way how to over-ride ID selector and namely by !importnat syntax. This was can overrride any CSS styling ans should be only used as a last resort (because this one is very hard to override). In the example below, the colour of header will be blue.\nHTML:</p>\n</blockquote>\n<h1 class=\"headere\">Hi</h1>\n<p>CSS:\nh1 {\ncolor: blue !important;\n}</p>\n<p>.header {\ncolor: red;\n}</p>\n<blockquote>\n<p>Chaining selectors: we are able to chain more selectors and make them even more specific. In the example below, CSS style will be applied to h1 tags but only thosee which have class name teal.\nh1.teal {\ncolor: teal;\n}</p>\n</blockquote>\n<blockquote>\n<p>Chaining selectors can be also this way:\n.main p {\nfont-family: Arial;\n}</p>\n</blockquote>\n<blockquote>\n<p>If we need to apply same style to multiple selectors, we can simply separate them by comma.\nInstead of:\nh1 {\nfont-family: Georgia;\n}</p>\n</blockquote>\n<p>.menu {\nfont-family: Georgia;\n}</p>\n<p>We can write:</p>\n<p>h1, .menu {\nfont-family: Georgia;\n}</p>\n<blockquote>\n<p>Font styles and families\nhttps<a href=\"https://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html\">https://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html</a></p>\n</blockquote>\n<p>Examples:</p>\n<blockquote>\n<p>Changing font:\nh1 {\nfont-family: Garamond;\n}</p>\n</blockquote>\n<blockquote>\n<p>General rules about font-families:\nThe font specified in a stylesheet must be installed on a user’s computer in order for that font to display when a user visits the web page. The default typeface for all HTML elements is Times New Roman. It’s a good practice to limit the number of fonts used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision. When the name of a font consists of more than one word, it’s a best practice to enclose the font’s name in quotes. Example:\nh1 {\nfont-family: \"Courier New\";\n}</p>\n</blockquote>\n<blockquote>\n<p>Changin font size:\np {\nfont-size: 18px;\n}</p>\n</blockquote>\n<blockquote>\n<p>Changing bold (thickness or narrowness of the font) using font-weight (it can hold values bold or normal):\np {\nfont-weight: bold;\n}</p>\n</blockquote>\n<blockquote>\n<p>Aligning text to right, left or center\nh1 {\ntext-align: right;\n}</p>\n</blockquote>\n<blockquote>\n<p>Setting color of text can be done in two ways:\nA) foreground colour  for example colour of the text itself, property to do this is called color\nB) background colour, property to do this is background-color\nh1 {\ncolor: red;\nbackground-color: blue;\n}</p>\n</blockquote>\n<blockquote>\n<p>Change opacity of an element. Accepts values from 0 (0% opacity) to 1 (100%  opacity)\n.overlay {\nopacity: 0.5;\n}</p>\n</blockquote>\n<blockquote>\n<p>Adding image as a background to an element. URL can be link to exterenal site or fie within the project folder\n.main-banner {\nbackground-image: url(\"<a href=\"https://www.example.com/image.jpg%22\">https://www.example.com/image.jpg\"</a>);\n}</p>\n</blockquote>\n<p>.main-banner {\nbackground-image: url(\"images/mountains.jpg\");\n}</p>\n<blockquote>\n<p>Transforming whole text to uppercase\nh1{\ntext-transform: uppercase;\n}</p>\n</blockquote>\n<blockquote>\n<p>Transforming first leter to upper case\nh3 {\ntext-transform: capitalize;\n}</p>\n</blockquote>\n<blockquote>\n<p>Text cursive. Note, this does not mean italics. Cursive only emulates handwriting\n.cursive {\nfont-family: cursive;\n}</p>\n</blockquote>\n<blockquote>\n<p>The Box model includes the content area’s size (width and height) and the element’s padding, border, and margin. The properties include:</p>\n</blockquote>\n<pre><code>Width and height — specifies the width and height of the content area.\nPadding — specifies the amount of space between the content area and the border.\nBorder — specifies the thickness and style of the border surrounding the content area and padding.\nMargin — specifies the amount of space between the border and the outside edge of the element.\n</code></pre>\n<blockquote>\n<p>Width and height\np {\nheight: 80px;\nwidth: 240px;\n}</p>\n</blockquote>\n<blockquote>\n<p>A border is a line that surrounds an element, like a frame around a painting. Borders can be set with a specific width, style, and color.</p>\n</blockquote>\n<pre><code>width — The thickness of the border. A border’s thickness can be set in pixels or with one of the following keywords: thin, medium, or thick.\nstyle — The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, and solid.\ncolor — The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.\n</code></pre>\n<p>p {\nborder: 3px solid coral;\n}</p>\n<blockquote>\n<p>border with rounded corners\ndiv.container {\nborder: 3px solid rgb(22, 77, 100);\nborder-radius: 5px;\n}</p>\n</blockquote>\n<blockquote>\n<p>perfect circle bordeer - set the radius equel to height of the box or 100%\ndiv.container {\nheight: 60px;\nwidth: 60px;\nborder: 3px solid rgb(22, 77, 100);\nborder-radius: 100%;\n}</p>\n</blockquote>\n<blockquote>\n<p>Padding - The space between the contents of a box and the borders of a box. In example belowpadding will be applied ot all sides.</p>\n</blockquote>\n<p>p.content-header {\nborder: 3px solid coral;\npadding: 10px;\n}</p>\n<blockquote>\n<p>Padding can  onlso be only defined with for example: </p>\n</blockquote>\n<pre><code>padding-top\npadding-right\npadding-bottom\npadding-left\n</code></pre>"}},{"node":{"id":"04315871-e4f4-53ce-9d7e-9c0e2f7cc974","excerpt":"We can query images, or content of the website (text) from files in our project folder. Firstly open your command line in Ubuntu and install…","rawMarkdownBody":"\r\n> We can query images, or content of the website (text) from files in our project folder.\r\n\r\n> Firstly open your command line in Ubuntu and install the gatsby package called source filesystem plugin. The filesystem source plugin lets you query data ABOUT files (note: but it does NOT allow you to query data inside files, for that we have another plugin called transform)\r\nnpm install --save gatsby-source-filesystem\r\n\r\n> Secondly open the gatsby-config.js and add this plugin there:\r\nplugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n\r\n> Save and restart gatsby development environment\r\ngatsby develop\r\n\r\n> open the http://localhost:8000/___graphql Two new elements will be added there: files and allFile\r\n\r\n> Select some items for our query. For example base is the name of the file, prettySize is the size of th efile, relativeDirectory is a folder in which file resides, etc\r\n\r\n> Lets use this data and print it to console\r\nimport React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nexport default ({ data }) => {\r\n  console.log(data)\r\n  return (\r\n    <Layout>\r\n      <div>Hello world</div>\r\n    </Layout>\r\n  )\r\n}\r\nexport const query = graphql`\r\n  query {\r\n    allFile {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          prettySize\r\n          extension\r\n          birthTime(fromNow: true)\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n> Lets make the data beautiful in a table:\r\nimport React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nexport default ({ data }) => {\r\n  console.log(data)\r\n  return (\r\n    <Layout>\r\n      <div>\r\n        <h1>My Site's Files</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>relativePath</th>\r\n              <th>prettySize</th>\r\n              <th>extension</th>\r\n              <th>birthTime</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.allFile.edges.map(({ node }, index) => (\r\n              <tr key={index}>\r\n                <td>{node.relativePath}</td>\r\n                <td>{node.prettySize}</td>\r\n                <td>{node.extension}</td>\r\n                <td>{node.birthTime}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\nexport const query = graphql`\r\n  query {\r\n    allFile {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          prettySize\r\n          extension\r\n          birthTime(fromNow: true)\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n> <table> tag creates a table\r\n\r\n\r\n> <thread> tag is used to group header content in an HTML table. The <thead> element is used in conjunction with the <tbody> and <tfoot> elements to specify each part of a table (header, body, footer). Browsers can use these elements to enable scrolling of the table body independently of the header and footer. Also, when printing a large table that spans multiple pages, these elements can enable the table header and footer to be printed at the top and bottom of each page. The <thead> tag must be used in the following context: As a child of a <table> element, after any <caption>, and <colgroup> elements, and before any <tbody>, <tfoot>, and <tr> elements. \r\n\r\n> <tr> tag means table row\r\n\r\n> <th> tag means one column in a table header\r\n\r\n> <td> tag means one column in the table data\r\n\r\n> for each tr we will take all available data into columns\r\n\r\n> How does this part of the code work?\r\n{data.allFile.edges.map(({ node }, index) => (\r\n              <tr key={index}>\r\n                <td>{node.base}</td>\r\n                <td>{node.prettySize}</td>\r\n                <td>{node.relativeDirectory}</td>\r\n                <td>{node.name}</td>\r\n              </tr>\r\n            ))}\r\n\r\n\r\n> Map is a method which can be called on an array. When we query data, you can see on the right column on GraphiQL how our data will look like: For example:\r\n{\r\n  \"data\": {\r\n    \"allFile\": {\r\n      \"edges\": [\r\n        {\r\n          \"node\": {\r\n            \"id\": \"3d02d57a-a1ff-58a6-a75b-41d2d1f5de2f\",\r\n            \"base\": \"container.js\",\r\n            \"prettySize\": \"177 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"container\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"bfd68830-b23b-5750-9e97-fb73e577ebc8\",\r\n            \"base\": \"header.js\",\r\n            \"prettySize\": \"141 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"header\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"5110e7f0-f000-5a81-b65f-2d655e4937b4\",\r\n            \"base\": \"container.module.css\",\r\n            \"prettySize\": \"55 B\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"container.module\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"09ae19a0-accc-5c2a-9caa-ea806602b54f\",\r\n            \"base\": \"layout.js\",\r\n            \"prettySize\": \"1.25 kB\",\r\n            \"relativeDirectory\": \"components\",\r\n            \"name\": \"layout\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"e0c2ac65-ada6-5773-a74d-6129e1de7f7b\",\r\n            \"base\": \"about-css-modules.js\",\r\n            \"prettySize\": \"1.03 kB\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about-css-modules\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"95b910e6-a707-512e-b6cd-09e0f60fd8cb\",\r\n            \"base\": \"about-css-modules.module.css\",\r\n            \"prettySize\": \"334 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about-css-modules.module\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"d0e66873-11b2-5ecf-9971-c397b39412a8\",\r\n            \"base\": \"about.js\",\r\n            \"prettySize\": \"484 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"about\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"391e78c8-e96e-5412-a4c4-02d3074c2bc1\",\r\n            \"base\": \"contact.js\",\r\n            \"prettySize\": \"232 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"contact\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"689eea2c-7d70-53e6-8078-26e28cd337ce\",\r\n            \"base\": \"index.js\",\r\n            \"prettySize\": \"358 B\",\r\n            \"relativeDirectory\": \"pages\",\r\n            \"name\": \"index\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"318cd83a-3107-5cbb-b65e-b2eb0fb3a428\",\r\n            \"base\": \"global.css\",\r\n            \"prettySize\": \"49 B\",\r\n            \"relativeDirectory\": \"styles\",\r\n            \"name\": \"global\"\r\n          }\r\n        },\r\n        {\r\n          \"node\": {\r\n            \"id\": \"34912156-9592-5c52-aac4-7e851d124baa\",\r\n            \"base\": \"typography.js\",\r\n            \"prettySize\": \"226 B\",\r\n            \"relativeDirectory\": \"utils\",\r\n            \"name\": \"typography\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\nNotice how data.allFile.edges returns an ARRAY of OBJECTS!!!! Which means we can use array method called map on it. Map works in a way that it itterated through every single element of the array and performs a certain function in it. It doesnt change original array, but creates a new array on which the function is performed.  One small example is here:\r\n\r\nvar array1 = [1, 4, 9, 16];\r\n// pass a function to map\r\nconst map1 = array1.map(x => x * 2);\r\n\r\nconsole.log(map1);\r\n// expected output: Array [2, 8, 18, 32]\r\n\r\n> x is the element of the array which we currentl itterate through\r\n\r\n> Documentation of Map is here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\r\n\r\n> Notice how the syntax looks:\r\nvar new_array = arr.map(function callback(currentValue[, index[, array]]) {\r\n    // Return element for new_array\r\n}[, thisArg])\r\n\r\n> this means that when using .map method we can use the current object we are on, but also its index!!!! which mean  index 0,1,2, etc\r\n\r\n> in our .map method we have a function which takes 2 arguments: ({ node }, index)\r\n{ node } is an actual object which resides under data.allFile.edges\r\nIt should actually be called node, otherwise we will have an error.\r\nindex is the index of the element in our array on which we are currently itterating.\r\n\r\n> for each element in our array, we will create a <tr> tag which will have a unique property key which will be equal to the index of that element in the array\r\n<tr key={index}>\r\n...\r\n</tr> \r\n\r\n> then this table row (tr) will create 4 columns <td>\r\neach of <td> tags will access the element of array, which is in fact an object, where we retrieve values for example: node.base\r\n\r\n\r\n> In React each array element over which we will itterate needs a unique key property. \r\nEach time you iterate over an array you have to set the key prop to each of the resulting DOM element as React needs it to optimize the re-rendering. \r\nReact for example will detect duplicates and only renders the first node with this key. Without key={index} there will be an error in console that each child in the list should have a unique key property. More reading:\r\nhttps://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js\r\nhttps://stackoverflow.com/questions/37651660/react-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop?rq=1\r\n\r\n> The filesystem source plugin lets you query data ABOUT files but what if you want to query data INSIDE files? To make this possible, Gatsby supports transformer plugins which take raw content from source plugins and transform it into something more usable. Example: markdown files .md\r\n\r\n\r\n> create a new markdow file under your pages folder\r\nblog_post.md\r\n\r\n> look at the GrphiQL and refresh the query, you will see the new .md file in there\r\n\r\n\r\n> First install transformer plugin\r\nnpm install --save gatsby-transformer-remark\r\n\r\n> add plugin to gatsby config\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: `Pandas Eating Lots`,\r\n  },\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `src`,\r\n        path: `${__dirname}/src/`,\r\n      },\r\n    },\r\n    `gatsby-transformer-remark`,\r\n    `gatsby-plugin-emotion`,\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n\r\n> restart your development environment with\r\ngatsby develop\r\n\r\n\r\n> in GraphiQL we will see the new item allMarkdownRemark\r\n\r\n\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-10-10","title":"Querying data from project files"},"fields":{"slug":"/Querying_data_from_project_files/"},"timeToRead":7,"html":"<blockquote>\n<p>We can query images, or content of the website (text) from files in our project folder.</p>\n</blockquote>\n<blockquote>\n<p>Firstly open your command line in Ubuntu and install the gatsby package called source filesystem plugin. The filesystem source plugin lets you query data ABOUT files (note: but it does NOT allow you to query data inside files, for that we have another plugin called transform)\nnpm install --save gatsby-source-filesystem</p>\n</blockquote>\n<blockquote>\n<p>Secondly open the gatsby-config.js and add this plugin there:\nplugins: [</p>\n</blockquote>\n<pre><code>{\n  resolve: `gatsby-source-filesystem`,\n  options: {\n    name: `src`,\n    path: `${__dirname}/src/`,\n  },\n},\n</code></pre>\n<blockquote>\n<p>Save and restart gatsby development environment\ngatsby develop</p>\n</blockquote>\n<blockquote>\n<p>open the <a href=\"http://localhost:8000/___graphql\">http://localhost:8000/___graphql</a> Two new elements will be added there: files and allFile</p>\n</blockquote>\n<blockquote>\n<p>Select some items for our query. For example base is the name of the file, prettySize is the size of th efile, relativeDirectory is a folder in which file resides, etc</p>\n</blockquote>\n<blockquote>\n<p>Lets use this data and print it to console\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nexport default ({ data }) => {\nconsole.log(data)\nreturn (</p>\n</blockquote>\n<pre><code>&#x3C;Layout>\n  &#x3C;div>Hello world&#x3C;/div>\n&#x3C;/Layout>\n</code></pre>\n<p>  )\n}\nexport const query = graphql<code>query { allFile { edges { node { relativePath prettySize extension birthTime(fromNow: true) } } } }</code></p>\n<blockquote>\n<p>Lets make the data beautiful in a table:\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nexport default ({ data }) => {\nconsole.log(data)\nreturn (</p>\n</blockquote>\n<pre><code>&#x3C;Layout>\n  &#x3C;div>\n    &#x3C;h1>My Site's Files&#x3C;/h1>\n    &#x3C;table>\n      &#x3C;thead>\n        &#x3C;tr>\n          &#x3C;th>relativePath&#x3C;/th>\n          &#x3C;th>prettySize&#x3C;/th>\n          &#x3C;th>extension&#x3C;/th>\n          &#x3C;th>birthTime&#x3C;/th>\n        &#x3C;/tr>\n      &#x3C;/thead>\n      &#x3C;tbody>\n        {data.allFile.edges.map(({ node }, index) => (\n          &#x3C;tr key={index}>\n            &#x3C;td>{node.relativePath}&#x3C;/td>\n            &#x3C;td>{node.prettySize}&#x3C;/td>\n            &#x3C;td>{node.extension}&#x3C;/td>\n            &#x3C;td>{node.birthTime}&#x3C;/td>\n          &#x3C;/tr>\n        ))}\n      &#x3C;/tbody>\n    &#x3C;/table>\n  &#x3C;/div>\n&#x3C;/Layout>\n</code></pre>\n<p>  )\n}\nexport const query = graphql<code>query { allFile { edges { node { relativePath prettySize extension birthTime(fromNow: true) } } } }</code></p>\n<blockquote>\n<table> tag creates a table\n</blockquote>\n<blockquote>\n<p><thread> tag is used to group header content in an HTML table. The <thead> element is used in conjunction with the <tbody> and <tfoot> elements to specify each part of a table (header, body, footer). Browsers can use these elements to enable scrolling of the table body independently of the header and footer. Also, when printing a large table that spans multiple pages, these elements can enable the table header and footer to be printed at the top and bottom of each page. The <thead> tag must be used in the following context: As a child of a <table> element, after any <caption>, and <colgroup> elements, and before any <tbody>, <tfoot>, and <tr> elements. </p>\n</blockquote>\n<blockquote>\n<tr> tag means table row\n</blockquote>\n<blockquote>\n<th> tag means one column in a table header\n</blockquote>\n<blockquote>\n<td> tag means one column in the table data\n</blockquote>\n<blockquote>\n<p>for each tr we will take all available data into columns</p>\n</blockquote>\n<blockquote>\n<p>How does this part of the code work?\n{data.allFile.edges.map(({ node }, index) => (</p>\n</blockquote>\n<pre><code>          &#x3C;tr key={index}>\n            &#x3C;td>{node.base}&#x3C;/td>\n            &#x3C;td>{node.prettySize}&#x3C;/td>\n            &#x3C;td>{node.relativeDirectory}&#x3C;/td>\n            &#x3C;td>{node.name}&#x3C;/td>\n          &#x3C;/tr>\n        ))}\n</code></pre>\n<blockquote>\n<p>Map is a method which can be called on an array. When we query data, you can see on the right column on GraphiQL how our data will look like: For example:\n{\n\"data\": {</p>\n</blockquote>\n<pre><code>\"allFile\": {\n  \"edges\": [\n    {\n      \"node\": {\n        \"id\": \"3d02d57a-a1ff-58a6-a75b-41d2d1f5de2f\",\n        \"base\": \"container.js\",\n        \"prettySize\": \"177 B\",\n        \"relativeDirectory\": \"components\",\n        \"name\": \"container\"\n      }\n    },\n    {\n      \"node\": {\n        \"id\": \"bfd68830-b23b-5750-9e97-fb73e577ebc8\",\n        \"base\": \"header.js\",\n        \"prettySize\": \"141 B\",\n        \"relativeDirectory\": \"components\",\n        \"name\": \"header\"\n      }\n    },\n    {\n      \"node\": {\n        \"id\": \"5110e7f0-f000-5a81-b65f-2d655e4937b4\",\n        \"base\": \"container.module.css\",\n        \"prettySize\": \"55 B\",\n        \"relativeDirectory\": \"components\",\n        \"name\": \"container.module\"\n      }\n    },\n    {\n      \"node\": {\n        \"id\": \"09ae19a0-accc-5c2a-9caa-ea806602b54f\",\n        \"base\": \"layout.js\",\n        \"prettySize\": \"1.25 kB\",\n        \"relativeDirectory\": \"components\",\n        \"name\": \"layout\"\n      }\n    },\n    {\n      \"node\": {\n        \"id\": \"e0c2ac65-ada6-5773-a74d-6129e1de7f7b\",\n        \"base\": \"about-css-modules.js\",\n        \"prettySize\": \"1.03 kB\",\n        \"relativeDirectory\": \"pages\",\n        \"name\": \"about-css-modules\"\n      }\n    },\n    {\n      \"node\": {\n        \"id\": \"95b910e6-a707-512e-b6cd-09e0f60fd8cb\",\n        \"base\": \"about-css-modules.module.css\",\n        \"prettySize\": \"334 B\",\n        \"relativeDirectory\": \"pages\",\n        \"name\": \"about-css-modules.module\"\n      }\n    },\n    {\n      \"node\": {\n        \"id\": \"d0e66873-11b2-5ecf-9971-c397b39412a8\",\n        \"base\": \"about.js\",\n        \"prettySize\": \"484 B\",\n        \"relativeDirectory\": \"pages\",\n        \"name\": \"about\"\n      }\n    },\n    {\n      \"node\": {\n        \"id\": \"391e78c8-e96e-5412-a4c4-02d3074c2bc1\",\n        \"base\": \"contact.js\",\n        \"prettySize\": \"232 B\",\n        \"relativeDirectory\": \"pages\",\n        \"name\": \"contact\"\n      }\n    },\n    {\n      \"node\": {\n        \"id\": \"689eea2c-7d70-53e6-8078-26e28cd337ce\",\n        \"base\": \"index.js\",\n        \"prettySize\": \"358 B\",\n        \"relativeDirectory\": \"pages\",\n        \"name\": \"index\"\n      }\n    },\n    {\n      \"node\": {\n        \"id\": \"318cd83a-3107-5cbb-b65e-b2eb0fb3a428\",\n        \"base\": \"global.css\",\n        \"prettySize\": \"49 B\",\n        \"relativeDirectory\": \"styles\",\n        \"name\": \"global\"\n      }\n    },\n    {\n      \"node\": {\n        \"id\": \"34912156-9592-5c52-aac4-7e851d124baa\",\n        \"base\": \"typography.js\",\n        \"prettySize\": \"226 B\",\n        \"relativeDirectory\": \"utils\",\n        \"name\": \"typography\"\n      }\n    }\n  ]\n}\n</code></pre>\n<p>  }\n}</p>\n<p>Notice how data.allFile.edges returns an ARRAY of OBJECTS!!!! Which means we can use array method called map on it. Map works in a way that it itterated through every single element of the array and performs a certain function in it. It doesnt change original array, but creates a new array on which the function is performed.  One small example is here:</p>\n<p>var array1 = [1, 4, 9, 16];\n// pass a function to map\nconst map1 = array1.map(x => x * 2);</p>\n<p>console.log(map1);\n// expected output: Array [2, 8, 18, 32]</p>\n<blockquote>\n<p>x is the element of the array which we currentl itterate through</p>\n</blockquote>\n<blockquote>\n<p>Documentation of Map is here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map</a></p>\n</blockquote>\n<blockquote>\n<p>Notice how the syntax looks:\nvar new_array = arr.map(function callback(currentValue[, index[, array]]) {</p>\n</blockquote>\n<pre><code>// Return element for new_array\n</code></pre>\n<p>}[, thisArg])</p>\n<blockquote>\n<p>this means that when using .map method we can use the current object we are on, but also its index!!!! which mean  index 0,1,2, etc</p>\n</blockquote>\n<blockquote>\n<p>in our .map method we have a function which takes 2 arguments: ({ node }, index)\n{ node } is an actual object which resides under data.allFile.edges\nIt should actually be called node, otherwise we will have an error.\nindex is the index of the element in our array on which we are currently itterating.</p>\n</blockquote>\n<blockquote>\n<p>for each element in our array, we will create a <tr> tag which will have a unique property key which will be equal to the index of that element in the array</p>\n</blockquote>\n<tr key={index}>\n...\n</tr> \n<blockquote>\n<p>then this table row (tr) will create 4 columns <td>\neach of <td> tags will access the element of array, which is in fact an object, where we retrieve values for example: node.base</p>\n</blockquote>\n<blockquote>\n<p>In React each array element over which we will itterate needs a unique key property.\nEach time you iterate over an array you have to set the key prop to each of the resulting DOM element as React needs it to optimize the re-rendering.\nReact for example will detect duplicates and only renders the first node with this key. Without key={index} there will be an error in console that each child in the list should have a unique key property. More reading:\n<a href=\"https://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js\">https://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js</a>\n<a href=\"https://stackoverflow.com/questions/37651660/react-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop?rq=1\">https://stackoverflow.com/questions/37651660/react-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop?rq=1</a></p>\n</blockquote>\n<blockquote>\n<p>The filesystem source plugin lets you query data ABOUT files but what if you want to query data INSIDE files? To make this possible, Gatsby supports transformer plugins which take raw content from source plugins and transform it into something more usable. Example: markdown files .md</p>\n</blockquote>\n<blockquote>\n<p>create a new markdow file under your pages folder\nblog_post.md</p>\n</blockquote>\n<blockquote>\n<p>look at the GrphiQL and refresh the query, you will see the new .md file in there</p>\n</blockquote>\n<blockquote>\n<p>First install transformer plugin\nnpm install --save gatsby-transformer-remark</p>\n</blockquote>\n<blockquote>\n<p>add plugin to gatsby config\nmodule.exports = {\nsiteMetadata: {</p>\n</blockquote>\n<pre><code>title: `Pandas Eating Lots`,\n</code></pre>\n<p>  },\nplugins: [\n{\nresolve: <code>gatsby-source-filesystem</code>,\noptions: {\nname: <code>src</code>,\npath: <code>${__dirname}/src/</code>,\n},\n},\n<code>gatsby-transformer-remark</code>,\n<code>gatsby-plugin-emotion</code>,\n{\nresolve: <code>gatsby-plugin-typography</code>,\noptions: {\npathToConfigModule: <code>src/utils/typography</code>,\n},\n},\n],\n}</p>\n<blockquote>\n<p>restart your development environment with\ngatsby develop</p>\n</blockquote>\n<blockquote>\n<p>in GraphiQL we will see the new item allMarkdownRemark</p>\n</blockquote>"}},{"node":{"id":"4bdc078e-ea4f-5ace-89c2-c9b298236977","excerpt":"GraphQ is a technology for querying data and was developed by Facebook to allow react commponents to query data. QL means query language and…","rawMarkdownBody":"\r\n> GraphQ is a technology for querying data and was developed by Facebook to allow react commponents to query data. QL means query language and is similar to SQL.\r\n\r\n> Why do we prefer to query data anyway? Imagine you have yout site title (\"My page\") on various subpages, lets say on 20 subpages. Imagine you realize that this title is rather lame and you want to change it to somethis cooler (\"Welcome to my awesome page!\"). Then you have to go through all your code, every single page and change the hard typed title 20 times. However, it would be better if we could store our great title in some safe place from where each subpage would retrieve it. Then you would only need to change the title of the page once and everything would be updated automatically. Isnt it totally cool? Automation, saving time, error-prone. Let`s use awesome technologies and their potential to make our lives easier.\r\n\r\n> There are several GraphQL query types:\r\n1) Page queries, which can only be done my PAGES (not by standalone compoenents)\r\n2) Non-pages components queries (such as layout.js)\r\n\r\n\r\n1) PAGE QUERIES:\r\n> One way to query data is to use page queries from site Metadata. This option is only available for pages (it is not available for non-page compoenents like layout.js) In order to do so, open the gatsby-config file and paste this into it:\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: \"Coding Addventures with Addania\",\r\n  },\r\n\r\n> then go to you About page and add following code:\r\nimport React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\n\r\nexport default ( {data}) => (  \r\n    <h1>About {data.site.siteMetadata.title}</h1>\r\n    <p>Such wow. Very React.</p>\r\n\r\n)\r\n\r\nexport const query = graphql`\r\nquery {\r\n  site {\r\n    siteMetadata{\r\n      title\r\n    }\r\n  }\r\n}\r\n`\r\n\r\n> Please not that a constant query is outside of the componenet and by convention at the end of the file.\r\n\r\n\r\n2) NON-PAGE COMPONENT QUERIES\r\n> For standalone components like Header, Layout which are not pages, there is another way how to query data. We will use a hook called useStatisQuery. This hook was introduced to Gatsby that allow non-pages components also to retrieve data\r\n\r\n> Navigate to layout.js file\r\n\r\n> Import useStaticQuery and graphql from gatsy\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\n\r\n\r\n> function component needs to have {} brackets after =>\r\nexport default ({ children }) => {\r\n...\r\n}\r\n\r\n> create a function component which will have this constant before return function\r\nconst data = useStaticQuery (\r\n  graphql`\r\n  query {\r\n    site {\r\n      siteMetadata{\r\n        title\r\n      }\r\n    }\r\n  }\r\n  `\r\n)\r\n\r\n> Use query inside of the return function\r\n<h3>{data.site.siteMetadata.title}</h3>\r\n\r\n> Entire example layout.js is here:\r\nimport React from \"react\";\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\n\r\nconst ListLink = props => (\r\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\r\n    <Link to={props.to}>{props.children}</Link>\r\n  </li>\r\n)\r\n\r\nexport default ({ children }) => {\r\nconst data = useStaticQuery (\r\n  graphql`\r\n  query {\r\n    site {\r\n      siteMetadata{\r\n        title\r\n      }\r\n    }\r\n  }\r\n  `\r\n)\r\nreturn (\r\n  <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\r\n    <header style={{ marginBottom: `1.5rem` }}>\r\n      <Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\r\n        <h3 style={{ display: `inline` }}>Addania</h3>\r\n      </Link>\r\n      <ul style={{ listStyle: `none`, float: `right` }}>\r\n        <ListLink to=\"/\">Home</ListLink>\r\n        <ListLink to=\"/about/\">About</ListLink>\r\n        <ListLink to=\"/contact/\">Contact</ListLink>\r\n      </ul>\r\n      <hr />\r\n    </header>\r\n    {children}\r\n    <h3>{data.site.siteMetadata.title}</h3>\r\n    <hr />\r\n    <footer style={{ marginBottom: `1.5rem` }}>\r\n        <p style={{ display: `inline`, align: \"right\" }}>2019 Design and Development by Addania</p>\r\n    </footer>\r\n  </div>\r\n)\r\n}\r\n\r\n> In order to make sure to write the queries correctly we use tool called GraphiQL. It is available by default when our local development is running (gastby develop) and is accessible here:\r\nhttp://localhost:8000/___graphql\r\n\r\n\r\n\r\n\r\n","frontmatter":{"date":"2019-10-09","title":"Querying data with GraphQL"},"fields":{"slug":"/Querying_data_with_GraphQL/"},"timeToRead":2,"html":"<blockquote>\n<p>GraphQ is a technology for querying data and was developed by Facebook to allow react commponents to query data. QL means query language and is similar to SQL.</p>\n</blockquote>\n<blockquote>\n<p>Why do we prefer to query data anyway? Imagine you have yout site title (\"My page\") on various subpages, lets say on 20 subpages. Imagine you realize that this title is rather lame and you want to change it to somethis cooler (\"Welcome to my awesome page!\"). Then you have to go through all your code, every single page and change the hard typed title 20 times. However, it would be better if we could store our great title in some safe place from where each subpage would retrieve it. Then you would only need to change the title of the page once and everything would be updated automatically. Isnt it totally cool? Automation, saving time, error-prone. Let`s use awesome technologies and their potential to make our lives easier.</p>\n</blockquote>\n<blockquote>\n<p>There are several GraphQL query types:</p>\n</blockquote>\n<ol>\n<li>Page queries, which can only be done my PAGES (not by standalone compoenents)</li>\n<li>Non-pages components queries (such as layout.js)</li>\n<li>\n<p>PAGE QUERIES:</p>\n<blockquote>\n<p>One way to query data is to use page queries from site Metadata. This option is only available for pages (it is not available for non-page compoenents like layout.js) In order to do so, open the gatsby-config file and paste this into it:\nmodule.exports = {\nsiteMetadata: {\ntitle: \"Coding Addventures with Addania\",\n},</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>then go to you About page and add following code:\nimport React from \"react\";\nimport { graphql } from \"gatsby\";</p>\n</blockquote>\n<p>export default ( {data}) => (<br>\n<h1>About {data.site.siteMetadata.title}</h1>\n<p>Such wow. Very React.</p></p>\n<p>)</p>\n<p>export const query = graphql<code>query { site { siteMetadata{ title } } }</code></p>\n<blockquote>\n<p>Please not that a constant query is outside of the componenet and by convention at the end of the file.</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>NON-PAGE COMPONENT QUERIES</p>\n<blockquote>\n<p>For standalone components like Header, Layout which are not pages, there is another way how to query data. We will use a hook called useStatisQuery. This hook was introduced to Gatsby that allow non-pages components also to retrieve data</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>Navigate to layout.js file</p>\n</blockquote>\n<blockquote>\n<p>Import useStaticQuery and graphql from gatsy\nimport { Link, useStaticQuery, graphql } from \"gatsby\";</p>\n</blockquote>\n<blockquote>\n<p>function component needs to have {} brackets after =>\nexport default ({ children }) => {\n...\n}</p>\n</blockquote>\n<blockquote>\n<p>create a function component which will have this constant before return function\nconst data = useStaticQuery (\ngraphql`\nquery {</p>\n</blockquote>\n<pre><code>site {\n  siteMetadata{\n    title\n  }\n}\n</code></pre>\n<p>  }\n`\n)</p>\n<blockquote>\n<p>Use query inside of the return function</p>\n</blockquote>\n<h3>{data.site.siteMetadata.title}</h3>\n<blockquote>\n<p>Entire example layout.js is here:\nimport React from \"react\";\nimport { Link, useStaticQuery, graphql } from \"gatsby\";</p>\n</blockquote>\n<p>const ListLink = props => (</p>\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\n    <Link to={props.to}>{props.children}</Link>\n  </li>\n)\n<p>export default ({ children }) => {\nconst data = useStaticQuery (\ngraphql<code>query { site { siteMetadata{ title } } }</code>\n)\nreturn (</p>\n  <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\n    <header style={{ marginBottom: `1.5rem` }}>\n      <Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\n        <h3 style={{ display: `inline` }}>Addania</h3>\n      </Link>\n      <ul style={{ listStyle: `none`, float: `right` }}>\n        <ListLink to=\"/\">Home</ListLink>\n        <ListLink to=\"/about/\">About</ListLink>\n        <ListLink to=\"/contact/\">Contact</ListLink>\n      </ul>\n      <hr />\n    </header>\n    {children}\n    <h3>{data.site.siteMetadata.title}</h3>\n    <hr />\n    <footer style={{ marginBottom: `1.5rem` }}>\n        <p style={{ display: `inline`, align: \"right\" }}>2019 Design and Development by Addania</p>\n    </footer>\n  </div>\n)\n}\n<blockquote>\n<p>In order to make sure to write the queries correctly we use tool called GraphiQL. It is available by default when our local development is running (gastby develop) and is accessible here:\n<a href=\"http://localhost:8000/___graphql\">http://localhost:8000/___graphql</a></p>\n</blockquote>"}},{"node":{"id":"8cdfea2b-94f0-5bf9-87e3-90edd1b2ee21","excerpt":"In order to use custom fonts you need to install a package (plug in) and then restart the local host\nnpm install --save gatsby-plugin…","rawMarkdownBody":"\r\n> In order to use custom fonts you need to install a package (plug in) and then restart the local host\r\nnpm install --save gatsby-plugin-typography react-typography typography typography-theme-fairy-gates\r\n\r\n> Then you need to open gatsby-config.js file. This is the file where we need to add plugins or site configuration. IN order to use tzpographz plugin we need to change this:\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n  ],\r\n}\r\n\r\n\r\n> create new folder under src called \"utils\"\r\n\r\n> add a new js file called: typography.js\r\n\r\n> add this code to the file:\r\nimport Typography from \"typography\"\r\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\r\nconst typography = new Typography(fairyGateTheme)\r\nexport const { scale, rhythm, options } = typography\r\nexport default typography\r\n\r\n>>> start development server\r\ngatsby develop\r\n\r\n","frontmatter":{"date":"2019-10-08","title":"Gatsby fonts"},"fields":{"slug":"/Gatsby_fonts/"},"timeToRead":1,"html":"<blockquote>\n<p>In order to use custom fonts you need to install a package (plug in) and then restart the local host\nnpm install --save gatsby-plugin-typography react-typography typography typography-theme-fairy-gates</p>\n</blockquote>\n<blockquote>\n<p>Then you need to open gatsby-config.js file. This is the file where we need to add plugins or site configuration. IN order to use tzpographz plugin we need to change this:\nmodule.exports = {\nplugins: [</p>\n</blockquote>\n<pre><code>{\n  resolve: `gatsby-plugin-typography`,\n  options: {\n    pathToConfigModule: `src/utils/typography`,\n  },\n},\n</code></pre>\n<p>  ],\n}</p>\n<blockquote>\n<p>create new folder under src called \"utils\"</p>\n</blockquote>\n<blockquote>\n<p>add a new js file called: typography.js</p>\n</blockquote>\n<blockquote>\n<p>add this code to the file:\nimport Typography from \"typography\"\nimport fairyGateTheme from \"typography-theme-fairy-gates\"\nconst typography = new Typography(fairyGateTheme)\nexport const { scale, rhythm, options } = typography\nexport default typography</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>start development server\ngatsby develop</p>\n</blockquote>\n</blockquote>\n</blockquote>"}},{"node":{"id":"b4442c35-48e8-55ac-a56a-f6eba3e8934d","excerpt":"Description\nHooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function…","rawMarkdownBody":"\r\n\r\n> Description\r\nHooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function components with hooks rather than classes with state. Class componenets might be deeprecated in future. Advantagee of hooks is that we can createe our own hooks and logic behind them. \r\n\r\n>Examples of hooks:\r\nuseState - allows function component to have state\r\nuseEffect - allows function component to use a certain function any time component renders, it is equivalent to lifecycles of class components\r\n\r\n> Importing\r\nEach hook neeeds to be imported from react.\r\nExample 1:\r\nimport React from \"react\";\r\nimport {useState} from \"react\";\r\n\r\nExample 2:\r\nimport React, {useState} from \"react\";\r\n","frontmatter":{"date":"2019-10-07","title":"Hooks"},"fields":{"slug":"/Hooks/"},"timeToRead":1,"html":"<blockquote>\n<p>Description\nHooks allow function components to have states. It eliminates completely usage of classes. It is recommended to use function components with hooks rather than classes with state. Class componenets might be deeprecated in future. Advantagee of hooks is that we can createe our own hooks and logic behind them. </p>\n</blockquote>\n<blockquote>\n<p>Examples of hooks:\nuseState - allows function component to have state\nuseEffect - allows function component to use a certain function any time component renders, it is equivalent to lifecycles of class components</p>\n</blockquote>\n<blockquote>\n<p>Importing\nEach hook neeeds to be imported from react.\nExample 1:\nimport React from \"react\";\nimport {useState} from \"react\";</p>\n</blockquote>\n<p>Example 2:\nimport React, {useState} from \"react\";</p>"}},{"node":{"id":"923d0f5a-e2e8-57ab-9278-01f7cdb8660f","excerpt":"There are basically 2 ways to style the React: importing a standard CSS file for example index.css, which can reside side by side next to…","rawMarkdownBody":"\r\nThere are basically 2 ways to style the React:\r\n1) importing a standard CSS file for example index.css, which can reside side by side next to your main file, for example index.js. \r\n\r\n> On ubuntu console, create the css file\r\ntouch index.css\r\n\r\n> Add some styling to your css file, which follows standard CSS rules, for example in this case we will center the video asset which has class name called player:\r\n```\r\n.player {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: block;\r\n}\r\n```\r\n> index.js will look like this:\r\n``` \r\n<video controls className=\"player\">\r\n  <source src=\"/video.mp4\" type=\"video/mp4\">\r\n  </source>\r\n</video>\r\n```\r\n\r\n> Open your index.js file and import your CSS to your JS file:\r\nimport \"/index.css\";\r\n\r\n2) use styling inline in JS file. \r\n\r\n>Open your index.js file. IN the tag where you want to apply your styles write style={{}} and add your style in between of the brackets. First pair of brackets means we are injecting JSX to the html, second pair of brackets means that what we are inputting there is in fact an object. Multiple styles needs to be separated by comma (just like in any other object). Please make sure you do not type styles (plural) instead of style (singular) Correct is style (singular). Please make sure that everything that in CSS uses minus (example: margin-left) must be inline without the minus and camelCased (example: marginLeft). Plus there must always be quotation marks even if in the CSS there wouldnt be. Full example:\r\n<video  style={{width:\"500px\", display: \"block\", marginLeft: \"auto\", marginRight:\"auto\"}} controls>","frontmatter":{"date":"2019-10-06","title":"Adding CSS to React"},"fields":{"slug":"/Adding_CSS_to_React/"},"timeToRead":1,"html":"<p>There are basically 2 ways to style the React:</p>\n<ol>\n<li>importing a standard CSS file for example index.css, which can reside side by side next to your main file, for example index.js. </li>\n</ol>\n<blockquote>\n<p>On ubuntu console, create the css file\ntouch index.css</p>\n</blockquote>\n<blockquote>\n<p>Add some styling to your css file, which follows standard CSS rules, for example in this case we will center the video asset which has class name called player:</p>\n</blockquote>\n<pre><code>.player {\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n</code></pre>\n<blockquote>\n<p>index.js will look like this:</p>\n</blockquote>\n<pre><code>&#x3C;video controls className=\"player\">\n  &#x3C;source src=\"/video.mp4\" type=\"video/mp4\">\n  &#x3C;/source>\n&#x3C;/video>\n</code></pre>\n<blockquote>\n<p>Open your index.js file and import your CSS to your JS file:\nimport \"/index.css\";</p>\n</blockquote>\n<ol start=\"2\">\n<li>use styling inline in JS file. </li>\n</ol>\n<blockquote>\n<p>Open your index.js file. IN the tag where you want to apply your styles write style={{}} and add your style in between of the brackets. First pair of brackets means we are injecting JSX to the html, second pair of brackets means that what we are inputting there is in fact an object. Multiple styles needs to be separated by comma (just like in any other object). Please make sure you do not type styles (plural) instead of style (singular) Correct is style (singular). Please make sure that everything that in CSS uses minus (example: margin-left) must be inline without the minus and camelCased (example: marginLeft). Plus there must always be quotation marks even if in the CSS there wouldnt be. Full example:\n&#x3C;video  style={{width:\"500px\", display: \"block\", marginLeft: \"auto\", marginRight:\"auto\"}} controls></p>\n</blockquote>"}},{"node":{"id":"acc1e651-71eb-5b85-b6f6-99322976b845","excerpt":"How to view the source code in browser? A) go to chrome, your page -> more tools -> developer tool -> press Control U  B) paste view-source…","rawMarkdownBody":"\r\nHow to view the source code in browser?\r\n\r\nA) go to chrome, your page -> more tools -> developer tool -> press Control U \r\n\r\nB) paste <code>view-source:</code> int fromt of your https\r\n\r\nExample:\r\n\r\nview-source:https://addania.github.io/SamOnHands/","frontmatter":{"date":"2019-10-05","title":"View Source"},"fields":{"slug":"/View_source/"},"timeToRead":1,"html":"<p>How to view the source code in browser?</p>\n<p>A) go to chrome, your page -> more tools -> developer tool -> press Control U </p>\n<p>B) paste <code>view-source:</code> int fromt of your https</p>\n<p>Example:</p>\n<p>view-source:<a href=\"https://addania.github.io/SamOnHands/\">https://addania.github.io/SamOnHands/</a></p>"}},{"node":{"id":"38556b1a-ad57-58d5-b91a-4104886e3e79","excerpt":"Example code to create carouseel component with 3 images slideshow","rawMarkdownBody":"\r\nExample code to create carouseel component with 3 images slideshow\r\n\r\n``` \r\nimport React from \"react\"\r\nimport \"./index.css\";\r\n\r\nexport class Carousel extends React.Component {\r\n  constructor (props){\r\n    super (props);\r\n    this.state = {\r\n      picsForCarousel: [\r\n        \"./img/car1.jpg\",\r\n        \"./img/car2.jpg\",\r\n        \"./img/car3.jpg\"\r\n      ],\r\n      picSelector: 0,\r\n    }\r\n  }\r\n\r\ncomponentDidMount(){\r\n  setTimeout(\r\n    ()=>{\r\n      const number=this.state.picSelector+1;\r\n      this.setState({picSelector: number})},5000)\r\n    }\r\n\r\n  componentDidUpdate(){\r\n      setTimeout(\r\n        ()=>{\r\n          const number=this.state.picSelector+1\r\n          this.setState({picSelector: number})},5000)\r\n        }\r\n\r\n  render (){\r\n  /*  const number=this.state.picSelector+1;\r\n      this.setState({picSelector: number});*/\r\n    return (\r\n      <div>\r\n      <img src={this.state.picsForCarousel[this.state.picSelector]} style={{\r\n        display: \"block\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        width: \"40%\"\r\n      }} alt=\"\" />\r\n      </div>\r\n    )\r\n    \r\n    ;\r\n  }\r\n};\r\n```","frontmatter":{"date":"2019-10-04","title":"Carousel in React"},"fields":{"slug":"/Carousel_in_React/"},"timeToRead":1,"html":"<p>Example code to create carouseel component with 3 images slideshow</p>\n<pre><code>import React from \"react\"\nimport \"./index.css\";\n\nexport class Carousel extends React.Component {\n  constructor (props){\n    super (props);\n    this.state = {\n      picsForCarousel: [\n        \"./img/car1.jpg\",\n        \"./img/car2.jpg\",\n        \"./img/car3.jpg\"\n      ],\n      picSelector: 0,\n    }\n  }\n\ncomponentDidMount(){\n  setTimeout(\n    ()=>{\n      const number=this.state.picSelector+1;\n      this.setState({picSelector: number})},5000)\n    }\n\n  componentDidUpdate(){\n      setTimeout(\n        ()=>{\n          const number=this.state.picSelector+1\n          this.setState({picSelector: number})},5000)\n        }\n\n  render (){\n  /*  const number=this.state.picSelector+1;\n      this.setState({picSelector: number});*/\n    return (\n      &#x3C;div>\n      &#x3C;img src={this.state.picsForCarousel[this.state.picSelector]} style={{\n        display: \"block\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        width: \"40%\"\n      }} alt=\"\" />\n      &#x3C;/div>\n    )\n    \n    ;\n  }\n};\n</code></pre>"}},{"node":{"id":"5a2a8a66-0179-53d9-8d67-e500f9943c3e","excerpt":"It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an…","rawMarkdownBody":"\r\n> It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an easy way how to position image or video tag directly\r\n\r\nimg{\r\n\r\n  display: block;\r\n\r\n  margin-right: auto;\r\n\r\n  width: 50%\r\n\r\n}\r\n\r\nvideo {\r\n\r\n  margin-left: auto;\r\n\r\n  margin-right: auto;\r\n\r\n  display: block\r\n\r\n}","frontmatter":{"date":"2019-10-03","title":"How to center an image"},"fields":{"slug":"/How_to_center_image/"},"timeToRead":1,"html":"<blockquote>\n<p>It took me a while to figure out how to position an image tag or video tag. I was first playing around with divs only to realize there is an easy way how to position image or video tag directly</p>\n</blockquote>\n<p>img{</p>\n<p>  display: block;</p>\n<p>  margin-right: auto;</p>\n<p>  width: 50%</p>\n<p>}</p>\n<p>video {</p>\n<p>  margin-left: auto;</p>\n<p>  margin-right: auto;</p>\n<p>  display: block</p>\n<p>}</p>"}},{"node":{"id":"0e3c6995-6d01-5402-8d71-5ff30c5c9fae","excerpt":"Go to pages folder and create vid subfolder Upload your video there for example called ulrik.mp4 open your index.js files and import your…","rawMarkdownBody":"\r\n> Go to pages folder and create vid subfolder\r\n\r\n> Upload your video there for example called ulrik.mp4\r\n\r\n> open your index.js files and import your video\r\n\r\nimport vid from \"./vid/ulrik.mp4\";\r\n\r\n> create a video tag with source tag. in video tag write controls if zou want to displaz controls like plaz and pause. in source tag write the src either as a URL where your video is hosted or file path to your imported video. also add type, in this case video/mp4\r\n\r\n<video  controls>\r\n\r\n    <source src={vid} type=\"video/mp4\">\r\n\r\n    </source>\r\n    \r\n    </video>","frontmatter":{"date":"2019-10-02","title":"Add video assets to React"},"fields":{"slug":"/Add_video_assets_to_React/"},"timeToRead":1,"html":"<blockquote>\n<p>Go to pages folder and create vid subfolder</p>\n</blockquote>\n<blockquote>\n<p>Upload your video there for example called ulrik.mp4</p>\n</blockquote>\n<blockquote>\n<p>open your index.js files and import your video</p>\n</blockquote>\n<p>import vid from \"./vid/ulrik.mp4\";</p>\n<blockquote>\n<p>create a video tag with source tag. in video tag write controls if zou want to displaz controls like plaz and pause. in source tag write the src either as a URL where your video is hosted or file path to your imported video. also add type, in this case video/mp4</p>\n</blockquote>\n<video  controls>\n<pre><code>&#x3C;source src={vid} type=\"video/mp4\">\n\n&#x3C;/source>\n\n&#x3C;/video>\n</code></pre>"}},{"node":{"id":"506aa847-a49a-5909-aad6-2e82218141d8","excerpt":"It took me a while to figure out how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools go to…","rawMarkdownBody":"\r\nIt took me a while to figure out how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools\r\n\r\n> go to:\r\n\r\nhttps://www.w3schools.com/howto/howto_google_fonts.asp\r\n\r\n> find your favourite font, for example Mansalva\r\n\r\n> click on button try it\r\n\r\n> find url in the html document: https://fonts.googleapis.com/css?family=Mansalva\r\n\r\n> Create a new csss file for example index.css\r\n\r\n> populate the file with this code\r\n\r\n@import url('https://fonts.googleapis.com/css?family=Mansalva');\r\n\r\n> add the styling for a body tag\r\n\r\nbody {\r\n\r\n  font-family: 'Mansalva';\r\n\r\n}\r\n\r\n> alternatively use className to define a style\r\n\r\n.fonts {\r\n\r\n  font-family: 'Mansalva';\r\n\r\n}\r\n\r\n> go to your index.js\r\n\r\n> import your index.css please note that index.js and index.css neeed to be in the same folder\r\n\r\nimport \"./index.css\"\r\n\r\n> add the className fonts to your tag where you want to apply the style, for example:\r\n\r\n<div className=\"fonts\">\r\n","frontmatter":{"date":"2019-10-01","title":"Google Fonts in React"},"fields":{"slug":"/Google_fonts_in_React/"},"timeToRead":1,"html":"<p>It took me a while to figure out how to import Google fonts to React. Very good library of around 1000 fonts can be found on w3schools</p>\n<blockquote>\n<p>go to:</p>\n</blockquote>\n<p><a href=\"https://www.w3schools.com/howto/howto_google_fonts.asp\">https://www.w3schools.com/howto/howto_google_fonts.asp</a></p>\n<blockquote>\n<p>find your favourite font, for example Mansalva</p>\n</blockquote>\n<blockquote>\n<p>click on button try it</p>\n</blockquote>\n<blockquote>\n<p>find url in the html document: <a href=\"https://fonts.googleapis.com/css?family=Mansalva\">https://fonts.googleapis.com/css?family=Mansalva</a></p>\n</blockquote>\n<blockquote>\n<p>Create a new csss file for example index.css</p>\n</blockquote>\n<blockquote>\n<p>populate the file with this code</p>\n</blockquote>\n<p>@import url('<a href=\"https://fonts.googleapis.com/css?family=Mansalva&#x27;\">https://fonts.googleapis.com/css?family=Mansalva'</a>);</p>\n<blockquote>\n<p>add the styling for a body tag</p>\n</blockquote>\n<p>body {</p>\n<p>  font-family: 'Mansalva';</p>\n<p>}</p>\n<blockquote>\n<p>alternatively use className to define a style</p>\n</blockquote>\n<p>.fonts {</p>\n<p>  font-family: 'Mansalva';</p>\n<p>}</p>\n<blockquote>\n<p>go to your index.js</p>\n</blockquote>\n<blockquote>\n<p>import your index.css please note that index.js and index.css neeed to be in the same folder</p>\n</blockquote>\n<p>import \"./index.css\"</p>\n<blockquote>\n<p>add the className fonts to your tag where you want to apply the style, for example:</p>\n</blockquote>\n<div className=\"fonts\">"}},{"node":{"id":"7ad618cd-8467-56b5-add4-30f77fcedf8b","excerpt":"Step-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages create empty GitHub Repository, for example called test…","rawMarkdownBody":"\r\nStep-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages\r\n\r\n> create empty GitHub Repository, for example called test2. It should be a public repository and do NOT initialize this repository with README\r\n\r\n> start Ubuntu Command line\r\n\r\n> navigate to your projects folder\r\n\r\n  <code>cd projects</code>\r\n\r\n>create new project\r\n\r\ngatsby new test2 https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n\r\n> go to your new project folder\r\n\r\ncd test2\r\n\r\n> install gh-pages. You need to do it for each single project. Dont get fooled like me that I thought I installed this package before. You need to be in your project folder and install it there. If the installation is successful you should get a message something like this \"added 17 packages from 6 contributors and audited 19803 packages in 18.616s found 0 vulnerabilities\"\r\n\r\nnpm install gh-pages --save-dev\r\n\r\n> add your project files to  LOCAL git\r\n\r\ngit add .\r\n\r\n> commit your project files to LOCAL git\r\n\r\ngit commit -m \"first commit\"\r\n\r\n> create a REMOTE repository\r\n\r\ngit remote add origin git@github.com:addania/test2.git \r\n\r\n> push to REMOTE repository (you will be asked for you passphrase)\r\n\r\ngit push origin master\r\n\r\n> Go to you project folder and find file called package.json where you need to add following script to scripts section:\r\n\r\n\"scripts\": {\r\n\r\n    ...\r\n\r\n    \"deploy\": \"gatsby build && gh-pages -d public -b master\",\r\n\r\n  },\r\n\r\n> If you are publishing to your account url, for example: https://addania.github.io without any prefix, then skip this step. But if on GitHub pages your url will have a prefix, we also need to add this prefix to the Gatsby files. For example, github pages which use repository name as prefix:\r\n\r\nhttps://addania.github.io/SamOnHands\r\n\r\nSamOnHands is name of repository and it comes AFTER  https://addania.github.io, therefore /SamOnHands is a prefix and Gatsby needs to build files, so that they add the prefix. If this is the case you also need to do next 2 steps:\r\n\r\n1) open gatsby-config.js and paste following (dont forget about the slash:\r\n\r\nmodule.exports = {\r\n\r\npathPrefix: \"/SamOnHands\",\r\n\r\n}\r\n\r\n2) open package.json file and add --prefix-paths like so:\r\n\r\n\"build\": \"gatsby build --prefix-paths\",\r\n\r\n\r\n> add your project files to LOCAL git\r\n\r\ngit add .\r\n\r\n> commit your project files to LOCAL git\r\n\r\ngit commit -m \"second commit\"\r\n\r\n> push to REMOTE repository (you will be asked for you passphrase)\r\n\r\ngit push origin master\r\n\r\n> create gh-pages branch\r\n\r\ngit checkout -b gh-pages\r\n\r\n> create upstream (you will need to add passphrase)\r\n\r\ngit push --set-upstream origin gh-pages\r\n\r\n> run the npm deploy command. you will need to add your passphrase (3times). It shoudl result in success and last word should be \"Published\"\r\n\r\nnpm run deploy\r\n\r\n> Go to your Github Repository to Settings\r\n\r\n> Scroll down to Github pages and change Source to master branch.\r\n\r\n> Click on your github pages link: in my case: https://addania.github.io/test2/. You should see your website. Please note that sometimes you need to wait for couple of minutes (around 5 minutes) to see your website, most likely you will only see Gatsby welcome page\r\n\r\n> PLEASE NOTE\r\n\r\nwe will use gh-pages branch to upload / download our code and we will use master branch to publish the website\r\n\r\n> If you want to make changes to your code then you need to push it to the gh/pages branch. This will upload new version of your code to gh-pages branch but it will still not be however reflected in your published page\r\n\r\ngit push origin gh-pages\r\n\r\n> to make changes to be reflected on your published page you need to run npm again\r\n\r\nnpm run deploy\r\n\r\n> PLEASE NOTE\r\n\r\nIn the Project forlder called Pages you can only store pages to your website, if you put there some components which you import to your index.js it will break the npm run deploy with the error that for example header.js must be a valid react component. HOw to fix it? Remove all your components from pages folder and create a folder called components in the src folder. put all your components there. then import your heade.js to your index.js by importr { Header } from \"../components/header.js\" Then you are able to run npm run deploy\r\n\r\n> PLEASE NOTE\r\n\r\nALWAYS commit code to the repository and then nmp run deploy!!! You will avoid lots of problems!!! If push and npm run deploy are not in synch you probably will have lots of problems with the page\r\n\r\n> PLEASE NOTE\r\n\r\nActually the good practise is to use master branch for pushing my code and to use gh-pages branch for publishing. In this guide I madee it vice versa\r\n\r\n>Useful Sources\r\n\r\nhttps://iolivia.me/posts/7-gatsby-deploy-github/\r\n","frontmatter":{"date":"2019-09-30","title":"Publish your Gatsby website to Github Pages"},"fields":{"slug":"/Publish_your_Gatsby_site_to_GitHubpages/"},"timeToRead":4,"html":"<p>Step-By-Step Guide for Dummies on how to publish your Gatsby website on Github pages</p>\n<blockquote>\n<p>create empty GitHub Repository, for example called test2. It should be a public repository and do NOT initialize this repository with README</p>\n</blockquote>\n<blockquote>\n<p>start Ubuntu Command line</p>\n</blockquote>\n<blockquote>\n<p>navigate to your projects folder</p>\n</blockquote>\n<p>  <code>cd projects</code></p>\n<blockquote>\n<p>create new project</p>\n</blockquote>\n<p>gatsby new test2 <a href=\"https://github.com/gatsbyjs/gatsby-starter-hello-world\">https://github.com/gatsbyjs/gatsby-starter-hello-world</a></p>\n<blockquote>\n<p>go to your new project folder</p>\n</blockquote>\n<p>cd test2</p>\n<blockquote>\n<p>install gh-pages. You need to do it for each single project. Dont get fooled like me that I thought I installed this package before. You need to be in your project folder and install it there. If the installation is successful you should get a message something like this \"added 17 packages from 6 contributors and audited 19803 packages in 18.616s found 0 vulnerabilities\"</p>\n</blockquote>\n<p>npm install gh-pages --save-dev</p>\n<blockquote>\n<p>add your project files to  LOCAL git</p>\n</blockquote>\n<p>git add .</p>\n<blockquote>\n<p>commit your project files to LOCAL git</p>\n</blockquote>\n<p>git commit -m \"first commit\"</p>\n<blockquote>\n<p>create a REMOTE repository</p>\n</blockquote>\n<p>git remote add origin git@github.com:addania/test2.git </p>\n<blockquote>\n<p>push to REMOTE repository (you will be asked for you passphrase)</p>\n</blockquote>\n<p>git push origin master</p>\n<blockquote>\n<p>Go to you project folder and find file called package.json where you need to add following script to scripts section:</p>\n</blockquote>\n<p>\"scripts\": {</p>\n<pre><code>...\n\n\"deploy\": \"gatsby build &#x26;&#x26; gh-pages -d public -b master\",\n</code></pre>\n<p>  },</p>\n<blockquote>\n<p>If you are publishing to your account url, for example: <a href=\"https://addania.github.io\">https://addania.github.io</a> without any prefix, then skip this step. But if on GitHub pages your url will have a prefix, we also need to add this prefix to the Gatsby files. For example, github pages which use repository name as prefix:</p>\n</blockquote>\n<p><a href=\"https://addania.github.io/SamOnHands\">https://addania.github.io/SamOnHands</a></p>\n<p>SamOnHands is name of repository and it comes AFTER  <a href=\"https://addania.github.io\">https://addania.github.io</a>, therefore /SamOnHands is a prefix and Gatsby needs to build files, so that they add the prefix. If this is the case you also need to do next 2 steps:</p>\n<ol>\n<li>open gatsby-config.js and paste following (dont forget about the slash:</li>\n</ol>\n<p>module.exports = {</p>\n<p>pathPrefix: \"/SamOnHands\",</p>\n<p>}</p>\n<ol start=\"2\">\n<li>open package.json file and add --prefix-paths like so:</li>\n</ol>\n<p>\"build\": \"gatsby build --prefix-paths\",</p>\n<blockquote>\n<p>add your project files to LOCAL git</p>\n</blockquote>\n<p>git add .</p>\n<blockquote>\n<p>commit your project files to LOCAL git</p>\n</blockquote>\n<p>git commit -m \"second commit\"</p>\n<blockquote>\n<p>push to REMOTE repository (you will be asked for you passphrase)</p>\n</blockquote>\n<p>git push origin master</p>\n<blockquote>\n<p>create gh-pages branch</p>\n</blockquote>\n<p>git checkout -b gh-pages</p>\n<blockquote>\n<p>create upstream (you will need to add passphrase)</p>\n</blockquote>\n<p>git push --set-upstream origin gh-pages</p>\n<blockquote>\n<p>run the npm deploy command. you will need to add your passphrase (3times). It shoudl result in success and last word should be \"Published\"</p>\n</blockquote>\n<p>npm run deploy</p>\n<blockquote>\n<p>Go to your Github Repository to Settings</p>\n</blockquote>\n<blockquote>\n<p>Scroll down to Github pages and change Source to master branch.</p>\n</blockquote>\n<blockquote>\n<p>Click on your github pages link: in my case: <a href=\"https://addania.github.io/test2/\">https://addania.github.io/test2/</a>. You should see your website. Please note that sometimes you need to wait for couple of minutes (around 5 minutes) to see your website, most likely you will only see Gatsby welcome page</p>\n</blockquote>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>we will use gh-pages branch to upload / download our code and we will use master branch to publish the website</p>\n<blockquote>\n<p>If you want to make changes to your code then you need to push it to the gh/pages branch. This will upload new version of your code to gh-pages branch but it will still not be however reflected in your published page</p>\n</blockquote>\n<p>git push origin gh-pages</p>\n<blockquote>\n<p>to make changes to be reflected on your published page you need to run npm again</p>\n</blockquote>\n<p>npm run deploy</p>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>In the Project forlder called Pages you can only store pages to your website, if you put there some components which you import to your index.js it will break the npm run deploy with the error that for example header.js must be a valid react component. HOw to fix it? Remove all your components from pages folder and create a folder called components in the src folder. put all your components there. then import your heade.js to your index.js by importr { Header } from \"../components/header.js\" Then you are able to run npm run deploy</p>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>ALWAYS commit code to the repository and then nmp run deploy!!! You will avoid lots of problems!!! If push and npm run deploy are not in synch you probably will have lots of problems with the page</p>\n<blockquote>\n<p>PLEASE NOTE</p>\n</blockquote>\n<p>Actually the good practise is to use master branch for pushing my code and to use gh-pages branch for publishing. In this guide I madee it vice versa</p>\n<blockquote>\n<p>Useful Sources</p>\n</blockquote>\n<p><a href=\"https://iolivia.me/posts/7-gatsby-deploy-github/\">https://iolivia.me/posts/7-gatsby-deploy-github/</a></p>"}},{"node":{"id":"89ff1b0c-9343-5cf8-a741-7b4c91617f97","excerpt":"Advantages of Node.js Creates Runtime Environments (local webserver)\nNode.js is a JavaScript runtime environment. It allows JavaScript to…","rawMarkdownBody":"\r\nAdvantages of Node.js\r\n\r\n1) Creates Runtime Environments (local webserver)\r\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.\r\n\r\n2) Enables to install cool packages(=libraries=modules)\r\nNode.js comes automatically with npm (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. npm I can only install packages which run in browser. Example of packages: \r\n\r\nreact - allows access to all react modules/features like React.Component\r\n\r\nreactDOM - allows to generate react in the browser (unless I want to use script tags in html), for example: ReactDOM.render()\r\n\r\ncreate-react-app - enables to setup initial react files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes react and reactDOM packages\r\n\r\ngatsby - allows to build websites with multiple pages easier. It ALSO automatically includes react and reactDOM packages\r\n\r\nEach package needs to be installed by npm individually.\r\n\r\n2 ways how to download a package/any other software:\r\n\r\nA) go to webside -> click download -> run installer and install the software\r\n\r\nor\r\n\r\nB) use package managers - package manager MUST be run in command line\r\n\r\nCommands:\r\n\r\n> to install your favourite package\r\n\r\nnpm install react\r\n\r\nnpm install reactDOM\r\n\r\nnpm install create-react-app\r\n\r\nnpm install gatsby\r\n\r\n> In order to see which packages=libraries=modules my project is using I search for file called package.json. In the file there wil be an object called dependencies \r\n\r\n  \"dependencies\": {\r\n\r\n    \"gatsby\": \"^2.15.28\",\r\n\r\n    \"react\": \"^16.10.0\",\r\n\r\n    \"react-dom\": \"^16.10.0\"\r\n    \r\n  },\r\n\r\n\r\n> to read a manual npm\r\n\r\nman npm\r\n\r\n> to read the help of npm\r\n\r\nnpm help\r\n\r\n","frontmatter":{"date":"2019-09-29","title":"Intro to NodeJS"},"fields":{"slug":"/Intro_to_NodeJS/"},"timeToRead":2,"html":"<p>Advantages of Node.js</p>\n<ol>\n<li>Creates Runtime Environments (local webserver)\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.</li>\n<li>Enables to install cool packages(=libraries=modules)\nNode.js comes automatically with npm (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. npm I can only install packages which run in browser. Example of packages: </li>\n</ol>\n<p>react - allows access to all react modules/features like React.Component</p>\n<p>reactDOM - allows to generate react in the browser (unless I want to use script tags in html), for example: ReactDOM.render()</p>\n<p>create-react-app - enables to setup initial react files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes react and reactDOM packages</p>\n<p>gatsby - allows to build websites with multiple pages easier. It ALSO automatically includes react and reactDOM packages</p>\n<p>Each package needs to be installed by npm individually.</p>\n<p>2 ways how to download a package/any other software:</p>\n<p>A) go to webside -> click download -> run installer and install the software</p>\n<p>or</p>\n<p>B) use package managers - package manager MUST be run in command line</p>\n<p>Commands:</p>\n<blockquote>\n<p>to install your favourite package</p>\n</blockquote>\n<p>npm install react</p>\n<p>npm install reactDOM</p>\n<p>npm install create-react-app</p>\n<p>npm install gatsby</p>\n<blockquote>\n<p>In order to see which packages=libraries=modules my project is using I search for file called package.json. In the file there wil be an object called dependencies </p>\n</blockquote>\n<p>  \"dependencies\": {</p>\n<pre><code>\"gatsby\": \"^2.15.28\",\n\n\"react\": \"^16.10.0\",\n\n\"react-dom\": \"^16.10.0\"\n</code></pre>\n<p>  },</p>\n<blockquote>\n<p>to read a manual npm</p>\n</blockquote>\n<p>man npm</p>\n<blockquote>\n<p>to read the help of npm</p>\n</blockquote>\n<p>npm help</p>"}},{"node":{"id":"edcac9ff-ad8f-5521-9470-ace78f1b69a4","excerpt":"React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing…","rawMarkdownBody":"\r\nReact is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having html css and Javascript in one file. \r\nReact is a closed environmnet and can be run in browser, on your local machine (my pc) or on phones (such as Android, etc).\r\n\r\nWhen I am developing a website in React I need to be able to see what I am building. I can do these:\r\n\r\n- A: doubleclick on my html file (index.html) and open it in browser. However, it wont really work. Other pages will not load, because I am only openineg filepath in browser.\r\n\r\n- B: run a web server locally on my machine (pc)\r\n\r\nIn order to run a web server on my machine, I need to install node.js\r\n\r\nIn order to be able to use React in a BROWSER I need package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:\r\n\r\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\r\n\r\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\r\n\r\nMore on this in official documentation here:https://reactjs.org/docs/add-react-to-a-website.html\r\n\r\nThese script tags in html are equivalent to a file in my project called package.json which is automatically provided by Gatsby:\r\n\r\n\"dependencies\": {\r\n\r\n    \"gatsby\": \"^2.15.28\",\r\n\r\n    \"react\": \"^16.10.0\",\r\n\r\n    \"react-dom\": \"^16.10.0\"\r\n\r\n},\r\n","frontmatter":{"date":"2019-09-28","title":"Intro to React"},"fields":{"slug":"/Intro_to_React/"},"timeToRead":1,"html":"<p>React is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having html css and Javascript in one file.\nReact is a closed environmnet and can be run in browser, on your local machine (my pc) or on phones (such as Android, etc).</p>\n<p>When I am developing a website in React I need to be able to see what I am building. I can do these:</p>\n<ul>\n<li>A: doubleclick on my html file (index.html) and open it in browser. However, it wont really work. Other pages will not load, because I am only openineg filepath in browser.</li>\n<li>B: run a web server locally on my machine (pc)</li>\n</ul>\n<p>In order to run a web server on my machine, I need to install node.js</p>\n<p>In order to be able to use React in a BROWSER I need package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:</p>\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\n<p>More on this in official documentation here:<a href=\"https://reactjs.org/docs/add-react-to-a-website.html\">https://reactjs.org/docs/add-react-to-a-website.html</a></p>\n<p>These script tags in html are equivalent to a file in my project called package.json which is automatically provided by Gatsby:</p>\n<p>\"dependencies\": {</p>\n<pre><code>\"gatsby\": \"^2.15.28\",\n\n\"react\": \"^16.10.0\",\n\n\"react-dom\": \"^16.10.0\"\n</code></pre>\n<p>},</p>"}},{"node":{"id":"c39798f0-f0e6-554d-90c8-da70a4424ebd","excerpt":"Deploying Website to Github Pages:\nhttps://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/ installing github pages to gatsby npm…","rawMarkdownBody":"\r\nDeploying Website to Github Pages:\r\nhttps://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\r\n\r\n> installing github pages to gatsby\r\n\r\nnpm install gh-pages --save-dev\r\n\r\n> builds website to github page, for example: https://addania.github.io/\r\n\r\nnpm run deploy\r\n","frontmatter":{"date":"2019-09-27","title":"Intro to Github Pages"},"fields":{"slug":"/Intro_to_Github_pages/"},"timeToRead":1,"html":"<p>Deploying Website to Github Pages:\n<a href=\"https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\">https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/</a></p>\n<blockquote>\n<p>installing github pages to gatsby</p>\n</blockquote>\n<p>npm install gh-pages --save-dev</p>\n<blockquote>\n<p>builds website to github page, for example: <a href=\"https://addania.github.io/\">https://addania.github.io/</a></p>\n</blockquote>\n<p>npm run deploy</p>"}},{"node":{"id":"da4a6e23-83f8-5549-a055-eebb91311371","excerpt":"Software to help create static website using react. They provide starter templates, ability to create multiple pages in their pages folder…","rawMarkdownBody":"\r\nSoftware to help create static website using react. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically\r\n\r\n> to install Gatsby\r\n\r\n> to display basic commands in gatsby\r\n\r\ngatsby --help\r\n\r\n> to create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)\r\n\r\ngatsby new addania.com https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n\r\n> to start Gatsby react development environment for my new projct I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop\r\n\r\ngatsby develop\r\n","frontmatter":{"date":"2019-09-26","title":"Intro to Gatsby"},"fields":{"slug":"/Intro_to_Gatsby/"},"timeToRead":1,"html":"<p>Software to help create static website using react. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically</p>\n<blockquote>\n<p>to install Gatsby</p>\n</blockquote>\n<blockquote>\n<p>to display basic commands in gatsby</p>\n</blockquote>\n<p>gatsby --help</p>\n<blockquote>\n<p>to create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)</p>\n</blockquote>\n<p>gatsby new addania.com <a href=\"https://github.com/gatsbyjs/gatsby-starter-hello-world\">https://github.com/gatsbyjs/gatsby-starter-hello-world</a></p>\n<blockquote>\n<p>to start Gatsby react development environment for my new projct I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop</p>\n</blockquote>\n<p>gatsby develop</p>"}},{"node":{"id":"a7a25318-c161-5d90-9f3a-46e596b300ef","excerpt":"Git is a file versioning system.  Some Git definitions first: LOCAL\nWhen we talk about LOCAL we mean anything that is stored locally on your…","rawMarkdownBody":"\r\nGit is a file versioning system. \r\n\r\n\r\nSome Git definitions first:\r\n\r\nLOCAL\r\nWhen we talk about LOCAL we mean anything that is stored locally on your computer harddrive\r\n\r\nREMOTE\r\nWhen we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.\r\n\r\nGeneral Git workflow:\r\nFirst we need to link our LOCAL and REMOTE repositories using SSH Key.\r\nFirst we need to generate our LOCAL SSH key which we then paste to REMORE GitHub.\r\n\r\n\r\nImagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\r\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing git init command which will create a subfolder git in my current project folder.\r\nThen I work on my project files and make changes to my website. Firstly I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\r\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:\r\ngit add .\r\ngit commit -m \"message goes here\"\r\n\r\nWhen our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.\r\n\r\nThen we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\r\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention):\r\ngit remote add origin remote repository URL\r\nfor example:\r\ngit remote add origin git@github.com:addania/addania.com.git \r\n\r\nTo verify if our new remote was added we can check the git remote -v command. \r\nThen we are ready to puch our LOCAL git repository to the REMOTE Github repository:\r\ngit push origin master\r\n\r\n> In order to install git we need to have apt-get updated. To update apt-get\r\n\r\nsudo apt-get update\r\n\r\n> to install Git\r\n\r\nsudo apt-get install git\r\n\r\n> to check version of Git\r\n\r\ngit --version\r\n\r\n> to set up username and email\r\n\r\ngit config --global user.name \"addania\"\r\n\r\ngit config --global user.email \"mirka.schw@gmail.com\"\r\n\r\n> to check status of my git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:\r\n\r\ngit status\r\n\r\n> to see history of commits\r\n\r\ngit log\r\n\r\n> The git init command creates a new Git repository. Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:\r\n\r\n<code> git init </code>\r\n\r\n> in order to commit anything, we first need to add files to staging area by using following command (dot means all files):\r\n\r\ngit add . \r\n\r\n> to commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:\r\n\r\ngit commit\r\n\r\n> to commit files to LOCAL git repository with a message already included in the command:\r\n\r\ngit commit -m \"message goes here\"\r\n\r\n> to see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):\r\n\r\ngit remote -v\r\n\r\n> to add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository\r\n\r\ngit remote add origin git@github.com:addania/addania.com.git\r\n\r\ngit remote add origin git@github.com:addania/knowledgeBase.git  \r\n\r\n> to rename origin with new url if I need to change my repository name:\r\n\r\ngit remote set-url origin git@github.com:addania/addania.github.io.git\r\n\r\ngit remote set-url origin git@github.com:addania/addania.com.git\r\n\r\n> to check how many branches I have in my repository, if there is only one, the main one will be called usually master:\r\n\r\ngit branch\r\n\r\n> to push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the banch in the project, main branch is called master:\r\n\r\ngit push origin master\r\n\r\n> If I dont want to write always git push origin master -force I can create upstream and link local to remote git by -u. After this command then I can use only git push to upload files\r\n\r\ngit push -u origin master -f\r\n\r\n> to overwrite anything on the REMOTE repository in master branch we can force push:\r\n\r\ngit push origin master --force \r\n\r\n> pulling down files from remote git to local git, where origin is name of my remote git and master is name of branch:\r\n\r\ngit pull origin master","frontmatter":{"date":"2019-09-25","title":"Intro to Git"},"fields":{"slug":"/Intro_to_Git/"},"timeToRead":4,"html":"<p>Git is a file versioning system. </p>\n<p>Some Git definitions first:</p>\n<p>LOCAL\nWhen we talk about LOCAL we mean anything that is stored locally on your computer harddrive</p>\n<p>REMOTE\nWhen we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.</p>\n<p>General Git workflow:\nFirst we need to link our LOCAL and REMOTE repositories using SSH Key.\nFirst we need to generate our LOCAL SSH key which we then paste to REMORE GitHub.</p>\n<p>Imagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing git init command which will create a subfolder git in my current project folder.\nThen I work on my project files and make changes to my website. Firstly I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:\ngit add .\ngit commit -m \"message goes here\"</p>\n<p>When our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.</p>\n<p>Then we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention):\ngit remote add origin remote repository URL\nfor example:\ngit remote add origin git@github.com:addania/addania.com.git </p>\n<p>To verify if our new remote was added we can check the git remote -v command.\nThen we are ready to puch our LOCAL git repository to the REMOTE Github repository:\ngit push origin master</p>\n<blockquote>\n<p>In order to install git we need to have apt-get updated. To update apt-get</p>\n</blockquote>\n<p>sudo apt-get update</p>\n<blockquote>\n<p>to install Git</p>\n</blockquote>\n<p>sudo apt-get install git</p>\n<blockquote>\n<p>to check version of Git</p>\n</blockquote>\n<p>git --version</p>\n<blockquote>\n<p>to set up username and email</p>\n</blockquote>\n<p>git config --global user.name \"addania\"</p>\n<p>git config --global user.email \"mirka.schw@gmail.com\"</p>\n<blockquote>\n<p>to check status of my git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:</p>\n</blockquote>\n<p>git status</p>\n<blockquote>\n<p>to see history of commits</p>\n</blockquote>\n<p>git log</p>\n<blockquote>\n<p>The git init command creates a new Git repository. Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:</p>\n</blockquote>\n<p><code> git init </code></p>\n<blockquote>\n<p>in order to commit anything, we first need to add files to staging area by using following command (dot means all files):</p>\n</blockquote>\n<p>git add . </p>\n<blockquote>\n<p>to commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:</p>\n</blockquote>\n<p>git commit</p>\n<blockquote>\n<p>to commit files to LOCAL git repository with a message already included in the command:</p>\n</blockquote>\n<p>git commit -m \"message goes here\"</p>\n<blockquote>\n<p>to see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):</p>\n</blockquote>\n<p>git remote -v</p>\n<blockquote>\n<p>to add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository</p>\n</blockquote>\n<p>git remote add origin git@github.com:addania/addania.com.git</p>\n<p>git remote add origin git@github.com:addania/knowledgeBase.git  </p>\n<blockquote>\n<p>to rename origin with new url if I need to change my repository name:</p>\n</blockquote>\n<p>git remote set-url origin git@github.com:addania/addania.github.io.git</p>\n<p>git remote set-url origin git@github.com:addania/addania.com.git</p>\n<blockquote>\n<p>to check how many branches I have in my repository, if there is only one, the main one will be called usually master:</p>\n</blockquote>\n<p>git branch</p>\n<blockquote>\n<p>to push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the banch in the project, main branch is called master:</p>\n</blockquote>\n<p>git push origin master</p>\n<blockquote>\n<p>If I dont want to write always git push origin master -force I can create upstream and link local to remote git by -u. After this command then I can use only git push to upload files</p>\n</blockquote>\n<p>git push -u origin master -f</p>\n<blockquote>\n<p>to overwrite anything on the REMOTE repository in master branch we can force push:</p>\n</blockquote>\n<p>git push origin master --force </p>\n<blockquote>\n<p>pulling down files from remote git to local git, where origin is name of my remote git and master is name of branch:</p>\n</blockquote>\n<p>git pull origin master</p>"}},{"node":{"id":"1077652f-d780-5c05-bb3c-a68689430db4","excerpt":"HomeBrew helps to install softwares. see current version of homebrew brew -v update brew brew update installing software hello brew install…","rawMarkdownBody":"\r\nHomeBrew helps to install softwares.\r\n\r\n> see current version of homebrew\r\n\r\nbrew -v\r\n\r\n> update brew\r\n\r\nbrew update\r\n\r\n> installing software hello\r\n\r\nbrew install hello\r\n\r\n> install node\r\n\r\nbrew install node\r\n\r\n> checking version of node\r\n\r\nnode --version\r\n","frontmatter":{"date":"2019-09-24","title":"Intro to HomeBrew"},"fields":{"slug":"/Intro_to_HomeBrew/"},"timeToRead":1,"html":"<p>HomeBrew helps to install softwares.</p>\n<blockquote>\n<p>see current version of homebrew</p>\n</blockquote>\n<p>brew -v</p>\n<blockquote>\n<p>update brew</p>\n</blockquote>\n<p>brew update</p>\n<blockquote>\n<p>installing software hello</p>\n</blockquote>\n<p>brew install hello</p>\n<blockquote>\n<p>install node</p>\n</blockquote>\n<p>brew install node</p>\n<blockquote>\n<p>checking version of node</p>\n</blockquote>\n<p>node --version</p>"}},{"node":{"id":"f2ea98e2-12e0-5c6a-83a4-4cbc2689f36c","excerpt":"General: It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a…","rawMarkdownBody":"\r\nGeneral:\r\n\r\nIt is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It wont have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.\r\n\r\nUbuntu directory on PC:\r\n\r\n\\\\wsl$\\Ubuntu-18.04\\home\\addania\r\n\r\nControls:\r\n\r\nCopy/Paste works differently in Ubuntu: ctrl+shift+c for copy, crtl+shift+v for paste\r\nSome commands will start with sudo which means to run as administrator\r\nj and k keys allows navigate up and down\r\nh and l allow to navigate left and right\r\n\r\nCommands:\r\n\r\n> to show which directory I am currently in we use command pwd (print working directory)\r\n\r\npwd\r\n\r\n> to display list of all files in a current directory\r\n\r\nls\r\n\r\n> to display list of all files in a current directory including hidden files (those with ., ex: .git)\r\n\r\nls -a\r\n\r\n> change directory cd + name of the directory (ex: cd src will go to folder called src in your currnet folder), this is to go one directory down the tree\r\n\r\ncd src\r\n\r\n> to go one directory up the tree\r\n\r\ncd ..\r\n\r\n> to create a folder\r\n\r\nmkdir\r\n\r\n> to create a new file called global.css\r\n\r\ntouch global.css","frontmatter":{"date":"2019-09-23","title":"Intro to Ubuntu"},"fields":{"slug":"/Intro_to_Ubuntu/"},"timeToRead":1,"html":"<p>General:</p>\n<p>It is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It wont have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.</p>\n<p>Ubuntu directory on PC:</p>\n<p>\\wsl$\\Ubuntu-18.04\\home\\addania</p>\n<p>Controls:</p>\n<p>Copy/Paste works differently in Ubuntu: ctrl+shift+c for copy, crtl+shift+v for paste\nSome commands will start with sudo which means to run as administrator\nj and k keys allows navigate up and down\nh and l allow to navigate left and right</p>\n<p>Commands:</p>\n<blockquote>\n<p>to show which directory I am currently in we use command pwd (print working directory)</p>\n</blockquote>\n<p>pwd</p>\n<blockquote>\n<p>to display list of all files in a current directory</p>\n</blockquote>\n<p>ls</p>\n<blockquote>\n<p>to display list of all files in a current directory including hidden files (those with ., ex: .git)</p>\n</blockquote>\n<p>ls -a</p>\n<blockquote>\n<p>change directory cd + name of the directory (ex: cd src will go to folder called src in your currnet folder), this is to go one directory down the tree</p>\n</blockquote>\n<p>cd src</p>\n<blockquote>\n<p>to go one directory up the tree</p>\n</blockquote>\n<p>cd ..</p>\n<blockquote>\n<p>to create a folder</p>\n</blockquote>\n<p>mkdir</p>\n<blockquote>\n<p>to create a new file called global.css</p>\n</blockquote>\n<p>touch global.css</p>"}}],"totalCount":35}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}