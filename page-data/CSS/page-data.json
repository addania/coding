{"componentChunkName":"component---src-templates-blog-post-js","path":"/CSS/","webpackCompilationHash":"ab027b07f7dbc3309506","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://i.imgur.com/0v7juum.jpg\" title=\"Photo by Format from Pexels\"></p>\n<p><strong>Foreword</strong></p>\n<blockquote>\n<p>This entire section are my personal notes from 2 amazing CSS courses:</p>\n</blockquote>\n<ul>\n<li><a href=\"https://css-for-js.dev/\">https://css-for-js.dev/</a></li>\n<li><a href=\"https://www.codecademy.com/courses/learn-css/\">https://www.codecademy.com/courses/learn-css/</a></li>\n</ul>\n<blockquote>\n<p>All the credits go to <a href=\"https://courses.joshwcomeau.com/\">Josh Comeau</a> and <a href=\"https://www.codecademy.com/\">codecademy</a></p>\n</blockquote>\n<p><strong>TERMINILOGY</strong></p>\n<blockquote>\n<p>Imagine this snippet:</p>\n</blockquote>\n<pre><code>.apple {\n  color: purple;\n}\n</code></pre>\n<blockquote>\n<p><code>p</code> is a selector. A selector is a descriptor that lets you target specific elements on the page. In this case, we're selecting all nodes with the “apple” class.</p>\n</blockquote>\n<blockquote>\n<p><code>color</code> is a property. Properties in CSS are the attributes you can specify values for, like \"color\" and \"font-size\"</p>\n</blockquote>\n<blockquote>\n<p><code>purple</code> is a value (of a property)</p>\n</blockquote>\n<blockquote>\n<p>Imagine this snippet:</p>\n</blockquote>\n<pre><code>.code-snippet {\n  padding: 32px;\n  white-space: pre-wrap;\n}\n</code></pre>\n<blockquote>\n<p>Which part of it is the FIRST DECLARATION? Can you guess?</p>\n</blockquote>\n<blockquote>\n<p>OK, a hint here, declaration is a combination of property and value.</p>\n</blockquote>\n<blockquote>\n<p>So in our case it is - <code>padding: 32px;</code></p>\n</blockquote>\n<blockquote>\n<p>Now what is a rule here?</p>\n</blockquote>\n<pre><code>p {\n  color: red;\n  font-family: sans-serif;\n}\n</code></pre>\n<blockquote>\n<p>All of it! All the text above is a rule. A rule, also known as a style, is a collection of declarations, targeting one or more selectors. A stylesheet is made up of multiple rules.</p>\n</blockquote>\n<blockquote>\n<p>Find a unit here:</p>\n</blockquote>\n<pre><code>p {\n  padding-top: 24px;\n}\n</code></pre>\n<blockquote>\n<p>It is the <code>px</code>. Some values have units, like px, %, or em. In this case, our padding-top has a value of 24px, which is measured in the \"px\" unit.</p>\n</blockquote>\n<p><strong>SELECTORS</strong></p>\n<p>Selectors enable to select certain HTML element(s) and apply CSS styles to it. Selectors are how we can select certain HTML elements. In CSS there are 3 ways how we can select elements</p>\n<p><strong>A) by tag name</strong> - this scenario will style the teal colour to ALL <code><code>&#x3C;p></code></code> tags in the page</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p>Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>p {\n color: tile;\n}\n</code></pre>\n<p><strong>B) by class name</strong> - In case of class names we need to add period in front of the class name. They are meant to be re-used over many elements.</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p class=\"title\">Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.title {\n font-family: Arial;\n}\n</code></pre>\n<p><code>Please note:</code> in pure HTML we use word \"class\" to define for example a class called title which we can then style by .title in CSS. However, in REACT word \"class\" is reserved to create class components. Therefore, in order to create regular names of classes, we need to use word \"className\".</p>\n<p><strong>C) By id of an element</strong> - ID is completely unique per site. We need to add hashtag. An ID is meant to style only one element.</p>\n<p>HTML:</p>\n<pre><code>&#x3C;p id=\"large-title\">Hello Universe&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>#large-title {\n font-size: 50px;\n}\n</code></pre>\n<blockquote>\n<p>There is a universal selector <code>*</code> which selects all elements on the website</p>\n</blockquote>\n<pre><code>* {\n    font-size: 12px;\n}\n</code></pre>\n<blockquote>\n<p>Precedence of selectors: General rule is that more specific selector will be applied compared to more generic selector. ID selector > Class selector > Tag selector. If we have example below, the red colour will be applied because .header (class selector) is more specific than tag selector. From the above 3 selectors, most specific selector is ID selector.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;h1 class=\"headere\">Hi&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\ncolor: blue;\n}\n\n.header {\ncolor: red;\n}\n</code></pre>\n<blockquote>\n<p>There is only one way how to over-ride ID selector and namely by <code>!important</code> syntax. This can override any CSS styling and should be only used as a last resort (because this one is very hard to override). In the example below, the colour of header will be blue.\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;h1 class=\"headere\">Hi&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\n  color: blue !important;\n}\n\n.header {\n  color: red;\n}\n</code></pre>\n<blockquote>\n<p>Chaining selectors: we are able to chain more selectors and make them even more specific.</p>\n</blockquote>\n<blockquote>\n<p>In the example below, CSS style will be applied to <code><code>&#x3C;h1></code></code> tags but only those which have class name teal.\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;h1 class=\"teal\">Hello\n    &#x3C;span class=\"purple\">stranger&#x3C;/span>\n&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1.teal {\n  color: teal;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/dDjN9MR.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Chaining selectors can be also with <code>space</code>, but it selects different thing. It selects all elements with class teal which are <code>descendents</code> of h1 tag. This kind of selector actually selects based on their location in the document. The below example selects for only those selectors which are nested in h1 tag. This is called <code>descendant combinator</code>\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;h1 class=\"teal\">Hello\n    &#x3C;span class=\"purple\">stranger&#x3C;/span>\n&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 .teal {\ncolor: teal;\n}\n\nh1 .purple {\n  color: purple;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/fgfKOTN.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>There is an interesting piece of information about the descendant combinator. It will style every child/descendant of that parent!</p>\n</blockquote>\n<blockquote>\n<p>HTML</p>\n</blockquote>\n<pre><code>&#x3C;ul class=\"main-list\">\n  &#x3C;li>Salt&#x3C;/li>\n  &#x3C;li>Pepper&#x3C;/li>\n  &#x3C;li>\n    Fruits &#x26; Veg:\n    &#x3C;ul>\n      &#x3C;li>Apple&#x3C;/li>\n      &#x3C;li>Banana&#x3C;/li>\n      &#x3C;li>Carrots&#x3C;/li>\n    &#x3C;/ul>\n  &#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<blockquote>\n<p>CSS</p>\n</blockquote>\n<pre><code>.main-list li {\n  border: 1px dotted;\n}\n</code></pre>\n<blockquote>\n<p>In above example, every li which is a descendant of the class main-list will have border, so also Apple, Banana, etc.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/yvg2pla.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>But what if we only wanted to style the DIRECT children? So directly beneath the main unordered list? So in our case only Salt, Pepper and Fruits?</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/X19ODSi.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>We would need to use <code>></code></p>\n</blockquote>\n<pre><code>.main-list > li {\n  border: 1px dotted;\n}\n</code></pre>\n<blockquote>\n<p>How about we only wanted to put border around Apple, Banana and Carrots?</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/UANLyFI.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>One way to do it, is to target li which is a direct child of ul which is nested within class main-list:</p>\n</blockquote>\n<pre><code>.main-list ul > li {\n  border: 1px dotted;\n}\n</code></pre>\n<blockquote>\n<p>Another selector based on the location in the document is called an <code>adjuscent sibling combinator</code>. It uses a plus sign (+) in oredr to select the next sibling on the same hierarchy. For example styling a pararaph which comes directly after the heading at the same hierarchy level in the HTML:</p>\n</blockquote>\n<pre><code>h1 + p {\n  font-size: 200%;\n}\n</code></pre>\n<blockquote>\n<p>If we need to apply same style to multiple selectors, we can simply separate them by comma. Imagine html like this:</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;h1 class=\"teal\">Hello\n    &#x3C;span class=\"purple\">stranger&#x3C;/span>\n&#x3C;/h1>\n\n&#x3C;h3 class=\"plum\">Nice meeting you\n    &#x3C;span class=\"steel\">out here&#x3C;/span>\n&#x3C;/h3>\n</code></pre>\n<blockquote>\n<p>Which is styled like this:</p>\n</blockquote>\n<p>CSS</p>\n<pre><code>h1.teal {\n  color: teal;\n}\n\nh1 .purple {\n  color: purple;\n}\n\nh3.plum {\n  color:plum;\n}\n\nh3 .steel {\n  color: steelBlue;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/o7XWx5c.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Imagine you want to style <code>stranger</code> and <code>out here</code> with the same style. You can do it like this:\nCSS</p>\n</blockquote>\n<pre><code>h1 .purple {\n  color: lightblue;\n}\n\nh3 .steel {\n  color: lightblue;\n}\n</code></pre>\n<blockquote>\n<p>Or you can shorten it to:\nCSS</p>\n</blockquote>\n<pre><code>h1 .purple, h3 .steel {\n  color: lightblue;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/WiFdSmL.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Be careful with applying same style to multiple elements. Unfortunately, the comma operator has one annoying pitfall: if any of the selectors are invalid, the rule won't be applied at all. entire rule will be thrown away.</p>\n</blockquote>\n<blockquote>\n<p>Another way to style <code>stranger</code> and <code>out here</code> would be nesting selectors:\nCSS</p>\n</blockquote>\n<pre><code>h1, h3 {\n    span {\n        color: deepSkyBlue;\n    }\n}\n</code></pre>\n<blockquote>\n<p>Styling based on state is another way of styling html elements. For example styling <code>a</code> (anchor) tags. This has different states depending on whether it is visited, unvisited, being hovered over, focused via the keyboard or in the process of being clicked (activated). We can use CSS to target these states. The CSS below styles unvisited links pink and visited links green.</p>\n</blockquote>\n<pre><code>a:link {\n  color: pink;\n}\n\na:visited {\n  color: green;\n}\n</code></pre>\n<blockquote>\n<p>Following CSS will remove any text styling (such as underline) when user hovers over an anchor tag:</p>\n</blockquote>\n<pre><code>a:hover {\n  text-decoration: none;\n}\n</code></pre>\n<blockquote>\n<p>Just a wrap up - <code>combinators</code> such as space or + are a way to combine <code>selectors</code>.</p>\n</blockquote>\n<blockquote>\n<p>We can use selectors and combinators in order to select for very specific elements.</p>\n</blockquote>\n<blockquote>\n<p>Select any <code>&#x3C;span></code> that is inside a <code>&#x3C;p></code>, which is inside an <code>&#x3C;article></code></p>\n</blockquote>\n<pre><code>article p span { ... }\n</code></pre>\n<blockquote>\n<p>Select any <code>&#x3C;p></code> that comes directly after a <code>&#x3C;ul></code>, which comes directly after an <code>&#x3C;h1></code></p>\n</blockquote>\n<pre><code>h1 + ul + p { ... }\n</code></pre>\n<blockquote>\n<p>Style any element with a class of special, which is inside a <code>&#x3C;p></code>, which comes just after an <code>&#x3C;h1></code>, which is inside a <code>&#x3C;body></code>. Phew!</p>\n</blockquote>\n<pre><code>body h1 + p .special {...}\n</code></pre>\n<p><strong>Pseaudo-classes</strong></p>\n<blockquote>\n<p>Let's have a button which changes color on hover. We might want to use a state for it and use <code>onMouseEnter</code> and <code>onMouseLeave</code> event listeners on that button. But it is possible do this entirely with CSS.</p>\n</blockquote>\n<blockquote>\n<p>Syntax looks like this:</p>\n</blockquote>\n<pre><code>selector:pseudo-class {\n  property: value;\n}\n</code></pre>\n<blockquote>\n<p>An exmaple is here:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  button:hover {\n    color: blue;\n  }\n&#x3C;/style>\n&#x3C;button>Hover over me!&#x3C;/button>\n</code></pre>\n<blockquote>\n<p><code>:hover</code> is a pseudo class. A pseudo-class is a <code>selector modifier</code>; it will apply its declarations when some sort of condition or state is met. In this case, it only applies the blue text when the selected element is being hovered over.</p>\n</blockquote>\n<blockquote>\n<p>List of possible pseudo classes is here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\">https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes</a></p>\n</blockquote>\n<blockquote>\n<p>Let's see some of them.</p>\n</blockquote>\n<blockquote>\n<p><code>focus</code> - in HTML, there is always an \"active element\". This is the element that is currently selected. When a button is clicked, focus moves to that button. When you press the \"Tab\" key, focus will move to the next interactive element on the page.</p>\n</blockquote>\n<blockquote>\n<p>By default, the <code>body</code> tag is focused. When focus moves to an interactive element, like a form input or a link, that element gets an outline effect, to show the user which element has focus. Example is here:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  button:focus {\n    border: 2px solid royalblue;\n    background: pink;\n    color: white;\n  }\n&#x3C;/style>\n&#x3C;button>Hello&#x3C;/button>\n&#x3C;button>world&#x3C;/button>\n&#x3C;button>!&#x3C;/button>\n</code></pre>\n<blockquote>\n<p>Click on the first button and press \"Tab\". Focus moves to the next button, and it gains the focus styles. You can press \"Shift Tab\" to go back to the first button.</p>\n</blockquote>\n<blockquote>\n<p>Focus styles are important for folks who don't navigate with a pointer device (eg. a mouse, trackpad, or touch-screen). For a variety of reasons, some users exclusively use their keyboard to access the internet, and for them, the focus indicator helps them understand where they are on the page.</p>\n</blockquote>\n<blockquote>\n<p><code>checked</code> - The :checked pseudo-class only applies to checkboxes and radio buttons that are \"filled in\". Example:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  input:checked {\n  width: 24px;\n  height: 24px;\n  }\n&#x3C;/style>\n&#x3C;input type=\"checkbox\"/>check me\n</code></pre>\n<blockquote>\n<p>We can also chain multiple pseudo-classes and apply them to mulitple elemts by separating them by comma:</p>\n</blockquote>\n<pre><code>.something:focus, .something:hover {\n  /* Shared styles! */\n}\n</code></pre>\n<p><strong>Pseaudo-elements</strong></p>\n<blockquote>\n<p>Pseudo-elements are like pseudo-classes, but they don't target a specific state. Instead, they target \"sub-elements\" within an element. For example, we can style the placeholder text in a form input with ::placeholder</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;input placeholder=\"enter text\"/>\n</code></pre>\n<p>CSS:</p>\n<pre><code>input::placeholder {\n  color: goldenrod;\n}\n</code></pre>\n<blockquote>\n<p>Two of the most common pseudo-elements are ::before and ::after. These pseudo-elements are added inside the element, right before and after the element's content.</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  p::before {\n    content: '→ ';\n    color: deeppink;\n  }\n\n  p::after {\n    content: ' ←';\n    color: deeppink;\n  }\n&#x3C;/style>\n\n&#x3C;p>\n  This paragraph has little arrows!\n&#x3C;/p>\n</code></pre>\n<p><img src=\"https://i.imgur.com/u4pUZR9.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>They are like secpret spans before and after that element. We could rewrite the above example like so:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n.pseudo-pseudo {\n  color: deeppink;\n}\n&#x3C;/style>\n\n&#x3C;p>\n  &#x3C;span class=\"pseudo-pseudo\">→ &#x3C;/span>\n  This paragraph has little arrows!\n  &#x3C;span class=\"pseudo-pseudo\"> ←&#x3C;/span>\n&#x3C;/p>\n</code></pre>\n<p><strong>Media queries</strong></p>\n<blockquote>\n<p>In order to accommodate screens of different shapes and sizes, CSS features media queries, which allow us to apply different CSS in different scenarios - on different screen sizes (desktop, mobile, tablet, etc). The CSS syntax is <code>@media</code></p>\n</blockquote>\n<blockquote>\n<p>Think about <code>@media</code> as <code>if</code> statements in javascript, followed by braces with a condition inside:</p>\n</blockquote>\n<pre><code>@media (condition) { ... styles which will be applied if the condition is met ... }\n</code></pre>\n<blockquote>\n<p>Example style will be applied if the width of the screen is between = and 300px:</p>\n</blockquote>\n<pre><code>@media (max-width: 300px) {\n    .small-only {\n      color: red;\n    }\n  }\n</code></pre>\n<blockquote>\n<p>Media queries are often used when we want to hide some content and display something else:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  @media (max-width: 300px) {\n    .desktop-only {\n      display: none;\n    }\n  }\n  @media (min-width: 301px) {\n    .mobile-only {\n      display: none;\n    }\n  }\n&#x3C;/style>\n\n&#x3C;div class=\"desktop-only\">\n  I only show up on large screens.\n&#x3C;/div>\n&#x3C;div class=\"mobile-only\">\n  Meanwhile, you'll only see me on small ones.\n&#x3C;/div>\n</code></pre>\n<blockquote>\n<p><code>display: none</code> is a declaration that removes an element from the rendering process; it's as if it doesn't exist</p>\n</blockquote>\n<blockquote>\n<p><code>max-width</code> adds styles on <code>small</code> screens</p>\n</blockquote>\n<blockquote>\n<p><code>min-width</code> adds styles on <code>larger</code> ones.</p>\n</blockquote>\n<p><strong>FONTS</strong></p>\n<blockquote>\n<p>Font styles and families</p>\n</blockquote>\n<p><a href=\"https://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html\">https://www.codecademy.com/learn/learn-css://www.w3.org/Style/Examples/007/fonts.en.html</a></p>\n<p>Examples:</p>\n<blockquote>\n<p>Changing font family:</p>\n</blockquote>\n<pre><code>h1 {\nfont-family: Garamond;\n}\n</code></pre>\n<blockquote>\n<p>Font families come in different styles. The 3 most popular:</p>\n</blockquote>\n<ul>\n<li>Serif</li>\n<li>Sans-serif</li>\n<li>Monospace</li>\n</ul>\n<p>A “serif” is a little adornment at the edge of strokes. Serif fonts are very common in print media, but less so on the web (they tend to create a more sophisticated, aged look).</p>\n<p><img src=\"https://i.imgur.com/wcCRuBJ.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>General rules about font-families:</p>\n</blockquote>\n<blockquote>\n<p>The font specified in a stylesheet must be installed on a user’s computer in order for that font to display when a user visits the web page. The default typeface for all HTML elements is Times New Roman. It’s a good practice to limit the number of fonts used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision. When the name of a font consists of more than one word, it’s a best practice to enclose the font’s name in quotes. Example:</p>\n</blockquote>\n<pre><code>h1 {\n  font-family: \"Courier New\";\n}\n</code></pre>\n<blockquote>\n<p>We can find good font library by google: www.fonts.google.com. Where we can search for any font we like.</p>\n</blockquote>\n<blockquote>\n<p>We need to then click on the font and select which variation we like to use (can be multiple) - green arrow. Then we can see which fonts we selected by clicking on the selected families icon - purple icon. There we can find how to integrate them to your application as link tag in html (blue arrow), or even how to import them directly (to a js file):</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/Jzidzo4.png%22Photo%20by%20Addania%22\"></p>\n<blockquote>\n<p>Example of importing fonts to your html so that they can be used in your application:</p>\n</blockquote>\n<pre><code>&#x3C;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\n&#x3C;link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&#x26;display=swap\" rel=\"stylesheet\">\n</code></pre>\n<blockquote>\n<p>Changing font size:</p>\n</blockquote>\n<pre><code>p {\nfont-size: 18px;\n}\n</code></pre>\n<blockquote>\n<p>Font size can also be expressed in rem which will then scale the font size based on the default font size user chose. The number given represents how much bigger the font will be based on the defaul user selected font.</p>\n</blockquote>\n<pre><code>font-size: 1.2rem;\n</code></pre>\n<blockquote>\n<p>Changing bold (thickness or narrowness of the font) using font-weight (it can hold values bold or normal):</p>\n</blockquote>\n<pre><code>p {\nfont-weight: bold;\n}\n</code></pre>\n<p><strong>ALIGNING TEXT</strong></p>\n<blockquote>\n<p>To align text horizontally (to right, left or center) we use text-align property. It also works on images.</p>\n</blockquote>\n<pre><code>h1 {\n  text-align: right;\n}\n</code></pre>\n<p><strong>COLORS</strong></p>\n<blockquote>\n<p>Setting color of text can be done in two ways:</p>\n</blockquote>\n<p><strong>A) foreground colour</strong> for example colour of the text itself, property to do this is called <code>color</code></p>\n<p><strong>B) background colour</strong> property using <code>background-color</code></p>\n<pre><code>h1 {\n  color: red;\n  background-color: blue;\n}\n</code></pre>\n<blockquote>\n<p>Change opacity of an element. Accepts values from 0 (0% opacity) to 1 (100% opacity)</p>\n</blockquote>\n<pre><code>.overlay {\n  opacity: 0.5;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/ZrJnm95.jpg\" title=\"Photo by Daniel Frese from Pexels\"></p>\n<blockquote>\n<p>For setting colors you can use hex codes - but hex codes are not:</p>\n</blockquote>\n<pre><code>div {\n    background-color: #00bfff;\n    color: #ffffff;\n}\n</code></pre>\n<blockquote>\n<p>But there is even a better way to represent colors and that is HSB / HSL: Hue Saturation Brightness or Hue Saturation Lightness</p>\n</blockquote>\n<pre><code>.colorful-thing {\n  color: hsl(200deg 100% 50%);\n  border-bottom: 3px solid hsl(100deg 75% 50%);\n}\n</code></pre>\n<blockquote>\n<p>The best explanation of this concept is on the Photoshop color picker:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/CpQ6a4e.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p><code>Hue</code> means the color itself / the pigment. It is measured in degrees starting at 0 till 360 degrees. Representing colors from red to ... hmm ...red again :) It is the vertical color stripe in the Photoshop color picker</p>\n</blockquote>\n<blockquote>\n<p><code>Saturation</code> and <code>Brightness</code> are represented on the two-dimensional grid</p>\n</blockquote>\n<blockquote>\n<p><code>Saturation</code> changes when moving from the lef to right. Right being the most saturated. Moving left colors become more pastelly and more washed away. When reaching far left, colors are just grey, with no hue. It is represented in percentage.</p>\n</blockquote>\n<blockquote>\n<p><code>Brightness</code> changes when you move vertically from top to down. Top being light colors eventually white and down being darker colors everntually black. It is represented in percentage.</p>\n</blockquote>\n<blockquote>\n<p>Knowing this makes it pretty intuitive now how to use hsl in the CSS: Look again here:</p>\n</blockquote>\n<pre><code>.colorful-thing {\n  color: hsl(200deg 100% 50%);\n}\n</code></pre>\n<blockquote>\n<p>This color has around 200 degrees of the hue, which is blue, 100% of saturation - so full color, no washing away, no greying, 50% of its brightness.</p>\n</blockquote>\n<blockquote>\n<p>If you want your color to be semi-transparent, you can pass a fourth value for the <code>alpha</code> channel. This is a unitless number between 0 (fully transparent) and 1 (the default, fully opaque)</p>\n</blockquote>\n<pre><code> .first.box {\n    background-color: hsl(340deg 100% 50% / 1);\n  }\n  .second.box {\n    background-color: hsl(340deg 100% 50% / 0.75);\n  }\n</code></pre>\n<blockquote>\n<p>A lower <code>alpha</code> number means that the pixels are transparent.</p>\n</blockquote>\n<blockquote>\n<p>This \"version\" of HSL color is part of a 2016 revision to how colors work in CSS. It enjoys wide browser support, but will not work in Internet Explorer. If your project supports IE, you'll need to use a slightly different syntax:</p>\n</blockquote>\n<pre><code>.colorful-thing {\n  color: hsl(200deg, 100%, 50%);\n  background-color: hsla(200deg, 100%, 50%, 0.2);\n}\n</code></pre>\n<blockquote>\n<p>Instead of being space-separated, the values inside the hsl() function are comma-separated. If you'd like the color to be transparent, you'll need to use the hsla() function instead of the hsl() function.</p>\n</blockquote>\n<blockquote>\n<p>You can play online with hsl here: <a href=\"https://hslpicker.com/#0af\">https://hslpicker.com/#0af</a></p>\n</blockquote>\n<p><strong>Units</strong></p>\n<blockquote>\n<p>Some property values use units. There are couple of units:</p>\n</blockquote>\n<ul>\n<li>pixels</li>\n<li>ems</li>\n<li>rems</li>\n<li>percetages</li>\n</ul>\n<blockquote>\n<p>Most popular unit is a <code>pixel</code> for anything size-related:</p>\n</blockquote>\n<pre><code>.box {\n  width: 1000px;\n  margin-top: 32px;\n  padding: 8px;\n  font-size: 16px;\n}\n</code></pre>\n<blockquote>\n<p><code>Em</code> is a relative unit, equal to the font size of the current element. If a heading has a font-size of 24px, and we give it a bottom padding of 2em, we can expect that the element will have 48px of cushion underneath it (2 × 24px)</p>\n</blockquote>\n<pre><code>p {\n  font-size: 12px;\n  padding-bottom: 2em;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/ywjiFBY.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Using em means that a component's UI will change depending on the font size of the container it's placed within. This can be useful, but more often than not, it's a nuisance.</p>\n</blockquote>\n<blockquote>\n<p><code>Rems</code> are more useful. The <code>rem</code> unit is quite a lot like the <code>em</code> unit, with one crucial difference: it's always relative to the root element, the <code>html</code> tag.</p>\n</blockquote>\n<blockquote>\n<p>All of the <code>rems</code> in your app will be taking their cues from that root HTML tag. By default, the HTML tag has a font size of 16px, so 1rem will be equal to 16px.</p>\n</blockquote>\n<pre><code>html {\n  font-size: 16px;\n}\nh1 {\n  font-size: 2rem;\n  margin: 0;\n}\nh2 {\n  font-size: 1.25rem;\n  margin-bottom: 1.5rem;\n  color: gray;\n}\np {\n  font-size: 1rem;\n}\n</code></pre>\n<blockquote>\n<p>Changing all the text scales accordingly, when you change the root font size? That's why people like the rem unit. No matter where an element is in the DOM tree, the rem is consistent. It behaves consistently and predictably, like pixels, but it respects user preferences when it comes to increasing/decreasing default font sizes.</p>\n</blockquote>\n<blockquote>\n<p>Here is the comparison of the text between html tag having font size 16px and when it has 12px:</p>\n</blockquote>\n<pre><code>html {\n  font-size: 12px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/cPxpZVI.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>But in real application we DO NOT want to set pixel size for the html tag becasue it would override user default setting. So DO NOT set html tag font size.</p>\n</blockquote>\n<blockquote>\n<p>The <code>percentage</code> unit is often used with width/height, as a way to consume a portion of the available space.</p>\n</blockquote>\n<pre><code>&#x3C;div class=\"box\">\n  &#x3C;div class=\"child\">&#x3C;/div>\n&#x3C;/div>\n\n.box {\n  width: 250px;\n  height: 250px;\n  background-color: pink;\n}\n.child {\n  width: 50%;\n  height: 75%;\n  background-color: black;\n}\n</code></pre>\n<blockquote>\n<p>How to use units - best practises:</p>\n</blockquote>\n<ul>\n<li>For typography, use rem, because it has important accessibility benefits.</li>\n<li>When it comes to properties that relate to the box model — padding, border, margin — use pixels. It's more intuitive than rem, and there isn't a clear accessibility win.</li>\n<li>For width/height, it'll depend on whether we want the element to be a fixed size, or a relative size. We might want one div to always be 250px wide, while another one should be 50% of the available space.</li>\n<li>For color, it is good to use hsl.</li>\n<li>Use em for the rare cases when you want one property to scale directly with font size.</li>\n</ul>\n<p><strong>IMAGES</strong></p>\n<blockquote>\n<p>Adding image as a background to an element. URL can be link to exterenal site or file path within the project folder</p>\n</blockquote>\n<pre><code>.main-banner {\n  background-image: url(\"https://www.example.com/image.jpg\");\n}\n\n.main-banner {\n  background-image: url(\"images/mountains.jpg\");\n}\n</code></pre>\n<p><strong>TEXT TRANSFORMATIONS</strong></p>\n<blockquote>\n<p>Transforming whole text to uppercase</p>\n</blockquote>\n<pre><code>h1{\ntext-transform: uppercase;\n}\n</code></pre>\n<blockquote>\n<p>Transforming first leter to uppercase</p>\n</blockquote>\n<pre><code>h3 {\ntext-transform: capitalize;\n}\n</code></pre>\n<blockquote>\n<p>Text cursive. Note, this does not mean italics. Cursive only emulates hand-writing</p>\n</blockquote>\n<pre><code>.cursive {\nfont-family: cursive;\n}\n</code></pre>\n<p><strong>TEXT SPACING</strong></p>\n<blockquote>\n<p>We can tweak the horizontal gap between characters using the letter-spacing property.</p>\n</blockquote>\n<pre><code>h3 {\n  letter-spacing: 3px;\n}\n</code></pre>\n<blockquote>\n<p>We can tweak the vertical distance between lines using the <code>line-height</code> property. <code>line-height</code> is a bit of an odd duck because it takes a unitless value. This works as a ratio: <code>line-height: 2</code> means that the lines should be twice as tall as a different element with line-height: 1 - for example often with respect to our font size.</p>\n</blockquote>\n<pre><code>h3 {\n  line-height: 2;\n}\n</code></pre>\n<p><strong>BOX MODEL</strong></p>\n<blockquote>\n<p>The Box model includes the content area’s size (width and height) and the element’s padding, border, and margin. The properties include:</p>\n</blockquote>\n<p><strong>Width and height</strong> — specifies the width and height of the content area.</p>\n<p><strong>Padding</strong> — specifies the amount of space between the content area and the border.</p>\n<p><strong>Border</strong> — specifies the thickness and style of the border surrounding the content area and padding.</p>\n<p><strong>Margin</strong> — specifies the amount of space between the border and the outside edge of the element.</p>\n<p><strong>WIDTH AND HEIGHT</strong></p>\n<blockquote>\n<p>To set specific width and height of an element. It can be set in pixels or in percentages:</p>\n</blockquote>\n<pre><code>p {\n  height: 80px;\n  width: 240px;\n}\n</code></pre>\n<blockquote>\n<p>Minimum width is minimum width the element will shrink to</p>\n</blockquote>\n<pre><code>min-width: 50px;\n</code></pre>\n<blockquote>\n<p>Maximum width is maximum width the element will expand to</p>\n</blockquote>\n<pre><code>max-width: 50px;\n</code></pre>\n<blockquote>\n<p>Minimum heigth is minimum heigth the element will shrink to</p>\n</blockquote>\n<pre><code>min-heigth: 30px;\n</code></pre>\n<blockquote>\n<p>Maximum heigth is maximum heigth the element will expand to</p>\n</blockquote>\n<pre><code>>max-heigth: 30px;\n</code></pre>\n<p><strong>BORDER</strong></p>\n<blockquote>\n<p>A border is a line what surrounds an element, like a frame around a painting. Borders can be set with a specific width, style, and color.</p>\n</blockquote>\n<p><strong>border-width</strong> — The thickness of the border. A border’s thickness can be set in pixels, ems, rems or with one of the following keywords: thin, medium, or thick.</p>\n<p><strong>border-style</strong> — The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, dashed, double, groove, ridge, inset, outset, mixed and solid.</p>\n<p><img src=\"https://i.imgur.com/posMCos.png\" title=\"Photo by Addania\"></p>\n<p><strong>border-color</strong> — The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.</p>\n<blockquote>\n<p>All these properties can be written as a shorthand:</p>\n</blockquote>\n<pre><code>p {\n  border: 3px solid coral;\n}\n</code></pre>\n<blockquote>\n<p>Only <code>border-style</code> filed is required in the above shorthand:</p>\n</blockquote>\n<pre><code>.good {\n  border: solid;\n}\n</code></pre>\n<blockquote>\n<p>This will produce a black, 3px-thick border</p>\n</blockquote>\n<blockquote>\n<p>Following code is invalid. It will not work because it lacks style:</p>\n</blockquote>\n<pre><code>.not-good {\n  border: 2px pink;\n}\n</code></pre>\n<blockquote>\n<p>If we don't specify a border color, it'll use the font's color by default. By font-color property <code>color</code> is meant.</p>\n</blockquote>\n<blockquote>\n<p>If you want to specify this behaviour explicitly, it can be done with the special <code>currentColor</code> keyword. <code>currentColor</code> is always a reference to the element's derived text color (whether set explicitly or inherited), and it can be used anywhere a color might be used:</p>\n</blockquote>\n<pre><code>.box {\n  color: hotpink;\n  border: 1px solid currentColor;\n  box-shadow: 2px 2px 2px currentColor;\n}\n</code></pre>\n<blockquote>\n<p>As we saw we can defined mixed border-styles:</p>\n</blockquote>\n<pre><code>border-style: dashed dotted;\n</code></pre>\n<p><img src=\"https://i.imgur.com/MBNlZ0G.png\" title=\"Photo by Addania\"></p>\n<p><strong>Border radius</strong></p>\n<blockquote>\n<p>The CSS Working Group has published a list of mistakes they've made with the CSS language. One of these mistakes is listed: \"border-radius should have been corner-radius\"</p>\n</blockquote>\n<blockquote>\n<p>It's not hard to understand why. The border-radius property rounds an element (content) even if it has no border!</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/c2rGi84.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Border with rounded corners</p>\n</blockquote>\n<pre><code>div.container {\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 5px;\n}\n</code></pre>\n<blockquote>\n<p>Perfect circle border - set the radius equal to height of the box or 50%</p>\n</blockquote>\n<pre><code>div.container {\n  height: 60px;\n  width: 60px;\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 60px;\n}\n</code></pre>\n<p>or equivalently:</p>\n<pre><code>div.container {\n  height: 60px;\n  width: 60px;\n  border: 3px solid rgb(22, 77, 100);\n  border-radius: 50%;\n}\n</code></pre>\n<blockquote>\n<p>Border radius can be also defind by 4 values. The first one is the top left corner, the second value is top right corner, the third is the bottom right corner and finally the fourth value is the bottom left corner:</p>\n</blockquote>\n<pre><code>border-radius: 10px 10px 10px 10px;\n</code></pre>\n<blockquote>\n<p>We can decide to only set 3 or less of the values for creative shapes:</p>\n</blockquote>\n<p><strong>Teardrop shape</strong></p>\n<pre><code>border-radius: 0px 10px 10px 10px;\n</code></pre>\n<p><strong>Palm leaf shape</strong> where width of image is 100px</p>\n<pre><code>border-radius: 100px 0px 100px 0px;\n</code></pre>\n<p><strong>Quarter circle</strong> where width and height of the image is 100px:</p>\n<pre><code>border-radius: 100px 0px 0px 0px;\n</code></pre>\n<p><strong>D-shape</strong></p>\n<pre><code>border-radius: 10px 40px 40px 10px;\n</code></pre>\n<blockquote>\n<p>All these 4 values have their individual properties:</p>\n</blockquote>\n<pre><code>border-top-left-radius: 8px;\nborder-top-right-radius: 16px;\nborder-bottom-right-radius: 32px;\nborder-bottom-left-radius: 64px;\n</code></pre>\n<p><strong>OUTLINE</strong></p>\n<blockquote>\n<p>What is difference between border and outline? In some aspects, they're similar! They both add a visual edge to a given element.</p>\n</blockquote>\n<blockquote>\n<p>The core difference is that outline doesn't affect layout. Outline is kinda more like box-shadow; it's a cosmetic effect draped over an element, without nudging it around, or changing its size.</p>\n</blockquote>\n<blockquote>\n<p>It has similar properties like border:</p>\n</blockquote>\n<pre><code>outline-width\noutline-color\noutline-style\n</code></pre>\n<blockquote>\n<p>Outline is stacked outside of the border and can be used as second border for visual effect.</p>\n</blockquote>\n<pre><code>border: 4px solid darkviolet;\noutline: 4px solid deeppink;\n</code></pre>\n<blockquote>\n<p>There is no outline-radius! (Only in Firefox)</p>\n</blockquote>\n<blockquote>\n<p>Outlines have a special <code>outline-offset</code> property. It allows you to add a bit of a gap between the element and its outline.</p>\n</blockquote>\n<pre><code>outline-offset: 4px;\n</code></pre>\n<blockquote>\n<p>We should not set:</p>\n</blockquote>\n<pre><code>button {\n  outline: none;\n}\n</code></pre>\n<blockquote>\n<p>This would break navigation for keyboard users; that ring is required for them to know which element is currently focused!</p>\n</blockquote>\n<blockquote>\n<p>The only exception is if we provide a suitable alternative. For example:</p>\n</blockquote>\n<pre><code>button {\n  outline: none;\n}\nbutton:focus {\n  background: navy;\n  color: white;\n}\n</code></pre>\n<p><strong>PADDING</strong></p>\n<blockquote>\n<p>Padding: space between content and border. It is an inner space.</p>\n</blockquote>\n<blockquote>\n<p>If we have some element with padding, and we set its background to red, also padding will have red background</p>\n</blockquote>\n<pre><code>.someElement {\n  padding: 48px;\n  background-color: \"tomato\";\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/2BKHRCL.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Padding can have properties:</p>\n</blockquote>\n<pre><code>padding-top: 30px;\npadding-right: 15px;\npadding-bottom: 30px;\npadding-left: 15px;\n</code></pre>\n<blockquote>\n<p>The same as obve can be re-written using logical properties (which are applicable to also languages which are written right to left, or vertically)</p>\n</blockquote>\n<pre><code>  padding-block-start: 20px;\n  padding-block-end: 40px;\n  padding-inline-start: 60px;\n  padding-inline-end: 80px;\n</code></pre>\n<blockquote>\n<p>Block means vertically on top of each other and inline horizontally next to each other</p>\n</blockquote>\n<blockquote>\n<p>Padding, like other properties of box model, can be expressed in px, em or rem. Pixels are the most common. Using percantages is possible but not recommended because it yields unexpected results.</p>\n</blockquote>\n<blockquote>\n<p>Padding: In order to have same padding on all four sides use:</p>\n</blockquote>\n<pre><code>padding: 10px;\n</code></pre>\n<blockquote>\n<p>Padding: In order to specify exactly how much padding there should be on each side of the content in a single declaration. The values go in clock-wise direction: padding on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.</p>\n</blockquote>\n<pre><code>padding: 10px 15px 20px 30px;\n</code></pre>\n<blockquote>\n<p>Padding: If the top and bottom values for padding will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut. First value defines padding top and bottom to be 10px, padding left and right to be 15px.</p>\n</blockquote>\n<pre><code>padding: 10px 15px;\n</code></pre>\n<blockquote>\n<p>Padding: Top and Bottom paddings (vertical paddings) <strong>DO NOT</strong> collapse!</p>\n</blockquote>\n<blockquote>\n<p>Padding: Left and Right paddings (horizontal paddings) <strong>DO NOT</strong> collapse! And are always added together.</p>\n</blockquote>\n<blockquote>\n<p>If we want a padding of 48px everywhere except for the bottom, we can write it in 2 ways:</p>\n</blockquote>\n<pre><code>.box {\n  padding: 48px 48px 0 48px;\n}\n</code></pre>\n<blockquote>\n<p>Or</p>\n</blockquote>\n<pre><code>.box {\n  padding: 48px;\n  padding-bottom: 0;\n}\n</code></pre>\n<blockquote>\n<p><code>padding-bottom</code> overwrites <code>padding</code> because if comes second in the css file</p>\n</blockquote>\n<p><strong>MARGIN</strong></p>\n<blockquote>\n<p>Margin increases the space around an element, giving it some breathing room. As we saw earlier, margin is \"personal space\". Margin is the space outside of the border.</p>\n</blockquote>\n<blockquote>\n<p>Margin is mysterious. It can do wacky things, like pull an element outside a parent, or center itself within its container.</p>\n</blockquote>\n<blockquote>\n<p>It has following values:</p>\n</blockquote>\n<pre><code>margin-top: 10px;\nmargin-right: 15px;\nmargin-bottom: 10px;\nmargin-left: 30px;\n</code></pre>\n<blockquote>\n<p>Also here are logical equivalents for languages which are not left to right:</p>\n</blockquote>\n<pre><code>  margin-block-start: 20px;\n  margin-block-end: 40px;\n  margin-inline-start: 60px;\n  margin-inline-end: 80px;\n</code></pre>\n<blockquote>\n<p>If you want to have same margin on all four sides use:</p>\n</blockquote>\n<pre><code>margin: 10px;\n</code></pre>\n<blockquote>\n<p>In order to specify exactly how much margin there should be on each side of the content in a single declaration. The values go in clock-wise direction: margin on the top (10 pixels), right (15 pixels), bottom (20 pixels), and left (30 pixels) sides of the content.</p>\n</blockquote>\n<pre><code>margin: 10px 15px 20px 30px;\n</code></pre>\n<blockquote>\n<p>If the top and bottom values for margin will equal each other, and the left and right values for margin will also equal each other, you can use the following shortcut. First value defines margin top and bottom to be 10px, margin left and right to be 15px.</p>\n</blockquote>\n<pre><code>margin: 10px 15px;\n</code></pre>\n<blockquote>\n<p>Padding and border only allow positive numbers including 0. But margins can be negative!! Negative margins can pull element outside of the parent.</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;main>\n  &#x3C;div class=\"pink-box\">&#x3C;/div>\n&#x3C;/main>\n</code></pre>\n<p>CSS:</p>\n<pre><code>main {\n  width: 200px;\n  height: 200px;\n  border: 3px solid;\n}\n\n.pink-box {\n  width: 50%;\n  height: 50%;\n  border: 3px solid deeppink;\n  background: white;\n  margin-top: -32px;\n  margin-left: -32px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/uQIeFSP.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>What if we wanted to do something super cool? Like a heading which peeks out of its container? Like this:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/GL1kzFM.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>This is how you could achieve it.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code> &#x3C;body>\n    &#x3C;div class=\"card\">\n      &#x3C;div class=\"header\">HEADER PEEKING OUT&#x3C;/div>\n      &#x3C;p>\n        Otters have long, slim bodies and relatively short limbs. Their most\n        striking anatomical features are the powerful webbed feet used to swim,\n        and their seal-like abilities holding breath underwater.\n      &#x3C;/p>\n    &#x3C;/div>\n  &#x3C;/body>\n</code></pre>\n<p>CSS</p>\n<pre><code>body {\n  background-color: #222;\n  box-sizing: border-box;\n  margin: 50px;\n}\n\n.card {\n  background-color: white;\n  border-radius: 10px;\n  padding: 25px;\n}\n\n.header {\n  background-color: deeppink;\n  font-size: 30px;\n  text-align: center;\n  font-weight: bold;\n  border-radius: 10px;\n  margin-top: -40px;\n  padding: 25px;\n}\n</code></pre>\n<blockquote>\n<p>Please note, that in case this is not working for you, and instead of re-positioning the header, you decrease the margin of entire card - try to add some padding to the container where the header is positioned. Alternative increase the negative margin (it needs to be more than for example padding of the card)</p>\n</blockquote>\n<blockquote>\n<p>Negative margin can also pull a sibling closer:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;main>\n  &#x3C;div class=\"pink-box\">&#x3C;/div>\n  &#x3C;div class=\"neighbor\">&#x3C;/div>\n&#x3C;/main>\n</code></pre>\n<p>CSS</p>\n<pre><code>main {\n  width: 200px;\n  height: 200px;\n  border: 3px solid;\n}\n\n.pink-box {\n  width: 50%;\n  height: 50%;\n  border: 3px solid deeppink;\n  background: white;\n  margin-bottom: -32px;\n}\n\n.neighbor {\n  width: 50%;\n  height: 50%;\n  background: silver;\n  margin-left: 16px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/1ziZlPf.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>If we apply negative margin to the first box, it will influence all its siblings position!!!</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;main>\n  &#x3C;div class=\"box one\">&#x3C;/div>\n  &#x3C;div class=\"box two\">&#x3C;/div>\n  &#x3C;div class=\"box three\">&#x3C;/div>\n&#x3C;/main>\n</code></pre>\n<p>CSS</p>\n<pre><code>main {\n  width: 200px;\n  height: 200px;\n  border: 3px solid silver;\n}\n\n.box {\n  width: 25%;\n  height: 25%;\n  border: 3px solid;\n  background: white;\n}\n\n.box.one {\n  border-color: deeppink;\n  margin-top: -24px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/NHHpHPI.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>The interesting thing is those two black boxes: they \"follow\" the deep pink box up. When we use margin to tweak an element's position, we might also be tweaking every subsequent element as well. This is different from other methods of shifting an element's position, like using <code>transform: translate</code></p>\n</blockquote>\n<blockquote>\n<p>There is one last trick a negative margin can do. Imagine you have a card which has a padding. So everything inside of it (all its children) will have this padding.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/BAKi7AA.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>What if we wanted to create one exception for the image which will ignore the padding and will extend from one edge to the other of the card? Something like this?</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/esazm7o.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>We can achieving it by wrapping the image in a wrapper and applying negative margin to the right and left both!! Please note: images are \"replaced elements\". They do not reside in the DOM, they are imported. FOr that reason, any manipulation and layouting with images should be done using wrappers around them. Not with images directly.</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;div class=\"card\">\n  &#x3C;p>\n    Otters have long, slim bodies and relatively short limbs. Their most striking anatomical features are the powerful webbed feet used to swim, and their seal-like abilities holding breath underwater.\n  &#x3C;/p>\n  &#x3C;div class=\"wrapper\">\n  &#x3C;img alt=\"A cute otter in water\" src=\"/course-materials/otter.jpg\" />\n  &#x3C;/div>\n  &#x3C;p>\n    More importantly, otters are glorious water dogs, playful and curious. The otter, no other, is the best animal.\n  &#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<p>CSS</p>\n<pre><code>body {\n  background: #222;\n  padding: 32px;\n}\n\n.card {\n  background-color: white;\n  padding: 32px;\n  border-radius: 8px;\n}\n\n.wrapper {\n  margin-left: -32px;\n  margin-right: -32px;\n}\n\nimg {\n  display: block;\n  width: 100%;\n\n}\n\np, img {\n  margin-bottom: 16px;\n}\n</code></pre>\n<blockquote>\n<p>Nice article about negative margins is here: <a href=\"https://www.quirksmode.org/blog/archives/2020/02/negative_margin.html\">https://www.quirksmode.org/blog/archives/2020/02/negative_margin.html</a></p>\n</blockquote>\n<blockquote>\n<p>Margin is really about changing the gap between elements.</p>\n</blockquote>\n<blockquote>\n<p>Margin property also allows to position an element in the center of a parent element. There are 2 requirements in order to do it:</p>\n</blockquote>\n<p><strong>1/</strong> top and bottom margin is defined and then followed by word auto, meaning right and left margin will be done automatically based on the maximum available horizontal space of the element and the container in which we want to center it</p>\n<p><strong>2/</strong> width of the element needs to be defined and needs to be smaller than the width of the container where the element resides. Why? Block elements will naturally grow to fill the available horizontal space, so we need to give our element a width in order to center it.</p>\n<pre><code>div {\nwidth: 200px\nmargin: 0px auto;\n}\n</code></pre>\n<blockquote>\n<p>Another example:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;main>\n  &#x3C;section class=\"content\">\n    Hello World\n  &#x3C;/section>\n&#x3C;/main>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.content {\n  width: 50%;\n  margin-left: auto;\n  margin-right: auto;\n  background: palevioletred;\n  padding: 16px;\n}\n\nmain {\n  width: 100%;\n  height: 200px;\n  border: 3px solid silver;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/IsCaFWd.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>This only works for horizontal margin. Setting top/bottom margin to auto is equivalent to setting it to 0px.</p>\n</blockquote>\n<blockquote>\n<p>There are other ways how to center items in a container with modern layout rendering modes like Flexbox or Grid.</p>\n</blockquote>\n<blockquote>\n<p>Important difference is that margin auto is used on the single child element selectively!</p>\n</blockquote>\n<blockquote>\n<p>Flexbox and Grid are both powerful tools for managing layout. But their properties are applied to a container, and affect all children.</p>\n</blockquote>\n<blockquote>\n<p>Margin: Top and Bottom margin is also called: <strong>Vertical margin</strong>. Left and Right margin is called <strong>Horizontal Margin</strong></p>\n</blockquote>\n<blockquote>\n<p>Margin: Top and Bottom margin (vertical margins) <strong>COLLAPSE</strong>! The larger of the two vertical margins sets the distance between adjacent elements. For example: if top element has margin bottom of 20px and bottom element margin top of 30px, then the effective distance between these 2 elements is 30px.</p>\n</blockquote>\n<pre><code>#img-one {\n  margin-bottom: 30px;\n}\n\n#img-two {\n  margin-top: 20px;\n}\n</code></pre>\n<blockquote>\n<p>Margin: Left and Right margins (horizontal margins) <strong>DO NOT</strong> collapse! And are always added together. If left element has margin right of 10px and right element marin left of 10 px. Then the effective distance of the elements is 20px.</p>\n</blockquote>\n<pre><code>#img-one {\n  margin-right: 10px;\n}\n\n#img-two {\n  margin-left: 10px;\n}\n</code></pre>\n<p><strong>OVERFLOW</strong></p>\n<blockquote>\n<p>The overflow property controls what happens to content which is larger than its container (box). In order words content that spills, or overflows, outside its box. The parent container can be set to:</p>\n</blockquote>\n<ul>\n<li>hidden - any content that overflows will be hidden from view</li>\n<li>scroll - a scrollbar is added to the element’s box so that the rest of the content can be viewed by scrolling.</li>\n<li>visible - the overflow content will be displayed outside of the containing element. This is the default value.</li>\n</ul>\n<p><strong>LAYOUTS</strong></p>\n<blockquote>\n<p>In CSS we have different layouting modes. Here are examples: Flow, Flexible Box (FlexBox), Positioned layout, Grid (CSS Grid), etc.</p>\n</blockquote>\n<blockquote>\n<p>The default one is FLOW. Plain HTML document without CSS uses FLOW exclusively.</p>\n</blockquote>\n<p><strong>FLOW LAYOUT</strong></p>\n<blockquote>\n<p>In Flow layout, every element will use a display value of either <code>inline</code>, <code>block</code>, or <code>inline-block</code>. This value governs how the Flow layout algorithm will place the element. The default value depends on the tag; <code>div</code>, <code>section</code>, <code>nav</code>, <code>header</code>, <code>footer</code>, <code>article</code>, <code>paragraph</code>, <code>heading</code>, <code>form</code>, <code>blockquote</code> are block by default, while <code>spans</code> , <code>strong</code>, <code>a</code> are inline.</p>\n</blockquote>\n<blockquote>\n<p>In flow layout, block elements stack in the block direction, and inline elements stack in the inline direction.</p>\n</blockquote>\n<p><strong>Greedy block elements</strong></p>\n<blockquote>\n<p>When you place a block element to the page, its content box consumes hungrily all available horizontal space!</p>\n</blockquote>\n<blockquote>\n<p>A heading might only need 150px to contain its letters, but if you put it in an 800px container, it will consume 800px of width for its content.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/TZFFgjG.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Even if we shrink its content, so that it only uses so much space that it needs with width: fit-content, it will still not share its inline space with another element - instead margin will fill out the remaining horizontal space:\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;h2>\n  Hello World\n&#x3C;/h2>\n&#x3C;div class=\"red-box\">&#x3C;/div>\n&#x3C;h2>\n  Hello World\n&#x3C;/h2>\n&#x3C;div class=\"red-box\">&#x3C;/div>\n</code></pre>\n<p>CSS</p>\n<pre><code>h2 {\n  width: -moz-fit-content;\n  width: fit-content;\n  border: 2px dotted;\n}\n\n.red-box {\n  width: 50px;\n  height: 25px;\n  background: red;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/RbTY7cp.png\" title=\"Photo by Addania\"></p>\n<p><strong>Polite inline elements</strong></p>\n<blockquote>\n<p>These are polite guys who do not want to make a fuss. They go with the flow. They are rendered where they are. Lots of CSS properties do not work with inline elemets: adjust the positioning or changing its size. FOllowing will not have any effect:</p>\n</blockquote>\n<pre><code>strong {\n  height: 2em;\n  width: 300px;\n  margin-top: 300px;\n  margin-bottom: 300px;\n}\n</code></pre>\n<blockquote>\n<p>Inline elements are like <code>go-with-the-flow-type</code> folks. They don't want to inconvenience anyone by pushing any boundaries. You can shift things in the inline direction with margin-left and margin-right, but you can't change its width or height.</p>\n</blockquote>\n<blockquote>\n<p>The exception are <code>replaced</code> elements also called <code>foreign</code> objects:</p>\n</blockquote>\n<ul>\n<li><code>&#x3C;img /></code></li>\n<li><code>&#x3C;video /></code></li>\n<li><code>&#x3C;canvas /></code></li>\n</ul>\n<blockquote>\n<p>These replaced elements are technically inline but they are special :) They can affect block layout. We can set explicit dimensions or add some magin-top.</p>\n</blockquote>\n<blockquote>\n<p>How to reconcile this? There is a trick. Try to pretend that it's a foreign object within an inline wrapper. When you pass it a width or height, you're applying those properties to the foreign object. The inline wrapper still goes with the flow.</p>\n</blockquote>\n<blockquote>\n<p>Another exception is a <code>button</code> tag. They are technically inline, but can be given be given width and height.</p>\n</blockquote>\n<p><strong>Magic space around inline elements</strong></p>\n<blockquote>\n<p>Imagine you have an image in a div:</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;div>\n    &#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\">\n&#x3C;/div>\n</code></pre>\n<p>CSS</p>\n<pre><code>img {\n  width: 300px;\n}\n</code></pre>\n<blockquote>\n<p>When you inpect the height of the image it will be: 132 px</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/aTBTWuu.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>When you inpect the height of the image it will be: 136.13 px</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/guqtUjm.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Why is that? Why is there 6px difference in height? It's neither a padding, border or a margin. Reason is that the inline elements are treated like typography and there is some space reserved between lines, because we usually do not want text to be cramped at each other.</p>\n</blockquote>\n<blockquote>\n<p>We can fix it with setting <code>display: block</code> to the image or add <code>line-height: 0</code> to the wrapping div.</p>\n</blockquote>\n<blockquote>\n<p>Now let's place 3 images nex to each other - they are all inline, so shoudl be placed next to each other.</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>    &#x3C;div>\n      &#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\n      &#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\n      &#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\n    &#x3C;/div>\n</code></pre>\n<blockquote>\n<p>You will notice there is space between them. 😮</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/b1qAoCs.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>This is a whitespace between elements! Surprisingly, if we squish our HTML so that there are no newlines or whitespace characters between images, this problem goes away:</p>\n</blockquote>\n<p>HTML</p>\n<pre><code class=\"language-<div>\">      &#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />&#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />&#x3C;img alt=\"cat\" src=\"https://i.imgur.com/9h4pjj0.png\" />\n    &#x3C;/div>\n</code></pre>\n<p><img src=\"https://i.imgur.com/5qE2UiS.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>This happens because HTML is <code>space-sensitive</code>, at least to an extent. The browser can't tell the difference between whitespace added to separate words in a paragraph, and whitespace added to indent our HTML and keep it readable.</p>\n</blockquote>\n<blockquote>\n<p>How do we solve this problem? There are some ideas on CSS Tricks: <a href=\"https://css-tricks.com/fighting-the-space-between-inline-block-elements/\">https://css-tricks.com/fighting-the-space-between-inline-block-elements/</a>. But this doesn't come up a ton these days. In most realistic scenarios, we'd use flexbox or floats, and neither of those rendering modes suffer from this problem.</p>\n</blockquote>\n<p><strong>Inline elements can wrap</strong></p>\n<blockquote>\n<p>Inline elements can wrap. Which is also one of their trick - compared to block elements.</p>\n</blockquote>\n<blockquote>\n<p>Therefore they can create other shapes than rectangles:</p>\n</blockquote>\n<pre><code>&#x3C;p>\n  This is a paragraph with &#x3C;strong>some very bolded words in it&#x3C;/strong>.\n&#x3C;/p>\n</code></pre>\n<p><img src=\"https://i.imgur.com/3oBAWqY.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>It's worth noting that it's still considered \"one shape\". If we add a border:</p>\n</blockquote>\n<pre><code>strong {\n  border: 2px solid;\n}\n</code></pre>\n<blockquote>\n<p>...we can see that we don't get 2 discrete rectangles, but rather a single rectangle cut in half and repositioned:</p>\n</blockquote>\n<blockquote>\n<p>This is also a reason why some preperties do not work on them. Like vertical margins.</p>\n</blockquote>\n<blockquote>\n<p>Other properties like horizontal padding leads to unexpected results. Let's add some padding left and right to the wrapped text in the paragraph.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;p>\n  &#x3C;strong>\n    These words are broken up across many lines.\n  &#x3C;/strong>\n&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>strong {\n  padding-left: 8px;\n  padding-right: 8px;\n  background: peachpuff;\n}\n\np {\n  max-width: 125px;\n}\n</code></pre>\n<blockquote>\n<p>Result is unexpected. Padding is only applied to the tips - very beginning of the text and at the very end (last line - end of the text)</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/RrMA6bu.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>If we want to change this behaviour and applie this padding to each individual line, then we can do a black magic trick:</p>\n</blockquote>\n<pre><code>-webkit-box-decoration-break: clone;\nbox-decoration-break: clone;\n</code></pre>\n<p><img src=\"https://i.imgur.com/aOMZsoJ.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p><code>box-decoration-break</code> accepts two values: <code>slice</code> (default)and <code>clone</code>.</p>\n</blockquote>\n<blockquote>\n<p><code>slice</code> acts like a sushi roll being chopped. It's not a bunch of individual boxes, it's 1 long box, sliced into bits.</p>\n</blockquote>\n<blockquote>\n<p><code>clone</code> is interesting: it allows us to treat each segment as its own box, and copy the styles to each one. Instead of 1 long box, we have 4 boxes, each with the same styles.</p>\n</blockquote>\n<p><strong>Mutant inline-block</strong></p>\n<blockquote>\n<p><code>display: inline-block</code> is a weird fella. It is a combination of block and inline display.</p>\n</blockquote>\n<blockquote>\n<p>Essentially, inline-block allows you to drop a block element into an inline context. It's a block in inline's clothing. it's an element that internally acts like a block element, but externally acts like an inline element. The parent container will treat it as an inline element, since it's external. But the element itself can be styled like a block.</p>\n</blockquote>\n<blockquote>\n<p>This means that inline-block elements will go with the flow, but we will be able to apply block properties on it: like width, height, vertical margins, on hover events etc.</p>\n</blockquote>\n<blockquote>\n<p>Cute example is:</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;p>\n  &#x3C;strong>Warning:&#x3C;/strong> Alpaca may bite.\n&#x3C;/p>\n</code></pre>\n<p>CSS:</p>\n<pre><code>strong {\n  display: inline-block;\n  color: white;\n  background-color: red;\n  width: 100px;\n  text-align: center;\n}\n\nstrong:hover {\n  transform: scale(1.2);\n}\n</code></pre>\n<blockquote>\n<p>We've effectively turned our strong element into a block element, as far as its own CSS declarations are concerned. Everything between the four corners of the element is block in nature. But from the paragraph's perspective, it's an inline element. It lays it out as an inline element, in the inline direction beside the text.</p>\n</blockquote>\n<blockquote>\n<p>Disadvantage of inline-block elements is that they do not wrap 😥</p>\n</blockquote>\n<p><strong>WIDTH ALGORITHMS</strong></p>\n<blockquote>\n<p>Block elements have default width of <code>auto</code>. They grow to consume (100% of parent content width - child margins)</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;body>\n &#x3C;h1>\n  Hello World\n &#x3C;/h1>\n&#x3C;/body>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\n  margin: 0 16px;\n  background-color: chartreuse;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/tN9jXMu.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>If we set the width of a block element to 100% the result is surprising. It will grow outside of the frame because of the 2*16px margin</p>\n</blockquote>\n<blockquote>\n<p>Reason is that 100% with means 100% of the parent content tag under all circumstances. If body is 400px wide, then also h1 will be 400px wide. But because we have 32px margin, it will grow out of the frame.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/6ZM3s85.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Therefore again, block elements have default with <code>auto</code> and not <code>100%</code>. It's a subtle but important distinction: by default, block elements have dynamic sizing. They're context-aware.</p>\n</blockquote>\n<blockquote>\n<p>Broadly speaking, there are two kinds of values we can specify for width:</p>\n</blockquote>\n<ul>\n<li>Measurements (100%, 200px, 5rem)</li>\n<li>Keywords (auto, fit-content)</li>\n</ul>\n<blockquote>\n<p>Measurement-based values are either completely explicit (eg. 200px), or relative to the parent's available space (eg. 50%).</p>\n</blockquote>\n<blockquote>\n<p>Keywords, on the other hand, let us specify different sorts of behaviours depending on the context.</p>\n</blockquote>\n<blockquote>\n<p>Some of the keywords:</p>\n</blockquote>\n<blockquote>\n<p><code>auto</code> - allow to consume as much space as available given contraints (parent content size, margins, etc)</p>\n</blockquote>\n<blockquote>\n<p><code>min-content</code> - is an intrinsic value - it chooses the smallest available space <strong>based on the element itself / elements' children</strong>! It is different from <code>auto</code> or <code>measurements</code> which are <strong>extrinsic</strong> and <strong>based on the parent</strong> container. min-content will shrink the width to the minimum, so that each line contains at least one word. Whenever it encounters whitespace or a hyphenated word, it'll break it onto a new line.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;h1>\n  I am shrinking and shrinking, slowly fading away.\n&#x3C;/h1>\n</code></pre>\n<p>CSS:</p>\n<pre><code>h1 {\n  width: min-content;\n  background-color: deeppink;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/W94uNQa.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p><code>max-content</code> - it never adds any line-breaks. The element's width will be the smallest value that contains the content, without breaking it up. If the content is too big, it will create a vertical scroll bar. It pays no attention to the constraints set by the parent. It will size the element based purely on the length of its unbroken children. <code>max-content</code> is based also on children.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/oFSQXtP.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>How could this be useful? Only for those test which are short and we dont want to break them. It has an advantage that its size is only around the letter, it does not consume all 100% of available space as for auto. So adding a background-color would only color the background behind letters, not whole line:</p>\n</blockquote>\n<p>CSS</p>\n<pre><code>h1 {\n  width: max-content;\n  background-color: mediumspringgreen;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/dj8l4md.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>With width: auto</p>\n</blockquote>\n<p>CSS</p>\n<pre><code>h1 {\n  width: auto;\n  background-color: mediumspringgreen;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/KIMNK39.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p><code>fit-content</code> - its width is also based on the children. But it is the middle ground between min and max content. If that width can fit within the parent container, it behaves just like max-content, not adding any line-breaks. If the content is too wide to fit in the parent, however, it adds line-breaks as-needed to ensure it never exceeds the available space.</p>\n</blockquote>\n<p>HTML</p>\n<pre><code>&#x3C;h2>Short&#x3C;/h2>\n&#x3C;h2>A mid-length heading&#x3C;/h2>\n&#x3C;h2>The longest heading you've ever seen in your life, will it ever end, ahhhhh ohmigod 😬😬😬😬😬😬😬&#x3C;/h2>\n</code></pre>\n<p>CSS</p>\n<pre><code>h2 {\n  width: -moz-fit-content;\n  width: fit-content;\n  background-color: peachpuff;\n  margin-bottom: 16px;\n  padding: 8px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/XJqAhip.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p><code>fit-content</code> behaves just like <code>width: auto</code>. But it does not extend to the 100% width of the parent like auto down in the piture bellow. Which makes it better to use background color.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/w7BsFSn.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>If we dont want to or cant use fit-content but want to replicate its behaviour, we can use 2 workarounds:</p>\n</blockquote>\n<p>CSS</p>\n<pre><code>h2 {\n  max-width: max-content;\n}\n</code></pre>\n<blockquote>\n<p>Why does it work? Because we haven't changed the width property, the default block-level behavior will continue; the h2 will grow to fill the available horizontal space.</p>\n</blockquote>\n<blockquote>\n<p>Let's suppose we have a 600px container, and our h2 only has a few characters. The max-content size might be 100px. Because 100px is smaller than 600px, max-width will constrain the width.</p>\n</blockquote>\n<blockquote>\n<p>What if the h2 has a bunch of characters? Maybe max-content would be 1000px. This value is larger than the container size of 600px, and so max-width has no effect.</p>\n</blockquote>\n<blockquote>\n<p>Another solution is:</p>\n</blockquote>\n<p>CSS</p>\n<pre><code>h2 {\n  display: table;\n}\n</code></pre>\n<blockquote>\n<p>display: table causes elements to render using Table layout. This is the layout mode used by the <table> HTML tag. It's an alternative algorithm to flow layout or positioned layout.</p>\n</blockquote>\n<blockquote>\n<p>By default, tables will shrink to hold their contents, but are still block-level elements. This is exactly what we want in this case, though it is a bit of a hack; a table element expects to have table rows as children, not text.</p>\n</blockquote>\n<blockquote>\n<p>We can add constraints to an element's size using <code>min-width</code> and <code>max-width</code>. This is useful to account of possibly idfferent screen sizes. The particularly exciting thing about min-width and max-width is that they let us mix units. We can specify constraints in pixels, but set a percentage width.</p>\n</blockquote>\n<blockquote>\n<p><strong>DEFAULT VALUES</strong></p>\n</blockquote>\n<blockquote>\n<p>Each browser has its own default styles. It is in case we do not define styles for a certain element. These browser styles are called: <code>user agent styles</code>. User agent means browser.</p>\n</blockquote>\n<blockquote>\n<p>Among default browser styles are margin and padding. In order to reset the completely and start with clean slate, we can set:</p>\n</blockquote>\n<pre><code>* {\n  margin: 0;\n  padding: 0;\n}\n</code></pre>\n<p><strong>VISIBILITY</strong></p>\n<blockquote>\n<p>Visibility is a property which decides if an element is <code>hidden</code> or <code>visible</code>.</p>\n</blockquote>\n<ul>\n<li>hidden - element with not be visible</li>\n<li>visible - element will be visible</li>\n</ul>\n<blockquote>\n<p>Even if we set element to hidden, the website will still reserve space for it. So we are only hiding element, but the space where is will be generated will be visible.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;ul>\n  &#x3C;li>LOOK AT ME&#x3C;/li>\n  &#x3C;li class=\"incognito\">YOU CANNOT SEE ME :)&#x3C;/li>\n  &#x3C;li>I AM HERE&#x3C;/li>\n&#x3C;ul>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.incognito {\n  visibility: hidden;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/h28WH9G.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>If we want to hide an element completely, we set:</p>\n</blockquote>\n<p>CSS:</p>\n<pre><code>.incognito {\n  display:none;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/jxNsMVj.png\" title=\"Photo by Addania\"></p>\n<p><strong>BOX MODEL</strong></p>\n<blockquote>\n<p>The way width is calculated is based on the <code>box-sizing</code> property. It can hold 2 values: default <code>content-box</code> or <code>border-box</code></p>\n</blockquote>\n<blockquote>\n<p>By default it has value of <code>content-box</code></p>\n</blockquote>\n<blockquote>\n<p>Imagine code like this where section is 500px:</p>\n</blockquote>\n<pre><code>&#x3C;style>\n  section {\n    width: 500px;\n  }\n  .box {\n    width: 100%;\n    padding: 20px;\n    border: 4px solid;\n  }\n&#x3C;/style>\n&#x3C;section>\n  &#x3C;div class=\"box\">&#x3C;/div>\n&#x3C;/section>\n</code></pre>\n<blockquote>\n<p>What will be the width of the box? It will actually be 548px.</p>\n</blockquote>\n<pre><code>500px of content + 2*20px of padding + 2*4px of border\n</code></pre>\n<p><img src=\"https://i.imgur.com/6Kh7jZx.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>What will be the height? Height will be 48px</p>\n</blockquote>\n<pre><code>0px of content because we did not specify it + 2*20px padding +2*4px of border\n</code></pre>\n<blockquote>\n<p>But this is not what we want. We probably want that the content + padding + border is of the width of 500px. For that it is better to use <code>border-box</code> value for the <code>box-sizing</code> property</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/axhzVsH.png%22Photo%20by%20Addania%22\"></p>\n<blockquote>\n<p>Border-box will then calculate the width of the box based on its content, padding and the border</p>\n</blockquote>\n<blockquote>\n<p>Often in applications you would reset the box-sizing for whole document to global styles. In order to do so, copy this snippet any time you start a new project. It is way easier and intuitive to work with border-box then with the content-box:</p>\n</blockquote>\n<pre><code>*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n</code></pre>\n<p><strong>POSITIONINIG</strong></p>\n<blockquote>\n<p>HTML pages are rendered from left to right, from top to bottom.</p>\n</blockquote>\n<blockquote>\n<p>Following attributes define positioning of these elements:</p>\n</blockquote>\n<ul>\n<li>position</li>\n<li>display</li>\n<li>z-index</li>\n<li>float</li>\n<li>clear</li>\n</ul>\n<blockquote>\n<p>Let`s create 2 divs within another div and color them:\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2)\n}\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n}\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n}\n</code></pre>\n<blockquote>\n<p>By browser default, they will be displayed as block:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/ESLu9iC.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>User agent styles means browser default. Box will look like this:</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/K0Ponuc.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Child divs are generated beneath each other. Each child div takes up whole width of the parent container.</p>\n</blockquote>\n<blockquote>\n<p>If we wanted to position the boxes next to each other, we would need to apply display: inline-block to the boxes:</p>\n</blockquote>\n<pre><code>.box1{\n    display: inline-block;\n}\n.box2{\n    display: inline-block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/kLgULXj.png\" title=\"Photo by Addania\"></p>\n<p><strong>POSITION</strong></p>\n<blockquote>\n<p>Postion is a property that positions an element.</p>\n</blockquote>\n<blockquote>\n<p>Possible values:</p>\n</blockquote>\n<ul>\n<li>static- default value, elements render in order, as they appear in the document flow</li>\n<li>absolute- the element is positioned relative to its first positioned (not static) ancestor element</li>\n<li>fixed - the element is positioned relative to the browser viewport (visible screen)</li>\n<li>relative - the element is positioned relative to its normal (static) position, so \"left:20px\" adds 20 pixels to the element's LEFT position</li>\n<li>sticky- the element is positioned based on the user's scroll position</li>\n<li>initial- sets this property to its default value. Read about initial</li>\n<li>inherit - inherits this property from its parent element</li>\n</ul>\n<blockquote>\n<p>If not specified, position will be static. It does not need to be written explicitly.</p>\n</blockquote>\n<blockquote>\n<p>With position we can also define four offset properties:</p>\n</blockquote>\n<ul>\n<li>top - moves the element down.</li>\n<li>bottom - moves the element up.</li>\n<li>left - moves the element right.</li>\n<li>right - moves the element left.</li>\n</ul>\n<p><strong>POSITION RELATIVE</strong></p>\n<blockquote>\n<p>Our starting positioning of elements will be <code>display: block</code> and will look like this:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n}\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/K0Ponuc.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Please note we do not need to specify <code>display: block</code> explicitly, because it is browser default (user agent styles), but we can. Notice that the box 2 is rendered beneath box 1.</p>\n</blockquote>\n<blockquote>\n<p>We can then position our box 2 with <code>position: relative</code>. Relative means in this case relative to its <code>position: static</code> which is the default where browser would render it. Considering we use <code>display: block</code> then <code>position: static</code> means beneath the box 1.</p>\n</blockquote>\n<blockquote>\n<p>There will be no visible change to our starting point unless we add some offset positioning. For example offset 10px from top and offset of 30px from right:</p>\n</blockquote>\n<pre><code>.box2{\n    display: block;\n    position: relative;\n    top: 10px;\n    left: 30px;\n}\n</code></pre>\n<blockquote>\n<p>Resulting change will look like this.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/s3PQ6ES.png\" title=\"Photo by Addania\"></p>\n<p><strong>POSITION FIXED</strong></p>\n<blockquote>\n<p>Our starting positioning of elements will be <code>display: block</code> and will look like this:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;div class=\"header\">&#x3C;/div>\n&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.header {\n    width: 400px;\n    height: 120px;\n    background-color: turquoise;\n}\n.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n}\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/RNCpJBn.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Please note we do not need to specify <code>display: block</code> explicitly, because it is browser default (user agent styles), but we can. Notice that the box 2 is rendered beneath box 1.</p>\n</blockquote>\n<blockquote>\n<p>We can then position our box 2 with <code>position: fixed</code>. Fixed means in this case relative to to the viewport (visible browser window).</p>\n</blockquote>\n<blockquote>\n<p>There will be no visible change to our starting point unless we add some offset positioning. For example offset 0px from top and offset of 60px from right:</p>\n</blockquote>\n<pre><code>.box2{\n    display: block;\n    position: fixed;\n    top: 0px;\n    left: 60px;\n}\n</code></pre>\n<blockquote>\n<p>Resulting change will look like this.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/79Z8GSK.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Worth pointing out is also how elements with fixed position behave while scrolling. They would not be scrolled away from the viewport. They will remain in the visible screen.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/bMA0qDA.gif\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Navigation bars are often set with the position fixed and then the next element below them is set to relative with offset top: xx px.</p>\n</blockquote>\n<p><strong>POSITION ABSOLUTE</strong></p>\n<blockquote>\n<p>Our starting positioning of elements will be <code>display: block</code> and will look like this:</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;div class=\"header\">&#x3C;/div>\n&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.header {\n    width: 400px;\n    height: 120px;\n    background-color: turquoise;\n}\n.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n    position: absolute;\n}\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/RNCpJBn.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Please note we do not need to specify <code>display: block</code> explicitly, because it is browser default (user agent styles), but we can. Notice that the box 2 is rendered beneath box 1.</p>\n</blockquote>\n<blockquote>\n<p>We can then position our box 2 with <code>position: absolute</code>. Absolute means in this case relative to to the <code>next parent which has either position: relative or position: absolute</code>.</p>\n</blockquote>\n<blockquote>\n<p>There will be no visible change to our starting point unless we add some offset positioning. For example offset 10px from top and offset of 30px from right:</p>\n</blockquote>\n<pre><code>.box2{\n    display: block;\n    position: absolute;\n    top: 5px;\n    left:60px;\n}\n</code></pre>\n<blockquote>\n<p>Resulting change will look like this.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/vHZBhRW.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Please note, that it is critical, that the next parent component (in our case <code>.parent-block</code>) has <code>position: absolute</code> or <code>position: relative</code>. If it didn`t, it would find next parent component with such position. In our case the only next parent would be the html tag itself. So it would be position in respect to it.\nCSS:</p>\n</blockquote>\n<pre><code>.header {\n    width: 400px;\n    height: 120px;\n    background-color: turquoise;\n}\n.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n}\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n    position: absolute;\n    top: 5px;\n    left:60px;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/4r6W7ZQ.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Important about position: absolute is that when an element’s position is set to absolute all other elements on the page will ignore the element and act like it is not present on the page.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;div class=\"header\">&#x3C;/div>\n&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n    &#x3C;div class=\"box3\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS:</p>\n<pre><code>.header {\n    width: 400px;\n    height: 120px;\n    background-color: turquoise;\n    display: block;\n}\n\n.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n    position: relative;\n}\n\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n    position: absolute;\n    top: 5px;\n    left:60px;\n}\n\n.box3{\n    width: 100px;\n    height: 100px;\n    background-color: blueviolet;\n    display: block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/QLxSgFG.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Notice how new box 3 (violet) completely ignores the box2 and is positioned directly beneath the box 1</p>\n</blockquote>\n<blockquote>\n<p>Worth pointing out is also how elements with absolute position behave while scrolling. They would be scrolled away from the viewport</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/sNPRZZX.gif\" title=\"Photo by Addania\"></p>\n<p><strong>Z INDEX</strong></p>\n<blockquote>\n<p>When there are multiple elements on page which overlap we can control with Z index which element is infront or behind another. The z-index property controls how far “back” or how far “forward” an element should appear on the web page when elements overlap. This can be thought of the depth of elements, with deeper elements appearing behind shallower elements. The higher the z index, the more in front element is. So element with z index 2 will be in front of element with z index 1</p>\n</blockquote>\n<blockquote>\n<p>Imagine code like this:\nHTML</p>\n</blockquote>\n<pre><code>&#x3C;div class=\"header\">&#x3C;/div>\n&#x3C;div class=\"parent-block\">\n    &#x3C;div class=\"box1\">&#x3C;/div>\n    &#x3C;div class=\"box2\">&#x3C;/div>\n    &#x3C;div class=\"box3\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS</p>\n<pre><code>.header {\n    width: 400px;\n    height: 120px;\n    background-color: turquoise;\n    display: block;\n}\n\n.parent-block {\n    width: 400px;\n    height: 400px;\n    background-color: rgba(173, 27, 218, 0.2);\n    position: relative;\n}\n\n.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n}\n\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n    position: absolute;\n    top: 20px;\n    left:40px;\n}\n\n.box3{\n    width: 100px;\n    height: 100px;\n    background-color: blueviolet;\n    display: block;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/HJIzgk1.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>What if we want the second box appear behind the box 1 and 3? We can set their z-indices\nCSS</p>\n</blockquote>\n<pre><code>.box1{\n    width: 100px;\n    height: 100px;\n    background-color: purple ;\n    display: block;\n    position: relative;\n    z-index: 2;\n}\n\n.box2{\n    width: 100px;\n    height: 100px;\n    background-color: orchid;\n    display: block;\n    position: absolute;\n    top: 20px;\n    left:40px;\n    z-index: 1;\n}\n\n.box3{\n    width: 100px;\n    height: 100px;\n    background-color: blueviolet;\n    display: block;\n    position: relative;\n    z-index: 2;\n}\n</code></pre>\n<blockquote>\n<p>Please not it is super important that we st box 1 and 3 to position: relative, because z index does not work on static objects (position:static is default if we do not set any position). Result will look like this</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/5VM9sZV.png\" title=\"Photo by Addania\"></p>\n<p><strong>DISPLAY</strong></p>\n<blockquote>\n<p>Each HTML element has a default display value that determines if it can share horizontal space with other elements or not. Some elements fill the entire browser width from left to right regardless of the size of their content. But other elements only take up as much horizontal space as their content needs and can be directly next to other elements.</p>\n</blockquote>\n<p><strong>INLINE DISPLAY</strong></p>\n<blockquote>\n<p>Default display of some tags, for example <code>&#x3C;em></code>, <code>&#x3C;strong></code>, <code>&#x3C;button></code> or <code>&#x3C;a></code>, is called <code>inline</code>. Inline elements have a box that wraps tightly around their content, only taking up amount of space which is necessary to display their content and not requiring a new line after every new element.</p>\n</blockquote>\n<blockquote>\n<p>Height and width of such elements cannot be specified in the CSS document. For example, the text of <code>&#x3C;a></code> tag will, by default, be displayed on the same line as the surrounding text, and it will only be as wide as necessary to contain its content.</p>\n</blockquote>\n<blockquote>\n<p>Inline elements cannot be altered in size with height or width CSS properties.</p>\n</blockquote>\n<p>HTML:</p>\n<pre><code>&#x3C;button>Click me!&#x3C;/button>&#x3C;button>Me too, please?&#x3C;/button>\n</code></pre>\n<p><img src=\"https://i.imgur.com/NKk2d26.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Some elements by default have property display: block, which renderes them beneath each other. For example heading tags or divs\nHTML:</p>\n</blockquote>\n<pre><code>&#x3C;button>Click me!&#x3C;/button>&#x3C;button>Me too, please?&#x3C;/button>\n&#x3C;h3>Hello&#x3C;/h3>\n&#x3C;h3> Universe!&#x3C;/h3>\n</code></pre>\n<p><img src=\"https://i.imgur.com/ybaY2aS.png\" title=\"Photo by Addania\"></p>\n<blockquote>\n<p>Display property provides the ability to make any element an inline element, also elements that are not inline by default such as paragraphs, divs or headings.\nCSS:</p>\n</blockquote>\n<pre><code>h3 {\n  display: inline;\n}\n</code></pre>\n<p><img src=\"https://i.imgur.com/gIVa8dd.png%22Photo%20by%20Addania%22\"></p>\n<p>The CSS in the example above will change the display of all <code>&#x3C;h1></code> elements to inline. The browser will render <code>&#x3C;h1></code> elements on the same line as other inline elements immediately before or after them (if there are any).</p>\n<p><strong>ROTATION</strong></p>\n<blockquote>\n<p>The <code>t⁠r⁠a⁠n⁠s⁠f⁠o⁠r⁠m</code> property can rotate images and other elements. It accepts functions as values. To add a function that rotates an image, we type in <code>r⁠o⁠t⁠a⁠t⁠e⁠(⁠)</code>. We enter there number of degrees we want to rotate image.90deg means 90 degrees clickwise</p>\n</blockquote>\n<pre><code>img {\ntransform: rotate(90deg);\n}\n</code></pre>\n<blockquote>\n<p>To rotate an image anti-clockwise we add minus sign -45deg</p>\n</blockquote>\n<pre><code>img {\ntransform: rotate(-45deg);\n}\n</code></pre>\n<blockquote>\n<p>We can rotate other elements, not only images. For example buttons</p>\n</blockquote>\n<pre><code>button {\ntransform: rotate(-90deg);\n}\n</code></pre>\n<p><strong>Media queries</strong></p>\n<blockquote>\n<p>Media queries are very useful when we want to have diffrent styling based on the different screen sizes, for example large, medium or small (which is usually a mobile).\nIn a project we usually start developing the layout how it should look on the mobile phone and defining styles for the mobile first with for example defning the widths:</p>\n</blockquote>\n<pre><code class=\"language-es6\">.Burger {\n  width: 100%;\n  height: 250px;\n}\n</code></pre>\n<blockquote>\n<p>Then maybe on medium screen sizes we define the width of</p>\n</blockquote>\n<pre><code class=\"language-es6\">@media (min-width: 500px) and (min-height: 401px) {\n  .Burger {\n    width: 450px;\n    height: 400px;\n  }\n}\n</code></pre>\n<blockquote>\n<p>Then on the large screen we want to use a different size.</p>\n</blockquote>\n<pre><code class=\"language-es6\">@media (min-width: 1000px) and (min-height: 700px) {\n  .Burger {\n    width: 700px;\n    height: 600px;\n  }\n}\n</code></pre>\n<blockquote>\n<p>References:</p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/Getting_started\">https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/Getting_started</a></p>\n<p>Amazing CSS courses for beginners:</p>\n<p><a href=\"https://css-for-js.dev/\">https://css-for-js.dev/</a></p>\n<p><a href=\"https://www.codecademy.com/courses/learn-css/\">https://www.codecademy.com/courses/learn-css/</a></p>\n<p><img src=\"https://i.imgur.com/Y25H36n.jpg\" title=\"Photo by Lisa Fotios from Pexels\"></p>","frontmatter":{"title":"CSS"},"excerpt":"Foreword This entire section are my personal notes from 2 amazing CSS courses: https://css-for-js.dev/ https://www.codecademy.com/courses…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CSS/"}}}